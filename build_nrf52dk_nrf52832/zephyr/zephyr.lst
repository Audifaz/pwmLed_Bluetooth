
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	forced_pm_state = state;
#endif
}

enum power_states _sys_suspend(int32_t ticks)
{
   0:	20005520 	.word	0x20005520
	bool deep_sleep;
#if CONFIG_DEVICE_POWER_MANAGEMENT
	bool low_power = false;
#endif

	pm_state = (forced_pm_state == SYS_POWER_STATE_AUTO) ?
   4:	00015561 	.word	0x00015561
		   sys_pm_policy_next_state(ticks) : forced_pm_state;
   8:	00024953 	.word	0x00024953
   c:	00015591 	.word	0x00015591
  10:	00015591 	.word	0x00015591

	if (pm_state == SYS_POWER_STATE_ACTIVE) {
  14:	00015591 	.word	0x00015591
  18:	00015591 	.word	0x00015591
	...
#endif
	}

	/* Enter power state */
	sys_pm_debug_start_timer();
	sys_set_power_state(pm_state);
  2c:	000154bd 	.word	0x000154bd
		sys_pm_resume_devices();
	}
#endif
	sys_pm_log_debug_info(pm_state);

	if (!post_ops_done) {
  30:	00015591 	.word	0x00015591
		post_ops_done = 1;
		/* clear forced_pm_state */
		forced_pm_state = SYS_POWER_STATE_AUTO;
		sys_pm_notify_power_state_exit(pm_state);
  34:	00000000 	.word	0x00000000
		post_ops_done = 1;
  38:	00015465 	.word	0x00015465
		forced_pm_state = SYS_POWER_STATE_AUTO;
  3c:	00014cc1 	.word	0x00014cc1

00000040 <_irq_vector_table>:
		sys_pm_notify_power_state_exit(pm_state);
  40:	00015521 000269eb 00015521 00015521     !U...i..!U..!U..
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00015521 00015521 00015521 00015521     !U..!U..!U..!U..
  60:	000269b3 00015521 00015521 000269d1     .i..!U..!U...i..
  70:	00015521 00015521 00015521 00015521     !U..!U..!U..!U..
  80:	00015521 00015521 00015521 00015521     !U..!U..!U..!U..
  90:	00015521 00015521 00015521 00015521     !U..!U..!U..!U..
  a0:	00015521 00015521 00015521 00015521     !U..!U..!U..!U..
  b0:	00015521 00015521 00015521 00015521     !U..!U..!U..!U..
  c0:	00015521 00015521 00015521 00015521     !U..!U..!U..!U..
  d0:	00015521 00015521 00015521              !U..!U..!U..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b96c 	b.w	3d0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8082 	bne.w	226 <CONFIG_FLASH_SIZE+0x26>
     122:	428a      	cmp	r2, r1
     124:	4617      	mov	r7, r2
     126:	d946      	bls.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     128:	fab2 f282 	clz	r2, r2
     12c:	b14a      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa05 f302 	lsl.w	r3, r5, r2
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
     13c:	ea41 0e03 	orr.w	lr, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 4817 	mov.w	r8, r7, lsr #16
     146:	0c23      	lsrs	r3, r4, #16
     148:	fbbe fcf8 	udiv	ip, lr, r8
     14c:	b2b9      	uxth	r1, r7
     14e:	fb08 ee1c 	mls	lr, r8, ip, lr
     152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     156:	fb0c f001 	mul.w	r0, ip, r1
     15a:	4298      	cmp	r0, r3
     15c:	d90a      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15e:	18fb      	adds	r3, r7, r3
     160:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     164:	f080 8116 	bcs.w	394 <CONFIG_FLASH_SIZE+0x194>
     168:	4298      	cmp	r0, r3
     16a:	f240 8113 	bls.w	394 <CONFIG_FLASH_SIZE+0x194>
     16e:	f1ac 0c02 	sub.w	ip, ip, #2
     172:	443b      	add	r3, r7
     174:	1a1b      	subs	r3, r3, r0
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f8 	udiv	r0, r3, r8
     17c:	fb08 3310 	mls	r3, r8, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f101 	mul.w	r1, r0, r1
     188:	42a1      	cmp	r1, r4
     18a:	d909      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     18c:	193c      	adds	r4, r7, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     192:	f080 8101 	bcs.w	398 <CONFIG_FLASH_SIZE+0x198>
     196:	42a1      	cmp	r1, r4
     198:	f240 80fe 	bls.w	398 <CONFIG_FLASH_SIZE+0x198>
     19c:	3802      	subs	r0, #2
     19e:	443c      	add	r4, r7
     1a0:	1a64      	subs	r4, r4, r1
     1a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a6:	2100      	movs	r1, #0
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c6 4300 	strd	r4, r3, [r6]
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b6:	b902      	cbnz	r2, 1ba <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x70>
     1b8:	deff      	udf	#255	; 0xff
     1ba:	fab2 f282 	clz	r2, r2
     1be:	2a00      	cmp	r2, #0
     1c0:	d14f      	bne.n	262 <CONFIG_FLASH_SIZE+0x62>
     1c2:	1bcb      	subs	r3, r1, r7
     1c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c8:	fa1f f887 	uxth.w	r8, r7
     1cc:	2101      	movs	r1, #1
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c25      	lsrs	r5, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1dc:	fb08 f30c 	mul.w	r3, r8, ip
     1e0:	42ab      	cmp	r3, r5
     1e2:	d907      	bls.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     1e4:	197d      	adds	r5, r7, r5
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1ea:	d202      	bcs.n	1f2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa8>
     1ec:	42ab      	cmp	r3, r5
     1ee:	f200 80e7 	bhi.w	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     1f2:	4684      	mov	ip, r0
     1f4:	1aed      	subs	r5, r5, r3
     1f6:	b2a3      	uxth	r3, r4
     1f8:	fbb5 f0fe 	udiv	r0, r5, lr
     1fc:	fb0e 5510 	mls	r5, lr, r0, r5
     200:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     204:	fb08 f800 	mul.w	r8, r8, r0
     208:	45a0      	cmp	r8, r4
     20a:	d907      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     20c:	193c      	adds	r4, r7, r4
     20e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     212:	d202      	bcs.n	21a <CONFIG_FLASH_SIZE+0x1a>
     214:	45a0      	cmp	r8, r4
     216:	f200 80d7 	bhi.w	3c8 <CONFIG_FLASH_SIZE+0x1c8>
     21a:	4618      	mov	r0, r3
     21c:	eba4 0408 	sub.w	r4, r4, r8
     220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     224:	e7c0      	b.n	1a8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5e>
     226:	428b      	cmp	r3, r1
     228:	d908      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22a:	2e00      	cmp	r6, #0
     22c:	f000 80af 	beq.w	38e <CONFIG_FLASH_SIZE+0x18e>
     230:	2100      	movs	r1, #0
     232:	e9c6 0500 	strd	r0, r5, [r6]
     236:	4608      	mov	r0, r1
     238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23c:	fab3 f183 	clz	r1, r3
     240:	2900      	cmp	r1, #0
     242:	d14b      	bne.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     244:	42ab      	cmp	r3, r5
     246:	d302      	bcc.n	24e <CONFIG_FLASH_SIZE+0x4e>
     248:	4282      	cmp	r2, r0
     24a:	f200 80b7 	bhi.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     24e:	1a84      	subs	r4, r0, r2
     250:	eb65 0303 	sbc.w	r3, r5, r3
     254:	2001      	movs	r0, #1
     256:	469e      	mov	lr, r3
     258:	2e00      	cmp	r6, #0
     25a:	d0aa      	beq.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     25c:	e9c6 4e00 	strd	r4, lr, [r6]
     260:	e7a7      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     262:	f1c2 0c20 	rsb	ip, r2, #32
     266:	fa01 f302 	lsl.w	r3, r1, r2
     26a:	4097      	lsls	r7, r2
     26c:	fa20 f00c 	lsr.w	r0, r0, ip
     270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     274:	fa21 fc0c 	lsr.w	ip, r1, ip
     278:	4318      	orrs	r0, r3
     27a:	fbbc f1fe 	udiv	r1, ip, lr
     27e:	0c05      	lsrs	r5, r0, #16
     280:	fb0e cc11 	mls	ip, lr, r1, ip
     284:	fa1f f887 	uxth.w	r8, r7
     288:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     28c:	fb01 f308 	mul.w	r3, r1, r8
     290:	42ab      	cmp	r3, r5
     292:	fa04 f402 	lsl.w	r4, r4, r2
     296:	d909      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     298:	197d      	adds	r5, r7, r5
     29a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     29e:	f080 808b 	bcs.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f240 8088 	bls.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     2a8:	3902      	subs	r1, #2
     2aa:	443d      	add	r5, r7
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	b285      	uxth	r5, r0
     2b0:	fbb3 f0fe 	udiv	r0, r3, lr
     2b4:	fb0e 3310 	mls	r3, lr, r0, r3
     2b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2bc:	fb00 f308 	mul.w	r3, r0, r8
     2c0:	42ab      	cmp	r3, r5
     2c2:	d907      	bls.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     2c4:	197d      	adds	r5, r7, r5
     2c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ca:	d271      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     2cc:	42ab      	cmp	r3, r5
     2ce:	d96f      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     2d0:	3802      	subs	r0, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2da:	e778      	b.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     2dc:	f1c1 0c20 	rsb	ip, r1, #32
     2e0:	408b      	lsls	r3, r1
     2e2:	fa22 f70c 	lsr.w	r7, r2, ip
     2e6:	431f      	orrs	r7, r3
     2e8:	fa20 f40c 	lsr.w	r4, r0, ip
     2ec:	fa05 f301 	lsl.w	r3, r5, r1
     2f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f4:	fa25 f50c 	lsr.w	r5, r5, ip
     2f8:	431c      	orrs	r4, r3
     2fa:	0c23      	lsrs	r3, r4, #16
     2fc:	fbb5 f9fe 	udiv	r9, r5, lr
     300:	fa1f f887 	uxth.w	r8, r7
     304:	fb0e 5519 	mls	r5, lr, r9, r5
     308:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     30c:	fb09 fa08 	mul.w	sl, r9, r8
     310:	45aa      	cmp	sl, r5
     312:	fa02 f201 	lsl.w	r2, r2, r1
     316:	fa00 f301 	lsl.w	r3, r0, r1
     31a:	d908      	bls.n	32e <CONFIG_FLASH_SIZE+0x12e>
     31c:	197d      	adds	r5, r7, r5
     31e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     322:	d247      	bcs.n	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     324:	45aa      	cmp	sl, r5
     326:	d945      	bls.n	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     328:	f1a9 0902 	sub.w	r9, r9, #2
     32c:	443d      	add	r5, r7
     32e:	eba5 050a 	sub.w	r5, r5, sl
     332:	b2a4      	uxth	r4, r4
     334:	fbb5 f0fe 	udiv	r0, r5, lr
     338:	fb0e 5510 	mls	r5, lr, r0, r5
     33c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45a0      	cmp	r8, r4
     346:	d907      	bls.n	358 <CONFIG_FLASH_SIZE+0x158>
     348:	193c      	adds	r4, r7, r4
     34a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     34e:	d22d      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     350:	45a0      	cmp	r8, r4
     352:	d92b      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454c      	cmp	r4, r9
     366:	46c6      	mov	lr, r8
     368:	464d      	mov	r5, r9
     36a:	d319      	bcc.n	3a0 <CONFIG_FLASH_SIZE+0x1a0>
     36c:	d016      	beq.n	39c <CONFIG_FLASH_SIZE+0x19c>
     36e:	b15e      	cbz	r6, 388 <CONFIG_FLASH_SIZE+0x188>
     370:	ebb3 020e 	subs.w	r2, r3, lr
     374:	eb64 0405 	sbc.w	r4, r4, r5
     378:	fa04 fc0c 	lsl.w	ip, r4, ip
     37c:	40ca      	lsrs	r2, r1
     37e:	ea4c 0202 	orr.w	r2, ip, r2
     382:	40cc      	lsrs	r4, r1
     384:	e9c6 2400 	strd	r2, r4, [r6]
     388:	2100      	movs	r1, #0
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	4631      	mov	r1, r6
     390:	4630      	mov	r0, r6
     392:	e70e      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     394:	46ac      	mov	ip, r5
     396:	e6ed      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     398:	4618      	mov	r0, r3
     39a:	e701      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     39c:	4543      	cmp	r3, r8
     39e:	d2e6      	bcs.n	36e <CONFIG_FLASH_SIZE+0x16e>
     3a0:	ebb8 0e02 	subs.w	lr, r8, r2
     3a4:	eb69 0507 	sbc.w	r5, r9, r7
     3a8:	3801      	subs	r0, #1
     3aa:	e7e0      	b.n	36e <CONFIG_FLASH_SIZE+0x16e>
     3ac:	4628      	mov	r0, r5
     3ae:	e7d3      	b.n	358 <CONFIG_FLASH_SIZE+0x158>
     3b0:	4660      	mov	r0, ip
     3b2:	e78f      	b.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     3b4:	4681      	mov	r9, r0
     3b6:	e7ba      	b.n	32e <CONFIG_FLASH_SIZE+0x12e>
     3b8:	4661      	mov	r1, ip
     3ba:	e777      	b.n	2ac <CONFIG_FLASH_SIZE+0xac>
     3bc:	4608      	mov	r0, r1
     3be:	e74b      	b.n	258 <CONFIG_FLASH_SIZE+0x58>
     3c0:	f1ac 0c02 	sub.w	ip, ip, #2
     3c4:	443d      	add	r5, r7
     3c6:	e715      	b.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     3c8:	3802      	subs	r0, #2
     3ca:	443c      	add	r4, r7
     3cc:	e726      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d6:	4615      	mov	r5, r2
     3d8:	4a0a      	ldr	r2, [pc, #40]	; (404 <CONFIG_MAIN_STACK_SIZE+0x4>)
     3da:	461c      	mov	r4, r3
     3dc:	6856      	ldr	r6, [r2, #4]
     3de:	b12e      	cbz	r6, 3ec <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     3e0:	b001      	add	sp, #4
     3e2:	462a      	mov	r2, r5
     3e4:	46b4      	mov	ip, r6
     3e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3ea:	4760      	bx	ip
     3ec:	2000      	movs	r0, #0
     3ee:	f88d 0000 	strb.w	r0, [sp]
     3f2:	4668      	mov	r0, sp
     3f4:	f00e fbf0 	bl	ebd8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f8:	f89d 0000 	ldrb.w	r0, [sp]
     3fc:	1a28      	subs	r0, r5, r0
     3fe:	7020      	strb	r0, [r4, #0]
     400:	2000      	movs	r0, #0
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     404:	20000000 	.word	0x20000000

00000408 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     408:	4801      	ldr	r0, [pc, #4]	; (410 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     40a:	7800      	ldrb	r0, [r0, #0]
     40c:	4770      	bx	lr
     40e:	0000      	.short	0x0000
     410:	20000008 	.word	0x20000008

00000414 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     414:	4904      	ldr	r1, [pc, #16]	; (428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14>)
     416:	780a      	ldrb	r2, [r1, #0]
     418:	4290      	cmp	r0, r2
     41a:	d301      	bcc.n	420 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     41c:	2000      	movs	r0, #0
     41e:	4770      	bx	lr
     420:	6849      	ldr	r1, [r1, #4]
     422:	eb01 1040 	add.w	r0, r1, r0, lsl #5
     426:	4770      	bx	lr
     428:	20000008 	.word	0x20000008
     42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     430:	4615      	mov	r5, r2
     432:	4604      	mov	r4, r0
     434:	f100 0208 	add.w	r2, r0, #8
     438:	1cc8      	adds	r0, r1, #3
     43a:	4241      	negs	r1, r0
     43c:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 4e8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9c>
     440:	461f      	mov	r7, r3
     442:	1a28      	subs	r0, r5, r0
     444:	2300      	movs	r3, #0
     446:	9e08      	ldr	r6, [sp, #32]
     448:	ebbc 0c05 	subs.w	ip, ip, r5
     44c:	419b      	sbcs	r3, r3
     44e:	d204      	bcs.n	45a <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     450:	f240 51f5 	movw	r1, #1525	; 0x5f5
     454:	2070      	movs	r0, #112	; 0x70
     456:	f003 f8b9 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     45a:	4b24      	ldr	r3, [pc, #144]	; (4ec <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa0>)
     45c:	4299      	cmp	r1, r3
     45e:	dd04      	ble.n	46a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     460:	f240 51f6 	movw	r1, #1526	; 0x5f6
     464:	2070      	movs	r0, #112	; 0x70
     466:	f003 f8b1 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     46a:	4b21      	ldr	r3, [pc, #132]	; (4f0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa4>)
     46c:	4299      	cmp	r1, r3
     46e:	da04      	bge.n	47a <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2e>
     470:	f240 51f7 	movw	r1, #1527	; 0x5f7
     474:	2070      	movs	r0, #112	; 0x70
     476:	f003 f8a9 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     47a:	491e      	ldr	r1, [pc, #120]	; (4f4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa8>)
     47c:	4288      	cmp	r0, r1
     47e:	bfa8      	it	ge
     480:	491d      	ldrge	r1, [pc, #116]	; (4f8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xac>)
     482:	da03      	bge.n	48c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>
     484:	2800      	cmp	r0, #0
     486:	bfb8      	it	lt
     488:	491a      	ldrlt	r1, [pc, #104]	; (4f4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa8>)
     48a:	da00      	bge.n	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x42>
     48c:	1840      	adds	r0, r0, r1
     48e:	4621      	mov	r1, r4
     490:	f002 fd56 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     494:	6820      	ldr	r0, [r4, #0]
     496:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     49a:	6021      	str	r1, [r4, #0]
     49c:	19e8      	adds	r0, r5, r7
     49e:	4917      	ldr	r1, [pc, #92]	; (4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>)
     4a0:	1cc0      	adds	r0, r0, #3
     4a2:	b136      	cbz	r6, 4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x66>
     4a4:	2e01      	cmp	r6, #1
     4a6:	d00b      	beq.n	4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x74>
     4a8:	f240 6199 	movw	r1, #1689	; 0x699
     4ac:	2070      	movs	r0, #112	; 0x70
     4ae:	f003 f88d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4b2:	6809      	ldr	r1, [r1, #0]
     4b4:	7809      	ldrb	r1, [r1, #0]
     4b6:	297a      	cmp	r1, #122	; 0x7a
     4b8:	bf98      	it	ls
     4ba:	217a      	movls	r1, #122	; 0x7a
     4bc:	4408      	add	r0, r1
     4be:	e002      	b.n	4c6 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x7a>
     4c0:	6809      	ldr	r1, [r1, #0]
     4c2:	7809      	ldrb	r1, [r1, #0]
     4c4:	4408      	add	r0, r1
     4c6:	466a      	mov	r2, sp
     4c8:	1d21      	adds	r1, r4, #4
     4ca:	f002 fd39 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     4ce:	f99d 0000 	ldrsb.w	r0, [sp]
     4d2:	2800      	cmp	r0, #0
     4d4:	6860      	ldr	r0, [r4, #4]
     4d6:	bfc4      	itt	gt
     4d8:	1c40      	addgt	r0, r0, #1
     4da:	6060      	strgt	r0, [r4, #4]
     4dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4e0:	6060      	str	r0, [r4, #4]
     4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     4e6:	0000      	.short	0x0000
     4e8:	1e847fff 	.word	0x1e847fff
     4ec:	07a12000 	.word	0x07a12000
     4f0:	f85ee000 	.word	0xf85ee000
     4f4:	1e848000 	.word	0x1e848000
     4f8:	e17b8000 	.word	0xe17b8000
     4fc:	20000e7c 	.word	0x20000e7c
     500:	b570      	push	{r4, r5, r6, lr}
     502:	4605      	mov	r5, r0
     504:	2a20      	cmp	r2, #32
     506:	d027      	beq.n	558 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10c>
     508:	4819      	ldr	r0, [pc, #100]	; (570 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x124>)
     50a:	4c1a      	ldr	r4, [pc, #104]	; (574 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x128>)
     50c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     510:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     518:	2920      	cmp	r1, #32
     51a:	d022      	beq.n	562 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x116>
     51c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     520:	7840      	ldrb	r0, [r0, #1]
     522:	784c      	ldrb	r4, [r1, #1]
     524:	7048      	strb	r0, [r1, #1]
     526:	4620      	mov	r0, r4
     528:	4601      	mov	r1, r0
     52a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     52e:	4291      	cmp	r1, r2
     530:	7005      	strb	r5, [r0, #0]
     532:	7840      	ldrb	r0, [r0, #1]
     534:	d1f8      	bne.n	528 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xdc>
     536:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
     53a:	2a20      	cmp	r2, #32
     53c:	bf1a      	itte	ne
     53e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     542:	7054      	strbne	r4, [r2, #1]
     544:	f883 4025 	strbeq.w	r4, [r3, #37]	; 0x25
     548:	2220      	movs	r2, #32
     54a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     54e:	f88c 2001 	strb.w	r2, [ip, #1]
     552:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
     556:	bd70      	pop	{r4, r5, r6, pc}
     558:	f240 21aa 	movw	r1, #682	; 0x2aa
     55c:	2070      	movs	r0, #112	; 0x70
     55e:	f003 f835 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     562:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
     566:	7840      	ldrb	r0, [r0, #1]
     568:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
     56c:	e7db      	b.n	526 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xda>
     56e:	0000      	.short	0x0000
     570:	20000dfc 	.word	0x20000dfc
     574:	20000e7c 	.word	0x20000e7c
     578:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     57c:	b087      	sub	sp, #28
     57e:	4604      	mov	r4, r0
     580:	2000      	movs	r0, #0
     582:	9002      	str	r0, [sp, #8]
     584:	489e      	ldr	r0, [pc, #632]	; (800 <CONFIG_ISR_STACK_SIZE>)
     586:	9f08      	ldr	r7, [sp, #32]
     588:	4e9e      	ldr	r6, [pc, #632]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     58a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     58e:	9003      	str	r0, [sp, #12]
     590:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     594:	2020      	movs	r0, #32
     596:	46e9      	mov	r9, sp
     598:	f10d 0804 	add.w	r8, sp, #4
     59c:	f88d 0000 	strb.w	r0, [sp]
     5a0:	f506 7a20 	add.w	sl, r6, #640	; 0x280
     5a4:	2d20      	cmp	r5, #32
     5a6:	bf18      	it	ne
     5a8:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     5ac:	d032      	beq.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     5ae:	bf00      	nop
     5b0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     5b4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     5b8:	1d01      	adds	r1, r0, #4
     5ba:	6880      	ldr	r0, [r0, #8]
     5bc:	6822      	ldr	r2, [r4, #0]
     5be:	1a10      	subs	r0, r2, r0
     5c0:	0200      	lsls	r0, r0, #8
     5c2:	17c2      	asrs	r2, r0, #31
     5c4:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5c8:	1200      	asrs	r0, r0, #8
     5ca:	d423      	bmi.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     5cc:	8960      	ldrh	r0, [r4, #10]
     5ce:	b1d0      	cbz	r0, 606 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     5d0:	8948      	ldrh	r0, [r1, #10]
     5d2:	b9c0      	cbnz	r0, 606 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     5d4:	4608      	mov	r0, r1
     5d6:	f000 fce7 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     5da:	aa05      	add	r2, sp, #20
     5dc:	a904      	add	r1, sp, #16
     5de:	f002 fcaf 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     5e2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     5e6:	2800      	cmp	r0, #0
     5e8:	bfcc      	ite	gt
     5ea:	2001      	movgt	r0, #1
     5ec:	2000      	movle	r0, #0
     5ee:	f100 0133 	add.w	r1, r0, #51	; 0x33
     5f2:	9804      	ldr	r0, [sp, #16]
     5f4:	6822      	ldr	r2, [r4, #0]
     5f6:	1a10      	subs	r0, r2, r0
     5f8:	0200      	lsls	r0, r0, #8
     5fa:	17c2      	asrs	r2, r0, #31
     5fc:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     600:	1200      	asrs	r0, r0, #8
     602:	4288      	cmp	r0, r1
     604:	db06      	blt.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     606:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     60a:	f889 5000 	strb.w	r5, [r9]
     60e:	7845      	ldrb	r5, [r0, #1]
     610:	2d20      	cmp	r5, #32
     612:	d1cd      	bne.n	5b0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x164>
     614:	f899 0000 	ldrb.w	r0, [r9]
     618:	f888 0000 	strb.w	r0, [r8]
     61c:	46a1      	mov	r9, r4
     61e:	2d20      	cmp	r5, #32
     620:	bf1c      	itt	ne
     622:	4879      	ldrne	r0, [pc, #484]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     624:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     628:	f000 80e5 	beq.w	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     62c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     630:	eb06 0a81 	add.w	sl, r6, r1, lsl #2
     634:	f8d9 2004 	ldr.w	r2, [r9, #4]
     638:	f8da 1004 	ldr.w	r1, [sl, #4]
     63c:	4648      	mov	r0, r9
     63e:	1a89      	subs	r1, r1, r2
     640:	0209      	lsls	r1, r1, #8
     642:	17ca      	asrs	r2, r1, #31
     644:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     648:	f10a 0704 	add.w	r7, sl, #4
     64c:	1209      	asrs	r1, r1, #8
     64e:	d41f      	bmi.n	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     650:	8979      	ldrh	r1, [r7, #10]
     652:	2900      	cmp	r1, #0
     654:	f000 80cf 	beq.w	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     658:	8941      	ldrh	r1, [r0, #10]
     65a:	2900      	cmp	r1, #0
     65c:	f040 80cb 	bne.w	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     660:	f000 fca2 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     664:	aa05      	add	r2, sp, #20
     666:	a904      	add	r1, sp, #16
     668:	f002 fc6a 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     66c:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     670:	2800      	cmp	r0, #0
     672:	bfcc      	ite	gt
     674:	2001      	movgt	r0, #1
     676:	2000      	movle	r0, #0
     678:	f100 0133 	add.w	r1, r0, #51	; 0x33
     67c:	9804      	ldr	r0, [sp, #16]
     67e:	683a      	ldr	r2, [r7, #0]
     680:	1a10      	subs	r0, r2, r0
     682:	0200      	lsls	r0, r0, #8
     684:	17c2      	asrs	r2, r0, #31
     686:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     68a:	1200      	asrs	r0, r0, #8
     68c:	4288      	cmp	r0, r1
     68e:	da7d      	bge.n	78c <CONFIG_BT_HCI_TX_STACK_SIZE+0x18c>
     690:	f888 5000 	strb.w	r5, [r8]
     694:	f89a 0010 	ldrb.w	r0, [sl, #16]
     698:	f899 100c 	ldrb.w	r1, [r9, #12]
     69c:	4288      	cmp	r0, r1
     69e:	d905      	bls.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6a4:	7845      	ldrb	r5, [r0, #1]
     6a6:	2d20      	cmp	r5, #32
     6a8:	d1c0      	bne.n	62c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     6aa:	e0a4      	b.n	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     6ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
     6b0:	e9d4 2100 	ldrd	r2, r1, [r4]
     6b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     6b8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     6bc:	1a89      	subs	r1, r1, r2
     6be:	6880      	ldr	r0, [r0, #8]
     6c0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     6c4:	4408      	add	r0, r1
     6c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6ca:	e9c4 2000 	strd	r2, r0, [r4]
     6ce:	2001      	movs	r0, #1
     6d0:	9002      	str	r0, [sp, #8]
     6d2:	484b      	ldr	r0, [pc, #300]	; (800 <CONFIG_ISR_STACK_SIZE>)
     6d4:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
     6d8:	b118      	cbz	r0, 6e2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe2>
     6da:	b009      	add	sp, #36	; 0x24
     6dc:	2000      	movs	r0, #0
     6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6e2:	9803      	ldr	r0, [sp, #12]
     6e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6e8:	466f      	mov	r7, sp
     6ea:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     6ee:	2020      	movs	r0, #32
     6f0:	f10d 0a04 	add.w	sl, sp, #4
     6f4:	f88d 0000 	strb.w	r0, [sp]
     6f8:	2d20      	cmp	r5, #32
     6fa:	bf1c      	itt	ne
     6fc:	4842      	ldrne	r0, [pc, #264]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     6fe:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     702:	d030      	beq.n	766 <CONFIG_BT_HCI_TX_STACK_SIZE+0x166>
     704:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     708:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     70c:	1d01      	adds	r1, r0, #4
     70e:	6880      	ldr	r0, [r0, #8]
     710:	6822      	ldr	r2, [r4, #0]
     712:	1a10      	subs	r0, r2, r0
     714:	0200      	lsls	r0, r0, #8
     716:	17c2      	asrs	r2, r0, #31
     718:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     71c:	1200      	asrs	r0, r0, #8
     71e:	d422      	bmi.n	766 <CONFIG_BT_HCI_TX_STACK_SIZE+0x166>
     720:	8960      	ldrh	r0, [r4, #10]
     722:	b1d0      	cbz	r0, 75a <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     724:	8948      	ldrh	r0, [r1, #10]
     726:	b9c0      	cbnz	r0, 75a <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     728:	4608      	mov	r0, r1
     72a:	f000 fc3d 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     72e:	aa05      	add	r2, sp, #20
     730:	a904      	add	r1, sp, #16
     732:	f002 fc05 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     736:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     73a:	2800      	cmp	r0, #0
     73c:	bfcc      	ite	gt
     73e:	2001      	movgt	r0, #1
     740:	2000      	movle	r0, #0
     742:	f100 0133 	add.w	r1, r0, #51	; 0x33
     746:	9804      	ldr	r0, [sp, #16]
     748:	6822      	ldr	r2, [r4, #0]
     74a:	1a10      	subs	r0, r2, r0
     74c:	0200      	lsls	r0, r0, #8
     74e:	17c2      	asrs	r2, r0, #31
     750:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     754:	1200      	asrs	r0, r0, #8
     756:	4288      	cmp	r0, r1
     758:	db05      	blt.n	766 <CONFIG_BT_HCI_TX_STACK_SIZE+0x166>
     75a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     75e:	703d      	strb	r5, [r7, #0]
     760:	7845      	ldrb	r5, [r0, #1]
     762:	2d20      	cmp	r5, #32
     764:	d1ce      	bne.n	704 <CONFIG_BT_HCI_TX_STACK_SIZE+0x104>
     766:	7838      	ldrb	r0, [r7, #0]
     768:	f88a 0000 	strb.w	r0, [sl]
     76c:	4627      	mov	r7, r4
     76e:	2d20      	cmp	r5, #32
     770:	bf1c      	itt	ne
     772:	4825      	ldrne	r0, [pc, #148]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     774:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     778:	d03d      	beq.n	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     77a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     77e:	eb06 0981 	add.w	r9, r6, r1, lsl #2
     782:	4638      	mov	r0, r7
     784:	f109 0804 	add.w	r8, r9, #4
     788:	687a      	ldr	r2, [r7, #4]
     78a:	e000      	b.n	78e <CONFIG_BT_HCI_TX_STACK_SIZE+0x18e>
     78c:	e033      	b.n	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     78e:	f8d9 1004 	ldr.w	r1, [r9, #4]
     792:	1a89      	subs	r1, r1, r2
     794:	0209      	lsls	r1, r1, #8
     796:	17ca      	asrs	r2, r1, #31
     798:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     79c:	1209      	asrs	r1, r1, #8
     79e:	d41d      	bmi.n	7dc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1dc>
     7a0:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     7a4:	b339      	cbz	r1, 7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     7a6:	8941      	ldrh	r1, [r0, #10]
     7a8:	bb29      	cbnz	r1, 7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     7aa:	f000 fbfd 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     7ae:	aa05      	add	r2, sp, #20
     7b0:	a904      	add	r1, sp, #16
     7b2:	f002 fbc5 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     7b6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     7ba:	2800      	cmp	r0, #0
     7bc:	bfcc      	ite	gt
     7be:	2001      	movgt	r0, #1
     7c0:	2000      	movle	r0, #0
     7c2:	f100 0133 	add.w	r1, r0, #51	; 0x33
     7c6:	9804      	ldr	r0, [sp, #16]
     7c8:	f8d8 2000 	ldr.w	r2, [r8]
     7cc:	1a10      	subs	r0, r2, r0
     7ce:	0200      	lsls	r0, r0, #8
     7d0:	17c2      	asrs	r2, r0, #31
     7d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7d6:	1200      	asrs	r0, r0, #8
     7d8:	4288      	cmp	r0, r1
     7da:	da0c      	bge.n	7f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1f6>
     7dc:	f88a 5000 	strb.w	r5, [sl]
     7e0:	f899 1010 	ldrb.w	r1, [r9, #16]
     7e4:	7b38      	ldrb	r0, [r7, #12]
     7e6:	4281      	cmp	r1, r0
     7e8:	f67f af60 	bls.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     7ec:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     7f0:	7845      	ldrb	r5, [r0, #1]
     7f2:	2d20      	cmp	r5, #32
     7f4:	d1c1      	bne.n	77a <CONFIG_BT_HCI_TX_STACK_SIZE+0x17a>
     7f6:	9802      	ldr	r0, [sp, #8]
     7f8:	b009      	add	sp, #36	; 0x24
     7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7fe:	0000      	.short	0x0000
     800:	20000e7c 	.word	0x20000e7c
     804:	20000b7c 	.word	0x20000b7c
     808:	20000dfc 	.word	0x20000dfc
     80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     810:	4604      	mov	r4, r0
     812:	4847      	ldr	r0, [pc, #284]	; (930 <CONFIG_BT_RX_STACK_SIZE+0x98>)
     814:	460e      	mov	r6, r1
     816:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     81a:	4f46      	ldr	r7, [pc, #280]	; (934 <CONFIG_BT_RX_STACK_SIZE+0x9c>)
     81c:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
     820:	2020      	movs	r0, #32
     822:	b083      	sub	sp, #12
     824:	4698      	mov	r8, r3
     826:	4692      	mov	sl, r2
     828:	7010      	strb	r0, [r2, #0]
     82a:	f507 7920 	add.w	r9, r7, #640	; 0x280
     82e:	2d20      	cmp	r5, #32
     830:	bf18      	it	ne
     832:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     836:	d031      	beq.n	89c <CONFIG_BT_RX_STACK_SIZE+0x4>
     838:	eb05 0085 	add.w	r0, r5, r5, lsl #2
     83c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
     840:	1d01      	adds	r1, r0, #4
     842:	6880      	ldr	r0, [r0, #8]
     844:	6822      	ldr	r2, [r4, #0]
     846:	1a10      	subs	r0, r2, r0
     848:	0200      	lsls	r0, r0, #8
     84a:	17c2      	asrs	r2, r0, #31
     84c:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     850:	1200      	asrs	r0, r0, #8
     852:	d423      	bmi.n	89c <CONFIG_BT_RX_STACK_SIZE+0x4>
     854:	8960      	ldrh	r0, [r4, #10]
     856:	b1d0      	cbz	r0, 88e <CONFIG_ISR_STACK_SIZE+0x8e>
     858:	8948      	ldrh	r0, [r1, #10]
     85a:	b9c0      	cbnz	r0, 88e <CONFIG_ISR_STACK_SIZE+0x8e>
     85c:	4608      	mov	r0, r1
     85e:	f000 fba3 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     862:	aa01      	add	r2, sp, #4
     864:	4669      	mov	r1, sp
     866:	f002 fb6b 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     86a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     86e:	2800      	cmp	r0, #0
     870:	bfcc      	ite	gt
     872:	2001      	movgt	r0, #1
     874:	2000      	movle	r0, #0
     876:	f100 0133 	add.w	r1, r0, #51	; 0x33
     87a:	9800      	ldr	r0, [sp, #0]
     87c:	6822      	ldr	r2, [r4, #0]
     87e:	1a10      	subs	r0, r2, r0
     880:	0200      	lsls	r0, r0, #8
     882:	17c2      	asrs	r2, r0, #31
     884:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     888:	1200      	asrs	r0, r0, #8
     88a:	4288      	cmp	r0, r1
     88c:	db06      	blt.n	89c <CONFIG_BT_RX_STACK_SIZE+0x4>
     88e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     892:	f88a 5000 	strb.w	r5, [sl]
     896:	7845      	ldrb	r5, [r0, #1]
     898:	2d20      	cmp	r5, #32
     89a:	d1cd      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     89c:	f89a 0000 	ldrb.w	r0, [sl]
     8a0:	f888 0000 	strb.w	r0, [r8]
     8a4:	2d20      	cmp	r5, #32
     8a6:	bf18      	it	ne
     8a8:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     8ac:	d03c      	beq.n	928 <CONFIG_BT_RX_STACK_SIZE+0x90>
     8ae:	eb05 0185 	add.w	r1, r5, r5, lsl #2
     8b2:	eb07 0981 	add.w	r9, r7, r1, lsl #2
     8b6:	6861      	ldr	r1, [r4, #4]
     8b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
     8bc:	4620      	mov	r0, r4
     8be:	1a51      	subs	r1, r2, r1
     8c0:	0209      	lsls	r1, r1, #8
     8c2:	17ca      	asrs	r2, r1, #31
     8c4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     8c8:	f109 0604 	add.w	r6, r9, #4
     8cc:	1209      	asrs	r1, r1, #8
     8ce:	d41b      	bmi.n	908 <CONFIG_BT_RX_STACK_SIZE+0x70>
     8d0:	8971      	ldrh	r1, [r6, #10]
     8d2:	b349      	cbz	r1, 928 <CONFIG_BT_RX_STACK_SIZE+0x90>
     8d4:	8941      	ldrh	r1, [r0, #10]
     8d6:	bb39      	cbnz	r1, 928 <CONFIG_BT_RX_STACK_SIZE+0x90>
     8d8:	f000 fb66 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     8dc:	aa01      	add	r2, sp, #4
     8de:	4669      	mov	r1, sp
     8e0:	f002 fb2e 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     8e4:	f99d 0004 	ldrsb.w	r0, [sp, #4]
     8e8:	2800      	cmp	r0, #0
     8ea:	bfcc      	ite	gt
     8ec:	2001      	movgt	r0, #1
     8ee:	2000      	movle	r0, #0
     8f0:	f100 0133 	add.w	r1, r0, #51	; 0x33
     8f4:	9800      	ldr	r0, [sp, #0]
     8f6:	6832      	ldr	r2, [r6, #0]
     8f8:	1a10      	subs	r0, r2, r0
     8fa:	0200      	lsls	r0, r0, #8
     8fc:	17c2      	asrs	r2, r0, #31
     8fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     902:	1200      	asrs	r0, r0, #8
     904:	4288      	cmp	r0, r1
     906:	da0f      	bge.n	928 <CONFIG_BT_RX_STACK_SIZE+0x90>
     908:	f888 5000 	strb.w	r5, [r8]
     90c:	f899 0010 	ldrb.w	r0, [r9, #16]
     910:	7b21      	ldrb	r1, [r4, #12]
     912:	4288      	cmp	r0, r1
     914:	d803      	bhi.n	91e <CONFIG_BT_RX_STACK_SIZE+0x86>
     916:	b003      	add	sp, #12
     918:	2000      	movs	r0, #0
     91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     91e:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     922:	7845      	ldrb	r5, [r0, #1]
     924:	2d20      	cmp	r5, #32
     926:	d1c2      	bne.n	8ae <CONFIG_BT_RX_STACK_SIZE+0x16>
     928:	b003      	add	sp, #12
     92a:	2001      	movs	r0, #1
     92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     930:	20000e7c 	.word	0x20000e7c
     934:	20000b7c 	.word	0x20000b7c
     938:	4804      	ldr	r0, [pc, #16]	; (94c <CONFIG_BT_RX_STACK_SIZE+0xb4>)
     93a:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
     93e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     942:	bf0c      	ite	eq
     944:	2001      	moveq	r0, #1
     946:	2000      	movne	r0, #0
     948:	4770      	bx	lr
     94a:	0000      	.short	0x0000
     94c:	000025b1 	.word	0x000025b1
     950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     954:	f04f 0800 	mov.w	r8, #0
     958:	b098      	sub	sp, #96	; 0x60
     95a:	4616      	mov	r6, r2
     95c:	460d      	mov	r5, r1
     95e:	46c3      	mov	fp, r8
     960:	f002 f896 	bl	2a90 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     964:	4604      	mov	r4, r0
     966:	2d01      	cmp	r5, #1
     968:	bf18      	it	ne
     96a:	2d02      	cmpne	r5, #2
     96c:	d005      	beq.n	97a <CONFIG_BT_RX_STACK_SIZE+0xe2>
     96e:	f640 117c 	movw	r1, #2428	; 0x97c
     972:	f04f 0070 	mov.w	r0, #112	; 0x70
     976:	f002 fe29 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     97a:	49ff      	ldr	r1, [pc, #1020]	; (d78 <CONFIG_BT_RX_STACK_SIZE+0x4e0>)
     97c:	2001      	movs	r0, #1
     97e:	6008      	str	r0, [r1, #0]
     980:	49fe      	ldr	r1, [pc, #1016]	; (d7c <CONFIG_BT_RX_STACK_SIZE+0x4e4>)
     982:	6889      	ldr	r1, [r1, #8]
     984:	6008      	str	r0, [r1, #0]
     986:	2000      	movs	r0, #0
     988:	9006      	str	r0, [sp, #24]
     98a:	1e40      	subs	r0, r0, #1
     98c:	9008      	str	r0, [sp, #32]
     98e:	49fc      	ldr	r1, [pc, #1008]	; (d80 <CONFIG_BT_RX_STACK_SIZE+0x4e8>)
     990:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     994:	eb01 0380 	add.w	r3, r1, r0, lsl #2
     998:	1d1b      	adds	r3, r3, #4
     99a:	af09      	add	r7, sp, #36	; 0x24
     99c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     99e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     9a2:	a809      	add	r0, sp, #36	; 0x24
     9a4:	f000 fb00 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
     9a8:	9007      	str	r0, [sp, #28]
     9aa:	48f5      	ldr	r0, [pc, #980]	; (d80 <CONFIG_BT_RX_STACK_SIZE+0x4e8>)
     9ac:	f8bd 902e 	ldrh.w	r9, [sp, #46]	; 0x2e
     9b0:	f8b0 0320 	ldrh.w	r0, [r0, #800]	; 0x320
     9b4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     9b8:	f1b9 0f00 	cmp.w	r9, #0
     9bc:	bf14      	ite	ne
     9be:	f04f 0a01 	movne.w	sl, #1
     9c2:	f04f 0a00 	moveq.w	sl, #0
     9c6:	9809      	ldr	r0, [sp, #36]	; 0x24
     9c8:	9012      	str	r0, [sp, #72]	; 0x48
     9ca:	f1ba 0f00 	cmp.w	sl, #0
     9ce:	d009      	beq.n	9e4 <CONFIG_BT_RX_STACK_SIZE+0x14c>
     9d0:	48ec      	ldr	r0, [pc, #944]	; (d84 <CONFIG_BT_RX_STACK_SIZE+0x4ec>)
     9d2:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
     9d6:	b928      	cbnz	r0, 9e4 <CONFIG_BT_RX_STACK_SIZE+0x14c>
     9d8:	f002 fd94 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     9dc:	2800      	cmp	r0, #0
     9de:	bf08      	it	eq
     9e0:	2701      	moveq	r7, #1
     9e2:	d000      	beq.n	9e6 <CONFIG_BT_RX_STACK_SIZE+0x14e>
     9e4:	2700      	movs	r7, #0
     9e6:	48e8      	ldr	r0, [pc, #928]	; (d88 <CONFIG_BT_RX_STACK_SIZE+0x4f0>)
     9e8:	2200      	movs	r2, #0
     9ea:	9214      	str	r2, [sp, #80]	; 0x50
     9ec:	7800      	ldrb	r0, [r0, #0]
     9ee:	4616      	mov	r6, r2
     9f0:	2801      	cmp	r0, #1
     9f2:	bf18      	it	ne
     9f4:	2803      	cmpne	r0, #3
     9f6:	d143      	bne.n	a80 <CONFIG_BT_RX_STACK_SIZE+0x1e8>
     9f8:	48e3      	ldr	r0, [pc, #908]	; (d88 <CONFIG_BT_RX_STACK_SIZE+0x4f0>)
     9fa:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     9fe:	eba8 0009 	sub.w	r0, r8, r9
     a02:	9014      	str	r0, [sp, #80]	; 0x50
     a04:	45c1      	cmp	r9, r8
     a06:	d23b      	bcs.n	a80 <CONFIG_BT_RX_STACK_SIZE+0x1e8>
     a08:	a803      	add	r0, sp, #12
     a0a:	9005      	str	r0, [sp, #20]
     a0c:	a817      	add	r0, sp, #92	; 0x5c
     a0e:	9010      	str	r0, [sp, #64]	; 0x40
     a10:	9907      	ldr	r1, [sp, #28]
     a12:	f108 0003 	add.w	r0, r8, #3
     a16:	4242      	negs	r2, r0
     a18:	f8df c370 	ldr.w	ip, [pc, #880]	; d8c <CONFIG_BT_RX_STACK_SIZE+0x4f4>
     a1c:	1a08      	subs	r0, r1, r0
     a1e:	2300      	movs	r3, #0
     a20:	ebbc 0101 	subs.w	r1, ip, r1
     a24:	eb73 0103 	sbcs.w	r1, r3, r3
     a28:	d204      	bcs.n	a34 <CONFIG_BT_RX_STACK_SIZE+0x19c>
     a2a:	f240 51f5 	movw	r1, #1525	; 0x5f5
     a2e:	2070      	movs	r0, #112	; 0x70
     a30:	f002 fdcc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a34:	49d6      	ldr	r1, [pc, #856]	; (d90 <CONFIG_BT_RX_STACK_SIZE+0x4f8>)
     a36:	428a      	cmp	r2, r1
     a38:	dd04      	ble.n	a44 <CONFIG_BT_RX_STACK_SIZE+0x1ac>
     a3a:	f240 51f6 	movw	r1, #1526	; 0x5f6
     a3e:	2070      	movs	r0, #112	; 0x70
     a40:	f002 fdc4 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a44:	49d3      	ldr	r1, [pc, #844]	; (d94 <CONFIG_BT_RX_STACK_SIZE+0x4fc>)
     a46:	428a      	cmp	r2, r1
     a48:	da04      	bge.n	a54 <CONFIG_BT_RX_STACK_SIZE+0x1bc>
     a4a:	f240 51f7 	movw	r1, #1527	; 0x5f7
     a4e:	2070      	movs	r0, #112	; 0x70
     a50:	f002 fdbc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a54:	49d0      	ldr	r1, [pc, #832]	; (d98 <CONFIG_BT_RX_STACK_SIZE+0x500>)
     a56:	4288      	cmp	r0, r1
     a58:	bfa8      	it	ge
     a5a:	49d0      	ldrge	r1, [pc, #832]	; (d9c <CONFIG_BT_RX_STACK_SIZE+0x504>)
     a5c:	da03      	bge.n	a66 <CONFIG_BT_RX_STACK_SIZE+0x1ce>
     a5e:	2800      	cmp	r0, #0
     a60:	bfb8      	it	lt
     a62:	49cd      	ldrlt	r1, [pc, #820]	; (d98 <CONFIG_BT_RX_STACK_SIZE+0x500>)
     a64:	da00      	bge.n	a68 <CONFIG_BT_RX_STACK_SIZE+0x1d0>
     a66:	1840      	adds	r0, r0, r1
     a68:	9a10      	ldr	r2, [sp, #64]	; 0x40
     a6a:	9905      	ldr	r1, [sp, #20]
     a6c:	f002 fa68 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
     a70:	9803      	ldr	r0, [sp, #12]
     a72:	9909      	ldr	r1, [sp, #36]	; 0x24
     a74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a78:	9003      	str	r0, [sp, #12]
     a7a:	1a08      	subs	r0, r1, r0
     a7c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     a80:	2f00      	cmp	r7, #0
     a82:	bf18      	it	ne
     a84:	2632      	movne	r6, #50	; 0x32
     a86:	d104      	bne.n	a92 <CONFIG_BT_RX_STACK_SIZE+0x1fa>
     a88:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     a8c:	2800      	cmp	r0, #0
     a8e:	bf18      	it	ne
     a90:	2602      	movne	r6, #2
     a92:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a96:	d008      	beq.n	aaa <CONFIG_BT_RX_STACK_SIZE+0x212>
     a98:	9809      	ldr	r0, [sp, #36]	; 0x24
     a9a:	1b00      	subs	r0, r0, r4
     a9c:	0200      	lsls	r0, r0, #8
     a9e:	17c1      	asrs	r1, r0, #31
     aa0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     aa4:	1200      	asrs	r0, r0, #8
     aa6:	2801      	cmp	r0, #1
     aa8:	da02      	bge.n	ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>
     aaa:	2004      	movs	r0, #4
     aac:	9918      	ldr	r1, [sp, #96]	; 0x60
     aae:	e00b      	b.n	ac8 <CONFIG_BT_RX_STACK_SIZE+0x230>
     ab0:	b147      	cbz	r7, ac4 <CONFIG_BT_RX_STACK_SIZE+0x22c>
     ab2:	48b4      	ldr	r0, [pc, #720]	; (d84 <CONFIG_BT_RX_STACK_SIZE+0x4ec>)
     ab4:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
     ab8:	b120      	cbz	r0, ac4 <CONFIG_BT_RX_STACK_SIZE+0x22c>
     aba:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     abe:	1c06      	adds	r6, r0, #0
     ac0:	bf18      	it	ne
     ac2:	2602      	movne	r6, #2
     ac4:	4621      	mov	r1, r4
     ac6:	2001      	movs	r0, #1
     ac8:	f1b9 0f00 	cmp.w	r9, #0
     acc:	d002      	beq.n	ad4 <CONFIG_BT_RX_STACK_SIZE+0x23c>
     ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
     ad0:	2b1e      	cmp	r3, #30
     ad2:	da02      	bge.n	ada <CONFIG_BT_RX_STACK_SIZE+0x242>
     ad4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
     ad8:	b113      	cbz	r3, ae0 <CONFIG_BT_RX_STACK_SIZE+0x248>
     ada:	f04f 0b01 	mov.w	fp, #1
     ade:	1e40      	subs	r0, r0, #1
     ae0:	1983      	adds	r3, r0, r6
     ae2:	48a9      	ldr	r0, [pc, #676]	; (d88 <CONFIG_BT_RX_STACK_SIZE+0x4f0>)
     ae4:	f89d 6035 	ldrb.w	r6, [sp, #53]	; 0x35
     ae8:	7800      	ldrb	r0, [r0, #0]
     aea:	9015      	str	r0, [sp, #84]	; 0x54
     aec:	9809      	ldr	r0, [sp, #36]	; 0x24
     aee:	1a80      	subs	r0, r0, r2
     af0:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     af4:	ebac 0001 	sub.w	r0, ip, r1
     af8:	0200      	lsls	r0, r0, #8
     afa:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     afe:	eb00 601e 	add.w	r0, r0, lr, lsr #24
     b02:	1200      	asrs	r0, r0, #8
     b04:	4298      	cmp	r0, r3
     b06:	db18      	blt.n	b3a <CONFIG_BT_RX_STACK_SIZE+0x2a2>
     b08:	2a00      	cmp	r2, #0
     b0a:	bf18      	it	ne
     b0c:	f8cd c024 	strne.w	ip, [sp, #36]	; 0x24
     b10:	9e09      	ldr	r6, [sp, #36]	; 0x24
     b12:	9710      	str	r7, [sp, #64]	; 0x40
     b14:	2700      	movs	r7, #0
     b16:	f001 feb5 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b1a:	1a30      	subs	r0, r6, r0
     b1c:	0200      	lsls	r0, r0, #8
     b1e:	17c1      	asrs	r1, r0, #31
     b20:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b24:	1200      	asrs	r0, r0, #8
     b26:	283e      	cmp	r0, #62	; 0x3e
     b28:	da3e      	bge.n	ba8 <CONFIG_BT_RX_STACK_SIZE+0x310>
     b2a:	2d01      	cmp	r5, #1
     b2c:	d01f      	beq.n	b6e <CONFIG_BT_RX_STACK_SIZE+0x2d6>
     b2e:	1e70      	subs	r0, r6, #1
     b30:	9910      	ldr	r1, [sp, #64]	; 0x40
     b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b36:	b311      	cbz	r1, b7e <CONFIG_BT_RX_STACK_SIZE+0x2e6>
     b38:	e02c      	b.n	b94 <CONFIG_BT_RX_STACK_SIZE+0x2fc>
     b3a:	b17a      	cbz	r2, b5c <CONFIG_BT_RX_STACK_SIZE+0x2c4>
     b3c:	2e00      	cmp	r6, #0
     b3e:	bf04      	itt	eq
     b40:	9815      	ldreq	r0, [sp, #84]	; 0x54
     b42:	2803      	cmpeq	r0, #3
     b44:	d00a      	beq.n	b5c <CONFIG_BT_RX_STACK_SIZE+0x2c4>
     b46:	b927      	cbnz	r7, b52 <CONFIG_BT_RX_STACK_SIZE+0x2ba>
     b48:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b4c:	2800      	cmp	r0, #0
     b4e:	bf18      	it	ne
     b50:	1e9b      	subne	r3, r3, #2
     b52:	2200      	movs	r2, #0
     b54:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
     b58:	4690      	mov	r8, r2
     b5a:	e7c7      	b.n	aec <CONFIG_BT_RX_STACK_SIZE+0x254>
     b5c:	bb07      	cbnz	r7, ba0 <CONFIG_BT_RX_STACK_SIZE+0x308>
     b5e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
     b62:	b1e8      	cbz	r0, ba0 <CONFIG_BT_RX_STACK_SIZE+0x308>
     b64:	2000      	movs	r0, #0
     b66:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
     b6a:	1e9b      	subs	r3, r3, #2
     b6c:	e7be      	b.n	aec <CONFIG_BT_RX_STACK_SIZE+0x254>
     b6e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b72:	d120      	bne.n	bb6 <CONFIG_BT_RX_STACK_SIZE+0x31e>
     b74:	f640 01f5 	movw	r1, #2293	; 0x8f5
     b78:	2070      	movs	r0, #112	; 0x70
     b7a:	f002 fd27 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b7e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b82:	d007      	beq.n	b94 <CONFIG_BT_RX_STACK_SIZE+0x2fc>
     b84:	1a21      	subs	r1, r4, r0
     b86:	0209      	lsls	r1, r1, #8
     b88:	17ca      	asrs	r2, r1, #31
     b8a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     b8e:	1209      	asrs	r1, r1, #8
     b90:	2904      	cmp	r1, #4
     b92:	dd03      	ble.n	b9c <CONFIG_BT_RX_STACK_SIZE+0x304>
     b94:	4604      	mov	r4, r0
     b96:	f001 fe7b 	bl	2890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b9a:	e00c      	b.n	bb6 <CONFIG_BT_RX_STACK_SIZE+0x31e>
     b9c:	2900      	cmp	r1, #0
     b9e:	dd0a      	ble.n	bb6 <CONFIG_BT_RX_STACK_SIZE+0x31e>
     ba0:	b01b      	add	sp, #108	; 0x6c
     ba2:	2000      	movs	r0, #0
     ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ba8:	1e70      	subs	r0, r6, #1
     baa:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     bae:	4620      	mov	r0, r4
     bb0:	f001 fe6e 	bl	2890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     bb4:	4657      	mov	r7, sl
     bb6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bba:	d028      	beq.n	c0e <CONFIG_BT_RX_STACK_SIZE+0x376>
     bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
     bbe:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
     bc2:	1b00      	subs	r0, r0, r4
     bc4:	f08b 0301 	eor.w	r3, fp, #1
     bc8:	4a75      	ldr	r2, [pc, #468]	; (da0 <CONFIG_BT_RX_STACK_SIZE+0x508>)
     bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bce:	ebac 0c04 	sub.w	ip, ip, r4
     bd2:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     bd6:	4283      	cmp	r3, r0
     bd8:	bf98      	it	ls
     bda:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     bde:	d2df      	bcs.n	ba0 <CONFIG_BT_RX_STACK_SIZE+0x308>
     be0:	4562      	cmp	r2, ip
     be2:	d3dd      	bcc.n	ba0 <CONFIG_BT_RX_STACK_SIZE+0x308>
     be4:	4620      	mov	r0, r4
     be6:	f00e f817 	bl	ec18 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     bea:	4a68      	ldr	r2, [pc, #416]	; (d8c <CONFIG_BT_RX_STACK_SIZE+0x4f4>)
     bec:	9907      	ldr	r1, [sp, #28]
     bee:	1c53      	adds	r3, r2, #1
     bf0:	1a0e      	subs	r6, r1, r0
     bf2:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     bf6:	bf24      	itt	cs
     bf8:	eba0 0c01 	subcs.w	ip, r0, r1
     bfc:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     c00:	d310      	bcc.n	c24 <CONFIG_BT_RX_STACK_SIZE+0x38c>
     c02:	42b2      	cmp	r2, r6
     c04:	d208      	bcs.n	c18 <CONFIG_BT_RX_STACK_SIZE+0x380>
     c06:	1a10      	subs	r0, r2, r0
     c08:	4408      	add	r0, r1
     c0a:	1c46      	adds	r6, r0, #1
     c0c:	e00a      	b.n	c24 <CONFIG_BT_RX_STACK_SIZE+0x38c>
     c0e:	f640 2114 	movw	r1, #2580	; 0xa14
     c12:	2070      	movs	r0, #112	; 0x70
     c14:	f002 fcda 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c18:	4562      	cmp	r2, ip
     c1a:	d22d      	bcs.n	c78 <CONFIG_BT_RX_STACK_SIZE+0x3e0>
     c1c:	1a51      	subs	r1, r2, r1
     c1e:	4408      	add	r0, r1
     c20:	1c40      	adds	r0, r0, #1
     c22:	4246      	negs	r6, r0
     c24:	4857      	ldr	r0, [pc, #348]	; (d84 <CONFIG_BT_RX_STACK_SIZE+0x4ec>)
     c26:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
     c2a:	b350      	cbz	r0, c82 <CONFIG_BT_RX_STACK_SIZE+0x3ea>
     c2c:	4628      	mov	r0, r5
     c2e:	4645      	mov	r5, r8
     c30:	f04f 0b00 	mov.w	fp, #0
     c34:	46d8      	mov	r8, fp
     c36:	2801      	cmp	r0, #1
     c38:	d005      	beq.n	c46 <CONFIG_BT_RX_STACK_SIZE+0x3ae>
     c3a:	2002      	movs	r0, #2
     c3c:	f002 f870 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c40:	2001      	movs	r0, #1
     c42:	f002 f86d 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c46:	45a9      	cmp	r9, r5
     c48:	d22c      	bcs.n	ca4 <CONFIG_BT_RX_STACK_SIZE+0x40c>
     c4a:	eba6 0105 	sub.w	r1, r6, r5
     c4e:	f04f 0301 	mov.w	r3, #1
     c52:	f04f 0203 	mov.w	r2, #3
     c56:	f04f 0002 	mov.w	r0, #2
     c5a:	f001 ff99 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c5e:	2800      	cmp	r0, #0
     c60:	bf08      	it	eq
     c62:	f04f 0801 	moveq.w	r8, #1
     c66:	f1b9 0f00 	cmp.w	r9, #0
     c6a:	d035      	beq.n	cd8 <CONFIG_BT_RX_STACK_SIZE+0x440>
     c6c:	2301      	movs	r3, #1
     c6e:	eba6 0109 	sub.w	r1, r6, r9
     c72:	2203      	movs	r2, #3
     c74:	4618      	mov	r0, r3
     c76:	e023      	b.n	cc0 <CONFIG_BT_RX_STACK_SIZE+0x428>
     c78:	f640 21f4 	movw	r1, #2804	; 0xaf4
     c7c:	2070      	movs	r0, #112	; 0x70
     c7e:	f002 fca5 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c82:	45c1      	cmp	r9, r8
     c84:	bf34      	ite	cc
     c86:	4640      	movcc	r0, r8
     c88:	4648      	movcs	r0, r9
     c8a:	f1bb 0f00 	cmp.w	fp, #0
     c8e:	bf14      	ite	ne
     c90:	2100      	movne	r1, #0
     c92:	211e      	moveq	r1, #30
     c94:	4408      	add	r0, r1
     c96:	42b0      	cmp	r0, r6
     c98:	dbc8      	blt.n	c2c <CONFIG_BT_RX_STACK_SIZE+0x394>
     c9a:	f640 2127 	movw	r1, #2599	; 0xa27
     c9e:	2070      	movs	r0, #112	; 0x70
     ca0:	f002 fc94 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ca4:	d910      	bls.n	cc8 <CONFIG_BT_RX_STACK_SIZE+0x430>
     ca6:	2301      	movs	r3, #1
     ca8:	eba6 0109 	sub.w	r1, r6, r9
     cac:	2203      	movs	r2, #3
     cae:	4618      	mov	r0, r3
     cb0:	f001 ff6e 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cb4:	b328      	cbz	r0, d02 <CONFIG_BT_RX_STACK_SIZE+0x46a>
     cb6:	b17d      	cbz	r5, cd8 <CONFIG_BT_RX_STACK_SIZE+0x440>
     cb8:	1b71      	subs	r1, r6, r5
     cba:	2301      	movs	r3, #1
     cbc:	2203      	movs	r2, #3
     cbe:	2002      	movs	r0, #2
     cc0:	f001 ff66 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cc4:	b1e8      	cbz	r0, d02 <CONFIG_BT_RX_STACK_SIZE+0x46a>
     cc6:	e007      	b.n	cd8 <CONFIG_BT_RX_STACK_SIZE+0x440>
     cc8:	ea55 0009 	orrs.w	r0, r5, r9
     ccc:	d004      	beq.n	cd8 <CONFIG_BT_RX_STACK_SIZE+0x440>
     cce:	f640 115f 	movw	r1, #2399	; 0x95f
     cd2:	2070      	movs	r0, #112	; 0x70
     cd4:	f002 fc7a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cd8:	2301      	movs	r3, #1
     cda:	2203      	movs	r2, #3
     cdc:	4631      	mov	r1, r6
     cde:	2000      	movs	r0, #0
     ce0:	f001 ff56 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ce4:	b168      	cbz	r0, d02 <CONFIG_BT_RX_STACK_SIZE+0x46a>
     ce6:	2501      	movs	r5, #1
     ce8:	f1b8 0f00 	cmp.w	r8, #0
     cec:	d003      	beq.n	cf6 <CONFIG_BT_RX_STACK_SIZE+0x45e>
     cee:	9812      	ldr	r0, [sp, #72]	; 0x48
     cf0:	9009      	str	r0, [sp, #36]	; 0x24
     cf2:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
     cf6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; da4 <CONFIG_BT_RX_STACK_SIZE+0x50c>
     cfa:	f1ba 0f00 	cmp.w	sl, #0
     cfe:	d10e      	bne.n	d1e <CONFIG_BT_RX_STACK_SIZE+0x486>
     d00:	e009      	b.n	d16 <CONFIG_BT_RX_STACK_SIZE+0x47e>
     d02:	2002      	movs	r0, #2
     d04:	f002 f80c 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d08:	2001      	movs	r0, #1
     d0a:	f002 f809 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d0e:	b01b      	add	sp, #108	; 0x6c
     d10:	2000      	movs	r0, #0
     d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d16:	481b      	ldr	r0, [pc, #108]	; (d84 <CONFIG_BT_RX_STACK_SIZE+0x4ec>)
     d18:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
     d1c:	b100      	cbz	r0, d20 <CONFIG_BT_RX_STACK_SIZE+0x488>
     d1e:	b34f      	cbz	r7, d74 <CONFIG_BT_RX_STACK_SIZE+0x4dc>
     d20:	f8df a060 	ldr.w	sl, [pc, #96]	; d84 <CONFIG_BT_RX_STACK_SIZE+0x4ec>
     d24:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
     d28:	b118      	cbz	r0, d32 <CONFIG_BT_RX_STACK_SIZE+0x49a>
     d2a:	f002 fab7 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d2e:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
     d32:	b307      	cbz	r7, d76 <CONFIG_BT_RX_STACK_SIZE+0x4de>
     d34:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     d38:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d40:	f8c8 0000 	str.w	r0, [r8]
     d44:	2300      	movs	r3, #0
     d46:	2203      	movs	r2, #3
     d48:	2005      	movs	r0, #5
     d4a:	f001 ff21 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d4e:	b378      	cbz	r0, db0 <CONFIG_BT_RX_STACK_SIZE+0x518>
     d50:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     d54:	2005      	movs	r0, #5
     d56:	f002 f89d 	bl	2e94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     d5a:	4913      	ldr	r1, [pc, #76]	; (da8 <CONFIG_BT_RX_STACK_SIZE+0x510>)
     d5c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     d60:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     d64:	4911      	ldr	r1, [pc, #68]	; (dac <CONFIG_BT_RX_STACK_SIZE+0x514>)
     d66:	12e0      	asrs	r0, r4, #11
     d68:	6008      	str	r0, [r1, #0]
     d6a:	4c06      	ldr	r4, [pc, #24]	; (d84 <CONFIG_BT_RX_STACK_SIZE+0x4ec>)
     d6c:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
     d70:	b3f0      	cbz	r0, df0 <CONFIG_BT_RX_STACK_SIZE+0x558>
     d72:	e05d      	b.n	e30 <CONFIG_BT_RX_STACK_SIZE+0x598>
     d74:	e01d      	b.n	db2 <CONFIG_BT_RX_STACK_SIZE+0x51a>
     d76:	e021      	b.n	dbc <CONFIG_BT_RX_STACK_SIZE+0x524>
     d78:	40000508 	.word	0x40000508
     d7c:	20000010 	.word	0x20000010
     d80:	20000b7c 	.word	0x20000b7c
     d84:	20000e7c 	.word	0x20000e7c
     d88:	20000012 	.word	0x20000012
     d8c:	1e847fff 	.word	0x1e847fff
     d90:	07a12000 	.word	0x07a12000
     d94:	f85ee000 	.word	0xf85ee000
     d98:	1e848000 	.word	0x1e848000
     d9c:	e17b8000 	.word	0xe17b8000
     da0:	003fffff 	.word	0x003fffff
     da4:	4001f508 	.word	0x4001f508
     da8:	4001f098 	.word	0x4001f098
     dac:	4001f504 	.word	0x4001f504
     db0:	e035      	b.n	e1e <CONFIG_BT_RX_STACK_SIZE+0x586>
     db2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e6c <CONFIG_BT_RX_STACK_SIZE+0x5d4>
     db6:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
     dba:	b358      	cbz	r0, e14 <CONFIG_BT_RX_STACK_SIZE+0x57c>
     dbc:	4c2b      	ldr	r4, [pc, #172]	; (e6c <CONFIG_BT_RX_STACK_SIZE+0x5d4>)
     dbe:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
     dc2:	b150      	cbz	r0, dda <CONFIG_BT_RX_STACK_SIZE+0x542>
     dc4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     dc8:	f8c8 0000 	str.w	r0, [r8]
     dcc:	2005      	movs	r0, #5
     dce:	f001 ffa7 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     dd2:	f002 facb 	bl	336c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     dd6:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
     dda:	ac06      	add	r4, sp, #24
     ddc:	4824      	ldr	r0, [pc, #144]	; (e70 <CONFIG_BT_RX_STACK_SIZE+0x5d8>)
     dde:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     de2:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
     de6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
     dea:	f8c0 330c 	str.w	r3, [r0, #780]	; 0x30c
     dee:	e000      	b.n	df2 <CONFIG_BT_RX_STACK_SIZE+0x55a>
     df0:	e01a      	b.n	e28 <CONFIG_BT_RX_STACK_SIZE+0x590>
     df2:	f8c0 c310 	str.w	ip, [r0, #784]	; 0x310
     df6:	ac0a      	add	r4, sp, #40	; 0x28
     df8:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     dfc:	f8c0 1314 	str.w	r1, [r0, #788]	; 0x314
     e00:	f8c0 2318 	str.w	r2, [r0, #792]	; 0x318
     e04:	f8c0 331c 	str.w	r3, [r0, #796]	; 0x31c
     e08:	f8c0 c320 	str.w	ip, [r0, #800]	; 0x320
     e0c:	b01b      	add	sp, #108	; 0x6c
     e0e:	2001      	movs	r0, #1
     e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e14:	f002 fa5e 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e18:	f88a 5030 	strb.w	r5, [sl, #48]	; 0x30
     e1c:	e789      	b.n	d32 <CONFIG_BT_RX_STACK_SIZE+0x49a>
     e1e:	f240 315b 	movw	r1, #859	; 0x35b
     e22:	2070      	movs	r0, #112	; 0x70
     e24:	f002 fbd2 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e28:	f002 fa92 	bl	3350 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e2c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
     e30:	eba6 0009 	sub.w	r0, r6, r9
     e34:	f1a0 0119 	sub.w	r1, r0, #25
     e38:	2900      	cmp	r1, #0
     e3a:	dc04      	bgt.n	e46 <CONFIG_BT_RX_STACK_SIZE+0x5ae>
     e3c:	f640 2151 	movw	r1, #2641	; 0xa51
     e40:	2070      	movs	r0, #112	; 0x70
     e42:	f002 fbc3 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e46:	2203      	movs	r2, #3
     e48:	2301      	movs	r3, #1
     e4a:	4610      	mov	r0, r2
     e4c:	f001 fea0 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e50:	b138      	cbz	r0, e62 <CONFIG_BT_RX_STACK_SIZE+0x5ca>
     e52:	4808      	ldr	r0, [pc, #32]	; (e74 <CONFIG_BT_RX_STACK_SIZE+0x5dc>)
     e54:	6880      	ldr	r0, [r0, #8]
     e56:	f8c0 b000 	str.w	fp, [r0]
     e5a:	4807      	ldr	r0, [pc, #28]	; (e78 <CONFIG_BT_RX_STACK_SIZE+0x5e0>)
     e5c:	f8c0 b000 	str.w	fp, [r0]
     e60:	e7bb      	b.n	dda <CONFIG_BT_RX_STACK_SIZE+0x542>
     e62:	f640 215c 	movw	r1, #2652	; 0xa5c
     e66:	2070      	movs	r0, #112	; 0x70
     e68:	f002 fbb0 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e6c:	20000e7c 	.word	0x20000e7c
     e70:	20000b7c 	.word	0x20000b7c
     e74:	20000010 	.word	0x20000010
     e78:	40000508 	.word	0x40000508
     e7c:	b510      	push	{r4, lr}
     e7e:	4c15      	ldr	r4, [pc, #84]	; (ed4 <CONFIG_BT_RX_STACK_SIZE+0x63c>)
     e80:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
     e84:	2820      	cmp	r0, #32
     e86:	bf18      	it	ne
     e88:	bd10      	popne	{r4, pc}
     e8a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
     e8e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     e92:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
     e96:	2920      	cmp	r1, #32
     e98:	d016      	beq.n	ec8 <CONFIG_BT_RX_STACK_SIZE+0x630>
     e9a:	f8df c03c 	ldr.w	ip, [pc, #60]	; ed8 <CONFIG_BT_RX_STACK_SIZE+0x640>
     e9e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     ea2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     ea6:	785b      	ldrb	r3, [r3, #1]
     ea8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
     eac:	2301      	movs	r3, #1
     eae:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
     eb2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
     eb6:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
     eba:	2002      	movs	r0, #2
     ebc:	f000 f8b2 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
     ec0:	2000      	movs	r0, #0
     ec2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
     ec6:	bd10      	pop	{r4, pc}
     ec8:	f44f 716a 	mov.w	r1, #936	; 0x3a8
     ecc:	2070      	movs	r0, #112	; 0x70
     ece:	f002 fb7d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ed2:	0000      	.short	0x0000
     ed4:	20000e7c 	.word	0x20000e7c
     ed8:	20000dfc 	.word	0x20000dfc
     edc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     ee0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; f98 <CONFIG_BT_RX_STACK_SIZE+0x700>
     ee4:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
     ee8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     eec:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
     ef0:	2c20      	cmp	r4, #32
     ef2:	bf08      	it	eq
     ef4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     ef8:	f8df a0a0 	ldr.w	sl, [pc, #160]	; f9c <CONFIG_BT_RX_STACK_SIZE+0x704>
     efc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; fa0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD>
     f00:	f5a9 7b20 	sub.w	fp, r9, #640	; 0x280
     f04:	eb09 1785 	add.w	r7, r9, r5, lsl #6
     f08:	2607      	movs	r6, #7
     f0a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     f0e:	2801      	cmp	r0, #1
     f10:	d00e      	beq.n	f30 <CONFIG_BT_RX_STACK_SIZE+0x698>
     f12:	2804      	cmp	r0, #4
     f14:	bf08      	it	eq
     f16:	2602      	moveq	r6, #2
     f18:	d00a      	beq.n	f30 <CONFIG_BT_RX_STACK_SIZE+0x698>
     f1a:	2805      	cmp	r0, #5
     f1c:	bf0c      	ite	eq
     f1e:	2603      	moveq	r6, #3
     f20:	2806      	cmpne	r0, #6
     f22:	d005      	beq.n	f30 <CONFIG_BT_RX_STACK_SIZE+0x698>
     f24:	f640 01c2 	movw	r1, #2242	; 0x8c2
     f28:	f04f 0070 	mov.w	r0, #112	; 0x70
     f2c:	f002 fb4e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f30:	f1ba 0f00 	cmp.w	sl, #0
     f34:	bf18      	it	ne
     f36:	f3af 8000 	nopne.w
     f3a:	f3ef 8010 	mrs	r0, PRIMASK
     f3e:	b672      	cpsid	i
     f40:	eb07 0144 	add.w	r1, r7, r4, lsl #1
     f44:	784a      	ldrb	r2, [r1, #1]
     f46:	eb08 0185 	add.w	r1, r8, r5, lsl #2
     f4a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
     f4e:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
     f52:	42a2      	cmp	r2, r4
     f54:	bf04      	itt	eq
     f56:	2220      	moveq	r2, #32
     f58:	f881 2026 	strbeq.w	r2, [r1, #38]	; 0x26
     f5c:	b1a8      	cbz	r0, f8a <CONFIG_BT_RX_STACK_SIZE+0x6f2>
     f5e:	462a      	mov	r2, r5
     f60:	4621      	mov	r1, r4
     f62:	2001      	movs	r0, #1
     f64:	f000 f85e 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
     f68:	eb04 0084 	add.w	r0, r4, r4, lsl #2
     f6c:	4631      	mov	r1, r6
     f6e:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
     f72:	4620      	mov	r0, r4
     f74:	4790      	blx	r2
     f76:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
     f7a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     f7e:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
     f82:	2c20      	cmp	r4, #32
     f84:	d1be      	bne.n	f04 <CONFIG_BT_RX_STACK_SIZE+0x66c>
     f86:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     f8a:	4806      	ldr	r0, [pc, #24]	; (fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>)
     f8c:	2800      	cmp	r0, #0
     f8e:	bf18      	it	ne
     f90:	f3af 8000 	nopne.w
     f94:	b662      	cpsie	i
     f96:	e7e2      	b.n	f5e <CONFIG_BT_RX_STACK_SIZE+0x6c6>
     f98:	20000e7c 	.word	0x20000e7c
     f9c:	00000000 	.word	0x00000000
     fa0:	20000dfc 	.word	0x20000dfc
     fa4:	00000000 	.word	0x00000000
     fa8:	b510      	push	{r4, lr}
     faa:	4604      	mov	r4, r0
     fac:	6800      	ldr	r0, [r0, #0]
     fae:	f00d fe33 	bl	ec18 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
     fb2:	4601      	mov	r1, r0
     fb4:	8960      	ldrh	r0, [r4, #10]
     fb6:	f994 2008 	ldrsb.w	r2, [r4, #8]
     fba:	f8df c054 	ldr.w	ip, [pc, #84]	; 1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
     fbe:	4410      	add	r0, r2
     fc0:	1cc2      	adds	r2, r0, #3
     fc2:	1888      	adds	r0, r1, r2
     fc4:	2300      	movs	r3, #0
     fc6:	ebbc 0101 	subs.w	r1, ip, r1
     fca:	eb73 0103 	sbcs.w	r1, r3, r3
     fce:	d204      	bcs.n	fda <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3a>
     fd0:	f240 51f5 	movw	r1, #1525	; 0x5f5
     fd4:	2070      	movs	r0, #112	; 0x70
     fd6:	f002 faf9 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fda:	490e      	ldr	r1, [pc, #56]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     fdc:	428a      	cmp	r2, r1
     fde:	dd04      	ble.n	fea <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4a>
     fe0:	f240 51f6 	movw	r1, #1526	; 0x5f6
     fe4:	2070      	movs	r0, #112	; 0x70
     fe6:	f002 faf1 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fea:	490b      	ldr	r1, [pc, #44]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     fec:	428a      	cmp	r2, r1
     fee:	da04      	bge.n	ffa <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x5a>
     ff0:	f240 51f7 	movw	r1, #1527	; 0x5f7
     ff4:	2070      	movs	r0, #112	; 0x70
     ff6:	f002 fae9 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ffa:	4908      	ldr	r1, [pc, #32]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     ffc:	4288      	cmp	r0, r1
     ffe:	bfa8      	it	ge
    1000:	4907      	ldrge	r1, [pc, #28]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    1002:	da03      	bge.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    1004:	2800      	cmp	r0, #0
    1006:	bfb4      	ite	lt
    1008:	4904      	ldrlt	r1, [pc, #16]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
    100a:	bd10      	popge	{r4, pc}
    100c:	1840      	adds	r0, r0, r1
    100e:	bd10      	pop	{r4, pc}
    1010:	1e847fff 	.word	0x1e847fff
    1014:	07a12000 	.word	0x07a12000
    1018:	f85ee000 	.word	0xf85ee000
    101c:	1e848000 	.word	0x1e848000
    1020:	e17b8000 	.word	0xe17b8000
    1024:	f8df c054 	ldr.w	ip, [pc, #84]	; 107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    1028:	b510      	push	{r4, lr}
    102a:	2300      	movs	r3, #0
    102c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1030:	2807      	cmp	r0, #7
    1032:	d21e      	bcs.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
    1034:	e8df f000 	tbb	[pc, r0]
    1038:	05050505 	.word	0x05050505
    103c:	00040404 	.word	0x00040404
    1040:	2301      	movs	r3, #1
    1042:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1046:	2b00      	cmp	r3, #0
    1048:	bf08      	it	eq
    104a:	bd10      	popeq	{r4, pc}
    104c:	480c      	ldr	r0, [pc, #48]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
    104e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1052:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    1056:	2820      	cmp	r0, #32
    1058:	bf0e      	itee	eq
    105a:	f882 1025 	strbeq.w	r1, [r2, #37]	; 0x25
    105e:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1062:	7041      	strbne	r1, [r0, #1]
    1064:	2020      	movs	r0, #32
    1066:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    106a:	7058      	strb	r0, [r3, #1]
    106c:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    1070:	bd10      	pop	{r4, pc}
    1072:	f44f 7120 	mov.w	r1, #640	; 0x280
    1076:	2070      	movs	r0, #112	; 0x70
    1078:	f002 faa8 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    107c:	20000dfc 	.word	0x20000dfc
    1080:	20000e7c 	.word	0x20000e7c
    1084:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1088:	b083      	sub	sp, #12
    108a:	485e      	ldr	r0, [pc, #376]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    108c:	9904      	ldr	r1, [sp, #16]
    108e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1092:	9001      	str	r0, [sp, #4]
    1094:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
    1098:	9803      	ldr	r0, [sp, #12]
    109a:	4625      	mov	r5, r4
    109c:	2801      	cmp	r0, #1
    109e:	bf18      	it	ne
    10a0:	2802      	cmpne	r0, #2
    10a2:	d005      	beq.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    10a4:	f640 2198 	movw	r1, #2712	; 0xa98
    10a8:	f04f 0070 	mov.w	r0, #112	; 0x70
    10ac:	f002 fa8e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10b0:	2700      	movs	r7, #0
    10b2:	2d20      	cmp	r5, #32
    10b4:	d04c      	beq.n	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
    10b6:	4853      	ldr	r0, [pc, #332]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    10b8:	9100      	str	r1, [sp, #0]
    10ba:	2600      	movs	r6, #0
    10bc:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
    10c0:	2900      	cmp	r1, #0
    10c2:	bf04      	itt	eq
    10c4:	6800      	ldreq	r0, [r0, #0]
    10c6:	7886      	ldrbeq	r6, [r0, #2]
    10c8:	f001 fbdc 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    10cc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    10d0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    10d4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    10d8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
    10dc:	684a      	ldr	r2, [r1, #4]
    10de:	6889      	ldr	r1, [r1, #8]
    10e0:	1a12      	subs	r2, r2, r0
    10e2:	1a09      	subs	r1, r1, r0
    10e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    10e8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    10ec:	4296      	cmp	r6, r2
    10ee:	bf98      	it	ls
    10f0:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    10f4:	d201      	bcs.n	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
    10f6:	4589      	cmp	r9, r1
    10f8:	d228      	bcs.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    10fa:	4a45      	ldr	r2, [pc, #276]	; (1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
    10fc:	9900      	ldr	r1, [sp, #0]
    10fe:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1102:	4622      	mov	r2, r4
    1104:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1108:	784c      	ldrb	r4, [r1, #1]
    110a:	2c20      	cmp	r4, #32
    110c:	d016      	beq.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    110e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    1112:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    1116:	f8dc 8004 	ldr.w	r8, [ip, #4]
    111a:	f8dc c008 	ldr.w	ip, [ip, #8]
    111e:	eba8 0800 	sub.w	r8, r8, r0
    1122:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1126:	ebac 0100 	sub.w	r1, ip, r0
    112a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    112e:	4546      	cmp	r6, r8
    1130:	bf98      	it	ls
    1132:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1136:	d2e4      	bcs.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    1138:	4589      	cmp	r9, r1
    113a:	d3e2      	bcc.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    113c:	2a20      	cmp	r2, #32
    113e:	d005      	beq.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
    1140:	2120      	movs	r1, #32
    1142:	2004      	movs	r0, #4
    1144:	9b00      	ldr	r3, [sp, #0]
    1146:	f7ff f9db 	bl	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
    114a:	4604      	mov	r4, r0
    114c:	42ac      	cmp	r4, r5
    114e:	d117      	bne.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1150:	4830      	ldr	r0, [pc, #192]	; (1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
    1152:	2800      	cmp	r0, #0
    1154:	bf18      	it	ne
    1156:	f3af 8000 	nopne.w
    115a:	f001 fb93 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    115e:	4c29      	ldr	r4, [pc, #164]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    1160:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    1164:	2920      	cmp	r1, #32
    1166:	d00f      	beq.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    1168:	6822      	ldr	r2, [r4, #0]
    116a:	6921      	ldr	r1, [r4, #16]
    116c:	7892      	ldrb	r2, [r2, #2]
    116e:	4402      	add	r2, r0
    1170:	1a51      	subs	r1, r2, r1
    1172:	0209      	lsls	r1, r1, #8
    1174:	17ca      	asrs	r2, r1, #31
    1176:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    117a:	1209      	asrs	r1, r1, #8
    117c:	2900      	cmp	r1, #0
    117e:	dd03      	ble.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    1180:	b005      	add	sp, #20
    1182:	2000      	movs	r0, #0
    1184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1188:	2d20      	cmp	r5, #32
    118a:	d00d      	beq.n	11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
    118c:	462a      	mov	r2, r5
    118e:	9903      	ldr	r1, [sp, #12]
    1190:	f7ff fbde 	bl	950 <CONFIG_BT_RX_STACK_SIZE+0xb8>
    1194:	b358      	cbz	r0, 11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    1196:	9801      	ldr	r0, [sp, #4]
    1198:	f880 7027 	strb.w	r7, [r0, #39]	; 0x27
    119c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    11a0:	b005      	add	sp, #20
    11a2:	2001      	movs	r0, #1
    11a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11a8:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    11ac:	b118      	cbz	r0, 11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
    11ae:	f002 f875 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    11b2:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    11b6:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    11ba:	b150      	cbz	r0, 11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11bc:	4916      	ldr	r1, [pc, #88]	; (1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
    11be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    11c2:	6008      	str	r0, [r1, #0]
    11c4:	2005      	movs	r0, #5
    11c6:	f001 fdab 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11ca:	f002 f8cf 	bl	336c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    11ce:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
    11d2:	2004      	movs	r0, #4
    11d4:	f001 fda4 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    11d8:	f001 fdfe 	bl	2dd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    11dc:	2020      	movs	r0, #32
    11de:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    11e2:	480e      	ldr	r0, [pc, #56]	; (121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>)
    11e4:	6880      	ldr	r0, [r0, #8]
    11e6:	6007      	str	r7, [r0, #0]
    11e8:	480d      	ldr	r0, [pc, #52]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    11ea:	6007      	str	r7, [r0, #0]
    11ec:	e7d8      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    11ee:	462a      	mov	r2, r5
    11f0:	2120      	movs	r1, #32
    11f2:	2004      	movs	r0, #4
    11f4:	9b04      	ldr	r3, [sp, #16]
    11f6:	f7ff f983 	bl	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
    11fa:	b005      	add	sp, #20
    11fc:	2000      	movs	r0, #0
    11fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1202:	0000      	.short	0x0000
    1204:	20000e7c 	.word	0x20000e7c
    1208:	003fffff 	.word	0x003fffff
    120c:	20000b7c 	.word	0x20000b7c
    1210:	20000dfc 	.word	0x20000dfc
    1214:	00000000 	.word	0x00000000
    1218:	4001f508 	.word	0x4001f508
    121c:	20000010 	.word	0x20000010
    1220:	40000508 	.word	0x40000508

00001224 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1228:	4e76      	ldr	r6, [pc, #472]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    122a:	4607      	mov	r7, r0
    122c:	b087      	sub	sp, #28
    122e:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    1232:	468a      	mov	sl, r1
    1234:	2820      	cmp	r0, #32
    1236:	d05a      	beq.n	12ee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1238:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    123c:	f106 0410 	add.w	r4, r6, #16
    1240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1244:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
    1248:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    124c:	2020      	movs	r0, #32
    124e:	f88d 0000 	strb.w	r0, [sp]
    1252:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    1256:	aa03      	add	r2, sp, #12
    1258:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    125c:	a901      	add	r1, sp, #4
    125e:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
    1262:	6970      	ldr	r0, [r6, #20]
    1264:	9002      	str	r0, [sp, #8]
    1266:	6870      	ldr	r0, [r6, #4]
    1268:	4438      	add	r0, r7
    126a:	f001 fe69 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    126e:	f99d 000c 	ldrsb.w	r0, [sp, #12]
    1272:	2800      	cmp	r0, #0
    1274:	dd02      	ble.n	127c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x58>
    1276:	9801      	ldr	r0, [sp, #4]
    1278:	1c40      	adds	r0, r0, #1
    127a:	9001      	str	r0, [sp, #4]
    127c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    1280:	9901      	ldr	r1, [sp, #4]
    1282:	2f64      	cmp	r7, #100	; 0x64
    1284:	4408      	add	r0, r1
    1286:	d337      	bcc.n	12f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1288:	4b5f      	ldr	r3, [pc, #380]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    128a:	2200      	movs	r2, #0
    128c:	1bdb      	subs	r3, r3, r7
    128e:	eb72 0102 	sbcs.w	r1, r2, r2
    1292:	d331      	bcc.n	12f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    1294:	f8d8 1004 	ldr.w	r1, [r8, #4]
    1298:	1a41      	subs	r1, r0, r1
    129a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    129e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    12a2:	d229      	bcs.n	12f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd4>
    12a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    12a8:	6060      	str	r0, [r4, #4]
    12aa:	4856      	ldr	r0, [pc, #344]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    12ac:	f884 a00c 	strb.w	sl, [r4, #12]
    12b0:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    12b4:	46ea      	mov	sl, sp
    12b6:	2d20      	cmp	r5, #32
    12b8:	bf1c      	itt	ne
    12ba:	4954      	ldrne	r1, [pc, #336]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    12bc:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    12c0:	d04a      	beq.n	1358 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    12c2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    12c6:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    12ca:	6860      	ldr	r0, [r4, #4]
    12cc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    12d0:	4621      	mov	r1, r4
    12d2:	1a10      	subs	r0, r2, r0
    12d4:	0200      	lsls	r0, r0, #8
    12d6:	17c2      	asrs	r2, r0, #31
    12d8:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12dc:	f108 0604 	add.w	r6, r8, #4
    12e0:	1200      	asrs	r0, r0, #8
    12e2:	d426      	bmi.n	1332 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10e>
    12e4:	8970      	ldrh	r0, [r6, #10]
    12e6:	b388      	cbz	r0, 134c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x128>
    12e8:	8948      	ldrh	r0, [r1, #10]
    12ea:	b148      	cbz	r0, 1300 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xdc>
    12ec:	e034      	b.n	1358 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    12ee:	f640 3165 	movw	r1, #2917	; 0xb65
    12f2:	2070      	movs	r0, #112	; 0x70
    12f4:	f002 f96a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12f8:	b007      	add	sp, #28
    12fa:	2001      	movs	r0, #1
    12fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1300:	4620      	mov	r0, r4
    1302:	f7ff fe51 	bl	fa8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x8>
    1306:	aa05      	add	r2, sp, #20
    1308:	a904      	add	r1, sp, #16
    130a:	f001 fe19 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    130e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    1312:	2800      	cmp	r0, #0
    1314:	bfcc      	ite	gt
    1316:	2001      	movgt	r0, #1
    1318:	2000      	movle	r0, #0
    131a:	f100 0133 	add.w	r1, r0, #51	; 0x33
    131e:	9804      	ldr	r0, [sp, #16]
    1320:	6832      	ldr	r2, [r6, #0]
    1322:	1a10      	subs	r0, r2, r0
    1324:	0200      	lsls	r0, r0, #8
    1326:	17c2      	asrs	r2, r0, #31
    1328:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    132c:	1200      	asrs	r0, r0, #8
    132e:	4288      	cmp	r0, r1
    1330:	da12      	bge.n	1358 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1332:	f88a 5000 	strb.w	r5, [sl]
    1336:	f898 1010 	ldrb.w	r1, [r8, #16]
    133a:	7b20      	ldrb	r0, [r4, #12]
    133c:	4281      	cmp	r1, r0
    133e:	d806      	bhi.n	134e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1340:	9802      	ldr	r0, [sp, #8]
    1342:	6060      	str	r0, [r4, #4]
    1344:	b007      	add	sp, #28
    1346:	2003      	movs	r0, #3
    1348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    134c:	e004      	b.n	1358 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    134e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1352:	7845      	ldrb	r5, [r0, #1]
    1354:	2d20      	cmp	r5, #32
    1356:	d1b4      	bne.n	12c2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x9e>
    1358:	4d2a      	ldr	r5, [pc, #168]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    135a:	68e8      	ldr	r0, [r5, #12]
    135c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1360:	d016      	beq.n	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
    1362:	f001 fa8f 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1366:	68e9      	ldr	r1, [r5, #12]
    1368:	1a08      	subs	r0, r1, r0
    136a:	0200      	lsls	r0, r0, #8
    136c:	17c1      	asrs	r1, r0, #31
    136e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1372:	1200      	asrs	r0, r0, #8
    1374:	2802      	cmp	r0, #2
    1376:	dc05      	bgt.n	1384 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x160>
    1378:	9802      	ldr	r0, [sp, #8]
    137a:	6060      	str	r0, [r4, #4]
    137c:	b007      	add	sp, #28
    137e:	2002      	movs	r0, #2
    1380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1384:	2005      	movs	r0, #5
    1386:	f001 fccb 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    138a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    138e:	60e8      	str	r0, [r5, #12]
    1390:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    1394:	f89d 2000 	ldrb.w	r2, [sp]
    1398:	2120      	movs	r1, #32
    139a:	2a20      	cmp	r2, #32
    139c:	bf13      	iteet	ne
    139e:	2005      	movne	r0, #5
    13a0:	eb05 0083 	addeq.w	r0, r5, r3, lsl #2
    13a4:	f890 0024 	ldrbeq.w	r0, [r0, #36]	; 0x24
    13a8:	f7ff f8aa 	blne	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
    13ac:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
    13b0:	4916      	ldr	r1, [pc, #88]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    13b2:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    13b6:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    13ba:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    13be:	7048      	strb	r0, [r1, #1]
    13c0:	6868      	ldr	r0, [r5, #4]
    13c2:	4438      	add	r0, r7
    13c4:	6068      	str	r0, [r5, #4]
    13c6:	2001      	movs	r0, #1
    13c8:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
    13cc:	7f68      	ldrb	r0, [r5, #29]
    13ce:	2801      	cmp	r0, #1
    13d0:	d10a      	bne.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    13d2:	6828      	ldr	r0, [r5, #0]
    13d4:	6969      	ldr	r1, [r5, #20]
    13d6:	7840      	ldrb	r0, [r0, #1]
    13d8:	2801      	cmp	r0, #1
    13da:	d811      	bhi.n	1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
    13dc:	b180      	cbz	r0, 1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
    13de:	1a08      	subs	r0, r1, r0
    13e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13e4:	f001 faee 	bl	29c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    13e8:	f89d 0000 	ldrb.w	r0, [sp]
    13ec:	2820      	cmp	r0, #32
    13ee:	d003      	beq.n	13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>
    13f0:	4807      	ldr	r0, [pc, #28]	; (1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)
    13f2:	7840      	ldrb	r0, [r0, #1]
    13f4:	f002 f9ba 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    13f8:	b007      	add	sp, #28
    13fa:	2000      	movs	r0, #0
    13fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1400:	2001      	movs	r0, #1
    1402:	e7ec      	b.n	13de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56>
    1404:	20000e7c 	.word	0x20000e7c
    1408:	07a11fff 	.word	0x07a11fff
    140c:	20000dfc 	.word	0x20000dfc
    1410:	20000010 	.word	0x20000010

00001414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1414:	4602      	mov	r2, r0
    1416:	f8df c054 	ldr.w	ip, [pc, #84]	; 146c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>
    141a:	b510      	push	{r4, lr}
    141c:	2300      	movs	r3, #0
    141e:	ebbc 0202 	subs.w	r2, ip, r2
    1422:	4408      	add	r0, r1
    1424:	eb73 0203 	sbcs.w	r2, r3, r3
    1428:	d204      	bcs.n	1434 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x20>
    142a:	f240 51f5 	movw	r1, #1525	; 0x5f5
    142e:	2070      	movs	r0, #112	; 0x70
    1430:	f002 f8cc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1434:	4a0e      	ldr	r2, [pc, #56]	; (1470 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1436:	4291      	cmp	r1, r2
    1438:	dd04      	ble.n	1444 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x30>
    143a:	f240 51f6 	movw	r1, #1526	; 0x5f6
    143e:	2070      	movs	r0, #112	; 0x70
    1440:	f002 f8c4 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1444:	4a0b      	ldr	r2, [pc, #44]	; (1474 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1446:	4291      	cmp	r1, r2
    1448:	da04      	bge.n	1454 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x40>
    144a:	f240 51f7 	movw	r1, #1527	; 0x5f7
    144e:	2070      	movs	r0, #112	; 0x70
    1450:	f002 f8bc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1454:	4908      	ldr	r1, [pc, #32]	; (1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1456:	4288      	cmp	r0, r1
    1458:	bfa8      	it	ge
    145a:	4908      	ldrge	r1, [pc, #32]	; (147c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x68>)
    145c:	da03      	bge.n	1466 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x52>
    145e:	2800      	cmp	r0, #0
    1460:	bfb4      	ite	lt
    1462:	4905      	ldrlt	r1, [pc, #20]	; (1478 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x64>)
    1464:	bd10      	popge	{r4, pc}
    1466:	1840      	adds	r0, r0, r1
    1468:	bd10      	pop	{r4, pc}
    146a:	0000      	.short	0x0000
    146c:	1e847fff 	.word	0x1e847fff
    1470:	07a12000 	.word	0x07a12000
    1474:	f85ee000 	.word	0xf85ee000
    1478:	1e848000 	.word	0x1e848000
    147c:	e17b8000 	.word	0xe17b8000

00001480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1480:	4a10      	ldr	r2, [pc, #64]	; (14c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1482:	1a0b      	subs	r3, r1, r0
    1484:	f102 0c01 	add.w	ip, r2, #1
    1488:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    148c:	bf3c      	itt	cc
    148e:	4618      	movcc	r0, r3
    1490:	4770      	bxcc	lr
    1492:	b510      	push	{r4, lr}
    1494:	1a44      	subs	r4, r0, r1
    1496:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    149a:	bf3c      	itt	cc
    149c:	4618      	movcc	r0, r3
    149e:	bd10      	popcc	{r4, pc}
    14a0:	429a      	cmp	r2, r3
    14a2:	d203      	bcs.n	14ac <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    14a4:	1a10      	subs	r0, r2, r0
    14a6:	4408      	add	r0, r1
    14a8:	1c40      	adds	r0, r0, #1
    14aa:	bd10      	pop	{r4, pc}
    14ac:	42a2      	cmp	r2, r4
    14ae:	d204      	bcs.n	14ba <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    14b0:	1a51      	subs	r1, r2, r1
    14b2:	4408      	add	r0, r1
    14b4:	1c40      	adds	r0, r0, #1
    14b6:	4240      	negs	r0, r0
    14b8:	bd10      	pop	{r4, pc}
    14ba:	f640 21f4 	movw	r1, #2804	; 0xaf4
    14be:	2070      	movs	r0, #112	; 0x70
    14c0:	f002 f884 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14c4:	1e847fff 	.word	0x1e847fff

000014c8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    14c8:	490b      	ldr	r1, [pc, #44]	; (14f8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x30>)
    14ca:	b510      	push	{r4, lr}
    14cc:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
    14d0:	2820      	cmp	r0, #32
    14d2:	d00c      	beq.n	14ee <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x26>
    14d4:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
    14d8:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
    14dc:	4a07      	ldr	r2, [pc, #28]	; (14fc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x34>)
    14de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    14e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    14e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    14ea:	2104      	movs	r1, #4
    14ec:	4710      	bx	r2
    14ee:	f640 01a6 	movw	r1, #2214	; 0x8a6
    14f2:	2070      	movs	r0, #112	; 0x70
    14f4:	f002 f86a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f8:	20000e7c 	.word	0x20000e7c
    14fc:	20000b7c 	.word	0x20000b7c

00001500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1500:	b570      	push	{r4, r5, r6, lr}
    1502:	4e64      	ldr	r6, [pc, #400]	; (1694 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x194>)
    1504:	4964      	ldr	r1, [pc, #400]	; (1698 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x198>)
    1506:	2501      	movs	r5, #1
    1508:	f506 7440 	add.w	r4, r6, #768	; 0x300
    150c:	2808      	cmp	r0, #8
    150e:	d27c      	bcs.n	160a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10a>
    1510:	e8df f000 	tbb	[pc, r0]
    1514:	a28f5e04 	.word	0xa28f5e04
    1518:	aca745ba 	.word	0xaca745ba
    151c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    1520:	b918      	cbnz	r0, 152a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1522:	f001 fed7 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1526:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    152a:	8b60      	ldrh	r0, [r4, #26]
    152c:	b110      	cbz	r0, 1534 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    152e:	f001 ffe9 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1532:	b188      	cbz	r0, 1558 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1534:	f7ff fca2 	bl	e7c <CONFIG_BT_RX_STACK_SIZE+0x5e4>
    1538:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    153c:	68e1      	ldr	r1, [r4, #12]
    153e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1542:	d005      	beq.n	1550 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1544:	2301      	movs	r3, #1
    1546:	2203      	movs	r2, #3
    1548:	2005      	movs	r0, #5
    154a:	f001 fb21 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    154e:	b140      	cbz	r0, 1562 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1550:	7f60      	ldrb	r0, [r4, #29]
    1552:	2801      	cmp	r0, #1
    1554:	d00a      	beq.n	156c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1556:	e014      	b.n	1582 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x82>
    1558:	f640 015e 	movw	r1, #2142	; 0x85e
    155c:	2070      	movs	r0, #112	; 0x70
    155e:	f002 f835 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1562:	f640 0163 	movw	r1, #2147	; 0x863
    1566:	2070      	movs	r0, #112	; 0x70
    1568:	f002 f830 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    156c:	6820      	ldr	r0, [r4, #0]
    156e:	6961      	ldr	r1, [r4, #20]
    1570:	7840      	ldrb	r0, [r0, #1]
    1572:	2801      	cmp	r0, #1
    1574:	d811      	bhi.n	159a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x9a>
    1576:	b180      	cbz	r0, 159a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x9a>
    1578:	1a08      	subs	r0, r1, r0
    157a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    157e:	f001 fa21 	bl	29c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1582:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1586:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    158a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    158e:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1596:	2101      	movs	r1, #1
    1598:	4710      	bx	r2
    159a:	2001      	movs	r0, #1
    159c:	e7ec      	b.n	1578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    159e:	f7ff fc6d 	bl	e7c <CONFIG_BT_RX_STACK_SIZE+0x5e4>
    15a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    15a6:	60e0      	str	r0, [r4, #12]
    15a8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    15ac:	b158      	cbz	r0, 15c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc6>
    15ae:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    15b2:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    15b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    15ba:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    15be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    15c2:	2106      	movs	r1, #6
    15c4:	4710      	bx	r2
    15c6:	f640 0173 	movw	r1, #2163	; 0x873
    15ca:	2070      	movs	r0, #112	; 0x70
    15cc:	f001 fffe 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d0:	f7ff fc54 	bl	e7c <CONFIG_BT_RX_STACK_SIZE+0x5e4>
    15d4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    15d8:	f001 ff94 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15dc:	b118      	cbz	r0, 15e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xe6>
    15de:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    15e2:	b128      	cbz	r0, 15f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf0>
    15e4:	e008      	b.n	15f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    15e6:	f640 0182 	movw	r1, #2178	; 0x882
    15ea:	2070      	movs	r0, #112	; 0x70
    15ec:	f001 ffee 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f0:	f001 fe70 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15f4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    15f8:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    15fc:	b168      	cbz	r0, 161a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    15fe:	4927      	ldr	r1, [pc, #156]	; (169c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x19c>)
    1600:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1604:	6008      	str	r0, [r1, #0]
    1606:	2005      	movs	r0, #5
    1608:	e000      	b.n	160c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    160a:	e03d      	b.n	1688 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x188>
    160c:	f001 fb88 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1610:	f001 feac 	bl	336c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1614:	2000      	movs	r0, #0
    1616:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    161a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    161e:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1622:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1626:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    162a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    162e:	2100      	movs	r1, #0
    1630:	4710      	bx	r2
    1632:	f001 fc1b 	bl	2e6c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1636:	8b60      	ldrh	r0, [r4, #26]
    1638:	b110      	cbz	r0, 1640 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x140>
    163a:	f001 ff63 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    163e:	b130      	cbz	r0, 164e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x14e>
    1640:	4817      	ldr	r0, [pc, #92]	; (16a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>)
    1642:	7800      	ldrb	r0, [r0, #0]
    1644:	2803      	cmp	r0, #3
    1646:	bf08      	it	eq
    1648:	f884 5021 	strbeq.w	r5, [r4, #33]	; 0x21
    164c:	bd70      	pop	{r4, r5, r6, pc}
    164e:	f640 018c 	movw	r1, #2188	; 0x88c
    1652:	2070      	movs	r0, #112	; 0x70
    1654:	f001 ffba 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1658:	4812      	ldr	r0, [pc, #72]	; (16a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a4>)
    165a:	6005      	str	r5, [r0, #0]
    165c:	6888      	ldr	r0, [r1, #8]
    165e:	6005      	str	r5, [r0, #0]
    1660:	bd70      	pop	{r4, r5, r6, pc}
    1662:	7808      	ldrb	r0, [r1, #0]
    1664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1668:	f002 b880 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    166c:	f7ff fc06 	bl	e7c <CONFIG_BT_RX_STACK_SIZE+0x5e4>
    1670:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1674:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    1678:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    167c:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
    1680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1684:	2105      	movs	r1, #5
    1686:	4710      	bx	r2
    1688:	f640 019e 	movw	r1, #2206	; 0x89e
    168c:	2070      	movs	r0, #112	; 0x70
    168e:	f001 ff9d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1692:	0000      	.short	0x0000
    1694:	20000b7c 	.word	0x20000b7c
    1698:	20000010 	.word	0x20000010
    169c:	4001f508 	.word	0x4001f508
    16a0:	20000012 	.word	0x20000012
    16a4:	40000508 	.word	0x40000508

000016a8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    16a8:	4803      	ldr	r0, [pc, #12]	; (16b8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    16aa:	b510      	push	{r4, lr}
    16ac:	7840      	ldrb	r0, [r0, #1]
    16ae:	f00d fab3 	bl	ec18 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    16b2:	b280      	uxth	r0, r0
    16b4:	bd10      	pop	{r4, pc}
    16b6:	0000      	.short	0x0000
    16b8:	20000012 	.word	0x20000012

000016bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    16bc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c0:	48fe      	ldr	r0, [pc, #1016]	; (1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>)
    16c2:	b095      	sub	sp, #84	; 0x54
    16c4:	4688      	mov	r8, r1
    16c6:	6800      	ldr	r0, [r0, #0]
    16c8:	4cfd      	ldr	r4, [pc, #1012]	; (1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    16ca:	05c0      	lsls	r0, r0, #23
    16cc:	0dc0      	lsrs	r0, r0, #23
    16ce:	d00e      	beq.n	16ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    16d0:	3810      	subs	r0, #16
    16d2:	b240      	sxtb	r0, r0
    16d4:	2800      	cmp	r0, #0
    16d6:	bfb8      	it	lt
    16d8:	f000 000f 	andlt.w	r0, r0, #15
    16dc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    16e0:	bfac      	ite	ge
    16e2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    16e6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    16ea:	0940      	lsrs	r0, r0, #5
    16ec:	d00d      	beq.n	170a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    16ee:	f898 0000 	ldrb.w	r0, [r8]
    16f2:	f04f 0b00 	mov.w	fp, #0
    16f6:	2800      	cmp	r0, #0
    16f8:	bf18      	it	ne
    16fa:	2801      	cmpne	r0, #1
    16fc:	d018      	beq.n	1730 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    16fe:	f240 714c 	movw	r1, #1868	; 0x74c
    1702:	f04f 0070 	mov.w	r0, #112	; 0x70
    1706:	f001 ff61 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    170a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    170e:	f04f 0b01 	mov.w	fp, #1
    1712:	2820      	cmp	r0, #32
    1714:	d007      	beq.n	1726 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1716:	f898 0000 	ldrb.w	r0, [r8]
    171a:	b148      	cbz	r0, 1730 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    171c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    1720:	2070      	movs	r0, #112	; 0x70
    1722:	f001 ff53 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1726:	f240 7145 	movw	r1, #1861	; 0x745
    172a:	2070      	movs	r0, #112	; 0x70
    172c:	f001 ff4e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1730:	4de4      	ldr	r5, [pc, #912]	; (1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    1732:	b125      	cbz	r5, 173e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1734:	2100      	movs	r1, #0
    1736:	f240 704f 	movw	r0, #1871	; 0x74f
    173a:	f3af 8000 	nop.w
    173e:	9815      	ldr	r0, [sp, #84]	; 0x54
    1740:	49e1      	ldr	r1, [pc, #900]	; (1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    1742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1746:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    174a:	f04f 0901 	mov.w	r9, #1
    174e:	9001      	str	r0, [sp, #4]
    1750:	b125      	cbz	r5, 175c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa0>
    1752:	2100      	movs	r1, #0
    1754:	f240 7057 	movw	r0, #1879	; 0x757
    1758:	f3af 8000 	nop.w
    175c:	f1b9 0f00 	cmp.w	r9, #0
    1760:	d00a      	beq.n	1778 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xbc>
    1762:	bf00      	nop
    1764:	f894 6032 	ldrb.w	r6, [r4, #50]	; 0x32
    1768:	f04f 0a00 	mov.w	sl, #0
    176c:	f884 a02f 	strb.w	sl, [r4, #47]	; 0x2f
    1770:	f1bb 0f00 	cmp.w	fp, #0
    1774:	d007      	beq.n	1786 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xca>
    1776:	e02e      	b.n	17d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11a>
    1778:	48d4      	ldr	r0, [pc, #848]	; (1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    177a:	2800      	cmp	r0, #0
    177c:	bf18      	it	ne
    177e:	f3af 8000 	nopne.w
    1782:	b662      	cpsie	i
    1784:	e7ee      	b.n	1764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa8>
    1786:	4637      	mov	r7, r6
    1788:	2001      	movs	r0, #1
    178a:	ea20 0607 	bic.w	r6, r0, r7
    178e:	48d0      	ldr	r0, [pc, #832]	; (1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    1790:	2240      	movs	r2, #64	; 0x40
    1792:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1796:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    179a:	f002 f869 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    179e:	b125      	cbz	r5, 17aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xee>
    17a0:	2100      	movs	r1, #0
    17a2:	f240 50b9 	movw	r0, #1465	; 0x5b9
    17a6:	f3af 8000 	nop.w
    17aa:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    17ae:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    17b2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    17b4:	6241      	str	r1, [r0, #36]	; 0x24
    17b6:	b125      	cbz	r5, 17c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x106>
    17b8:	2100      	movs	r1, #0
    17ba:	f240 50bd 	movw	r0, #1469	; 0x5bd
    17be:	f3af 8000 	nop.w
    17c2:	b125      	cbz	r5, 17ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x112>
    17c4:	2100      	movs	r1, #0
    17c6:	f240 7061 	movw	r0, #1889	; 0x761
    17ca:	f3af 8000 	nop.w
    17ce:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17d2:	2800      	cmp	r0, #0
    17d4:	d1bc      	bne.n	1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    17d6:	b125      	cbz	r5, 17e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    17d8:	2100      	movs	r1, #0
    17da:	f240 706b 	movw	r0, #1899	; 0x76b
    17de:	f3af 8000 	nop.w
    17e2:	f001 f84f 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    17e6:	4607      	mov	r7, r0
    17e8:	a802      	add	r0, sp, #8
    17ea:	9008      	str	r0, [sp, #32]
    17ec:	f898 0000 	ldrb.w	r0, [r8]
    17f0:	2800      	cmp	r0, #0
    17f2:	f898 000b 	ldrb.w	r0, [r8, #11]
    17f6:	f88d 0015 	strb.w	r0, [sp, #21]
    17fa:	f898 100a 	ldrb.w	r1, [r8, #10]
    17fe:	f88d 1014 	strb.w	r1, [sp, #20]
    1802:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1806:	f8ad 1012 	strh.w	r1, [sp, #18]
    180a:	9000      	str	r0, [sp, #0]
    180c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1810:	d05d      	beq.n	18ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x212>
    1812:	2200      	movs	r2, #0
    1814:	9808      	ldr	r0, [sp, #32]
    1816:	f7fe fe09 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    181a:	9706      	str	r7, [sp, #24]
    181c:	6820      	ldr	r0, [r4, #0]
    181e:	aa0f      	add	r2, sp, #60	; 0x3c
    1820:	a909      	add	r1, sp, #36	; 0x24
    1822:	f890 9003 	ldrb.w	r9, [r0, #3]
    1826:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    182a:	f001 fb89 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    182e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1832:	2820      	cmp	r0, #32
    1834:	d051      	beq.n	18da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x21e>
    1836:	6960      	ldr	r0, [r4, #20]
    1838:	4448      	add	r0, r9
    183a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    183e:	bf00      	nop
    1840:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1844:	1a89      	subs	r1, r1, r2
    1846:	9002      	str	r0, [sp, #8]
    1848:	4408      	add	r0, r1
    184a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    184e:	9003      	str	r0, [sp, #12]
    1850:	4631      	mov	r1, r6
    1852:	9808      	ldr	r0, [sp, #32]
    1854:	f7fe fe90 	bl	578 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12c>
    1858:	f898 000b 	ldrb.w	r0, [r8, #11]
    185c:	9000      	str	r0, [sp, #0]
    185e:	46b9      	mov	r9, r7
    1860:	f8b8 1008 	ldrh.w	r1, [r8, #8]
    1864:	a810      	add	r0, sp, #64	; 0x40
    1866:	f8d8 3004 	ldr.w	r3, [r8, #4]
    186a:	f8d8 200c 	ldr.w	r2, [r8, #12]
    186e:	f7fe fddd 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1872:	9802      	ldr	r0, [sp, #8]
    1874:	9a03      	ldr	r2, [sp, #12]
    1876:	eba0 0009 	sub.w	r0, r0, r9
    187a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    187e:	eba2 0209 	sub.w	r2, r2, r9
    1882:	9911      	ldr	r1, [sp, #68]	; 0x44
    1884:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1888:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    188c:	d201      	bcs.n	1892 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d6>
    188e:	4291      	cmp	r1, r2
    1890:	d209      	bcs.n	18a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ea>
    1892:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1896:	1a89      	subs	r1, r1, r2
    1898:	1878      	adds	r0, r7, r1
    189a:	f027 427f 	bic.w	r2, r7, #4278190080	; 0xff000000
    189e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18a2:	e9cd 2002 	strd	r2, r0, [sp, #8]
    18a6:	b125      	cbz	r5, 18b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f6>
    18a8:	2100      	movs	r1, #0
    18aa:	f240 7072 	movw	r0, #1906	; 0x772
    18ae:	f3af 8000 	nop.w
    18b2:	4a87      	ldr	r2, [pc, #540]	; (1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    18b4:	4639      	mov	r1, r7
    18b6:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    18ba:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    18be:	a802      	add	r0, sp, #8
    18c0:	f817 2019 	ldrb.w	r2, [r7, r9, lsl #1]
    18c4:	2a01      	cmp	r2, #1
    18c6:	bf18      	it	ne
    18c8:	2a02      	cmpne	r2, #2
    18ca:	d01d      	beq.n	1908 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24c>
    18cc:	e05c      	b.n	1988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    18ce:	f8d8 200c 	ldr.w	r2, [r8, #12]
    18d2:	9808      	ldr	r0, [sp, #32]
    18d4:	f7fe fdaa 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    18d8:	e7e5      	b.n	18a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ea>
    18da:	9806      	ldr	r0, [sp, #24]
    18dc:	4448      	add	r0, r9
    18de:	f100 0904 	add.w	r9, r0, #4
    18e2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    18e6:	b128      	cbz	r0, 18f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x238>
    18e8:	f001 fe0c 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    18ec:	2800      	cmp	r0, #0
    18ee:	bf08      	it	eq
    18f0:	f109 0932 	addeq.w	r9, r9, #50	; 0x32
    18f4:	4877      	ldr	r0, [pc, #476]	; (1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    18f6:	7841      	ldrb	r1, [r0, #1]
    18f8:	9809      	ldr	r0, [sp, #36]	; 0x24
    18fa:	4281      	cmp	r1, r0
    18fc:	bf84      	itt	hi
    18fe:	1a08      	subhi	r0, r1, r0
    1900:	4481      	addhi	r9, r0
    1902:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
    1906:	e79b      	b.n	1840 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x184>
    1908:	6822      	ldr	r2, [r4, #0]
    190a:	f8dd c00c 	ldr.w	ip, [sp, #12]
    190e:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 1ad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>
    1912:	7893      	ldrb	r3, [r2, #2]
    1914:	9a02      	ldr	r2, [sp, #8]
    1916:	1a52      	subs	r2, r2, r1
    1918:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    191c:	ebac 0101 	sub.w	r1, ip, r1
    1920:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1924:	4293      	cmp	r3, r2
    1926:	bf98      	it	ls
    1928:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    192c:	d264      	bcs.n	19f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    192e:	458a      	cmp	sl, r1
    1930:	d362      	bcc.n	19f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    1932:	f04f 0a01 	mov.w	sl, #1
    1936:	ab10      	add	r3, sp, #64	; 0x40
    1938:	aa0f      	add	r2, sp, #60	; 0x3c
    193a:	4631      	mov	r1, r6
    193c:	f7fe ff66 	bl	80c <CONFIG_ISR_STACK_SIZE+0xc>
    1940:	2800      	cmp	r0, #0
    1942:	d061      	beq.n	1a08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    1944:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    1948:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    194c:	4633      	mov	r3, r6
    194e:	428a      	cmp	r2, r1
    1950:	d05e      	beq.n	1a10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    1952:	2005      	movs	r0, #5
    1954:	f7fe fdd4 	bl	500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>
    1958:	eb07 0149 	add.w	r1, r7, r9, lsl #1
    195c:	7048      	strb	r0, [r1, #1]
    195e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1962:	2820      	cmp	r0, #32
    1964:	bf03      	ittte	eq
    1966:	eb04 0086 	addeq.w	r0, r4, r6, lsl #2
    196a:	f880 9024 	strbeq.w	r9, [r0, #36]	; 0x24
    196e:	f880 a027 	strbeq.w	sl, [r0, #39]	; 0x27
    1972:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1976:	bf18      	it	ne
    1978:	f880 9001 	strbne.w	r9, [r0, #1]
    197c:	4632      	mov	r2, r6
    197e:	4649      	mov	r1, r9
    1980:	f05f 0003 	movs.w	r0, #3
    1984:	f7ff fb4e 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1988:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    198c:	f890 7027 	ldrb.w	r7, [r0, #39]	; 0x27
    1990:	b125      	cbz	r5, 199c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    1992:	2100      	movs	r1, #0
    1994:	f240 7079 	movw	r0, #1913	; 0x779
    1998:	f3af 8000 	nop.w
    199c:	484f      	ldr	r0, [pc, #316]	; (1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    199e:	2800      	cmp	r0, #0
    19a0:	bf18      	it	ne
    19a2:	f3af 8000 	nopne.w
    19a6:	f3ef 8910 	mrs	r9, PRIMASK
    19aa:	b672      	cpsid	i
    19ac:	b125      	cbz	r5, 19b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    19ae:	2100      	movs	r1, #0
    19b0:	f240 707f 	movw	r0, #1919	; 0x77f
    19b4:	f3af 8000 	nop.w
    19b8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    19bc:	2800      	cmp	r0, #0
    19be:	f47f aec7 	bne.w	1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    19c2:	b125      	cbz	r5, 19ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    19c4:	2100      	movs	r1, #0
    19c6:	f240 7087 	movw	r0, #1927	; 0x787
    19ca:	f3af 8000 	nop.w
    19ce:	f10d 0e04 	add.w	lr, sp, #4
    19d2:	f1ba 0f00 	cmp.w	sl, #0
    19d6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    19da:	f100 0004 	add.w	r0, r0, #4
    19de:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    19e2:	d041      	beq.n	1a68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ac>
    19e4:	b125      	cbz	r5, 19f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    19e6:	2100      	movs	r1, #0
    19e8:	f240 7094 	movw	r0, #1940	; 0x794
    19ec:	f3af 8000 	nop.w
    19f0:	f1bb 0f00 	cmp.w	fp, #0
    19f4:	d12b      	bne.n	1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    19f6:	e015      	b.n	1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    19f8:	4632      	mov	r2, r6
    19fa:	4649      	mov	r1, r9
    19fc:	2004      	movs	r0, #4
    19fe:	f7ff fb11 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1a02:	f04f 0a01 	mov.w	sl, #1
    1a06:	e7bf      	b.n	1988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1a08:	4632      	mov	r2, r6
    1a0a:	4649      	mov	r1, r9
    1a0c:	2004      	movs	r0, #4
    1a0e:	e7b9      	b.n	1984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c8>
    1a10:	2920      	cmp	r1, #32
    1a12:	bf19      	ittee	ne
    1a14:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1a18:	7840      	ldrbne	r0, [r0, #1]
    1a1a:	eb04 0086 	addeq.w	r0, r4, r6, lsl #2
    1a1e:	f890 0024 	ldrbeq.w	r0, [r0, #36]	; 0x24
    1a22:	e799      	b.n	1958 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29c>
    1a24:	b19f      	cbz	r7, 1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a26:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    1a2a:	2820      	cmp	r0, #32
    1a2c:	d10f      	bne.n	1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a2e:	b125      	cbz	r5, 1a3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    1a30:	2100      	movs	r1, #0
    1a32:	f240 7099 	movw	r0, #1945	; 0x799
    1a36:	f3af 8000 	nop.w
    1a3a:	4631      	mov	r1, r6
    1a3c:	2002      	movs	r0, #2
    1a3e:	f7ff fb21 	bl	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    1a42:	b920      	cbnz	r0, 1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x392>
    1a44:	f898 0000 	ldrb.w	r0, [r8]
    1a48:	b3b8      	cbz	r0, 1aba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fe>
    1a4a:	2801      	cmp	r0, #1
    1a4c:	d05d      	beq.n	1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44e>
    1a4e:	b125      	cbz	r5, 1a5a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39e>
    1a50:	2100      	movs	r1, #0
    1a52:	f240 70b6 	movw	r0, #1974	; 0x7b6
    1a56:	f3af 8000 	nop.w
    1a5a:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    1a5e:	2001      	movs	r0, #1
    1a60:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    1a64:	f04f 0a01 	mov.w	sl, #1
    1a68:	b125      	cbz	r5, 1a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    1a6a:	2100      	movs	r1, #0
    1a6c:	f240 70bf 	movw	r0, #1983	; 0x7bf
    1a70:	f3af 8000 	nop.w
    1a74:	f1b9 0f00 	cmp.w	r9, #0
    1a78:	d050      	beq.n	1b1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    1a7a:	b125      	cbz	r5, 1a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ca>
    1a7c:	2100      	movs	r1, #0
    1a7e:	f240 70c3 	movw	r0, #1987	; 0x7c3
    1a82:	f3af 8000 	nop.w
    1a86:	f1ba 0f00 	cmp.w	sl, #0
    1a8a:	d011      	beq.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1a8c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    1a90:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    1a94:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    1a98:	2820      	cmp	r0, #32
    1a9a:	d009      	beq.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    1a9c:	b125      	cbz	r5, 1aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    1a9e:	2100      	movs	r1, #0
    1aa0:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1aa4:	f3af 8000 	nop.w
    1aa8:	480d      	ldr	r0, [pc, #52]	; (1ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    1aaa:	7840      	ldrb	r0, [r0, #1]
    1aac:	f001 fe5e 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ab0:	b1d5      	cbz	r5, 1ae8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    1ab2:	2100      	movs	r1, #0
    1ab4:	f240 70cf 	movw	r0, #1999	; 0x7cf
    1ab8:	e014      	b.n	1ae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    1aba:	e019      	b.n	1af0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    1abc:	e000ed04 	.word	0xe000ed04
    1ac0:	20000e7c 	.word	0x20000e7c
    1ac4:	00000000 	.word	0x00000000
    1ac8:	20000b7c 	.word	0x20000b7c
    1acc:	00000000 	.word	0x00000000
    1ad0:	20000dfc 	.word	0x20000dfc
    1ad4:	20000012 	.word	0x20000012
    1ad8:	003fffff 	.word	0x003fffff
    1adc:	00000000 	.word	0x00000000
    1ae0:	20000010 	.word	0x20000010
    1ae4:	f3af 8000 	nop.w
    1ae8:	b017      	add	sp, #92	; 0x5c
    1aea:	4650      	mov	r0, sl
    1aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1af0:	b125      	cbz	r5, 1afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    1af2:	2100      	movs	r1, #0
    1af4:	f240 70a1 	movw	r0, #1953	; 0x7a1
    1af8:	f3af 8000 	nop.w
    1afc:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    1b00:	2004      	movs	r0, #4
    1b02:	9915      	ldr	r1, [sp, #84]	; 0x54
    1b04:	f7ff fa8e 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1b08:	e7ac      	b.n	1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    1b0a:	2d00      	cmp	r5, #0
    1b0c:	f43f ae20 	beq.w	1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1b10:	2100      	movs	r1, #0
    1b12:	f240 70ac 	movw	r0, #1964	; 0x7ac
    1b16:	f3af 8000 	nop.w
    1b1a:	e619      	b.n	1750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x94>
    1b1c:	4803      	ldr	r0, [pc, #12]	; (1b2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x470>)
    1b1e:	2800      	cmp	r0, #0
    1b20:	bf18      	it	ne
    1b22:	f3af 8000 	nopne.w
    1b26:	b662      	cpsie	i
    1b28:	e7a7      	b.n	1a7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3be>
    1b2a:	0000      	.short	0x0000
    1b2c:	00000000 	.word	0x00000000

00001b30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b34:	4606      	mov	r6, r0
    1b36:	48e4      	ldr	r0, [pc, #912]	; (1ec8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>)
    1b38:	b095      	sub	sp, #84	; 0x54
    1b3a:	6800      	ldr	r0, [r0, #0]
    1b3c:	05c0      	lsls	r0, r0, #23
    1b3e:	0dc0      	lsrs	r0, r0, #23
    1b40:	d011      	beq.n	1b66 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36>
    1b42:	3810      	subs	r0, #16
    1b44:	b240      	sxtb	r0, r0
    1b46:	2800      	cmp	r0, #0
    1b48:	bfb8      	it	lt
    1b4a:	f000 000f 	andlt.w	r0, r0, #15
    1b4e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1b52:	bfac      	ite	ge
    1b54:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1b58:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b5c:	0940      	lsrs	r0, r0, #5
    1b5e:	bf08      	it	eq
    1b60:	f04f 0b01 	moveq.w	fp, #1
    1b64:	d001      	beq.n	1b6a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3a>
    1b66:	f04f 0b00 	mov.w	fp, #0
    1b6a:	7830      	ldrb	r0, [r6, #0]
    1b6c:	2800      	cmp	r0, #0
    1b6e:	f04f 0000 	mov.w	r0, #0
    1b72:	bf1c      	itt	ne
    1b74:	b015      	addne	sp, #84	; 0x54
    1b76:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b7a:	f8df 8350 	ldr.w	r8, [pc, #848]	; 1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>
    1b7e:	4dd4      	ldr	r5, [pc, #848]	; (1ed0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x184>)
    1b80:	f04f 0900 	mov.w	r9, #0
    1b84:	f8cd 0030 	str.w	r0, [sp, #48]	; 0x30
    1b88:	f1b8 0f00 	cmp.w	r8, #0
    1b8c:	d004      	beq.n	1b98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x68>
    1b8e:	2100      	movs	r1, #0
    1b90:	f240 6044 	movw	r0, #1604	; 0x644
    1b94:	f3af 8000 	nop.w
    1b98:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
    1b9c:	f885 902f 	strb.w	r9, [r5, #47]	; 0x2f
    1ba0:	f04f 0a00 	mov.w	sl, #0
    1ba4:	f1b8 0f00 	cmp.w	r8, #0
    1ba8:	d004      	beq.n	1bb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x84>
    1baa:	2100      	movs	r1, #0
    1bac:	f240 6049 	movw	r0, #1609	; 0x649
    1bb0:	f3af 8000 	nop.w
    1bb4:	f1bb 0f00 	cmp.w	fp, #0
    1bb8:	d121      	bne.n	1bfe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1bba:	463c      	mov	r4, r7
    1bbc:	2001      	movs	r0, #1
    1bbe:	ea20 0704 	bic.w	r7, r0, r4
    1bc2:	48c4      	ldr	r0, [pc, #784]	; (1ed4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>)
    1bc4:	2240      	movs	r2, #64	; 0x40
    1bc6:	eb00 1184 	add.w	r1, r0, r4, lsl #6
    1bca:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    1bce:	f001 fe4f 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bd2:	f1b8 0f00 	cmp.w	r8, #0
    1bd6:	d004      	beq.n	1be2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb2>
    1bd8:	2100      	movs	r1, #0
    1bda:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1bde:	f3af 8000 	nop.w
    1be2:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    1be6:	eb05 0087 	add.w	r0, r5, r7, lsl #2
    1bea:	6a49      	ldr	r1, [r1, #36]	; 0x24
    1bec:	6241      	str	r1, [r0, #36]	; 0x24
    1bee:	f1b8 0f00 	cmp.w	r8, #0
    1bf2:	d004      	beq.n	1bfe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xce>
    1bf4:	2100      	movs	r1, #0
    1bf6:	f240 50bd 	movw	r0, #1469	; 0x5bd
    1bfa:	f3af 8000 	nop.w
    1bfe:	f1b8 0f00 	cmp.w	r8, #0
    1c02:	d004      	beq.n	1c0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xde>
    1c04:	2100      	movs	r1, #0
    1c06:	f240 6051 	movw	r0, #1617	; 0x651
    1c0a:	f3af 8000 	nop.w
    1c0e:	f000 fe39 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c12:	4604      	mov	r4, r0
    1c14:	a802      	add	r0, sp, #8
    1c16:	9006      	str	r0, [sp, #24]
    1c18:	7830      	ldrb	r0, [r6, #0]
    1c1a:	2800      	cmp	r0, #0
    1c1c:	7af0      	ldrb	r0, [r6, #11]
    1c1e:	f88d 0015 	strb.w	r0, [sp, #21]
    1c22:	7ab1      	ldrb	r1, [r6, #10]
    1c24:	f88d 1014 	strb.w	r1, [sp, #20]
    1c28:	8931      	ldrh	r1, [r6, #8]
    1c2a:	f8ad 1012 	strh.w	r1, [sp, #18]
    1c2e:	9000      	str	r0, [sp, #0]
    1c30:	6873      	ldr	r3, [r6, #4]
    1c32:	d017      	beq.n	1c64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x134>
    1c34:	2200      	movs	r2, #0
    1c36:	9806      	ldr	r0, [sp, #24]
    1c38:	f7fe fbf8 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1c3c:	9401      	str	r4, [sp, #4]
    1c3e:	6828      	ldr	r0, [r5, #0]
    1c40:	aa10      	add	r2, sp, #64	; 0x40
    1c42:	a90f      	add	r1, sp, #60	; 0x3c
    1c44:	78c0      	ldrb	r0, [r0, #3]
    1c46:	9000      	str	r0, [sp, #0]
    1c48:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1c4c:	f001 f978 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1c50:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1c54:	2820      	cmp	r0, #32
    1c56:	d00a      	beq.n	1c6e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x13e>
    1c58:	6969      	ldr	r1, [r5, #20]
    1c5a:	9800      	ldr	r0, [sp, #0]
    1c5c:	4408      	add	r0, r1
    1c5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c62:	e01f      	b.n	1ca4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    1c64:	68f2      	ldr	r2, [r6, #12]
    1c66:	9806      	ldr	r0, [sp, #24]
    1c68:	f7fe fbe0 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1c6c:	e048      	b.n	1d00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d0>
    1c6e:	e9dd 1000 	ldrd	r1, r0, [sp]
    1c72:	4408      	add	r0, r1
    1c74:	1d00      	adds	r0, r0, #4
    1c76:	9007      	str	r0, [sp, #28]
    1c78:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1c7c:	b128      	cbz	r0, 1c8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15a>
    1c7e:	f001 fc41 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c82:	b910      	cbnz	r0, 1c8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15a>
    1c84:	9807      	ldr	r0, [sp, #28]
    1c86:	3032      	adds	r0, #50	; 0x32
    1c88:	9007      	str	r0, [sp, #28]
    1c8a:	4893      	ldr	r0, [pc, #588]	; (1ed8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>)
    1c8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1c8e:	7840      	ldrb	r0, [r0, #1]
    1c90:	4288      	cmp	r0, r1
    1c92:	bf98      	it	ls
    1c94:	9807      	ldrls	r0, [sp, #28]
    1c96:	d903      	bls.n	1ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x170>
    1c98:	1a41      	subs	r1, r0, r1
    1c9a:	9807      	ldr	r0, [sp, #28]
    1c9c:	4408      	add	r0, r1
    1c9e:	9007      	str	r0, [sp, #28]
    1ca0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ca4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1ca8:	1a89      	subs	r1, r1, r2
    1caa:	9002      	str	r0, [sp, #8]
    1cac:	4408      	add	r0, r1
    1cae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cb2:	9003      	str	r0, [sp, #12]
    1cb4:	4639      	mov	r1, r7
    1cb6:	9806      	ldr	r0, [sp, #24]
    1cb8:	f7fe fc5e 	bl	578 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12c>
    1cbc:	9409      	str	r4, [sp, #36]	; 0x24
    1cbe:	7af0      	ldrb	r0, [r6, #11]
    1cc0:	9000      	str	r0, [sp, #0]
    1cc2:	8931      	ldrh	r1, [r6, #8]
    1cc4:	a810      	add	r0, sp, #64	; 0x40
    1cc6:	6873      	ldr	r3, [r6, #4]
    1cc8:	68f2      	ldr	r2, [r6, #12]
    1cca:	f7fe fbaf 	bl	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>
    1cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cd0:	9802      	ldr	r0, [sp, #8]
    1cd2:	9a03      	ldr	r2, [sp, #12]
    1cd4:	1ac0      	subs	r0, r0, r3
    1cd6:	1ad2      	subs	r2, r2, r3
    1cd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cdc:	9911      	ldr	r1, [sp, #68]	; 0x44
    1cde:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1ce2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1ce6:	d201      	bcs.n	1cec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1bc>
    1ce8:	4291      	cmp	r1, r2
    1cea:	d209      	bcs.n	1d00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d0>
    1cec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1cf0:	1a89      	subs	r1, r1, r2
    1cf2:	1860      	adds	r0, r4, r1
    1cf4:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    1cf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cfc:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1d00:	f1b8 0f00 	cmp.w	r8, #0
    1d04:	d004      	beq.n	1d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e0>
    1d06:	2100      	movs	r1, #0
    1d08:	f240 6057 	movw	r0, #1623	; 0x657
    1d0c:	f3af 8000 	nop.w
    1d10:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1d14:	2820      	cmp	r0, #32
    1d16:	d014      	beq.n	1d42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    1d18:	6968      	ldr	r0, [r5, #20]
    1d1a:	9902      	ldr	r1, [sp, #8]
    1d1c:	1a09      	subs	r1, r1, r0
    1d1e:	0209      	lsls	r1, r1, #8
    1d20:	17ca      	asrs	r2, r1, #31
    1d22:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d26:	1209      	asrs	r1, r1, #8
    1d28:	d50b      	bpl.n	1d42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    1d2a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1d2e:	1a89      	subs	r1, r1, r2
    1d30:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d34:	4408      	add	r0, r1
    1d36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d3a:	e9cd 2002 	strd	r2, r0, [sp, #8]
    1d3e:	f04f 0a01 	mov.w	sl, #1
    1d42:	f1b8 0f00 	cmp.w	r8, #0
    1d46:	d009      	beq.n	1d5c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>
    1d48:	2100      	movs	r1, #0
    1d4a:	f240 6061 	movw	r0, #1633	; 0x661
    1d4e:	f3af 8000 	nop.w
    1d52:	2100      	movs	r1, #0
    1d54:	f240 6067 	movw	r0, #1639	; 0x667
    1d58:	f3af 8000 	nop.w
    1d5c:	9902      	ldr	r1, [sp, #8]
    1d5e:	9a03      	ldr	r2, [sp, #12]
    1d60:	1b09      	subs	r1, r1, r4
    1d62:	1b12      	subs	r2, r2, r4
    1d64:	485d      	ldr	r0, [pc, #372]	; (1edc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>)
    1d66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1d6e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1d72:	d205      	bcs.n	1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d74:	4290      	cmp	r0, r2
    1d76:	d303      	bcc.n	1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d78:	f1bb 0f00 	cmp.w	fp, #0
    1d7c:	d10a      	bne.n	1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1d7e:	e003      	b.n	1d88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d80:	f1bb 0f00 	cmp.w	fp, #0
    1d84:	d037      	beq.n	1df6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xaa>
    1d86:	e095      	b.n	1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1d88:	4639      	mov	r1, r7
    1d8a:	a802      	add	r0, sp, #8
    1d8c:	f7fe fbf4 	bl	578 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12c>
    1d90:	ea4a 0a00 	orr.w	sl, sl, r0
    1d94:	f1ba 0f00 	cmp.w	sl, #0
    1d98:	d021      	beq.n	1dde <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x92>
    1d9a:	9802      	ldr	r0, [sp, #8]
    1d9c:	f00c ff3c 	bl	ec18 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1da0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    1da4:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    1da8:	4c4d      	ldr	r4, [pc, #308]	; (1ee0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>)
    1daa:	4411      	add	r1, r2
    1dac:	1cc9      	adds	r1, r1, #3
    1dae:	1842      	adds	r2, r0, r1
    1db0:	f04f 0c00 	mov.w	ip, #0
    1db4:	1a20      	subs	r0, r4, r0
    1db6:	eb7c 0009 	sbcs.w	r0, ip, r9
    1dba:	d344      	bcc.n	1e46 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1dbc:	4849      	ldr	r0, [pc, #292]	; (1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1dbe:	4281      	cmp	r1, r0
    1dc0:	dc5d      	bgt.n	1e7e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x132>
    1dc2:	4240      	negs	r0, r0
    1dc4:	4281      	cmp	r1, r0
    1dc6:	db62      	blt.n	1e8e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x142>
    1dc8:	1c60      	adds	r0, r4, #1
    1dca:	4282      	cmp	r2, r0
    1dcc:	bfa8      	it	ge
    1dce:	4846      	ldrge	r0, [pc, #280]	; (1ee8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1dd0:	da03      	bge.n	1dda <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8e>
    1dd2:	2a00      	cmp	r2, #0
    1dd4:	bfb8      	it	lt
    1dd6:	4845      	ldrlt	r0, [pc, #276]	; (1eec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>)
    1dd8:	da00      	bge.n	1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1dda:	1812      	adds	r2, r2, r0
    1ddc:	60f2      	str	r2, [r6, #12]
    1dde:	f04f 0001 	mov.w	r0, #1
    1de2:	900c      	str	r0, [sp, #48]	; 0x30
    1de4:	f1b8 0f00 	cmp.w	r8, #0
    1de8:	d064      	beq.n	1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1dea:	2100      	movs	r1, #0
    1dec:	f240 607a 	movw	r0, #1658	; 0x67a
    1df0:	f3af 8000 	nop.w
    1df4:	e05e      	b.n	1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1df6:	6828      	ldr	r0, [r5, #0]
    1df8:	4627      	mov	r7, r4
    1dfa:	aa08      	add	r2, sp, #32
    1dfc:	78c4      	ldrb	r4, [r0, #3]
    1dfe:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1e02:	a907      	add	r1, sp, #28
    1e04:	f001 f89c 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    1e08:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    1e0c:	2820      	cmp	r0, #32
    1e0e:	d01f      	beq.n	1e50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    1e10:	6968      	ldr	r0, [r5, #20]
    1e12:	4420      	add	r0, r4
    1e14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e18:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1e1c:	1a89      	subs	r1, r1, r2
    1e1e:	4401      	add	r1, r0
    1e20:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1e28:	f00c fef6 	bl	ec18 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>
    1e2c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    1e30:	f99d 1010 	ldrsb.w	r1, [sp, #16]
    1e34:	4c2a      	ldr	r4, [pc, #168]	; (1ee0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>)
    1e36:	4411      	add	r1, r2
    1e38:	1cc9      	adds	r1, r1, #3
    1e3a:	1842      	adds	r2, r0, r1
    1e3c:	2300      	movs	r3, #0
    1e3e:	1a20      	subs	r0, r4, r0
    1e40:	eb73 0009 	sbcs.w	r0, r3, r9
    1e44:	d218      	bcs.n	1e78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12c>
    1e46:	f240 51f5 	movw	r1, #1525	; 0x5f5
    1e4a:	2070      	movs	r0, #112	; 0x70
    1e4c:	f001 fbbe 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e50:	1938      	adds	r0, r7, r4
    1e52:	1d04      	adds	r4, r0, #4
    1e54:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    1e58:	b120      	cbz	r0, 1e64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1e5a:	f001 fb53 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e5e:	2800      	cmp	r0, #0
    1e60:	bf08      	it	eq
    1e62:	3432      	addeq	r4, #50	; 0x32
    1e64:	481c      	ldr	r0, [pc, #112]	; (1ed8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18c>)
    1e66:	9907      	ldr	r1, [sp, #28]
    1e68:	7840      	ldrb	r0, [r0, #1]
    1e6a:	4288      	cmp	r0, r1
    1e6c:	bf84      	itt	hi
    1e6e:	1a40      	subhi	r0, r0, r1
    1e70:	4404      	addhi	r4, r0
    1e72:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    1e76:	e7cf      	b.n	1e18 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1e78:	481a      	ldr	r0, [pc, #104]	; (1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>)
    1e7a:	4281      	cmp	r1, r0
    1e7c:	dd04      	ble.n	1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e7e:	f240 51f6 	movw	r1, #1526	; 0x5f6
    1e82:	2070      	movs	r0, #112	; 0x70
    1e84:	f001 fba2 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e88:	4819      	ldr	r0, [pc, #100]	; (1ef0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a4>)
    1e8a:	4281      	cmp	r1, r0
    1e8c:	da04      	bge.n	1e98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e8e:	f240 51f7 	movw	r1, #1527	; 0x5f7
    1e92:	2070      	movs	r0, #112	; 0x70
    1e94:	f001 fb9a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e98:	4814      	ldr	r0, [pc, #80]	; (1eec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>)
    1e9a:	4282      	cmp	r2, r0
    1e9c:	bfa8      	it	ge
    1e9e:	4812      	ldrge	r0, [pc, #72]	; (1ee8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1ea0:	da03      	bge.n	1eaa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15e>
    1ea2:	2a00      	cmp	r2, #0
    1ea4:	bfb8      	it	lt
    1ea6:	4811      	ldrlt	r0, [pc, #68]	; (1eec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>)
    1ea8:	da00      	bge.n	1eac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>
    1eaa:	1812      	adds	r2, r2, r0
    1eac:	f04f 0001 	mov.w	r0, #1
    1eb0:	60f2      	str	r2, [r6, #12]
    1eb2:	900c      	str	r0, [sp, #48]	; 0x30
    1eb4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1eb8:	2800      	cmp	r0, #0
    1eba:	f47f ae65 	bne.w	1b88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1ebe:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ec0:	b015      	add	sp, #84	; 0x54
    1ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ec6:	0000      	.short	0x0000
    1ec8:	e000ed04 	.word	0xe000ed04
    1ecc:	00000000 	.word	0x00000000
    1ed0:	20000e7c 	.word	0x20000e7c
    1ed4:	20000dfc 	.word	0x20000dfc
    1ed8:	20000012 	.word	0x20000012
    1edc:	003fffff 	.word	0x003fffff
    1ee0:	1e847fff 	.word	0x1e847fff
    1ee4:	07a12000 	.word	0x07a12000
    1ee8:	e17b8000 	.word	0xe17b8000
    1eec:	1e848000 	.word	0x1e848000
    1ef0:	f85ee000 	.word	0xf85ee000

00001ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ef4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ef8:	4d80      	ldr	r5, [pc, #512]	; (20fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xfc>)
    1efa:	b08c      	sub	sp, #48	; 0x30
    1efc:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    1f00:	2000      	movs	r0, #0
    1f02:	9009      	str	r0, [sp, #36]	; 0x24
    1f04:	2001      	movs	r0, #1
    1f06:	4c7e      	ldr	r4, [pc, #504]	; (2100 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x100>)
    1f08:	f04f 0800 	mov.w	r8, #0
    1f0c:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1f10:	4683      	mov	fp, r0
    1f12:	9008      	str	r0, [sp, #32]
    1f14:	b124      	cbz	r4, 1f20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1f16:	2100      	movs	r1, #0
    1f18:	f240 70de 	movw	r0, #2014	; 0x7de
    1f1c:	f3af 8000 	nop.w
    1f20:	9808      	ldr	r0, [sp, #32]
    1f22:	b390      	cbz	r0, 1f8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1f24:	f885 802f 	strb.w	r8, [r5, #47]	; 0x2f
    1f28:	b124      	cbz	r4, 1f34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1f2a:	2100      	movs	r1, #0
    1f2c:	f240 70e3 	movw	r0, #2019	; 0x7e3
    1f30:	f3af 8000 	nop.w
    1f34:	f895 9032 	ldrb.w	r9, [r5, #50]	; 0x32
    1f38:	2240      	movs	r2, #64	; 0x40
    1f3a:	ea2b 0609 	bic.w	r6, fp, r9
    1f3e:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f42:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1f46:	4682      	mov	sl, r0
    1f48:	f001 fc92 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f4c:	b124      	cbz	r4, 1f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1f4e:	2100      	movs	r1, #0
    1f50:	f240 50b9 	movw	r0, #1465	; 0x5b9
    1f54:	f3af 8000 	nop.w
    1f58:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f5c:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1f60:	9000      	str	r0, [sp, #0]
    1f62:	6a49      	ldr	r1, [r1, #36]	; 0x24
    1f64:	6241      	str	r1, [r0, #36]	; 0x24
    1f66:	b124      	cbz	r4, 1f72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1f68:	2100      	movs	r1, #0
    1f6a:	f240 50bd 	movw	r0, #1469	; 0x5bd
    1f6e:	f3af 8000 	nop.w
    1f72:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1f76:	b180      	cbz	r0, 1f9a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1f78:	2c00      	cmp	r4, #0
    1f7a:	bf1c      	itt	ne
    1f7c:	2100      	movne	r1, #0
    1f7e:	f240 70e9 	movwne	r0, #2025	; 0x7e9
    1f82:	d0c7      	beq.n	1f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f84:	f3af 8000 	nop.w
    1f88:	e7c4      	b.n	1f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f8a:	e7ff      	b.n	1f8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1f8c:	485d      	ldr	r0, [pc, #372]	; (2104 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x104>)
    1f8e:	2800      	cmp	r0, #0
    1f90:	bf18      	it	ne
    1f92:	f3af 8000 	nopne.w
    1f96:	b662      	cpsie	i
    1f98:	e7c4      	b.n	1f24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1f9a:	b124      	cbz	r4, 1fa6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1f9c:	2100      	movs	r1, #0
    1f9e:	f240 70ed 	movw	r0, #2029	; 0x7ed
    1fa2:	f3af 8000 	nop.w
    1fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
    1fa8:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1fac:	2803      	cmp	r0, #3
    1fae:	d178      	bne.n	20a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa2>
    1fb0:	f8dd 9000 	ldr.w	r9, [sp]
    1fb4:	f8cd 9018 	str.w	r9, [sp, #24]
    1fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
    1fba:	f899 0024 	ldrb.w	r0, [r9, #36]	; 0x24
    1fbe:	4288      	cmp	r0, r1
    1fc0:	bf14      	ite	ne
    1fc2:	f04f 0a00 	movne.w	sl, #0
    1fc6:	f04f 0a01 	moveq.w	sl, #1
    1fca:	f109 0c24 	add.w	ip, r9, #36	; 0x24
    1fce:	4686      	mov	lr, r0
    1fd0:	2220      	movs	r2, #32
    1fd2:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1fd6:	e003      	b.n	1fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1fd8:	4602      	mov	r2, r0
    1fda:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1fde:	7840      	ldrb	r0, [r0, #1]
    1fe0:	4288      	cmp	r0, r1
    1fe2:	d002      	beq.n	1fea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1fe4:	2820      	cmp	r0, #32
    1fe6:	d00a      	beq.n	1ffe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fe8:	e7f6      	b.n	1fd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1fea:	2820      	cmp	r0, #32
    1fec:	d007      	beq.n	1ffe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fee:	4586      	cmp	lr, r0
    1ff0:	d107      	bne.n	2002 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2>
    1ff2:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1ff6:	7840      	ldrb	r0, [r0, #1]
    1ff8:	f88c 0000 	strb.w	r0, [ip]
    1ffc:	e007      	b.n	200e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe>
    1ffe:	4640      	mov	r0, r8
    2000:	e00c      	b.n	201c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c>
    2002:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2006:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    200a:	7840      	ldrb	r0, [r0, #1]
    200c:	7048      	strb	r0, [r1, #1]
    200e:	b124      	cbz	r4, 201a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a>
    2010:	2100      	movs	r1, #0
    2012:	f240 503e 	movw	r0, #1342	; 0x53e
    2016:	f3af 8000 	nop.w
    201a:	4658      	mov	r0, fp
    201c:	ea10 0f0a 	tst.w	r0, sl
    2020:	bf18      	it	ne
    2022:	f889 b027 	strbne.w	fp, [r9, #39]	; 0x27
    2026:	b3e0      	cbz	r0, 20a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa2>
    2028:	b124      	cbz	r4, 2034 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x34>
    202a:	2100      	movs	r1, #0
    202c:	f240 70f2 	movw	r0, #2034	; 0x7f2
    2030:	f3af 8000 	nop.w
    2034:	4632      	mov	r2, r6
    2036:	2001      	movs	r0, #1
    2038:	990c      	ldr	r1, [sp, #48]	; 0x30
    203a:	f7fe fff3 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    203e:	9806      	ldr	r0, [sp, #24]
    2040:	f890 9027 	ldrb.w	r9, [r0, #39]	; 0x27
    2044:	b124      	cbz	r4, 2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    2046:	2100      	movs	r1, #0
    2048:	f240 70fd 	movw	r0, #2045	; 0x7fd
    204c:	f3af 8000 	nop.w
    2050:	482d      	ldr	r0, [pc, #180]	; (2108 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x108>)
    2052:	2800      	cmp	r0, #0
    2054:	bf18      	it	ne
    2056:	f3af 8000 	nopne.w
    205a:	f3ef 8010 	mrs	r0, PRIMASK
    205e:	b672      	cpsid	i
    2060:	9008      	str	r0, [sp, #32]
    2062:	b124      	cbz	r4, 206e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6e>
    2064:	2100      	movs	r1, #0
    2066:	f640 0002 	movw	r0, #2050	; 0x802
    206a:	f3af 8000 	nop.w
    206e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2072:	b138      	cbz	r0, 2084 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x84>
    2074:	2c00      	cmp	r4, #0
    2076:	bf1c      	itt	ne
    2078:	2100      	movne	r1, #0
    207a:	f640 0006 	movwne	r0, #2054	; 0x806
    207e:	f43f af49 	beq.w	1f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2082:	e77f      	b.n	1f84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2084:	f1b9 0f00 	cmp.w	r9, #0
    2088:	d008      	beq.n	209c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9c>
    208a:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    208e:	2820      	cmp	r0, #32
    2090:	d104      	bne.n	209c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9c>
    2092:	4631      	mov	r1, r6
    2094:	2002      	movs	r0, #2
    2096:	f7fe fff5 	bl	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    209a:	b1f8      	cbz	r0, 20dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xdc>
    209c:	b134      	cbz	r4, 20ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xac>
    209e:	2100      	movs	r1, #0
    20a0:	e000      	b.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    20a2:	e009      	b.n	20b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb8>
    20a4:	f640 001a 	movw	r0, #2074	; 0x81a
    20a8:	f3af 8000 	nop.w
    20ac:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
    20b0:	f885 b02f 	strb.w	fp, [r5, #47]	; 0x2f
    20b4:	2001      	movs	r0, #1
    20b6:	9009      	str	r0, [sp, #36]	; 0x24
    20b8:	b124      	cbz	r4, 20c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc4>
    20ba:	2100      	movs	r1, #0
    20bc:	f640 0023 	movw	r0, #2083	; 0x823
    20c0:	f3af 8000 	nop.w
    20c4:	9808      	ldr	r0, [sp, #32]
    20c6:	b188      	cbz	r0, 20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
    20c8:	b124      	cbz	r4, 20d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd4>
    20ca:	2100      	movs	r1, #0
    20cc:	f640 0027 	movw	r0, #2087	; 0x827
    20d0:	f3af 8000 	nop.w
    20d4:	9809      	ldr	r0, [sp, #36]	; 0x24
    20d6:	b00d      	add	sp, #52	; 0x34
    20d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20dc:	2c00      	cmp	r4, #0
    20de:	d0f1      	beq.n	20c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc4>
    20e0:	2100      	movs	r1, #0
    20e2:	f640 0015 	movw	r0, #2069	; 0x815
    20e6:	f3af 8000 	nop.w
    20ea:	e7e6      	b.n	20ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xba>
    20ec:	4805      	ldr	r0, [pc, #20]	; (2104 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x104>)
    20ee:	2800      	cmp	r0, #0
    20f0:	bf18      	it	ne
    20f2:	f3af 8000 	nopne.w
    20f6:	b662      	cpsie	i
    20f8:	e7e6      	b.n	20c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc8>
    20fa:	0000      	.short	0x0000
    20fc:	20000e7c 	.word	0x20000e7c
	...

0000210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    210c:	b510      	push	{r4, lr}
    210e:	2820      	cmp	r0, #32
    2110:	d211      	bcs.n	2136 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2112:	490e      	ldr	r1, [pc, #56]	; (214c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2114:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    2118:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    211c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2120:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2124:	b13b      	cbz	r3, 2136 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2126:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    212a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    212e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2132:	2a01      	cmp	r2, #1
    2134:	d001      	beq.n	213a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2136:	2000      	movs	r0, #0
    2138:	bd10      	pop	{r4, pc}
    213a:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    213e:	4601      	mov	r1, r0
    2140:	2000      	movs	r0, #0
    2142:	f7fe ff6f 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    2146:	2001      	movs	r0, #1
    2148:	bd10      	pop	{r4, pc}
    214a:	0000      	.short	0x0000
    214c:	20000e7c 	.word	0x20000e7c

00002150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2150:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2154:	4e7e      	ldr	r6, [pc, #504]	; (2350 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2156:	4680      	mov	r8, r0
    2158:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    215c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2160:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2164:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2168:	2800      	cmp	r0, #0
    216a:	d065      	beq.n	2238 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    216c:	f896 9032 	ldrb.w	r9, [r6, #50]	; 0x32
    2170:	4d78      	ldr	r5, [pc, #480]	; (2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2172:	b125      	cbz	r5, 217e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2174:	2100      	movs	r1, #0
    2176:	f640 30b3 	movw	r0, #2995	; 0xbb3
    217a:	f3af 8000 	nop.w
    217e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2182:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2186:	2801      	cmp	r0, #1
    2188:	d018      	beq.n	21bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    218a:	b2c0      	uxtb	r0, r0
    218c:	2804      	cmp	r0, #4
    218e:	bf1c      	itt	ne
    2190:	2805      	cmpne	r0, #5
    2192:	2806      	cmpne	r0, #6
    2194:	d055      	beq.n	2242 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2196:	b12d      	cbz	r5, 21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2198:	f04f 0100 	mov.w	r1, #0
    219c:	f640 30bf 	movw	r0, #3007	; 0xbbf
    21a0:	f3af 8000 	nop.w
    21a4:	f001 fb34 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    21a8:	b125      	cbz	r5, 21b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    21aa:	2100      	movs	r1, #0
    21ac:	f640 30c3 	movw	r0, #3011	; 0xbc3
    21b0:	f3af 8000 	nop.w
    21b4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21b8:	2801      	cmp	r0, #1
    21ba:	d1e6      	bne.n	218a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    21bc:	2401      	movs	r4, #1
    21be:	b125      	cbz	r5, 21ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    21c0:	2100      	movs	r1, #0
    21c2:	f640 30ca 	movw	r0, #3018	; 0xbca
    21c6:	f3af 8000 	nop.w
    21ca:	b3a4      	cbz	r4, 2236 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    21cc:	2000      	movs	r0, #0
    21ce:	f886 002f 	strb.w	r0, [r6, #47]	; 0x2f
    21d2:	b125      	cbz	r5, 21de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    21d4:	2100      	movs	r1, #0
    21d6:	f640 30cf 	movw	r0, #3023	; 0xbcf
    21da:	f3af 8000 	nop.w
    21de:	f896 b032 	ldrb.w	fp, [r6, #50]	; 0x32
    21e2:	2001      	movs	r0, #1
    21e4:	ea20 090b 	bic.w	r9, r0, fp
    21e8:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21ec:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21f0:	2240      	movs	r2, #64	; 0x40
    21f2:	f001 fb3d 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21f6:	b125      	cbz	r5, 2202 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    21f8:	2100      	movs	r1, #0
    21fa:	f240 50b9 	movw	r0, #1465	; 0x5b9
    21fe:	f3af 8000 	nop.w
    2202:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2206:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    220a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    220c:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    2210:	b125      	cbz	r5, 221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    2212:	2100      	movs	r1, #0
    2214:	f240 50bd 	movw	r0, #1469	; 0x5bd
    2218:	f3af 8000 	nop.w
    221c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2220:	b1e0      	cbz	r0, 225c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    2222:	2d00      	cmp	r5, #0
    2224:	bf1c      	itt	ne
    2226:	2100      	movne	r1, #0
    2228:	f640 30d5 	movwne	r0, #3029	; 0xbd5
    222c:	d0c7      	beq.n	21be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    222e:	bf00      	nop
    2230:	f3af 8000 	nop.w
    2234:	e7c3      	b.n	21be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2236:	e00a      	b.n	224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2238:	f640 31aa 	movw	r1, #2986	; 0xbaa
    223c:	2070      	movs	r0, #112	; 0x70
    223e:	f001 f9c5 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2242:	464a      	mov	r2, r9
    2244:	4641      	mov	r1, r8
    2246:	2001      	movs	r0, #1
    2248:	f7fe feec 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    224c:	e7ac      	b.n	21a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    224e:	4842      	ldr	r0, [pc, #264]	; (2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2250:	2800      	cmp	r0, #0
    2252:	bf18      	it	ne
    2254:	f3af 8000 	nopne.w
    2258:	b662      	cpsie	i
    225a:	e7b7      	b.n	21cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    225c:	b125      	cbz	r5, 2268 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    225e:	2100      	movs	r1, #0
    2260:	f640 30d9 	movw	r0, #3033	; 0xbd9
    2264:	f3af 8000 	nop.w
    2268:	f89a 3025 	ldrb.w	r3, [sl, #37]	; 0x25
    226c:	f10a 0125 	add.w	r1, sl, #37	; 0x25
    2270:	4640      	mov	r0, r8
    2272:	461c      	mov	r4, r3
    2274:	f04f 0b20 	mov.w	fp, #32
    2278:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    227c:	f10a 0a26 	add.w	sl, sl, #38	; 0x26
    2280:	e004      	b.n	228c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2282:	46a3      	mov	fp, r4
    2284:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2288:	f89c 4001 	ldrb.w	r4, [ip, #1]
    228c:	4284      	cmp	r4, r0
    228e:	d002      	beq.n	2296 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2290:	2c20      	cmp	r4, #32
    2292:	d02b      	beq.n	22ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2294:	e7f5      	b.n	2282 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2296:	2c20      	cmp	r4, #32
    2298:	d028      	beq.n	22ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    229a:	42a3      	cmp	r3, r4
    229c:	d104      	bne.n	22a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    229e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    22a2:	7840      	ldrb	r0, [r0, #1]
    22a4:	7008      	strb	r0, [r1, #0]
    22a6:	e005      	b.n	22b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    22a8:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    22ac:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    22b0:	7840      	ldrb	r0, [r0, #1]
    22b2:	7048      	strb	r0, [r1, #1]
    22b4:	f1ba 0f00 	cmp.w	sl, #0
    22b8:	d011      	beq.n	22de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22ba:	b125      	cbz	r5, 22c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    22bc:	2100      	movs	r1, #0
    22be:	f240 5036 	movw	r0, #1334	; 0x536
    22c2:	f3af 8000 	nop.w
    22c6:	f89a 0000 	ldrb.w	r0, [sl]
    22ca:	42a0      	cmp	r0, r4
    22cc:	d107      	bne.n	22de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22ce:	b125      	cbz	r5, 22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    22d0:	2100      	movs	r1, #0
    22d2:	f240 5039 	movw	r0, #1337	; 0x539
    22d6:	f3af 8000 	nop.w
    22da:	f88a b000 	strb.w	fp, [sl]
    22de:	b15d      	cbz	r5, 22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22e0:	2100      	movs	r1, #0
    22e2:	f240 503e 	movw	r0, #1342	; 0x53e
    22e6:	f3af 8000 	nop.w
    22ea:	e000      	b.n	22ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    22ec:	b125      	cbz	r5, 22f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22ee:	2100      	movs	r1, #0
    22f0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    22f4:	f3af 8000 	nop.w
    22f8:	4818      	ldr	r0, [pc, #96]	; (235c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    22fa:	2800      	cmp	r0, #0
    22fc:	bf18      	it	ne
    22fe:	f3af 8000 	nopne.w
    2302:	f3ef 8410 	mrs	r4, PRIMASK
    2306:	b672      	cpsid	i
    2308:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    230c:	b138      	cbz	r0, 231e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    230e:	2d00      	cmp	r5, #0
    2310:	bf1c      	itt	ne
    2312:	2100      	movne	r1, #0
    2314:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2318:	f43f af51 	beq.w	21be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    231c:	e788      	b.n	2230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    231e:	f886 9032 	strb.w	r9, [r6, #50]	; 0x32
    2322:	2001      	movs	r0, #1
    2324:	f886 002f 	strb.w	r0, [r6, #47]	; 0x2f
    2328:	b154      	cbz	r4, 2340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    232a:	2d00      	cmp	r5, #0
    232c:	bf08      	it	eq
    232e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2332:	2100      	movs	r1, #0
    2334:	f44f 603f 	mov.w	r0, #3056	; 0xbf0
    2338:	f3af 8000 	nop.w
    233c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2340:	4805      	ldr	r0, [pc, #20]	; (2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2342:	2800      	cmp	r0, #0
    2344:	bf18      	it	ne
    2346:	f3af 8000 	nopne.w
    234a:	b662      	cpsie	i
    234c:	e7ed      	b.n	232a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    234e:	0000      	.short	0x0000
    2350:	20000e7c 	.word	0x20000e7c
	...

00002360 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2360:	4603      	mov	r3, r0
    2362:	480e      	ldr	r0, [pc, #56]	; (239c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x3c>)
    2364:	b510      	push	{r4, lr}
    2366:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    236a:	2400      	movs	r4, #0
    236c:	3880      	subs	r0, #128	; 0x80
    236e:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2372:	bf00      	nop
    2374:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2378:	b129      	cbz	r1, 2386 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x26>
    237a:	1c61      	adds	r1, r4, #1
    237c:	b2cc      	uxtb	r4, r1
    237e:	2c20      	cmp	r4, #32
    2380:	d3f8      	bcc.n	2374 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x14>
    2382:	2020      	movs	r0, #32
    2384:	bd10      	pop	{r4, pc}
    2386:	4906      	ldr	r1, [pc, #24]	; (23a0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    2388:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    238c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    2390:	4621      	mov	r1, r4
    2392:	2001      	movs	r0, #1
    2394:	f7fe fe46 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    2398:	4620      	mov	r0, r4
    239a:	bd10      	pop	{r4, pc}
    239c:	20000e7c 	.word	0x20000e7c
    23a0:	20000b7c 	.word	0x20000b7c

000023a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    23a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23a8:	f000 fa6c 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    23ac:	4605      	mov	r5, r0
    23ae:	f000 fd13 	bl	2dd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23b2:	4c44      	ldr	r4, [pc, #272]	; (24c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>)
    23b4:	68e0      	ldr	r0, [r4, #12]
    23b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    23ba:	bf1c      	itt	ne
    23bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    23c0:	60e0      	strne	r0, [r4, #12]
    23c2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    23c6:	b9c8      	cbnz	r0, 23fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    23c8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    23cc:	1a08      	subs	r0, r1, r0
    23ce:	0200      	lsls	r0, r0, #8
    23d0:	17c1      	asrs	r1, r0, #31
    23d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23d6:	1200      	asrs	r0, r0, #8
    23d8:	f44f 710c 	mov.w	r1, #560	; 0x230
    23dc:	f00c fc49 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23e0:	6961      	ldr	r1, [r4, #20]
    23e2:	4401      	add	r1, r0
    23e4:	1a68      	subs	r0, r5, r1
    23e6:	0200      	lsls	r0, r0, #8
    23e8:	17c1      	asrs	r1, r0, #31
    23ea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23ee:	1200      	asrs	r0, r0, #8
    23f0:	d404      	bmi.n	23fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x58>
    23f2:	f240 414d 	movw	r1, #1101	; 0x44d
    23f6:	2070      	movs	r0, #112	; 0x70
    23f8:	f001 f8e8 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fc:	7f60      	ldrb	r0, [r4, #29]
    23fe:	b148      	cbz	r0, 2414 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    2400:	f000 fb4c 	bl	2a9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2404:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    2408:	b150      	cbz	r0, 2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    240a:	f240 415e 	movw	r1, #1118	; 0x45e
    240e:	2070      	movs	r0, #112	; 0x70
    2410:	f001 f8dc 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2414:	1ce8      	adds	r0, r5, #3
    2416:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    241a:	f000 fa39 	bl	2890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    241e:	e7f1      	b.n	2404 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    2420:	2701      	movs	r7, #1
    2422:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    2426:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    242a:	2820      	cmp	r0, #32
    242c:	d026      	beq.n	247c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xd8>
    242e:	f894 8033 	ldrb.w	r8, [r4, #51]	; 0x33
    2432:	2020      	movs	r0, #32
    2434:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    2438:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    243c:	2600      	movs	r6, #0
    243e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2442:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    2446:	4820      	ldr	r0, [pc, #128]	; (24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x124>)
    2448:	6066      	str	r6, [r4, #4]
    244a:	7800      	ldrb	r0, [r0, #0]
    244c:	2802      	cmp	r0, #2
    244e:	bf16      	itet	ne
    2450:	2803      	cmpne	r0, #3
    2452:	2001      	moveq	r0, #1
    2454:	2000      	movne	r0, #0
    2456:	f884 0020 	strb.w	r0, [r4, #32]
    245a:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
    245e:	f04f 0001 	mov.w	r0, #1
    2462:	4629      	mov	r1, r5
    2464:	f7fe fe0e 	bl	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    2468:	2800      	cmp	r0, #0
    246a:	d0f8      	beq.n	245e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xba>
    246c:	4817      	ldr	r0, [pc, #92]	; (24cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x128>)
    246e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    2472:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2476:	2802      	cmp	r0, #2
    2478:	d005      	beq.n	2486 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xe2>
    247a:	e009      	b.n	2490 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xec>
    247c:	f240 4161 	movw	r1, #1121	; 0x461
    2480:	2070      	movs	r0, #112	; 0x70
    2482:	f001 f8a3 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2486:	462a      	mov	r2, r5
    2488:	4641      	mov	r1, r8
    248a:	2006      	movs	r0, #6
    248c:	f7fe fdca 	bl	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    2490:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    2494:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    2498:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    249c:	2820      	cmp	r0, #32
    249e:	d003      	beq.n	24a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    24a0:	480b      	ldr	r0, [pc, #44]	; (24d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>)
    24a2:	7840      	ldrb	r0, [r0, #1]
    24a4:	f001 f962 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24a8:	f894 0020 	ldrb.w	r0, [r4, #32]
    24ac:	2800      	cmp	r0, #0
    24ae:	bf08      	it	eq
    24b0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    24b4:	f000 fcda 	bl	2e6c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    24b8:	f884 6020 	strb.w	r6, [r4, #32]
    24bc:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    24c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24c4:	20000e7c 	.word	0x20000e7c
    24c8:	20000012 	.word	0x20000012
    24cc:	20000dfc 	.word	0x20000dfc
    24d0:	20000010 	.word	0x20000010

000024d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    24d4:	b530      	push	{r4, r5, lr}
    24d6:	4c30      	ldr	r4, [pc, #192]	; (2598 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    24d8:	b083      	sub	sp, #12
    24da:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    24de:	2920      	cmp	r1, #32
    24e0:	d008      	beq.n	24f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    24e2:	68e1      	ldr	r1, [r4, #12]
    24e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    24e8:	d009      	beq.n	24fe <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    24ea:	f640 21d1 	movw	r1, #2769	; 0xad1
    24ee:	2070      	movs	r0, #112	; 0x70
    24f0:	f001 f86c 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24f4:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    24f8:	2070      	movs	r0, #112	; 0x70
    24fa:	f001 f867 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fe:	68a1      	ldr	r1, [r4, #8]
    2500:	f8df c098 	ldr.w	ip, [pc, #152]	; 259c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>
    2504:	180b      	adds	r3, r1, r0
    2506:	2200      	movs	r2, #0
    2508:	ebbc 0101 	subs.w	r1, ip, r1
    250c:	eb72 0102 	sbcs.w	r1, r2, r2
    2510:	d204      	bcs.n	251c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x48>
    2512:	f240 51f5 	movw	r1, #1525	; 0x5f5
    2516:	2070      	movs	r0, #112	; 0x70
    2518:	f001 f858 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    251c:	4920      	ldr	r1, [pc, #128]	; (25a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    251e:	4288      	cmp	r0, r1
    2520:	dd04      	ble.n	252c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x58>
    2522:	f240 51f6 	movw	r1, #1526	; 0x5f6
    2526:	2070      	movs	r0, #112	; 0x70
    2528:	f001 f850 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    252c:	491d      	ldr	r1, [pc, #116]	; (25a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    252e:	4288      	cmp	r0, r1
    2530:	da04      	bge.n	253c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x68>
    2532:	f240 51f7 	movw	r1, #1527	; 0x5f7
    2536:	2070      	movs	r0, #112	; 0x70
    2538:	f001 f848 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    253c:	481a      	ldr	r0, [pc, #104]	; (25a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    253e:	4283      	cmp	r3, r0
    2540:	bfa8      	it	ge
    2542:	481a      	ldrge	r0, [pc, #104]	; (25ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2544:	da03      	bge.n	254e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7a>
    2546:	2b00      	cmp	r3, #0
    2548:	bfb8      	it	lt
    254a:	4817      	ldrlt	r0, [pc, #92]	; (25a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    254c:	da00      	bge.n	2550 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    254e:	181b      	adds	r3, r3, r0
    2550:	4618      	mov	r0, r3
    2552:	aa01      	add	r2, sp, #4
    2554:	4669      	mov	r1, sp
    2556:	f000 fcf3 	bl	2f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>
    255a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    255e:	280f      	cmp	r0, #15
    2560:	bfcc      	ite	gt
    2562:	2001      	movgt	r0, #1
    2564:	2000      	movle	r0, #0
    2566:	9900      	ldr	r1, [sp, #0]
    2568:	4408      	add	r0, r1
    256a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    256e:	60e1      	str	r1, [r4, #12]
    2570:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2574:	2800      	cmp	r0, #0
    2576:	bf04      	itt	eq
    2578:	b003      	addeq	sp, #12
    257a:	bd30      	popeq	{r4, r5, pc}
    257c:	2301      	movs	r3, #1
    257e:	2203      	movs	r2, #3
    2580:	2005      	movs	r0, #5
    2582:	f000 fb05 	bl	2b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2586:	2800      	cmp	r0, #0
    2588:	bf1c      	itt	ne
    258a:	b003      	addne	sp, #12
    258c:	bd30      	popne	{r4, r5, pc}
    258e:	f640 21d9 	movw	r1, #2777	; 0xad9
    2592:	2070      	movs	r0, #112	; 0x70
    2594:	f001 f81a 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2598:	20000e7c 	.word	0x20000e7c
    259c:	1e847fff 	.word	0x1e847fff
    25a0:	07a12000 	.word	0x07a12000
    25a4:	f85ee000 	.word	0xf85ee000
    25a8:	1e848000 	.word	0x1e848000
    25ac:	e17b8000 	.word	0xe17b8000

000025b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    25b0:	b570      	push	{r4, r5, r6, lr}
    25b2:	4c22      	ldr	r4, [pc, #136]	; (263c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x8c>)
    25b4:	2020      	movs	r0, #32
    25b6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    25ba:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    25be:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    25c2:	2500      	movs	r5, #0
    25c4:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
    25c8:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
    25cc:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    25d0:	1e69      	subs	r1, r5, #1
    25d2:	6065      	str	r5, [r4, #4]
    25d4:	60e1      	str	r1, [r4, #12]
    25d6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    25da:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    25de:	f884 5020 	strb.w	r5, [r4, #32]
    25e2:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    25e6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    25ea:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    25ee:	4814      	ldr	r0, [pc, #80]	; (2640 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x90>)
    25f0:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
    25f4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    25f8:	7005      	strb	r5, [r0, #0]
    25fa:	7045      	strb	r5, [r0, #1]
    25fc:	8045      	strh	r5, [r0, #2]
    25fe:	f7fe f99b 	bl	938 <CONFIG_BT_RX_STACK_SIZE+0xa0>
    2602:	2800      	cmp	r0, #0
    2604:	bf0c      	ite	eq
    2606:	480f      	ldreq	r0, [pc, #60]	; (2644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x94>)
    2608:	480f      	ldrne	r0, [pc, #60]	; (2648 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x98>)
    260a:	6020      	str	r0, [r4, #0]
    260c:	480f      	ldr	r0, [pc, #60]	; (264c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x9c>)
    260e:	2110      	movs	r1, #16
    2610:	1e49      	subs	r1, r1, #1
    2612:	7085      	strb	r5, [r0, #2]
    2614:	f800 5f04 	strb.w	r5, [r0, #4]!
    2618:	d1fa      	bne.n	2610 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x60>
    261a:	2001      	movs	r0, #1
    261c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2620:	4c0b      	ldr	r4, [pc, #44]	; (2650 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0xa0>)
    2622:	20ff      	movs	r0, #255	; 0xff
    2624:	7020      	strb	r0, [r4, #0]
    2626:	480b      	ldr	r0, [pc, #44]	; (2654 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0xa4>)
    2628:	f001 f882 	bl	3730 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    262c:	7060      	strb	r0, [r4, #1]
    262e:	f001 f8dd 	bl	37ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2632:	60a0      	str	r0, [r4, #8]
    2634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2638:	f000 bc46 	b.w	2ec8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    263c:	20000e7c 	.word	0x20000e7c
    2640:	20000012 	.word	0x20000012
    2644:	00012426 	.word	0x00012426
    2648:	0001242a 	.word	0x0001242a
    264c:	20000dfa 	.word	0x20000dfa
    2650:	20000010 	.word	0x20000010
    2654:	00000edd 	.word	0x00000edd

00002658 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2658:	b570      	push	{r4, r5, r6, lr}
    265a:	4605      	mov	r5, r0
    265c:	2001      	movs	r0, #1
    265e:	fa00 f405 	lsl.w	r4, r0, r5
    2662:	460e      	mov	r6, r1
    2664:	2a00      	cmp	r2, #0
    2666:	bf08      	it	eq
    2668:	4808      	ldreq	r0, [pc, #32]	; (268c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    266a:	d00c      	beq.n	2686 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    266c:	2000      	movs	r0, #0
    266e:	f000 fc11 	bl	2e94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2672:	00e9      	lsls	r1, r5, #3
    2674:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2678:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    267c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2680:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2684:	4802      	ldr	r0, [pc, #8]	; (2690 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2686:	6004      	str	r4, [r0, #0]
    2688:	bd70      	pop	{r4, r5, r6, pc}
    268a:	0000      	.short	0x0000
    268c:	4001f508 	.word	0x4001f508
    2690:	4001f504 	.word	0x4001f504

00002694 <MPSL_IRQ_RTC0_Handler>:
    2694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2698:	4c24      	ldr	r4, [pc, #144]	; (272c <MPSL_IRQ_RTC0_Handler+0x98>)
    269a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    269e:	f04f 0500 	mov.w	r5, #0
    26a2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    26a6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    26aa:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    26ae:	bf1c      	itt	ne
    26b0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    26b4:	2800      	cmpne	r0, #0
    26b6:	d00b      	beq.n	26d0 <MPSL_IRQ_RTC0_Handler+0x3c>
    26b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    26bc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26c0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26c4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26c8:	f04f 0004 	mov.w	r0, #4
    26cc:	f7fe ff18 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26d0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26d4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    26d8:	bf1c      	itt	ne
    26da:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    26de:	2800      	cmpne	r0, #0
    26e0:	d00b      	beq.n	26fa <MPSL_IRQ_RTC0_Handler+0x66>
    26e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    26e6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26ea:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    26ee:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26f2:	f04f 0005 	mov.w	r0, #5
    26f6:	f7fe ff03 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26fe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2702:	bf1a      	itte	ne
    2704:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2708:	2800      	cmpne	r0, #0
    270a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    270e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2712:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2716:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    271a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    271e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2722:	f04f 0006 	mov.w	r0, #6
    2726:	f7fe beeb 	b.w	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    272a:	0000      	.short	0x0000
    272c:	4000b000 	.word	0x4000b000

00002730 <MPSL_IRQ_TIMER0_Handler>:
    2730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2734:	4d3a      	ldr	r5, [pc, #232]	; (2820 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2736:	7828      	ldrb	r0, [r5, #0]
    2738:	2804      	cmp	r0, #4
    273a:	d06c      	beq.n	2816 <MPSL_IRQ_TIMER0_Handler+0xe6>
    273c:	1ce8      	adds	r0, r5, #3
    273e:	2201      	movs	r2, #1
    2740:	7801      	ldrb	r1, [r0, #0]
    2742:	b159      	cbz	r1, 275c <MPSL_IRQ_TIMER0_Handler+0x2c>
    2744:	2901      	cmp	r1, #1
    2746:	bf08      	it	eq
    2748:	706a      	strbeq	r2, [r5, #1]
    274a:	d002      	beq.n	2752 <MPSL_IRQ_TIMER0_Handler+0x22>
    274c:	7869      	ldrb	r1, [r5, #1]
    274e:	2900      	cmp	r1, #0
    2750:	d05c      	beq.n	280c <MPSL_IRQ_TIMER0_Handler+0xdc>
    2752:	2102      	movs	r1, #2
    2754:	7001      	strb	r1, [r0, #0]
    2756:	7840      	ldrb	r0, [r0, #1]
    2758:	f000 fae2 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    275c:	4c31      	ldr	r4, [pc, #196]	; (2824 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    275e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2762:	f04f 0800 	mov.w	r8, #0
    2766:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    276a:	f44f 7680 	mov.w	r6, #256	; 0x100
    276e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2772:	bf1c      	itt	ne
    2774:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2778:	2800      	cmpne	r0, #0
    277a:	d008      	beq.n	278e <MPSL_IRQ_TIMER0_Handler+0x5e>
    277c:	f04f 0003 	mov.w	r0, #3
    2780:	f000 face 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2784:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2788:	2003      	movs	r0, #3
    278a:	f7fe feb9 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    278e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2792:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2796:	bf1c      	itt	ne
    2798:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    279c:	2800      	cmpne	r0, #0
    279e:	d008      	beq.n	27b2 <MPSL_IRQ_TIMER0_Handler+0x82>
    27a0:	f04f 0002 	mov.w	r0, #2
    27a4:	f000 fabc 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27a8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27ac:	2002      	movs	r0, #2
    27ae:	f7fe fea7 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27b2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27b6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    27ba:	bf1c      	itt	ne
    27bc:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    27c0:	2800      	cmpne	r0, #0
    27c2:	d008      	beq.n	27d6 <MPSL_IRQ_TIMER0_Handler+0xa6>
    27c4:	f04f 0001 	mov.w	r0, #1
    27c8:	f000 faaa 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d0:	2001      	movs	r0, #1
    27d2:	f7fe fe95 	bl	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27da:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27de:	bf1a      	itte	ne
    27e0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27e4:	2800      	cmpne	r0, #0
    27e6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27ea:	f04f 0000 	mov.w	r0, #0
    27ee:	f000 fa97 	bl	2d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27f2:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27f6:	2004      	movs	r0, #4
    27f8:	7028      	strb	r0, [r5, #0]
    27fa:	f8c5 8008 	str.w	r8, [r5, #8]
    27fe:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2806:	2000      	movs	r0, #0
    2808:	f7fe be7a 	b.w	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    280c:	f240 3172 	movw	r1, #882	; 0x372
    2810:	206c      	movs	r0, #108	; 0x6c
    2812:	f000 fedb 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    281a:	2007      	movs	r0, #7
    281c:	f7fe be70 	b.w	1500 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2820:	2000001c 	.word	0x2000001c
    2824:	40008000 	.word	0x40008000
    2828:	2201      	movs	r2, #1
    282a:	0213      	lsls	r3, r2, #8
    282c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2830:	2000      	movs	r0, #0
    2832:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2836:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    283a:	f3bf 8f4f 	dsb	sy
    283e:	f3bf 8f6f 	isb	sy
    2842:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2846:	490c      	ldr	r1, [pc, #48]	; (2878 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2848:	604a      	str	r2, [r1, #4]
    284a:	1e43      	subs	r3, r0, #1
    284c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2850:	4b0a      	ldr	r3, [pc, #40]	; (287c <MPSL_IRQ_TIMER0_Handler+0x14c>)
    2852:	6018      	str	r0, [r3, #0]
    2854:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2858:	1d1b      	adds	r3, r3, #4
    285a:	6018      	str	r0, [r3, #0]
    285c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2860:	1d1b      	adds	r3, r3, #4
    2862:	6018      	str	r0, [r3, #0]
    2864:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2868:	1d1b      	adds	r3, r3, #4
    286a:	6018      	str	r0, [r3, #0]
    286c:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2870:	610a      	str	r2, [r1, #16]
    2872:	4903      	ldr	r1, [pc, #12]	; (2880 <MPSL_IRQ_TIMER0_Handler+0x150>)
    2874:	7048      	strb	r0, [r1, #1]
    2876:	4770      	bx	lr
    2878:	40008000 	.word	0x40008000
    287c:	40008540 	.word	0x40008540
    2880:	2000001c 	.word	0x2000001c

00002884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2884:	4801      	ldr	r0, [pc, #4]	; (288c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2886:	6800      	ldr	r0, [r0, #0]
    2888:	4770      	bx	lr
    288a:	0000      	.short	0x0000
    288c:	4000b504 	.word	0x4000b504

00002890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2890:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2894:	4e41      	ldr	r6, [pc, #260]	; (299c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2896:	4604      	mov	r4, r0
    2898:	1ef7      	subs	r7, r6, #3
    289a:	f896 c000 	ldrb.w	ip, [r6]
    289e:	68f8      	ldr	r0, [r7, #12]
    28a0:	f1bc 0f01 	cmp.w	ip, #1
    28a4:	bf04      	itt	eq
    28a6:	42a0      	cmpeq	r0, r4
    28a8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    28ac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    28b0:	4a3b      	ldr	r2, [pc, #236]	; (29a0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    28b2:	6011      	str	r1, [r2, #0]
    28b4:	493b      	ldr	r1, [pc, #236]	; (29a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    28b6:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    28ba:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28be:	4a3a      	ldr	r2, [pc, #232]	; (29a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    28c0:	f04f 0500 	mov.w	r5, #0
    28c4:	f1bc 0f00 	cmp.w	ip, #0
    28c8:	d057      	beq.n	297a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    28ca:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    28ce:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    28d2:	6015      	str	r5, [r2, #0]
    28d4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    28d8:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    28dc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    28e0:	f04f 0801 	mov.w	r8, #1
    28e4:	2a00      	cmp	r2, #0
    28e6:	bf04      	itt	eq
    28e8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    28ec:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    28f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28f4:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28f8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    28fc:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2900:	4a2a      	ldr	r2, [pc, #168]	; (29ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2902:	f8d2 a000 	ldr.w	sl, [r2]
    2906:	eba4 0a0a 	sub.w	sl, r4, sl
    290a:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    290e:	f1bb 0f02 	cmp.w	fp, #2
    2912:	d33c      	bcc.n	298e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2914:	f04f 0a02 	mov.w	sl, #2
    2918:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    291c:	d237      	bcs.n	298e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    291e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2922:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2926:	f1bc 0f00 	cmp.w	ip, #0
    292a:	d005      	beq.n	2938 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    292c:	6811      	ldr	r1, [r2, #0]
    292e:	1a41      	subs	r1, r0, r1
    2930:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2934:	2902      	cmp	r1, #2
    2936:	d3f9      	bcc.n	292c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2938:	f8c7 8008 	str.w	r8, [r7, #8]
    293c:	703d      	strb	r5, [r7, #0]
    293e:	f7ff ff73 	bl	2828 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2942:	481b      	ldr	r0, [pc, #108]	; (29b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2944:	6005      	str	r5, [r0, #0]
    2946:	1d00      	adds	r0, r0, #4
    2948:	f8c0 a000 	str.w	sl, [r0]
    294c:	4919      	ldr	r1, [pc, #100]	; (29b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    294e:	2004      	movs	r0, #4
    2950:	6008      	str	r0, [r1, #0]
    2952:	4919      	ldr	r1, [pc, #100]	; (29b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2954:	f8c1 800c 	str.w	r8, [r1, #12]
    2958:	68ba      	ldr	r2, [r7, #8]
    295a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    295e:	0181      	lsls	r1, r0, #6
    2960:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2964:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2968:	4a14      	ldr	r2, [pc, #80]	; (29bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    296a:	0741      	lsls	r1, r0, #29
    296c:	6011      	str	r1, [r2, #0]
    296e:	60fc      	str	r4, [r7, #12]
    2970:	7070      	strb	r0, [r6, #1]
    2972:	f886 8000 	strb.w	r8, [r6]
    2976:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    297a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    297e:	4b10      	ldr	r3, [pc, #64]	; (29c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2980:	601d      	str	r5, [r3, #0]
    2982:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2986:	6015      	str	r5, [r2, #0]
    2988:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    298c:	e7a4      	b.n	28d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    298e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2992:	f240 11a5 	movw	r1, #421	; 0x1a5
    2996:	206c      	movs	r0, #108	; 0x6c
    2998:	f000 fe18 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    299c:	2000001f 	.word	0x2000001f
    29a0:	4001f508 	.word	0x4001f508
    29a4:	4000b000 	.word	0x4000b000
    29a8:	4000b544 	.word	0x4000b544
    29ac:	4000b504 	.word	0x4000b504
    29b0:	40008504 	.word	0x40008504
    29b4:	40008510 	.word	0x40008510
    29b8:	40008000 	.word	0x40008000
    29bc:	4001f504 	.word	0x4001f504
    29c0:	4000b540 	.word	0x4000b540

000029c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    29c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29c8:	4c2b      	ldr	r4, [pc, #172]	; (2a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    29ca:	68e1      	ldr	r1, [r4, #12]
    29cc:	4281      	cmp	r1, r0
    29ce:	bf14      	ite	ne
    29d0:	2201      	movne	r2, #1
    29d2:	2200      	moveq	r2, #0
    29d4:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2a7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    29d8:	f89c 7000 	ldrb.w	r7, [ip]
    29dc:	2f02      	cmp	r7, #2
    29de:	d002      	beq.n	29e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    29e0:	2a00      	cmp	r2, #0
    29e2:	d038      	beq.n	2a56 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    29e4:	e003      	b.n	29ee <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    29e6:	2a00      	cmp	r2, #0
    29e8:	bf08      	it	eq
    29ea:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29ee:	7862      	ldrb	r2, [r4, #1]
    29f0:	b382      	cbz	r2, 2a54 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    29f2:	4b23      	ldr	r3, [pc, #140]	; (2a80 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    29f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29f8:	601a      	str	r2, [r3, #0]
    29fa:	4b22      	ldr	r3, [pc, #136]	; (2a84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    29fc:	1395      	asrs	r5, r2, #14
    29fe:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2a02:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2a06:	2600      	movs	r6, #0
    2a08:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2a0c:	4a1e      	ldr	r2, [pc, #120]	; (2a88 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2a0e:	f8d2 8000 	ldr.w	r8, [r2]
    2a12:	eba0 0808 	sub.w	r8, r0, r8
    2a16:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2a1a:	f1b8 0f02 	cmp.w	r8, #2
    2a1e:	d324      	bcc.n	2a6a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a20:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2a24:	d221      	bcs.n	2a6a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a26:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a2a:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2a2e:	b12f      	cbz	r7, 2a3c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2a30:	6813      	ldr	r3, [r2, #0]
    2a32:	1acb      	subs	r3, r1, r3
    2a34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a38:	2b02      	cmp	r3, #2
    2a3a:	d3f9      	bcc.n	2a30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2a3c:	4b13      	ldr	r3, [pc, #76]	; (2a8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2a3e:	2102      	movs	r1, #2
    2a40:	074a      	lsls	r2, r1, #29
    2a42:	601a      	str	r2, [r3, #0]
    2a44:	60e0      	str	r0, [r4, #12]
    2a46:	2004      	movs	r0, #4
    2a48:	f88c 0001 	strb.w	r0, [ip, #1]
    2a4c:	f88c 1000 	strb.w	r1, [ip]
    2a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a54:	e004      	b.n	2a60 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2a56:	f240 11b3 	movw	r1, #435	; 0x1b3
    2a5a:	206c      	movs	r0, #108	; 0x6c
    2a5c:	f000 fdb6 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a60:	f240 11b7 	movw	r1, #439	; 0x1b7
    2a64:	206c      	movs	r0, #108	; 0x6c
    2a66:	f000 fdb1 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a6a:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2a6e:	f240 11c3 	movw	r1, #451	; 0x1c3
    2a72:	206c      	movs	r0, #108	; 0x6c
    2a74:	f000 fdaa 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a78:	2000001c 	.word	0x2000001c
    2a7c:	2000001f 	.word	0x2000001f
    2a80:	4001f508 	.word	0x4001f508
    2a84:	4000b000 	.word	0x4000b000
    2a88:	4000b504 	.word	0x4000b504
    2a8c:	4001f504 	.word	0x4001f504

00002a90 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2a90:	4801      	ldr	r0, [pc, #4]	; (2a98 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2a92:	68c0      	ldr	r0, [r0, #12]
    2a94:	4770      	bx	lr
    2a96:	0000      	.short	0x0000
    2a98:	2000001c 	.word	0x2000001c

00002a9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aa0:	4833      	ldr	r0, [pc, #204]	; (2b70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2aa2:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2aa6:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2aaa:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2aae:	4a32      	ldr	r2, [pc, #200]	; (2b78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2ab0:	2100      	movs	r1, #0
    2ab2:	f89c 3000 	ldrb.w	r3, [ip]
    2ab6:	b163      	cbz	r3, 2ad2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2ab8:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2abc:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2ac0:	6011      	str	r1, [r2, #0]
    2ac2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ac6:	bf00      	nop
    2ac8:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2acc:	2201      	movs	r2, #1
    2ace:	b980      	cbnz	r0, 2af2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2ad0:	e009      	b.n	2ae6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2ad2:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2ad6:	4c29      	ldr	r4, [pc, #164]	; (2b7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2ad8:	6021      	str	r1, [r4, #0]
    2ada:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2ade:	6011      	str	r1, [r2, #0]
    2ae0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2ae4:	e7f0      	b.n	2ac8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2ae6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2aea:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2aee:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2af2:	2b02      	cmp	r3, #2
    2af4:	d004      	beq.n	2b00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2af6:	f240 11cf 	movw	r1, #463	; 0x1cf
    2afa:	206c      	movs	r0, #108	; 0x6c
    2afc:	f000 fd66 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b00:	4e1f      	ldr	r6, [pc, #124]	; (2b80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2b02:	6830      	ldr	r0, [r6, #0]
    2b04:	4c1f      	ldr	r4, [pc, #124]	; (2b84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2b06:	1cc0      	adds	r0, r0, #3
    2b08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b0c:	68e3      	ldr	r3, [r4, #12]
    2b0e:	4d1e      	ldr	r5, [pc, #120]	; (2b88 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2b10:	4298      	cmp	r0, r3
    2b12:	d00b      	beq.n	2b2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b14:	6837      	ldr	r7, [r6, #0]
    2b16:	1bdf      	subs	r7, r3, r7
    2b18:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2b1c:	2f04      	cmp	r7, #4
    2b1e:	d305      	bcc.n	2b2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b20:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2b24:	d202      	bcs.n	2b2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b26:	f7ff feb3 	bl	2890 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b2a:	e01b      	b.n	2b64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b2c:	6830      	ldr	r0, [r6, #0]
    2b2e:	1a18      	subs	r0, r3, r0
    2b30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b34:	2802      	cmp	r0, #2
    2b36:	d313      	bcc.n	2b60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b38:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2b3c:	d210      	bcs.n	2b60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b3e:	4b13      	ldr	r3, [pc, #76]	; (2b8c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2b40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b44:	6018      	str	r0, [r3, #0]
    2b46:	60a2      	str	r2, [r4, #8]
    2b48:	7021      	strb	r1, [r4, #0]
    2b4a:	606a      	str	r2, [r5, #4]
    2b4c:	60ea      	str	r2, [r5, #12]
    2b4e:	0040      	lsls	r0, r0, #1
    2b50:	1f19      	subs	r1, r3, #4
    2b52:	6008      	str	r0, [r1, #0]
    2b54:	2004      	movs	r0, #4
    2b56:	f88c 0001 	strb.w	r0, [ip, #1]
    2b5a:	f88c 2000 	strb.w	r2, [ip]
    2b5e:	e001      	b.n	2b64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b60:	60a2      	str	r2, [r4, #8]
    2b62:	7021      	strb	r1, [r4, #0]
    2b64:	68a0      	ldr	r0, [r4, #8]
    2b66:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b6e:	0000      	.short	0x0000
    2b70:	4000b000 	.word	0x4000b000
    2b74:	2000001f 	.word	0x2000001f
    2b78:	4000b544 	.word	0x4000b544
    2b7c:	4000b540 	.word	0x4000b540
    2b80:	4000b504 	.word	0x4000b504
    2b84:	2000001c 	.word	0x2000001c
    2b88:	40008000 	.word	0x40008000
    2b8c:	4001f508 	.word	0x4001f508

00002b90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b94:	f8df c174 	ldr.w	ip, [pc, #372]	; 2d0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2b98:	2701      	movs	r7, #1
    2b9a:	f04f 0800 	mov.w	r8, #0
    2b9e:	f89c 5000 	ldrb.w	r5, [ip]
    2ba2:	f89c c001 	ldrb.w	ip, [ip, #1]
    2ba6:	2807      	cmp	r0, #7
    2ba8:	d27e      	bcs.n	2ca8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2baa:	e8df f000 	tbb	[pc, r0]
    2bae:	0404      	.short	0x0404
    2bb0:	6a6a0404 	.word	0x6a6a0404
    2bb4:	006a      	.short	0x006a
    2bb6:	4c56      	ldr	r4, [pc, #344]	; (2d10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2bb8:	68e6      	ldr	r6, [r4, #12]
    2bba:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2bbe:	bf04      	itt	eq
    2bc0:	7864      	ldrbeq	r4, [r4, #1]
    2bc2:	2c00      	cmpeq	r4, #0
    2bc4:	d002      	beq.n	2bcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2bc6:	2d02      	cmp	r5, #2
    2bc8:	d005      	beq.n	2bd6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2bca:	e03c      	b.n	2c46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2bcc:	f240 2102 	movw	r1, #514	; 0x202
    2bd0:	206c      	movs	r0, #108	; 0x6c
    2bd2:	f000 fcfb 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bd6:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2bda:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2bde:	f1ac 0404 	sub.w	r4, ip, #4
    2be2:	0624      	lsls	r4, r4, #24
    2be4:	0da4      	lsrs	r4, r4, #22
    2be6:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2bea:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2bee:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2bf2:	2400      	movs	r4, #0
    2bf4:	2d01      	cmp	r5, #1
    2bf6:	d002      	beq.n	2bfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2bf8:	2d02      	cmp	r5, #2
    2bfa:	d011      	beq.n	2c20 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2bfc:	e020      	b.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2bfe:	f1bc 0f04 	cmp.w	ip, #4
    2c02:	d205      	bcs.n	2c10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2c04:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c08:	f1ba 0f00 	cmp.w	sl, #0
    2c0c:	d118      	bne.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c0e:	e004      	b.n	2c1a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2c10:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c14:	f1ba 0f00 	cmp.w	sl, #0
    2c18:	d112      	bne.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c1a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2c1e:	e00f      	b.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c20:	f1bc 0f04 	cmp.w	ip, #4
    2c24:	d205      	bcs.n	2c32 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2c26:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c2a:	f1ba 0f00 	cmp.w	sl, #0
    2c2e:	d107      	bne.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c30:	e004      	b.n	2c3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2c32:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c36:	f1ba 0f00 	cmp.w	sl, #0
    2c3a:	d101      	bne.n	2c40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c3c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2c40:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2c44:	d1d5      	bne.n	2bf2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2c46:	4c33      	ldr	r4, [pc, #204]	; (2d14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2c48:	f100 0c10 	add.w	ip, r0, #16
    2c4c:	fa07 fc0c 	lsl.w	ip, r7, ip
    2c50:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2c54:	0080      	lsls	r0, r0, #2
    2c56:	4420      	add	r0, r4
    2c58:	b152      	cbz	r2, 2c70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2c5a:	6407      	str	r7, [r0, #64]	; 0x40
    2c5c:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2c60:	1b8d      	subs	r5, r1, r6
    2c62:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2c66:	42aa      	cmp	r2, r5
    2c68:	bf98      	it	ls
    2c6a:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2c6e:	d243      	bcs.n	2cf8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2c70:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c74:	2b01      	cmp	r3, #1
    2c76:	bf08      	it	eq
    2c78:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2c7c:	2001      	movs	r0, #1
    2c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c82:	b135      	cbz	r5, 2c92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c84:	4584      	cmp	ip, r0
    2c86:	d104      	bne.n	2c92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2c88:	f240 2129 	movw	r1, #553	; 0x229
    2c8c:	206c      	movs	r0, #108	; 0x6c
    2c8e:	f000 fc9d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c92:	1f00      	subs	r0, r0, #4
    2c94:	b2c0      	uxtb	r0, r0
    2c96:	2b01      	cmp	r3, #1
    2c98:	bf0c      	ite	eq
    2c9a:	2401      	moveq	r4, #1
    2c9c:	2400      	movne	r4, #0
    2c9e:	2803      	cmp	r0, #3
    2ca0:	d306      	bcc.n	2cb0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2ca2:	f240 1103 	movw	r1, #259	; 0x103
    2ca6:	e000      	b.n	2caa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2ca8:	e02b      	b.n	2d02 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2caa:	206c      	movs	r0, #108	; 0x6c
    2cac:	f000 fc8e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cb0:	f8df c064 	ldr.w	ip, [pc, #100]	; 2d18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2cb4:	f100 0310 	add.w	r3, r0, #16
    2cb8:	fa07 f303 	lsl.w	r3, r7, r3
    2cbc:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2cc0:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2cc4:	0080      	lsls	r0, r0, #2
    2cc6:	4460      	add	r0, ip
    2cc8:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2ccc:	b14a      	cbz	r2, 2ce2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2cce:	4d13      	ldr	r5, [pc, #76]	; (2d1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2cd0:	682e      	ldr	r6, [r5, #0]
    2cd2:	1b8d      	subs	r5, r1, r6
    2cd4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2cd8:	42aa      	cmp	r2, r5
    2cda:	bf98      	it	ls
    2cdc:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2ce0:	d20a      	bcs.n	2cf8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2ce2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2ce6:	2c00      	cmp	r4, #0
    2ce8:	bf18      	it	ne
    2cea:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2cee:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2cf2:	2001      	movs	r0, #1
    2cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cf8:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2cfc:	2000      	movs	r0, #0
    2cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d02:	f240 212e 	movw	r1, #558	; 0x22e
    2d06:	206c      	movs	r0, #108	; 0x6c
    2d08:	f000 fc60 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d0c:	2000001f 	.word	0x2000001f
    2d10:	2000001c 	.word	0x2000001c
    2d14:	40008000 	.word	0x40008000
    2d18:	4000b000 	.word	0x4000b000
    2d1c:	4000b504 	.word	0x4000b504

00002d20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d22:	2701      	movs	r7, #1
    2d24:	2400      	movs	r4, #0
    2d26:	2807      	cmp	r0, #7
    2d28:	d243      	bcs.n	2db2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x92>
    2d2a:	e8df f000 	tbb	[pc, r0]
    2d2e:	0404      	.short	0x0404
    2d30:	16160404 	.word	0x16160404
    2d34:	0016      	.short	0x0016
    2d36:	4a21      	ldr	r2, [pc, #132]	; (2dbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x9c>)
    2d38:	f100 0110 	add.w	r1, r0, #16
    2d3c:	fa07 f101 	lsl.w	r1, r7, r1
    2d40:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2d44:	0081      	lsls	r1, r0, #2
    2d46:	4411      	add	r1, r2
    2d48:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2d4c:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2d50:	491b      	ldr	r1, [pc, #108]	; (2dc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa0>)
    2d52:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2d56:	9000      	str	r0, [sp, #0]
    2d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d5a:	4d1a      	ldr	r5, [pc, #104]	; (2dc4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>)
    2d5c:	1f01      	subs	r1, r0, #4
    2d5e:	b2ce      	uxtb	r6, r1
    2d60:	7829      	ldrb	r1, [r5, #0]
    2d62:	b179      	cbz	r1, 2d84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d64:	786a      	ldrb	r2, [r5, #1]
    2d66:	4282      	cmp	r2, r0
    2d68:	d10c      	bne.n	2d84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d6a:	4a17      	ldr	r2, [pc, #92]	; (2dc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>)
    2d6c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2d70:	6010      	str	r0, [r2, #0]
    2d72:	2901      	cmp	r1, #1
    2d74:	bf08      	it	eq
    2d76:	f7ff fd57 	bleq	2828 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2d7a:	702c      	strb	r4, [r5, #0]
    2d7c:	4913      	ldr	r1, [pc, #76]	; (2dcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xac>)
    2d7e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2d82:	60c8      	str	r0, [r1, #12]
    2d84:	f106 0010 	add.w	r0, r6, #16
    2d88:	fa07 f100 	lsl.w	r1, r7, r0
    2d8c:	4810      	ldr	r0, [pc, #64]	; (2dd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2d8e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2d92:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2d96:	00b0      	lsls	r0, r6, #2
    2d98:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2d9c:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2da0:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2da4:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2da8:	480a      	ldr	r0, [pc, #40]	; (2dd4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2daa:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2dae:	9000      	str	r0, [sp, #0]
    2db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2db2:	f240 219b 	movw	r1, #667	; 0x29b
    2db6:	206c      	movs	r0, #108	; 0x6c
    2db8:	f000 fc08 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dbc:	40008000 	.word	0x40008000
    2dc0:	40008140 	.word	0x40008140
    2dc4:	2000001f 	.word	0x2000001f
    2dc8:	4001f508 	.word	0x4001f508
    2dcc:	2000001c 	.word	0x2000001c
    2dd0:	4000b000 	.word	0x4000b000
    2dd4:	4000b140 	.word	0x4000b140

00002dd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2dd8:	491e      	ldr	r1, [pc, #120]	; (2e54 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2dda:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2dde:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2de2:	481d      	ldr	r0, [pc, #116]	; (2e58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2de4:	4a1d      	ldr	r2, [pc, #116]	; (2e5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2de6:	f890 c000 	ldrb.w	ip, [r0]
    2dea:	2000      	movs	r0, #0
    2dec:	f1bc 0f00 	cmp.w	ip, #0
    2df0:	d00a      	beq.n	2e08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2df2:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2df6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2dfa:	6010      	str	r0, [r2, #0]
    2dfc:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e00:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2e04:	b981      	cbnz	r1, 2e28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2e06:	e009      	b.n	2e1c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2e08:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e0c:	4b14      	ldr	r3, [pc, #80]	; (2e60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2e0e:	6018      	str	r0, [r3, #0]
    2e10:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e14:	6010      	str	r0, [r2, #0]
    2e16:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e1a:	e7f1      	b.n	2e00 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2e1c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2e24:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2e28:	490e      	ldr	r1, [pc, #56]	; (2e64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e2e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e32:	4a0d      	ldr	r2, [pc, #52]	; (2e68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2e34:	6010      	str	r0, [r2, #0]
    2e36:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e3a:	1d12      	adds	r2, r2, #4
    2e3c:	6010      	str	r0, [r2, #0]
    2e3e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e42:	1d12      	adds	r2, r2, #4
    2e44:	6010      	str	r0, [r2, #0]
    2e46:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2e4a:	1d12      	adds	r2, r2, #4
    2e4c:	6010      	str	r0, [r2, #0]
    2e4e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2e52:	4770      	bx	lr
    2e54:	4000b000 	.word	0x4000b000
    2e58:	2000001f 	.word	0x2000001f
    2e5c:	4000b544 	.word	0x4000b544
    2e60:	4000b540 	.word	0x4000b540
    2e64:	40008000 	.word	0x40008000
    2e68:	40008540 	.word	0x40008540

00002e6c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2e6c:	4808      	ldr	r0, [pc, #32]	; (2e90 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2e6e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2e72:	2800      	cmp	r0, #0
    2e74:	bfb8      	it	lt
    2e76:	4770      	bxlt	lr
    2e78:	f000 011f 	and.w	r1, r0, #31
    2e7c:	2201      	movs	r2, #1
    2e7e:	fa02 f101 	lsl.w	r1, r2, r1
    2e82:	0940      	lsrs	r0, r0, #5
    2e84:	0080      	lsls	r0, r0, #2
    2e86:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2e8a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2e8e:	4770      	bx	lr
    2e90:	2000001c 	.word	0x2000001c

00002e94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2e94:	b510      	push	{r4, lr}
    2e96:	2807      	cmp	r0, #7
    2e98:	d20d      	bcs.n	2eb6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2e9a:	e8df f000 	tbb	[pc, r0]
    2e9e:	0404      	.short	0x0404
    2ea0:	06060404 	.word	0x06060404
    2ea4:	0006      	.short	0x0006
    2ea6:	4906      	ldr	r1, [pc, #24]	; (2ec0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2ea8:	e002      	b.n	2eb0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2eaa:	1f00      	subs	r0, r0, #4
    2eac:	4905      	ldr	r1, [pc, #20]	; (2ec4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2eae:	b2c0      	uxtb	r0, r0
    2eb0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2eb4:	bd10      	pop	{r4, pc}
    2eb6:	f240 2152 	movw	r1, #594	; 0x252
    2eba:	206c      	movs	r0, #108	; 0x6c
    2ebc:	f000 fb86 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ec0:	40008140 	.word	0x40008140
    2ec4:	4000b140 	.word	0x4000b140

00002ec8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2ec8:	b570      	push	{r4, r5, r6, lr}
    2eca:	4819      	ldr	r0, [pc, #100]	; (2f30 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2ecc:	2400      	movs	r4, #0
    2ece:	2104      	movs	r1, #4
    2ed0:	7004      	strb	r4, [r0, #0]
    2ed2:	1ec0      	subs	r0, r0, #3
    2ed4:	7001      	strb	r1, [r0, #0]
    2ed6:	0589      	lsls	r1, r1, #22
    2ed8:	60c1      	str	r1, [r0, #12]
    2eda:	f7ff fca5 	bl	2828 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ede:	2501      	movs	r5, #1
    2ee0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2ee4:	02eb      	lsls	r3, r5, #11
    2ee6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2eea:	f3bf 8f4f 	dsb	sy
    2eee:	f3bf 8f6f 	isb	sy
    2ef2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2ef6:	4a0f      	ldr	r2, [pc, #60]	; (2f34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    2ef8:	6055      	str	r5, [r2, #4]
    2efa:	6095      	str	r5, [r2, #8]
    2efc:	480e      	ldr	r0, [pc, #56]	; (2f38 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    2efe:	6801      	ldr	r1, [r0, #0]
    2f00:	2900      	cmp	r1, #0
    2f02:	d1fc      	bne.n	2efe <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    2f04:	1e48      	subs	r0, r1, #1
    2f06:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2f0a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2f0e:	480b      	ldr	r0, [pc, #44]	; (2f3c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    2f10:	6004      	str	r4, [r0, #0]
    2f12:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2f16:	1d00      	adds	r0, r0, #4
    2f18:	6004      	str	r4, [r0, #0]
    2f1a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2f1e:	1d00      	adds	r0, r0, #4
    2f20:	6004      	str	r4, [r0, #0]
    2f22:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    2f26:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2f2a:	6015      	str	r5, [r2, #0]
    2f2c:	bd70      	pop	{r4, r5, r6, pc}
    2f2e:	0000      	.short	0x0000
    2f30:	2000001f 	.word	0x2000001f
    2f34:	4000b000 	.word	0x4000b000
    2f38:	4000b504 	.word	0x4000b504
    2f3c:	4000b540 	.word	0x4000b540

00002f40 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI>:
    2f40:	0b43      	lsrs	r3, r0, #13
    2f42:	f248 6c37 	movw	ip, #34359	; 0x8637
    2f46:	fb03 f30c 	mul.w	r3, r3, ip
    2f4a:	0c1b      	lsrs	r3, r3, #16
    2f4c:	ea4f 2c43 	mov.w	ip, r3, lsl #9
    2f50:	f8c1 c000 	str.w	ip, [r1]
    2f54:	f8df c038 	ldr.w	ip, [pc, #56]	; 2f90 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x50>
    2f58:	fb03 030c 	mla	r3, r3, ip, r0
    2f5c:	480d      	ldr	r0, [pc, #52]	; (2f94 <sym_AO7IDJTBMFZUQLFLRLEUMHZWK5ISLDQ2UN56FCI+0x54>)
    2f5e:	f24c 2cf7 	movw	ip, #49911	; 0xc2f7
    2f62:	4358      	muls	r0, r3
    2f64:	0d40      	lsrs	r0, r0, #21
    2f66:	fb10 fc0c 	smulbb	ip, r0, ip
    2f6a:	eb0c 2343 	add.w	r3, ip, r3, lsl #9
    2f6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2f72:	125b      	asrs	r3, r3, #9
    2f74:	7013      	strb	r3, [r2, #0]
    2f76:	680b      	ldr	r3, [r1, #0]
    2f78:	4418      	add	r0, r3
    2f7a:	6008      	str	r0, [r1, #0]
    2f7c:	7810      	ldrb	r0, [r2, #0]
    2f7e:	281f      	cmp	r0, #31
    2f80:	bf18      	it	ne
    2f82:	4770      	bxne	lr
    2f84:	2000      	movs	r0, #0
    2f86:	7010      	strb	r0, [r2, #0]
    2f88:	6808      	ldr	r0, [r1, #0]
    2f8a:	1c40      	adds	r0, r0, #1
    2f8c:	6008      	str	r0, [r1, #0]
    2f8e:	4770      	bx	lr
    2f90:	ffffc2f7 	.word	0xffffc2f7
    2f94:	00010c6f 	.word	0x00010c6f

00002f98 <MPSL_IRQ_CLOCK_Handler>:
    2f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2fa0:	058d      	lsls	r5, r1, #22
    2fa2:	4628      	mov	r0, r5
    2fa4:	f00b fe89 	bl	ecba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fa8:	4680      	mov	r8, r0
    2faa:	f44f 7182 	mov.w	r1, #260	; 0x104
    2fae:	4628      	mov	r0, r5
    2fb0:	f00b fe83 	bl	ecba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fb4:	2600      	movs	r6, #0
    2fb6:	4607      	mov	r7, r0
    2fb8:	f1b8 0f00 	cmp.w	r8, #0
    2fbc:	d00a      	beq.n	2fd4 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fbe:	2001      	movs	r0, #1
    2fc0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fc4:	4c07      	ldr	r4, [pc, #28]	; (2fe4 <MPSL_IRQ_CLOCK_Handler+0x4c>)
    2fc6:	7920      	ldrb	r0, [r4, #4]
    2fc8:	b120      	cbz	r0, 2fd4 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fca:	7126      	strb	r6, [r4, #4]
    2fcc:	69a0      	ldr	r0, [r4, #24]
    2fce:	b108      	cbz	r0, 2fd4 <MPSL_IRQ_CLOCK_Handler+0x3c>
    2fd0:	4780      	blx	r0
    2fd2:	61a6      	str	r6, [r4, #24]
    2fd4:	b10f      	cbz	r7, 2fda <MPSL_IRQ_CLOCK_Handler+0x42>
    2fd6:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    2fda:	4640      	mov	r0, r8
    2fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fe0:	f000 b848 	b.w	3074 <MPSL_IRQ_CLOCK_Handler+0xdc>
    2fe4:	2000002c 	.word	0x2000002c
    2fe8:	b510      	push	{r4, lr}
    2fea:	f000 f973 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2fee:	f000 fa89 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2ff2:	2302      	movs	r3, #2
    2ff4:	4908      	ldr	r1, [pc, #32]	; (3018 <MPSL_IRQ_CLOCK_Handler+0x80>)
    2ff6:	075a      	lsls	r2, r3, #29
    2ff8:	b130      	cbz	r0, 3008 <MPSL_IRQ_CLOCK_Handler+0x70>
    2ffa:	4808      	ldr	r0, [pc, #32]	; (301c <MPSL_IRQ_CLOCK_Handler+0x84>)
    2ffc:	6003      	str	r3, [r0, #0]
    2ffe:	2001      	movs	r0, #1
    3000:	6110      	str	r0, [r2, #16]
    3002:	2003      	movs	r0, #3
    3004:	7248      	strb	r0, [r1, #9]
    3006:	e003      	b.n	3010 <MPSL_IRQ_CLOCK_Handler+0x78>
    3008:	724b      	strb	r3, [r1, #9]
    300a:	2001      	movs	r0, #1
    300c:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    3010:	2000      	movs	r0, #0
    3012:	71c8      	strb	r0, [r1, #7]
    3014:	bd10      	pop	{r4, pc}
    3016:	0000      	.short	0x0000
    3018:	2000002c 	.word	0x2000002c
    301c:	40000c34 	.word	0x40000c34
    3020:	b570      	push	{r4, r5, r6, lr}
    3022:	4c13      	ldr	r4, [pc, #76]	; (3070 <MPSL_IRQ_CLOCK_Handler+0xd8>)
    3024:	79a0      	ldrb	r0, [r4, #6]
    3026:	b1f0      	cbz	r0, 3066 <MPSL_IRQ_CLOCK_Handler+0xce>
    3028:	2801      	cmp	r0, #1
    302a:	d003      	beq.n	3034 <MPSL_IRQ_CLOCK_Handler+0x9c>
    302c:	79e1      	ldrb	r1, [r4, #7]
    302e:	1e40      	subs	r0, r0, #1
    3030:	4281      	cmp	r1, r0
    3032:	da18      	bge.n	3066 <MPSL_IRQ_CLOCK_Handler+0xce>
    3034:	f000 fa66 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3038:	4605      	mov	r5, r0
    303a:	f000 fb37 	bl	36ac <mpsl_temperature_get>
    303e:	79a1      	ldrb	r1, [r4, #6]
    3040:	2901      	cmp	r1, #1
    3042:	d902      	bls.n	304a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3044:	79e1      	ldrb	r1, [r4, #7]
    3046:	1c49      	adds	r1, r1, #1
    3048:	71e1      	strb	r1, [r4, #7]
    304a:	b10d      	cbz	r5, 3050 <MPSL_IRQ_CLOCK_Handler+0xb8>
    304c:	6961      	ldr	r1, [r4, #20]
    304e:	e000      	b.n	3052 <MPSL_IRQ_CLOCK_Handler+0xba>
    3050:	6921      	ldr	r1, [r4, #16]
    3052:	1a41      	subs	r1, r0, r1
    3054:	2902      	cmp	r1, #2
    3056:	da02      	bge.n	305e <MPSL_IRQ_CLOCK_Handler+0xc6>
    3058:	f111 0f02 	cmn.w	r1, #2
    305c:	dc07      	bgt.n	306e <MPSL_IRQ_CLOCK_Handler+0xd6>
    305e:	b10d      	cbz	r5, 3064 <MPSL_IRQ_CLOCK_Handler+0xcc>
    3060:	6160      	str	r0, [r4, #20]
    3062:	e000      	b.n	3066 <MPSL_IRQ_CLOCK_Handler+0xce>
    3064:	6120      	str	r0, [r4, #16]
    3066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    306a:	f7ff bfbd 	b.w	2fe8 <MPSL_IRQ_CLOCK_Handler+0x50>
    306e:	bd70      	pop	{r4, r5, r6, pc}
    3070:	2000002c 	.word	0x2000002c
    3074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3078:	4606      	mov	r6, r0
    307a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    307e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3082:	4628      	mov	r0, r5
    3084:	f00b fe19 	bl	ecba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3088:	4681      	mov	r9, r0
    308a:	f44f 7188 	mov.w	r1, #272	; 0x110
    308e:	4628      	mov	r0, r5
    3090:	f00b fe13 	bl	ecba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3094:	4c22      	ldr	r4, [pc, #136]	; (3120 <MPSL_IRQ_CLOCK_Handler+0x188>)
    3096:	4682      	mov	sl, r0
    3098:	f894 8000 	ldrb.w	r8, [r4]
    309c:	f104 0008 	add.w	r0, r4, #8
    30a0:	f00b fe7e 	bl	eda0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    30a4:	b110      	cbz	r0, 30ac <MPSL_IRQ_CLOCK_Handler+0x114>
    30a6:	f44f 71c4 	mov.w	r1, #392	; 0x188
    30aa:	e015      	b.n	30d8 <MPSL_IRQ_CLOCK_Handler+0x140>
    30ac:	481d      	ldr	r0, [pc, #116]	; (3124 <MPSL_IRQ_CLOCK_Handler+0x18c>)
    30ae:	2701      	movs	r7, #1
    30b0:	b13e      	cbz	r6, 30c2 <MPSL_IRQ_CLOCK_Handler+0x12a>
    30b2:	7a61      	ldrb	r1, [r4, #9]
    30b4:	2902      	cmp	r1, #2
    30b6:	d104      	bne.n	30c2 <MPSL_IRQ_CLOCK_Handler+0x12a>
    30b8:	2103      	movs	r1, #3
    30ba:	7261      	strb	r1, [r4, #9]
    30bc:	2102      	movs	r1, #2
    30be:	6001      	str	r1, [r0, #0]
    30c0:	612f      	str	r7, [r5, #16]
    30c2:	2600      	movs	r6, #0
    30c4:	f1b9 0f00 	cmp.w	r9, #0
    30c8:	d00d      	beq.n	30e6 <MPSL_IRQ_CLOCK_Handler+0x14e>
    30ca:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    30ce:	7a61      	ldrb	r1, [r4, #9]
    30d0:	2903      	cmp	r1, #3
    30d2:	d004      	beq.n	30de <MPSL_IRQ_CLOCK_Handler+0x146>
    30d4:	f240 119f 	movw	r1, #415	; 0x19f
    30d8:	206d      	movs	r0, #109	; 0x6d
    30da:	f000 fa77 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30de:	6006      	str	r6, [r0, #0]
    30e0:	7267      	strb	r7, [r4, #9]
    30e2:	f000 f8db 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    30e6:	f1ba 0f00 	cmp.w	sl, #0
    30ea:	d007      	beq.n	30fc <MPSL_IRQ_CLOCK_Handler+0x164>
    30ec:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    30f0:	7a60      	ldrb	r0, [r4, #9]
    30f2:	2801      	cmp	r0, #1
    30f4:	d101      	bne.n	30fa <MPSL_IRQ_CLOCK_Handler+0x162>
    30f6:	f7ff ff93 	bl	3020 <MPSL_IRQ_CLOCK_Handler+0x88>
    30fa:	616f      	str	r7, [r5, #20]
    30fc:	f1b8 0f00 	cmp.w	r8, #0
    3100:	d007      	beq.n	3112 <MPSL_IRQ_CLOCK_Handler+0x17a>
    3102:	7026      	strb	r6, [r4, #0]
    3104:	7a60      	ldrb	r0, [r4, #9]
    3106:	2801      	cmp	r0, #1
    3108:	d101      	bne.n	310e <MPSL_IRQ_CLOCK_Handler+0x176>
    310a:	f7ff ff6d 	bl	2fe8 <MPSL_IRQ_CLOCK_Handler+0x50>
    310e:	f000 f8c5 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3112:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3116:	4802      	ldr	r0, [pc, #8]	; (3120 <MPSL_IRQ_CLOCK_Handler+0x188>)
    3118:	3008      	adds	r0, #8
    311a:	f00b be58 	b.w	edce <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    311e:	0000      	.short	0x0000
    3120:	2000002c 	.word	0x2000002c
    3124:	40000c34 	.word	0x40000c34
    3128:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    312c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 3290 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    3130:	7801      	ldrb	r1, [r0, #0]
    3132:	7843      	ldrb	r3, [r0, #1]
    3134:	7882      	ldrb	r2, [r0, #2]
    3136:	2400      	movs	r4, #0
    3138:	f889 100a 	strb.w	r1, [r9, #10]
    313c:	f889 3005 	strb.w	r3, [r9, #5]
    3140:	f889 2006 	strb.w	r2, [r9, #6]
    3144:	4606      	mov	r6, r0
    3146:	4627      	mov	r7, r4
    3148:	f889 4007 	strb.w	r4, [r9, #7]
    314c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    3150:	2905      	cmp	r1, #5
    3152:	d225      	bcs.n	31a0 <MPSL_IRQ_CLOCK_Handler+0x208>
    3154:	e8df f001 	tbb	[pc, r1]
    3158:	10050315 	.word	0x10050315
    315c:	0013      	.short	0x0013
    315e:	2401      	movs	r4, #1
    3160:	e00f      	b.n	3182 <MPSL_IRQ_CLOCK_Handler+0x1ea>
    3162:	f000 f8b7 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3166:	4654      	mov	r4, sl
    3168:	2101      	movs	r1, #1
    316a:	4620      	mov	r0, r4
    316c:	f00b fdaa 	bl	ecc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3170:	2800      	cmp	r0, #0
    3172:	d0f9      	beq.n	3168 <MPSL_IRQ_CLOCK_Handler+0x1d0>
    3174:	2402      	movs	r4, #2
    3176:	e004      	b.n	3182 <MPSL_IRQ_CLOCK_Handler+0x1ea>
    3178:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    317c:	e001      	b.n	3182 <MPSL_IRQ_CLOCK_Handler+0x1ea>
    317e:	f44f 3440 	mov.w	r4, #196608	; 0x30000
    3182:	f00b fdcb 	bl	ed1c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3186:	b180      	cbz	r0, 31aa <MPSL_IRQ_CLOCK_Handler+0x212>
    3188:	f000 f9d6 	bl	3538 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    318c:	f004 0503 	and.w	r5, r4, #3
    3190:	42a8      	cmp	r0, r5
    3192:	d10a      	bne.n	31aa <MPSL_IRQ_CLOCK_Handler+0x212>
    3194:	4628      	mov	r0, r5
    3196:	f00b fdb1 	bl	ecfc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    319a:	2800      	cmp	r0, #0
    319c:	d0fa      	beq.n	3194 <MPSL_IRQ_CLOCK_Handler+0x1fc>
    319e:	e059      	b.n	3254 <MPSL_IRQ_CLOCK_Handler+0x2bc>
    31a0:	f240 217a 	movw	r1, #634	; 0x27a
    31a4:	206d      	movs	r0, #109	; 0x6d
    31a6:	f000 fa11 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31aa:	f04f 0801 	mov.w	r8, #1
    31ae:	4655      	mov	r5, sl
    31b0:	f8ca 800c 	str.w	r8, [sl, #12]
    31b4:	f8ca 7104 	str.w	r7, [sl, #260]	; 0x104
    31b8:	f8ca 4518 	str.w	r4, [sl, #1304]	; 0x518
    31bc:	f00b fe12 	bl	ede4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    31c0:	b940      	cbnz	r0, 31d4 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31c2:	f00b fe19 	bl	edf8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    31c6:	b928      	cbnz	r0, 31d4 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31c8:	f00b fe20 	bl	ee0c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    31cc:	b910      	cbnz	r0, 31d4 <MPSL_IRQ_CLOCK_Handler+0x23c>
    31ce:	f00b fe31 	bl	ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31d2:	b138      	cbz	r0, 31e4 <MPSL_IRQ_CLOCK_Handler+0x24c>
    31d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    31d8:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    31dc:	492d      	ldr	r1, [pc, #180]	; (3294 <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    31de:	f3c0 3042 	ubfx	r0, r0, #13, #3
    31e2:	6008      	str	r0, [r1, #0]
    31e4:	492b      	ldr	r1, [pc, #172]	; (3294 <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    31e6:	3110      	adds	r1, #16
    31e8:	f8c1 8000 	str.w	r8, [r1]
    31ec:	2102      	movs	r1, #2
    31ee:	f8c5 1304 	str.w	r1, [r5, #772]	; 0x304
    31f2:	f8c5 8008 	str.w	r8, [r5, #8]
    31f6:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 3298 <MPSL_IRQ_CLOCK_Handler+0x300>
    31fa:	f8db 1000 	ldr.w	r1, [fp]
    31fe:	43c9      	mvns	r1, r1
    3200:	f341 1800 	sbfx	r8, r1, #4, #1
    3204:	f8db 1000 	ldr.w	r1, [fp]
    3208:	f041 0110 	orr.w	r1, r1, #16
    320c:	f8cb 1000 	str.w	r1, [fp]
    3210:	f108 0801 	add.w	r8, r8, #1
    3214:	e002      	b.n	321c <MPSL_IRQ_CLOCK_Handler+0x284>
    3216:	bf00      	nop
    3218:	f000 fafa 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    321c:	f44f 7182 	mov.w	r1, #260	; 0x104
    3220:	4628      	mov	r0, r5
    3222:	f00b fd4a 	bl	ecba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3226:	2800      	cmp	r0, #0
    3228:	d0f6      	beq.n	3218 <MPSL_IRQ_CLOCK_Handler+0x280>
    322a:	f004 0403 	and.w	r4, r4, #3
    322e:	4620      	mov	r0, r4
    3230:	f00b fd64 	bl	ecfc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3234:	2800      	cmp	r0, #0
    3236:	d0fa      	beq.n	322e <MPSL_IRQ_CLOCK_Handler+0x296>
    3238:	f1b8 0f00 	cmp.w	r8, #0
    323c:	d105      	bne.n	324a <MPSL_IRQ_CLOCK_Handler+0x2b2>
    323e:	f8db 1000 	ldr.w	r1, [fp]
    3242:	f021 0110 	bic.w	r1, r1, #16
    3246:	f8cb 1000 	str.w	r1, [fp]
    324a:	2102      	movs	r1, #2
    324c:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
    3250:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3254:	f899 0006 	ldrb.w	r0, [r9, #6]
    3258:	464c      	mov	r4, r9
    325a:	b170      	cbz	r0, 327a <MPSL_IRQ_CLOCK_Handler+0x2e2>
    325c:	7830      	ldrb	r0, [r6, #0]
    325e:	b960      	cbnz	r0, 327a <MPSL_IRQ_CLOCK_Handler+0x2e2>
    3260:	f000 f950 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3264:	4605      	mov	r5, r0
    3266:	f000 fa21 	bl	36ac <mpsl_temperature_get>
    326a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    326e:	b115      	cbz	r5, 3276 <MPSL_IRQ_CLOCK_Handler+0x2de>
    3270:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3274:	e001      	b.n	327a <MPSL_IRQ_CLOCK_Handler+0x2e2>
    3276:	e9c4 0204 	strd	r0, r2, [r4, #16]
    327a:	2101      	movs	r1, #1
    327c:	4650      	mov	r0, sl
    327e:	f00b fd21 	bl	ecc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3282:	b108      	cbz	r0, 3288 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3284:	f000 f938 	bl	34f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3288:	7267      	strb	r7, [r4, #9]
    328a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    328e:	0000      	.short	0x0000
    3290:	2000002c 	.word	0x2000002c
    3294:	4000053c 	.word	0x4000053c
    3298:	e000ed10 	.word	0xe000ed10

0000329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    329c:	b510      	push	{r4, lr}
    329e:	f3ef 8410 	mrs	r4, PRIMASK
    32a2:	b672      	cpsid	i
    32a4:	480a      	ldr	r0, [pc, #40]	; (32d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    32a6:	7841      	ldrb	r1, [r0, #1]
    32a8:	b129      	cbz	r1, 32b6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    32aa:	7841      	ldrb	r1, [r0, #1]
    32ac:	1e49      	subs	r1, r1, #1
    32ae:	7041      	strb	r1, [r0, #1]
    32b0:	7841      	ldrb	r1, [r0, #1]
    32b2:	b129      	cbz	r1, 32c0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    32b4:	e008      	b.n	32c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    32b6:	f240 1101 	movw	r1, #257	; 0x101
    32ba:	206d      	movs	r0, #109	; 0x6d
    32bc:	f000 f986 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32c0:	7880      	ldrb	r0, [r0, #2]
    32c2:	b908      	cbnz	r0, 32c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    32c4:	f000 f92c 	bl	3520 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    32c8:	2c00      	cmp	r4, #0
    32ca:	d100      	bne.n	32ce <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    32cc:	b662      	cpsie	i
    32ce:	bd10      	pop	{r4, pc}
    32d0:	2000002c 	.word	0x2000002c

000032d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    32d4:	b510      	push	{r4, lr}
    32d6:	f3ef 8410 	mrs	r4, PRIMASK
    32da:	b672      	cpsid	i
    32dc:	4806      	ldr	r0, [pc, #24]	; (32f8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    32de:	7841      	ldrb	r1, [r0, #1]
    32e0:	1c49      	adds	r1, r1, #1
    32e2:	7041      	strb	r1, [r0, #1]
    32e4:	7840      	ldrb	r0, [r0, #1]
    32e6:	2801      	cmp	r0, #1
    32e8:	d101      	bne.n	32ee <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    32ea:	f00b fd02 	bl	ecf2 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    32ee:	2c00      	cmp	r4, #0
    32f0:	d100      	bne.n	32f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    32f2:	b662      	cpsie	i
    32f4:	bd10      	pop	{r4, pc}
    32f6:	0000      	.short	0x0000
    32f8:	2000002c 	.word	0x2000002c

000032fc <mpsl_clock_hfclk_release>:
    32fc:	4805      	ldr	r0, [pc, #20]	; (3314 <mpsl_clock_hfclk_release+0x18>)
    32fe:	b510      	push	{r4, lr}
    3300:	78c1      	ldrb	r1, [r0, #3]
    3302:	b121      	cbz	r1, 330e <mpsl_clock_hfclk_release+0x12>
    3304:	2100      	movs	r1, #0
    3306:	7101      	strb	r1, [r0, #4]
    3308:	70c1      	strb	r1, [r0, #3]
    330a:	f7ff ffc7 	bl	329c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    330e:	2000      	movs	r0, #0
    3310:	bd10      	pop	{r4, pc}
    3312:	0000      	.short	0x0000
    3314:	2000002c 	.word	0x2000002c

00003318 <mpsl_clock_hfclk_request>:
    3318:	b570      	push	{r4, r5, r6, lr}
    331a:	4c0c      	ldr	r4, [pc, #48]	; (334c <mpsl_clock_hfclk_request+0x34>)
    331c:	78e1      	ldrb	r1, [r4, #3]
    331e:	b961      	cbnz	r1, 333a <mpsl_clock_hfclk_request+0x22>
    3320:	2501      	movs	r5, #1
    3322:	70e5      	strb	r5, [r4, #3]
    3324:	61a0      	str	r0, [r4, #24]
    3326:	f7ff ffd5 	bl	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    332a:	f000 f8eb 	bl	3504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    332e:	b130      	cbz	r0, 333e <mpsl_clock_hfclk_request+0x26>
    3330:	69a0      	ldr	r0, [r4, #24]
    3332:	b110      	cbz	r0, 333a <mpsl_clock_hfclk_request+0x22>
    3334:	4780      	blx	r0
    3336:	2000      	movs	r0, #0
    3338:	61a0      	str	r0, [r4, #24]
    333a:	2000      	movs	r0, #0
    333c:	bd70      	pop	{r4, r5, r6, pc}
    333e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3342:	7125      	strb	r5, [r4, #4]
    3344:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3348:	e7f7      	b.n	333a <mpsl_clock_hfclk_request+0x22>
    334a:	0000      	.short	0x0000
    334c:	2000002c 	.word	0x2000002c

00003350 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3350:	f3ef 8010 	mrs	r0, PRIMASK
    3354:	b672      	cpsid	i
    3356:	4904      	ldr	r1, [pc, #16]	; (3368 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3358:	788a      	ldrb	r2, [r1, #2]
    335a:	1c52      	adds	r2, r2, #1
    335c:	708a      	strb	r2, [r1, #2]
    335e:	2800      	cmp	r0, #0
    3360:	d100      	bne.n	3364 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3362:	b662      	cpsie	i
    3364:	4770      	bx	lr
    3366:	0000      	.short	0x0000
    3368:	2000002c 	.word	0x2000002c

0000336c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    336c:	b510      	push	{r4, lr}
    336e:	f3ef 8410 	mrs	r4, PRIMASK
    3372:	b672      	cpsid	i
    3374:	480a      	ldr	r0, [pc, #40]	; (33a0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3376:	7881      	ldrb	r1, [r0, #2]
    3378:	b129      	cbz	r1, 3386 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    337a:	7881      	ldrb	r1, [r0, #2]
    337c:	1e49      	subs	r1, r1, #1
    337e:	7081      	strb	r1, [r0, #2]
    3380:	7841      	ldrb	r1, [r0, #1]
    3382:	b129      	cbz	r1, 3390 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3384:	e008      	b.n	3398 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3386:	f240 1125 	movw	r1, #293	; 0x125
    338a:	206d      	movs	r0, #109	; 0x6d
    338c:	f000 f91e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3390:	7880      	ldrb	r0, [r0, #2]
    3392:	b908      	cbnz	r0, 3398 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3394:	f000 f8c4 	bl	3520 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3398:	2c00      	cmp	r4, #0
    339a:	d100      	bne.n	339e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    339c:	b662      	cpsie	i
    339e:	bd10      	pop	{r4, pc}
    33a0:	2000002c 	.word	0x2000002c

000033a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    33a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33a8:	0004      	movs	r4, r0
    33aa:	f06f 0015 	mvn.w	r0, #21
    33ae:	d03b      	beq.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33b0:	7821      	ldrb	r1, [r4, #0]
    33b2:	2904      	cmp	r1, #4
    33b4:	d838      	bhi.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33b6:	2900      	cmp	r1, #0
    33b8:	7861      	ldrb	r1, [r4, #1]
    33ba:	d037      	beq.n	342c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    33bc:	2900      	cmp	r1, #0
    33be:	d133      	bne.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33c0:	78a1      	ldrb	r1, [r4, #2]
    33c2:	2900      	cmp	r1, #0
    33c4:	d130      	bne.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    33c6:	2000      	movs	r0, #0
    33c8:	f00b fc42 	bl	ec50 <MPSL_IRQ_RADIO_Handler+0x1e>
    33cc:	2000      	movs	r0, #0
    33ce:	f00b fc32 	bl	ec36 <MPSL_IRQ_RADIO_Handler+0x4>
    33d2:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    33d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33da:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    33de:	2500      	movs	r5, #0
    33e0:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    33e4:	f8c8 5104 	str.w	r5, [r8, #260]	; 0x104
    33e8:	f8c8 510c 	str.w	r5, [r8, #268]	; 0x10c
    33ec:	f8c8 5110 	str.w	r5, [r8, #272]	; 0x110
    33f0:	4e13      	ldr	r6, [pc, #76]	; (3440 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    33f2:	7075      	strb	r5, [r6, #1]
    33f4:	88a0      	ldrh	r0, [r4, #4]
    33f6:	81b0      	strh	r0, [r6, #12]
    33f8:	f00b fc72 	bl	ece0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    33fc:	2701      	movs	r7, #1
    33fe:	b108      	cbz	r0, 3404 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3400:	70f7      	strb	r7, [r6, #3]
    3402:	7077      	strb	r7, [r6, #1]
    3404:	2101      	movs	r1, #1
    3406:	4640      	mov	r0, r8
    3408:	f00b fc5c 	bl	ecc4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    340c:	b108      	cbz	r0, 3412 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    340e:	f000 f873 	bl	34f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3412:	4620      	mov	r0, r4
    3414:	f7ff fe88 	bl	3128 <MPSL_IRQ_CLOCK_Handler+0x190>
    3418:	2000      	movs	r0, #0
    341a:	f00b fc0c 	bl	ec36 <MPSL_IRQ_RADIO_Handler+0x4>
    341e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3422:	4628      	mov	r0, r5
    3424:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    342c:	2900      	cmp	r1, #0
    342e:	d0fb      	beq.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3430:	2920      	cmp	r1, #32
    3432:	d8f9      	bhi.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3434:	78a1      	ldrb	r1, [r4, #2]
    3436:	2921      	cmp	r1, #33	; 0x21
    3438:	d8f6      	bhi.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    343a:	2901      	cmp	r1, #1
    343c:	d1c3      	bne.n	33c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    343e:	e7f3      	b.n	3428 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x84>
    3440:	2000002c 	.word	0x2000002c

00003444 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3444:	4801      	ldr	r0, [pc, #4]	; (344c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3446:	8980      	ldrh	r0, [r0, #12]
    3448:	4770      	bx	lr
    344a:	0000      	.short	0x0000
    344c:	2000002c 	.word	0x2000002c

00003450 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3450:	b510      	push	{r4, lr}
    3452:	480d      	ldr	r0, [pc, #52]	; (3488 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3454:	f00b fca4 	bl	eda0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3458:	490b      	ldr	r1, [pc, #44]	; (3488 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    345a:	3908      	subs	r1, #8
    345c:	b148      	cbz	r0, 3472 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    345e:	2001      	movs	r0, #1
    3460:	7008      	strb	r0, [r1, #0]
    3462:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3466:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    346a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    346e:	f7ff bf31 	b.w	32d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3472:	7a48      	ldrb	r0, [r1, #9]
    3474:	2801      	cmp	r0, #1
    3476:	d101      	bne.n	347c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3478:	f7ff fdb6 	bl	2fe8 <MPSL_IRQ_CLOCK_Handler+0x50>
    347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3480:	4801      	ldr	r0, [pc, #4]	; (3488 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3482:	f00b bca4 	b.w	edce <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3486:	0000      	.short	0x0000
    3488:	20000034 	.word	0x20000034

0000348c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    348c:	4802      	ldr	r0, [pc, #8]	; (3498 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    348e:	7a40      	ldrb	r0, [r0, #9]
    3490:	2800      	cmp	r0, #0
    3492:	d000      	beq.n	3496 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3494:	2001      	movs	r0, #1
    3496:	4770      	bx	lr
    3498:	2000002c 	.word	0x2000002c

0000349c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    349e:	4d15      	ldr	r5, [pc, #84]	; (34f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x58>)
    34a0:	7aa8      	ldrb	r0, [r5, #10]
    34a2:	2800      	cmp	r0, #0
    34a4:	d125      	bne.n	34f2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x56>
    34a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    34aa:	2018      	movs	r0, #24
    34ac:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    34b0:	2601      	movs	r6, #1
    34b2:	61a6      	str	r6, [r4, #24]
    34b4:	f44f 7020 	mov.w	r0, #640	; 0x280
    34b8:	f8ad 0000 	strh.w	r0, [sp]
    34bc:	f8bd 0000 	ldrh.w	r0, [sp]
    34c0:	1e41      	subs	r1, r0, #1
    34c2:	f8ad 1000 	strh.w	r1, [sp]
    34c6:	d2f9      	bcs.n	34bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x20>
    34c8:	2700      	movs	r7, #0
    34ca:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    34ce:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    34d2:	4808      	ldr	r0, [pc, #32]	; (34f4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x58>)
    34d4:	3008      	adds	r0, #8
    34d6:	f00b fc76 	bl	edc6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    34da:	702f      	strb	r7, [r5, #0]
    34dc:	f7ff fd84 	bl	2fe8 <MPSL_IRQ_CLOCK_Handler+0x50>
    34e0:	6166      	str	r6, [r4, #20]
    34e2:	7968      	ldrb	r0, [r5, #5]
    34e4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    34e8:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    34ec:	2018      	movs	r0, #24
    34ee:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    34f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34f4:	2000002c 	.word	0x2000002c

000034f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    34f8:	4901      	ldr	r1, [pc, #4]	; (3500 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    34fa:	2001      	movs	r0, #1
    34fc:	7008      	strb	r0, [r1, #0]
    34fe:	4770      	bx	lr
    3500:	200003a8 	.word	0x200003a8

00003504 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3504:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3508:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    350c:	b918      	cbnz	r0, 3516 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    350e:	4803      	ldr	r0, [pc, #12]	; (351c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3510:	7800      	ldrb	r0, [r0, #0]
    3512:	2800      	cmp	r0, #0
    3514:	d000      	beq.n	3518 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3516:	2001      	movs	r0, #1
    3518:	4770      	bx	lr
    351a:	0000      	.short	0x0000
    351c:	200003a8 	.word	0x200003a8

00003520 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3520:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3524:	2101      	movs	r1, #1
    3526:	6041      	str	r1, [r0, #4]
    3528:	2100      	movs	r1, #0
    352a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    352e:	4801      	ldr	r0, [pc, #4]	; (3534 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3530:	7001      	strb	r1, [r0, #0]
    3532:	4770      	bx	lr
    3534:	200003a8 	.word	0x200003a8

00003538 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3538:	4802      	ldr	r0, [pc, #8]	; (3544 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    353a:	6800      	ldr	r0, [r0, #0]
    353c:	f000 0003 	and.w	r0, r0, #3
    3540:	4770      	bx	lr
    3542:	0000      	.short	0x0000
    3544:	4000041c 	.word	0x4000041c
    3548:	b510      	push	{r4, lr}
    354a:	b131      	cbz	r1, 355a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    354c:	2901      	cmp	r1, #1
    354e:	d007      	beq.n	3560 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3550:	f44f 7142 	mov.w	r1, #776	; 0x308
    3554:	a005      	add	r0, pc, #20	; (adr r0, 356c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3556:	f000 f80f 	bl	3578 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    355a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    355e:	e001      	b.n	3564 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3560:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3564:	f000 0001 	and.w	r0, r0, #1
    3568:	bd10      	pop	{r4, pc}
    356a:	0000      	.short	0x0000
    356c:	5f66726e 	.word	0x5f66726e
    3570:	636f6c63 	.word	0x636f6c63
    3574:	00682e6b 	.word	0x00682e6b

00003578 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3578:	4a02      	ldr	r2, [pc, #8]	; (3584 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    357a:	6852      	ldr	r2, [r2, #4]
    357c:	b102      	cbz	r2, 3580 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    357e:	4710      	bx	r2
    3580:	e7fe      	b.n	3580 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3582:	0000      	.short	0x0000
    3584:	20000048 	.word	0x20000048
    3588:	4806      	ldr	r0, [pc, #24]	; (35a4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    358a:	b510      	push	{r4, lr}
    358c:	2100      	movs	r1, #0
    358e:	6001      	str	r1, [r0, #0]
    3590:	2101      	movs	r1, #1
    3592:	6001      	str	r1, [r0, #0]
    3594:	4608      	mov	r0, r1
    3596:	f00b fbd8 	bl	ed4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    359a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    359e:	2001      	movs	r0, #1
    35a0:	f00b bbc6 	b.w	ed30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    35a4:	40001ffc 	.word	0x40001ffc
    35a8:	4807      	ldr	r0, [pc, #28]	; (35c8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    35aa:	b510      	push	{r4, lr}
    35ac:	2101      	movs	r1, #1
    35ae:	6041      	str	r1, [r0, #4]
    35b0:	1e89      	subs	r1, r1, #2
    35b2:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    35b6:	200c      	movs	r0, #12
    35b8:	f00b fbc7 	bl	ed4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    35bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35c0:	200c      	movs	r0, #12
    35c2:	f00b bbb5 	b.w	ed30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    35c6:	0000      	.short	0x0000
    35c8:	4000c000 	.word	0x4000c000

000035cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    35cc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    35ce:	4a10      	ldr	r2, [pc, #64]	; (3610 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    35d0:	6855      	ldr	r5, [r2, #4]
    35d2:	b1e5      	cbz	r5, 360e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    35d4:	2200      	movs	r2, #0
    35d6:	4603      	mov	r3, r0
    35d8:	466e      	mov	r6, sp
    35da:	240a      	movs	r4, #10
    35dc:	e003      	b.n	35e6 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    35de:	fbb0 f0f4 	udiv	r0, r0, r4
    35e2:	1c52      	adds	r2, r2, #1
    35e4:	b2d2      	uxtb	r2, r2
    35e6:	2800      	cmp	r0, #0
    35e8:	d1f9      	bne.n	35de <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    35ea:	54b0      	strb	r0, [r6, r2]
    35ec:	e00a      	b.n	3604 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    35ee:	bf00      	nop
    35f0:	fbb3 f0f4 	udiv	r0, r3, r4
    35f4:	fb04 3010 	mls	r0, r4, r0, r3
    35f8:	fbb3 f3f4 	udiv	r3, r3, r4
    35fc:	1e52      	subs	r2, r2, #1
    35fe:	b2d2      	uxtb	r2, r2
    3600:	3030      	adds	r0, #48	; 0x30
    3602:	54b0      	strb	r0, [r6, r2]
    3604:	2a00      	cmp	r2, #0
    3606:	d1f3      	bne.n	35f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3608:	4630      	mov	r0, r6
    360a:	47a8      	blx	r5
    360c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    360e:	e7fe      	b.n	360e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3610:	20000048 	.word	0x20000048

00003614 <mpsl_init>:
    3614:	b570      	push	{r4, r5, r6, lr}
    3616:	4c17      	ldr	r4, [pc, #92]	; (3674 <mpsl_init+0x60>)
    3618:	4606      	mov	r6, r0
    361a:	460d      	mov	r5, r1
    361c:	7860      	ldrb	r0, [r4, #1]
    361e:	b110      	cbz	r0, 3626 <mpsl_init+0x12>
    3620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3624:	bd70      	pop	{r4, r5, r6, pc}
    3626:	b906      	cbnz	r6, 362a <mpsl_init+0x16>
    3628:	4e13      	ldr	r6, [pc, #76]	; (3678 <mpsl_init+0x64>)
    362a:	6062      	str	r2, [r4, #4]
    362c:	7025      	strb	r5, [r4, #0]
    362e:	f7ff ffab 	bl	3588 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    3632:	f7ff ffb9 	bl	35a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    3636:	4630      	mov	r0, r6
    3638:	f7ff feb4 	bl	33a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    363c:	0006      	movs	r6, r0
    363e:	d1f1      	bne.n	3624 <mpsl_init+0x10>
    3640:	f7fe ffb6 	bl	25b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3644:	f7ff ff2a 	bl	349c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3648:	f00b facc 	bl	ebe4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    364c:	4628      	mov	r0, r5
    364e:	f00b fb6f 	bl	ed30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3652:	2001      	movs	r0, #1
    3654:	2d00      	cmp	r5, #0
    3656:	db09      	blt.n	366c <mpsl_init+0x58>
    3658:	f005 011f 	and.w	r1, r5, #31
    365c:	fa00 f101 	lsl.w	r1, r0, r1
    3660:	096a      	lsrs	r2, r5, #5
    3662:	0092      	lsls	r2, r2, #2
    3664:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3668:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    366c:	7060      	strb	r0, [r4, #1]
    366e:	4630      	mov	r0, r6
    3670:	bd70      	pop	{r4, r5, r6, pc}
    3672:	0000      	.short	0x0000
    3674:	20000048 	.word	0x20000048
    3678:	0000ed6c 	.word	0x0000ed6c

0000367c <mpsl_is_initialized>:
    367c:	4801      	ldr	r0, [pc, #4]	; (3684 <mpsl_is_initialized+0x8>)
    367e:	7840      	ldrb	r0, [r0, #1]
    3680:	4770      	bx	lr
    3682:	0000      	.short	0x0000
    3684:	20000048 	.word	0x20000048

00003688 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3688:	4807      	ldr	r0, [pc, #28]	; (36a8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    368a:	f990 0000 	ldrsb.w	r0, [r0]
    368e:	2800      	cmp	r0, #0
    3690:	db09      	blt.n	36a6 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3692:	f000 021f 	and.w	r2, r0, #31
    3696:	2101      	movs	r1, #1
    3698:	4091      	lsls	r1, r2
    369a:	0940      	lsrs	r0, r0, #5
    369c:	0080      	lsls	r0, r0, #2
    369e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    36a2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    36a6:	4770      	bx	lr
    36a8:	20000048 	.word	0x20000048

000036ac <mpsl_temperature_get>:
    36ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36b0:	2601      	movs	r6, #1
    36b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    36b6:	0331      	lsls	r1, r6, #12
    36b8:	f04f 0800 	mov.w	r8, #0
    36bc:	4640      	mov	r0, r8
    36be:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    36c2:	f3bf 8f4f 	dsb	sy
    36c6:	f3bf 8f6f 	isb	sy
    36ca:	4c16      	ldr	r4, [pc, #88]	; (3724 <mpsl_temperature_get+0x78>)
    36cc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    36d0:	200c      	movs	r0, #12
    36d2:	f00b fb58 	bl	ed86 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6a>
    36d6:	4d14      	ldr	r5, [pc, #80]	; (3728 <mpsl_temperature_get+0x7c>)
    36d8:	6828      	ldr	r0, [r5, #0]
    36da:	43c0      	mvns	r0, r0
    36dc:	f340 1700 	sbfx	r7, r0, #4, #1
    36e0:	6828      	ldr	r0, [r5, #0]
    36e2:	f040 0010 	orr.w	r0, r0, #16
    36e6:	6028      	str	r0, [r5, #0]
    36e8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    36ec:	6026      	str	r6, [r4, #0]
    36ee:	1c7f      	adds	r7, r7, #1
    36f0:	e002      	b.n	36f8 <mpsl_temperature_get+0x4c>
    36f2:	bf00      	nop
    36f4:	f000 f88c 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    36f8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    36fc:	2800      	cmp	r0, #0
    36fe:	d0f9      	beq.n	36f4 <mpsl_temperature_get+0x48>
    3700:	b91f      	cbnz	r7, 370a <mpsl_temperature_get+0x5e>
    3702:	6828      	ldr	r0, [r5, #0]
    3704:	f020 0010 	bic.w	r0, r0, #16
    3708:	6028      	str	r0, [r5, #0]
    370a:	4808      	ldr	r0, [pc, #32]	; (372c <mpsl_temperature_get+0x80>)
    370c:	6805      	ldr	r5, [r0, #0]
    370e:	6066      	str	r6, [r4, #4]
    3710:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3714:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3718:	200c      	movs	r0, #12
    371a:	f00b fb34 	bl	ed86 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6a>
    371e:	4628      	mov	r0, r5
    3720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3724:	4000c000 	.word	0x4000c000
    3728:	e000ed10 	.word	0xe000ed10
    372c:	4000c508 	.word	0x4000c508

00003730 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3730:	b510      	push	{r4, lr}
    3732:	4602      	mov	r2, r0
    3734:	2005      	movs	r0, #5
    3736:	490c      	ldr	r1, [pc, #48]	; (3768 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3738:	e004      	b.n	3744 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    373a:	bf00      	nop
    373c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3740:	791b      	ldrb	r3, [r3, #4]
    3742:	b133      	cbz	r3, 3752 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3744:	1e40      	subs	r0, r0, #1
    3746:	b2c0      	uxtb	r0, r0
    3748:	d2f8      	bcs.n	373c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    374a:	214b      	movs	r1, #75	; 0x4b
    374c:	2069      	movs	r0, #105	; 0x69
    374e:	f7ff ff3d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3752:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3756:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    375a:	2200      	movs	r2, #0
    375c:	714a      	strb	r2, [r1, #5]
    375e:	718a      	strb	r2, [r1, #6]
    3760:	2201      	movs	r2, #1
    3762:	710a      	strb	r2, [r1, #4]
    3764:	bd10      	pop	{r4, pc}
    3766:	0000      	.short	0x0000
    3768:	20000eb4 	.word	0x20000eb4

0000376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    376c:	b510      	push	{r4, lr}
    376e:	2805      	cmp	r0, #5
    3770:	d301      	bcc.n	3776 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3772:	215a      	movs	r1, #90	; 0x5a
    3774:	e006      	b.n	3784 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3776:	490a      	ldr	r1, [pc, #40]	; (37a0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3778:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    377c:	7901      	ldrb	r1, [r0, #4]
    377e:	2901      	cmp	r1, #1
    3780:	d003      	beq.n	378a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3782:	215b      	movs	r1, #91	; 0x5b
    3784:	2069      	movs	r0, #105	; 0x69
    3786:	f7ff ff21 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    378a:	7941      	ldrb	r1, [r0, #5]
    378c:	7982      	ldrb	r2, [r0, #6]
    378e:	1c49      	adds	r1, r1, #1
    3790:	b2c9      	uxtb	r1, r1
    3792:	428a      	cmp	r2, r1
    3794:	d000      	beq.n	3798 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3796:	7141      	strb	r1, [r0, #5]
    3798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    379c:	f7ff bf74 	b.w	3688 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    37a0:	20000eb4 	.word	0x20000eb4

000037a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    37a4:	b570      	push	{r4, r5, r6, lr}
    37a6:	2505      	movs	r5, #5
    37a8:	4e0e      	ldr	r6, [pc, #56]	; (37e4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    37aa:	4c0f      	ldr	r4, [pc, #60]	; (37e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    37ac:	e016      	b.n	37dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    37ae:	7821      	ldrb	r1, [r4, #0]
    37b0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    37b4:	7902      	ldrb	r2, [r0, #4]
    37b6:	2a01      	cmp	r2, #1
    37b8:	d108      	bne.n	37cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    37ba:	7942      	ldrb	r2, [r0, #5]
    37bc:	7983      	ldrb	r3, [r0, #6]
    37be:	429a      	cmp	r2, r3
    37c0:	d004      	beq.n	37cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    37c2:	7942      	ldrb	r2, [r0, #5]
    37c4:	7182      	strb	r2, [r0, #6]
    37c6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    37ca:	4780      	blx	r0
    37cc:	7820      	ldrb	r0, [r4, #0]
    37ce:	1c40      	adds	r0, r0, #1
    37d0:	b2c0      	uxtb	r0, r0
    37d2:	7020      	strb	r0, [r4, #0]
    37d4:	2805      	cmp	r0, #5
    37d6:	d301      	bcc.n	37dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    37d8:	2000      	movs	r0, #0
    37da:	7020      	strb	r0, [r4, #0]
    37dc:	1e6d      	subs	r5, r5, #1
    37de:	b2ed      	uxtb	r5, r5
    37e0:	d2e5      	bcs.n	37ae <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    37e2:	bd70      	pop	{r4, r5, r6, pc}
    37e4:	20000eb4 	.word	0x20000eb4
    37e8:	200003a9 	.word	0x200003a9

000037ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    37ec:	b500      	push	{lr}
    37ee:	f00b fb57 	bl	eea0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    37f2:	b928      	cbnz	r0, 3800 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x14>
    37f4:	f00b fb4a 	bl	ee8c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    37f8:	b910      	cbnz	r0, 3800 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x14>
    37fa:	f00b fb11 	bl	ee20 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    37fe:	b108      	cbz	r0, 3804 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x18>
    3800:	4801      	ldr	r0, [pc, #4]	; (3808 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1c>)
    3802:	bd00      	pop	{pc}
    3804:	4801      	ldr	r0, [pc, #4]	; (380c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x20>)
    3806:	bd00      	pop	{pc}
    3808:	4001e700 	.word	0x4001e700
    380c:	4000050c 	.word	0x4000050c

00003810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3810:	b510      	push	{r4, lr}
    3812:	f00b fb0f 	bl	ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3816:	b1e0      	cbz	r0, 3852 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3818:	f3ef 8010 	mrs	r0, PRIMASK
    381c:	b1d8      	cbz	r0, 3856 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    381e:	2100      	movs	r1, #0
    3820:	b672      	cpsid	i
    3822:	4812      	ldr	r0, [pc, #72]	; (386c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3824:	6802      	ldr	r2, [r0, #0]
    3826:	6803      	ldr	r3, [r0, #0]
    3828:	f3c2 1200 	ubfx	r2, r2, #4, #1
    382c:	f043 0310 	orr.w	r3, r3, #16
    3830:	6003      	str	r3, [r0, #0]
    3832:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3836:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    383a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    383e:	431c      	orrs	r4, r3
    3840:	d000      	beq.n	3844 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3842:	bf40      	sev
    3844:	bf20      	wfe
    3846:	bf00      	nop
    3848:	bf00      	nop
    384a:	bf00      	nop
    384c:	bf00      	nop
    384e:	b122      	cbz	r2, 385a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4a>
    3850:	e007      	b.n	3862 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x52>
    3852:	bf20      	wfe
    3854:	bd10      	pop	{r4, pc}
    3856:	2101      	movs	r1, #1
    3858:	e7e2      	b.n	3820 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    385a:	6802      	ldr	r2, [r0, #0]
    385c:	f022 0210 	bic.w	r2, r2, #16
    3860:	6002      	str	r2, [r0, #0]
    3862:	2900      	cmp	r1, #0
    3864:	d0f6      	beq.n	3854 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x44>
    3866:	b662      	cpsie	i
    3868:	bd10      	pop	{r4, pc}
    386a:	0000      	.short	0x0000
    386c:	e000ed10 	.word	0xe000ed10

00003870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    3870:	b510      	push	{r4, lr}
    3872:	ea80 0401 	eor.w	r4, r0, r1
    3876:	4603      	mov	r3, r0
    3878:	07a4      	lsls	r4, r4, #30
    387a:	d007      	beq.n	388c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x1c>
    387c:	e015      	b.n	38aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    387e:	2a00      	cmp	r2, #0
    3880:	d015      	beq.n	38ae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3e>
    3882:	f811 4b01 	ldrb.w	r4, [r1], #1
    3886:	f803 4b01 	strb.w	r4, [r3], #1
    388a:	1e52      	subs	r2, r2, #1
    388c:	079c      	lsls	r4, r3, #30
    388e:	d1f6      	bne.n	387e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe>
    3890:	e002      	b.n	3898 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x28>
    3892:	c910      	ldmia	r1!, {r4}
    3894:	1f12      	subs	r2, r2, #4
    3896:	c310      	stmia	r3!, {r4}
    3898:	2a04      	cmp	r2, #4
    389a:	d2fa      	bcs.n	3892 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x22>
    389c:	e005      	b.n	38aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x3a>
    389e:	bf00      	nop
    38a0:	f811 4b01 	ldrb.w	r4, [r1], #1
    38a4:	f803 4b01 	strb.w	r4, [r3], #1
    38a8:	1e52      	subs	r2, r2, #1
    38aa:	2a00      	cmp	r2, #0
    38ac:	d1f8      	bne.n	38a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x30>
    38ae:	bd10      	pop	{r4, pc}
    38b0:	b570      	push	{r4, r5, r6, lr}
    38b2:	4c0e      	ldr	r4, [pc, #56]	; (38ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7c>)
    38b4:	7860      	ldrb	r0, [r4, #1]
    38b6:	2800      	cmp	r0, #0
    38b8:	d117      	bne.n	38ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38ba:	7820      	ldrb	r0, [r4, #0]
    38bc:	2500      	movs	r5, #0
    38be:	2801      	cmp	r0, #1
    38c0:	d106      	bne.n	38d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    38c2:	2002      	movs	r0, #2
    38c4:	7020      	strb	r0, [r4, #0]
    38c6:	68a0      	ldr	r0, [r4, #8]
    38c8:	b110      	cbz	r0, 38d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x60>
    38ca:	68a0      	ldr	r0, [r4, #8]
    38cc:	4780      	blx	r0
    38ce:	60a5      	str	r5, [r4, #8]
    38d0:	7820      	ldrb	r0, [r4, #0]
    38d2:	2803      	cmp	r0, #3
    38d4:	d109      	bne.n	38ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38d6:	7025      	strb	r5, [r4, #0]
    38d8:	68a0      	ldr	r0, [r4, #8]
    38da:	2800      	cmp	r0, #0
    38dc:	d005      	beq.n	38ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x7a>
    38de:	6860      	ldr	r0, [r4, #4]
    38e0:	6940      	ldr	r0, [r0, #20]
    38e2:	4780      	blx	r0
    38e4:	68a0      	ldr	r0, [r4, #8]
    38e6:	4780      	blx	r0
    38e8:	60a5      	str	r5, [r4, #8]
    38ea:	bd70      	pop	{r4, r5, r6, pc}
    38ec:	20000050 	.word	0x20000050

000038f0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
    38f0:	b510      	push	{r4, lr}
    38f2:	4c08      	ldr	r4, [pc, #32]	; (3914 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
    38f4:	7820      	ldrb	r0, [r4, #0]
    38f6:	2802      	cmp	r0, #2
    38f8:	d002      	beq.n	3900 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
    38fa:	7820      	ldrb	r0, [r4, #0]
    38fc:	2803      	cmp	r0, #3
    38fe:	d102      	bne.n	3906 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
    3900:	6860      	ldr	r0, [r4, #4]
    3902:	6880      	ldr	r0, [r0, #8]
    3904:	4780      	blx	r0
    3906:	2000      	movs	r0, #0
    3908:	7060      	strb	r0, [r4, #1]
    390a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    390e:	f7ff bfcf 	b.w	38b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    3912:	0000      	.short	0x0000
    3914:	20000050 	.word	0x20000050

00003918 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
    3918:	b538      	push	{r3, r4, r5, lr}
    391a:	4604      	mov	r4, r0
    391c:	2805      	cmp	r0, #5
    391e:	d304      	bcc.n	392a <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
    3920:	f44f 7189 	mov.w	r1, #274	; 0x112
    3924:	2068      	movs	r0, #104	; 0x68
    3926:	f7ff fe51 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    392a:	f7ff ffc1 	bl	38b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x40>
    392e:	4d0e      	ldr	r5, [pc, #56]	; (3968 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>)
    3930:	2001      	movs	r0, #1
    3932:	7068      	strb	r0, [r5, #1]
    3934:	7828      	ldrb	r0, [r5, #0]
    3936:	2802      	cmp	r0, #2
    3938:	d115      	bne.n	3966 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x4e>
    393a:	6868      	ldr	r0, [r5, #4]
    393c:	68c1      	ldr	r1, [r0, #12]
    393e:	4620      	mov	r0, r4
    3940:	4788      	blx	r1
    3942:	490a      	ldr	r1, [pc, #40]	; (396c <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x54>)
    3944:	eb01 0244 	add.w	r2, r1, r4, lsl #1
    3948:	7852      	ldrb	r2, [r2, #1]
    394a:	4282      	cmp	r2, r0
    394c:	d201      	bcs.n	3952 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3a>
    394e:	2001      	movs	r0, #1
    3950:	e001      	b.n	3956 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x3e>
    3952:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
    3956:	f88d 0000 	strb.w	r0, [sp]
    395a:	f88d 4001 	strb.w	r4, [sp, #1]
    395e:	6868      	ldr	r0, [r5, #4]
    3960:	6801      	ldr	r1, [r0, #0]
    3962:	4668      	mov	r0, sp
    3964:	4788      	blx	r1
    3966:	bd38      	pop	{r3, r4, r5, pc}
    3968:	20000050 	.word	0x20000050
    396c:	200019f6 	.word	0x200019f6

00003970 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
    3970:	4905      	ldr	r1, [pc, #20]	; (3988 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
    3972:	780a      	ldrb	r2, [r1, #0]
    3974:	2a02      	cmp	r2, #2
    3976:	d004      	beq.n	3982 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    3978:	780a      	ldrb	r2, [r1, #0]
    397a:	2a03      	cmp	r2, #3
    397c:	d001      	beq.n	3982 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
    397e:	2000      	movs	r0, #0
    3980:	4770      	bx	lr
    3982:	6849      	ldr	r1, [r1, #4]
    3984:	6909      	ldr	r1, [r1, #16]
    3986:	4708      	bx	r1
    3988:	20000050 	.word	0x20000050

0000398c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
    398c:	b510      	push	{r4, lr}
    398e:	b158      	cbz	r0, 39a8 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
    3990:	4908      	ldr	r1, [pc, #32]	; (39b4 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
    3992:	780a      	ldrb	r2, [r1, #0]
    3994:	2a02      	cmp	r2, #2
    3996:	d002      	beq.n	399e <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
    3998:	780a      	ldrb	r2, [r1, #0]
    399a:	2a03      	cmp	r2, #3
    399c:	d109      	bne.n	39b2 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
    399e:	6849      	ldr	r1, [r1, #4]
    39a0:	6849      	ldr	r1, [r1, #4]
    39a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    39a6:	4708      	bx	r1
    39a8:	f240 1127 	movw	r1, #295	; 0x127
    39ac:	2068      	movs	r0, #104	; 0x68
    39ae:	f7ff fe0d 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39b2:	bd10      	pop	{r4, pc}
    39b4:	20000050 	.word	0x20000050

000039b8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
    39b8:	4805      	ldr	r0, [pc, #20]	; (39d0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
    39ba:	7801      	ldrb	r1, [r0, #0]
    39bc:	2902      	cmp	r1, #2
    39be:	d004      	beq.n	39ca <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    39c0:	7801      	ldrb	r1, [r0, #0]
    39c2:	2903      	cmp	r1, #3
    39c4:	d001      	beq.n	39ca <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
    39c6:	2000      	movs	r0, #0
    39c8:	4770      	bx	lr
    39ca:	6840      	ldr	r0, [r0, #4]
    39cc:	6980      	ldr	r0, [r0, #24]
    39ce:	4700      	bx	r0
    39d0:	20000050 	.word	0x20000050
    39d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    39d6:	4c18      	ldr	r4, [pc, #96]	; (3a38 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x80>)
    39d8:	7960      	ldrb	r0, [r4, #5]
    39da:	2803      	cmp	r0, #3
    39dc:	d203      	bcs.n	39e6 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x2e>
    39de:	bf00      	nop
    39e0:	f04f 0103 	mov.w	r1, #3
    39e4:	e000      	b.n	39e8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x30>
    39e6:	4601      	mov	r1, r0
    39e8:	f88d 1001 	strb.w	r1, [sp, #1]
    39ec:	d201      	bcs.n	39f2 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x3a>
    39ee:	f04f 0003 	mov.w	r0, #3
    39f2:	f88d 0000 	strb.w	r0, [sp]
    39f6:	78e0      	ldrb	r0, [r4, #3]
    39f8:	f8ad 0004 	strh.w	r0, [sp, #4]
    39fc:	78a0      	ldrb	r0, [r4, #2]
    39fe:	f8ad 0002 	strh.w	r0, [sp, #2]
    3a02:	4668      	mov	r0, sp
    3a04:	f009 f84e 	bl	caa4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3a08:	b108      	cbz	r0, 3a0e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x56>
    3a0a:	219b      	movs	r1, #155	; 0x9b
    3a0c:	e010      	b.n	3a30 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3a0e:	68a0      	ldr	r0, [r4, #8]
    3a10:	9002      	str	r0, [sp, #8]
    3a12:	a802      	add	r0, sp, #8
    3a14:	f009 f85e 	bl	cad4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3a18:	b108      	cbz	r0, 3a1e <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x66>
    3a1a:	219f      	movs	r1, #159	; 0x9f
    3a1c:	e008      	b.n	3a30 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x78>
    3a1e:	4807      	ldr	r0, [pc, #28]	; (3a3c <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x84>)
    3a20:	6800      	ldr	r0, [r0, #0]
    3a22:	9003      	str	r0, [sp, #12]
    3a24:	a803      	add	r0, sp, #12
    3a26:	f00d ffe0 	bl	119ea <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3a2a:	2800      	cmp	r0, #0
    3a2c:	d003      	beq.n	3a36 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x7e>
    3a2e:	21a3      	movs	r1, #163	; 0xa3
    3a30:	2003      	movs	r0, #3
    3a32:	f000 f8a7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3a38:	20000068 	.word	0x20000068
    3a3c:	00003bec 	.word	0x00003bec

00003a40 <sdc_build_revision_get>:
    3a40:	b510      	push	{r4, lr}
    3a42:	b128      	cbz	r0, 3a50 <sdc_build_revision_get+0x10>
    3a44:	2214      	movs	r2, #20
    3a46:	4904      	ldr	r1, [pc, #16]	; (3a58 <sdc_build_revision_get+0x18>)
    3a48:	f7ff ff12 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a4c:	2000      	movs	r0, #0
    3a4e:	bd10      	pop	{r4, pc}
    3a50:	f06f 0015 	mvn.w	r0, #21
    3a54:	bd10      	pop	{r4, pc}
    3a56:	0000      	.short	0x0000
    3a58:	00003c1e 	.word	0x00003c1e

00003a5c <sdc_cfg_set>:
    3a5c:	b510      	push	{r4, lr}
    3a5e:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    3a62:	bb18      	cbnz	r0, 3aac <sdc_cfg_set+0x50>
    3a64:	b1c9      	cbz	r1, 3a9a <sdc_cfg_set+0x3e>
    3a66:	b14a      	cbz	r2, 3a7c <sdc_cfg_set+0x20>
    3a68:	4b11      	ldr	r3, [pc, #68]	; (3ab0 <sdc_cfg_set+0x54>)
    3a6a:	2901      	cmp	r1, #1
    3a6c:	d009      	beq.n	3a82 <sdc_cfg_set+0x26>
    3a6e:	2902      	cmp	r1, #2
    3a70:	d00a      	beq.n	3a88 <sdc_cfg_set+0x2c>
    3a72:	2903      	cmp	r1, #3
    3a74:	d00b      	beq.n	3a8e <sdc_cfg_set+0x32>
    3a76:	2904      	cmp	r1, #4
    3a78:	d118      	bne.n	3aac <sdc_cfg_set+0x50>
    3a7a:	e00c      	b.n	3a96 <sdc_cfg_set+0x3a>
    3a7c:	f06f 0015 	mvn.w	r0, #21
    3a80:	bd10      	pop	{r4, pc}
    3a82:	7810      	ldrb	r0, [r2, #0]
    3a84:	7218      	strb	r0, [r3, #8]
    3a86:	e008      	b.n	3a9a <sdc_cfg_set+0x3e>
    3a88:	7810      	ldrb	r0, [r2, #0]
    3a8a:	7258      	strb	r0, [r3, #9]
    3a8c:	e005      	b.n	3a9a <sdc_cfg_set+0x3e>
    3a8e:	6810      	ldr	r0, [r2, #0]
    3a90:	f8c3 000a 	str.w	r0, [r3, #10]
    3a94:	e001      	b.n	3a9a <sdc_cfg_set+0x3e>
    3a96:	6810      	ldr	r0, [r2, #0]
    3a98:	6118      	str	r0, [r3, #16]
    3a9a:	4905      	ldr	r1, [pc, #20]	; (3ab0 <sdc_cfg_set+0x54>)
    3a9c:	2201      	movs	r2, #1
    3a9e:	3108      	adds	r1, #8
    3aa0:	2000      	movs	r0, #0
    3aa2:	f00b fa33 	bl	ef0c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    3aa6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3aaa:	dbe9      	blt.n	3a80 <sdc_cfg_set+0x24>
    3aac:	4620      	mov	r0, r4
    3aae:	bd10      	pop	{r4, pc}
    3ab0:	20000060 	.word	0x20000060

00003ab4 <sdc_enable>:
    3ab4:	b538      	push	{r3, r4, r5, lr}
    3ab6:	460c      	mov	r4, r1
    3ab8:	b1c0      	cbz	r0, 3aec <sdc_enable+0x38>
    3aba:	b1bc      	cbz	r4, 3aec <sdc_enable+0x38>
    3abc:	f7ff fe38 	bl	3730 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3ac0:	4d0c      	ldr	r5, [pc, #48]	; (3af4 <sdc_enable+0x40>)
    3ac2:	2200      	movs	r2, #0
    3ac4:	f105 0108 	add.w	r1, r5, #8
    3ac8:	7028      	strb	r0, [r5, #0]
    3aca:	4620      	mov	r0, r4
    3acc:	f00b fa1e 	bl	ef0c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x38>
    3ad0:	f00e fbfd 	bl	122ce <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3ad4:	2100      	movs	r1, #0
    3ad6:	7828      	ldrb	r0, [r5, #0]
    3ad8:	f009 fb42 	bl	d160 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3adc:	7868      	ldrb	r0, [r5, #1]
    3ade:	f88d 0000 	strb.w	r0, [sp]
    3ae2:	4668      	mov	r0, sp
    3ae4:	f00d ff6f 	bl	119c6 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3ae8:	2000      	movs	r0, #0
    3aea:	bd38      	pop	{r3, r4, r5, pc}
    3aec:	f06f 0015 	mvn.w	r0, #21
    3af0:	bd38      	pop	{r3, r4, r5, pc}
    3af2:	0000      	.short	0x0000
    3af4:	20000060 	.word	0x20000060

00003af8 <sdc_init>:
    3af8:	b570      	push	{r4, r5, r6, lr}
    3afa:	0004      	movs	r4, r0
    3afc:	d00b      	beq.n	3b16 <sdc_init+0x1e>
    3afe:	f7ff fdbd 	bl	367c <mpsl_is_initialized>
    3b02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3b06:	b120      	cbz	r0, 3b12 <sdc_init+0x1a>
    3b08:	f7ff fc9c 	bl	3444 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3b0c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3b10:	d904      	bls.n	3b1c <sdc_init+0x24>
    3b12:	4628      	mov	r0, r5
    3b14:	bd70      	pop	{r4, r5, r6, pc}
    3b16:	f06f 0015 	mvn.w	r0, #21
    3b1a:	bd70      	pop	{r4, r5, r6, pc}
    3b1c:	2200      	movs	r2, #0
    3b1e:	4b14      	ldr	r3, [pc, #80]	; (3b70 <sdc_init+0x78>)
    3b20:	4611      	mov	r1, r2
    3b22:	bf00      	nop
    3b24:	f833 5021 	ldrh.w	r5, [r3, r1, lsl #2]
    3b28:	4285      	cmp	r5, r0
    3b2a:	d303      	bcc.n	3b34 <sdc_init+0x3c>
    3b2c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3b30:	7882      	ldrb	r2, [r0, #2]
    3b32:	e003      	b.n	3b3c <sdc_init+0x44>
    3b34:	1c49      	adds	r1, r1, #1
    3b36:	b2c9      	uxtb	r1, r1
    3b38:	290c      	cmp	r1, #12
    3b3a:	d3f3      	bcc.n	3b24 <sdc_init+0x2c>
    3b3c:	480d      	ldr	r0, [pc, #52]	; (3b74 <sdc_init+0x7c>)
    3b3e:	7042      	strb	r2, [r0, #1]
    3b40:	6044      	str	r4, [r0, #4]
    3b42:	480d      	ldr	r0, [pc, #52]	; (3b78 <sdc_init+0x80>)
    3b44:	f000 f9a8 	bl	3e98 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3b48:	f3ef 8410 	mrs	r4, PRIMASK
    3b4c:	b672      	cpsid	i
    3b4e:	480b      	ldr	r0, [pc, #44]	; (3b7c <sdc_init+0x84>)
    3b50:	f06f 010c 	mvn.w	r1, #12
    3b54:	f000 fcaa 	bl	44ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3b58:	4809      	ldr	r0, [pc, #36]	; (3b80 <sdc_init+0x88>)
    3b5a:	f000 ff57 	bl	4a0c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3b5e:	b118      	cbz	r0, 3b68 <sdc_init+0x70>
    3b60:	21b2      	movs	r1, #178	; 0xb2
    3b62:	2003      	movs	r0, #3
    3b64:	f000 f80e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b68:	b904      	cbnz	r4, 3b6c <sdc_init+0x74>
    3b6a:	b662      	cpsie	i
    3b6c:	2000      	movs	r0, #0
    3b6e:	bd70      	pop	{r4, r5, r6, pc}
    3b70:	00003bee 	.word	0x00003bee
    3b74:	20000060 	.word	0x20000060
    3b78:	000039d5 	.word	0x000039d5
    3b7c:	4000e000 	.word	0x4000e000
    3b80:	00003c35 	.word	0x00003c35

00003b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3b84:	b50e      	push	{r1, r2, r3, lr}
    3b86:	b672      	cpsid	i
    3b88:	4a15      	ldr	r2, [pc, #84]	; (3be0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3b8a:	6855      	ldr	r5, [r2, #4]
    3b8c:	b1d5      	cbz	r5, 3bc4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3b8e:	2200      	movs	r2, #0
    3b90:	4603      	mov	r3, r0
    3b92:	466e      	mov	r6, sp
    3b94:	240a      	movs	r4, #10
    3b96:	e003      	b.n	3ba0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3b98:	fbb0 f0f4 	udiv	r0, r0, r4
    3b9c:	1c52      	adds	r2, r2, #1
    3b9e:	b2d2      	uxtb	r2, r2
    3ba0:	2800      	cmp	r0, #0
    3ba2:	d1f9      	bne.n	3b98 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3ba4:	54b0      	strb	r0, [r6, r2]
    3ba6:	e009      	b.n	3bbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3ba8:	fbb3 f0f4 	udiv	r0, r3, r4
    3bac:	fb04 3010 	mls	r0, r4, r0, r3
    3bb0:	fbb3 f3f4 	udiv	r3, r3, r4
    3bb4:	1e52      	subs	r2, r2, #1
    3bb6:	b2d2      	uxtb	r2, r2
    3bb8:	3030      	adds	r0, #48	; 0x30
    3bba:	54b0      	strb	r0, [r6, r2]
    3bbc:	2a00      	cmp	r2, #0
    3bbe:	d1f3      	bne.n	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3bc0:	4630      	mov	r0, r6
    3bc2:	47a8      	blx	r5
    3bc4:	f3bf 8f4f 	dsb	sy
    3bc8:	4806      	ldr	r0, [pc, #24]	; (3be4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3bca:	6801      	ldr	r1, [r0, #0]
    3bcc:	4a06      	ldr	r2, [pc, #24]	; (3be8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3bce:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3bd2:	4311      	orrs	r1, r2
    3bd4:	6001      	str	r1, [r0, #0]
    3bd6:	f3bf 8f4f 	dsb	sy
    3bda:	bf00      	nop
    3bdc:	e7fd      	b.n	3bda <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3bde:	0000      	.short	0x0000
    3be0:	20000060 	.word	0x20000060
    3be4:	e000ed0c 	.word	0xe000ed0c
    3be8:	05fa0004 	.word	0x05fa0004
    3bec:	00010001 	.word	0x00010001
    3bf0:	0002000b 	.word	0x0002000b
    3bf4:	0005000a 	.word	0x0005000a
    3bf8:	000a0009 	.word	0x000a0009
    3bfc:	00140008 	.word	0x00140008
    3c00:	001e0007 	.word	0x001e0007
    3c04:	00320006 	.word	0x00320006
    3c08:	004b0005 	.word	0x004b0005
    3c0c:	00640004 	.word	0x00640004
    3c10:	00960003 	.word	0x00960003
    3c14:	00fa0002 	.word	0x00fa0002
    3c18:	01f40001 	.word	0x01f40001
    3c1c:	43d40000 	.word	0x43d40000
    3c20:	2263cfb5 	.word	0x2263cfb5
    3c24:	8aedd4e9 	.word	0x8aedd4e9
    3c28:	a14cd024 	.word	0xa14cd024
    3c2c:	26a4b1f7 	.word	0x26a4b1f7
    3c30:	00007585 	.word	0x00007585

00003c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c36:	4c12      	ldr	r4, [pc, #72]	; (3c80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3c38:	2600      	movs	r6, #0
    3c3a:	6825      	ldr	r5, [r4, #0]
    3c3c:	e011      	b.n	3c62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3c3e:	9800      	ldr	r0, [sp, #0]
    3c40:	2802      	cmp	r0, #2
    3c42:	d002      	beq.n	3c4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3c44:	2803      	cmp	r0, #3
    3c46:	d10c      	bne.n	3c62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3c48:	e006      	b.n	3c58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3c4a:	6820      	ldr	r0, [r4, #0]
    3c4c:	b110      	cbz	r0, 3c54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3c4e:	2000      	movs	r0, #0
    3c50:	6026      	str	r6, [r4, #0]
    3c52:	e005      	b.n	3c60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3c54:	2126      	movs	r1, #38	; 0x26
    3c56:	e00c      	b.n	3c72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3c58:	6820      	ldr	r0, [r4, #0]
    3c5a:	b168      	cbz	r0, 3c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3c5c:	2001      	movs	r0, #1
    3c5e:	6026      	str	r6, [r4, #0]
    3c60:	47a8      	blx	r5
    3c62:	4668      	mov	r0, sp
    3c64:	f000 fcba 	bl	45dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d0e8      	beq.n	3c3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3c6c:	2805      	cmp	r0, #5
    3c6e:	d005      	beq.n	3c7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3c70:	2133      	movs	r1, #51	; 0x33
    3c72:	2004      	movs	r0, #4
    3c74:	f7ff ff86 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c78:	212b      	movs	r1, #43	; 0x2b
    3c7a:	e7fa      	b.n	3c72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c7e:	0000      	.short	0x0000
    3c80:	20000074 	.word	0x20000074

00003c84 <sdc_soc_flash_page_erase_async>:
    3c84:	b570      	push	{r4, r5, r6, lr}
    3c86:	000c      	movs	r4, r1
    3c88:	f06f 0515 	mvn.w	r5, #21
    3c8c:	d004      	beq.n	3c98 <sdc_soc_flash_page_erase_async+0x14>
    3c8e:	f00c fa6b 	bl	10168 <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY>
    3c92:	f000 fed5 	bl	4a40 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA>
    3c96:	b108      	cbz	r0, 3c9c <sdc_soc_flash_page_erase_async+0x18>
    3c98:	4628      	mov	r0, r5
    3c9a:	bd70      	pop	{r4, r5, r6, pc}
    3c9c:	4801      	ldr	r0, [pc, #4]	; (3ca4 <sdc_soc_flash_page_erase_async+0x20>)
    3c9e:	6004      	str	r4, [r0, #0]
    3ca0:	2000      	movs	r0, #0
    3ca2:	bd70      	pop	{r4, r5, r6, pc}
    3ca4:	20000074 	.word	0x20000074

00003ca8 <sdc_soc_flash_write_async>:
    3ca8:	b570      	push	{r4, r5, r6, lr}
    3caa:	001c      	movs	r4, r3
    3cac:	f06f 0515 	mvn.w	r5, #21
    3cb0:	d002      	beq.n	3cb8 <sdc_soc_flash_write_async+0x10>
    3cb2:	f000 fe37 	bl	4924 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY>
    3cb6:	b108      	cbz	r0, 3cbc <sdc_soc_flash_write_async+0x14>
    3cb8:	4628      	mov	r0, r5
    3cba:	bd70      	pop	{r4, r5, r6, pc}
    3cbc:	4801      	ldr	r0, [pc, #4]	; (3cc4 <sdc_soc_flash_write_async+0x1c>)
    3cbe:	6004      	str	r4, [r0, #0]
    3cc0:	2000      	movs	r0, #0
    3cc2:	bd70      	pop	{r4, r5, r6, pc}
    3cc4:	20000074 	.word	0x20000074

00003cc8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    3cc8:	b570      	push	{r4, r5, r6, lr}
    3cca:	4d17      	ldr	r5, [pc, #92]	; (3d28 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x60>)
    3ccc:	4606      	mov	r6, r0
    3cce:	7828      	ldrb	r0, [r5, #0]
    3cd0:	b148      	cbz	r0, 3ce6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3cd2:	78ac      	ldrb	r4, [r5, #2]
    3cd4:	1c69      	adds	r1, r5, #1
    3cd6:	1ca4      	adds	r4, r4, #2
    3cd8:	4622      	mov	r2, r4
    3cda:	4630      	mov	r0, r6
    3cdc:	f7ff fdc8 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3ce0:	2000      	movs	r0, #0
    3ce2:	7028      	strb	r0, [r5, #0]
    3ce4:	e012      	b.n	3d0c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x44>
    3ce6:	4811      	ldr	r0, [pc, #68]	; (3d2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3ce8:	f008 ffde 	bl	cca8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3cec:	2800      	cmp	r0, #0
    3cee:	d01a      	beq.n	3d26 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5e>
    3cf0:	210a      	movs	r1, #10
    3cf2:	203e      	movs	r0, #62	; 0x3e
    3cf4:	f000 f81c 	bl	3d30 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    3cf8:	b918      	cbnz	r0, 3d02 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x3a>
    3cfa:	480c      	ldr	r0, [pc, #48]	; (3d2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3cfc:	7800      	ldrb	r0, [r0, #0]
    3cfe:	2814      	cmp	r0, #20
    3d00:	d00b      	beq.n	3d1a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x52>
    3d02:	490a      	ldr	r1, [pc, #40]	; (3d2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3d04:	4630      	mov	r0, r6
    3d06:	f00b fa10 	bl	f12a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3d0a:	4604      	mov	r4, r0
    3d0c:	b154      	cbz	r4, 3d24 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x5c>
    3d0e:	78b1      	ldrb	r1, [r6, #2]
    3d10:	7830      	ldrb	r0, [r6, #0]
    3d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d16:	f000 b80b 	b.w	3d30 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x68>
    3d1a:	4904      	ldr	r1, [pc, #16]	; (3d2c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x64>)
    3d1c:	4630      	mov	r0, r6
    3d1e:	f00b fc41 	bl	f5a4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3d22:	e7f2      	b.n	3d0a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    3d24:	2000      	movs	r0, #0
    3d26:	bd70      	pop	{r4, r5, r6, pc}
    3d28:	20000ffc 	.word	0x20000ffc
    3d2c:	20000edc 	.word	0x20000edc
    3d30:	b570      	push	{r4, r5, r6, lr}
    3d32:	460c      	mov	r4, r1
    3d34:	4605      	mov	r5, r0
    3d36:	f000 f84b 	bl	3dd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    3d3a:	2800      	cmp	r0, #0
    3d3c:	d002      	beq.n	3d44 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7c>
    3d3e:	2d3e      	cmp	r5, #62	; 0x3e
    3d40:	d001      	beq.n	3d46 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7e>
    3d42:	2001      	movs	r0, #1
    3d44:	bd70      	pop	{r4, r5, r6, pc}
    3d46:	2c12      	cmp	r4, #18
    3d48:	d106      	bne.n	3d58 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    3d4a:	4806      	ldr	r0, [pc, #24]	; (3d64 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x9c>)
    3d4c:	7801      	ldrb	r1, [r0, #0]
    3d4e:	2902      	cmp	r1, #2
    3d50:	d002      	beq.n	3d58 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x90>
    3d52:	7840      	ldrb	r0, [r0, #1]
    3d54:	2800      	cmp	r0, #0
    3d56:	d0f5      	beq.n	3d44 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x7c>
    3d58:	4620      	mov	r0, r4
    3d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d5e:	f000 b853 	b.w	3e08 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    3d62:	0000      	.short	0x0000
    3d64:	200003aa 	.word	0x200003aa

00003d68 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    3d68:	4901      	ldr	r1, [pc, #4]	; (3d70 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    3d6a:	7048      	strb	r0, [r1, #1]
    3d6c:	4770      	bx	lr
    3d6e:	0000      	.short	0x0000
    3d70:	200003aa 	.word	0x200003aa
    3d74:	b570      	push	{r4, r5, r6, lr}
    3d76:	780a      	ldrb	r2, [r1, #0]
    3d78:	7082      	strb	r2, [r0, #2]
    3d7a:	b33a      	cbz	r2, 3dcc <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    3d7c:	2a01      	cmp	r2, #1
    3d7e:	d825      	bhi.n	3dcc <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    3d80:	2313      	movs	r3, #19
    3d82:	7003      	strb	r3, [r0, #0]
    3d84:	2300      	movs	r3, #0
    3d86:	e00a      	b.n	3d9e <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    3d88:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3d8c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3d90:	78a6      	ldrb	r6, [r4, #2]
    3d92:	70ee      	strb	r6, [r5, #3]
    3d94:	8864      	ldrh	r4, [r4, #2]
    3d96:	0a24      	lsrs	r4, r4, #8
    3d98:	1c5b      	adds	r3, r3, #1
    3d9a:	712c      	strb	r4, [r5, #4]
    3d9c:	b2db      	uxtb	r3, r3
    3d9e:	4293      	cmp	r3, r2
    3da0:	d3f2      	bcc.n	3d88 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    3da2:	2300      	movs	r3, #0
    3da4:	e00b      	b.n	3dbe <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    3da6:	bf00      	nop
    3da8:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3dac:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3db0:	792e      	ldrb	r6, [r5, #4]
    3db2:	7166      	strb	r6, [r4, #5]
    3db4:	88ad      	ldrh	r5, [r5, #4]
    3db6:	0a2d      	lsrs	r5, r5, #8
    3db8:	1c5b      	adds	r3, r3, #1
    3dba:	71a5      	strb	r5, [r4, #6]
    3dbc:	b2db      	uxtb	r3, r3
    3dbe:	4293      	cmp	r3, r2
    3dc0:	d3f2      	bcc.n	3da8 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    3dc2:	2101      	movs	r1, #1
    3dc4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3dc8:	b2c0      	uxtb	r0, r0
    3dca:	bd70      	pop	{r4, r5, r6, pc}
    3dcc:	2000      	movs	r0, #0
    3dce:	bd70      	pop	{r4, r5, r6, pc}

00003dd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3dd0:	2101      	movs	r1, #1
    3dd2:	4a0c      	ldr	r2, [pc, #48]	; (3e04 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3dd4:	2840      	cmp	r0, #64	; 0x40
    3dd6:	d20c      	bcs.n	3df2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3dd8:	2820      	cmp	r0, #32
    3dda:	d803      	bhi.n	3de4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3ddc:	1e40      	subs	r0, r0, #1
    3dde:	4081      	lsls	r1, r0
    3de0:	6810      	ldr	r0, [r2, #0]
    3de2:	e002      	b.n	3dea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3de4:	3821      	subs	r0, #33	; 0x21
    3de6:	4081      	lsls	r1, r0
    3de8:	6850      	ldr	r0, [r2, #4]
    3dea:	4201      	tst	r1, r0
    3dec:	d107      	bne.n	3dfe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3dee:	2000      	movs	r0, #0
    3df0:	4770      	bx	lr
    3df2:	28ff      	cmp	r0, #255	; 0xff
    3df4:	d003      	beq.n	3dfe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3df6:	3840      	subs	r0, #64	; 0x40
    3df8:	4081      	lsls	r1, r0
    3dfa:	6890      	ldr	r0, [r2, #8]
    3dfc:	e7f5      	b.n	3dea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3dfe:	2001      	movs	r0, #1
    3e00:	4770      	bx	lr
    3e02:	0000      	.short	0x0000
    3e04:	2000007c 	.word	0x2000007c

00003e08 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3e08:	2101      	movs	r1, #1
    3e0a:	1e40      	subs	r0, r0, #1
    3e0c:	4081      	lsls	r1, r0
    3e0e:	4804      	ldr	r0, [pc, #16]	; (3e20 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3e10:	68c0      	ldr	r0, [r0, #12]
    3e12:	4201      	tst	r1, r0
    3e14:	d001      	beq.n	3e1a <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3e16:	2001      	movs	r0, #1
    3e18:	4770      	bx	lr
    3e1a:	2000      	movs	r0, #0
    3e1c:	4770      	bx	lr
    3e1e:	0000      	.short	0x0000
    3e20:	2000007c 	.word	0x2000007c

00003e24 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3e24:	4901      	ldr	r1, [pc, #4]	; (3e2c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3e26:	6800      	ldr	r0, [r0, #0]
    3e28:	60c8      	str	r0, [r1, #12]
    3e2a:	4770      	bx	lr
    3e2c:	2000007c 	.word	0x2000007c

00003e30 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3e30:	4904      	ldr	r1, [pc, #16]	; (3e44 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3e32:	6802      	ldr	r2, [r0, #0]
    3e34:	6840      	ldr	r0, [r0, #4]
    3e36:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3e3a:	600a      	str	r2, [r1, #0]
    3e3c:	4a02      	ldr	r2, [pc, #8]	; (3e48 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3e3e:	4310      	orrs	r0, r2
    3e40:	6048      	str	r0, [r1, #4]
    3e42:	4770      	bx	lr
    3e44:	2000007c 	.word	0x2000007c
    3e48:	024007f8 	.word	0x024007f8

00003e4c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    3e4c:	4901      	ldr	r1, [pc, #4]	; (3e54 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    3e4e:	6800      	ldr	r0, [r0, #0]
    3e50:	6088      	str	r0, [r1, #8]
    3e52:	4770      	bx	lr
    3e54:	2000007c 	.word	0x2000007c

00003e58 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3e58:	4805      	ldr	r0, [pc, #20]	; (3e70 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e5e:	6001      	str	r1, [r0, #0]
    3e60:	0cc9      	lsrs	r1, r1, #19
    3e62:	6041      	str	r1, [r0, #4]
    3e64:	2100      	movs	r1, #0
    3e66:	6081      	str	r1, [r0, #8]
    3e68:	211f      	movs	r1, #31
    3e6a:	60c1      	str	r1, [r0, #12]
    3e6c:	4770      	bx	lr
    3e6e:	0000      	.short	0x0000
    3e70:	2000007c 	.word	0x2000007c

00003e74 <sdc_hci_cmd_cb_reset>:
    3e74:	b510      	push	{r4, lr}
    3e76:	f7ff ffef 	bl	3e58 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3e7a:	2000      	movs	r0, #0
    3e7c:	f7ff ff74 	bl	3d68 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    3e80:	f00d fe50 	bl	11b24 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3e84:	4604      	mov	r4, r0
    3e86:	4803      	ldr	r0, [pc, #12]	; (3e94 <sdc_hci_cmd_cb_reset+0x20>)
    3e88:	6800      	ldr	r0, [r0, #0]
    3e8a:	b100      	cbz	r0, 3e8e <sdc_hci_cmd_cb_reset+0x1a>
    3e8c:	4780      	blx	r0
    3e8e:	4620      	mov	r0, r4
    3e90:	bd10      	pop	{r4, pc}
    3e92:	0000      	.short	0x0000
    3e94:	2000008c 	.word	0x2000008c

00003e98 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3e98:	4901      	ldr	r1, [pc, #4]	; (3ea0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3e9a:	6008      	str	r0, [r1, #0]
    3e9c:	4770      	bx	lr
    3e9e:	0000      	.short	0x0000
    3ea0:	2000008c 	.word	0x2000008c

00003ea4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3ea4:	2102      	movs	r1, #2
    3ea6:	8001      	strh	r1, [r0, #0]
    3ea8:	8041      	strh	r1, [r0, #2]
    3eaa:	2100      	movs	r1, #0
    3eac:	7101      	strb	r1, [r0, #4]
    3eae:	21d4      	movs	r1, #212	; 0xd4
    3eb0:	7141      	strb	r1, [r0, #5]
    3eb2:	f24b 5143 	movw	r1, #46403	; 0xb543
    3eb6:	80c1      	strh	r1, [r0, #6]
    3eb8:	4901      	ldr	r1, [pc, #4]	; (3ec0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3eba:	6081      	str	r1, [r0, #8]
    3ebc:	2000      	movs	r0, #0
    3ebe:	4770      	bx	lr
    3ec0:	e92263cf 	.word	0xe92263cf

00003ec4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>:
    3ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ec8:	4607      	mov	r7, r0
    3eca:	b111      	cbz	r1, 3ed2 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xe>
    3ecc:	2000      	movs	r0, #0
    3ece:	b960      	cbnz	r0, 3eea <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    3ed0:	e001      	b.n	3ed6 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x12>
    3ed2:	2001      	movs	r0, #1
    3ed4:	e7fb      	b.n	3ece <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0xa>
    3ed6:	2901      	cmp	r1, #1
    3ed8:	d007      	beq.n	3eea <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x26>
    3eda:	2000      	movs	r0, #0
    3edc:	2800      	cmp	r0, #0
    3ede:	d01f      	beq.n	3f20 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x5c>
    3ee0:	2400      	movs	r4, #0
    3ee2:	4812      	ldr	r0, [pc, #72]	; (3f2c <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x68>)
    3ee4:	2901      	cmp	r1, #1
    3ee6:	d002      	beq.n	3eee <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2a>
    3ee8:	e002      	b.n	3ef0 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x2c>
    3eea:	2001      	movs	r0, #1
    3eec:	e7f6      	b.n	3edc <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x18>
    3eee:	7804      	ldrb	r4, [r0, #0]
    3ef0:	2300      	movs	r3, #0
    3ef2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    3ef6:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    3efa:	f810 e001 	ldrb.w	lr, [r0, r1]
    3efe:	e008      	b.n	3f12 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x4e>
    3f00:	1918      	adds	r0, r3, r4
    3f02:	f8dc 500c 	ldr.w	r5, [ip, #12]
    3f06:	b280      	uxth	r0, r0
    3f08:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    3f0c:	b125      	cbz	r5, 3f18 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x54>
    3f0e:	1c5b      	adds	r3, r3, #1
    3f10:	b29b      	uxth	r3, r3
    3f12:	459e      	cmp	lr, r3
    3f14:	d8f4      	bhi.n	3f00 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x3c>
    3f16:	4630      	mov	r0, r6
    3f18:	8038      	strh	r0, [r7, #0]
    3f1a:	42b0      	cmp	r0, r6
    3f1c:	d102      	bne.n	3f24 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA+0x60>
    3f1e:	2000      	movs	r0, #0
    3f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f28:	f000 b8b4 	b.w	4094 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x74>
    3f2c:	20001100 	.word	0x20001100

00003f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    3f30:	b510      	push	{r4, lr}
    3f32:	2802      	cmp	r0, #2
    3f34:	d304      	bcc.n	3f40 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    3f36:	f240 1153 	movw	r1, #339	; 0x153
    3f3a:	2017      	movs	r0, #23
    3f3c:	f7ff fe22 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f40:	4901      	ldr	r1, [pc, #4]	; (3f48 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    3f42:	5c08      	ldrb	r0, [r1, r0]
    3f44:	bd10      	pop	{r4, pc}
    3f46:	0000      	.short	0x0000
    3f48:	20001100 	.word	0x20001100

00003f4c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    3f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f4e:	4605      	mov	r5, r0
    3f50:	18c8      	adds	r0, r1, r3
    3f52:	28ff      	cmp	r0, #255	; 0xff
    3f54:	d902      	bls.n	3f5c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    3f56:	f240 1121 	movw	r1, #289	; 0x121
    3f5a:	e00f      	b.n	3f7c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    3f5c:	429a      	cmp	r2, r3
    3f5e:	d902      	bls.n	3f66 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
    3f60:	f44f 7191 	mov.w	r1, #290	; 0x122
    3f64:	e00a      	b.n	3f7c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x30>
    3f66:	b2c4      	uxtb	r4, r0
    3f68:	9500      	str	r5, [sp, #0]
    3f6a:	b155      	cbz	r5, 3f82 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x36>
    3f6c:	2600      	movs	r6, #0
    3f6e:	1ce8      	adds	r0, r5, #3
    3f70:	f020 0003 	bic.w	r0, r0, #3
    3f74:	42a8      	cmp	r0, r5
    3f76:	d006      	beq.n	3f86 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    3f78:	f44f 7194 	mov.w	r1, #296	; 0x128
    3f7c:	2017      	movs	r0, #23
    3f7e:	f7ff fe01 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f82:	2601      	movs	r6, #1
    3f84:	e7f3      	b.n	3f6e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    3f86:	4f12      	ldr	r7, [pc, #72]	; (3fd0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x84>)
    3f88:	4668      	mov	r0, sp
    3f8a:	703b      	strb	r3, [r7, #0]
    3f8c:	7079      	strb	r1, [r7, #1]
    3f8e:	4631      	mov	r1, r6
    3f90:	f000 f8c6 	bl	4120 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    3f94:	2100      	movs	r1, #0
    3f96:	468c      	mov	ip, r1
    3f98:	9800      	ldr	r0, [sp, #0]
    3f9a:	1cc0      	adds	r0, r0, #3
    3f9c:	f020 0003 	bic.w	r0, r0, #3
    3fa0:	9000      	str	r0, [sp, #0]
    3fa2:	b95e      	cbnz	r6, 3fbc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x70>
    3fa4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    3fa8:	60d8      	str	r0, [r3, #12]
    3faa:	2000      	movs	r0, #0
    3fac:	e004      	b.n	3fb8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x6c>
    3fae:	68da      	ldr	r2, [r3, #12]
    3fb0:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
    3fb4:	1c40      	adds	r0, r0, #1
    3fb6:	b2c0      	uxtb	r0, r0
    3fb8:	42a0      	cmp	r0, r4
    3fba:	d3f8      	bcc.n	3fae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
    3fbc:	9800      	ldr	r0, [sp, #0]
    3fbe:	1c49      	adds	r1, r1, #1
    3fc0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3fc4:	b2c9      	uxtb	r1, r1
    3fc6:	9000      	str	r0, [sp, #0]
    3fc8:	2902      	cmp	r1, #2
    3fca:	d3e5      	bcc.n	3f98 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x4c>
    3fcc:	1b40      	subs	r0, r0, r5
    3fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fd0:	20001100 	.word	0x20001100

00003fd4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    3fd4:	b570      	push	{r4, r5, r6, lr}
    3fd6:	4604      	mov	r4, r0
    3fd8:	f00c f921 	bl	1021e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    3fdc:	b108      	cbz	r0, 3fe2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    3fde:	2010      	movs	r0, #16
    3fe0:	bd70      	pop	{r4, r5, r6, pc}
    3fe2:	7825      	ldrb	r5, [r4, #0]
    3fe4:	f000 f84e 	bl	4084 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    3fe8:	4602      	mov	r2, r0
    3fea:	480c      	ldr	r0, [pc, #48]	; (401c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    3fec:	8861      	ldrh	r1, [r4, #2]
    3fee:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3ff2:	e00e      	b.n	4012 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    3ff4:	68c3      	ldr	r3, [r0, #12]
    3ff6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    3ffa:	b143      	cbz	r3, 400e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    3ffc:	1c4a      	adds	r2, r1, #1
    3ffe:	8062      	strh	r2, [r4, #2]
    4000:	80a1      	strh	r1, [r4, #4]
    4002:	68c0      	ldr	r0, [r0, #12]
    4004:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4008:	60a0      	str	r0, [r4, #8]
    400a:	2000      	movs	r0, #0
    400c:	bd70      	pop	{r4, r5, r6, pc}
    400e:	1c49      	adds	r1, r1, #1
    4010:	b289      	uxth	r1, r1
    4012:	4291      	cmp	r1, r2
    4014:	d3ee      	bcc.n	3ff4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4016:	8061      	strh	r1, [r4, #2]
    4018:	2005      	movs	r0, #5
    401a:	bd70      	pop	{r4, r5, r6, pc}
    401c:	20001100 	.word	0x20001100

00004020 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4024:	4607      	mov	r7, r0
    4026:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    402a:	460c      	mov	r4, r1
    402c:	f243 0602 	movw	r6, #12290	; 0x3002
    4030:	38ff      	subs	r0, #255	; 0xff
    4032:	d020      	beq.n	4076 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4034:	2c02      	cmp	r4, #2
    4036:	d302      	bcc.n	403e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4038:	2007      	movs	r0, #7
    403a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    403e:	4638      	mov	r0, r7
    4040:	f000 f85e 	bl	4100 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    4044:	0005      	movs	r5, r0
    4046:	d016      	beq.n	4076 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4048:	480c      	ldr	r0, [pc, #48]	; (407c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    404a:	4629      	mov	r1, r5
    404c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4050:	4638      	mov	r0, r7
    4052:	4790      	blx	r2
    4054:	480a      	ldr	r0, [pc, #40]	; (4080 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4056:	2100      	movs	r1, #0
    4058:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    405c:	68f0      	ldr	r0, [r6, #12]
    405e:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    4062:	4620      	mov	r0, r4
    4064:	f000 f88e 	bl	4184 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    4068:	4602      	mov	r2, r0
    406a:	4629      	mov	r1, r5
    406c:	6870      	ldr	r0, [r6, #4]
    406e:	f00b fff7 	bl	10060 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4072:	2000      	movs	r0, #0
    4074:	e7e1      	b.n	403a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4076:	4630      	mov	r0, r6
    4078:	e7df      	b.n	403a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    407a:	0000      	.short	0x0000
    407c:	000041a4 	.word	0x000041a4
    4080:	20001100 	.word	0x20001100
    4084:	4902      	ldr	r1, [pc, #8]	; (4090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x70>)
    4086:	7808      	ldrb	r0, [r1, #0]
    4088:	7849      	ldrb	r1, [r1, #1]
    408a:	4408      	add	r0, r1
    408c:	b2c0      	uxtb	r0, r0
    408e:	4770      	bx	lr
    4090:	20001100 	.word	0x20001100
    4094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4098:	4690      	mov	r8, r2
    409a:	460e      	mov	r6, r1
    409c:	4607      	mov	r7, r0
    409e:	f00c f819 	bl	100d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    40a2:	b140      	cbz	r0, 40b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x96>
    40a4:	4814      	ldr	r0, [pc, #80]	; (40f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>)
    40a6:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    40aa:	68e0      	ldr	r0, [r4, #12]
    40ac:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    40b0:	b118      	cbz	r0, 40ba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9a>
    40b2:	21f4      	movs	r1, #244	; 0xf4
    40b4:	e013      	b.n	40de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    40b6:	21f3      	movs	r1, #243	; 0xf3
    40b8:	e011      	b.n	40de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
    40ba:	6860      	ldr	r0, [r4, #4]
    40bc:	2800      	cmp	r0, #0
    40be:	d019      	beq.n	40f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    40c0:	4630      	mov	r0, r6
    40c2:	f000 f85f 	bl	4184 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    40c6:	4601      	mov	r1, r0
    40c8:	6860      	ldr	r0, [r4, #4]
    40ca:	f00b ff7b 	bl	ffc4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    40ce:	0005      	movs	r5, r0
    40d0:	d00f      	beq.n	40f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd2>
    40d2:	68e0      	ldr	r0, [r4, #12]
    40d4:	2e02      	cmp	r6, #2
    40d6:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
    40da:	d303      	bcc.n	40e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    40dc:	21ff      	movs	r1, #255	; 0xff
    40de:	2017      	movs	r0, #23
    40e0:	f7ff fd50 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40e4:	4805      	ldr	r0, [pc, #20]	; (40fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xdc>)
    40e6:	4642      	mov	r2, r8
    40e8:	4629      	mov	r1, r5
    40ea:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
    40ee:	4638      	mov	r0, r7
    40f0:	4798      	blx	r3
    40f2:	4628      	mov	r0, r5
    40f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40f8:	20001100 	.word	0x20001100
    40fc:	0000419c 	.word	0x0000419c
    4100:	b570      	push	{r4, r5, r6, lr}
    4102:	460c      	mov	r4, r1
    4104:	4605      	mov	r5, r0
    4106:	f00b ffe5 	bl	100d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    410a:	2800      	cmp	r0, #0
    410c:	d005      	beq.n	411a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfa>
    410e:	4803      	ldr	r0, [pc, #12]	; (411c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfc>)
    4110:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4114:	68c0      	ldr	r0, [r0, #12]
    4116:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    411a:	bd70      	pop	{r4, r5, r6, pc}
    411c:	20001100 	.word	0x20001100
    4120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4124:	4f16      	ldr	r7, [pc, #88]	; (4180 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x160>)
    4126:	4688      	mov	r8, r1
    4128:	4605      	mov	r5, r0
    412a:	2400      	movs	r4, #0
    412c:	6828      	ldr	r0, [r5, #0]
    412e:	1cc0      	adds	r0, r0, #3
    4130:	f020 0003 	bic.w	r0, r0, #3
    4134:	6028      	str	r0, [r5, #0]
    4136:	4620      	mov	r0, r4
    4138:	f000 f824 	bl	4184 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>
    413c:	5d39      	ldrb	r1, [r7, r4]
    413e:	4341      	muls	r1, r0
    4140:	f1b8 0f00 	cmp.w	r8, #0
    4144:	d001      	beq.n	414a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4146:	2000      	movs	r0, #0
    4148:	e000      	b.n	414c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12c>
    414a:	6828      	ldr	r0, [r5, #0]
    414c:	9000      	str	r0, [sp, #0]
    414e:	b118      	cbz	r0, 4158 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4150:	2600      	movs	r6, #0
    4152:	b11e      	cbz	r6, 415c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13c>
    4154:	2000      	movs	r0, #0
    4156:	e002      	b.n	415e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4158:	2601      	movs	r6, #1
    415a:	e7fa      	b.n	4152 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    415c:	4668      	mov	r0, sp
    415e:	f00b ff5e 	bl	1001e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4162:	b91e      	cbnz	r6, 416c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    4164:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    4168:	9a00      	ldr	r2, [sp, #0]
    416a:	604a      	str	r2, [r1, #4]
    416c:	6829      	ldr	r1, [r5, #0]
    416e:	1c64      	adds	r4, r4, #1
    4170:	4408      	add	r0, r1
    4172:	b2e4      	uxtb	r4, r4
    4174:	6028      	str	r0, [r5, #0]
    4176:	2c02      	cmp	r4, #2
    4178:	d3d8      	bcc.n	412c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    417a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    417e:	0000      	.short	0x0000
    4180:	20001100 	.word	0x20001100
    4184:	4903      	ldr	r1, [pc, #12]	; (4194 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x174>)
    4186:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    418a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    418e:	1cc0      	adds	r0, r0, #3
    4190:	4008      	ands	r0, r1
    4192:	4770      	bx	lr
    4194:	00004198 	.word	0x00004198
    4198:	02280190 	.word	0x02280190
    419c:	000113dd 	.word	0x000113dd
    41a0:	000111ad 	.word	0x000111ad
    41a4:	00011413 	.word	0x00011413
    41a8:	000111c3 	.word	0x000111c3

000041ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    41ac:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41b0:	4c26      	ldr	r4, [pc, #152]	; (424c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    41b2:	4680      	mov	r8, r0
    41b4:	b081      	sub	sp, #4
    41b6:	6820      	ldr	r0, [r4, #0]
    41b8:	469a      	mov	sl, r3
    41ba:	4693      	mov	fp, r2
    41bc:	b158      	cbz	r0, 41d6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    41be:	7a02      	ldrb	r2, [r0, #8]
    41c0:	4542      	cmp	r2, r8
    41c2:	d903      	bls.n	41cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    41c4:	6841      	ldr	r1, [r0, #4]
    41c6:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    41ca:	b140      	cbz	r0, 41de <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    41cc:	f243 0002 	movw	r0, #12290	; 0x3002
    41d0:	b005      	add	sp, #20
    41d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41d6:	21a5      	movs	r1, #165	; 0xa5
    41d8:	2018      	movs	r0, #24
    41da:	f7ff fcd3 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41de:	4619      	mov	r1, r3
    41e0:	9802      	ldr	r0, [sp, #8]
    41e2:	f00b ff98 	bl	10116 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    41e6:	b287      	uxth	r7, r0
    41e8:	4658      	mov	r0, fp
    41ea:	990e      	ldr	r1, [sp, #56]	; 0x38
    41ec:	f00b ff8a 	bl	10104 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    41f0:	b286      	uxth	r6, r0
    41f2:	19b8      	adds	r0, r7, r6
    41f4:	1d00      	adds	r0, r0, #4
    41f6:	b285      	uxth	r5, r0
    41f8:	6820      	ldr	r0, [r4, #0]
    41fa:	46a1      	mov	r9, r4
    41fc:	4629      	mov	r1, r5
    41fe:	6800      	ldr	r0, [r0, #0]
    4200:	f00b fee0 	bl	ffc4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4204:	0004      	movs	r4, r0
    4206:	d01f      	beq.n	4248 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4208:	8065      	strh	r5, [r4, #2]
    420a:	8026      	strh	r6, [r4, #0]
    420c:	980e      	ldr	r0, [sp, #56]	; 0x38
    420e:	1d25      	adds	r5, r4, #4
    4210:	9000      	str	r0, [sp, #0]
    4212:	4631      	mov	r1, r6
    4214:	465a      	mov	r2, fp
    4216:	2301      	movs	r3, #1
    4218:	4628      	mov	r0, r5
    421a:	f00b fe0e 	bl	fe3a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    421e:	8820      	ldrh	r0, [r4, #0]
    4220:	4639      	mov	r1, r7
    4222:	4428      	add	r0, r5
    4224:	2301      	movs	r3, #1
    4226:	9a02      	ldr	r2, [sp, #8]
    4228:	f8cd a000 	str.w	sl, [sp]
    422c:	f00b fe05 	bl	fe3a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4230:	8820      	ldrh	r0, [r4, #0]
    4232:	1941      	adds	r1, r0, r5
    4234:	4628      	mov	r0, r5
    4236:	f00b fe36 	bl	fea6 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    423a:	f8d9 0000 	ldr.w	r0, [r9]
    423e:	6841      	ldr	r1, [r0, #4]
    4240:	2000      	movs	r0, #0
    4242:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4246:	e7c3      	b.n	41d0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4248:	2004      	movs	r0, #4
    424a:	e7c1      	b.n	41d0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    424c:	20000090 	.word	0x20000090

00004250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4250:	b570      	push	{r4, r5, r6, lr}
    4252:	4c14      	ldr	r4, [pc, #80]	; (42a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4254:	6823      	ldr	r3, [r4, #0]
    4256:	b18b      	cbz	r3, 427c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4258:	7a19      	ldrb	r1, [r3, #8]
    425a:	4281      	cmp	r1, r0
    425c:	d912      	bls.n	4284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    425e:	685a      	ldr	r2, [r3, #4]
    4260:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4264:	b171      	cbz	r1, 4284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4266:	2500      	movs	r5, #0
    4268:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    426c:	884a      	ldrh	r2, [r1, #2]
    426e:	6818      	ldr	r0, [r3, #0]
    4270:	f00b fef6 	bl	10060 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4274:	6821      	ldr	r1, [r4, #0]
    4276:	2000      	movs	r0, #0
    4278:	7a0a      	ldrb	r2, [r1, #8]
    427a:	e00c      	b.n	4296 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    427c:	21c8      	movs	r1, #200	; 0xc8
    427e:	2018      	movs	r0, #24
    4280:	f7ff fc80 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4284:	f243 0002 	movw	r0, #12290	; 0x3002
    4288:	bd70      	pop	{r4, r5, r6, pc}
    428a:	684b      	ldr	r3, [r1, #4]
    428c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4290:	b933      	cbnz	r3, 42a0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4292:	1c40      	adds	r0, r0, #1
    4294:	b2c0      	uxtb	r0, r0
    4296:	4282      	cmp	r2, r0
    4298:	d8f7      	bhi.n	428a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    429a:	6808      	ldr	r0, [r1, #0]
    429c:	f00b fed5 	bl	1004a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    42a0:	2000      	movs	r0, #0
    42a2:	bd70      	pop	{r4, r5, r6, pc}
    42a4:	20000090 	.word	0x20000090

000042a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    42a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42ac:	460d      	mov	r5, r1
    42ae:	0004      	movs	r4, r0
    42b0:	4690      	mov	r8, r2
    42b2:	f04f 0600 	mov.w	r6, #0
    42b6:	d009      	beq.n	42cc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    42b8:	2700      	movs	r7, #0
    42ba:	1ce0      	adds	r0, r4, #3
    42bc:	f020 0003 	bic.w	r0, r0, #3
    42c0:	42a0      	cmp	r0, r4
    42c2:	d005      	beq.n	42d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    42c4:	2186      	movs	r1, #134	; 0x86
    42c6:	2018      	movs	r0, #24
    42c8:	f7ff fc5c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42cc:	2701      	movs	r7, #1
    42ce:	e7f4      	b.n	42ba <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    42d0:	b1cd      	cbz	r5, 4306 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    42d2:	4611      	mov	r1, r2
    42d4:	2000      	movs	r0, #0
    42d6:	f00b fea2 	bl	1001e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    42da:	300c      	adds	r0, #12
    42dc:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    42e0:	b98f      	cbnz	r7, 4306 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    42e2:	4f0a      	ldr	r7, [pc, #40]	; (430c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    42e4:	f104 000c 	add.w	r0, r4, #12
    42e8:	00aa      	lsls	r2, r5, #2
    42ea:	603c      	str	r4, [r7, #0]
    42ec:	7225      	strb	r5, [r4, #8]
    42ee:	6060      	str	r0, [r4, #4]
    42f0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    42f4:	6020      	str	r0, [r4, #0]
    42f6:	2100      	movs	r1, #0
    42f8:	6860      	ldr	r0, [r4, #4]
    42fa:	f00a fdeb 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    42fe:	4641      	mov	r1, r8
    4300:	6838      	ldr	r0, [r7, #0]
    4302:	f00b fe8c 	bl	1001e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4306:	4630      	mov	r0, r6
    4308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    430c:	20000090 	.word	0x20000090

00004310 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4310:	b570      	push	{r4, r5, r6, lr}
    4312:	4d08      	ldr	r5, [pc, #32]	; (4334 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4314:	6828      	ldr	r0, [r5, #0]
    4316:	2800      	cmp	r0, #0
    4318:	d00a      	beq.n	4330 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    431a:	2400      	movs	r4, #0
    431c:	e004      	b.n	4328 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    431e:	4620      	mov	r0, r4
    4320:	f7ff ff96 	bl	4250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4324:	1c64      	adds	r4, r4, #1
    4326:	b2e4      	uxtb	r4, r4
    4328:	6828      	ldr	r0, [r5, #0]
    432a:	7a00      	ldrb	r0, [r0, #8]
    432c:	42a0      	cmp	r0, r4
    432e:	d8f6      	bhi.n	431e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4330:	bd70      	pop	{r4, r5, r6, pc}
    4332:	0000      	.short	0x0000
    4334:	20000090 	.word	0x20000090

00004338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4338:	4909      	ldr	r1, [pc, #36]	; (4360 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    433a:	b510      	push	{r4, lr}
    433c:	4602      	mov	r2, r0
    433e:	6809      	ldr	r1, [r1, #0]
    4340:	2000      	movs	r0, #0
    4342:	b149      	cbz	r1, 4358 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4344:	7a0b      	ldrb	r3, [r1, #8]
    4346:	4293      	cmp	r3, r2
    4348:	d905      	bls.n	4356 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    434a:	6849      	ldr	r1, [r1, #4]
    434c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4350:	2900      	cmp	r1, #0
    4352:	d000      	beq.n	4356 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4354:	1d08      	adds	r0, r1, #4
    4356:	bd10      	pop	{r4, pc}
    4358:	21ee      	movs	r1, #238	; 0xee
    435a:	2018      	movs	r0, #24
    435c:	f7ff fc12 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4360:	20000090 	.word	0x20000090

00004364 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4364:	490a      	ldr	r1, [pc, #40]	; (4390 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4366:	b510      	push	{r4, lr}
    4368:	4602      	mov	r2, r0
    436a:	6809      	ldr	r1, [r1, #0]
    436c:	2000      	movs	r0, #0
    436e:	b159      	cbz	r1, 4388 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4370:	7a0b      	ldrb	r3, [r1, #8]
    4372:	4293      	cmp	r3, r2
    4374:	d907      	bls.n	4386 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4376:	6849      	ldr	r1, [r1, #4]
    4378:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    437c:	2900      	cmp	r1, #0
    437e:	d002      	beq.n	4386 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4380:	f831 0b04 	ldrh.w	r0, [r1], #4
    4384:	4408      	add	r0, r1
    4386:	bd10      	pop	{r4, pc}
    4388:	21fc      	movs	r1, #252	; 0xfc
    438a:	2018      	movs	r0, #24
    438c:	f7ff fbfa 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4390:	20000090 	.word	0x20000090
    4394:	4909      	ldr	r1, [pc, #36]	; (43bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x58>)
    4396:	b510      	push	{r4, lr}
    4398:	4807      	ldr	r0, [pc, #28]	; (43b8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x54>)
    439a:	6008      	str	r0, [r1, #0]
    439c:	4b08      	ldr	r3, [pc, #32]	; (43c0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x5c>)
    439e:	2011      	movs	r0, #17
    43a0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    43a4:	2200      	movs	r2, #0
    43a6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    43aa:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    43ae:	1c40      	adds	r0, r0, #1
    43b0:	b2c0      	uxtb	r0, r0
    43b2:	2814      	cmp	r0, #20
    43b4:	d3f4      	bcc.n	43a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x3c>
    43b6:	bd10      	pop	{r4, pc}
    43b8:	fffe0000 	.word	0xfffe0000
    43bc:	4001f508 	.word	0x4001f508
    43c0:	4001f000 	.word	0x4001f000
    43c4:	b570      	push	{r4, r5, r6, lr}
    43c6:	2420      	movs	r4, #32
    43c8:	2100      	movs	r1, #0
    43ca:	2301      	movs	r3, #1
    43cc:	fa20 f201 	lsr.w	r2, r0, r1
    43d0:	07d2      	lsls	r2, r2, #31
    43d2:	d020      	beq.n	4416 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    43d4:	b24a      	sxtb	r2, r1
    43d6:	2a00      	cmp	r2, #0
    43d8:	db10      	blt.n	43fc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x98>
    43da:	bf00      	nop
    43dc:	ea4f 1652 	mov.w	r6, r2, lsr #5
    43e0:	ea4f 0686 	mov.w	r6, r6, lsl #2
    43e4:	f002 051f 	and.w	r5, r2, #31
    43e8:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    43ec:	fa03 f505 	lsl.w	r5, r3, r5
    43f0:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    43f4:	f3bf 8f4f 	dsb	sy
    43f8:	f3bf 8f6f 	isb	sy
    43fc:	db0b      	blt.n	4416 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xb2>
    43fe:	f002 051f 	and.w	r5, r2, #31
    4402:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4406:	ea4f 0282 	mov.w	r2, r2, lsl #2
    440a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    440e:	fa03 f505 	lsl.w	r5, r3, r5
    4412:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4416:	f101 0101 	add.w	r1, r1, #1
    441a:	42a1      	cmp	r1, r4
    441c:	d3d6      	bcc.n	43cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    441e:	bd70      	pop	{r4, r5, r6, pc}
    4420:	b570      	push	{r4, r5, r6, lr}
    4422:	0041      	lsls	r1, r0, #1
    4424:	f04f 0300 	mov.w	r3, #0
    4428:	d501      	bpl.n	442e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xca>
    442a:	491a      	ldr	r1, [pc, #104]	; (4494 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x130>)
    442c:	600b      	str	r3, [r1, #0]
    442e:	0484      	lsls	r4, r0, #18
    4430:	f04f 0101 	mov.w	r1, #1
    4434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4438:	d507      	bpl.n	444a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xe6>
    443a:	4c17      	ldr	r4, [pc, #92]	; (4498 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x134>)
    443c:	6061      	str	r1, [r4, #4]
    443e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    4442:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    4446:	4c15      	ldr	r4, [pc, #84]	; (449c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x138>)
    4448:	6023      	str	r3, [r4, #0]
    444a:	f3c0 3480 	ubfx	r4, r0, #14, #1
    444e:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    4452:	42ac      	cmp	r4, r5
    4454:	d003      	beq.n	445e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xfa>
    4456:	2172      	movs	r1, #114	; 0x72
    4458:	201b      	movs	r0, #27
    445a:	f7ff fb93 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    445e:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4462:	d012      	beq.n	448a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x126>
    4464:	480e      	ldr	r0, [pc, #56]	; (44a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x13c>)
    4466:	6041      	str	r1, [r0, #4]
    4468:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    446c:	480d      	ldr	r0, [pc, #52]	; (44a4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x140>)
    446e:	6081      	str	r1, [r0, #8]
    4470:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4474:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4478:	4c0b      	ldr	r4, [pc, #44]	; (44a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x144>)
    447a:	6023      	str	r3, [r4, #0]
    447c:	1d25      	adds	r5, r4, #4
    447e:	6029      	str	r1, [r5, #0]
    4480:	6081      	str	r1, [r0, #8]
    4482:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4486:	6023      	str	r3, [r4, #0]
    4488:	6029      	str	r1, [r5, #0]
    448a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    448e:	f7ff bf81 	b.w	4394 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4492:	0000      	.short	0x0000
    4494:	4001e504 	.word	0x4001e504
    4498:	4000d000 	.word	0x4000d000
    449c:	4000d504 	.word	0x4000d504
    44a0:	4000e000 	.word	0x4000e000
    44a4:	4000f000 	.word	0x4000f000
    44a8:	4000f500 	.word	0x4000f500

000044ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    44ac:	b570      	push	{r4, r5, r6, lr}
    44ae:	4c0b      	ldr	r4, [pc, #44]	; (44dc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x30>)
    44b0:	460d      	mov	r5, r1
    44b2:	6020      	str	r0, [r4, #0]
    44b4:	f7ff ffb4 	bl	4420 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xbc>
    44b8:	6820      	ldr	r0, [r4, #0]
    44ba:	f7ff ff83 	bl	43c4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x60>
    44be:	f000 f879 	bl	45b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    44c2:	f000 fb8d 	bl	4be0 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>
    44c6:	f7ff ff65 	bl	4394 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    44ca:	f00b fe71 	bl	101b0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    44ce:	4628      	mov	r0, r5
    44d0:	f000 f8aa 	bl	4628 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    44d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    44d8:	f000 baac 	b.w	4a34 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    44dc:	20000094 	.word	0x20000094

000044e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    44e0:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    44e4:	4e2f      	ldr	r6, [pc, #188]	; (45a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    44e6:	4683      	mov	fp, r0
    44e8:	6830      	ldr	r0, [r6, #0]
    44ea:	9001      	str	r0, [sp, #4]
    44ec:	2701      	movs	r7, #1
    44ee:	482e      	ldr	r0, [pc, #184]	; (45a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    44f0:	f00a fc56 	bl	eda0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    44f4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 45a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    44f8:	b920      	cbnz	r0, 4504 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    44fa:	2700      	movs	r7, #0
    44fc:	f108 0001 	add.w	r0, r8, #1
    4500:	f00a fc65 	bl	edce <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4504:	4c29      	ldr	r4, [pc, #164]	; (45ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    4506:	2500      	movs	r5, #0
    4508:	f04f 0903 	mov.w	r9, #3
    450c:	2001      	movs	r0, #1
    450e:	6060      	str	r0, [r4, #4]
    4510:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4514:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4518:	f8c6 b000 	str.w	fp, [r6]
    451c:	6020      	str	r0, [r4, #0]
    451e:	f8df a090 	ldr.w	sl, [pc, #144]	; 45b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    4522:	e017      	b.n	4554 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4524:	f8da 0000 	ldr.w	r0, [sl]
    4528:	06c0      	lsls	r0, r0, #27
    452a:	d513      	bpl.n	4554 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    452c:	200e      	movs	r0, #14
    452e:	f00b fdfb 	bl	10128 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4532:	f3ef 8010 	mrs	r0, PRIMASK
    4536:	9000      	str	r0, [sp, #0]
    4538:	b672      	cpsid	i
    453a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    453e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4542:	b920      	cbnz	r0, 454e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4544:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4548:	b908      	cbnz	r0, 454e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    454a:	f7ff f961 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    454e:	9800      	ldr	r0, [sp, #0]
    4550:	b900      	cbnz	r0, 4554 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4552:	b662      	cpsie	i
    4554:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4558:	b918      	cbnz	r0, 4562 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    455a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    455e:	2800      	cmp	r0, #0
    4560:	d0e0      	beq.n	4524 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4562:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4566:	2800      	cmp	r0, #0
    4568:	d1d0      	bne.n	450c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    456a:	b137      	cbz	r7, 457a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    456c:	9801      	ldr	r0, [sp, #4]
    456e:	6030      	str	r0, [r6, #0]
    4570:	f108 0001 	add.w	r0, r8, #1
    4574:	f00a fc14 	bl	eda0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4578:	e011      	b.n	459e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    457a:	f108 0001 	add.w	r0, r8, #1
    457e:	f00a fc0f 	bl	eda0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4582:	2800      	cmp	r0, #0
    4584:	d1ba      	bne.n	44fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4586:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    458a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    458e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4592:	200e      	movs	r0, #14
    4594:	f00b fdc8 	bl	10128 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4598:	4803      	ldr	r0, [pc, #12]	; (45a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    459a:	f00a fc18 	bl	edce <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    459e:	2000      	movs	r0, #0
    45a0:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    45a4:	4000e504 	.word	0x4000e504
    45a8:	200003ac 	.word	0x200003ac
    45ac:	4000e000 	.word	0x4000e000
    45b0:	e000ed10 	.word	0xe000ed10

000045b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    45b4:	b510      	push	{r4, lr}
    45b6:	4808      	ldr	r0, [pc, #32]	; (45d8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    45b8:	f00a fc05 	bl	edc6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    45bc:	b108      	cbz	r0, 45c2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    45be:	2124      	movs	r1, #36	; 0x24
    45c0:	e006      	b.n	45d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    45c2:	4805      	ldr	r0, [pc, #20]	; (45d8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    45c4:	1c40      	adds	r0, r0, #1
    45c6:	f00a fbfe 	bl	edc6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    45ca:	2800      	cmp	r0, #0
    45cc:	d003      	beq.n	45d6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    45ce:	2128      	movs	r1, #40	; 0x28
    45d0:	201d      	movs	r0, #29
    45d2:	f7ff fad7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45d6:	bd10      	pop	{r4, pc}
    45d8:	200003ac 	.word	0x200003ac

000045dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    45dc:	b570      	push	{r4, r5, r6, lr}
    45de:	4911      	ldr	r1, [pc, #68]	; (4624 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    45e0:	680a      	ldr	r2, [r1, #0]
    45e2:	b1ea      	cbz	r2, 4620 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    45e4:	2300      	movs	r3, #0
    45e6:	461d      	mov	r5, r3
    45e8:	2401      	movs	r4, #1
    45ea:	684a      	ldr	r2, [r1, #4]
    45ec:	1c52      	adds	r2, r2, #1
    45ee:	604a      	str	r2, [r1, #4]
    45f0:	2a09      	cmp	r2, #9
    45f2:	d300      	bcc.n	45f6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    45f4:	604d      	str	r5, [r1, #4]
    45f6:	790e      	ldrb	r6, [r1, #4]
    45f8:	fa04 f206 	lsl.w	r2, r4, r6
    45fc:	680e      	ldr	r6, [r1, #0]
    45fe:	4216      	tst	r6, r2
    4600:	d00b      	beq.n	461a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4602:	f3ef 8310 	mrs	r3, PRIMASK
    4606:	b672      	cpsid	i
    4608:	680c      	ldr	r4, [r1, #0]
    460a:	4394      	bics	r4, r2
    460c:	600c      	str	r4, [r1, #0]
    460e:	b903      	cbnz	r3, 4612 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4610:	b662      	cpsie	i
    4612:	6849      	ldr	r1, [r1, #4]
    4614:	6001      	str	r1, [r0, #0]
    4616:	2000      	movs	r0, #0
    4618:	bd70      	pop	{r4, r5, r6, pc}
    461a:	1c5b      	adds	r3, r3, #1
    461c:	2b09      	cmp	r3, #9
    461e:	d3e4      	bcc.n	45ea <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4620:	2005      	movs	r0, #5
    4622:	bd70      	pop	{r4, r5, r6, pc}
    4624:	20000098 	.word	0x20000098

00004628 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4628:	4802      	ldr	r0, [pc, #8]	; (4634 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    462a:	2100      	movs	r1, #0
    462c:	6001      	str	r1, [r0, #0]
    462e:	6041      	str	r1, [r0, #4]
    4630:	4770      	bx	lr
    4632:	0000      	.short	0x0000
    4634:	20000098 	.word	0x20000098

00004638 <sym_E7UQIKHCXDNZQUNY52BJSGQJOLHB5NYKZPMIGJY>:
    4638:	2101      	movs	r1, #1
    463a:	4081      	lsls	r1, r0
    463c:	4802      	ldr	r0, [pc, #8]	; (4648 <sym_E7UQIKHCXDNZQUNY52BJSGQJOLHB5NYKZPMIGJY+0x10>)
    463e:	6800      	ldr	r0, [r0, #0]
    4640:	4008      	ands	r0, r1
    4642:	d000      	beq.n	4646 <sym_E7UQIKHCXDNZQUNY52BJSGQJOLHB5NYKZPMIGJY+0xe>
    4644:	2001      	movs	r0, #1
    4646:	4770      	bx	lr
    4648:	20000098 	.word	0x20000098

0000464c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ>:
    464c:	f3ef 8110 	mrs	r1, PRIMASK
    4650:	b672      	cpsid	i
    4652:	2201      	movs	r2, #1
    4654:	4082      	lsls	r2, r0
    4656:	4804      	ldr	r0, [pc, #16]	; (4668 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1c>)
    4658:	6803      	ldr	r3, [r0, #0]
    465a:	431a      	orrs	r2, r3
    465c:	6002      	str	r2, [r0, #0]
    465e:	2900      	cmp	r1, #0
    4660:	d100      	bne.n	4664 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x18>
    4662:	b662      	cpsie	i
    4664:	4770      	bx	lr
    4666:	0000      	.short	0x0000
    4668:	20000098 	.word	0x20000098
    466c:	b570      	push	{r4, r5, r6, lr}
    466e:	4604      	mov	r4, r0
    4670:	f00a fbb8 	bl	ede4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4674:	4605      	mov	r5, r0
    4676:	f00a fbbf 	bl	edf8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    467a:	4305      	orrs	r5, r0
    467c:	f00a fbc6 	bl	ee0c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4680:	4305      	orrs	r5, r0
    4682:	f00a fc0d 	bl	eea0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4686:	4328      	orrs	r0, r5
    4688:	d005      	beq.n	4696 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x4a>
    468a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    468e:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
    4692:	b108      	cbz	r0, 4698 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x4c>
    4694:	2008      	movs	r0, #8
    4696:	bd70      	pop	{r4, r5, r6, pc}
    4698:	480c      	ldr	r0, [pc, #48]	; (46cc <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x80>)
    469a:	4b0d      	ldr	r3, [pc, #52]	; (46d0 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x84>)
    469c:	6801      	ldr	r1, [r0, #0]
    469e:	b134      	cbz	r4, 46ae <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x62>
    46a0:	791a      	ldrb	r2, [r3, #4]
    46a2:	f002 0201 	and.w	r2, r2, #1
    46a6:	4311      	orrs	r1, r2
    46a8:	6001      	str	r1, [r0, #0]
    46aa:	2000      	movs	r0, #0
    46ac:	bd70      	pop	{r4, r5, r6, pc}
    46ae:	f001 0101 	and.w	r1, r1, #1
    46b2:	6059      	str	r1, [r3, #4]
    46b4:	6803      	ldr	r3, [r0, #0]
    46b6:	f023 0301 	bic.w	r3, r3, #1
    46ba:	6003      	str	r3, [r0, #0]
    46bc:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
    46c0:	2a00      	cmp	r2, #0
    46c2:	d0f2      	beq.n	46aa <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x5e>
    46c4:	6802      	ldr	r2, [r0, #0]
    46c6:	430a      	orrs	r2, r1
    46c8:	6002      	str	r2, [r0, #0]
    46ca:	e7e3      	b.n	4694 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x48>
    46cc:	40000510 	.word	0x40000510
    46d0:	200000a0 	.word	0x200000a0
    46d4:	b510      	push	{r4, lr}
    46d6:	f7ff ffb9 	bl	464c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ>
    46da:	4803      	ldr	r0, [pc, #12]	; (46e8 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x9c>)
    46dc:	7800      	ldrb	r0, [r0, #0]
    46de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46e2:	f7ff b843 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    46e6:	0000      	.short	0x0000
    46e8:	200000a0 	.word	0x200000a0
    46ec:	b510      	push	{r4, lr}
    46ee:	4604      	mov	r4, r0
    46f0:	f00a fa8b 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    46f4:	4a0f      	ldr	r2, [pc, #60]	; (4734 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xe8>)
    46f6:	6090      	str	r0, [r2, #8]
    46f8:	7850      	ldrb	r0, [r2, #1]
    46fa:	2801      	cmp	r0, #1
    46fc:	d002      	beq.n	4704 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xb8>
    46fe:	f44f 71b2 	mov.w	r1, #356	; 0x164
    4702:	e013      	b.n	472c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xe0>
    4704:	490c      	ldr	r1, [pc, #48]	; (4738 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xec>)
    4706:	2001      	movs	r0, #1
    4708:	7008      	strb	r0, [r1, #0]
    470a:	2000      	movs	r0, #0
    470c:	72c8      	strb	r0, [r1, #11]
    470e:	8108      	strh	r0, [r1, #8]
    4710:	2004      	movs	r0, #4
    4712:	604c      	str	r4, [r1, #4]
    4714:	7288      	strb	r0, [r1, #10]
    4716:	4809      	ldr	r0, [pc, #36]	; (473c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xf0>)
    4718:	60c8      	str	r0, [r1, #12]
    471a:	2002      	movs	r0, #2
    471c:	7050      	strb	r0, [r2, #1]
    471e:	7890      	ldrb	r0, [r2, #2]
    4720:	f00b fd11 	bl	10146 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    4724:	2800      	cmp	r0, #0
    4726:	d104      	bne.n	4732 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xe6>
    4728:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    472c:	201f      	movs	r0, #31
    472e:	f7ff fa29 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4732:	bd10      	pop	{r4, pc}
    4734:	200000a0 	.word	0x200000a0
    4738:	20001114 	.word	0x20001114
    473c:	000c5c10 	.word	0x000c5c10
    4740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4744:	4605      	mov	r5, r0
    4746:	4617      	mov	r7, r2
    4748:	460c      	mov	r4, r1
    474a:	2000      	movs	r0, #0
    474c:	f7ff ff8e 	bl	466c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x20>
    4750:	0006      	movs	r6, r0
    4752:	d11a      	bne.n	478a <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x13e>
    4754:	4a0e      	ldr	r2, [pc, #56]	; (4790 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x144>)
    4756:	2001      	movs	r0, #1
    4758:	6010      	str	r0, [r2, #0]
    475a:	480e      	ldr	r0, [pc, #56]	; (4794 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x148>)
    475c:	6801      	ldr	r1, [r0, #0]
    475e:	2900      	cmp	r1, #0
    4760:	d0fc      	beq.n	475c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x110>
    4762:	2100      	movs	r1, #0
    4764:	e007      	b.n	4776 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x12a>
    4766:	6823      	ldr	r3, [r4, #0]
    4768:	602b      	str	r3, [r5, #0]
    476a:	6803      	ldr	r3, [r0, #0]
    476c:	2b00      	cmp	r3, #0
    476e:	d0fc      	beq.n	476a <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x11e>
    4770:	1c49      	adds	r1, r1, #1
    4772:	1d24      	adds	r4, r4, #4
    4774:	1d2d      	adds	r5, r5, #4
    4776:	42b9      	cmp	r1, r7
    4778:	d3f5      	bcc.n	4766 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x11a>
    477a:	2100      	movs	r1, #0
    477c:	6011      	str	r1, [r2, #0]
    477e:	6801      	ldr	r1, [r0, #0]
    4780:	2900      	cmp	r1, #0
    4782:	d0fc      	beq.n	477e <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x132>
    4784:	2001      	movs	r0, #1
    4786:	f7ff ff71 	bl	466c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x20>
    478a:	4630      	mov	r0, r6
    478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4790:	4001e504 	.word	0x4001e504
    4794:	4001e400 	.word	0x4001e400
    4798:	b570      	push	{r4, r5, r6, lr}
    479a:	4c32      	ldr	r4, [pc, #200]	; (4864 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x218>)
    479c:	78a2      	ldrb	r2, [r4, #2]
    479e:	4290      	cmp	r0, r2
    47a0:	d002      	beq.n	47a8 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x15c>
    47a2:	f240 110b 	movw	r1, #267	; 0x10b
    47a6:	e04c      	b.n	4842 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1f6>
    47a8:	482e      	ldr	r0, [pc, #184]	; (4864 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x218>)
    47aa:	4d2f      	ldr	r5, [pc, #188]	; (4868 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x21c>)
    47ac:	2908      	cmp	r1, #8
    47ae:	7840      	ldrb	r0, [r0, #1]
    47b0:	d255      	bcs.n	485e <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x212>
    47b2:	e8df f001 	tbb	[pc, r1]
    47b6:	0454      	.short	0x0454
    47b8:	54543223 	.word	0x54543223
    47bc:	3e54      	.short	0x3e54
    47be:	2802      	cmp	r0, #2
    47c0:	d002      	beq.n	47c8 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x17c>
    47c2:	f240 110f 	movw	r1, #271	; 0x10f
    47c6:	e03c      	b.n	4842 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1f6>
    47c8:	2003      	movs	r0, #3
    47ca:	7060      	strb	r0, [r4, #1]
    47cc:	4825      	ldr	r0, [pc, #148]	; (4864 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x218>)
    47ce:	78e1      	ldrb	r1, [r4, #3]
    47d0:	2506      	movs	r5, #6
    47d2:	2605      	movs	r6, #5
    47d4:	68c0      	ldr	r0, [r0, #12]
    47d6:	2901      	cmp	r1, #1
    47d8:	d001      	beq.n	47de <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x192>
    47da:	b119      	cbz	r1, 47e4 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x198>
    47dc:	e00a      	b.n	47f4 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1a8>
    47de:	f00b fcb4 	bl	1014a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x8>
    47e2:	e003      	b.n	47ec <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1a0>
    47e4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    47e8:	f7ff ffaa 	bl	4740 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xf4>
    47ec:	b108      	cbz	r0, 47f2 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1a6>
    47ee:	7065      	strb	r5, [r4, #1]
    47f0:	e000      	b.n	47f4 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1a8>
    47f2:	7066      	strb	r6, [r4, #1]
    47f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47f8:	f7fd bdd4 	b.w	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    47fc:	f00a fa05 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    4800:	4601      	mov	r1, r0
    4802:	68a0      	ldr	r0, [r4, #8]
    4804:	f7fc fe3c 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    4808:	42a8      	cmp	r0, r5
    480a:	d202      	bcs.n	4812 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1c6>
    480c:	69a1      	ldr	r1, [r4, #24]
    480e:	2902      	cmp	r1, #2
    4810:	d30b      	bcc.n	482a <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1de>
    4812:	2003      	movs	r0, #3
    4814:	f7ff ff5e 	bl	46d4 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x88>
    4818:	e01d      	b.n	4856 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x20a>
    481a:	f00a f9f6 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    481e:	4601      	mov	r1, r0
    4820:	68a0      	ldr	r0, [r4, #8]
    4822:	f7fc fe2d 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    4826:	42a8      	cmp	r0, r5
    4828:	d2f3      	bcs.n	4812 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1c6>
    482a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    482e:	f000 b81d 	b.w	486c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x220>
    4832:	2802      	cmp	r0, #2
    4834:	d00a      	beq.n	484c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x200>
    4836:	2805      	cmp	r0, #5
    4838:	d006      	beq.n	4848 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1fc>
    483a:	2806      	cmp	r0, #6
    483c:	d006      	beq.n	484c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x200>
    483e:	f240 1153 	movw	r1, #339	; 0x153
    4842:	201f      	movs	r0, #31
    4844:	f7ff f99e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4848:	2002      	movs	r0, #2
    484a:	e000      	b.n	484e <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x202>
    484c:	2003      	movs	r0, #3
    484e:	f7ff ff41 	bl	46d4 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x88>
    4852:	2004      	movs	r0, #4
    4854:	7060      	strb	r0, [r4, #1]
    4856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    485a:	f000 b833 	b.w	48c4 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x278>
    485e:	f240 115d 	movw	r1, #349	; 0x15d
    4862:	e7ee      	b.n	4842 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x1f6>
    4864:	200000a0 	.word	0x200000a0
    4868:	000c5c10 	.word	0x000c5c10
    486c:	b570      	push	{r4, r5, r6, lr}
    486e:	4a13      	ldr	r2, [pc, #76]	; (48bc <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x270>)
    4870:	4911      	ldr	r1, [pc, #68]	; (48b8 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x26c>)
    4872:	7853      	ldrb	r3, [r2, #1]
    4874:	2b02      	cmp	r3, #2
    4876:	d001      	beq.n	487c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x230>
    4878:	21fd      	movs	r1, #253	; 0xfd
    487a:	e019      	b.n	48b0 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x264>
    487c:	4288      	cmp	r0, r1
    487e:	d301      	bcc.n	4884 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x238>
    4880:	21fe      	movs	r1, #254	; 0xfe
    4882:	e015      	b.n	48b0 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x264>
    4884:	6994      	ldr	r4, [r2, #24]
    4886:	4b0e      	ldr	r3, [pc, #56]	; (48c0 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x274>)
    4888:	2c01      	cmp	r4, #1
    488a:	d803      	bhi.n	4894 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x248>
    488c:	f247 5530 	movw	r5, #30000	; 0x7530
    4890:	42a8      	cmp	r0, r5
    4892:	dd01      	ble.n	4898 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x24c>
    4894:	2503      	movs	r5, #3
    4896:	729d      	strb	r5, [r3, #10]
    4898:	1c64      	adds	r4, r4, #1
    489a:	1a08      	subs	r0, r1, r0
    489c:	6194      	str	r4, [r2, #24]
    489e:	60d8      	str	r0, [r3, #12]
    48a0:	4907      	ldr	r1, [pc, #28]	; (48c0 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x274>)
    48a2:	7890      	ldrb	r0, [r2, #2]
    48a4:	f00b fc4f 	bl	10146 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x4>
    48a8:	2800      	cmp	r0, #0
    48aa:	d104      	bne.n	48b6 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x26a>
    48ac:	f44f 7183 	mov.w	r1, #262	; 0x106
    48b0:	201f      	movs	r0, #31
    48b2:	f7ff f967 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48b6:	bd70      	pop	{r4, r5, r6, pc}
    48b8:	000c5c10 	.word	0x000c5c10
    48bc:	200000a0 	.word	0x200000a0
    48c0:	20001114 	.word	0x20001114
    48c4:	b510      	push	{r4, lr}
    48c6:	4c06      	ldr	r4, [pc, #24]	; (48e0 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x294>)
    48c8:	78a0      	ldrb	r0, [r4, #2]
    48ca:	f7fd fc1f 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    48ce:	b110      	cbz	r0, 48d6 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x28a>
    48d0:	2000      	movs	r0, #0
    48d2:	7060      	strb	r0, [r4, #1]
    48d4:	bd10      	pop	{r4, pc}
    48d6:	219d      	movs	r1, #157	; 0x9d
    48d8:	201f      	movs	r0, #31
    48da:	f7ff f953 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48de:	0000      	.short	0x0000
    48e0:	200000a0 	.word	0x200000a0
    48e4:	b510      	push	{r4, lr}
    48e6:	4c0d      	ldr	r4, [pc, #52]	; (491c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x2d0>)
    48e8:	7860      	ldrb	r0, [r4, #1]
    48ea:	b938      	cbnz	r0, 48fc <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x2b0>
    48ec:	2002      	movs	r0, #2
    48ee:	f7ff fea3 	bl	4638 <sym_E7UQIKHCXDNZQUNY52BJSGQJOLHB5NYKZPMIGJY>
    48f2:	b918      	cbnz	r0, 48fc <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x2b0>
    48f4:	2003      	movs	r0, #3
    48f6:	f7ff fe9f 	bl	4638 <sym_E7UQIKHCXDNZQUNY52BJSGQJOLHB5NYKZPMIGJY>
    48fa:	b108      	cbz	r0, 4900 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x2b4>
    48fc:	2011      	movs	r0, #17
    48fe:	bd10      	pop	{r4, pc}
    4900:	4807      	ldr	r0, [pc, #28]	; (4920 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x2d4>)
    4902:	f7fd fd2d 	bl	2360 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4906:	70a0      	strb	r0, [r4, #2]
    4908:	2820      	cmp	r0, #32
    490a:	d004      	beq.n	4916 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x2ca>
    490c:	2001      	movs	r0, #1
    490e:	7060      	strb	r0, [r4, #1]
    4910:	2000      	movs	r0, #0
    4912:	61a0      	str	r0, [r4, #24]
    4914:	bd10      	pop	{r4, pc}
    4916:	2003      	movs	r0, #3
    4918:	bd10      	pop	{r4, pc}
    491a:	0000      	.short	0x0000
    491c:	200000a0 	.word	0x200000a0
    4920:	00004799 	.word	0x00004799

00004924 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY>:
    4924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4928:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 49fc <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0xd8>
    492c:	4605      	mov	r5, r0
    492e:	4614      	mov	r4, r2
    4930:	f899 0000 	ldrb.w	r0, [r9]
    4934:	460e      	mov	r6, r1
    4936:	28ff      	cmp	r0, #255	; 0xff
    4938:	d00a      	beq.n	4950 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x2c>
    493a:	b134      	cbz	r4, 494a <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x26>
    493c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
    4940:	f8d8 0010 	ldr.w	r0, [r8, #16]
    4944:	0880      	lsrs	r0, r0, #2
    4946:	42a0      	cmp	r0, r4
    4948:	d207      	bcs.n	495a <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x36>
    494a:	2009      	movs	r0, #9
    494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4950:	f240 11a3 	movw	r1, #419	; 0x1a3
    4954:	201f      	movs	r0, #31
    4956:	f7ff f915 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    495a:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    495e:	4628      	mov	r0, r5
    4960:	1f3f      	subs	r7, r7, #4
    4962:	f00b fc61 	bl	10228 <sym_7CQPRIENPSEG44TGL6Z3BVGO7DIMXJIZVLL4DWI>
    4966:	b9e8      	cbnz	r0, 49a4 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x80>
    4968:	42af      	cmp	r7, r5
    496a:	d31b      	bcc.n	49a4 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x80>
    496c:	f8d8 0014 	ldr.w	r0, [r8, #20]
    4970:	f8d8 1010 	ldr.w	r1, [r8, #16]
    4974:	4348      	muls	r0, r1
    4976:	4285      	cmp	r5, r0
    4978:	d205      	bcs.n	4986 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x62>
    497a:	4287      	cmp	r7, r0
    497c:	d203      	bcs.n	4986 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x62>
    497e:	ea45 0006 	orr.w	r0, r5, r6
    4982:	0780      	lsls	r0, r0, #30
    4984:	d001      	beq.n	498a <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x66>
    4986:	2010      	movs	r0, #16
    4988:	e7e0      	b.n	494c <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x28>
    498a:	eb06 0084 	add.w	r0, r6, r4, lsl #2
    498e:	1f00      	subs	r0, r0, #4
    4990:	42b0      	cmp	r0, r6
    4992:	d201      	bcs.n	4998 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x74>
    4994:	2701      	movs	r7, #1
    4996:	e000      	b.n	499a <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x76>
    4998:	2700      	movs	r7, #0
    499a:	4630      	mov	r0, r6
    499c:	f00b fc44 	bl	10228 <sym_7CQPRIENPSEG44TGL6Z3BVGO7DIMXJIZVLL4DWI>
    49a0:	b900      	cbnz	r0, 49a4 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x80>
    49a2:	b10f      	cbz	r7, 49a8 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x84>
    49a4:	200f      	movs	r0, #15
    49a6:	e7d1      	b.n	494c <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x28>
    49a8:	4815      	ldr	r0, [pc, #84]	; (4a00 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0xdc>)
    49aa:	4916      	ldr	r1, [pc, #88]	; (4a04 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0xe0>)
    49ac:	6800      	ldr	r0, [r0, #0]
    49ae:	4288      	cmp	r0, r1
    49b0:	d006      	beq.n	49c0 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x9c>
    49b2:	4622      	mov	r2, r4
    49b4:	4631      	mov	r1, r6
    49b6:	4628      	mov	r0, r5
    49b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49bc:	f7ff bec0 	b.w	4740 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xf4>
    49c0:	f7ff ff90 	bl	48e4 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x298>
    49c4:	2800      	cmp	r0, #0
    49c6:	d1c1      	bne.n	494c <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x28>
    49c8:	f8c9 500c 	str.w	r5, [r9, #12]
    49cc:	e9c9 6404 	strd	r6, r4, [r9, #16]
    49d0:	2100      	movs	r1, #0
    49d2:	f889 1003 	strb.w	r1, [r9, #3]
    49d6:	f00a fa2d 	bl	ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    49da:	b108      	cbz	r0, 49e0 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0xbc>
    49dc:	480a      	ldr	r0, [pc, #40]	; (4a08 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0xe4>)
    49de:	e001      	b.n	49e4 <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0xc0>
    49e0:	f64a 10ec 	movw	r0, #43500	; 0xa9ec
    49e4:	4360      	muls	r0, r4
    49e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    49ea:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    49ee:	fbb0 f0f1 	udiv	r0, r0, r1
    49f2:	3018      	adds	r0, #24
    49f4:	f7ff fe7a 	bl	46ec <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xa0>
    49f8:	2000      	movs	r0, #0
    49fa:	e7a7      	b.n	494c <sym_GUOPDLX5R4S6NJ366BHBSIF5JQUFVHBAZBWBAWY+0x28>
    49fc:	200000a0 	.word	0x200000a0
    4a00:	20000078 	.word	0x20000078
    4a04:	cafebabe 	.word	0xcafebabe
    4a08:	00052a44 	.word	0x00052a44

00004a0c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4a0c:	b510      	push	{r4, lr}
    4a0e:	4c08      	ldr	r4, [pc, #32]	; (4a30 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4a10:	7861      	ldrb	r1, [r4, #1]
    4a12:	b109      	cbz	r1, 4a18 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4a14:	200f      	movs	r0, #15
    4a16:	bd10      	pop	{r4, pc}
    4a18:	f7fe fe8a 	bl	3730 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4a1c:	7020      	strb	r0, [r4, #0]
    4a1e:	28ff      	cmp	r0, #255	; 0xff
    4a20:	d001      	beq.n	4a26 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4a22:	2000      	movs	r0, #0
    4a24:	bd10      	pop	{r4, pc}
    4a26:	2172      	movs	r1, #114	; 0x72
    4a28:	201f      	movs	r0, #31
    4a2a:	f7ff f8ab 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a2e:	0000      	.short	0x0000
    4a30:	200000a0 	.word	0x200000a0

00004a34 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4a34:	4901      	ldr	r1, [pc, #4]	; (4a3c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4a36:	2000      	movs	r0, #0
    4a38:	7048      	strb	r0, [r1, #1]
    4a3a:	4770      	bx	lr
    4a3c:	200000a0 	.word	0x200000a0

00004a40 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA>:
    4a40:	b570      	push	{r4, r5, r6, lr}
    4a42:	4605      	mov	r5, r0
    4a44:	4812      	ldr	r0, [pc, #72]	; (4a90 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x50>)
    4a46:	4913      	ldr	r1, [pc, #76]	; (4a94 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x54>)
    4a48:	6800      	ldr	r0, [r0, #0]
    4a4a:	4288      	cmp	r0, r1
    4a4c:	d004      	beq.n	4a58 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x18>
    4a4e:	4628      	mov	r0, r5
    4a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4a54:	f00b bb79 	b.w	1014a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x8>
    4a58:	4c0f      	ldr	r4, [pc, #60]	; (4a98 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x58>)
    4a5a:	7820      	ldrb	r0, [r4, #0]
    4a5c:	28ff      	cmp	r0, #255	; 0xff
    4a5e:	d00b      	beq.n	4a78 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x38>
    4a60:	f7ff ff40 	bl	48e4 <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x298>
    4a64:	2800      	cmp	r0, #0
    4a66:	d111      	bne.n	4a8c <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x4c>
    4a68:	2001      	movs	r0, #1
    4a6a:	60e5      	str	r5, [r4, #12]
    4a6c:	70e0      	strb	r0, [r4, #3]
    4a6e:	f00a f9e1 	bl	ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4a72:	b130      	cbz	r0, 4a82 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x42>
    4a74:	4809      	ldr	r0, [pc, #36]	; (4a9c <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x5c>)
    4a76:	e005      	b.n	4a84 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x44>
    4a78:	f240 11e7 	movw	r1, #487	; 0x1e7
    4a7c:	201f      	movs	r0, #31
    4a7e:	f7ff f881 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a82:	4807      	ldr	r0, [pc, #28]	; (4aa0 <sym_HIVRDF4GGHOVYTK6W65ICGFKVFCBBR4KJ45BYIA+0x60>)
    4a84:	3018      	adds	r0, #24
    4a86:	f7ff fe31 	bl	46ec <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0xa0>
    4a8a:	2000      	movs	r0, #0
    4a8c:	bd70      	pop	{r4, r5, r6, pc}
    4a8e:	0000      	.short	0x0000
    4a90:	20000078 	.word	0x20000078
    4a94:	cafebabe 	.word	0xcafebabe
    4a98:	200000a0 	.word	0x200000a0
    4a9c:	00015e64 	.word	0x00015e64
    4aa0:	00015ba8 	.word	0x00015ba8

00004aa4 <sym_TQOU6M5FOJGYBQ73ADAMFJFBW345AJHKSTMZKNQ>:
    4aa4:	4a09      	ldr	r2, [pc, #36]	; (4acc <sym_TQOU6M5FOJGYBQ73ADAMFJFBW345AJHKSTMZKNQ+0x28>)
    4aa6:	2102      	movs	r1, #2
    4aa8:	6011      	str	r1, [r2, #0]
    4aaa:	4909      	ldr	r1, [pc, #36]	; (4ad0 <sym_TQOU6M5FOJGYBQ73ADAMFJFBW345AJHKSTMZKNQ+0x2c>)
    4aac:	680b      	ldr	r3, [r1, #0]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d0fc      	beq.n	4aac <sym_TQOU6M5FOJGYBQ73ADAMFJFBW345AJHKSTMZKNQ+0x8>
    4ab2:	4b06      	ldr	r3, [pc, #24]	; (4acc <sym_TQOU6M5FOJGYBQ73ADAMFJFBW345AJHKSTMZKNQ+0x28>)
    4ab4:	1d1b      	adds	r3, r3, #4
    4ab6:	6018      	str	r0, [r3, #0]
    4ab8:	6808      	ldr	r0, [r1, #0]
    4aba:	2800      	cmp	r0, #0
    4abc:	d0fc      	beq.n	4ab8 <sym_TQOU6M5FOJGYBQ73ADAMFJFBW345AJHKSTMZKNQ+0x14>
    4abe:	2000      	movs	r0, #0
    4ac0:	6010      	str	r0, [r2, #0]
    4ac2:	6808      	ldr	r0, [r1, #0]
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d0fc      	beq.n	4ac2 <sym_TQOU6M5FOJGYBQ73ADAMFJFBW345AJHKSTMZKNQ+0x1e>
    4ac8:	4770      	bx	lr
    4aca:	0000      	.short	0x0000
    4acc:	4001e504 	.word	0x4001e504
    4ad0:	4001e400 	.word	0x4001e400

00004ad4 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>:
    4ad4:	4906      	ldr	r1, [pc, #24]	; (4af0 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1c>)
    4ad6:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    4ada:	2801      	cmp	r0, #1
    4adc:	d107      	bne.n	4aee <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x1a>
    4ade:	4805      	ldr	r0, [pc, #20]	; (4af4 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I+0x20>)
    4ae0:	6800      	ldr	r0, [r0, #0]
    4ae2:	2200      	movs	r2, #0
    4ae4:	b2c0      	uxtb	r0, r0
    4ae6:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    4aea:	f000 b8e1 	b.w	4cb0 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>
    4aee:	4770      	bx	lr
    4af0:	4000d000 	.word	0x4000d000
    4af4:	4000d508 	.word	0x4000d508

00004af8 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>:
    4af8:	4901      	ldr	r1, [pc, #4]	; (4b00 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ+0x8>)
    4afa:	2001      	movs	r0, #1
    4afc:	6008      	str	r0, [r1, #0]
    4afe:	4770      	bx	lr
    4b00:	4000d504 	.word	0x4000d504

00004b04 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>:
    4b04:	b510      	push	{r4, lr}
    4b06:	4806      	ldr	r0, [pc, #24]	; (4b20 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x1c>)
    4b08:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    4b0c:	2900      	cmp	r1, #0
    4b0e:	d0fb      	beq.n	4b08 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI+0x4>
    4b10:	f7ff ffe0 	bl	4ad4 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>
    4b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b18:	200d      	movs	r0, #13
    4b1a:	f00b bb2b 	b.w	10174 <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY+0xc>
    4b1e:	0000      	.short	0x0000
    4b20:	4000d000 	.word	0x4000d000

00004b24 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>:
    4b24:	b570      	push	{r4, r5, r6, lr}
    4b26:	200d      	movs	r0, #13
    4b28:	f00b fb31 	bl	1018e <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY+0x26>
    4b2c:	4c08      	ldr	r4, [pc, #32]	; (4b50 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY+0x2c>)
    4b2e:	2000      	movs	r0, #0
    4b30:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4b34:	2501      	movs	r5, #1
    4b36:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    4b3a:	200d      	movs	r0, #13
    4b3c:	f00b fb1a 	bl	10174 <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY+0xc>
    4b40:	6025      	str	r5, [r4, #0]
    4b42:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4b46:	1460      	asrs	r0, r4, #17
    4b48:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    4b4c:	bd70      	pop	{r4, r5, r6, pc}
    4b4e:	0000      	.short	0x0000
    4b50:	4000d000 	.word	0x4000d000

00004b54 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>:
    4b54:	b510      	push	{r4, lr}
    4b56:	200d      	movs	r0, #13
    4b58:	f00b fb19 	bl	1018e <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY+0x26>
    4b5c:	4805      	ldr	r0, [pc, #20]	; (4b74 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x20>)
    4b5e:	2101      	movs	r1, #1
    4b60:	6041      	str	r1, [r0, #4]
    4b62:	2100      	movs	r1, #0
    4b64:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b6c:	200d      	movs	r0, #13
    4b6e:	f00b bb01 	b.w	10174 <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY+0xc>
    4b72:	0000      	.short	0x0000
    4b74:	4000d000 	.word	0x4000d000
    4b78:	b510      	push	{r4, lr}
    4b7a:	4805      	ldr	r0, [pc, #20]	; (4b90 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x3c>)
    4b7c:	f00a f910 	bl	eda0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4b80:	2800      	cmp	r0, #0
    4b82:	d103      	bne.n	4b8c <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x38>
    4b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b88:	f7ff bfcc 	b.w	4b24 <sym_EYIHOGBWBCMB5KSAAVLK6V2XC2PNYI4CUGUZRMY>
    4b8c:	bd10      	pop	{r4, pc}
    4b8e:	0000      	.short	0x0000
    4b90:	200000bc 	.word	0x200000bc
    4b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b98:	4615      	mov	r5, r2
    4b9a:	460e      	mov	r6, r1
    4b9c:	4604      	mov	r4, r0
    4b9e:	2700      	movs	r7, #0
    4ba0:	f00b fb20 	bl	101e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    4ba4:	42a8      	cmp	r0, r5
    4ba6:	d315      	bcc.n	4bd4 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x80>
    4ba8:	2300      	movs	r3, #0
    4baa:	2041      	movs	r0, #65	; 0x41
    4bac:	e00f      	b.n	4bce <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x7a>
    4bae:	bf00      	nop
    4bb0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    4bb4:	5ca2      	ldrb	r2, [r4, r2]
    4bb6:	54f2      	strb	r2, [r6, r3]
    4bb8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    4bbc:	1c49      	adds	r1, r1, #1
    4bbe:	fbb1 f2f0 	udiv	r2, r1, r0
    4bc2:	fb00 1112 	mls	r1, r0, r2, r1
    4bc6:	1c5b      	adds	r3, r3, #1
    4bc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    4bcc:	b2db      	uxtb	r3, r3
    4bce:	42ab      	cmp	r3, r5
    4bd0:	d3ee      	bcc.n	4bb0 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x5c>
    4bd2:	2701      	movs	r7, #1
    4bd4:	f7ff ffd0 	bl	4b78 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    4bd8:	4638      	mov	r0, r7
    4bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004be0 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA>:
    4be0:	490e      	ldr	r1, [pc, #56]	; (4c1c <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x3c>)
    4be2:	b510      	push	{r4, lr}
    4be4:	2000      	movs	r0, #0
    4be6:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4bea:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4bee:	3143      	adds	r1, #67	; 0x43
    4bf0:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4bf4:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4bf8:	3143      	adds	r1, #67	; 0x43
    4bfa:	f881 0042 	strb.w	r0, [r1, #66]	; 0x42
    4bfe:	f881 0041 	strb.w	r0, [r1, #65]	; 0x41
    4c02:	4807      	ldr	r0, [pc, #28]	; (4c20 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    4c04:	f00a f8df 	bl	edc6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4c08:	4805      	ldr	r0, [pc, #20]	; (4c20 <sym_4SVQMPT754VXN2AWYY6JE7KITHSHSLYTNUBSWZA+0x40>)
    4c0a:	1c40      	adds	r0, r0, #1
    4c0c:	f00a f8db 	bl	edc6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4c10:	f7ff ff72 	bl	4af8 <sym_ZXM7KZCJVXF5JQS53RSDXIJ4HMUIELSZ3E43YFQ>
    4c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c18:	f7ff bfae 	b.w	4b78 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x24>
    4c1c:	20001a00 	.word	0x20001a00
    4c20:	200000bc 	.word	0x200000bc

00004c24 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY>:
    4c24:	4801      	ldr	r0, [pc, #4]	; (4c2c <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY+0x8>)
    4c26:	f00b badd 	b.w	101e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    4c2a:	0000      	.short	0x0000
    4c2c:	20001a43 	.word	0x20001a43

00004c30 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>:
    4c30:	460a      	mov	r2, r1
    4c32:	4601      	mov	r1, r0
    4c34:	4801      	ldr	r0, [pc, #4]	; (4c3c <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y+0xc>)
    4c36:	f7ff bfad 	b.w	4b94 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    4c3a:	0000      	.short	0x0000
    4c3c:	20001a43 	.word	0x20001a43

00004c40 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>:
    4c40:	4801      	ldr	r0, [pc, #4]	; (4c48 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ+0x8>)
    4c42:	f00b bacf 	b.w	101e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x34>
    4c46:	0000      	.short	0x0000
    4c48:	20001a00 	.word	0x20001a00

00004c4c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>:
    4c4c:	460a      	mov	r2, r1
    4c4e:	4601      	mov	r1, r0
    4c50:	4801      	ldr	r0, [pc, #4]	; (4c58 <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI+0xc>)
    4c52:	f7ff bf9f 	b.w	4b94 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    4c56:	0000      	.short	0x0000
    4c58:	20001a00 	.word	0x20001a00

00004c5c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>:
    4c5c:	b570      	push	{r4, r5, r6, lr}
    4c5e:	460c      	mov	r4, r1
    4c60:	4606      	mov	r6, r0
    4c62:	2941      	cmp	r1, #65	; 0x41
    4c64:	d903      	bls.n	4c6e <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x12>
    4c66:	21fb      	movs	r1, #251	; 0xfb
    4c68:	2023      	movs	r0, #35	; 0x23
    4c6a:	f7fe ff8b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c6e:	480e      	ldr	r0, [pc, #56]	; (4ca8 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x4c>)
    4c70:	6800      	ldr	r0, [r0, #0]
    4c72:	3810      	subs	r0, #16
    4c74:	b240      	sxtb	r0, r0
    4c76:	f00b faa6 	bl	101c6 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    4c7a:	b2c5      	uxtb	r5, r0
    4c7c:	200d      	movs	r0, #13
    4c7e:	f00b faa2 	bl	101c6 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x16>
    4c82:	b2c0      	uxtb	r0, r0
    4c84:	4285      	cmp	r5, r0
    4c86:	d801      	bhi.n	4c8c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x30>
    4c88:	2501      	movs	r5, #1
    4c8a:	e004      	b.n	4c96 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4c8c:	2500      	movs	r5, #0
    4c8e:	e002      	b.n	4c96 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4c90:	b10d      	cbz	r5, 4c96 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x3a>
    4c92:	f7ff ff37 	bl	4b04 <sym_G37M6IIXFP43ACRKNNFX4CIGVJGGHQJ62ZJ5TTI>
    4c96:	4622      	mov	r2, r4
    4c98:	4631      	mov	r1, r6
    4c9a:	4804      	ldr	r0, [pc, #16]	; (4cac <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x50>)
    4c9c:	f7ff ff7a 	bl	4b94 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ+0x40>
    4ca0:	2800      	cmp	r0, #0
    4ca2:	d0f5      	beq.n	4c90 <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY+0x34>
    4ca4:	bd70      	pop	{r4, r5, r6, pc}
    4ca6:	0000      	.short	0x0000
    4ca8:	e000ed04 	.word	0xe000ed04
    4cac:	20001a00 	.word	0x20001a00

00004cb0 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y>:
    4cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cb4:	4f1f      	ldr	r7, [pc, #124]	; (4d34 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    4cb6:	4606      	mov	r6, r0
    4cb8:	2500      	movs	r5, #0
    4cba:	bf00      	nop
    4cbc:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
    4cc0:	4620      	mov	r0, r4
    4cc2:	f00b fa9b 	bl	101fc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4cc6:	b300      	cbz	r0, 4d0a <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x5a>
    4cc8:	1c6d      	adds	r5, r5, #1
    4cca:	b2ed      	uxtb	r5, r5
    4ccc:	2d03      	cmp	r5, #3
    4cce:	d3f5      	bcc.n	4cbc <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0xc>
    4cd0:	4819      	ldr	r0, [pc, #100]	; (4d38 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4cd2:	f00b fa93 	bl	101fc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4cd6:	2800      	cmp	r0, #0
    4cd8:	d02a      	beq.n	4d30 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4cda:	4817      	ldr	r0, [pc, #92]	; (4d38 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4cdc:	3843      	subs	r0, #67	; 0x43
    4cde:	f00b fa8d 	bl	101fc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d024      	beq.n	4d30 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4ce6:	4814      	ldr	r0, [pc, #80]	; (4d38 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x88>)
    4ce8:	3043      	adds	r0, #67	; 0x43
    4cea:	f00b fa87 	bl	101fc <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x4c>
    4cee:	2800      	cmp	r0, #0
    4cf0:	d01e      	beq.n	4d30 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x80>
    4cf2:	f7ff ff2f 	bl	4b54 <sym_VOWAB7CX7QR3QZO4BOMEFRG3OQVIEDUOTXDSIZQ>
    4cf6:	480f      	ldr	r0, [pc, #60]	; (4d34 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    4cf8:	1f00      	subs	r0, r0, #4
    4cfa:	f00a f851 	bl	eda0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4cfe:	3023      	adds	r0, #35	; 0x23
    4d00:	d010      	beq.n	4d24 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x74>
    4d02:	21b3      	movs	r1, #179	; 0xb3
    4d04:	2023      	movs	r0, #35	; 0x23
    4d06:	f7fe ff3d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d0a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    4d0e:	2141      	movs	r1, #65	; 0x41
    4d10:	5426      	strb	r6, [r4, r0]
    4d12:	f814 0f41 	ldrb.w	r0, [r4, #65]!
    4d16:	1c40      	adds	r0, r0, #1
    4d18:	fbb0 f2f1 	udiv	r2, r0, r1
    4d1c:	fb01 0012 	mls	r0, r1, r2, r0
    4d20:	7020      	strb	r0, [r4, #0]
    4d22:	e7d5      	b.n	4cd0 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x20>
    4d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d28:	4802      	ldr	r0, [pc, #8]	; (4d34 <sym_UW7UHI7YXZEM7ILBVUNOPL56EYZPKQPCGAGT25Y+0x84>)
    4d2a:	1f00      	subs	r0, r0, #4
    4d2c:	f00a b84f 	b.w	edce <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d34:	200000c0 	.word	0x200000c0
    4d38:	20001a43 	.word	0x20001a43

00004d3c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    4d3c:	4905      	ldr	r1, [pc, #20]	; (4d54 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    4d3e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4d40:	4282      	cmp	r2, r0
    4d42:	bf18      	it	ne
    4d44:	4770      	bxne	lr
    4d46:	2000      	movs	r0, #0
    4d48:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4d4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4d50:	8488      	strh	r0, [r1, #36]	; 0x24
    4d52:	4770      	bx	lr
    4d54:	20001990 	.word	0x20001990

00004d58 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4d58:	4806      	ldr	r0, [pc, #24]	; (4d74 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4d5a:	4a07      	ldr	r2, [pc, #28]	; (4d78 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4d5c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4d5e:	8852      	ldrh	r2, [r2, #2]
    4d60:	4291      	cmp	r1, r2
    4d62:	d105      	bne.n	4d70 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    4d64:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4d68:	2800      	cmp	r0, #0
    4d6a:	bf1c      	itt	ne
    4d6c:	2000      	movne	r0, #0
    4d6e:	4770      	bxne	lr
    4d70:	2001      	movs	r0, #1
    4d72:	4770      	bx	lr
    4d74:	20001990 	.word	0x20001990
    4d78:	20000398 	.word	0x20000398

00004d7c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4d7c:	4901      	ldr	r1, [pc, #4]	; (4d84 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4d7e:	8048      	strh	r0, [r1, #2]
    4d80:	4770      	bx	lr
    4d82:	0000      	.short	0x0000
    4d84:	20000398 	.word	0x20000398

00004d88 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4d88:	4808      	ldr	r0, [pc, #32]	; (4dac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4d8a:	4a09      	ldr	r2, [pc, #36]	; (4db0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4d8c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4d8e:	8852      	ldrh	r2, [r2, #2]
    4d90:	4291      	cmp	r1, r2
    4d92:	d109      	bne.n	4da8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4d94:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4d98:	8481      	strh	r1, [r0, #36]	; 0x24
    4d9a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4d9e:	b119      	cbz	r1, 4da8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4da0:	2100      	movs	r1, #0
    4da2:	7001      	strb	r1, [r0, #0]
    4da4:	2001      	movs	r0, #1
    4da6:	4770      	bx	lr
    4da8:	2000      	movs	r0, #0
    4daa:	4770      	bx	lr
    4dac:	20001990 	.word	0x20001990
    4db0:	20000398 	.word	0x20000398

00004db4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4db4:	4907      	ldr	r1, [pc, #28]	; (4dd4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4db6:	f101 0022 	add.w	r0, r1, #34	; 0x22
    4dba:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4dbe:	2a01      	cmp	r2, #1
    4dc0:	bf04      	itt	eq
    4dc2:	2000      	moveq	r0, #0
    4dc4:	4770      	bxeq	lr
    4dc6:	2201      	movs	r2, #1
    4dc8:	7002      	strb	r2, [r0, #0]
    4dca:	4803      	ldr	r0, [pc, #12]	; (4dd8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4dcc:	8800      	ldrh	r0, [r0, #0]
    4dce:	8488      	strh	r0, [r1, #36]	; 0x24
    4dd0:	4610      	mov	r0, r2
    4dd2:	4770      	bx	lr
    4dd4:	20001990 	.word	0x20001990
    4dd8:	20000398 	.word	0x20000398

00004ddc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4ddc:	4907      	ldr	r1, [pc, #28]	; (4dfc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4dde:	4b08      	ldr	r3, [pc, #32]	; (4e00 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    4de0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4de2:	885b      	ldrh	r3, [r3, #2]
    4de4:	429a      	cmp	r2, r3
    4de6:	d106      	bne.n	4df6 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    4de8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4dec:	2a00      	cmp	r2, #0
    4dee:	bf1e      	ittt	ne
    4df0:	6001      	strne	r1, [r0, #0]
    4df2:	2001      	movne	r0, #1
    4df4:	4770      	bxne	lr
    4df6:	2000      	movs	r0, #0
    4df8:	4770      	bx	lr
    4dfa:	0000      	.short	0x0000
    4dfc:	20001990 	.word	0x20001990
    4e00:	20000398 	.word	0x20000398

00004e04 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4e04:	4909      	ldr	r1, [pc, #36]	; (4e2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4e06:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4e08:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4e0c:	3bff      	subs	r3, #255	; 0xff
    4e0e:	d003      	beq.n	4e18 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    4e10:	2100      	movs	r1, #0
    4e12:	6001      	str	r1, [r0, #0]
    4e14:	4608      	mov	r0, r1
    4e16:	4770      	bx	lr
    4e18:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4e1c:	4903      	ldr	r1, [pc, #12]	; (4e2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4e1e:	2a01      	cmp	r2, #1
    4e20:	bf1a      	itte	ne
    4e22:	6001      	strne	r1, [r0, #0]
    4e24:	2001      	movne	r0, #1
    4e26:	2000      	moveq	r0, #0
    4e28:	4770      	bx	lr
    4e2a:	0000      	.short	0x0000
    4e2c:	20001990 	.word	0x20001990

00004e30 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4e30:	4901      	ldr	r1, [pc, #4]	; (4e38 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4e32:	8008      	strh	r0, [r1, #0]
    4e34:	4770      	bx	lr
    4e36:	0000      	.short	0x0000
    4e38:	20000398 	.word	0x20000398

00004e3c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    4e3c:	4905      	ldr	r1, [pc, #20]	; (4e54 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
    4e3e:	2000      	movs	r0, #0
    4e40:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4e44:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4e48:	8488      	strh	r0, [r1, #36]	; 0x24
    4e4a:	4903      	ldr	r1, [pc, #12]	; (4e58 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
    4e4c:	8008      	strh	r0, [r1, #0]
    4e4e:	8048      	strh	r0, [r1, #2]
    4e50:	4770      	bx	lr
    4e52:	0000      	.short	0x0000
    4e54:	20001990 	.word	0x20001990
    4e58:	20000398 	.word	0x20000398

00004e5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4e5c:	4905      	ldr	r1, [pc, #20]	; (4e74 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4e5e:	2000      	movs	r0, #0
    4e60:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4e64:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4e68:	8488      	strh	r0, [r1, #36]	; 0x24
    4e6a:	4903      	ldr	r1, [pc, #12]	; (4e78 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4e6c:	8008      	strh	r0, [r1, #0]
    4e6e:	8048      	strh	r0, [r1, #2]
    4e70:	4770      	bx	lr
    4e72:	0000      	.short	0x0000
    4e74:	20001990 	.word	0x20001990
    4e78:	20000398 	.word	0x20000398

00004e7c <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>:
    4e7c:	4b0d      	ldr	r3, [pc, #52]	; (4eb4 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x38>)
    4e7e:	b169      	cbz	r1, 4e9c <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x20>
    4e80:	2901      	cmp	r1, #1
    4e82:	bf04      	itt	eq
    4e84:	7899      	ldrbeq	r1, [r3, #2]
    4e86:	4281      	cmpeq	r1, r0
    4e88:	d110      	bne.n	4eac <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    4e8a:	f8d3 000f 	ldr.w	r0, [r3, #15]
    4e8e:	6010      	str	r0, [r2, #0]
    4e90:	f8b3 0013 	ldrh.w	r0, [r3, #19]
    4e94:	8090      	strh	r0, [r2, #4]
    4e96:	f04f 0001 	mov.w	r0, #1
    4e9a:	4770      	bx	lr
    4e9c:	7858      	ldrb	r0, [r3, #1]
    4e9e:	b128      	cbz	r0, 4eac <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x30>
    4ea0:	f8d3 0003 	ldr.w	r0, [r3, #3]
    4ea4:	6010      	str	r0, [r2, #0]
    4ea6:	f8b3 0007 	ldrh.w	r0, [r3, #7]
    4eaa:	e7f3      	b.n	4e94 <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA+0x18>
    4eac:	f04f 0000 	mov.w	r0, #0
    4eb0:	4770      	bx	lr
    4eb2:	0000      	.short	0x0000
    4eb4:	200003ae 	.word	0x200003ae

00004eb8 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>:
    4eb8:	4a07      	ldr	r2, [pc, #28]	; (4ed8 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x20>)
    4eba:	b129      	cbz	r1, 4ec8 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x10>
    4ebc:	2901      	cmp	r1, #1
    4ebe:	bf04      	itt	eq
    4ec0:	7891      	ldrbeq	r1, [r2, #2]
    4ec2:	4281      	cmpeq	r1, r0
    4ec4:	d002      	beq.n	4ecc <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x14>
    4ec6:	e004      	b.n	4ed2 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4ec8:	7850      	ldrb	r0, [r2, #1]
    4eca:	b110      	cbz	r0, 4ed2 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI+0x1a>
    4ecc:	f04f 0001 	mov.w	r0, #1
    4ed0:	4770      	bx	lr
    4ed2:	f04f 0000 	mov.w	r0, #0
    4ed6:	4770      	bx	lr
    4ed8:	200003ae 	.word	0x200003ae

00004edc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4edc:	4a0c      	ldr	r2, [pc, #48]	; (4f10 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x34>)
    4ede:	b110      	cbz	r0, 4ee6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4ee0:	2801      	cmp	r0, #1
    4ee2:	d008      	beq.n	4ef6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x1a>
    4ee4:	e011      	b.n	4f0a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4ee6:	7850      	ldrb	r0, [r2, #1]
    4ee8:	b178      	cbz	r0, 4f0a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4eea:	f8d2 0003 	ldr.w	r0, [r2, #3]
    4eee:	6008      	str	r0, [r1, #0]
    4ef0:	f8b2 0007 	ldrh.w	r0, [r2, #7]
    4ef4:	e006      	b.n	4f04 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4ef6:	7810      	ldrb	r0, [r2, #0]
    4ef8:	b138      	cbz	r0, 4f0a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2e>
    4efa:	f8d2 0009 	ldr.w	r0, [r2, #9]
    4efe:	6008      	str	r0, [r1, #0]
    4f00:	f8b2 000d 	ldrh.w	r0, [r2, #13]
    4f04:	8088      	strh	r0, [r1, #4]
    4f06:	2001      	movs	r0, #1
    4f08:	4770      	bx	lr
    4f0a:	2000      	movs	r0, #0
    4f0c:	4770      	bx	lr
    4f0e:	0000      	.short	0x0000
    4f10:	200003ae 	.word	0x200003ae

00004f14 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    4f14:	4901      	ldr	r1, [pc, #4]	; (4f1c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY+0x8>)
    4f16:	20ff      	movs	r0, #255	; 0xff
    4f18:	7088      	strb	r0, [r1, #2]
    4f1a:	4770      	bx	lr
    4f1c:	200003ae 	.word	0x200003ae

00004f20 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4f20:	4a0a      	ldr	r2, [pc, #40]	; (4f4c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x2c>)
    4f22:	2301      	movs	r3, #1
    4f24:	b150      	cbz	r0, 4f3c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x1c>
    4f26:	2801      	cmp	r0, #1
    4f28:	bf18      	it	ne
    4f2a:	4770      	bxne	lr
    4f2c:	7013      	strb	r3, [r2, #0]
    4f2e:	6808      	ldr	r0, [r1, #0]
    4f30:	f8c2 0009 	str.w	r0, [r2, #9]
    4f34:	8888      	ldrh	r0, [r1, #4]
    4f36:	f8a2 000d 	strh.w	r0, [r2, #13]
    4f3a:	4770      	bx	lr
    4f3c:	7053      	strb	r3, [r2, #1]
    4f3e:	6808      	ldr	r0, [r1, #0]
    4f40:	f8c2 0003 	str.w	r0, [r2, #3]
    4f44:	8888      	ldrh	r0, [r1, #4]
    4f46:	f8a2 0007 	strh.w	r0, [r2, #7]
    4f4a:	4770      	bx	lr
    4f4c:	200003ae 	.word	0x200003ae

00004f50 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4f50:	4906      	ldr	r1, [pc, #24]	; (4f6c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4f52:	b110      	cbz	r0, 4f5a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4f54:	2801      	cmp	r0, #1
    4f56:	d003      	beq.n	4f60 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4f58:	e006      	b.n	4f68 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4f5a:	7848      	ldrb	r0, [r1, #1]
    4f5c:	b910      	cbnz	r0, 4f64 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    4f5e:	e003      	b.n	4f68 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4f60:	7808      	ldrb	r0, [r1, #0]
    4f62:	b108      	cbz	r0, 4f68 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    4f64:	2001      	movs	r0, #1
    4f66:	4770      	bx	lr
    4f68:	2000      	movs	r0, #0
    4f6a:	4770      	bx	lr
    4f6c:	200003ae 	.word	0x200003ae

00004f70 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>:
    4f70:	4901      	ldr	r1, [pc, #4]	; (4f78 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ+0x8>)
    4f72:	2001      	movs	r0, #1
    4f74:	7148      	strb	r0, [r1, #5]
    4f76:	4770      	bx	lr
    4f78:	200000cc 	.word	0x200000cc

00004f7c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4f7c:	4901      	ldr	r1, [pc, #4]	; (4f84 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4f7e:	7448      	strb	r0, [r1, #17]
    4f80:	4770      	bx	lr
    4f82:	0000      	.short	0x0000
    4f84:	20000b6a 	.word	0x20000b6a

00004f88 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4f88:	4801      	ldr	r0, [pc, #4]	; (4f90 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4f8a:	78c0      	ldrb	r0, [r0, #3]
    4f8c:	4770      	bx	lr
    4f8e:	0000      	.short	0x0000
    4f90:	200000cc 	.word	0x200000cc

00004f94 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4f94:	4801      	ldr	r0, [pc, #4]	; (4f9c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4f96:	7900      	ldrb	r0, [r0, #4]
    4f98:	4770      	bx	lr
    4f9a:	0000      	.short	0x0000
    4f9c:	200000cc 	.word	0x200000cc

00004fa0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4fa0:	4910      	ldr	r1, [pc, #64]	; (4fe4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x44>)
    4fa2:	b430      	push	{r4, r5}
    4fa4:	7c4a      	ldrb	r2, [r1, #17]
    4fa6:	2a00      	cmp	r2, #0
    4fa8:	bf19      	ittee	ne
    4faa:	7c0a      	ldrbne	r2, [r1, #16]
    4fac:	2a00      	cmpne	r2, #0
    4fae:	2000      	moveq	r0, #0
    4fb0:	bc30      	popeq	{r4, r5}
    4fb2:	bf08      	it	eq
    4fb4:	4770      	bxeq	lr
    4fb6:	f04f 0200 	mov.w	r2, #0
    4fba:	f04f 0c1f 	mov.w	ip, #31
    4fbe:	4b0a      	ldr	r3, [pc, #40]	; (4fe8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>)
    4fc0:	740a      	strb	r2, [r1, #16]
    4fc2:	7042      	strb	r2, [r0, #1]
    4fc4:	f880 c000 	strb.w	ip, [r0]
    4fc8:	f8d3 415a 	ldr.w	r4, [r3, #346]	; 0x15a
    4fcc:	f8d3 515e 	ldr.w	r5, [r3, #350]	; 0x15e
    4fd0:	6044      	str	r4, [r0, #4]
    4fd2:	6085      	str	r5, [r0, #8]
    4fd4:	7c0c      	ldrb	r4, [r1, #16]
    4fd6:	2c00      	cmp	r4, #0
    4fd8:	d1f2      	bne.n	4fc0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x20>
    4fda:	bc30      	pop	{r4, r5}
    4fdc:	f04f 0001 	mov.w	r0, #1
    4fe0:	4770      	bx	lr
    4fe2:	0000      	.short	0x0000
    4fe4:	20000b6a 	.word	0x20000b6a
    4fe8:	20000a18 	.word	0x20000a18

00004fec <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4fec:	b570      	push	{r4, r5, r6, lr}
    4fee:	4c08      	ldr	r4, [pc, #32]	; (5010 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4ff0:	4606      	mov	r6, r0
    4ff2:	460d      	mov	r5, r1
    4ff4:	7820      	ldrb	r0, [r4, #0]
    4ff6:	b118      	cbz	r0, 5000 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    4ff8:	21ab      	movs	r1, #171	; 0xab
    4ffa:	2027      	movs	r0, #39	; 0x27
    4ffc:	f7fe fdc2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5000:	2101      	movs	r1, #1
    5002:	4804      	ldr	r0, [pc, #16]	; (5014 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    5004:	f00b fce2 	bl	109cc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5008:	7226      	strb	r6, [r4, #8]
    500a:	6325      	str	r5, [r4, #48]	; 0x30
    500c:	bd70      	pop	{r4, r5, r6, pc}
    500e:	0000      	.short	0x0000
    5010:	200000cc 	.word	0x200000cc
    5014:	20000b48 	.word	0x20000b48

00005018 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5018:	4901      	ldr	r1, [pc, #4]	; (5020 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    501a:	2001      	movs	r0, #1
    501c:	71c8      	strb	r0, [r1, #7]
    501e:	4770      	bx	lr
    5020:	200000cc 	.word	0x200000cc

00005024 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5028:	4d82      	ldr	r5, [pc, #520]	; (5234 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x210>)
    502a:	b085      	sub	sp, #20
    502c:	782c      	ldrb	r4, [r5, #0]
    502e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    5032:	2c00      	cmp	r4, #0
    5034:	d175      	bne.n	5122 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5036:	2a00      	cmp	r2, #0
    5038:	bf1c      	itt	ne
    503a:	2b00      	cmpne	r3, #0
    503c:	f1bc 0f00 	cmpne.w	ip, #0
    5040:	d06f      	beq.n	5122 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5042:	f8c5 c020 	str.w	ip, [r5, #32]
    5046:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    504a:	f04f 0000 	mov.w	r0, #0
    504e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    5052:	71e8      	strb	r0, [r5, #7]
    5054:	71a8      	strb	r0, [r5, #6]
    5056:	70e8      	strb	r0, [r5, #3]
    5058:	70a8      	strb	r0, [r5, #2]
    505a:	7128      	strb	r0, [r5, #4]
    505c:	7168      	strb	r0, [r5, #5]
    505e:	4f76      	ldr	r7, [pc, #472]	; (5238 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x214>)
    5060:	81e8      	strh	r0, [r5, #14]
    5062:	8228      	strh	r0, [r5, #16]
    5064:	6878      	ldr	r0, [r7, #4]
    5066:	f100 0678 	add.w	r6, r0, #120	; 0x78
    506a:	4604      	mov	r4, r0
    506c:	f008 fe84 	bl	dd78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5070:	f008 fa28 	bl	d4c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5074:	f994 006a 	ldrsb.w	r0, [r4, #106]	; 0x6a
    5078:	f008 ff16 	bl	dea8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    507c:	f104 0016 	add.w	r0, r4, #22
    5080:	f009 f9f4 	bl	e46c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5084:	f104 0012 	add.w	r0, r4, #18
    5088:	f009 f9e4 	bl	e454 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    508c:	7ef0      	ldrb	r0, [r6, #27]
    508e:	f009 fa3f 	bl	e510 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5092:	7838      	ldrb	r0, [r7, #0]
    5094:	f641 584c 	movw	r8, #7500	; 0x1d4c
    5098:	2800      	cmp	r0, #0
    509a:	d046      	beq.n	512a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x106>
    509c:	2004      	movs	r0, #4
    509e:	f7fe fc3b 	bl	3918 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    50a2:	6860      	ldr	r0, [r4, #4]
    50a4:	4540      	cmp	r0, r8
    50a6:	bf28      	it	cs
    50a8:	2096      	movcs	r0, #150	; 0x96
    50aa:	d203      	bcs.n	50b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x90>
    50ac:	2001      	movs	r0, #1
    50ae:	f009 f987 	bl	e3c0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    50b2:	204d      	movs	r0, #77	; 0x4d
    50b4:	f008 fdb2 	bl	dc1c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    50b8:	6878      	ldr	r0, [r7, #4]
    50ba:	f890 0180 	ldrb.w	r0, [r0, #384]	; 0x180
    50be:	2800      	cmp	r0, #0
    50c0:	bf18      	it	ne
    50c2:	f008 fda1 	blne	dc08 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    50c6:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    50ca:	2001      	movs	r0, #1
    50cc:	f008 fbba 	bl	d844 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    50d0:	2800      	cmp	r0, #0
    50d2:	bf04      	itt	eq
    50d4:	b005      	addeq	sp, #20
    50d6:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    50da:	7838      	ldrb	r0, [r7, #0]
    50dc:	2800      	cmp	r0, #0
    50de:	bf0c      	ite	eq
    50e0:	2003      	moveq	r0, #3
    50e2:	2001      	movne	r0, #1
    50e4:	f008 fdf8 	bl	dcd8 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    50e8:	4854      	ldr	r0, [pc, #336]	; (523c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x218>)
    50ea:	e890 100e 	ldmia.w	r0, {r1, r2, r3, ip}
    50ee:	e88d 100e 	stmia.w	sp, {r1, r2, r3, ip}
    50f2:	6900      	ldr	r0, [r0, #16]
    50f4:	9004      	str	r0, [sp, #16]
    50f6:	7838      	ldrb	r0, [r7, #0]
    50f8:	2800      	cmp	r0, #0
    50fa:	bf0c      	ite	eq
    50fc:	4850      	ldreq	r0, [pc, #320]	; (5240 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x21c>)
    50fe:	4851      	ldrne	r0, [pc, #324]	; (5244 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x220>)
    5100:	9004      	str	r0, [sp, #16]
    5102:	4668      	mov	r0, sp
    5104:	f008 fd04 	bl	db10 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5108:	8820      	ldrh	r0, [r4, #0]
    510a:	f7ff f92b 	bl	4364 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    510e:	6368      	str	r0, [r5, #52]	; 0x34
    5110:	8820      	ldrh	r0, [r4, #0]
    5112:	f7ff f911 	bl	4338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5116:	63a8      	str	r0, [r5, #56]	; 0x38
    5118:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    511c:	bb68      	cbnz	r0, 517a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    511e:	e01c      	b.n	515a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    5120:	e7ff      	b.n	5122 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5122:	21d3      	movs	r1, #211	; 0xd3
    5124:	2027      	movs	r0, #39	; 0x27
    5126:	f7fe fd2d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    512a:	2003      	movs	r0, #3
    512c:	f7fe fbf4 	bl	3918 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    5130:	6860      	ldr	r0, [r4, #4]
    5132:	4540      	cmp	r0, r8
    5134:	bf28      	it	cs
    5136:	2096      	movcs	r0, #150	; 0x96
    5138:	d203      	bcs.n	5142 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11e>
    513a:	2001      	movs	r0, #1
    513c:	f009 f940 	bl	e3c0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    5140:	204d      	movs	r0, #77	; 0x4d
    5142:	f008 fd6b 	bl	dc1c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    5146:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    514a:	2000      	movs	r0, #0
    514c:	f008 fb7a 	bl	d844 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5150:	2800      	cmp	r0, #0
    5152:	d1c2      	bne.n	50da <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb6>
    5154:	b005      	add	sp, #20
    5156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    515a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    515c:	b168      	cbz	r0, 517a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    515e:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
    5160:	8831      	ldrh	r1, [r6, #0]
    5162:	4288      	cmp	r0, r1
    5164:	d109      	bne.n	517a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    5166:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    516a:	2201      	movs	r2, #1
    516c:	4408      	add	r0, r1
    516e:	8570      	strh	r0, [r6, #42]	; 0x2a
    5170:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    5174:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    5176:	f7fd fa6f 	bl	2658 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    517a:	f106 0160 	add.w	r1, r6, #96	; 0x60
    517e:	4832      	ldr	r0, [pc, #200]	; (5248 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x224>)
    5180:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5184:	f500 7884 	add.w	r8, r0, #264	; 0x108
    5188:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    518c:	6f31      	ldr	r1, [r6, #112]	; 0x70
    518e:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
    5192:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5194:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
    5198:	20ff      	movs	r0, #255	; 0xff
    519a:	72a8      	strb	r0, [r5, #10]
    519c:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    51a0:	f896 9012 	ldrb.w	r9, [r6, #18]
    51a4:	f8b4 8038 	ldrh.w	r8, [r4, #56]	; 0x38
    51a8:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    51aa:	2908      	cmp	r1, #8
    51ac:	d01c      	beq.n	51e8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c4>
    51ae:	f00b f96a 	bl	10486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    51b2:	bf00      	nop
    51b4:	f1b9 0f00 	cmp.w	r9, #0
    51b8:	bf04      	itt	eq
    51ba:	1d00      	addeq	r0, r0, #4
    51bc:	b280      	uxtheq	r0, r0
    51be:	4580      	cmp	r8, r0
    51c0:	bf38      	it	cc
    51c2:	4640      	movcc	r0, r8
    51c4:	b2c0      	uxtb	r0, r0
    51c6:	7cb1      	ldrb	r1, [r6, #18]
    51c8:	2900      	cmp	r1, #0
    51ca:	bf18      	it	ne
    51cc:	2104      	movne	r1, #4
    51ce:	4408      	add	r0, r1
    51d0:	b2c0      	uxtb	r0, r0
    51d2:	7268      	strb	r0, [r5, #9]
    51d4:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
    51d8:	1d09      	adds	r1, r1, #4
    51da:	4281      	cmp	r1, r0
    51dc:	d208      	bcs.n	51f0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    51de:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    51e2:	2027      	movs	r0, #39	; 0x27
    51e4:	f7fe fcce 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51e8:	2104      	movs	r1, #4
    51ea:	f00b f94c 	bl	10486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    51ee:	e7e1      	b.n	51b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    51f0:	7838      	ldrb	r0, [r7, #0]
    51f2:	2800      	cmp	r0, #0
    51f4:	f04f 0001 	mov.w	r0, #1
    51f8:	d014      	beq.n	5224 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x200>
    51fa:	f000 fb4b 	bl	5894 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    51fe:	4813      	ldr	r0, [pc, #76]	; (524c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x228>)
    5200:	6800      	ldr	r0, [r0, #0]
    5202:	2803      	cmp	r0, #3
    5204:	bf18      	it	ne
    5206:	280b      	cmpne	r0, #11
    5208:	d00f      	beq.n	522a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x206>
    520a:	4d11      	ldr	r5, [pc, #68]	; (5250 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>)
    520c:	4628      	mov	r0, r5
    520e:	f00d f8fd 	bl	1240c <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>
    5212:	8830      	ldrh	r0, [r6, #0]
    5214:	8068      	strh	r0, [r5, #2]
    5216:	8820      	ldrh	r0, [r4, #0]
    5218:	8028      	strh	r0, [r5, #0]
    521a:	7ef0      	ldrb	r0, [r6, #27]
    521c:	7128      	strb	r0, [r5, #4]
    521e:	b005      	add	sp, #20
    5220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5224:	f000 fbc4 	bl	59b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>
    5228:	e7e9      	b.n	51fe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1da>
    522a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    522e:	2027      	movs	r0, #39	; 0x27
    5230:	f7fe fca8 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5234:	200000cc 	.word	0x200000cc
    5238:	20000108 	.word	0x20000108
    523c:	00005c7c 	.word	0x00005c7c
    5240:	0000c1b9 	.word	0x0000c1b9
    5244:	0000906d 	.word	0x0000906d
    5248:	20000a18 	.word	0x20000a18
    524c:	40001550 	.word	0x40001550
    5250:	20000b6a 	.word	0x20000b6a

00005254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5258:	0006      	movs	r6, r0
    525a:	4847      	ldr	r0, [pc, #284]	; (5378 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x124>)
    525c:	4d47      	ldr	r5, [pc, #284]	; (537c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x128>)
    525e:	6840      	ldr	r0, [r0, #4]
    5260:	f100 0478 	add.w	r4, r0, #120	; 0x78
    5264:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5266:	f890 9001 	ldrb.w	r9, [r0, #1]
    526a:	bf18      	it	ne
    526c:	2e01      	cmpne	r6, #1
    526e:	d103      	bne.n	5278 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x24>
    5270:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5272:	f009 fef7 	bl	f064 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5276:	7068      	strb	r0, [r5, #1]
    5278:	7868      	ldrb	r0, [r5, #1]
    527a:	2700      	movs	r7, #0
    527c:	f04f 0801 	mov.w	r8, #1
    5280:	b150      	cbz	r0, 5298 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x44>
    5282:	2801      	cmp	r0, #1
    5284:	d030      	beq.n	52e8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5286:	2802      	cmp	r0, #2
    5288:	d056      	beq.n	5338 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe4>
    528a:	2803      	cmp	r0, #3
    528c:	d068      	beq.n	5360 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x10c>
    528e:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5292:	2027      	movs	r0, #39	; 0x27
    5294:	f7fe fc76 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5298:	2e01      	cmp	r6, #1
    529a:	d012      	beq.n	52c2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6e>
    529c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    529e:	2800      	cmp	r0, #0
    52a0:	d045      	beq.n	532e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    52a2:	89a9      	ldrh	r1, [r5, #12]
    52a4:	1cca      	adds	r2, r1, #3
    52a6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    52a8:	f7fe fae2 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    52ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    52ae:	62a8      	str	r0, [r5, #40]	; 0x28
    52b0:	2201      	movs	r2, #1
    52b2:	4649      	mov	r1, r9
    52b4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    52b6:	f00a fba9 	bl	fa0c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    52ba:	2e02      	cmp	r6, #2
    52bc:	bf08      	it	eq
    52be:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52c2:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    52c6:	1c49      	adds	r1, r1, #1
    52c8:	f140 0000 	adc.w	r0, r0, #0
    52cc:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    52d0:	79e0      	ldrb	r0, [r4, #7]
    52d2:	2801      	cmp	r0, #1
    52d4:	d101      	bne.n	52da <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    52d6:	71e7      	strb	r7, [r4, #7]
    52d8:	e001      	b.n	52de <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    52da:	f884 8007 	strb.w	r8, [r4, #7]
    52de:	7a28      	ldrb	r0, [r5, #8]
    52e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52e4:	f7fe ba42 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    52e8:	2e01      	cmp	r6, #1
    52ea:	d011      	beq.n	5310 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>
    52ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    52ee:	b1f0      	cbz	r0, 532e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xda>
    52f0:	89a9      	ldrh	r1, [r5, #12]
    52f2:	1cca      	adds	r2, r1, #3
    52f4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    52f6:	f7fe fabb 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    52fa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    52fc:	62a8      	str	r0, [r5, #40]	; 0x28
    52fe:	2200      	movs	r2, #0
    5300:	4649      	mov	r1, r9
    5302:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    5304:	f00a fb82 	bl	fa0c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5308:	2e02      	cmp	r6, #2
    530a:	bf08      	it	eq
    530c:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5310:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
    5314:	1c41      	adds	r1, r0, #1
    5316:	f142 0000 	adc.w	r0, r2, #0
    531a:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    531e:	79e0      	ldrb	r0, [r4, #7]
    5320:	2801      	cmp	r0, #1
    5322:	bf0c      	ite	eq
    5324:	71e7      	strbeq	r7, [r4, #7]
    5326:	f884 8007 	strbne.w	r8, [r4, #7]
    532a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    532e:	f240 31f7 	movw	r1, #1015	; 0x3f7
    5332:	2027      	movs	r0, #39	; 0x27
    5334:	f7fe fc26 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5338:	2e01      	cmp	r6, #1
    533a:	d006      	beq.n	534a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xf6>
    533c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    533e:	f00a fe3a 	bl	ffb6 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5342:	2e02      	cmp	r6, #2
    5344:	bf08      	it	eq
    5346:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    534a:	e9d4 1016 	ldrd	r1, r0, [r4, #88]	; 0x58
    534e:	1c49      	adds	r1, r1, #1
    5350:	f140 0000 	adc.w	r0, r0, #0
    5354:	e9c4 1016 	strd	r1, r0, [r4, #88]	; 0x58
    5358:	79e0      	ldrb	r0, [r4, #7]
    535a:	2801      	cmp	r0, #1
    535c:	d1bd      	bne.n	52da <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x86>
    535e:	e7ba      	b.n	52d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x82>
    5360:	2e01      	cmp	r6, #1
    5362:	bf08      	it	eq
    5364:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5368:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    536a:	f00a fe24 	bl	ffb6 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    536e:	7a28      	ldrb	r0, [r5, #8]
    5370:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5374:	f7fe b9fa 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5378:	20000108 	.word	0x20000108
    537c:	200000cc 	.word	0x200000cc

00005380 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5380:	4802      	ldr	r0, [pc, #8]	; (538c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xc>)
    5382:	7800      	ldrb	r0, [r0, #0]
    5384:	2800      	cmp	r0, #0
    5386:	bf18      	it	ne
    5388:	200c      	movne	r0, #12
    538a:	4770      	bx	lr
    538c:	200000cc 	.word	0x200000cc

00005390 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5390:	4811      	ldr	r0, [pc, #68]	; (53d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>)
    5392:	b510      	push	{r4, lr}
    5394:	7801      	ldrb	r1, [r0, #0]
    5396:	b159      	cbz	r1, 53b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    5398:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    539c:	7800      	ldrb	r0, [r0, #0]
    539e:	780a      	ldrb	r2, [r1, #0]
    53a0:	b152      	cbz	r2, 53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28>
    53a2:	2802      	cmp	r0, #2
    53a4:	d010      	beq.n	53c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    53a6:	f240 1197 	movw	r1, #407	; 0x197
    53aa:	2027      	movs	r0, #39	; 0x27
    53ac:	f7fe fbea 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    53b4:	f000 ba12 	b.w	57dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    53b8:	2801      	cmp	r0, #1
    53ba:	bf08      	it	eq
    53bc:	bd10      	popeq	{r4, pc}
    53be:	f240 1193 	movw	r1, #403	; 0x193
    53c2:	2027      	movs	r0, #39	; 0x27
    53c4:	f7fe fbde 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53c8:	6848      	ldr	r0, [r1, #4]
    53ca:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    53ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    53d2:	f008 bba9 	b.w	db28 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    53d6:	0000      	.short	0x0000
    53d8:	200000cc 	.word	0x200000cc
    53dc:	b570      	push	{r4, r5, r6, lr}
    53de:	4c26      	ldr	r4, [pc, #152]	; (5478 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>)
    53e0:	4605      	mov	r5, r0
    53e2:	2900      	cmp	r1, #0
    53e4:	bf08      	it	eq
    53e6:	2d01      	cmpeq	r5, #1
    53e8:	d106      	bne.n	53f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>
    53ea:	78e0      	ldrb	r0, [r4, #3]
    53ec:	f100 0001 	add.w	r0, r0, #1
    53f0:	b2c0      	uxtb	r0, r0
    53f2:	70e0      	strb	r0, [r4, #3]
    53f4:	2801      	cmp	r0, #1
    53f6:	d83c      	bhi.n	5472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    53f8:	69e1      	ldr	r1, [r4, #28]
    53fa:	4628      	mov	r0, r5
    53fc:	4788      	blx	r1
    53fe:	2800      	cmp	r0, #0
    5400:	d037      	beq.n	5472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    5402:	7960      	ldrb	r0, [r4, #5]
    5404:	b148      	cbz	r0, 541a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a>
    5406:	2d01      	cmp	r5, #1
    5408:	d107      	bne.n	541a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a>
    540a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    540c:	7841      	ldrb	r1, [r0, #1]
    540e:	2900      	cmp	r1, #0
    5410:	bf04      	itt	eq
    5412:	7800      	ldrbeq	r0, [r0, #0]
    5414:	f010 0f10 	tsteq.w	r0, #16
    5418:	d02b      	beq.n	5472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    541a:	79a0      	ldrb	r0, [r4, #6]
    541c:	bb48      	cbnz	r0, 5472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    541e:	4817      	ldr	r0, [pc, #92]	; (547c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>)
    5420:	7801      	ldrb	r1, [r0, #0]
    5422:	2900      	cmp	r1, #0
    5424:	bf08      	it	eq
    5426:	2d01      	cmpeq	r5, #1
    5428:	d004      	beq.n	5434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa4>
    542a:	b101      	cbz	r1, 542e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9e>
    542c:	b115      	cbz	r5, 5434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa4>
    542e:	f04f 0000 	mov.w	r0, #0
    5432:	bd70      	pop	{r4, r5, r6, pc}
    5434:	4812      	ldr	r0, [pc, #72]	; (5480 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>)
    5436:	7801      	ldrb	r1, [r0, #0]
    5438:	f011 0f10 	tst.w	r1, #16
    543c:	d106      	bne.n	544c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbc>
    543e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5440:	7800      	ldrb	r0, [r0, #0]
    5442:	f010 0f10 	tst.w	r0, #16
    5446:	bf08      	it	eq
    5448:	2001      	moveq	r0, #1
    544a:	d001      	beq.n	5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc0>
    544c:	f04f 0000 	mov.w	r0, #0
    5450:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5452:	b932      	cbnz	r2, 5462 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd2>
    5454:	89a2      	ldrh	r2, [r4, #12]
    5456:	b122      	cbz	r2, 5462 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd2>
    5458:	f011 0f10 	tst.w	r1, #16
    545c:	bf08      	it	eq
    545e:	2101      	moveq	r1, #1
    5460:	d001      	beq.n	5466 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd6>
    5462:	f04f 0100 	mov.w	r1, #0
    5466:	89e2      	ldrh	r2, [r4, #14]
    5468:	ea40 0002 	orr.w	r0, r0, r2
    546c:	4308      	orrs	r0, r1
    546e:	bf08      	it	eq
    5470:	bd70      	popeq	{r4, r5, r6, pc}
    5472:	2001      	movs	r0, #1
    5474:	bd70      	pop	{r4, r5, r6, pc}
    5476:	0000      	.short	0x0000
    5478:	200000cc 	.word	0x200000cc
    547c:	20000108 	.word	0x20000108
    5480:	200000de 	.word	0x200000de
    5484:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5488:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 5730 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    548c:	2700      	movs	r7, #0
    548e:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    5492:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5496:	463d      	mov	r5, r7
    5498:	f100 0a78 	add.w	sl, r0, #120	; 0x78
    549c:	7820      	ldrb	r0, [r4, #0]
    549e:	2802      	cmp	r0, #2
    54a0:	d004      	beq.n	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    54a2:	f240 4149 	movw	r1, #1097	; 0x449
    54a6:	2027      	movs	r0, #39	; 0x27
    54a8:	f7fe fb6c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54ac:	7c20      	ldrb	r0, [r4, #16]
    54ae:	f010 0f40 	tst.w	r0, #64	; 0x40
    54b2:	d107      	bne.n	54c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    54b4:	2040      	movs	r0, #64	; 0x40
    54b6:	69a2      	ldr	r2, [r4, #24]
    54b8:	2100      	movs	r1, #0
    54ba:	4790      	blx	r2
    54bc:	8a20      	ldrh	r0, [r4, #16]
    54be:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    54c2:	8220      	strh	r0, [r4, #16]
    54c4:	9900      	ldr	r1, [sp, #0]
    54c6:	489b      	ldr	r0, [pc, #620]	; (5734 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>)
    54c8:	2900      	cmp	r1, #0
    54ca:	f000 8100 	beq.w	56ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    54ce:	7941      	ldrb	r1, [r0, #5]
    54d0:	1c49      	adds	r1, r1, #1
    54d2:	7141      	strb	r1, [r0, #5]
    54d4:	f89a 0012 	ldrb.w	r0, [sl, #18]
    54d8:	f008 f874 	bl	d5c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    54dc:	f008 f856 	bl	d58c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    54e0:	f04f 0901 	mov.w	r9, #1
    54e4:	b998      	cbnz	r0, 550e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    54e6:	f89a 0012 	ldrb.w	r0, [sl, #18]
    54ea:	b180      	cbz	r0, 550e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    54ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    54ee:	7841      	ldrb	r1, [r0, #1]
    54f0:	b169      	cbz	r1, 550e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    54f2:	7800      	ldrb	r0, [r0, #0]
    54f4:	f89a 1007 	ldrb.w	r1, [sl, #7]
    54f8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    54fc:	4288      	cmp	r0, r1
    54fe:	d106      	bne.n	550e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x17e>
    5500:	f884 9002 	strb.w	r9, [r4, #2]
    5504:	b002      	add	sp, #8
    5506:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    550a:	f000 b967 	b.w	57dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    550e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5510:	7841      	ldrb	r1, [r0, #1]
    5512:	81a1      	strh	r1, [r4, #12]
    5514:	2900      	cmp	r1, #0
    5516:	bf08      	it	eq
    5518:	62e7      	streq	r7, [r4, #44]	; 0x2c
    551a:	d003      	beq.n	5524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    551c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    551e:	f00a fd03 	bl	ff28 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5522:	62e0      	str	r0, [r4, #44]	; 0x2c
    5524:	8a20      	ldrh	r0, [r4, #16]
    5526:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    552a:	8220      	strh	r0, [r4, #16]
    552c:	70e7      	strb	r7, [r4, #3]
    552e:	f8d8 6004 	ldr.w	r6, [r8, #4]
    5532:	f106 0b78 	add.w	fp, r6, #120	; 0x78
    5536:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    553a:	2801      	cmp	r0, #1
    553c:	d11d      	bne.n	557a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    553e:	f008 ff45 	bl	e3cc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    5542:	4659      	mov	r1, fp
    5544:	4630      	mov	r0, r6
    5546:	f00b f877 	bl	10638 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    554a:	b1b0      	cbz	r0, 557a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    554c:	f898 0000 	ldrb.w	r0, [r8]
    5550:	2800      	cmp	r0, #0
    5552:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5556:	bf0c      	ite	eq
    5558:	f500 70a6 	addeq.w	r0, r0, #332	; 0x14c
    555c:	f500 7001 	addne.w	r0, r0, #516	; 0x204
    5560:	8831      	ldrh	r1, [r6, #0]
    5562:	8041      	strh	r1, [r0, #2]
    5564:	f89b 1008 	ldrb.w	r1, [fp, #8]
    5568:	7101      	strb	r1, [r0, #4]
    556a:	f89b 1009 	ldrb.w	r1, [fp, #9]
    556e:	7141      	strb	r1, [r0, #5]
    5570:	f880 9000 	strb.w	r9, [r0]
    5574:	7a20      	ldrb	r0, [r4, #8]
    5576:	f7fe f8f9 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    557a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    557c:	f89a 1006 	ldrb.w	r1, [sl, #6]
    5580:	7800      	ldrb	r0, [r0, #0]
    5582:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5586:	4288      	cmp	r0, r1
    5588:	d049      	beq.n	561e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    558a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    558e:	f100 0678 	add.w	r6, r0, #120	; 0x78
    5592:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    5596:	2800      	cmp	r0, #0
    5598:	d03d      	beq.n	5616 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    559a:	2802      	cmp	r0, #2
    559c:	d10e      	bne.n	55bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22c>
    559e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    55a0:	f00a fa00 	bl	f9a4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    55a4:	2800      	cmp	r0, #0
    55a6:	d055      	beq.n	5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    55a8:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    55ac:	1c49      	adds	r1, r1, #1
    55ae:	f140 0000 	adc.w	r0, r0, #0
    55b2:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    55b6:	7a20      	ldrb	r0, [r4, #8]
    55b8:	f7fe f8d8 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    55bc:	7177      	strb	r7, [r6, #5]
    55be:	f898 0000 	ldrb.w	r0, [r8]
    55c2:	2800      	cmp	r0, #0
    55c4:	bf1c      	itt	ne
    55c6:	7930      	ldrbne	r0, [r6, #4]
    55c8:	2800      	cmpne	r0, #0
    55ca:	d009      	beq.n	55e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x250>
    55cc:	7137      	strb	r7, [r6, #4]
    55ce:	89e2      	ldrh	r2, [r4, #14]
    55d0:	4639      	mov	r1, r7
    55d2:	f042 0210 	orr.w	r2, r2, #16
    55d6:	81e2      	strh	r2, [r4, #14]
    55d8:	69a2      	ldr	r2, [r4, #24]
    55da:	f04f 0010 	mov.w	r0, #16
    55de:	4790      	blx	r2
    55e0:	78f0      	ldrb	r0, [r6, #3]
    55e2:	b190      	cbz	r0, 560a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27a>
    55e4:	70f7      	strb	r7, [r6, #3]
    55e6:	f7ff fbcf 	bl	4d88 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    55ea:	b390      	cbz	r0, 5652 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c2>
    55ec:	89e2      	ldrh	r2, [r4, #14]
    55ee:	2008      	movs	r0, #8
    55f0:	f042 0208 	orr.w	r2, r2, #8
    55f4:	81e2      	strh	r2, [r4, #14]
    55f6:	69a2      	ldr	r2, [r4, #24]
    55f8:	2100      	movs	r1, #0
    55fa:	4790      	blx	r2
    55fc:	e9d6 1014 	ldrd	r1, r0, [r6, #80]	; 0x50
    5600:	1c49      	adds	r1, r1, #1
    5602:	f140 0000 	adc.w	r0, r0, #0
    5606:	e9c6 1014 	strd	r1, r0, [r6, #80]	; 0x50
    560a:	79b0      	ldrb	r0, [r6, #6]
    560c:	2801      	cmp	r0, #1
    560e:	bf0c      	ite	eq
    5610:	71b7      	strbeq	r7, [r6, #6]
    5612:	f886 9006 	strbne.w	r9, [r6, #6]
    5616:	8a20      	ldrh	r0, [r4, #16]
    5618:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    561c:	8220      	strh	r0, [r4, #16]
    561e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5620:	f89a 3007 	ldrb.w	r3, [sl, #7]
    5624:	7808      	ldrb	r0, [r1, #0]
    5626:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    562a:	429a      	cmp	r2, r3
    562c:	d148      	bne.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    562e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5632:	f000 0003 	and.w	r0, r0, #3
    5636:	f102 0678 	add.w	r6, r2, #120	; 0x78
    563a:	2801      	cmp	r0, #1
    563c:	bf18      	it	ne
    563e:	2802      	cmpne	r0, #2
    5640:	d027      	beq.n	5692 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    5642:	2803      	cmp	r0, #3
    5644:	bf1c      	itt	ne
    5646:	79a0      	ldrbne	r0, [r4, #6]
    5648:	f040 0004 	orrne.w	r0, r0, #4
    564c:	d00c      	beq.n	5668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    564e:	71a0      	strb	r0, [r4, #6]
    5650:	e036      	b.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    5652:	e004      	b.n	565e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ce>
    5654:	f240 314b 	movw	r1, #843	; 0x34b
    5658:	2027      	movs	r0, #39	; 0x27
    565a:	f7fe fa93 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    565e:	f240 3163 	movw	r1, #867	; 0x363
    5662:	2027      	movs	r0, #39	; 0x27
    5664:	f7fe fa8e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5668:	f886 9002 	strb.w	r9, [r6, #2]
    566c:	8a22      	ldrh	r2, [r4, #16]
    566e:	4648      	mov	r0, r9
    5670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5674:	8222      	strh	r2, [r4, #16]
    5676:	89e2      	ldrh	r2, [r4, #14]
    5678:	f042 0201 	orr.w	r2, r2, #1
    567c:	81e2      	strh	r2, [r4, #14]
    567e:	69a2      	ldr	r2, [r4, #24]
    5680:	4790      	blx	r2
    5682:	79f0      	ldrb	r0, [r6, #7]
    5684:	2801      	cmp	r0, #1
    5686:	d101      	bne.n	568c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    5688:	71f7      	strb	r7, [r6, #7]
    568a:	e019      	b.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    568c:	f886 9007 	strb.w	r9, [r6, #7]
    5690:	e016      	b.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    5692:	7848      	ldrb	r0, [r1, #1]
    5694:	b1b8      	cbz	r0, 56c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    5696:	8a21      	ldrh	r1, [r4, #16]
    5698:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    569c:	8221      	strh	r1, [r4, #16]
    569e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    56a0:	b171      	cbz	r1, 56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    56a2:	28fb      	cmp	r0, #251	; 0xfb
    56a4:	bf84      	itt	hi
    56a6:	79a0      	ldrbhi	r0, [r4, #6]
    56a8:	f040 0010 	orrhi.w	r0, r0, #16
    56ac:	d8cf      	bhi.n	564e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    56ae:	79e0      	ldrb	r0, [r4, #7]
    56b0:	2800      	cmp	r0, #0
    56b2:	bf08      	it	eq
    56b4:	464d      	moveq	r5, r9
    56b6:	d003      	beq.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    56b8:	2020      	movs	r0, #32
    56ba:	69a2      	ldr	r2, [r4, #24]
    56bc:	2100      	movs	r1, #0
    56be:	4790      	blx	r2
    56c0:	9801      	ldr	r0, [sp, #4]
    56c2:	b9b8      	cbnz	r0, 56f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
    56c4:	e011      	b.n	56ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    56c6:	79f0      	ldrb	r0, [r6, #7]
    56c8:	2801      	cmp	r0, #1
    56ca:	d1df      	bne.n	568c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    56cc:	e7dc      	b.n	5688 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    56ce:	7981      	ldrb	r1, [r0, #6]
    56d0:	1c49      	adds	r1, r1, #1
    56d2:	7181      	strb	r1, [r0, #6]
    56d4:	f89a 0012 	ldrb.w	r0, [sl, #18]
    56d8:	2800      	cmp	r0, #0
    56da:	bf18      	it	ne
    56dc:	f007 ff6c 	blne	d5b8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    56e0:	8a20      	ldrh	r0, [r4, #16]
    56e2:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    56e6:	8220      	strh	r0, [r4, #16]
    56e8:	e7ea      	b.n	56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    56ea:	2001      	movs	r0, #1
    56ec:	9900      	ldr	r1, [sp, #0]
    56ee:	f7ff fe75 	bl	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>
    56f2:	b148      	cbz	r0, 5708 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    56f4:	2d00      	cmp	r5, #0
    56f6:	bf1c      	itt	ne
    56f8:	2000      	movne	r0, #0
    56fa:	f7ff fdab 	blne	5254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    56fe:	b002      	add	sp, #8
    5700:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5704:	f000 b86a 	b.w	57dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5708:	2d00      	cmp	r5, #0
    570a:	bf1c      	itt	ne
    570c:	2001      	movne	r0, #1
    570e:	f7ff fda1 	blne	5254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5712:	2000      	movs	r0, #0
    5714:	f000 f94c 	bl	59b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>
    5718:	2d00      	cmp	r5, #0
    571a:	bf04      	itt	eq
    571c:	b002      	addeq	sp, #8
    571e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5722:	2002      	movs	r0, #2
    5724:	b002      	add	sp, #8
    5726:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    572a:	f7ff bd93 	b.w	5254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    572e:	0000      	.short	0x0000
    5730:	20000108 	.word	0x20000108
    5734:	20000b6a 	.word	0x20000b6a
    5738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    573c:	4e26      	ldr	r6, [pc, #152]	; (57d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    573e:	4681      	mov	r9, r0
    5740:	f1a6 053c 	sub.w	r5, r6, #60	; 0x3c
    5744:	6870      	ldr	r0, [r6, #4]
    5746:	4688      	mov	r8, r1
    5748:	f100 0478 	add.w	r4, r0, #120	; 0x78
    574c:	7828      	ldrb	r0, [r5, #0]
    574e:	2801      	cmp	r0, #1
    5750:	d004      	beq.n	575c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    5752:	f240 4106 	movw	r1, #1030	; 0x406
    5756:	2027      	movs	r0, #39	; 0x27
    5758:	f7fe fa14 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    575c:	78a0      	ldrb	r0, [r4, #2]
    575e:	2701      	movs	r7, #1
    5760:	b160      	cbz	r0, 577c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>
    5762:	2100      	movs	r1, #0
    5764:	70a1      	strb	r1, [r4, #2]
    5766:	89ea      	ldrh	r2, [r5, #14]
    5768:	2004      	movs	r0, #4
    576a:	f042 0204 	orr.w	r2, r2, #4
    576e:	81ea      	strh	r2, [r5, #14]
    5770:	69aa      	ldr	r2, [r5, #24]
    5772:	4790      	blx	r2
    5774:	7830      	ldrb	r0, [r6, #0]
    5776:	2800      	cmp	r0, #0
    5778:	bf18      	it	ne
    577a:	7127      	strbne	r7, [r4, #4]
    577c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    577e:	2603      	movs	r6, #3
    5780:	7808      	ldrb	r0, [r1, #0]
    5782:	ea36 0000 	bics.w	r0, r6, r0
    5786:	d10d      	bne.n	57a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5788:	7960      	ldrb	r0, [r4, #5]
    578a:	b998      	cbnz	r0, 57b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    578c:	89ea      	ldrh	r2, [r5, #14]
    578e:	2002      	movs	r0, #2
    5790:	f042 0202 	orr.w	r2, r2, #2
    5794:	81ea      	strh	r2, [r5, #14]
    5796:	69aa      	ldr	r2, [r5, #24]
    5798:	4790      	blx	r2
    579a:	6a68      	ldr	r0, [r5, #36]	; 0x24
    579c:	7800      	ldrb	r0, [r0, #0]
    579e:	ea36 0000 	bics.w	r0, r6, r0
    57a2:	d007      	beq.n	57b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>
    57a4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    57a6:	7840      	ldrb	r0, [r0, #1]
    57a8:	2800      	cmp	r0, #0
    57aa:	bf0e      	itee	eq
    57ac:	7167      	strbeq	r7, [r4, #5]
    57ae:	2002      	movne	r0, #2
    57b0:	7160      	strbne	r0, [r4, #5]
    57b2:	e000      	b.n	57b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    57b4:	7166      	strb	r6, [r4, #5]
    57b6:	ea38 0009 	bics.w	r0, r8, r9
    57ba:	d004      	beq.n	57c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x436>
    57bc:	2101      	movs	r1, #1
    57be:	2000      	movs	r0, #0
    57c0:	f7ff fe0c 	bl	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>
    57c4:	b118      	cbz	r0, 57ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x43e>
    57c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57ca:	f000 b807 	b.w	57dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    57ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57d2:	2000      	movs	r0, #0
    57d4:	f000 b85e 	b.w	5894 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    57d8:	20000108 	.word	0x20000108
    57dc:	b510      	push	{r4, lr}
    57de:	f007 ffbf 	bl	d760 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    57e2:	f007 fe6f 	bl	d4c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    57e6:	4818      	ldr	r0, [pc, #96]	; (5848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b8>)
    57e8:	6844      	ldr	r4, [r0, #4]
    57ea:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    57ee:	2801      	cmp	r0, #1
    57f0:	bf08      	it	eq
    57f2:	f008 fdeb 	bleq	e3cc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    57f6:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
    57fa:	b938      	cbnz	r0, 580c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>
    57fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    57fe:	b128      	cbz	r0, 580c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>
    5800:	2200      	movs	r2, #0
    5802:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
    5806:	4611      	mov	r1, r2
    5808:	f7fc ff26 	bl	2658 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    580c:	4c0f      	ldr	r4, [pc, #60]	; (584c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>)
    580e:	2100      	movs	r1, #0
    5810:	69a2      	ldr	r2, [r4, #24]
    5812:	8a20      	ldrh	r0, [r4, #16]
    5814:	4790      	blx	r2
    5816:	6a22      	ldr	r2, [r4, #32]
    5818:	79a1      	ldrb	r1, [r4, #6]
    581a:	78a0      	ldrb	r0, [r4, #2]
    581c:	4790      	blx	r2
    581e:	490c      	ldr	r1, [pc, #48]	; (5850 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    5820:	7c48      	ldrb	r0, [r1, #17]
    5822:	b170      	cbz	r0, 5842 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b2>
    5824:	f5a1 70a9 	sub.w	r0, r1, #338	; 0x152
    5828:	f8d0 2152 	ldr.w	r2, [r0, #338]	; 0x152
    582c:	f8d0 3156 	ldr.w	r3, [r0, #342]	; 0x156
    5830:	f8c0 215a 	str.w	r2, [r0, #346]	; 0x15a
    5834:	f8c0 315e 	str.w	r3, [r0, #350]	; 0x15e
    5838:	2001      	movs	r0, #1
    583a:	7408      	strb	r0, [r1, #16]
    583c:	7a20      	ldrb	r0, [r4, #8]
    583e:	f7fd ff95 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5842:	2000      	movs	r0, #0
    5844:	7020      	strb	r0, [r4, #0]
    5846:	bd10      	pop	{r4, pc}
    5848:	20000108 	.word	0x20000108
    584c:	200000cc 	.word	0x200000cc
    5850:	20000b6a 	.word	0x20000b6a
    5854:	4808      	ldr	r0, [pc, #32]	; (5878 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e8>)
    5856:	b510      	push	{r4, lr}
    5858:	7800      	ldrb	r0, [r0, #0]
    585a:	2802      	cmp	r0, #2
    585c:	d004      	beq.n	5868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    585e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    5862:	2027      	movs	r0, #39	; 0x27
    5864:	f7fe f98e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5868:	4904      	ldr	r1, [pc, #16]	; (587c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ec>)
    586a:	2001      	movs	r0, #1
    586c:	71c8      	strb	r0, [r1, #7]
    586e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5872:	f7ff bfb3 	b.w	57dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5876:	0000      	.short	0x0000
    5878:	200000cc 	.word	0x200000cc
    587c:	20000b6a 	.word	0x20000b6a
    5880:	4803      	ldr	r0, [pc, #12]	; (5890 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x500>)
    5882:	7800      	ldrb	r0, [r0, #0]
    5884:	2800      	cmp	r0, #0
    5886:	bf08      	it	eq
    5888:	4770      	bxeq	lr
    588a:	f7ff bfa7 	b.w	57dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    588e:	0000      	.short	0x0000
    5890:	200000cc 	.word	0x200000cc
    5894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5898:	f8df 8104 	ldr.w	r8, [pc, #260]	; 59a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>
    589c:	4606      	mov	r6, r0
    589e:	f8d8 4004 	ldr.w	r4, [r8, #4]
    58a2:	f104 0778 	add.w	r7, r4, #120	; 0x78
    58a6:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    58aa:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    58ac:	f894 908a 	ldrb.w	r9, [r4, #138]	; 0x8a
    58b0:	8f25      	ldrh	r5, [r4, #56]	; 0x38
    58b2:	2908      	cmp	r1, #8
    58b4:	d011      	beq.n	58da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    58b6:	f00a fde6 	bl	10486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    58ba:	bf00      	nop
    58bc:	f1b9 0f00 	cmp.w	r9, #0
    58c0:	bf04      	itt	eq
    58c2:	1d00      	addeq	r0, r0, #4
    58c4:	b280      	uxtheq	r0, r0
    58c6:	4285      	cmp	r5, r0
    58c8:	bf38      	it	cc
    58ca:	4628      	movcc	r0, r5
    58cc:	f000 09ff 	and.w	r9, r0, #255	; 0xff
    58d0:	4d34      	ldr	r5, [pc, #208]	; (59a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>)
    58d2:	6b28      	ldr	r0, [r5, #48]	; 0x30
    58d4:	62a8      	str	r0, [r5, #40]	; 0x28
    58d6:	b976      	cbnz	r6, 58f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x566>
    58d8:	e003      	b.n	58e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x552>
    58da:	2104      	movs	r1, #4
    58dc:	f00a fdd3 	bl	10486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    58e0:	e7ec      	b.n	58bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    58e2:	7a68      	ldrb	r0, [r5, #9]
    58e4:	7aa9      	ldrb	r1, [r5, #10]
    58e6:	4288      	cmp	r0, r1
    58e8:	d105      	bne.n	58f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x566>
    58ea:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    58ee:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
    58f2:	4288      	cmp	r0, r1
    58f4:	d004      	beq.n	5900 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    58f6:	7a68      	ldrb	r0, [r5, #9]
    58f8:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    58fc:	f008 fdbe 	bl	e47c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5900:	7cb8      	ldrb	r0, [r7, #18]
    5902:	b348      	cbz	r0, 5958 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>
    5904:	4828      	ldr	r0, [pc, #160]	; (59a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x618>)
    5906:	f008 fad5 	bl	deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    590a:	f898 0000 	ldrb.w	r0, [r8]
    590e:	2800      	cmp	r0, #0
    5910:	bf0c      	ite	eq
    5912:	2001      	moveq	r0, #1
    5914:	2000      	movne	r0, #0
    5916:	f080 0101 	eor.w	r1, r0, #1
    591a:	4824      	ldr	r0, [pc, #144]	; (59ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61c>)
    591c:	7601      	strb	r1, [r0, #24]
    591e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    5922:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5926:	f5a0 7284 	sub.w	r2, r0, #264	; 0x108
    592a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    592c:	f007 fdba 	bl	d4a4 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5930:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    5934:	2801      	cmp	r0, #1
    5936:	bf08      	it	eq
    5938:	2200      	moveq	r2, #0
    593a:	d008      	beq.n	594e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    593c:	2802      	cmp	r0, #2
    593e:	bf08      	it	eq
    5940:	2201      	moveq	r2, #1
    5942:	d004      	beq.n	594e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5944:	f240 31b3 	movw	r1, #947	; 0x3b3
    5948:	2006      	movs	r0, #6
    594a:	f7fe f91b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    594e:	4649      	mov	r1, r9
    5950:	2001      	movs	r0, #1
    5952:	f007 fdd5 	bl	d500 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5956:	e004      	b.n	5962 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d2>
    5958:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    595a:	f008 faab 	bl	deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    595e:	f007 fdb1 	bl	d4c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5962:	2e00      	cmp	r6, #0
    5964:	bf04      	itt	eq
    5966:	2000      	moveq	r0, #0
    5968:	f008 f912 	bleq	db90 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    596c:	f641 514c 	movw	r1, #7500	; 0x1d4c
    5970:	6860      	ldr	r0, [r4, #4]
    5972:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    5976:	4288      	cmp	r0, r1
    5978:	f04f 0201 	mov.w	r2, #1
    597c:	f04f 0100 	mov.w	r1, #0
    5980:	bf34      	ite	cc
    5982:	2001      	movcc	r0, #1
    5984:	2000      	movcs	r0, #0
    5986:	f008 fc75 	bl	e274 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    598a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    598e:	2801      	cmp	r0, #1
    5990:	bf08      	it	eq
    5992:	f008 fd27 	bleq	e3e4 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    5996:	2002      	movs	r0, #2
    5998:	7028      	strb	r0, [r5, #0]
    599a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    599e:	0000      	.short	0x0000
    59a0:	20000108 	.word	0x20000108
    59a4:	200000cc 	.word	0x200000cc
    59a8:	20000a18 	.word	0x20000a18
    59ac:	20000b20 	.word	0x20000b20
    59b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59b4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 5c6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8dc>
    59b8:	0002      	movs	r2, r0
    59ba:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    59be:	f8d8 5004 	ldr.w	r5, [r8, #4]
    59c2:	7aa0      	ldrb	r0, [r4, #10]
    59c4:	b083      	sub	sp, #12
    59c6:	f895 1066 	ldrb.w	r1, [r5, #102]	; 0x66
    59ca:	f105 0778 	add.w	r7, r5, #120	; 0x78
    59ce:	f1a8 0b18 	sub.w	fp, r8, #24
    59d2:	bf01      	itttt	eq
    59d4:	7a62      	ldrbeq	r2, [r4, #9]
    59d6:	4282      	cmpeq	r2, r0
    59d8:	f895 2067 	ldrbeq.w	r2, [r5, #103]	; 0x67
    59dc:	428a      	cmpeq	r2, r1
    59de:	d001      	beq.n	59e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    59e0:	f008 fd4c 	bl	e47c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    59e4:	7978      	ldrb	r0, [r7, #5]
    59e6:	f8df a288 	ldr.w	sl, [pc, #648]	; 5c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e0>
    59ea:	f04f 0900 	mov.w	r9, #0
    59ee:	2601      	movs	r6, #1
    59f0:	b150      	cbz	r0, 5a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x678>
    59f2:	2801      	cmp	r0, #1
    59f4:	d06d      	beq.n	5ad2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    59f6:	2802      	cmp	r0, #2
    59f8:	d06c      	beq.n	5ad4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x744>
    59fa:	2803      	cmp	r0, #3
    59fc:	d06b      	beq.n	5ad6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    59fe:	f240 2162 	movw	r1, #610	; 0x262
    5a02:	2027      	movs	r0, #39	; 0x27
    5a04:	f7fe f8be 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a08:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5a0c:	f100 0178 	add.w	r1, r0, #120	; 0x78
    5a10:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    5a14:	2b24      	cmp	r3, #36	; 0x24
    5a16:	bf1c      	itt	ne
    5a18:	7b49      	ldrbne	r1, [r1, #13]
    5a1a:	2924      	cmpne	r1, #36	; 0x24
    5a1c:	d008      	beq.n	5a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>
    5a1e:	f04f 0202 	mov.w	r2, #2
    5a22:	2b1f      	cmp	r3, #31
    5a24:	bf18      	it	ne
    5a26:	2b20      	cmpne	r3, #32
    5a28:	d01c      	beq.n	5a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    5a2a:	2922      	cmp	r1, #34	; 0x22
    5a2c:	d033      	beq.n	5a96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5a2e:	e053      	b.n	5ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    5a30:	f898 1000 	ldrb.w	r1, [r8]
    5a34:	2900      	cmp	r1, #0
    5a36:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5a3a:	d00a      	beq.n	5a52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    5a3c:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    5a40:	2800      	cmp	r0, #0
    5a42:	d04e      	beq.n	5ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5a44:	2901      	cmp	r1, #1
    5a46:	bf18      	it	ne
    5a48:	2801      	cmpne	r0, #1
    5a4a:	d038      	beq.n	5abe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    5a4c:	f04f 0102 	mov.w	r1, #2
    5a50:	e047      	b.n	5ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5a52:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5a56:	2800      	cmp	r0, #0
    5a58:	d043      	beq.n	5ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5a5a:	2901      	cmp	r1, #1
    5a5c:	bf18      	it	ne
    5a5e:	2801      	cmpne	r0, #1
    5a60:	d02d      	beq.n	5abe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    5a62:	e7f3      	b.n	5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    5a64:	2922      	cmp	r1, #34	; 0x22
    5a66:	d016      	beq.n	5a96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5a68:	f898 1000 	ldrb.w	r1, [r8]
    5a6c:	b381      	cbz	r1, 5ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
    5a6e:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5a72:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    5a76:	f010 0f01 	tst.w	r0, #1
    5a7a:	bf18      	it	ne
    5a7c:	4630      	movne	r0, r6
    5a7e:	d004      	beq.n	5a8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fa>
    5a80:	2901      	cmp	r1, #1
    5a82:	bf18      	it	ne
    5a84:	2801      	cmpne	r0, #1
    5a86:	d01a      	beq.n	5abe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72e>
    5a88:	e7e0      	b.n	5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    5a8a:	f010 0f02 	tst.w	r0, #2
    5a8e:	bf18      	it	ne
    5a90:	4610      	movne	r0, r2
    5a92:	d1f5      	bne.n	5a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5a94:	e025      	b.n	5ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5a96:	f898 1000 	ldrb.w	r1, [r8]
    5a9a:	b1c9      	cbz	r1, 5ad0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
    5a9c:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5aa0:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    5aa4:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    5aa8:	ea03 0000 	and.w	r0, r3, r0
    5aac:	f010 0f01 	tst.w	r0, #1
    5ab0:	bf18      	it	ne
    5ab2:	4630      	movne	r0, r6
    5ab4:	d006      	beq.n	5ac4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x734>
    5ab6:	2901      	cmp	r1, #1
    5ab8:	bf18      	it	ne
    5aba:	2801      	cmpne	r0, #1
    5abc:	d1c6      	bne.n	5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6bc>
    5abe:	f04f 0101 	mov.w	r1, #1
    5ac2:	e00e      	b.n	5ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5ac4:	f010 0f02 	tst.w	r0, #2
    5ac8:	bf18      	it	ne
    5aca:	4610      	movne	r0, r2
    5acc:	d1f3      	bne.n	5ab6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    5ace:	e008      	b.n	5ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5ad0:	e002      	b.n	5ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    5ad2:	e029      	b.n	5b28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>
    5ad4:	e03b      	b.n	5b4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7be>
    5ad6:	e04a      	b.n	5b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7de>
    5ad8:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    5adc:	2904      	cmp	r1, #4
    5ade:	bf08      	it	eq
    5ae0:	2108      	moveq	r1, #8
    5ae2:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    5ae4:	f00a fccf 	bl	10486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5ae8:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    5aea:	4281      	cmp	r1, r0
    5aec:	bf38      	it	cc
    5aee:	4608      	movcc	r0, r1
    5af0:	f8ad 0004 	strh.w	r0, [sp, #4]
    5af4:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    5af8:	4658      	mov	r0, fp
    5afa:	f7ff f96f 	bl	4ddc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5afe:	b148      	cbz	r0, 5b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x784>
    5b00:	89e2      	ldrh	r2, [r4, #14]
    5b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5b04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5b08:	81e2      	strh	r2, [r4, #14]
    5b0a:	69a2      	ldr	r2, [r4, #24]
    5b0c:	2080      	movs	r0, #128	; 0x80
    5b0e:	4790      	blx	r2
    5b10:	70fe      	strb	r6, [r7, #3]
    5b12:	e030      	b.n	5b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5b14:	466a      	mov	r2, sp
    5b16:	a901      	add	r1, sp, #4
    5b18:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5b1a:	f00a f92e 	bl	fd7a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    5b1e:	6260      	str	r0, [r4, #36]	; 0x24
    5b20:	b110      	cbz	r0, 5b28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>
    5b22:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
    5b26:	b111      	cbz	r1, 5b2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x79e>
    5b28:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
    5b2c:	e023      	b.n	5b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5b2e:	f89d 1000 	ldrb.w	r1, [sp]
    5b32:	b931      	cbnz	r1, 5b42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b2>
    5b34:	f8a0 9000 	strh.w	r9, [r0]
    5b38:	f880 9002 	strb.w	r9, [r0, #2]
    5b3c:	2101      	movs	r1, #1
    5b3e:	f00a ff45 	bl	109cc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5b42:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b48:	f00a fefa 	bl	10940 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5b4c:	e013      	b.n	5b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5b4e:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    5b52:	f8ad 0004 	strh.w	r0, [sp, #4]
    5b56:	466a      	mov	r2, sp
    5b58:	a901      	add	r1, sp, #4
    5b5a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5b5c:	f00a f90d 	bl	fd7a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    5b60:	6260      	str	r0, [r4, #36]	; 0x24
    5b62:	b940      	cbnz	r0, 5b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e6>
    5b64:	f240 2153 	movw	r1, #595	; 0x253
    5b68:	2027      	movs	r0, #39	; 0x27
    5b6a:	f7fe f80b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b6e:	4658      	mov	r0, fp
    5b70:	f7ff f934 	bl	4ddc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5b74:	b1e0      	cbz	r0, 5bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x820>
    5b76:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b78:	2208      	movs	r2, #8
    5b7a:	7801      	ldrb	r1, [r0, #0]
    5b7c:	f021 0308 	bic.w	r3, r1, #8
    5b80:	7003      	strb	r3, [r0, #0]
    5b82:	79b9      	ldrb	r1, [r7, #6]
    5b84:	ea02 01c1 	and.w	r1, r2, r1, lsl #3
    5b88:	4319      	orrs	r1, r3
    5b8a:	f021 0304 	bic.w	r3, r1, #4
    5b8e:	7003      	strb	r3, [r0, #0]
    5b90:	79f9      	ldrb	r1, [r7, #7]
    5b92:	2204      	movs	r2, #4
    5b94:	ea02 0181 	and.w	r1, r2, r1, lsl #2
    5b98:	4319      	orrs	r1, r3
    5b9a:	f021 0110 	bic.w	r1, r1, #16
    5b9e:	7001      	strb	r1, [r0, #0]
    5ba0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5ba2:	f00a f8bb 	bl	fd1c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5ba6:	2800      	cmp	r0, #0
    5ba8:	bf18      	it	ne
    5baa:	46b1      	movne	r9, r6
    5bac:	d10f      	bne.n	5bce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83e>
    5bae:	e004      	b.n	5bba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x82a>
    5bb0:	f44f 7117 	mov.w	r1, #604	; 0x25c
    5bb4:	2027      	movs	r0, #39	; 0x27
    5bb6:	f7fd ffe5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5bbc:	2103      	movs	r1, #3
    5bbe:	7800      	ldrb	r0, [r0, #0]
    5bc0:	ea31 0000 	bics.w	r0, r1, r0
    5bc4:	d003      	beq.n	5bce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x83e>
    5bc6:	f7ff f8c7 	bl	4d58 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5bca:	f080 0901 	eor.w	r9, r0, #1
    5bce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5bd0:	7801      	ldrb	r1, [r0, #0]
    5bd2:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
    5bd6:	7001      	strb	r1, [r0, #0]
    5bd8:	7c79      	ldrb	r1, [r7, #17]
    5bda:	2900      	cmp	r1, #0
    5bdc:	bf1c      	itt	ne
    5bde:	7841      	ldrbne	r1, [r0, #1]
    5be0:	2900      	cmpne	r1, #0
    5be2:	d027      	beq.n	5c34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a4>
    5be4:	4823      	ldr	r0, [pc, #140]	; (5c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e4>)
    5be6:	f008 f965 	bl	deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5bea:	f898 0000 	ldrb.w	r0, [r8]
    5bee:	2800      	cmp	r0, #0
    5bf0:	bf0c      	ite	eq
    5bf2:	2101      	moveq	r1, #1
    5bf4:	2100      	movne	r1, #0
    5bf6:	4820      	ldr	r0, [pc, #128]	; (5c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e8>)
    5bf8:	7601      	strb	r1, [r0, #24]
    5bfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    5bfe:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c02:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    5c06:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5c08:	f007 fc4c 	bl	d4a4 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5c0c:	f895 0066 	ldrb.w	r0, [r5, #102]	; 0x66
    5c10:	2801      	cmp	r0, #1
    5c12:	bf08      	it	eq
    5c14:	2200      	moveq	r2, #0
    5c16:	d008      	beq.n	5c2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    5c18:	2802      	cmp	r0, #2
    5c1a:	bf08      	it	eq
    5c1c:	2201      	moveq	r2, #1
    5c1e:	d004      	beq.n	5c2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x89a>
    5c20:	f240 31b3 	movw	r1, #947	; 0x3b3
    5c24:	2006      	movs	r0, #6
    5c26:	f7fd ffad 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c2a:	21fb      	movs	r1, #251	; 0xfb
    5c2c:	2000      	movs	r0, #0
    5c2e:	f007 fc67 	bl	d500 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5c32:	e003      	b.n	5c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ac>
    5c34:	f008 f93e 	bl	deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5c38:	f007 fc44 	bl	d4c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5c3c:	6868      	ldr	r0, [r5, #4]
    5c3e:	f641 514c 	movw	r1, #7500	; 0x1d4c
    5c42:	4288      	cmp	r0, r1
    5c44:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
    5c48:	f04f 0201 	mov.w	r2, #1
    5c4c:	4611      	mov	r1, r2
    5c4e:	bf34      	ite	cc
    5c50:	2001      	movcc	r0, #1
    5c52:	2000      	movcs	r0, #0
    5c54:	f008 fb0e 	bl	e274 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5c58:	7126      	strb	r6, [r4, #4]
    5c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c5c:	8801      	ldrh	r1, [r0, #0]
    5c5e:	8261      	strh	r1, [r4, #18]
    5c60:	7880      	ldrb	r0, [r0, #2]
    5c62:	7520      	strb	r0, [r4, #20]
    5c64:	7026      	strb	r6, [r4, #0]
    5c66:	b003      	add	sp, #12
    5c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c6c:	20000108 	.word	0x20000108
    5c70:	20000b48 	.word	0x20000b48
    5c74:	20000a18 	.word	0x20000a18
    5c78:	20000b20 	.word	0x20000b20
    5c7c:	00005855 	.word	0x00005855
    5c80:	00005485 	.word	0x00005485
    5c84:	00005739 	.word	0x00005739
    5c88:	00005881 	.word	0x00005881
    5c8c:	00000000 	.word	0x00000000

00005c90 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    5c90:	460a      	mov	r2, r1
    5c92:	4907      	ldr	r1, [pc, #28]	; (5cb0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    5c94:	b510      	push	{r4, lr}
    5c96:	7809      	ldrb	r1, [r1, #0]
    5c98:	b141      	cbz	r1, 5cac <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    5c9a:	4b06      	ldr	r3, [pc, #24]	; (5cb4 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    5c9c:	7899      	ldrb	r1, [r3, #2]
    5c9e:	b129      	cbz	r1, 5cac <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1c>
    5ca0:	4402      	add	r2, r0
    5ca2:	1cd8      	adds	r0, r3, #3
    5ca4:	f007 fb28 	bl	d2f8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5ca8:	2001      	movs	r0, #1
    5caa:	bd10      	pop	{r4, pc}
    5cac:	2000      	movs	r0, #0
    5cae:	bd10      	pop	{r4, pc}
    5cb0:	2000039c 	.word	0x2000039c
    5cb4:	20001ac9 	.word	0x20001ac9

00005cb8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5cb8:	4800      	ldr	r0, [pc, #0]	; (5cbc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5cba:	4770      	bx	lr
    5cbc:	20001c9c 	.word	0x20001c9c

00005cc0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5cc0:	4904      	ldr	r1, [pc, #16]	; (5cd4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5cc2:	788a      	ldrb	r2, [r1, #2]
    5cc4:	4282      	cmp	r2, r0
    5cc6:	bf86      	itte	hi
    5cc8:	4408      	addhi	r0, r1
    5cca:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    5cce:	2000      	movls	r0, #0
    5cd0:	4770      	bx	lr
    5cd2:	0000      	.short	0x0000
    5cd4:	20001ac9 	.word	0x20001ac9

00005cd8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5cd8:	4904      	ldr	r1, [pc, #16]	; (5cec <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5cda:	788a      	ldrb	r2, [r1, #2]
    5cdc:	4282      	cmp	r2, r0
    5cde:	bf86      	itte	hi
    5ce0:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5ce4:	3083      	addhi	r0, #131	; 0x83
    5ce6:	2000      	movls	r0, #0
    5ce8:	4770      	bx	lr
    5cea:	0000      	.short	0x0000
    5cec:	20001ac9 	.word	0x20001ac9

00005cf0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5cf0:	4a05      	ldr	r2, [pc, #20]	; (5d08 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5cf2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5cf6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5cfa:	6802      	ldr	r2, [r0, #0]
    5cfc:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5d00:	8880      	ldrh	r0, [r0, #4]
    5d02:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5d06:	4770      	bx	lr
    5d08:	20001ac9 	.word	0x20001ac9

00005d0c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d10:	460e      	mov	r6, r1
    5d12:	4607      	mov	r7, r0
    5d14:	4615      	mov	r5, r2
    5d16:	2106      	movs	r1, #6
    5d18:	4630      	mov	r0, r6
    5d1a:	f000 fe3b 	bl	6994 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5d1e:	4c1c      	ldr	r4, [pc, #112]	; (5d90 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x84>)
    5d20:	b198      	cbz	r0, 5d4a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x3e>
    5d22:	78a1      	ldrb	r1, [r4, #2]
    5d24:	b171      	cbz	r1, 5d44 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5d26:	f504 709d 	add.w	r0, r4, #314	; 0x13a
    5d2a:	f011 0f01 	tst.w	r1, #1
    5d2e:	bf18      	it	ne
    5d30:	f800 5f01 	strbne.w	r5, [r0, #1]!
    5d34:	78a1      	ldrb	r1, [r4, #2]
    5d36:	0849      	lsrs	r1, r1, #1
    5d38:	d004      	beq.n	5d44 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x38>
    5d3a:	7045      	strb	r5, [r0, #1]
    5d3c:	f800 5f02 	strb.w	r5, [r0, #2]!
    5d40:	1e49      	subs	r1, r1, #1
    5d42:	d1fa      	bne.n	5d3a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2e>
    5d44:	2001      	movs	r0, #1
    5d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d4a:	4638      	mov	r0, r7
    5d4c:	4631      	mov	r1, r6
    5d4e:	f000 fad5 	bl	62fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5d52:	2810      	cmp	r0, #16
    5d54:	d019      	beq.n	5d8a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5d56:	78a3      	ldrb	r3, [r4, #2]
    5d58:	2100      	movs	r1, #0
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	d915      	bls.n	5d8a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5d5e:	1862      	adds	r2, r4, r1
    5d60:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
    5d64:	4282      	cmp	r2, r0
    5d66:	d10b      	bne.n	5d80 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x74>
    5d68:	2910      	cmp	r1, #16
    5d6a:	bf18      	it	ne
    5d6c:	2908      	cmpne	r1, #8
    5d6e:	d00c      	beq.n	5d8a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x7e>
    5d70:	eb04 0001 	add.w	r0, r4, r1
    5d74:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5d78:	f04f 0001 	mov.w	r0, #1
    5d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d80:	f101 0101 	add.w	r1, r1, #1
    5d84:	b2c9      	uxtb	r1, r1
    5d86:	428b      	cmp	r3, r1
    5d88:	d8e9      	bhi.n	5d5e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x52>
    5d8a:	2000      	movs	r0, #0
    5d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d90:	20001ac9 	.word	0x20001ac9

00005d94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5d94:	4904      	ldr	r1, [pc, #16]	; (5da8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5d96:	788a      	ldrb	r2, [r1, #2]
    5d98:	4282      	cmp	r2, r0
    5d9a:	bf86      	itte	hi
    5d9c:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    5da0:	1cc0      	addhi	r0, r0, #3
    5da2:	2000      	movls	r0, #0
    5da4:	4770      	bx	lr
    5da6:	0000      	.short	0x0000
    5da8:	20001ac9 	.word	0x20001ac9

00005dac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5dac:	b510      	push	{r4, lr}
    5dae:	f240 12d3 	movw	r2, #467	; 0x1d3
    5db2:	2100      	movs	r1, #0
    5db4:	4807      	ldr	r0, [pc, #28]	; (5dd4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    5db6:	f009 f88d 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5dba:	2208      	movs	r2, #8
    5dbc:	21ff      	movs	r1, #255	; 0xff
    5dbe:	4806      	ldr	r0, [pc, #24]	; (5dd8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5dc0:	f009 f888 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5dc4:	4805      	ldr	r0, [pc, #20]	; (5ddc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5dc6:	2100      	movs	r1, #0
    5dc8:	7001      	strb	r1, [r0, #0]
    5dca:	7041      	strb	r1, [r0, #1]
    5dcc:	f44f 7161 	mov.w	r1, #900	; 0x384
    5dd0:	8041      	strh	r1, [r0, #2]
    5dd2:	bd10      	pop	{r4, pc}
    5dd4:	20001ac9 	.word	0x20001ac9
    5dd8:	200003a0 	.word	0x200003a0
    5ddc:	2000039c 	.word	0x2000039c

00005de0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5de0:	4901      	ldr	r1, [pc, #4]	; (5de8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5de2:	7008      	strb	r0, [r1, #0]
    5de4:	4770      	bx	lr
    5de6:	0000      	.short	0x0000
    5de8:	2000039c 	.word	0x2000039c

00005dec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5dec:	4801      	ldr	r0, [pc, #4]	; (5df4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5dee:	7800      	ldrb	r0, [r0, #0]
    5df0:	4770      	bx	lr
    5df2:	0000      	.short	0x0000
    5df4:	2000039c 	.word	0x2000039c

00005df8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5df8:	4b0b      	ldr	r3, [pc, #44]	; (5e28 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5dfa:	f893 c002 	ldrb.w	ip, [r3, #2]
    5dfe:	4584      	cmp	ip, r0
    5e00:	bf9c      	itt	ls
    5e02:	2000      	movls	r0, #0
    5e04:	4770      	bxls	lr
    5e06:	4418      	add	r0, r3
    5e08:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e0c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5e10:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5e14:	700b      	strb	r3, [r1, #0]
    5e16:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5e1a:	6011      	str	r1, [r2, #0]
    5e1c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5e20:	8090      	strh	r0, [r2, #4]
    5e22:	2001      	movs	r0, #1
    5e24:	4770      	bx	lr
    5e26:	0000      	.short	0x0000
    5e28:	20001ac9 	.word	0x20001ac9

00005e2c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5e2c:	4907      	ldr	r1, [pc, #28]	; (5e4c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5e2e:	788a      	ldrb	r2, [r1, #2]
    5e30:	4282      	cmp	r2, r0
    5e32:	bf9c      	itt	ls
    5e34:	2000      	movls	r0, #0
    5e36:	4770      	bxls	lr
    5e38:	4408      	add	r0, r1
    5e3a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5e3e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5e42:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5e46:	f000 0001 	and.w	r0, r0, #1
    5e4a:	4770      	bx	lr
    5e4c:	20001ac9 	.word	0x20001ac9

00005e50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    5e50:	b510      	push	{r4, lr}
    5e52:	f000 fa53 	bl	62fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5e56:	2810      	cmp	r0, #16
    5e58:	d014      	beq.n	5e84 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5e5a:	4a0b      	ldr	r2, [pc, #44]	; (5e88 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    5e5c:	4601      	mov	r1, r0
    5e5e:	2000      	movs	r0, #0
    5e60:	f892 c002 	ldrb.w	ip, [r2, #2]
    5e64:	f1bc 0f00 	cmp.w	ip, #0
    5e68:	d90c      	bls.n	5e84 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5e6a:	1813      	adds	r3, r2, r0
    5e6c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    5e70:	428b      	cmp	r3, r1
    5e72:	d103      	bne.n	5e7c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    5e74:	2810      	cmp	r0, #16
    5e76:	bf18      	it	ne
    5e78:	bd10      	popne	{r4, pc}
    5e7a:	e003      	b.n	5e84 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    5e7c:	1c40      	adds	r0, r0, #1
    5e7e:	b2c0      	uxtb	r0, r0
    5e80:	4584      	cmp	ip, r0
    5e82:	d8f2      	bhi.n	5e6a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    5e84:	2008      	movs	r0, #8
    5e86:	bd10      	pop	{r4, pc}
    5e88:	20001ac9 	.word	0x20001ac9

00005e8c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e90:	4698      	mov	r8, r3
    5e92:	4691      	mov	r9, r2
    5e94:	460f      	mov	r7, r1
    5e96:	4606      	mov	r6, r0
    5e98:	f000 fa30 	bl	62fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5e9c:	4c2d      	ldr	r4, [pc, #180]	; (5f54 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc8>)
    5e9e:	4605      	mov	r5, r0
    5ea0:	2810      	cmp	r0, #16
    5ea2:	d017      	beq.n	5ed4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x48>
    5ea4:	78a1      	ldrb	r1, [r4, #2]
    5ea6:	2000      	movs	r0, #0
    5ea8:	2900      	cmp	r1, #0
    5eaa:	d90e      	bls.n	5eca <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5eac:	1822      	adds	r2, r4, r0
    5eae:	f892 3103 	ldrb.w	r3, [r2, #259]	; 0x103
    5eb2:	42ab      	cmp	r3, r5
    5eb4:	d105      	bne.n	5ec2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x36>
    5eb6:	2810      	cmp	r0, #16
    5eb8:	bf1c      	itt	ne
    5eba:	2012      	movne	r0, #18
    5ebc:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ec0:	e003      	b.n	5eca <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3e>
    5ec2:	1c40      	adds	r0, r0, #1
    5ec4:	b2c0      	uxtb	r0, r0
    5ec6:	4281      	cmp	r1, r0
    5ec8:	d8f0      	bhi.n	5eac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5eca:	2908      	cmp	r1, #8
    5ecc:	d23f      	bcs.n	5f4e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5ece:	2d10      	cmp	r5, #16
    5ed0:	d003      	beq.n	5eda <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x4e>
    5ed2:	e018      	b.n	5f06 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x7a>
    5ed4:	78a1      	ldrb	r1, [r4, #2]
    5ed6:	2908      	cmp	r1, #8
    5ed8:	d239      	bcs.n	5f4e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xc2>
    5eda:	7825      	ldrb	r5, [r4, #0]
    5edc:	2100      	movs	r1, #0
    5ede:	1c68      	adds	r0, r5, #1
    5ee0:	7020      	strb	r0, [r4, #0]
    5ee2:	2d10      	cmp	r5, #16
    5ee4:	d303      	bcc.n	5eee <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x62>
    5ee6:	2146      	movs	r1, #70	; 0x46
    5ee8:	2028      	movs	r0, #40	; 0x28
    5eea:	f7fd fe4b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eee:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
    5ef2:	683a      	ldr	r2, [r7, #0]
    5ef4:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
    5ef8:	88ba      	ldrh	r2, [r7, #4]
    5efa:	f8a0 2158 	strh.w	r2, [r0, #344]	; 0x158
    5efe:	f880 6153 	strb.w	r6, [r0, #339]	; 0x153
    5f02:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5f06:	78a6      	ldrb	r6, [r4, #2]
    5f08:	2210      	movs	r2, #16
    5f0a:	1c70      	adds	r0, r6, #1
    5f0c:	70a0      	strb	r0, [r4, #2]
    5f0e:	eb04 1706 	add.w	r7, r4, r6, lsl #4
    5f12:	1cf8      	adds	r0, r7, #3
    5f14:	4649      	mov	r1, r9
    5f16:	f000 fd07 	bl	6928 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5f1a:	f107 0083 	add.w	r0, r7, #131	; 0x83
    5f1e:	2210      	movs	r2, #16
    5f20:	4641      	mov	r1, r8
    5f22:	f000 fd01 	bl	6928 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5f26:	2110      	movs	r1, #16
    5f28:	4640      	mov	r0, r8
    5f2a:	f000 fd33 	bl	6994 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5f2e:	4434      	add	r4, r6
    5f30:	2110      	movs	r1, #16
    5f32:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5f36:	4648      	mov	r0, r9
    5f38:	f000 fd2c 	bl	6994 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5f3c:	f884 014b 	strb.w	r0, [r4, #331]	; 0x14b
    5f40:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
    5f44:	2000      	movs	r0, #0
    5f46:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
    5f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f4e:	2007      	movs	r0, #7
    5f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f54:	20001ac9 	.word	0x20001ac9

00005f58 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5f58:	b470      	push	{r4, r5, r6}
    5f5a:	484d      	ldr	r0, [pc, #308]	; (6090 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x138>)
    5f5c:	7881      	ldrb	r1, [r0, #2]
    5f5e:	1e49      	subs	r1, r1, #1
    5f60:	b24b      	sxtb	r3, r1
    5f62:	2b00      	cmp	r3, #0
    5f64:	bfbc      	itt	lt
    5f66:	bc70      	poplt	{r4, r5, r6}
    5f68:	4770      	bxlt	lr
    5f6a:	bf00      	nop
    5f6c:	7881      	ldrb	r1, [r0, #2]
    5f6e:	f003 0cff 	and.w	ip, r3, #255	; 0xff
    5f72:	1e49      	subs	r1, r1, #1
    5f74:	b2ca      	uxtb	r2, r1
    5f76:	7082      	strb	r2, [r0, #2]
    5f78:	fa50 f183 	uxtab	r1, r0, r3
    5f7c:	f891 1103 	ldrb.w	r1, [r1, #259]	; 0x103
    5f80:	4594      	cmp	ip, r2
    5f82:	d03e      	beq.n	6002 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xaa>
    5f84:	eb00 1502 	add.w	r5, r0, r2, lsl #4
    5f88:	eb00 140c 	add.w	r4, r0, ip, lsl #4
    5f8c:	f8d5 6003 	ldr.w	r6, [r5, #3]
    5f90:	f8c4 6003 	str.w	r6, [r4, #3]
    5f94:	f8d5 6007 	ldr.w	r6, [r5, #7]
    5f98:	f8c4 6007 	str.w	r6, [r4, #7]
    5f9c:	f8d5 600b 	ldr.w	r6, [r5, #11]
    5fa0:	f8c4 600b 	str.w	r6, [r4, #11]
    5fa4:	f8d5 600f 	ldr.w	r6, [r5, #15]
    5fa8:	f8c4 600f 	str.w	r6, [r4, #15]
    5fac:	f8d5 6083 	ldr.w	r6, [r5, #131]	; 0x83
    5fb0:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    5fb4:	f8d5 6087 	ldr.w	r6, [r5, #135]	; 0x87
    5fb8:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    5fbc:	f8d5 608b 	ldr.w	r6, [r5, #139]	; 0x8b
    5fc0:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    5fc4:	f8d5 508f 	ldr.w	r5, [r5, #143]	; 0x8f
    5fc8:	f8c4 508f 	str.w	r5, [r4, #143]	; 0x8f
    5fcc:	1885      	adds	r5, r0, r2
    5fce:	eb00 040c 	add.w	r4, r0, ip
    5fd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5fd6:	f895 6103 	ldrb.w	r6, [r5, #259]	; 0x103
    5fda:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    5fde:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    5fe2:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
    5fe6:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    5fea:	f8d2 610b 	ldr.w	r6, [r2, #267]	; 0x10b
    5fee:	f8cc 610b 	str.w	r6, [ip, #267]	; 0x10b
    5ff2:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5ff6:	f8ac 210f 	strh.w	r2, [ip, #271]	; 0x10f
    5ffa:	f895 213b 	ldrb.w	r2, [r5, #315]	; 0x13b
    5ffe:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    6002:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    6006:	f892 215a 	ldrb.w	r2, [r2, #346]	; 0x15a
    600a:	f012 0f01 	tst.w	r2, #1
    600e:	d133      	bne.n	6078 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6010:	f890 c002 	ldrb.w	ip, [r0, #2]
    6014:	2200      	movs	r2, #0
    6016:	f1bc 0f00 	cmp.w	ip, #0
    601a:	d90b      	bls.n	6034 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    601c:	1884      	adds	r4, r0, r2
    601e:	f894 5103 	ldrb.w	r5, [r4, #259]	; 0x103
    6022:	428d      	cmp	r5, r1
    6024:	d102      	bne.n	602c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xd4>
    6026:	2a10      	cmp	r2, #16
    6028:	d126      	bne.n	6078 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    602a:	e003      	b.n	6034 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xdc>
    602c:	1c52      	adds	r2, r2, #1
    602e:	b2d2      	uxtb	r2, r2
    6030:	4594      	cmp	ip, r2
    6032:	d8f3      	bhi.n	601c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc4>
    6034:	7802      	ldrb	r2, [r0, #0]
    6036:	1e52      	subs	r2, r2, #1
    6038:	b2d2      	uxtb	r2, r2
    603a:	7002      	strb	r2, [r0, #0]
    603c:	428a      	cmp	r2, r1
    603e:	d01b      	beq.n	6078 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6040:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    6044:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    6048:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    604c:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    6050:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    6054:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    6058:	7884      	ldrb	r4, [r0, #2]
    605a:	f890 c000 	ldrb.w	ip, [r0]
    605e:	2200      	movs	r2, #0
    6060:	2c00      	cmp	r4, #0
    6062:	d909      	bls.n	6078 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6064:	1885      	adds	r5, r0, r2
    6066:	f895 5103 	ldrb.w	r5, [r5, #259]	; 0x103
    606a:	4565      	cmp	r5, ip
    606c:	d10b      	bne.n	6086 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x12e>
    606e:	2a10      	cmp	r2, #16
    6070:	bf1c      	itt	ne
    6072:	4402      	addne	r2, r0
    6074:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    6078:	1e59      	subs	r1, r3, #1
    607a:	b24b      	sxtb	r3, r1
    607c:	2b00      	cmp	r3, #0
    607e:	f6bf af75 	bge.w	5f6c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x14>
    6082:	bc70      	pop	{r4, r5, r6}
    6084:	4770      	bx	lr
    6086:	1c52      	adds	r2, r2, #1
    6088:	b2d2      	uxtb	r2, r2
    608a:	4294      	cmp	r4, r2
    608c:	d8ea      	bhi.n	6064 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x10c>
    608e:	e7f3      	b.n	6078 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x120>
    6090:	20001ac9 	.word	0x20001ac9

00006094 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    6094:	b510      	push	{r4, lr}
    6096:	f000 f931 	bl	62fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    609a:	2810      	cmp	r0, #16
    609c:	d016      	beq.n	60cc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    609e:	4a0c      	ldr	r2, [pc, #48]	; (60d0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x3c>)
    60a0:	4601      	mov	r1, r0
    60a2:	2000      	movs	r0, #0
    60a4:	7893      	ldrb	r3, [r2, #2]
    60a6:	2b00      	cmp	r3, #0
    60a8:	d910      	bls.n	60cc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    60aa:	bf00      	nop
    60ac:	eb02 0c00 	add.w	ip, r2, r0
    60b0:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    60b4:	458c      	cmp	ip, r1
    60b6:	d105      	bne.n	60c4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x30>
    60b8:	2810      	cmp	r0, #16
    60ba:	d007      	beq.n	60cc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x38>
    60bc:	f000 f942 	bl	6344 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xec>
    60c0:	2001      	movs	r0, #1
    60c2:	bd10      	pop	{r4, pc}
    60c4:	1c40      	adds	r0, r0, #1
    60c6:	b2c0      	uxtb	r0, r0
    60c8:	4283      	cmp	r3, r0
    60ca:	d8ef      	bhi.n	60ac <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x18>
    60cc:	2000      	movs	r0, #0
    60ce:	bd10      	pop	{r4, pc}
    60d0:	20001ac9 	.word	0x20001ac9

000060d4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    60d4:	4801      	ldr	r0, [pc, #4]	; (60dc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    60d6:	8840      	ldrh	r0, [r0, #2]
    60d8:	4770      	bx	lr
    60da:	0000      	.short	0x0000
    60dc:	2000039c 	.word	0x2000039c

000060e0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    60e0:	b138      	cbz	r0, 60f2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    60e2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    60e6:	4288      	cmp	r0, r1
    60e8:	d803      	bhi.n	60f2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    60ea:	4903      	ldr	r1, [pc, #12]	; (60f8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    60ec:	8048      	strh	r0, [r1, #2]
    60ee:	2001      	movs	r0, #1
    60f0:	4770      	bx	lr
    60f2:	2000      	movs	r0, #0
    60f4:	4770      	bx	lr
    60f6:	0000      	.short	0x0000
    60f8:	2000039c 	.word	0x2000039c

000060fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    60fc:	4906      	ldr	r1, [pc, #24]	; (6118 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    60fe:	788a      	ldrb	r2, [r1, #2]
    6100:	4282      	cmp	r2, r0
    6102:	d906      	bls.n	6112 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    6104:	4408      	add	r0, r1
    6106:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    610a:	2800      	cmp	r0, #0
    610c:	bf04      	itt	eq
    610e:	2001      	moveq	r0, #1
    6110:	4770      	bxeq	lr
    6112:	2000      	movs	r0, #0
    6114:	4770      	bx	lr
    6116:	0000      	.short	0x0000
    6118:	20001ac9 	.word	0x20001ac9

0000611c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    611c:	b570      	push	{r4, r5, r6, lr}
    611e:	460d      	mov	r5, r1
    6120:	4604      	mov	r4, r0
    6122:	f000 f8eb 	bl	62fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6126:	4a1a      	ldr	r2, [pc, #104]	; (6190 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    6128:	2810      	cmp	r0, #16
    612a:	d014      	beq.n	6156 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    612c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    6130:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    6134:	f010 0f01 	tst.w	r0, #1
    6138:	bf1c      	itt	ne
    613a:	2001      	movne	r0, #1
    613c:	bd70      	popne	{r4, r5, r6, pc}
    613e:	7850      	ldrb	r0, [r2, #1]
    6140:	2808      	cmp	r0, #8
    6142:	bf3c      	itt	cc
    6144:	2001      	movcc	r0, #1
    6146:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    614a:	d21e      	bcs.n	618a <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    614c:	7850      	ldrb	r0, [r2, #1]
    614e:	1c40      	adds	r0, r0, #1
    6150:	7050      	strb	r0, [r2, #1]
    6152:	2001      	movs	r0, #1
    6154:	bd70      	pop	{r4, r5, r6, pc}
    6156:	7850      	ldrb	r0, [r2, #1]
    6158:	2808      	cmp	r0, #8
    615a:	d216      	bcs.n	618a <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    615c:	7813      	ldrb	r3, [r2, #0]
    615e:	2001      	movs	r0, #1
    6160:	1c59      	adds	r1, r3, #1
    6162:	7011      	strb	r1, [r2, #0]
    6164:	2b10      	cmp	r3, #16
    6166:	d303      	bcc.n	6170 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    6168:	2146      	movs	r1, #70	; 0x46
    616a:	2028      	movs	r0, #40	; 0x28
    616c:	f7fd fd0a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6170:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6174:	6829      	ldr	r1, [r5, #0]
    6176:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    617a:	88a9      	ldrh	r1, [r5, #4]
    617c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6180:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6184:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    6188:	e7e0      	b.n	614c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    618a:	2000      	movs	r0, #0
    618c:	bd70      	pop	{r4, r5, r6, pc}
    618e:	0000      	.short	0x0000
    6190:	20001ac9 	.word	0x20001ac9

00006194 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    6194:	4901      	ldr	r1, [pc, #4]	; (619c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    6196:	7048      	strb	r0, [r1, #1]
    6198:	4770      	bx	lr
    619a:	0000      	.short	0x0000
    619c:	2000039c 	.word	0x2000039c

000061a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    61a0:	b470      	push	{r4, r5, r6}
    61a2:	482b      	ldr	r0, [pc, #172]	; (6250 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    61a4:	2500      	movs	r5, #0
    61a6:	7801      	ldrb	r1, [r0, #0]
    61a8:	1e49      	subs	r1, r1, #1
    61aa:	b24b      	sxtb	r3, r1
    61ac:	2b00      	cmp	r3, #0
    61ae:	db46      	blt.n	623e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    61b0:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    61b4:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    61b8:	f011 0f01 	tst.w	r1, #1
    61bc:	d03b      	beq.n	6236 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    61be:	7842      	ldrb	r2, [r0, #1]
    61c0:	b2d9      	uxtb	r1, r3
    61c2:	1e52      	subs	r2, r2, #1
    61c4:	7042      	strb	r2, [r0, #1]
    61c6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    61ca:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    61ce:	f890 c002 	ldrb.w	ip, [r0, #2]
    61d2:	2200      	movs	r2, #0
    61d4:	f1bc 0f00 	cmp.w	ip, #0
    61d8:	d90b      	bls.n	61f2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    61da:	1884      	adds	r4, r0, r2
    61dc:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    61e0:	428e      	cmp	r6, r1
    61e2:	d102      	bne.n	61ea <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    61e4:	2a10      	cmp	r2, #16
    61e6:	d126      	bne.n	6236 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    61e8:	e003      	b.n	61f2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    61ea:	1c52      	adds	r2, r2, #1
    61ec:	b2d2      	uxtb	r2, r2
    61ee:	4594      	cmp	ip, r2
    61f0:	d8f3      	bhi.n	61da <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    61f2:	7802      	ldrb	r2, [r0, #0]
    61f4:	1e52      	subs	r2, r2, #1
    61f6:	b2d2      	uxtb	r2, r2
    61f8:	7002      	strb	r2, [r0, #0]
    61fa:	428a      	cmp	r2, r1
    61fc:	d01b      	beq.n	6236 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    61fe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    6202:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    6206:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    620a:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    620e:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    6212:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    6216:	7884      	ldrb	r4, [r0, #2]
    6218:	f890 c000 	ldrb.w	ip, [r0]
    621c:	2200      	movs	r2, #0
    621e:	2c00      	cmp	r4, #0
    6220:	d909      	bls.n	6236 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6222:	1886      	adds	r6, r0, r2
    6224:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    6228:	4566      	cmp	r6, ip
    622a:	d10c      	bne.n	6246 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    622c:	2a10      	cmp	r2, #16
    622e:	bf1c      	itt	ne
    6230:	4402      	addne	r2, r0
    6232:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    6236:	1e59      	subs	r1, r3, #1
    6238:	b24b      	sxtb	r3, r1
    623a:	2b00      	cmp	r3, #0
    623c:	dab8      	bge.n	61b0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    623e:	4805      	ldr	r0, [pc, #20]	; (6254 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    6240:	7045      	strb	r5, [r0, #1]
    6242:	bc70      	pop	{r4, r5, r6}
    6244:	4770      	bx	lr
    6246:	1c52      	adds	r2, r2, #1
    6248:	b2d2      	uxtb	r2, r2
    624a:	4294      	cmp	r4, r2
    624c:	d8e9      	bhi.n	6222 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    624e:	e7f2      	b.n	6236 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    6250:	20001ac9 	.word	0x20001ac9
    6254:	2000039c 	.word	0x2000039c

00006258 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    625c:	4d25      	ldr	r5, [pc, #148]	; (62f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    625e:	2600      	movs	r6, #0
    6260:	4634      	mov	r4, r6
    6262:	7828      	ldrb	r0, [r5, #0]
    6264:	2800      	cmp	r0, #0
    6266:	bf8c      	ite	hi
    6268:	4f23      	ldrhi	r7, [pc, #140]	; (62f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    626a:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    626e:	bf00      	nop
    6270:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6274:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    6278:	f011 0f01 	tst.w	r1, #1
    627c:	d032      	beq.n	62e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    627e:	78aa      	ldrb	r2, [r5, #2]
    6280:	2100      	movs	r1, #0
    6282:	4623      	mov	r3, r4
    6284:	2a00      	cmp	r2, #0
    6286:	d909      	bls.n	629c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    6288:	eb05 0c01 	add.w	ip, r5, r1
    628c:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    6290:	459c      	cmp	ip, r3
    6292:	d004      	beq.n	629e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    6294:	1c49      	adds	r1, r1, #1
    6296:	b2c9      	uxtb	r1, r1
    6298:	428a      	cmp	r2, r1
    629a:	d8f5      	bhi.n	6288 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    629c:	2110      	movs	r1, #16
    629e:	428a      	cmp	r2, r1
    62a0:	bf86      	itte	hi
    62a2:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    62a6:	1cd3      	addhi	r3, r2, #3
    62a8:	2300      	movls	r3, #0
    62aa:	2200      	movs	r2, #0
    62ac:	2910      	cmp	r1, #16
    62ae:	d00c      	beq.n	62ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    62b0:	eb05 0c01 	add.w	ip, r5, r1
    62b4:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    62b8:	f1b8 0f01 	cmp.w	r8, #1
    62bc:	d004      	beq.n	62c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    62be:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    62c2:	f1bc 0f00 	cmp.w	ip, #0
    62c6:	d000      	beq.n	62ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    62c8:	2201      	movs	r2, #1
    62ca:	1e52      	subs	r2, r2, #1
    62cc:	4213      	tst	r3, r2
    62ce:	d109      	bne.n	62e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    62d0:	55b9      	strb	r1, [r7, r6]
    62d2:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    62d6:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    62da:	4630      	mov	r0, r6
    62dc:	1c73      	adds	r3, r6, #1
    62de:	b2de      	uxtb	r6, r3
    62e0:	f008 fb9c 	bl	ea1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    62e4:	1c60      	adds	r0, r4, #1
    62e6:	b2c4      	uxtb	r4, r0
    62e8:	7828      	ldrb	r0, [r5, #0]
    62ea:	42a0      	cmp	r0, r4
    62ec:	d8c0      	bhi.n	6270 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    62ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62f2:	0000      	.short	0x0000
    62f4:	20001ac9 	.word	0x20001ac9
    62f8:	200003a0 	.word	0x200003a0
    62fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6300:	4d0f      	ldr	r5, [pc, #60]	; (6340 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>)
    6302:	4606      	mov	r6, r0
    6304:	2400      	movs	r4, #0
    6306:	7828      	ldrb	r0, [r5, #0]
    6308:	460f      	mov	r7, r1
    630a:	2800      	cmp	r0, #0
    630c:	d912      	bls.n	6334 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xdc>
    630e:	bf00      	nop
    6310:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6314:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    6318:	42b1      	cmp	r1, r6
    631a:	d106      	bne.n	632a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd2>
    631c:	2206      	movs	r2, #6
    631e:	4639      	mov	r1, r7
    6320:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6324:	f008 fdc6 	bl	eeb4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6328:	b138      	cbz	r0, 633a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe2>
    632a:	1c60      	adds	r0, r4, #1
    632c:	b2c4      	uxtb	r4, r0
    632e:	7828      	ldrb	r0, [r5, #0]
    6330:	42a0      	cmp	r0, r4
    6332:	d8ed      	bhi.n	6310 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb8>
    6334:	2010      	movs	r0, #16
    6336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    633a:	4620      	mov	r0, r4
    633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6340:	20001ac9 	.word	0x20001ac9
    6344:	b470      	push	{r4, r5, r6}
    6346:	4949      	ldr	r1, [pc, #292]	; (646c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x214>)
    6348:	180d      	adds	r5, r1, r0
    634a:	788a      	ldrb	r2, [r1, #2]
    634c:	1e52      	subs	r2, r2, #1
    634e:	b2d3      	uxtb	r3, r2
    6350:	708b      	strb	r3, [r1, #2]
    6352:	f895 2103 	ldrb.w	r2, [r5, #259]	; 0x103
    6356:	4298      	cmp	r0, r3
    6358:	d03d      	beq.n	63d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x17e>
    635a:	eb01 1400 	add.w	r4, r1, r0, lsl #4
    635e:	eb01 1c03 	add.w	ip, r1, r3, lsl #4
    6362:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6366:	f8dc 6003 	ldr.w	r6, [ip, #3]
    636a:	f8c4 6003 	str.w	r6, [r4, #3]
    636e:	f8dc 6007 	ldr.w	r6, [ip, #7]
    6372:	f8c4 6007 	str.w	r6, [r4, #7]
    6376:	f8dc 600b 	ldr.w	r6, [ip, #11]
    637a:	f8c4 600b 	str.w	r6, [r4, #11]
    637e:	f8dc 600f 	ldr.w	r6, [ip, #15]
    6382:	f8c4 600f 	str.w	r6, [r4, #15]
    6386:	f8dc 6083 	ldr.w	r6, [ip, #131]	; 0x83
    638a:	f8c4 6083 	str.w	r6, [r4, #131]	; 0x83
    638e:	f8dc 6087 	ldr.w	r6, [ip, #135]	; 0x87
    6392:	f8c4 6087 	str.w	r6, [r4, #135]	; 0x87
    6396:	f8dc 608b 	ldr.w	r6, [ip, #139]	; 0x8b
    639a:	f8c4 608b 	str.w	r6, [r4, #139]	; 0x8b
    639e:	f8dc c08f 	ldr.w	ip, [ip, #143]	; 0x8f
    63a2:	f8c4 c08f 	str.w	ip, [r4, #143]	; 0x8f
    63a6:	eb01 0c03 	add.w	ip, r1, r3
    63aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    63ae:	f89c 4103 	ldrb.w	r4, [ip, #259]	; 0x103
    63b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    63b6:	f885 4103 	strb.w	r4, [r5, #259]	; 0x103
    63ba:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    63be:	f8d3 410b 	ldr.w	r4, [r3, #267]	; 0x10b
    63c2:	f8c0 410b 	str.w	r4, [r0, #267]	; 0x10b
    63c6:	f8b3 310f 	ldrh.w	r3, [r3, #271]	; 0x10f
    63ca:	f8a0 310f 	strh.w	r3, [r0, #271]	; 0x10f
    63ce:	f89c 013b 	ldrb.w	r0, [ip, #315]	; 0x13b
    63d2:	f885 013b 	strb.w	r0, [r5, #315]	; 0x13b
    63d6:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    63da:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    63de:	f010 0f01 	tst.w	r0, #1
    63e2:	bf1c      	itt	ne
    63e4:	bc70      	popne	{r4, r5, r6}
    63e6:	4770      	bxne	lr
    63e8:	2000      	movs	r0, #0
    63ea:	788c      	ldrb	r4, [r1, #2]
    63ec:	2c00      	cmp	r4, #0
    63ee:	d90d      	bls.n	640c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    63f0:	180b      	adds	r3, r1, r0
    63f2:	f893 c103 	ldrb.w	ip, [r3, #259]	; 0x103
    63f6:	4594      	cmp	ip, r2
    63f8:	d104      	bne.n	6404 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ac>
    63fa:	2810      	cmp	r0, #16
    63fc:	bf1c      	itt	ne
    63fe:	bc70      	popne	{r4, r5, r6}
    6400:	4770      	bxne	lr
    6402:	e003      	b.n	640c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1b4>
    6404:	1c40      	adds	r0, r0, #1
    6406:	b2c0      	uxtb	r0, r0
    6408:	4284      	cmp	r4, r0
    640a:	d8f1      	bhi.n	63f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    640c:	7808      	ldrb	r0, [r1, #0]
    640e:	1e40      	subs	r0, r0, #1
    6410:	b2c0      	uxtb	r0, r0
    6412:	7008      	strb	r0, [r1, #0]
    6414:	4290      	cmp	r0, r2
    6416:	bf04      	itt	eq
    6418:	bc70      	popeq	{r4, r5, r6}
    641a:	4770      	bxeq	lr
    641c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    6420:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6424:	f8d0 c153 	ldr.w	ip, [r0, #339]	; 0x153
    6428:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    642c:	f8d0 0157 	ldr.w	r0, [r0, #343]	; 0x157
    6430:	f8c3 0157 	str.w	r0, [r3, #343]	; 0x157
    6434:	788c      	ldrb	r4, [r1, #2]
    6436:	780b      	ldrb	r3, [r1, #0]
    6438:	2000      	movs	r0, #0
    643a:	2c00      	cmp	r4, #0
    643c:	bf9c      	itt	ls
    643e:	bc70      	popls	{r4, r5, r6}
    6440:	4770      	bxls	lr
    6442:	bf00      	nop
    6444:	eb01 0c00 	add.w	ip, r1, r0
    6448:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    644c:	459c      	cmp	ip, r3
    644e:	d106      	bne.n	645e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x206>
    6450:	2810      	cmp	r0, #16
    6452:	bf1c      	itt	ne
    6454:	4408      	addne	r0, r1
    6456:	f880 2103 	strbne.w	r2, [r0, #259]	; 0x103
    645a:	bc70      	pop	{r4, r5, r6}
    645c:	4770      	bx	lr
    645e:	1c40      	adds	r0, r0, #1
    6460:	b2c0      	uxtb	r0, r0
    6462:	4284      	cmp	r4, r0
    6464:	d8ee      	bhi.n	6444 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ec>
    6466:	bc70      	pop	{r4, r5, r6}
    6468:	4770      	bx	lr
    646a:	0000      	.short	0x0000
    646c:	20001ac9 	.word	0x20001ac9
    6470:	4925      	ldr	r1, [pc, #148]	; (6508 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2b0>)
    6472:	b410      	push	{r4}
    6474:	784a      	ldrb	r2, [r1, #1]
    6476:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    647a:	1e52      	subs	r2, r2, #1
    647c:	704a      	strb	r2, [r1, #1]
    647e:	2200      	movs	r2, #0
    6480:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6484:	f891 c002 	ldrb.w	ip, [r1, #2]
    6488:	f1bc 0f00 	cmp.w	ip, #0
    648c:	d90d      	bls.n	64aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    648e:	188b      	adds	r3, r1, r2
    6490:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    6494:	4284      	cmp	r4, r0
    6496:	d104      	bne.n	64a2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24a>
    6498:	2a10      	cmp	r2, #16
    649a:	bf1c      	itt	ne
    649c:	bc10      	popne	{r4}
    649e:	4770      	bxne	lr
    64a0:	e003      	b.n	64aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x252>
    64a2:	1c52      	adds	r2, r2, #1
    64a4:	b2d2      	uxtb	r2, r2
    64a6:	4594      	cmp	ip, r2
    64a8:	d8f1      	bhi.n	648e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x236>
    64aa:	780a      	ldrb	r2, [r1, #0]
    64ac:	1e52      	subs	r2, r2, #1
    64ae:	b2d2      	uxtb	r2, r2
    64b0:	700a      	strb	r2, [r1, #0]
    64b2:	4282      	cmp	r2, r0
    64b4:	bf04      	itt	eq
    64b6:	bc10      	popeq	{r4}
    64b8:	4770      	bxeq	lr
    64ba:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    64be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    64c2:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    64c6:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    64ca:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    64ce:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    64d2:	788c      	ldrb	r4, [r1, #2]
    64d4:	f891 c000 	ldrb.w	ip, [r1]
    64d8:	2200      	movs	r2, #0
    64da:	2c00      	cmp	r4, #0
    64dc:	bf9c      	itt	ls
    64de:	bc10      	popls	{r4}
    64e0:	4770      	bxls	lr
    64e2:	188b      	adds	r3, r1, r2
    64e4:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    64e8:	4563      	cmp	r3, ip
    64ea:	d106      	bne.n	64fa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x2a2>
    64ec:	2a10      	cmp	r2, #16
    64ee:	bf1c      	itt	ne
    64f0:	4411      	addne	r1, r2
    64f2:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    64f6:	bc10      	pop	{r4}
    64f8:	4770      	bx	lr
    64fa:	1c52      	adds	r2, r2, #1
    64fc:	b2d2      	uxtb	r2, r2
    64fe:	4294      	cmp	r4, r2
    6500:	d8ef      	bhi.n	64e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x28a>
    6502:	bc10      	pop	{r4}
    6504:	4770      	bx	lr
    6506:	0000      	.short	0x0000
    6508:	20001ac9 	.word	0x20001ac9

0000650c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    650c:	b570      	push	{r4, r5, r6, lr}
    650e:	b08c      	sub	sp, #48	; 0x30
    6510:	f100 0410 	add.w	r4, r0, #16
    6514:	461d      	mov	r5, r3
    6516:	4616      	mov	r6, r2
    6518:	f10d 3cff 	add.w	ip, sp, #4294967295	; 0xffffffff
    651c:	f05f 0008 	movs.w	r0, #8
    6520:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    6524:	f88c 2001 	strb.w	r2, [ip, #1]
    6528:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    652c:	f80c 2f02 	strb.w	r2, [ip, #2]!
    6530:	1e40      	subs	r0, r0, #1
    6532:	d1f5      	bne.n	6520 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    6534:	f101 0c10 	add.w	ip, r1, #16
    6538:	466c      	mov	r4, sp
    653a:	f10d 010f 	add.w	r1, sp, #15
    653e:	2008      	movs	r0, #8
    6540:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    6544:	704a      	strb	r2, [r1, #1]
    6546:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    654a:	f801 2f02 	strb.w	r2, [r1, #2]!
    654e:	1e40      	subs	r0, r0, #1
    6550:	d1f6      	bne.n	6540 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    6552:	4620      	mov	r0, r4
    6554:	f009 fdf5 	bl	10142 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    6558:	b17e      	cbz	r6, 657a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    655a:	1e6a      	subs	r2, r5, #1
    655c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6560:	f05f 0108 	movs.w	r1, #8
    6564:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6568:	7053      	strb	r3, [r2, #1]
    656a:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    656e:	f802 3f02 	strb.w	r3, [r2, #2]!
    6572:	1e49      	subs	r1, r1, #1
    6574:	d1f6      	bne.n	6564 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    6576:	b00c      	add	sp, #48	; 0x30
    6578:	bd70      	pop	{r4, r5, r6, pc}
    657a:	9808      	ldr	r0, [sp, #32]
    657c:	6028      	str	r0, [r5, #0]
    657e:	9809      	ldr	r0, [sp, #36]	; 0x24
    6580:	6068      	str	r0, [r5, #4]
    6582:	980a      	ldr	r0, [sp, #40]	; 0x28
    6584:	60a8      	str	r0, [r5, #8]
    6586:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6588:	60e8      	str	r0, [r5, #12]
    658a:	b00c      	add	sp, #48	; 0x30
    658c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006590 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>:
    6590:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    6594:	7e44      	ldrb	r4, [r0, #25]
    6596:	b10c      	cbz	r4, 659c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xc>
    6598:	2c25      	cmp	r4, #37	; 0x25
    659a:	d903      	bls.n	65a4 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x14>
    659c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    65a0:	2012      	movs	r0, #18
    65a2:	4770      	bx	lr
    65a4:	2a00      	cmp	r2, #0
    65a6:	bf02      	ittt	eq
    65a8:	2000      	moveq	r0, #0
    65aa:	e8bd 03f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9}
    65ae:	4770      	bxeq	lr
    65b0:	f891 c011 	ldrb.w	ip, [r1, #17]
    65b4:	261f      	movs	r6, #31
    65b6:	2301      	movs	r3, #1
    65b8:	4d6c      	ldr	r5, [pc, #432]	; (676c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    65ba:	f04f 0800 	mov.w	r8, #0
    65be:	f1bc 0f00 	cmp.w	ip, #0
    65c2:	d073      	beq.n	66ac <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    65c4:	f1bc 0f01 	cmp.w	ip, #1
    65c8:	bf1e      	ittt	ne
    65ca:	201f      	movne	r0, #31
    65cc:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    65d0:	4770      	bxne	lr
    65d2:	f8b0 c000 	ldrh.w	ip, [r0]
    65d6:	7d0a      	ldrb	r2, [r1, #20]
    65d8:	7c8f      	ldrb	r7, [r1, #18]
    65da:	f891 9013 	ldrb.w	r9, [r1, #19]
    65de:	407a      	eors	r2, r7
    65e0:	7d4f      	ldrb	r7, [r1, #21]
    65e2:	ea87 0709 	eor.w	r7, r7, r9
    65e6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    65ea:	ea82 0c0c 	eor.w	ip, r2, ip
    65ee:	2700      	movs	r7, #0
    65f0:	f00c 09ff 	and.w	r9, ip, #255	; 0xff
    65f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    65f8:	fa99 f9a9 	rbit	r9, r9
    65fc:	fa9c fcac 	rbit	ip, ip
    6600:	ea4f 6919 	mov.w	r9, r9, lsr #24
    6604:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    6608:	ea49 2c0c 	orr.w	ip, r9, ip, lsl #8
    660c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
    6610:	1c7f      	adds	r7, r7, #1
    6612:	4494      	add	ip, r2
    6614:	b2ff      	uxtb	r7, r7
    6616:	fa1f fc8c 	uxth.w	ip, ip
    661a:	2f03      	cmp	r7, #3
    661c:	d3e8      	bcc.n	65f0 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x60>
    661e:	ea8c 0c02 	eor.w	ip, ip, r2
    6622:	4f52      	ldr	r7, [pc, #328]	; (676c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    6624:	2200      	movs	r2, #0
    6626:	fbec 7205 	umlal	r7, r2, ip, r5
    662a:	0912      	lsrs	r2, r2, #4
    662c:	f06f 0524 	mvn.w	r5, #36	; 0x24
    6630:	fb02 c205 	mla	r2, r2, r5, ip
    6634:	b2d2      	uxtb	r2, r2
    6636:	eb01 07d2 	add.w	r7, r1, r2, lsr #3
    663a:	7682      	strb	r2, [r0, #26]
    663c:	f002 0507 	and.w	r5, r2, #7
    6640:	7b3f      	ldrb	r7, [r7, #12]
    6642:	fa03 f505 	lsl.w	r5, r3, r5
    6646:	422f      	tst	r7, r5
    6648:	bf18      	it	ne
    664a:	76c2      	strbne	r2, [r0, #27]
    664c:	d17e      	bne.n	674c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1bc>
    664e:	fb04 f20c 	mul.w	r2, r4, ip
    6652:	0c12      	lsrs	r2, r2, #16
    6654:	1c52      	adds	r2, r2, #1
    6656:	b2d2      	uxtb	r2, r2
    6658:	f05f 0400 	movs.w	r4, #0
    665c:	eb00 0c04 	add.w	ip, r0, r4
    6660:	f89c c014 	ldrb.w	ip, [ip, #20]
    6664:	4594      	cmp	ip, r2
    6666:	bf3c      	itt	cc
    6668:	eba2 020c 	subcc.w	r2, r2, ip
    666c:	b2d2      	uxtbcc	r2, r2
    666e:	d312      	bcc.n	6696 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x106>
    6670:	190d      	adds	r5, r1, r4
    6672:	f04f 0c00 	mov.w	ip, #0
    6676:	7b2d      	ldrb	r5, [r5, #12]
    6678:	fa03 f70c 	lsl.w	r7, r3, ip
    667c:	423d      	tst	r5, r7
    667e:	bf1c      	itt	ne
    6680:	1e52      	subne	r2, r2, #1
    6682:	b2d2      	uxtbne	r2, r2
    6684:	2a00      	cmp	r2, #0
    6686:	d069      	beq.n	675c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1cc>
    6688:	f10c 0c01 	add.w	ip, ip, #1
    668c:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6690:	f1bc 0f08 	cmp.w	ip, #8
    6694:	d3f0      	bcc.n	6678 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xe8>
    6696:	f104 0c01 	add.w	ip, r4, #1
    669a:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    669e:	2c05      	cmp	r4, #5
    66a0:	d3dc      	bcc.n	665c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0xcc>
    66a2:	4630      	mov	r0, r6
    66a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    66a8:	4770      	bx	lr
    66aa:	e7ff      	b.n	66ac <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x11c>
    66ac:	f890 c01a 	ldrb.w	ip, [r0, #26]
    66b0:	f891 4020 	ldrb.w	r4, [r1, #32]
    66b4:	4647      	mov	r7, r8
    66b6:	fb04 c202 	mla	r2, r4, r2, ip
    66ba:	4c2c      	ldr	r4, [pc, #176]	; (676c <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1dc>)
    66bc:	f04f 0c00 	mov.w	ip, #0
    66c0:	fbe2 4c05 	umlal	r4, ip, r2, r5
    66c4:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    66c8:	f06f 0424 	mvn.w	r4, #36	; 0x24
    66cc:	fb0c 2204 	mla	r2, ip, r4, r2
    66d0:	b2d2      	uxtb	r2, r2
    66d2:	eb01 04d2 	add.w	r4, r1, r2, lsr #3
    66d6:	7682      	strb	r2, [r0, #26]
    66d8:	f002 0c07 	and.w	ip, r2, #7
    66dc:	7b24      	ldrb	r4, [r4, #12]
    66de:	fa03 fc0c 	lsl.w	ip, r3, ip
    66e2:	ea14 0f0c 	tst.w	r4, ip
    66e6:	bf1f      	itttt	ne
    66e8:	76c2      	strbne	r2, [r0, #27]
    66ea:	4640      	movne	r0, r8
    66ec:	e8bd 03f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9}
    66f0:	4770      	bxne	lr
    66f2:	f890 c019 	ldrb.w	ip, [r0, #25]
    66f6:	fbb2 f4fc 	udiv	r4, r2, ip
    66fa:	fb0c 2214 	mls	r2, ip, r4, r2
    66fe:	1c52      	adds	r2, r2, #1
    6700:	b2d2      	uxtb	r2, r2
    6702:	2400      	movs	r4, #0
    6704:	eb00 0c04 	add.w	ip, r0, r4
    6708:	f89c c014 	ldrb.w	ip, [ip, #20]
    670c:	4594      	cmp	ip, r2
    670e:	bf3c      	itt	cc
    6710:	eba2 020c 	subcc.w	r2, r2, ip
    6714:	b2d2      	uxtbcc	r2, r2
    6716:	d312      	bcc.n	673e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1ae>
    6718:	190d      	adds	r5, r1, r4
    671a:	f04f 0c00 	mov.w	ip, #0
    671e:	7b2d      	ldrb	r5, [r5, #12]
    6720:	fa03 f80c 	lsl.w	r8, r3, ip
    6724:	ea15 0f08 	tst.w	r5, r8
    6728:	bf1c      	itt	ne
    672a:	1e52      	subne	r2, r2, #1
    672c:	b2d2      	uxtbne	r2, r2
    672e:	b172      	cbz	r2, 674e <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1be>
    6730:	f10c 0c01 	add.w	ip, ip, #1
    6734:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6738:	f1bc 0f08 	cmp.w	ip, #8
    673c:	d3f0      	bcc.n	6720 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x190>
    673e:	f104 0c01 	add.w	ip, r4, #1
    6742:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    6746:	2c05      	cmp	r4, #5
    6748:	d3dc      	bcc.n	6704 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x174>
    674a:	e7aa      	b.n	66a2 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x112>
    674c:	e009      	b.n	6762 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA+0x1d2>
    674e:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    6752:	76c1      	strb	r1, [r0, #27]
    6754:	4638      	mov	r0, r7
    6756:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    675a:	4770      	bx	lr
    675c:	eb0c 01c4 	add.w	r1, ip, r4, lsl #3
    6760:	76c1      	strb	r1, [r0, #27]
    6762:	4640      	mov	r0, r8
    6764:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    6768:	4770      	bx	lr
    676a:	0000      	.short	0x0000
    676c:	6eb3e453 	.word	0x6eb3e453

00006770 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6774:	2701      	movs	r7, #1
    6776:	4604      	mov	r4, r0
    6778:	2500      	movs	r5, #0
    677a:	b169      	cbz	r1, 6798 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    677c:	2901      	cmp	r1, #1
    677e:	d05d      	beq.n	683c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>
    6780:	2902      	cmp	r1, #2
    6782:	d07c      	beq.n	687e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10e>
    6784:	2903      	cmp	r1, #3
    6786:	bf18      	it	ne
    6788:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    678c:	4601      	mov	r1, r0
    678e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6792:	3078      	adds	r0, #120	; 0x78
    6794:	f00a b818 	b.w	107c8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    6798:	f104 0678 	add.w	r6, r4, #120	; 0x78
    679c:	2288      	movs	r2, #136	; 0x88
    679e:	2100      	movs	r1, #0
    67a0:	4630      	mov	r0, r6
    67a2:	f008 fb97 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    67a6:	71b5      	strb	r5, [r6, #6]
    67a8:	71f5      	strb	r5, [r6, #7]
    67aa:	7335      	strb	r5, [r6, #12]
    67ac:	7375      	strb	r5, [r6, #13]
    67ae:	73f5      	strb	r5, [r6, #15]
    67b0:	7435      	strb	r5, [r6, #16]
    67b2:	7175      	strb	r5, [r6, #5]
    67b4:	76b5      	strb	r5, [r6, #26]
    67b6:	76f5      	strb	r5, [r6, #27]
    67b8:	f006 fd86 	bl	d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    67bc:	f644 112b 	movw	r1, #18731	; 0x492b
    67c0:	4008      	ands	r0, r1
    67c2:	f886 0046 	strb.w	r0, [r6, #70]	; 0x46
    67c6:	0a00      	lsrs	r0, r0, #8
    67c8:	f886 0047 	strb.w	r0, [r6, #71]	; 0x47
    67cc:	20fe      	movs	r0, #254	; 0xfe
    67ce:	f886 007c 	strb.w	r0, [r6, #124]	; 0x7c
    67d2:	8826      	ldrh	r6, [r4, #0]
    67d4:	2274      	movs	r2, #116	; 0x74
    67d6:	2100      	movs	r1, #0
    67d8:	4620      	mov	r0, r4
    67da:	f008 fb7b 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    67de:	8026      	strh	r6, [r4, #0]
    67e0:	2101      	movs	r1, #1
    67e2:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    67e6:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
    67ea:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    67ee:	2100      	movs	r1, #0
    67f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    67f4:	f00a fb52 	bl	10e9c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    67f8:	221b      	movs	r2, #27
    67fa:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    67fe:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    6802:	66e5      	str	r5, [r4, #108]	; 0x6c
    6804:	6725      	str	r5, [r4, #112]	; 0x70
    6806:	7467      	strb	r7, [r4, #17]
    6808:	2280      	movs	r2, #128	; 0x80
    680a:	2100      	movs	r1, #0
    680c:	f504 7080 	add.w	r0, r4, #256	; 0x100
    6810:	f008 fb60 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6814:	4842      	ldr	r0, [pc, #264]	; (6920 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b0>)
    6816:	6060      	str	r0, [r4, #4]
    6818:	2212      	movs	r2, #18
    681a:	2100      	movs	r1, #0
    681c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    6820:	f008 fb58 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6824:	f884 5181 	strb.w	r5, [r4, #385]	; 0x181
    6828:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
    682c:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
    6830:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    6834:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
    6838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    683c:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
    6840:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
    6844:	6861      	ldr	r1, [r4, #4]
    6846:	4837      	ldr	r0, [pc, #220]	; (6924 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x1b4>)
    6848:	460a      	mov	r2, r1
    684a:	4408      	add	r0, r1
    684c:	fbb0 f0f1 	udiv	r0, r0, r1
    6850:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    6854:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6858:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    685c:	8963      	ldrh	r3, [r4, #10]
    685e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6862:	f000 f8bb 	bl	69dc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    6866:	4621      	mov	r1, r4
    6868:	f104 0078 	add.w	r0, r4, #120	; 0x78
    686c:	f009 ffac 	bl	107c8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x14>
    6870:	f008 fafc 	bl	ee6c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6874:	b3f0      	cbz	r0, 68f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x184>
    6876:	f8d4 1012 	ldr.w	r1, [r4, #18]
    687a:	0c08      	lsrs	r0, r1, #16
    687c:	e000      	b.n	6880 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x110>
    687e:	e045      	b.n	690c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19c>
    6880:	f06f 021f 	mvn.w	r2, #31
    6884:	ea02 2291 	and.w	r2, r2, r1, lsr #10
    6888:	261f      	movs	r6, #31
    688a:	f5a0 41aa 	sub.w	r1, r0, #21760	; 0x5500
    688e:	3954      	subs	r1, #84	; 0x54
    6890:	bf1c      	itt	ne
    6892:	f5a0 41aa 	subne.w	r1, r0, #21760	; 0x5500
    6896:	f1b1 0155 	subsne.w	r1, r1, #85	; 0x55
    689a:	d00a      	beq.n	68b2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x142>
    689c:	f5a0 5128 	sub.w	r1, r0, #10752	; 0x2a00
    68a0:	39aa      	subs	r1, #170	; 0xaa
    68a2:	bf1e      	ittt	ne
    68a4:	f5a0 412a 	subne.w	r1, r0, #43520	; 0xaa00
    68a8:	f1b1 01aa 	subsne.w	r1, r1, #170	; 0xaa
    68ac:	f04f 0901 	movne.w	r9, #1
    68b0:	d101      	bne.n	68b6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x146>
    68b2:	f04f 0900 	mov.w	r9, #0
    68b6:	f04f 0c00 	mov.w	ip, #0
    68ba:	4663      	mov	r3, ip
    68bc:	ea4f 010c 	mov.w	r1, ip
    68c0:	ea8c 0800 	eor.w	r8, ip, r0
    68c4:	ea6f 0808 	mvn.w	r8, r8
    68c8:	ea48 0803 	orr.w	r8, r8, r3
    68cc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    68d0:	d018      	beq.n	6904 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    68d2:	f002 0801 	and.w	r8, r2, #1
    68d6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    68da:	ea4c 3cc8 	orr.w	ip, ip, r8, lsl #15
    68de:	f006 0801 	and.w	r8, r6, #1
    68e2:	085b      	lsrs	r3, r3, #1
    68e4:	0852      	lsrs	r2, r2, #1
    68e6:	0876      	lsrs	r6, r6, #1
    68e8:	1c49      	adds	r1, r1, #1
    68ea:	ea43 33c8 	orr.w	r3, r3, r8, lsl #15
    68ee:	2916      	cmp	r1, #22
    68f0:	d3e6      	bcc.n	68c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x150>
    68f2:	e000      	b.n	68f6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x186>
    68f4:	e002      	b.n	68fc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x18c>
    68f6:	f1b9 0f00 	cmp.w	r9, #0
    68fa:	d003      	beq.n	6904 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    68fc:	f884 5180 	strb.w	r5, [r4, #384]	; 0x180
    6900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6904:	f884 7180 	strb.w	r7, [r4, #384]	; 0x180
    6908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    690c:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6910:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6914:	6861      	ldr	r1, [r4, #4]
    6916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    691a:	3078      	adds	r0, #120	; 0x78
    691c:	f000 b85e 	b.w	69dc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    6920:	003d0900 	.word	0x003d0900
    6924:	01c9c37f 	.word	0x01c9c37f

00006928 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    6928:	2a00      	cmp	r2, #0
    692a:	bf08      	it	eq
    692c:	4770      	bxeq	lr
    692e:	4411      	add	r1, r2
    6930:	1e40      	subs	r0, r0, #1
    6932:	f012 0f01 	tst.w	r2, #1
    6936:	d003      	beq.n	6940 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x18>
    6938:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    693c:	f800 3f01 	strb.w	r3, [r0, #1]!
    6940:	0852      	lsrs	r2, r2, #1
    6942:	bf08      	it	eq
    6944:	4770      	bxeq	lr
    6946:	bf00      	nop
    6948:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    694c:	7043      	strb	r3, [r0, #1]
    694e:	f811 3d02 	ldrb.w	r3, [r1, #-2]!
    6952:	f800 3f02 	strb.w	r3, [r0, #2]!
    6956:	1e52      	subs	r2, r2, #1
    6958:	d1f6      	bne.n	6948 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x20>
    695a:	4770      	bx	lr

0000695c <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>:
    695c:	b510      	push	{r4, lr}
    695e:	2820      	cmp	r0, #32
    6960:	bf3e      	ittt	cc
    6962:	4904      	ldrcc	r1, [pc, #16]	; (6974 <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ+0x18>)
    6964:	f831 0010 	ldrhcc.w	r0, [r1, r0, lsl #1]
    6968:	bd10      	popcc	{r4, pc}
    696a:	f240 1187 	movw	r1, #391	; 0x187
    696e:	2029      	movs	r0, #41	; 0x29
    6970:	f7fd f908 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6974:	200019b6 	.word	0x200019b6

00006978 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>:
    6978:	b510      	push	{r4, lr}
    697a:	2820      	cmp	r0, #32
    697c:	bf3e      	ittt	cc
    697e:	4a04      	ldrcc	r2, [pc, #16]	; (6990 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ+0x18>)
    6980:	f822 1010 	strhcc.w	r1, [r2, r0, lsl #1]
    6984:	bd10      	popcc	{r4, pc}
    6986:	f240 118d 	movw	r1, #397	; 0x18d
    698a:	2029      	movs	r0, #41	; 0x29
    698c:	f7fd f8fa 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6990:	200019b6 	.word	0x200019b6

00006994 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    6994:	b430      	push	{r4, r5}
    6996:	2200      	movs	r2, #0
    6998:	f1a1 0c01 	sub.w	ip, r1, #1
    699c:	f1bc 0f00 	cmp.w	ip, #0
    69a0:	dd12      	ble.n	69c8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    69a2:	1e43      	subs	r3, r0, #1
    69a4:	f011 0f01 	tst.w	r1, #1
    69a8:	bf08      	it	eq
    69aa:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    69ae:	785c      	ldrb	r4, [r3, #1]
    69b0:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    69b4:	d008      	beq.n	69c8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    69b6:	bf00      	nop
    69b8:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    69bc:	4322      	orrs	r2, r4
    69be:	785c      	ldrb	r4, [r3, #1]
    69c0:	432a      	orrs	r2, r5
    69c2:	f1bc 0c01 	subs.w	ip, ip, #1
    69c6:	d1f7      	bne.n	69b8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    69c8:	1e49      	subs	r1, r1, #1
    69ca:	bf5c      	itt	pl
    69cc:	5c40      	ldrbpl	r0, [r0, r1]
    69ce:	4302      	orrpl	r2, r0
    69d0:	2a00      	cmp	r2, #0
    69d2:	bf0c      	ite	eq
    69d4:	2001      	moveq	r0, #1
    69d6:	2000      	movne	r0, #0
    69d8:	bc30      	pop	{r4, r5}
    69da:	4770      	bx	lr
    69dc:	b410      	push	{r4}
    69de:	f04f 0c00 	mov.w	ip, #0
    69e2:	f8a0 c02e 	strh.w	ip, [r0, #46]	; 0x2e
    69e6:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
    69ea:	4c16      	ldr	r4, [pc, #88]	; (6a44 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb0>)
    69ec:	fb0c fc01 	mul.w	ip, ip, r1
    69f0:	fbbc fcf2 	udiv	ip, ip, r2
    69f4:	f8a0 c032 	strh.w	ip, [r0, #50]	; 0x32
    69f8:	f242 7c10 	movw	ip, #10000	; 0x2710
    69fc:	fb03 f30c 	mul.w	r3, r3, ip
    6a00:	fbb3 f3f2 	udiv	r3, r3, r2
    6a04:	1c5b      	adds	r3, r3, #1
    6a06:	b29b      	uxth	r3, r3
    6a08:	fb03 fc02 	mul.w	ip, r3, r2
    6a0c:	8603      	strh	r3, [r0, #48]	; 0x30
    6a0e:	45a4      	cmp	ip, r4
    6a10:	bf84      	itt	hi
    6a12:	1e5b      	subhi	r3, r3, #1
    6a14:	8603      	strhhi	r3, [r0, #48]	; 0x30
    6a16:	4b0c      	ldr	r3, [pc, #48]	; (6a48 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb4>)
    6a18:	f240 2c71 	movw	ip, #625	; 0x271
    6a1c:	fbb3 f3f2 	udiv	r3, r3, r2
    6a20:	1c5b      	adds	r3, r3, #1
    6a22:	86c3      	strh	r3, [r0, #54]	; 0x36
    6a24:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    6a26:	fb03 f30c 	mul.w	r3, r3, ip
    6a2a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6a2e:	1e5b      	subs	r3, r3, #1
    6a30:	fbb3 f3f2 	udiv	r3, r3, r2
    6a34:	6243      	str	r3, [r0, #36]	; 0x24
    6a36:	6a03      	ldr	r3, [r0, #32]
    6a38:	4359      	muls	r1, r3
    6a3a:	fbb1 f1f2 	udiv	r1, r1, r2
    6a3e:	6201      	str	r1, [r0, #32]
    6a40:	bc10      	pop	{r4}
    6a42:	4770      	bx	lr
    6a44:	01e84800 	.word	0x01e84800
    6a48:	02625a00 	.word	0x02625a00
    6a4c:	78c3      	ldrb	r3, [r0, #3]
    6a4e:	4602      	mov	r2, r0
    6a50:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    6a54:	bf08      	it	eq
    6a56:	4770      	bxeq	lr
    6a58:	2005      	movs	r0, #5
    6a5a:	7912      	ldrb	r2, [r2, #4]
    6a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a60:	f012 0f01 	tst.w	r2, #1
    6a64:	d037      	beq.n	6ad6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x142>
    6a66:	2900      	cmp	r1, #0
    6a68:	bf14      	ite	ne
    6a6a:	200b      	movne	r0, #11
    6a6c:	4770      	bxeq	lr
    6a6e:	bf00      	nop
    6a70:	f012 0f02 	tst.w	r2, #2
    6a74:	d032      	beq.n	6adc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x148>
    6a76:	2901      	cmp	r1, #1
    6a78:	bf14      	ite	ne
    6a7a:	1d80      	addne	r0, r0, #6
    6a7c:	4770      	bxeq	lr
    6a7e:	bf00      	nop
    6a80:	f012 0f04 	tst.w	r2, #4
    6a84:	d02d      	beq.n	6ae2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x14e>
    6a86:	2902      	cmp	r1, #2
    6a88:	bf14      	ite	ne
    6a8a:	1c40      	addne	r0, r0, #1
    6a8c:	4770      	bxeq	lr
    6a8e:	bf00      	nop
    6a90:	f012 0f08 	tst.w	r2, #8
    6a94:	d028      	beq.n	6ae8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x154>
    6a96:	2903      	cmp	r1, #3
    6a98:	bf14      	ite	ne
    6a9a:	1c80      	addne	r0, r0, #2
    6a9c:	4770      	bxeq	lr
    6a9e:	bf00      	nop
    6aa0:	f012 0f10 	tst.w	r2, #16
    6aa4:	d023      	beq.n	6aee <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x15a>
    6aa6:	2904      	cmp	r1, #4
    6aa8:	bf14      	ite	ne
    6aaa:	1cc0      	addne	r0, r0, #3
    6aac:	4770      	bxeq	lr
    6aae:	bf00      	nop
    6ab0:	f012 0f20 	tst.w	r2, #32
    6ab4:	d01e      	beq.n	6af4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x160>
    6ab6:	2905      	cmp	r1, #5
    6ab8:	bf1a      	itte	ne
    6aba:	3012      	addne	r0, #18
    6abc:	b2c0      	uxtbne	r0, r0
    6abe:	4770      	bxeq	lr
    6ac0:	f012 0f40 	tst.w	r2, #64	; 0x40
    6ac4:	d019      	beq.n	6afa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x166>
    6ac6:	2906      	cmp	r1, #6
    6ac8:	bf1a      	itte	ne
    6aca:	1c40      	addne	r0, r0, #1
    6acc:	b2c0      	uxtbne	r0, r0
    6ace:	4770      	bxeq	lr
    6ad0:	2907      	cmp	r1, #7
    6ad2:	d118      	bne.n	6b06 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6ad4:	e014      	b.n	6b00 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x16c>
    6ad6:	2900      	cmp	r1, #0
    6ad8:	d1ca      	bne.n	6a70 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xdc>
    6ada:	e014      	b.n	6b06 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6adc:	2901      	cmp	r1, #1
    6ade:	d1cf      	bne.n	6a80 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xec>
    6ae0:	e011      	b.n	6b06 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6ae2:	2902      	cmp	r1, #2
    6ae4:	d1d4      	bne.n	6a90 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xfc>
    6ae6:	e00e      	b.n	6b06 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6ae8:	2903      	cmp	r1, #3
    6aea:	d1d9      	bne.n	6aa0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10c>
    6aec:	e00b      	b.n	6b06 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6aee:	2904      	cmp	r1, #4
    6af0:	d1de      	bne.n	6ab0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x11c>
    6af2:	e008      	b.n	6b06 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6af4:	2905      	cmp	r1, #5
    6af6:	d1e3      	bne.n	6ac0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x12c>
    6af8:	e005      	b.n	6b06 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6afa:	2906      	cmp	r1, #6
    6afc:	d1e8      	bne.n	6ad0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x13c>
    6afe:	e002      	b.n	6b06 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x172>
    6b00:	4283      	cmp	r3, r0
    6b02:	bf88      	it	hi
    6b04:	4770      	bxhi	lr
    6b06:	2000      	movs	r0, #0
    6b08:	4770      	bx	lr
	...

00006b0c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6b0c:	7841      	ldrb	r1, [r0, #1]
    6b0e:	b141      	cbz	r1, 6b22 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6b10:	78c0      	ldrb	r0, [r0, #3]
    6b12:	2819      	cmp	r0, #25
    6b14:	d203      	bcs.n	6b1e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6b16:	4a04      	ldr	r2, [pc, #16]	; (6b28 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6b18:	5c10      	ldrb	r0, [r2, r0]
    6b1a:	4288      	cmp	r0, r1
    6b1c:	d101      	bne.n	6b22 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6b1e:	2001      	movs	r0, #1
    6b20:	4770      	bx	lr
    6b22:	2000      	movs	r0, #0
    6b24:	4770      	bx	lr
    6b26:	0000      	.short	0x0000
    6b28:	0001242e 	.word	0x0001242e

00006b2c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6b2c:	a20c      	add	r2, pc, #48	; (adr r2, 6b60 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x34>)
    6b2e:	b082      	sub	sp, #8
    6b30:	e9d2 1200 	ldrd	r1, r2, [r2]
    6b34:	e9cd 1200 	strd	r1, r2, [sp]
    6b38:	7901      	ldrb	r1, [r0, #4]
    6b3a:	7940      	ldrb	r0, [r0, #5]
    6b3c:	f001 0207 	and.w	r2, r1, #7
    6b40:	4669      	mov	r1, sp
    6b42:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6b46:	2a01      	cmp	r2, #1
    6b48:	d807      	bhi.n	6b5a <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2e>
    6b4a:	f000 0007 	and.w	r0, r0, #7
    6b4e:	5c08      	ldrb	r0, [r1, r0]
    6b50:	2801      	cmp	r0, #1
    6b52:	bf9e      	ittt	ls
    6b54:	2001      	movls	r0, #1
    6b56:	b002      	addls	sp, #8
    6b58:	4770      	bxls	lr
    6b5a:	2000      	movs	r0, #0
    6b5c:	b002      	add	sp, #8
    6b5e:	4770      	bx	lr
    6b60:	02010100 	.word	0x02010100
    6b64:	03020201 	.word	0x03020201

00006b68 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6b68:	b510      	push	{r4, lr}
    6b6a:	2201      	movs	r2, #1
    6b6c:	70c1      	strb	r1, [r0, #3]
    6b6e:	2919      	cmp	r1, #25
    6b70:	bf3c      	itt	cc
    6b72:	4a06      	ldrcc	r2, [pc, #24]	; (6b8c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6b74:	5c52      	ldrbcc	r2, [r2, r1]
    6b76:	d306      	bcc.n	6b86 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6b78:	29ff      	cmp	r1, #255	; 0xff
    6b7a:	d004      	beq.n	6b86 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6b7c:	f240 31b3 	movw	r1, #947	; 0x3b3
    6b80:	202a      	movs	r0, #42	; 0x2a
    6b82:	f7fc ffff 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b86:	7042      	strb	r2, [r0, #1]
    6b88:	bd10      	pop	{r4, pc}
    6b8a:	0000      	.short	0x0000
    6b8c:	0001242e 	.word	0x0001242e

00006b90 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6b90:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b94:	b084      	sub	sp, #16
    6b96:	9804      	ldr	r0, [sp, #16]
    6b98:	b160      	cbz	r0, 6bb4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x24>
    6b9a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6cc0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x130>
    6b9e:	2102      	movs	r1, #2
    6ba0:	f508 7014 	add.w	r0, r8, #592	; 0x250
    6ba4:	f00a f81e 	bl	10be4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6ba8:	b148      	cbz	r0, 6bbe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2e>
    6baa:	f240 31c3 	movw	r1, #963	; 0x3c3
    6bae:	202b      	movs	r0, #43	; 0x2b
    6bb0:	f7fc ffe8 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bb4:	f240 31c2 	movw	r1, #962	; 0x3c2
    6bb8:	202b      	movs	r0, #43	; 0x2b
    6bba:	f7fc ffe3 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bbe:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6bc2:	9000      	str	r0, [sp, #0]
    6bc4:	2000      	movs	r0, #0
    6bc6:	f7fd f9b3 	bl	3f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6bca:	4604      	mov	r4, r0
    6bcc:	2001      	movs	r0, #1
    6bce:	f7fd f9af 	bl	3f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6bd2:	4420      	add	r0, r4
    6bd4:	f000 0bff 	and.w	fp, r0, #255	; 0xff
    6bd8:	f10b 0001 	add.w	r0, fp, #1
    6bdc:	f000 0aff 	and.w	sl, r0, #255	; 0xff
    6be0:	f04f 0900 	mov.w	r9, #0
    6be4:	4837      	ldr	r0, [pc, #220]	; (6cc4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x134>)
    6be6:	6801      	ldr	r1, [r0, #0]
    6be8:	b119      	cbz	r1, 6bf2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x62>
    6bea:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6bee:	4550      	cmp	r0, sl
    6bf0:	d006      	beq.n	6c00 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x70>
    6bf2:	4835      	ldr	r0, [pc, #212]	; (6cc8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x138>)
    6bf4:	6801      	ldr	r1, [r0, #0]
    6bf6:	b131      	cbz	r1, 6c06 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6bf8:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6bfc:	4558      	cmp	r0, fp
    6bfe:	d102      	bne.n	6c06 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x76>
    6c00:	9804      	ldr	r0, [sp, #16]
    6c02:	4788      	blx	r1
    6c04:	e006      	b.n	6c14 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x84>
    6c06:	4831      	ldr	r0, [pc, #196]	; (6ccc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x13c>)
    6c08:	6802      	ldr	r2, [r0, #0]
    6c0a:	b12a      	cbz	r2, 6c18 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6c0c:	f8b8 0250 	ldrh.w	r0, [r8, #592]	; 0x250
    6c10:	9904      	ldr	r1, [sp, #16]
    6c12:	4790      	blx	r2
    6c14:	2800      	cmp	r0, #0
    6c16:	d13b      	bne.n	6c90 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    6c18:	f508 7414 	add.w	r4, r8, #592	; 0x250
    6c1c:	2502      	movs	r5, #2
    6c1e:	2000      	movs	r0, #0
    6c20:	f7fd f986 	bl	3f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6c24:	4606      	mov	r6, r0
    6c26:	2001      	movs	r0, #1
    6c28:	f7fd f982 	bl	3f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6c2c:	4430      	add	r0, r6
    6c2e:	b2c7      	uxtb	r7, r0
    6c30:	2600      	movs	r6, #0
    6c32:	f117 0f02 	cmn.w	r7, #2
    6c36:	bf18      	it	ne
    6c38:	443d      	addne	r5, r7
    6c3a:	d014      	beq.n	6c66 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xd6>
    6c3c:	8820      	ldrh	r0, [r4, #0]
    6c3e:	1c40      	adds	r0, r0, #1
    6c40:	b280      	uxth	r0, r0
    6c42:	8020      	strh	r0, [r4, #0]
    6c44:	42a8      	cmp	r0, r5
    6c46:	bf28      	it	cs
    6c48:	f8a4 9000 	strhcs.w	r9, [r4]
    6c4c:	8820      	ldrh	r0, [r4, #0]
    6c4e:	42b8      	cmp	r0, r7
    6c50:	d301      	bcc.n	6c56 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xc6>
    6c52:	42a8      	cmp	r0, r5
    6c54:	d30b      	bcc.n	6c6e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    6c56:	a902      	add	r1, sp, #8
    6c58:	f009 fb46 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6c5c:	b138      	cbz	r0, 6c6e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xde>
    6c5e:	1c70      	adds	r0, r6, #1
    6c60:	b2c6      	uxtb	r6, r0
    6c62:	42b5      	cmp	r5, r6
    6c64:	d8ea      	bhi.n	6c3c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xac>
    6c66:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6c6a:	8020      	strh	r0, [r4, #0]
    6c6c:	e004      	b.n	6c78 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xe8>
    6c6e:	f8b8 1250 	ldrh.w	r1, [r8, #592]	; 0x250
    6c72:	9800      	ldr	r0, [sp, #0]
    6c74:	4281      	cmp	r1, r0
    6c76:	d1b5      	bne.n	6be4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x54>
    6c78:	4815      	ldr	r0, [pc, #84]	; (6cd0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x140>)
    6c7a:	6801      	ldr	r1, [r0, #0]
    6c7c:	b111      	cbz	r1, 6c84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xf4>
    6c7e:	9804      	ldr	r0, [sp, #16]
    6c80:	4788      	blx	r1
    6c82:	b928      	cbnz	r0, 6c90 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x100>
    6c84:	4813      	ldr	r0, [pc, #76]	; (6cd4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x144>)
    6c86:	6801      	ldr	r1, [r0, #0]
    6c88:	b131      	cbz	r1, 6c98 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    6c8a:	9804      	ldr	r0, [sp, #16]
    6c8c:	4788      	blx	r1
    6c8e:	b118      	cbz	r0, 6c98 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x108>
    6c90:	b005      	add	sp, #20
    6c92:	2001      	movs	r0, #1
    6c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c98:	f898 023f 	ldrb.w	r0, [r8, #575]	; 0x23f
    6c9c:	2800      	cmp	r0, #0
    6c9e:	bf04      	itt	eq
    6ca0:	b005      	addeq	sp, #20
    6ca2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ca6:	9804      	ldr	r0, [sp, #16]
    6ca8:	2121      	movs	r1, #33	; 0x21
    6caa:	f880 9001 	strb.w	r9, [r0, #1]
    6cae:	9804      	ldr	r0, [sp, #16]
    6cb0:	7001      	strb	r1, [r0, #0]
    6cb2:	f888 923f 	strb.w	r9, [r8, #575]	; 0x23f
    6cb6:	b005      	add	sp, #20
    6cb8:	2001      	movs	r0, #1
    6cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6cbe:	0000      	.short	0x0000
    6cc0:	20001244 	.word	0x20001244
    6cc4:	20000358 	.word	0x20000358
    6cc8:	20000368 	.word	0x20000368
    6ccc:	20000360 	.word	0x20000360
    6cd0:	20000370 	.word	0x20000370
    6cd4:	2000035c 	.word	0x2000035c

00006cd8 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    6cd8:	b510      	push	{r4, lr}
    6cda:	4604      	mov	r4, r0
    6cdc:	4815      	ldr	r0, [pc, #84]	; (6d34 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x5c>)
    6cde:	6801      	ldr	r1, [r0, #0]
    6ce0:	b329      	cbz	r1, 6d2e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6ce2:	4620      	mov	r0, r4
    6ce4:	4788      	blx	r1
    6ce6:	b310      	cbz	r0, 6d2e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x56>
    6ce8:	7820      	ldrb	r0, [r4, #0]
    6cea:	2814      	cmp	r0, #20
    6cec:	d002      	beq.n	6cf4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x1c>
    6cee:	2817      	cmp	r0, #23
    6cf0:	d003      	beq.n	6cfa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x22>
    6cf2:	e01a      	b.n	6d2a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6cf4:	7920      	ldrb	r0, [r4, #4]
    6cf6:	b928      	cbnz	r0, 6d04 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x2c>
    6cf8:	e017      	b.n	6d2a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6cfa:	7920      	ldrb	r0, [r4, #4]
    6cfc:	b1a8      	cbz	r0, 6d2a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6cfe:	f000 fe07 	bl	7910 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6d02:	b990      	cbnz	r0, 6d2a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d04:	88e4      	ldrh	r4, [r4, #6]
    6d06:	2101      	movs	r1, #1
    6d08:	4620      	mov	r0, r4
    6d0a:	f009 f9c8 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d0e:	b160      	cbz	r0, 6d2a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d10:	8800      	ldrh	r0, [r0, #0]
    6d12:	f7fe f813 	bl	4d3c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6d16:	2101      	movs	r1, #1
    6d18:	4620      	mov	r0, r4
    6d1a:	f7fd f981 	bl	4020 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6d1e:	b120      	cbz	r0, 6d2a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x52>
    6d20:	f240 1115 	movw	r1, #277	; 0x115
    6d24:	202b      	movs	r0, #43	; 0x2b
    6d26:	f7fc ff2d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d2a:	2001      	movs	r0, #1
    6d2c:	bd10      	pop	{r4, pc}
    6d2e:	2000      	movs	r0, #0
    6d30:	bd10      	pop	{r4, pc}
    6d32:	0000      	.short	0x0000
    6d34:	20000354 	.word	0x20000354

00006d38 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d3c:	b083      	sub	sp, #12
    6d3e:	460d      	mov	r5, r1
    6d40:	4606      	mov	r6, r0
    6d42:	4669      	mov	r1, sp
    6d44:	f009 fad0 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6d48:	2800      	cmp	r0, #0
    6d4a:	d17d      	bne.n	6e48 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6d4c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 6ed8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1a0>
    6d50:	f8df a188 	ldr.w	sl, [pc, #392]	; 6edc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1a4>
    6d54:	f05f 0700 	movs.w	r7, #0
    6d58:	f89d 0000 	ldrb.w	r0, [sp]
    6d5c:	b180      	cbz	r0, 6d80 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6d5e:	f000 fba9 	bl	74b4 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    6d62:	42b0      	cmp	r0, r6
    6d64:	d070      	beq.n	6e48 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6d66:	f8da 2000 	ldr.w	r2, [sl]
    6d6a:	b31a      	cbz	r2, 6db4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    6d6c:	4629      	mov	r1, r5
    6d6e:	4630      	mov	r0, r6
    6d70:	4790      	blx	r2
    6d72:	b1f8      	cbz	r0, 6db4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x7c>
    6d74:	4628      	mov	r0, r5
    6d76:	f000 f9e9 	bl	714c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6d7a:	2800      	cmp	r0, #0
    6d7c:	d1ec      	bne.n	6d58 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6d7e:	e0a2      	b.n	6ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6d80:	f005 f9d2 	bl	c128 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    6d84:	42b0      	cmp	r0, r6
    6d86:	d05f      	beq.n	6e48 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6d88:	f8d9 2000 	ldr.w	r2, [r9]
    6d8c:	b14a      	cbz	r2, 6da2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6d8e:	4629      	mov	r1, r5
    6d90:	4630      	mov	r0, r6
    6d92:	4790      	blx	r2
    6d94:	b128      	cbz	r0, 6da2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6d96:	4628      	mov	r0, r5
    6d98:	f000 f9d8 	bl	714c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6d9c:	2800      	cmp	r0, #0
    6d9e:	d1db      	bne.n	6d58 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6da0:	e091      	b.n	6ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6da2:	9801      	ldr	r0, [sp, #4]
    6da4:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6da8:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    6dac:	b968      	cbnz	r0, 6dca <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6dae:	7f20      	ldrb	r0, [r4, #28]
    6db0:	b940      	cbnz	r0, 6dc4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x8c>
    6db2:	e00a      	b.n	6dca <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6db4:	9801      	ldr	r0, [sp, #4]
    6db6:	f100 0478 	add.w	r4, r0, #120	; 0x78
    6dba:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
    6dbe:	b920      	cbnz	r0, 6dca <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6dc0:	7f20      	ldrb	r0, [r4, #28]
    6dc2:	b110      	cbz	r0, 6dca <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x92>
    6dc4:	f04f 0b01 	mov.w	fp, #1
    6dc8:	e001      	b.n	6dce <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x96>
    6dca:	f04f 0b00 	mov.w	fp, #0
    6dce:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
    6dd2:	2800      	cmp	r0, #0
    6dd4:	bf1c      	itt	ne
    6dd6:	f894 0040 	ldrbne.w	r0, [r4, #64]	; 0x40
    6dda:	f010 0f02 	tstne.w	r0, #2
    6dde:	d017      	beq.n	6e10 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd8>
    6de0:	706f      	strb	r7, [r5, #1]
    6de2:	f04f 0001 	mov.w	r0, #1
    6de6:	7028      	strb	r0, [r5, #0]
    6de8:	712f      	strb	r7, [r5, #4]
    6dea:	f8a5 6005 	strh.w	r6, [r5, #5]
    6dee:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    6df2:	71e8      	strb	r0, [r5, #7]
    6df4:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    6df8:	8128      	strh	r0, [r5, #8]
    6dfa:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    6dfe:	8168      	strh	r0, [r5, #10]
    6e00:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
    6e04:	4628      	mov	r0, r5
    6e06:	f000 f9a1 	bl	714c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6e0a:	2800      	cmp	r0, #0
    6e0c:	d1a4      	bne.n	6d58 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6e0e:	e05a      	b.n	6ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6e10:	4630      	mov	r0, r6
    6e12:	f7fd faa7 	bl	4364 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6e16:	ea5f 0800 	movs.w	r8, r0
    6e1a:	d01b      	beq.n	6e54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x11c>
    6e1c:	f008 fed8 	bl	fbd0 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6e20:	b1e8      	cbz	r0, 6e5e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x126>
    6e22:	706f      	strb	r7, [r5, #1]
    6e24:	210f      	movs	r1, #15
    6e26:	7029      	strb	r1, [r5, #0]
    6e28:	80ee      	strh	r6, [r5, #6]
    6e2a:	8128      	strh	r0, [r5, #8]
    6e2c:	2101      	movs	r1, #1
    6e2e:	1e40      	subs	r0, r0, #1
    6e30:	7129      	strb	r1, [r5, #4]
    6e32:	b284      	uxth	r4, r0
    6e34:	2200      	movs	r2, #0
    6e36:	4611      	mov	r1, r2
    6e38:	4640      	mov	r0, r8
    6e3a:	f009 f837 	bl	feac <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6e3e:	1e61      	subs	r1, r4, #1
    6e40:	b28c      	uxth	r4, r1
    6e42:	d2f7      	bcs.n	6e34 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xfc>
    6e44:	4628      	mov	r0, r5
    6e46:	e000      	b.n	6e4a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6e48:	e041      	b.n	6ece <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    6e4a:	f000 f97f 	bl	714c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6e4e:	2800      	cmp	r0, #0
    6e50:	d182      	bne.n	6d58 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6e52:	e038      	b.n	6ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x18e>
    6e54:	f44f 710f 	mov.w	r1, #572	; 0x23c
    6e58:	202b      	movs	r0, #43	; 0x2b
    6e5a:	f7fc fe93 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e5e:	4630      	mov	r0, r6
    6e60:	f7fd fa6a 	bl	4338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6e64:	b148      	cbz	r0, 6e7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x142>
    6e66:	f1bb 0f00 	cmp.w	fp, #0
    6e6a:	d030      	beq.n	6ece <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    6e6c:	f008 fd92 	bl	f994 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6e70:	b368      	cbz	r0, 6ece <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x196>
    6e72:	f89d 0000 	ldrb.w	r0, [sp]
    6e76:	b128      	cbz	r0, 6e84 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x14c>
    6e78:	e00b      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x15a>
    6e7a:	f240 215a 	movw	r1, #602	; 0x25a
    6e7e:	202b      	movs	r0, #43	; 0x2b
    6e80:	f7fc fe80 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e84:	9801      	ldr	r0, [sp, #4]
    6e86:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    6e8a:	8841      	ldrh	r1, [r0, #2]
    6e8c:	42b1      	cmp	r1, r6
    6e8e:	bf08      	it	eq
    6e90:	7007      	strbeq	r7, [r0, #0]
    6e92:	4630      	mov	r0, r6
    6e94:	f7fd ff52 	bl	4d3c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6e98:	2100      	movs	r1, #0
    6e9a:	4630      	mov	r0, r6
    6e9c:	f7fd f8c0 	bl	4020 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6ea0:	2101      	movs	r1, #1
    6ea2:	4630      	mov	r0, r6
    6ea4:	f7fd f8bc 	bl	4020 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6ea8:	706f      	strb	r7, [r5, #1]
    6eaa:	200c      	movs	r0, #12
    6eac:	7028      	strb	r0, [r5, #0]
    6eae:	712f      	strb	r7, [r5, #4]
    6eb0:	f8a5 6005 	strh.w	r6, [r5, #5]
    6eb4:	7f60      	ldrb	r0, [r4, #29]
    6eb6:	71e8      	strb	r0, [r5, #7]
    6eb8:	7727      	strb	r7, [r4, #28]
    6eba:	4628      	mov	r0, r5
    6ebc:	f000 f946 	bl	714c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x104>
    6ec0:	2800      	cmp	r0, #0
    6ec2:	f47f af49 	bne.w	6d58 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x20>
    6ec6:	b003      	add	sp, #12
    6ec8:	2001      	movs	r0, #1
    6eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ece:	b003      	add	sp, #12
    6ed0:	2000      	movs	r0, #0
    6ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ed6:	0000      	.short	0x0000
    6ed8:	20000364 	.word	0x20000364
    6edc:	2000036c 	.word	0x2000036c

00006ee0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ee4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 7044 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x164>
    6ee8:	4681      	mov	r9, r0
    6eea:	b085      	sub	sp, #20
    6eec:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6ef0:	468a      	mov	sl, r1
    6ef2:	b130      	cbz	r0, 6f02 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6ef4:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6ef8:	2800      	cmp	r0, #0
    6efa:	bf04      	itt	eq
    6efc:	b005      	addeq	sp, #20
    6efe:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f02:	2100      	movs	r1, #0
    6f04:	f208 204e 	addw	r0, r8, #590	; 0x24e
    6f08:	f009 fe6c 	bl	10be4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6f0c:	2800      	cmp	r0, #0
    6f0e:	d17a      	bne.n	7006 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x126>
    6f10:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6f14:	f04f 0b00 	mov.w	fp, #0
    6f18:	f8cd 0000 	str.w	r0, [sp]
    6f1c:	f8b8 024e 	ldrh.w	r0, [r8, #590]	; 0x24e
    6f20:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    6f24:	39ff      	subs	r1, #255	; 0xff
    6f26:	d057      	beq.n	6fd8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6f28:	f8a9 0000 	strh.w	r0, [r9]
    6f2c:	f889 b005 	strb.w	fp, [r9, #5]
    6f30:	f7fd fa02 	bl	4338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6f34:	4605      	mov	r5, r0
    6f36:	f008 fe79 	bl	fc2c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6f3a:	0004      	movs	r4, r0
    6f3c:	d04c      	beq.n	6fd8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf8>
    6f3e:	4601      	mov	r1, r0
    6f40:	aa01      	add	r2, sp, #4
    6f42:	4628      	mov	r0, r5
    6f44:	f008 fe97 	bl	fc76 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6f48:	f8a9 0002 	strh.w	r0, [r9, #2]
    6f4c:	b128      	cbz	r0, 6f5a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x7a>
    6f4e:	28fb      	cmp	r0, #251	; 0xfb
    6f50:	d907      	bls.n	6f62 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x82>
    6f52:	21c1      	movs	r1, #193	; 0xc1
    6f54:	202b      	movs	r0, #43	; 0x2b
    6f56:	f7fc fe15 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f5a:	21c0      	movs	r1, #192	; 0xc0
    6f5c:	202b      	movs	r0, #43	; 0x2b
    6f5e:	f7fc fe11 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f62:	9801      	ldr	r0, [sp, #4]
    6f64:	f009 fcc5 	bl	108f2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    6f68:	2101      	movs	r1, #1
    6f6a:	2801      	cmp	r0, #1
    6f6c:	bf08      	it	eq
    6f6e:	f889 1004 	strbeq.w	r1, [r9, #4]
    6f72:	d008      	beq.n	6f86 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6f74:	2802      	cmp	r0, #2
    6f76:	bf08      	it	eq
    6f78:	f889 0004 	strbeq.w	r0, [r9, #4]
    6f7c:	d003      	beq.n	6f86 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa6>
    6f7e:	21d0      	movs	r1, #208	; 0xd0
    6f80:	202b      	movs	r0, #43	; 0x2b
    6f82:	f7fc fdff 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f86:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    6f8a:	2003      	movs	r0, #3
    6f8c:	9000      	str	r0, [sp, #0]
    6f8e:	4652      	mov	r2, sl
    6f90:	4621      	mov	r1, r4
    6f92:	4628      	mov	r0, r5
    6f94:	f008 fc94 	bl	f8c0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    6f98:	4628      	mov	r0, r5
    6f9a:	f8c9 a008 	str.w	sl, [r9, #8]
    6f9e:	f008 fdc1 	bl	fb24 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    6fa2:	b188      	cbz	r0, 6fc8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe8>
    6fa4:	2200      	movs	r2, #0
    6fa6:	4611      	mov	r1, r2
    6fa8:	4628      	mov	r0, r5
    6faa:	f008 ff7f 	bl	feac <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6fae:	b178      	cbz	r0, 6fd0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6fb0:	f898 0258 	ldrb.w	r0, [r8, #600]	; 0x258
    6fb4:	b120      	cbz	r0, 6fc0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    6fb6:	f8b8 025a 	ldrh.w	r0, [r8, #602]	; 0x25a
    6fba:	1e40      	subs	r0, r0, #1
    6fbc:	f8a8 025a 	strh.w	r0, [r8, #602]	; 0x25a
    6fc0:	b005      	add	sp, #20
    6fc2:	2001      	movs	r0, #1
    6fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fc8:	21e0      	movs	r1, #224	; 0xe0
    6fca:	202b      	movs	r0, #43	; 0x2b
    6fcc:	f7fc fdda 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fd0:	21e5      	movs	r1, #229	; 0xe5
    6fd2:	202b      	movs	r0, #43	; 0x2b
    6fd4:	f7fc fdd6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fd8:	2600      	movs	r6, #0
    6fda:	f208 244e 	addw	r4, r8, #590	; 0x24e
    6fde:	4630      	mov	r0, r6
    6fe0:	f7fc ffa6 	bl	3f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6fe4:	4605      	mov	r5, r0
    6fe6:	2001      	movs	r0, #1
    6fe8:	f7fc ffa2 	bl	3f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6fec:	4428      	add	r0, r5
    6fee:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    6ff2:	4637      	mov	r7, r6
    6ff4:	bf18      	it	ne
    6ff6:	442e      	addne	r6, r5
    6ff8:	d016      	beq.n	7028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x148>
    6ffa:	8820      	ldrh	r0, [r4, #0]
    6ffc:	1c40      	adds	r0, r0, #1
    6ffe:	b280      	uxth	r0, r0
    7000:	8020      	strh	r0, [r4, #0]
    7002:	42b0      	cmp	r0, r6
    7004:	e000      	b.n	7008 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x128>
    7006:	e019      	b.n	703c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    7008:	bf28      	it	cs
    700a:	f8a4 b000 	strhcs.w	fp, [r4]
    700e:	8820      	ldrh	r0, [r4, #0]
    7010:	42a8      	cmp	r0, r5
    7012:	d301      	bcc.n	7018 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x138>
    7014:	42b0      	cmp	r0, r6
    7016:	d30b      	bcc.n	7030 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    7018:	a902      	add	r1, sp, #8
    701a:	f009 f965 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    701e:	b138      	cbz	r0, 7030 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x150>
    7020:	1c78      	adds	r0, r7, #1
    7022:	b2c7      	uxtb	r7, r0
    7024:	42be      	cmp	r6, r7
    7026:	d8e8      	bhi.n	6ffa <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x11a>
    7028:	f64f 70ff 	movw	r0, #65535	; 0xffff
    702c:	8020      	strh	r0, [r4, #0]
    702e:	e005      	b.n	703c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x15c>
    7030:	f8b8 124e 	ldrh.w	r1, [r8, #590]	; 0x24e
    7034:	9800      	ldr	r0, [sp, #0]
    7036:	4281      	cmp	r1, r0
    7038:	f47f af70 	bne.w	6f1c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3c>
    703c:	b005      	add	sp, #20
    703e:	2000      	movs	r0, #0
    7040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7044:	20001244 	.word	0x20001244

00007048 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    7048:	b510      	push	{r4, lr}
    704a:	7901      	ldrb	r1, [r0, #4]
    704c:	b161      	cbz	r1, 7068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    704e:	2901      	cmp	r1, #1
    7050:	bf1c      	itt	ne
    7052:	2000      	movne	r0, #0
    7054:	bd10      	popne	{r4, pc}
    7056:	8842      	ldrh	r2, [r0, #2]
    7058:	6883      	ldr	r3, [r0, #8]
    705a:	8800      	ldrh	r0, [r0, #0]
    705c:	f05f 0101 	movs.w	r1, #1
    7060:	f000 f80e 	bl	7080 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x38>
    7064:	b940      	cbnz	r0, 7078 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>
    7066:	e004      	b.n	7072 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    7068:	8842      	ldrh	r2, [r0, #2]
    706a:	6883      	ldr	r3, [r0, #8]
    706c:	8800      	ldrh	r0, [r0, #0]
    706e:	2102      	movs	r1, #2
    7070:	e7f6      	b.n	7060 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    7072:	4902      	ldr	r1, [pc, #8]	; (707c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>)
    7074:	2001      	movs	r0, #1
    7076:	7008      	strb	r0, [r1, #0]
    7078:	2001      	movs	r0, #1
    707a:	bd10      	pop	{r4, pc}
    707c:	20001244 	.word	0x20001244
    7080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7084:	b084      	sub	sp, #16
    7086:	4689      	mov	r9, r1
    7088:	469a      	mov	sl, r3
    708a:	4615      	mov	r5, r2
    708c:	4606      	mov	r6, r0
    708e:	a902      	add	r1, sp, #8
    7090:	f009 f92a 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7094:	2800      	cmp	r0, #0
    7096:	d14e      	bne.n	7136 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    7098:	9803      	ldr	r0, [sp, #12]
    709a:	2d00      	cmp	r5, #0
    709c:	f100 0478 	add.w	r4, r0, #120	; 0x78
    70a0:	bf04      	itt	eq
    70a2:	2001      	moveq	r0, #1
    70a4:	74e0      	strbeq	r0, [r4, #19]
    70a6:	d046      	beq.n	7136 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    70a8:	4630      	mov	r0, r6
    70aa:	f7fd f95b 	bl	4364 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    70ae:	ea5f 0800 	movs.w	r8, r0
    70b2:	d00d      	beq.n	70d0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x88>
    70b4:	4629      	mov	r1, r5
    70b6:	f008 fdee 	bl	fc96 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    70ba:	0007      	movs	r7, r0
    70bc:	d004      	beq.n	70c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    70be:	4822      	ldr	r0, [pc, #136]	; (7148 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x100>)
    70c0:	f8b0 0242 	ldrh.w	r0, [r0, #578]	; 0x242
    70c4:	4285      	cmp	r5, r0
    70c6:	d907      	bls.n	70d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x90>
    70c8:	b004      	add	sp, #16
    70ca:	2000      	movs	r0, #0
    70cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70d0:	2181      	movs	r1, #129	; 0x81
    70d2:	202b      	movs	r0, #43	; 0x2b
    70d4:	f7fc fd56 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70d8:	aa01      	add	r2, sp, #4
    70da:	4639      	mov	r1, r7
    70dc:	4640      	mov	r0, r8
    70de:	f008 fdca 	bl	fc76 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    70e2:	9801      	ldr	r0, [sp, #4]
    70e4:	2600      	movs	r6, #0
    70e6:	8006      	strh	r6, [r0, #0]
    70e8:	7086      	strb	r6, [r0, #2]
    70ea:	7ce1      	ldrb	r1, [r4, #19]
    70ec:	2900      	cmp	r1, #0
    70ee:	bf18      	it	ne
    70f0:	f04f 0902 	movne.w	r9, #2
    70f4:	4649      	mov	r1, r9
    70f6:	f009 fc69 	bl	109cc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    70fa:	2003      	movs	r0, #3
    70fc:	9000      	str	r0, [sp, #0]
    70fe:	462b      	mov	r3, r5
    7100:	4652      	mov	r2, sl
    7102:	4639      	mov	r1, r7
    7104:	4640      	mov	r0, r8
    7106:	f008 fc10 	bl	f92a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    710a:	4629      	mov	r1, r5
    710c:	4640      	mov	r0, r8
    710e:	f008 fd32 	bl	fb76 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    7112:	b1a0      	cbz	r0, 713e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf6>
    7114:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7118:	b160      	cbz	r0, 7134 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    711a:	9803      	ldr	r0, [sp, #12]
    711c:	f890 010d 	ldrb.w	r0, [r0, #269]	; 0x10d
    7120:	b128      	cbz	r0, 712e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    7122:	9803      	ldr	r0, [sp, #12]
    7124:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
    7128:	9803      	ldr	r0, [sp, #12]
    712a:	f009 ffcc 	bl	110c6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    712e:	9803      	ldr	r0, [sp, #12]
    7130:	f8a0 6102 	strh.w	r6, [r0, #258]	; 0x102
    7134:	74e6      	strb	r6, [r4, #19]
    7136:	b004      	add	sp, #16
    7138:	2001      	movs	r0, #1
    713a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    713e:	2197      	movs	r1, #151	; 0x97
    7140:	202b      	movs	r0, #43	; 0x2b
    7142:	f7fc fd1f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7146:	0000      	.short	0x0000
    7148:	20001244 	.word	0x20001244
    714c:	b530      	push	{r4, r5, lr}
    714e:	4604      	mov	r4, r0
    7150:	4862      	ldr	r0, [pc, #392]	; (72dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x294>)
    7152:	b087      	sub	sp, #28
    7154:	f890 1256 	ldrb.w	r1, [r0, #598]	; 0x256
    7158:	7820      	ldrb	r0, [r4, #0]
    715a:	f011 0f01 	tst.w	r1, #1
    715e:	bf08      	it	eq
    7160:	281d      	cmpeq	r0, #29
    7162:	d004      	beq.n	716e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x126>
    7164:	281c      	cmp	r0, #28
    7166:	d024      	beq.n	71b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x16a>
    7168:	2815      	cmp	r0, #21
    716a:	d07c      	beq.n	7266 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21e>
    716c:	e0b2      	b.n	72d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    716e:	88a0      	ldrh	r0, [r4, #4]
    7170:	f8ad 0000 	strh.w	r0, [sp]
    7174:	a902      	add	r1, sp, #8
    7176:	f009 f8b7 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    717a:	b118      	cbz	r0, 7184 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x13c>
    717c:	2151      	movs	r1, #81	; 0x51
    717e:	202b      	movs	r0, #43	; 0x2b
    7180:	f7fc fd00 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7184:	9803      	ldr	r0, [sp, #12]
    7186:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    718a:	f88d 1002 	strb.w	r1, [sp, #2]
    718e:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    7192:	f88d 0003 	strb.w	r0, [sp, #3]
    7196:	2000      	movs	r0, #0
    7198:	f8ad 0004 	strh.w	r0, [sp, #4]
    719c:	2102      	movs	r1, #2
    719e:	4668      	mov	r0, sp
    71a0:	f00a fce8 	bl	11b74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    71a4:	2800      	cmp	r0, #0
    71a6:	d04c      	beq.n	7242 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1fa>
    71a8:	f240 112b 	movw	r1, #299	; 0x12b
    71ac:	202b      	movs	r0, #43	; 0x2b
    71ae:	f7fc fce9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71b2:	f011 0f02 	tst.w	r1, #2
    71b6:	d011      	beq.n	71dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>
    71b8:	88a5      	ldrh	r5, [r4, #4]
    71ba:	2101      	movs	r1, #1
    71bc:	4628      	mov	r0, r5
    71be:	f008 ff6e 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    71c2:	2800      	cmp	r0, #0
    71c4:	bf1c      	itt	ne
    71c6:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    71ca:	2800      	cmpne	r0, #0
    71cc:	d03a      	beq.n	7244 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1fc>
    71ce:	88a4      	ldrh	r4, [r4, #4]
    71d0:	a903      	add	r1, sp, #12
    71d2:	4620      	mov	r0, r4
    71d4:	f00a fba8 	bl	11928 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    71d8:	b1e8      	cbz	r0, 7216 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ce>
    71da:	e047      	b.n	726c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x224>
    71dc:	88a4      	ldrh	r4, [r4, #4]
    71de:	a903      	add	r1, sp, #12
    71e0:	4620      	mov	r0, r4
    71e2:	f00a fba1 	bl	11928 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    71e6:	bbe8      	cbnz	r0, 7264 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21c>
    71e8:	f8ad 4000 	strh.w	r4, [sp]
    71ec:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    71f0:	f8ad 0002 	strh.w	r0, [sp, #2]
    71f4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    71f8:	f8ad 0004 	strh.w	r0, [sp, #4]
    71fc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    7200:	f8ad 0006 	strh.w	r0, [sp, #6]
    7204:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7208:	f8ad 0008 	strh.w	r0, [sp, #8]
    720c:	4668      	mov	r0, sp
    720e:	f00a fbfa 	bl	11a06 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7212:	bb48      	cbnz	r0, 7268 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x220>
    7214:	e04a      	b.n	72ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    7216:	f8ad 4000 	strh.w	r4, [sp]
    721a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    721e:	f8ad 0002 	strh.w	r0, [sp, #2]
    7222:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7226:	f8ad 0004 	strh.w	r0, [sp, #4]
    722a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    722e:	f8ad 0006 	strh.w	r0, [sp, #6]
    7232:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7236:	f8ad 0008 	strh.w	r0, [sp, #8]
    723a:	4668      	mov	r0, sp
    723c:	f00a fbe3 	bl	11a06 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7240:	b990      	cbnz	r0, 7268 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x220>
    7242:	e033      	b.n	72ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    7244:	2100      	movs	r1, #0
    7246:	4628      	mov	r0, r5
    7248:	f008 ff29 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    724c:	2800      	cmp	r0, #0
    724e:	bf1c      	itt	ne
    7250:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
    7254:	2800      	cmpne	r0, #0
    7256:	d03d      	beq.n	72d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    7258:	88a4      	ldrh	r4, [r4, #4]
    725a:	a903      	add	r1, sp, #12
    725c:	4620      	mov	r0, r4
    725e:	f00a fb63 	bl	11928 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    7262:	e002      	b.n	726a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x222>
    7264:	e002      	b.n	726c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x224>
    7266:	e024      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x26a>
    7268:	e01b      	b.n	72a2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x25a>
    726a:	b120      	cbz	r0, 7276 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x22e>
    726c:	f44f 7199 	mov.w	r1, #306	; 0x132
    7270:	202b      	movs	r0, #43	; 0x2b
    7272:	f7fc fc87 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7276:	f8ad 4000 	strh.w	r4, [sp]
    727a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    727e:	f8ad 0002 	strh.w	r0, [sp, #2]
    7282:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7286:	f8ad 0004 	strh.w	r0, [sp, #4]
    728a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    728e:	f8ad 0006 	strh.w	r0, [sp, #6]
    7292:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7296:	f8ad 0008 	strh.w	r0, [sp, #8]
    729a:	4668      	mov	r0, sp
    729c:	f00a fbb3 	bl	11a06 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    72a0:	b120      	cbz	r0, 72ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    72a2:	f240 113b 	movw	r1, #315	; 0x13b
    72a6:	202b      	movs	r0, #43	; 0x2b
    72a8:	f7fc fc6c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72ac:	b007      	add	sp, #28
    72ae:	2001      	movs	r0, #1
    72b0:	bd30      	pop	{r4, r5, pc}
    72b2:	f011 0f04 	tst.w	r1, #4
    72b6:	bf04      	itt	eq
    72b8:	7ba0      	ldrbeq	r0, [r4, #14]
    72ba:	f010 0f01 	tsteq.w	r0, #1
    72be:	d0f5      	beq.n	72ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    72c0:	88a0      	ldrh	r0, [r4, #4]
    72c2:	4669      	mov	r1, sp
    72c4:	f009 f810 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    72c8:	b920      	cbnz	r0, 72d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28c>
    72ca:	9801      	ldr	r0, [sp, #4]
    72cc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    72d0:	2800      	cmp	r0, #0
    72d2:	d1eb      	bne.n	72ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>
    72d4:	b007      	add	sp, #28
    72d6:	2000      	movs	r0, #0
    72d8:	bd30      	pop	{r4, r5, pc}
    72da:	0000      	.short	0x0000
    72dc:	20001244 	.word	0x20001244

000072e0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    72e0:	b570      	push	{r4, r5, r6, lr}
    72e2:	4c13      	ldr	r4, [pc, #76]	; (7330 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x50>)
    72e4:	4605      	mov	r5, r0
    72e6:	7c61      	ldrb	r1, [r4, #17]
    72e8:	2902      	cmp	r1, #2
    72ea:	bf18      	it	ne
    72ec:	2903      	cmpne	r1, #3
    72ee:	d109      	bne.n	7304 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x24>
    72f0:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    72f4:	f104 0144 	add.w	r1, r4, #68	; 0x44
    72f8:	f7fe fdaa 	bl	5e50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    72fc:	2808      	cmp	r0, #8
    72fe:	bf1c      	itt	ne
    7300:	2001      	movne	r0, #1
    7302:	bd70      	popne	{r4, r5, r6, pc}
    7304:	7c60      	ldrb	r0, [r4, #17]
    7306:	b145      	cbz	r5, 731a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x3a>
    7308:	2800      	cmp	r0, #0
    730a:	bf16      	itet	ne
    730c:	2802      	cmpne	r0, #2
    730e:	2000      	moveq	r0, #0
    7310:	2001      	movne	r0, #1
    7312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7316:	f7fd be1b 	b.w	4f50 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    731a:	2800      	cmp	r0, #0
    731c:	bf1a      	itte	ne
    731e:	2802      	cmpne	r0, #2
    7320:	2101      	movne	r1, #1
    7322:	2100      	moveq	r1, #0
    7324:	7820      	ldrb	r0, [r4, #0]
    7326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    732a:	f7fd bdc5 	b.w	4eb8 <sym_OEEB4IPB4NLF7OND2A5BJPKCV3QQLIZIALUAOAI>
    732e:	0000      	.short	0x0000
    7330:	200014a4 	.word	0x200014a4

00007334 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7338:	4c5c      	ldr	r4, [pc, #368]	; (74ac <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>)
    733a:	4601      	mov	r1, r0
    733c:	7c60      	ldrb	r0, [r4, #17]
    733e:	2800      	cmp	r0, #0
    7340:	bf16      	itet	ne
    7342:	2802      	cmpne	r0, #2
    7344:	2000      	moveq	r0, #0
    7346:	2001      	movne	r0, #1
    7348:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    734c:	b301      	cbz	r1, 7390 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5c>
    734e:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7352:	f7fd fdc3 	bl	4edc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7356:	7c60      	ldrb	r0, [r4, #17]
    7358:	2802      	cmp	r0, #2
    735a:	bf16      	itet	ne
    735c:	2803      	cmpne	r0, #3
    735e:	2101      	moveq	r1, #1
    7360:	2100      	movne	r1, #0
    7362:	74a1      	strb	r1, [r4, #18]
    7364:	f04f 0008 	mov.w	r0, #8
    7368:	74e0      	strb	r0, [r4, #19]
    736a:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    736e:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    7372:	f04f 0501 	mov.w	r5, #1
    7376:	f04f 0600 	mov.w	r6, #0
    737a:	2801      	cmp	r0, #1
    737c:	bf04      	itt	eq
    737e:	7952      	ldrbeq	r2, [r2, #5]
    7380:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
    7384:	d013      	beq.n	73ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    7386:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    738a:	2801      	cmp	r0, #1
    738c:	d008      	beq.n	73a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x6c>
    738e:	e00c      	b.n	73aa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7390:	7823      	ldrb	r3, [r4, #0]
    7392:	4601      	mov	r1, r0
    7394:	f104 023d 	add.w	r2, r4, #61	; 0x3d
    7398:	4618      	mov	r0, r3
    739a:	f7fd fd6f 	bl	4e7c <sym_Z47IXNZNEDTOWLB6B34VWMDNCXIIZJKTXKEH4NA>
    739e:	e7da      	b.n	7356 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x22>
    73a0:	7950      	ldrb	r0, [r2, #5]
    73a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    73a6:	2840      	cmp	r0, #64	; 0x40
    73a8:	d001      	beq.n	73ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7a>
    73aa:	2000      	movs	r0, #0
    73ac:	e000      	b.n	73b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7c>
    73ae:	2001      	movs	r0, #1
    73b0:	7520      	strb	r0, [r4, #20]
    73b2:	2900      	cmp	r1, #0
    73b4:	bf04      	itt	eq
    73b6:	78a0      	ldrbeq	r0, [r4, #2]
    73b8:	f010 0f04 	tsteq.w	r0, #4
    73bc:	d006      	beq.n	73cc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x98>
    73be:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
    73c2:	f104 0144 	add.w	r1, r4, #68	; 0x44
    73c6:	f7fe fd43 	bl	5e50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    73ca:	74e0      	strb	r0, [r4, #19]
    73cc:	6366      	str	r6, [r4, #52]	; 0x34
    73ce:	f007 fc1c 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    73d2:	63a0      	str	r0, [r4, #56]	; 0x38
    73d4:	2700      	movs	r7, #0
    73d6:	7ce0      	ldrb	r0, [r4, #19]
    73d8:	f7fe fc7e 	bl	5cd8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    73dc:	4680      	mov	r8, r0
    73de:	7ca0      	ldrb	r0, [r4, #18]
    73e0:	2800      	cmp	r0, #0
    73e2:	bf18      	it	ne
    73e4:	f1b8 0f00 	cmpne.w	r8, #0
    73e8:	d003      	beq.n	73f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    73ea:	7ce0      	ldrb	r0, [r4, #19]
    73ec:	f7fe fc68 	bl	5cc0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    73f0:	b168      	cbz	r0, 740e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xda>
    73f2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    73f6:	2800      	cmp	r0, #0
    73f8:	bf1c      	itt	ne
    73fa:	7d20      	ldrbne	r0, [r4, #20]
    73fc:	2800      	cmpne	r0, #0
    73fe:	d01e      	beq.n	743e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    7400:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7404:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7408:	2901      	cmp	r1, #1
    740a:	d00e      	beq.n	742a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf6>
    740c:	e012      	b.n	7434 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x100>
    740e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    7412:	463a      	mov	r2, r7
    7414:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7418:	4640      	mov	r0, r8
    741a:	f008 ff17 	bl	1024c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    741e:	7ce1      	ldrb	r1, [r4, #19]
    7420:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    7424:	f7fe fc64 	bl	5cf0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    7428:	e009      	b.n	743e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    742a:	7940      	ldrb	r0, [r0, #5]
    742c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    7430:	2840      	cmp	r0, #64	; 0x40
    7432:	d032      	beq.n	749a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x166>
    7434:	4631      	mov	r1, r6
    7436:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    743a:	f008 fef7 	bl	1022c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    743e:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    7442:	78a0      	ldrb	r0, [r4, #2]
    7444:	f010 0f04 	tst.w	r0, #4
    7448:	bf1a      	itte	ne
    744a:	7ca0      	ldrbne	r0, [r4, #18]
    744c:	2800      	cmpne	r0, #0
    744e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7452:	f04f 0700 	mov.w	r7, #0
    7456:	7ce0      	ldrb	r0, [r4, #19]
    7458:	f7fe fc9c 	bl	5d94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    745c:	0006      	movs	r6, r0
    745e:	bf08      	it	eq
    7460:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7464:	2110      	movs	r1, #16
    7466:	f7ff fa95 	bl	6994 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    746a:	2800      	cmp	r0, #0
    746c:	bf18      	it	ne
    746e:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
    7472:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    7476:	463a      	mov	r2, r7
    7478:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    747c:	4630      	mov	r0, r6
    747e:	f008 fee5 	bl	1024c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7482:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7486:	4c0a      	ldr	r4, [pc, #40]	; (74b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x17c>)
    7488:	6820      	ldr	r0, [r4, #0]
    748a:	f009 fb7b 	bl	10b84 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    748e:	6820      	ldr	r0, [r4, #0]
    7490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7494:	2101      	movs	r1, #1
    7496:	f009 bb7c 	b.w	10b92 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    749a:	f7fe fc0d 	bl	5cb8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    749e:	463a      	mov	r2, r7
    74a0:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    74a4:	f008 fed2 	bl	1024c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    74a8:	e7c9      	b.n	743e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10a>
    74aa:	0000      	.short	0x0000
    74ac:	200014a4 	.word	0x200014a4
    74b0:	20000110 	.word	0x20000110

000074b4 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>:
    74b4:	4804      	ldr	r0, [pc, #16]	; (74c8 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA+0x14>)
    74b6:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
    74ba:	2900      	cmp	r1, #0
    74bc:	bf14      	ite	ne
    74be:	f8b0 006c 	ldrhne.w	r0, [r0, #108]	; 0x6c
    74c2:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    74c6:	4770      	bx	lr
    74c8:	200014a4 	.word	0x200014a4

000074cc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    74cc:	480b      	ldr	r0, [pc, #44]	; (74fc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x30>)
    74ce:	8840      	ldrh	r0, [r0, #2]
    74d0:	f3c0 1100 	ubfx	r1, r0, #4, #1
    74d4:	b131      	cbz	r1, 74e4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x18>
    74d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    74da:	2800      	cmp	r0, #0
    74dc:	bf04      	itt	eq
    74de:	201f      	moveq	r0, #31
    74e0:	4770      	bxeq	lr
    74e2:	e002      	b.n	74ea <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1e>
    74e4:	f3c0 0140 	ubfx	r1, r0, #1, #1
    74e8:	b109      	cbz	r1, 74ee <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x22>
    74ea:	2000      	movs	r0, #0
    74ec:	4770      	bx	lr
    74ee:	f010 0f01 	tst.w	r0, #1
    74f2:	bf14      	ite	ne
    74f4:	20ee      	movne	r0, #238	; 0xee
    74f6:	20ff      	moveq	r0, #255	; 0xff
    74f8:	4770      	bx	lr
    74fa:	0000      	.short	0x0000
    74fc:	200014a4 	.word	0x200014a4

00007500 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    7500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7504:	4c41      	ldr	r4, [pc, #260]	; (760c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x10c>)
    7506:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    750a:	2500      	movs	r5, #0
    750c:	b181      	cbz	r1, 7530 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    750e:	7045      	strb	r5, [r0, #1]
    7510:	211b      	movs	r1, #27
    7512:	7001      	strb	r1, [r0, #0]
    7514:	f8d4 1099 	ldr.w	r1, [r4, #153]	; 0x99
    7518:	6041      	str	r1, [r0, #4]
    751a:	f8d4 109d 	ldr.w	r1, [r4, #157]	; 0x9d
    751e:	6081      	str	r1, [r0, #8]
    7520:	f894 10a1 	ldrb.w	r1, [r4, #161]	; 0xa1
    7524:	7301      	strb	r1, [r0, #12]
    7526:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
    752a:	2001      	movs	r0, #1
    752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7530:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
    7534:	b141      	cbz	r1, 7548 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x48>
    7536:	7045      	strb	r5, [r0, #1]
    7538:	2107      	movs	r1, #7
    753a:	7001      	strb	r1, [r0, #0]
    753c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    7540:	6041      	str	r1, [r0, #4]
    7542:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    7546:	e05d      	b.n	7604 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7548:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    754c:	2114      	movs	r1, #20
    754e:	4f30      	ldr	r7, [pc, #192]	; (7610 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x110>)
    7550:	2601      	movs	r6, #1
    7552:	b30a      	cbz	r2, 7598 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x98>
    7554:	4680      	mov	r8, r0
    7556:	7045      	strb	r5, [r0, #1]
    7558:	f800 1b04 	strb.w	r1, [r0], #4
    755c:	2220      	movs	r2, #32
    755e:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    7562:	f7fc f985 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7566:	f888 6008 	strb.w	r6, [r8, #8]
    756a:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    756e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    7572:	2800      	cmp	r0, #0
    7574:	d146      	bne.n	7604 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7576:	bf00      	nop
    7578:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    757c:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    7580:	6878      	ldr	r0, [r7, #4]
    7582:	7c41      	ldrb	r1, [r0, #17]
    7584:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    7588:	f884 6092 	strb.w	r6, [r4, #146]	; 0x92
    758c:	8800      	ldrh	r0, [r0, #0]
    758e:	f7fc fed3 	bl	4338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7592:	f008 fc3a 	bl	fe0a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7596:	e035      	b.n	7604 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    7598:	f894 208a 	ldrb.w	r2, [r4, #138]	; 0x8a
    759c:	b302      	cbz	r2, 75e0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xe0>
    759e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    75a2:	b18a      	cbz	r2, 75c8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xc8>
    75a4:	4680      	mov	r8, r0
    75a6:	7045      	strb	r5, [r0, #1]
    75a8:	f800 1b04 	strb.w	r1, [r0], #4
    75ac:	2220      	movs	r2, #32
    75ae:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    75b2:	f7fc f95d 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    75b6:	f888 6008 	strb.w	r6, [r8, #8]
    75ba:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    75be:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    75c2:	2800      	cmp	r0, #0
    75c4:	d0d8      	beq.n	7578 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x78>
    75c6:	e01d      	b.n	7604 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    75c8:	7045      	strb	r5, [r0, #1]
    75ca:	2117      	movs	r1, #23
    75cc:	7001      	strb	r1, [r0, #0]
    75ce:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    75d2:	6041      	str	r1, [r0, #4]
    75d4:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    75d8:	8101      	strh	r1, [r0, #8]
    75da:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
    75de:	e011      	b.n	7604 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x104>
    75e0:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
    75e4:	2900      	cmp	r1, #0
    75e6:	bf04      	itt	eq
    75e8:	2000      	moveq	r0, #0
    75ea:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    75ee:	7045      	strb	r5, [r0, #1]
    75f0:	2120      	movs	r1, #32
    75f2:	f800 1b04 	strb.w	r1, [r0], #4
    75f6:	2222      	movs	r2, #34	; 0x22
    75f8:	f104 01a3 	add.w	r1, r4, #163	; 0xa3
    75fc:	f7fc f938 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7600:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    7604:	2001      	movs	r0, #1
    7606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    760a:	0000      	.short	0x0000
    760c:	200014a4 	.word	0x200014a4
    7610:	20000110 	.word	0x20000110

00007614 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    7614:	4801      	ldr	r0, [pc, #4]	; (761c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q+0x8>)
    7616:	6880      	ldr	r0, [r0, #8]
    7618:	4770      	bx	lr
    761a:	0000      	.short	0x0000
    761c:	200014a4 	.word	0x200014a4

00007620 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    7620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7622:	4c0f      	ldr	r4, [pc, #60]	; (7660 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x40>)
    7624:	8861      	ldrh	r1, [r4, #2]
    7626:	f3c1 1200 	ubfx	r2, r1, #4, #1
    762a:	2a00      	cmp	r2, #0
    762c:	bf04      	itt	eq
    762e:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
    7632:	2900      	cmpeq	r1, #0
    7634:	d111      	bne.n	765a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY+0x3a>
    7636:	4605      	mov	r5, r0
    7638:	f104 0018 	add.w	r0, r4, #24
    763c:	f009 fc92 	bl	10f64 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7640:	7922      	ldrb	r2, [r4, #4]
    7642:	7963      	ldrb	r3, [r4, #5]
    7644:	2600      	movs	r6, #0
    7646:	4629      	mov	r1, r5
    7648:	9600      	str	r6, [sp, #0]
    764a:	f000 ff19 	bl	8480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>
    764e:	4601      	mov	r1, r0
    7650:	68a0      	ldr	r0, [r4, #8]
    7652:	4281      	cmp	r1, r0
    7654:	bf84      	itt	hi
    7656:	4630      	movhi	r0, r6
    7658:	bdf8      	pophi	{r3, r4, r5, r6, r7, pc}
    765a:	2001      	movs	r0, #1
    765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    765e:	0000      	.short	0x0000
    7660:	200014a4 	.word	0x200014a4

00007664 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    7664:	b538      	push	{r3, r4, r5, lr}
    7666:	4c0d      	ldr	r4, [pc, #52]	; (769c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x38>)
    7668:	f104 0018 	add.w	r0, r4, #24
    766c:	f009 fc7a 	bl	10f64 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7670:	8861      	ldrh	r1, [r4, #2]
    7672:	f3c1 1200 	ubfx	r2, r1, #4, #1
    7676:	b122      	cbz	r2, 7682 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x1e>
    7678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    767c:	2228      	movs	r2, #40	; 0x28
    767e:	f001 baa5 	b.w	8bcc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7682:	f3c1 0140 	ubfx	r1, r1, #1, #1
    7686:	2900      	cmp	r1, #0
    7688:	bf14      	ite	ne
    768a:	8e61      	ldrhne	r1, [r4, #50]	; 0x32
    768c:	8e21      	ldrheq	r1, [r4, #48]	; 0x30
    768e:	2201      	movs	r2, #1
    7690:	9200      	str	r2, [sp, #0]
    7692:	7963      	ldrb	r3, [r4, #5]
    7694:	7922      	ldrb	r2, [r4, #4]
    7696:	f000 fef3 	bl	8480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>
    769a:	bd38      	pop	{r3, r4, r5, pc}
    769c:	200014a4 	.word	0x200014a4

000076a0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    76a0:	4904      	ldr	r1, [pc, #16]	; (76b4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0x14>)
    76a2:	2200      	movs	r2, #0
    76a4:	624a      	str	r2, [r1, #36]	; 0x24
    76a6:	884b      	ldrh	r3, [r1, #2]
    76a8:	2b1d      	cmp	r3, #29
    76aa:	bf0c      	ite	eq
    76ac:	734a      	strbeq	r2, [r1, #13]
    76ae:	7348      	strbne	r0, [r1, #13]
    76b0:	4770      	bx	lr
    76b2:	0000      	.short	0x0000
    76b4:	200014a4 	.word	0x200014a4

000076b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    76b8:	b538      	push	{r3, r4, r5, lr}
    76ba:	4d56      	ldr	r5, [pc, #344]	; (7814 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15c>)
    76bc:	4604      	mov	r4, r0
    76be:	7a80      	ldrb	r0, [r0, #10]
    76c0:	7468      	strb	r0, [r5, #17]
    76c2:	7820      	ldrb	r0, [r4, #0]
    76c4:	7028      	strb	r0, [r5, #0]
    76c6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    76ca:	f8ad 0000 	strh.w	r0, [sp]
    76ce:	f89d 0000 	ldrb.w	r0, [sp]
    76d2:	f000 0101 	and.w	r1, r0, #1
    76d6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    76da:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    76de:	f3c0 0280 	ubfx	r2, r0, #2, #1
    76e2:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    76e6:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    76ea:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    76ee:	f3c0 1200 	ubfx	r2, r0, #4, #1
    76f2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    76f6:	f3c0 1240 	ubfx	r2, r0, #5, #1
    76fa:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    76fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7702:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7706:	8068      	strh	r0, [r5, #2]
    7708:	7d20      	ldrb	r0, [r4, #20]
    770a:	2801      	cmp	r0, #1
    770c:	bf18      	it	ne
    770e:	2802      	cmpne	r0, #2
    7710:	d006      	beq.n	7720 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x68>
    7712:	bf00      	nop
    7714:	f240 21a1 	movw	r1, #673	; 0x2a1
    7718:	f04f 0006 	mov.w	r0, #6
    771c:	f7fc fa32 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7720:	7128      	strb	r0, [r5, #4]
    7722:	7860      	ldrb	r0, [r4, #1]
    7724:	f010 0f10 	tst.w	r0, #16
    7728:	d009      	beq.n	773e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x86>
    772a:	7a61      	ldrb	r1, [r4, #9]
    772c:	f105 0018 	add.w	r0, r5, #24
    7730:	f009 fc6b 	bl	1100a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7734:	7d20      	ldrb	r0, [r4, #20]
    7736:	2101      	movs	r1, #1
    7738:	2802      	cmp	r0, #2
    773a:	d10b      	bne.n	7754 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x9c>
    773c:	e006      	b.n	774c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x94>
    773e:	7da0      	ldrb	r0, [r4, #22]
    7740:	2801      	cmp	r0, #1
    7742:	bf14      	ite	ne
    7744:	2802      	cmpne	r0, #2
    7746:	7168      	strbeq	r0, [r5, #5]
    7748:	d1e4      	bne.n	7714 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x5c>
    774a:	e7ee      	b.n	772a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x72>
    774c:	7d60      	ldrb	r0, [r4, #21]
    774e:	f100 0001 	add.w	r0, r0, #1
    7752:	b2c1      	uxtb	r1, r0
    7754:	7ea0      	ldrb	r0, [r4, #26]
    7756:	f100 0001 	add.w	r0, r0, #1
    775a:	b2c2      	uxtb	r2, r0
    775c:	f105 0018 	add.w	r0, r5, #24
    7760:	f009 fbe9 	bl	10f36 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7764:	78a8      	ldrb	r0, [r5, #2]
    7766:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    776a:	2800      	cmp	r0, #0
    776c:	bf1c      	itt	ne
    776e:	2000      	movne	r0, #0
    7770:	60a8      	strne	r0, [r5, #8]
    7772:	d01c      	beq.n	77ae <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7774:	7ca0      	ldrb	r0, [r4, #18]
    7776:	7428      	strb	r0, [r5, #16]
    7778:	7ae0      	ldrb	r0, [r4, #11]
    777a:	2800      	cmp	r0, #0
    777c:	bf16      	itet	ne
    777e:	2802      	cmpne	r0, #2
    7780:	2000      	moveq	r0, #0
    7782:	2001      	movne	r0, #1
    7784:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
    7788:	68e0      	ldr	r0, [r4, #12]
    778a:	6468      	str	r0, [r5, #68]	; 0x44
    778c:	8a20      	ldrh	r0, [r4, #16]
    778e:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
    7792:	7de0      	ldrb	r0, [r4, #23]
    7794:	f895 1020 	ldrb.w	r1, [r5, #32]
    7798:	f360 1107 	bfi	r1, r0, #4, #4
    779c:	f885 1020 	strb.w	r1, [r5, #32]
    77a0:	7e20      	ldrb	r0, [r4, #24]
    77a2:	2801      	cmp	r0, #1
    77a4:	bf18      	it	ne
    77a6:	2000      	movne	r0, #0
    77a8:	7328      	strb	r0, [r5, #12]
    77aa:	2000      	movs	r0, #0
    77ac:	bd38      	pop	{r3, r4, r5, pc}
    77ae:	7860      	ldrb	r0, [r4, #1]
    77b0:	f010 0f10 	tst.w	r0, #16
    77b4:	f105 0018 	add.w	r0, r5, #24
    77b8:	d022      	beq.n	7800 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    77ba:	f009 fbd3 	bl	10f64 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    77be:	8869      	ldrh	r1, [r5, #2]
    77c0:	2228      	movs	r2, #40	; 0x28
    77c2:	f001 fa03 	bl	8bcc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    77c6:	bf00      	nop
    77c8:	f240 2171 	movw	r1, #625	; 0x271
    77cc:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    77d0:	fbb0 f0f1 	udiv	r0, r0, r1
    77d4:	4348      	muls	r0, r1
    77d6:	f8d4 1002 	ldr.w	r1, [r4, #2]
    77da:	f240 2271 	movw	r2, #625	; 0x271
    77de:	0a09      	lsrs	r1, r1, #8
    77e0:	434a      	muls	r2, r1
    77e2:	f8d4 1005 	ldr.w	r1, [r4, #5]
    77e6:	f240 2371 	movw	r3, #625	; 0x271
    77ea:	0a09      	lsrs	r1, r1, #8
    77ec:	4359      	muls	r1, r3
    77ee:	4290      	cmp	r0, r2
    77f0:	bf98      	it	ls
    77f2:	60aa      	strls	r2, [r5, #8]
    77f4:	d9be      	bls.n	7774 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    77f6:	4288      	cmp	r0, r1
    77f8:	bf94      	ite	ls
    77fa:	60a8      	strls	r0, [r5, #8]
    77fc:	60a9      	strhi	r1, [r5, #8]
    77fe:	e7b9      	b.n	7774 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
    7800:	f009 fbb0 	bl	10f64 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7804:	2101      	movs	r1, #1
    7806:	9100      	str	r1, [sp, #0]
    7808:	796b      	ldrb	r3, [r5, #5]
    780a:	792a      	ldrb	r2, [r5, #4]
    780c:	21fb      	movs	r1, #251	; 0xfb
    780e:	f000 fe37 	bl	8480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x480>
    7812:	e7d9      	b.n	77c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x110>
    7814:	200014a4 	.word	0x200014a4

00007818 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7818:	b570      	push	{r4, r5, r6, lr}
    781a:	491b      	ldr	r1, [pc, #108]	; (7888 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x70>)
    781c:	2400      	movs	r4, #0
    781e:	700c      	strb	r4, [r1, #0]
    7820:	4d1a      	ldr	r5, [pc, #104]	; (788c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x74>)
    7822:	6028      	str	r0, [r5, #0]
    7824:	7808      	ldrb	r0, [r1, #0]
    7826:	b120      	cbz	r0, 7832 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
    7828:	f44f 7133 	mov.w	r1, #716	; 0x2cc
    782c:	202d      	movs	r0, #45	; 0x2d
    782e:	f7fc f9a9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7832:	22c8      	movs	r2, #200	; 0xc8
    7834:	2100      	movs	r1, #0
    7836:	4816      	ldr	r0, [pc, #88]	; (7890 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    7838:	f007 fb4c 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    783c:	4814      	ldr	r0, [pc, #80]	; (7890 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x78>)
    783e:	f8c0 40c8 	str.w	r4, [r0, #200]	; 0xc8
    7842:	f8c0 40cc 	str.w	r4, [r0, #204]	; 0xcc
    7846:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    784a:	f8c0 40d4 	str.w	r4, [r0, #212]	; 0xd4
    784e:	21ff      	movs	r1, #255	; 0xff
    7850:	f800 1b21 	strb.w	r1, [r0], #33
    7854:	217f      	movs	r1, #127	; 0x7f
    7856:	f800 191f 	strb.w	r1, [r0], #-31
    785a:	2113      	movs	r1, #19
    785c:	f820 1b5e 	strh.w	r1, [r0], #94
    7860:	2101      	movs	r1, #1
    7862:	f800 1951 	strb.w	r1, [r0], #-81
    7866:	f800 4b09 	strb.w	r4, [r0], #9
    786a:	f009 fbf3 	bl	11054 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    786e:	f005 ff33 	bl	d6d8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7872:	f005 fd59 	bl	d328 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7876:	68a8      	ldr	r0, [r5, #8]
    7878:	2800      	cmp	r0, #0
    787a:	bf18      	it	ne
    787c:	bd70      	popne	{r4, r5, r6, pc}
    787e:	f240 21cf 	movw	r1, #719	; 0x2cf
    7882:	202d      	movs	r0, #45	; 0x2d
    7884:	f7fc f97e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7888:	2000156c 	.word	0x2000156c
    788c:	20000110 	.word	0x20000110
    7890:	200014a4 	.word	0x200014a4

00007894 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    7894:	4907      	ldr	r1, [pc, #28]	; (78b4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x20>)
    7896:	8848      	ldrh	r0, [r1, #2]
    7898:	f3c0 1200 	ubfx	r2, r0, #4, #1
    789c:	b93a      	cbnz	r2, 78ae <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    789e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    78a2:	b120      	cbz	r0, 78ae <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x1a>
    78a4:	f8b1 0064 	ldrh.w	r0, [r1, #100]	; 0x64
    78a8:	2800      	cmp	r0, #0
    78aa:	bf08      	it	eq
    78ac:	4770      	bxeq	lr
    78ae:	2001      	movs	r0, #1
    78b0:	4770      	bx	lr
    78b2:	0000      	.short	0x0000
    78b4:	200014a4 	.word	0x200014a4

000078b8 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
    78b8:	4807      	ldr	r0, [pc, #28]	; (78d8 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x20>)
    78ba:	8840      	ldrh	r0, [r0, #2]
    78bc:	f3c0 1100 	ubfx	r1, r0, #4, #1
    78c0:	b119      	cbz	r1, 78ca <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
    78c2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    78c6:	b128      	cbz	r0, 78d4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    78c8:	e002      	b.n	78d0 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x18>
    78ca:	f3c0 0040 	ubfx	r0, r0, #1, #1
    78ce:	b108      	cbz	r0, 78d4 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x1c>
    78d0:	2000      	movs	r0, #0
    78d2:	4770      	bx	lr
    78d4:	2001      	movs	r0, #1
    78d6:	4770      	bx	lr
    78d8:	200014a4 	.word	0x200014a4

000078dc <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    78dc:	4802      	ldr	r0, [pc, #8]	; (78e8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ+0xc>)
    78de:	7880      	ldrb	r0, [r0, #2]
    78e0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    78e4:	4770      	bx	lr
    78e6:	0000      	.short	0x0000
    78e8:	200014a4 	.word	0x200014a4

000078ec <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    78ec:	4802      	ldr	r0, [pc, #8]	; (78f8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ+0xc>)
    78ee:	7880      	ldrb	r0, [r0, #2]
    78f0:	f000 0001 	and.w	r0, r0, #1
    78f4:	4770      	bx	lr
    78f6:	0000      	.short	0x0000
    78f8:	200014a4 	.word	0x200014a4

000078fc <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
    78fc:	4803      	ldr	r0, [pc, #12]	; (790c <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ+0x10>)
    78fe:	8840      	ldrh	r0, [r0, #2]
    7900:	2809      	cmp	r0, #9
    7902:	bf0c      	ite	eq
    7904:	2001      	moveq	r0, #1
    7906:	2000      	movne	r0, #0
    7908:	4770      	bx	lr
    790a:	0000      	.short	0x0000
    790c:	200014a4 	.word	0x200014a4

00007910 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    7910:	4802      	ldr	r0, [pc, #8]	; (791c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI+0xc>)
    7912:	7880      	ldrb	r0, [r0, #2]
    7914:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7918:	4770      	bx	lr
    791a:	0000      	.short	0x0000
    791c:	200014a4 	.word	0x200014a4

00007920 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    7920:	4802      	ldr	r0, [pc, #8]	; (792c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY+0xc>)
    7922:	7880      	ldrb	r0, [r0, #2]
    7924:	f3c0 1000 	ubfx	r0, r0, #4, #1
    7928:	4770      	bx	lr
    792a:	0000      	.short	0x0000
    792c:	200014a4 	.word	0x200014a4

00007930 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    7930:	4802      	ldr	r0, [pc, #8]	; (793c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ+0xc>)
    7932:	7880      	ldrb	r0, [r0, #2]
    7934:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7938:	4770      	bx	lr
    793a:	0000      	.short	0x0000
    793c:	200014a4 	.word	0x200014a4

00007940 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7940:	4902      	ldr	r1, [pc, #8]	; (794c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7942:	4801      	ldr	r0, [pc, #4]	; (7948 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7944:	6088      	str	r0, [r1, #8]
    7946:	4770      	bx	lr
    7948:	00008bb4 	.word	0x00008bb4
    794c:	20000110 	.word	0x20000110

00007950 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    7950:	4801      	ldr	r0, [pc, #4]	; (7958 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY+0x8>)
    7952:	f990 000f 	ldrsb.w	r0, [r0, #15]
    7956:	4770      	bx	lr
    7958:	200014a4 	.word	0x200014a4

0000795c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    795c:	4903      	ldr	r1, [pc, #12]	; (796c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0x10>)
    795e:	7809      	ldrb	r1, [r1, #0]
    7960:	4281      	cmp	r1, r0
    7962:	bf0c      	ite	eq
    7964:	2001      	moveq	r0, #1
    7966:	2000      	movne	r0, #0
    7968:	4770      	bx	lr
    796a:	0000      	.short	0x0000
    796c:	200014a4 	.word	0x200014a4

00007970 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7970:	4801      	ldr	r0, [pc, #4]	; (7978 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0x8>)
    7972:	6880      	ldr	r0, [r0, #8]
    7974:	6800      	ldr	r0, [r0, #0]
    7976:	4700      	bx	r0
    7978:	20000110 	.word	0x20000110

0000797c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    797c:	4816      	ldr	r0, [pc, #88]	; (79d8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x5c>)
    797e:	b510      	push	{r4, lr}
    7980:	7800      	ldrb	r0, [r0, #0]
    7982:	2800      	cmp	r0, #0
    7984:	bf18      	it	ne
    7986:	240c      	movne	r4, #12
    7988:	d001      	beq.n	798e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
    798a:	4620      	mov	r0, r4
    798c:	bd10      	pop	{r4, pc}
    798e:	2400      	movs	r4, #0
    7990:	22c8      	movs	r2, #200	; 0xc8
    7992:	4621      	mov	r1, r4
    7994:	4811      	ldr	r0, [pc, #68]	; (79dc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    7996:	f007 fa9d 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    799a:	4910      	ldr	r1, [pc, #64]	; (79dc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x60>)
    799c:	2000      	movs	r0, #0
    799e:	f8c1 00c8 	str.w	r0, [r1, #200]	; 0xc8
    79a2:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    79a6:	f8c1 00d0 	str.w	r0, [r1, #208]	; 0xd0
    79aa:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
    79ae:	22ff      	movs	r2, #255	; 0xff
    79b0:	700a      	strb	r2, [r1, #0]
    79b2:	227f      	movs	r2, #127	; 0x7f
    79b4:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    79b8:	2213      	movs	r2, #19
    79ba:	804a      	strh	r2, [r1, #2]
    79bc:	2201      	movs	r2, #1
    79be:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
    79c2:	73c8      	strb	r0, [r1, #15]
    79c4:	f101 0018 	add.w	r0, r1, #24
    79c8:	f009 fb44 	bl	11054 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    79cc:	f005 fe84 	bl	d6d8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    79d0:	f005 fcaa 	bl	d328 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    79d4:	e7d9      	b.n	798a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    79d6:	0000      	.short	0x0000
    79d8:	2000156c 	.word	0x2000156c
    79dc:	200014a4 	.word	0x200014a4

000079e0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    79e0:	4801      	ldr	r0, [pc, #4]	; (79e8 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI+0x8>)
    79e2:	7b00      	ldrb	r0, [r0, #12]
    79e4:	4770      	bx	lr
    79e6:	0000      	.short	0x0000
    79e8:	200014a4 	.word	0x200014a4

000079ec <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    79ec:	4801      	ldr	r0, [pc, #4]	; (79f4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA+0x8>)
    79ee:	7940      	ldrb	r0, [r0, #5]
    79f0:	4770      	bx	lr
    79f2:	0000      	.short	0x0000
    79f4:	200014a4 	.word	0x200014a4

000079f8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    79f8:	4901      	ldr	r1, [pc, #4]	; (7a00 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY+0x8>)
    79fa:	6048      	str	r0, [r1, #4]
    79fc:	4770      	bx	lr
    79fe:	0000      	.short	0x0000
    7a00:	20000110 	.word	0x20000110

00007a04 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    7a04:	4a05      	ldr	r2, [pc, #20]	; (7a1c <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y+0x18>)
    7a06:	2300      	movs	r3, #0
    7a08:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
    7a0c:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62
    7a10:	2001      	movs	r0, #1
    7a12:	6591      	str	r1, [r2, #88]	; 0x58
    7a14:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
    7a18:	4770      	bx	lr
    7a1a:	0000      	.short	0x0000
    7a1c:	200014a4 	.word	0x200014a4

00007a20 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    7a20:	4a05      	ldr	r2, [pc, #20]	; (7a38 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA+0x18>)
    7a22:	2300      	movs	r3, #0
    7a24:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    7a28:	65d1      	str	r1, [r2, #92]	; 0x5c
    7a2a:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    7a2e:	2001      	movs	r0, #1
    7a30:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    7a34:	4770      	bx	lr
    7a36:	0000      	.short	0x0000
    7a38:	200014a4 	.word	0x200014a4

00007a3c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7a3c:	4805      	ldr	r0, [pc, #20]	; (7a54 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
    7a3e:	b510      	push	{r4, lr}
    7a40:	7800      	ldrb	r0, [r0, #0]
    7a42:	2801      	cmp	r0, #1
    7a44:	bf1c      	itt	ne
    7a46:	2000      	movne	r0, #0
    7a48:	bd10      	popne	{r4, pc}
    7a4a:	f000 feb7 	bl	87bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7bc>
    7a4e:	2000      	movs	r0, #0
    7a50:	bd10      	pop	{r4, pc}
    7a52:	0000      	.short	0x0000
    7a54:	2000156c 	.word	0x2000156c

00007a58 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    7a58:	4901      	ldr	r1, [pc, #4]	; (7a60 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY+0x8>)
    7a5a:	f881 0054 	strb.w	r0, [r1, #84]	; 0x54
    7a5e:	4770      	bx	lr
    7a60:	200014a4 	.word	0x200014a4

00007a64 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7a64:	4904      	ldr	r1, [pc, #16]	; (7a78 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
    7a66:	4803      	ldr	r0, [pc, #12]	; (7a74 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
    7a68:	6008      	str	r0, [r1, #0]
    7a6a:	4905      	ldr	r1, [pc, #20]	; (7a80 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
    7a6c:	4803      	ldr	r0, [pc, #12]	; (7a7c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
    7a6e:	6008      	str	r0, [r1, #0]
    7a70:	4770      	bx	lr
    7a72:	0000      	.short	0x0000
    7a74:	00008a8d 	.word	0x00008a8d
    7a78:	20000120 	.word	0x20000120
    7a7c:	00008931 	.word	0x00008931
    7a80:	2000011c 	.word	0x2000011c

00007a84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    7a84:	b570      	push	{r4, r5, r6, lr}
    7a86:	4c10      	ldr	r4, [pc, #64]	; (7ac8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x44>)
    7a88:	4e10      	ldr	r6, [pc, #64]	; (7acc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x48>)
    7a8a:	2501      	movs	r5, #1
    7a8c:	78a0      	ldrb	r0, [r4, #2]
    7a8e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7a92:	b130      	cbz	r0, 7aa2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    7a94:	223c      	movs	r2, #60	; 0x3c
    7a96:	21ff      	movs	r1, #255	; 0xff
    7a98:	6870      	ldr	r0, [r6, #4]
    7a9a:	f000 fecd 	bl	8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>
    7a9e:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    7aa2:	78a0      	ldrb	r0, [r4, #2]
    7aa4:	f010 0f01 	tst.w	r0, #1
    7aa8:	bf1c      	itt	ne
    7aaa:	6870      	ldrne	r0, [r6, #4]
    7aac:	8801      	ldrhne	r1, [r0, #0]
    7aae:	f04f 023c 	mov.w	r2, #60	; 0x3c
    7ab2:	bf12      	itee	ne
    7ab4:	2001      	movne	r0, #1
    7ab6:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    7aba:	2000      	moveq	r0, #0
    7abc:	f000 fc16 	bl	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    7ac0:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7ac4:	bd70      	pop	{r4, r5, r6, pc}
    7ac6:	0000      	.short	0x0000
    7ac8:	200014a4 	.word	0x200014a4
    7acc:	20000110 	.word	0x20000110

00007ad0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    7ad0:	4802      	ldr	r0, [pc, #8]	; (7adc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc>)
    7ad2:	7c00      	ldrb	r0, [r0, #16]
    7ad4:	2800      	cmp	r0, #0
    7ad6:	bf18      	it	ne
    7ad8:	2001      	movne	r0, #1
    7ada:	4770      	bx	lr
    7adc:	200014a4 	.word	0x200014a4
    7ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ae4:	4e68      	ldr	r6, [pc, #416]	; (7c88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1b8>)
    7ae6:	0007      	movs	r7, r0
    7ae8:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    7aec:	d027      	beq.n	7b3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6e>
    7aee:	f104 0018 	add.w	r0, r4, #24
    7af2:	f009 fa8c 	bl	1100e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7af6:	b9c0      	cbnz	r0, 7b2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5a>
    7af8:	78a0      	ldrb	r0, [r4, #2]
    7afa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7afe:	2800      	cmp	r0, #0
    7b00:	d039      	beq.n	7b76 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa6>
    7b02:	f104 0018 	add.w	r0, r4, #24
    7b06:	f009 fa2d 	bl	10f64 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7b0a:	4605      	mov	r5, r0
    7b0c:	f104 0018 	add.w	r0, r4, #24
    7b10:	f009 fa7d 	bl	1100e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7b14:	1a28      	subs	r0, r5, r0
    7b16:	b2c0      	uxtb	r0, r0
    7b18:	f009 faa9 	bl	1106e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7b1c:	6871      	ldr	r1, [r6, #4]
    7b1e:	4408      	add	r0, r1
    7b20:	6070      	str	r0, [r6, #4]
    7b22:	f104 0018 	add.w	r0, r4, #24
    7b26:	f009 fa9d 	bl	11064 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7b2a:	f104 0018 	add.w	r0, r4, #24
    7b2e:	f009 fa29 	bl	10f84 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7b32:	f006 fced 	bl	e510 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7b36:	7921      	ldrb	r1, [r4, #4]
    7b38:	2025      	movs	r0, #37	; 0x25
    7b3a:	f006 fccb 	bl	e4d4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7b3e:	4d53      	ldr	r5, [pc, #332]	; (7c8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1bc>)
    7b40:	f894 804a 	ldrb.w	r8, [r4, #74]	; 0x4a
    7b44:	2100      	movs	r1, #0
    7b46:	6828      	ldr	r0, [r5, #0]
    7b48:	8001      	strh	r1, [r0, #0]
    7b4a:	7801      	ldrb	r1, [r0, #0]
    7b4c:	f021 0120 	bic.w	r1, r1, #32
    7b50:	7001      	strb	r1, [r0, #0]
    7b52:	8861      	ldrh	r1, [r4, #2]
    7b54:	2913      	cmp	r1, #19
    7b56:	d02b      	beq.n	7bb0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    7b58:	dc11      	bgt.n	7b7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xae>
    7b5a:	2910      	cmp	r1, #16
    7b5c:	bf08      	it	eq
    7b5e:	2102      	moveq	r1, #2
    7b60:	d039      	beq.n	7bd6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7b62:	2912      	cmp	r1, #18
    7b64:	bf08      	it	eq
    7b66:	2106      	moveq	r1, #6
    7b68:	d035      	beq.n	7bd6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7b6a:	bf00      	nop
    7b6c:	f240 51a9 	movw	r1, #1449	; 0x5a9
    7b70:	202d      	movs	r0, #45	; 0x2d
    7b72:	f7fc f807 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b7a:	f000 be1f 	b.w	87bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7bc>
    7b7e:	2915      	cmp	r1, #21
    7b80:	bf18      	it	ne
    7b82:	291d      	cmpne	r1, #29
    7b84:	d1f2      	bne.n	7b6c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9c>
    7b86:	f04f 0101 	mov.w	r1, #1
    7b8a:	f008 ffd9 	bl	10b40 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7b8e:	6828      	ldr	r0, [r5, #0]
    7b90:	f1b8 0f00 	cmp.w	r8, #0
    7b94:	7801      	ldrb	r1, [r0, #0]
    7b96:	f041 0120 	orr.w	r1, r1, #32
    7b9a:	7001      	strb	r1, [r0, #0]
    7b9c:	d011      	beq.n	7bc2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    7b9e:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    7ba2:	f008 ffef 	bl	10b84 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7ba6:	2101      	movs	r1, #1
    7ba8:	6828      	ldr	r0, [r5, #0]
    7baa:	f008 fff2 	bl	10b92 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7bae:	e014      	b.n	7bda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7bb0:	2100      	movs	r1, #0
    7bb2:	f008 ffc5 	bl	10b40 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bb6:	6828      	ldr	r0, [r5, #0]
    7bb8:	7801      	ldrb	r1, [r0, #0]
    7bba:	f041 0120 	orr.w	r1, r1, #32
    7bbe:	7001      	strb	r1, [r0, #0]
    7bc0:	e00b      	b.n	7bda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7bc2:	f104 0144 	add.w	r1, r4, #68	; 0x44
    7bc6:	f008 ffdd 	bl	10b84 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7bca:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    7bce:	6828      	ldr	r0, [r5, #0]
    7bd0:	f008 ffdf 	bl	10b92 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7bd4:	e001      	b.n	7bda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10a>
    7bd6:	f008 ffb3 	bl	10b40 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bda:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7bde:	6828      	ldr	r0, [r5, #0]
    7be0:	f008 ffe0 	bl	10ba4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7be4:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7be8:	6828      	ldr	r0, [r5, #0]
    7bea:	f008 ffe2 	bl	10bb2 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7bee:	8860      	ldrh	r0, [r4, #2]
    7bf0:	281d      	cmp	r0, #29
    7bf2:	bf18      	it	ne
    7bf4:	2815      	cmpne	r0, #21
    7bf6:	d004      	beq.n	7c02 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7bf8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    7bfa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7bfc:	6828      	ldr	r0, [r5, #0]
    7bfe:	f008 ff47 	bl	10a90 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7c02:	b1ef      	cbz	r7, 7c40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x170>
    7c04:	f104 0018 	add.w	r0, r4, #24
    7c08:	68b7      	ldr	r7, [r6, #8]
    7c0a:	f009 f9ab 	bl	10f64 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7c0e:	4680      	mov	r8, r0
    7c10:	f104 0018 	add.w	r0, r4, #24
    7c14:	f009 f9fb 	bl	1100e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7c18:	eba8 0000 	sub.w	r0, r8, r0
    7c1c:	1e40      	subs	r0, r0, #1
    7c1e:	b2c0      	uxtb	r0, r0
    7c20:	8861      	ldrh	r1, [r4, #2]
    7c22:	2228      	movs	r2, #40	; 0x28
    7c24:	f000 fff8 	bl	8c18 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7c28:	19c1      	adds	r1, r0, r7
    7c2a:	78a0      	ldrb	r0, [r4, #2]
    7c2c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7c30:	2800      	cmp	r0, #0
    7c32:	bf1c      	itt	ne
    7c34:	6870      	ldrne	r0, [r6, #4]
    7c36:	4401      	addne	r1, r0
    7c38:	7922      	ldrb	r2, [r4, #4]
    7c3a:	2000      	movs	r0, #0
    7c3c:	f006 f986 	bl	df4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7c40:	6828      	ldr	r0, [r5, #0]
    7c42:	f006 f937 	bl	deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7c46:	2004      	movs	r0, #4
    7c48:	7030      	strb	r0, [r6, #0]
    7c4a:	8860      	ldrh	r0, [r4, #2]
    7c4c:	2813      	cmp	r0, #19
    7c4e:	d010      	beq.n	7c72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    7c50:	dc0b      	bgt.n	7c6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x19a>
    7c52:	2810      	cmp	r0, #16
    7c54:	bf08      	it	eq
    7c56:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c5a:	2812      	cmp	r0, #18
    7c5c:	d009      	beq.n	7c72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1a2>
    7c5e:	bf00      	nop
    7c60:	f640 4119 	movw	r1, #3097	; 0xc19
    7c64:	202d      	movs	r0, #45	; 0x2d
    7c66:	f7fb ff8d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c6a:	2815      	cmp	r0, #21
    7c6c:	bf18      	it	ne
    7c6e:	281d      	cmpne	r0, #29
    7c70:	d1f6      	bne.n	7c60 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x190>
    7c72:	7923      	ldrb	r3, [r4, #4]
    7c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7c78:	f04f 0201 	mov.w	r2, #1
    7c7c:	4611      	mov	r1, r2
    7c7e:	f04f 0000 	mov.w	r0, #0
    7c82:	f006 baf7 	b.w	e274 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7c86:	0000      	.short	0x0000
    7c88:	2000156c 	.word	0x2000156c
    7c8c:	20000110 	.word	0x20000110
    7c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c94:	4e3d      	ldr	r6, [pc, #244]	; (7d8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2bc>)
    7c96:	4681      	mov	r9, r0
    7c98:	7830      	ldrb	r0, [r6, #0]
    7c9a:	2802      	cmp	r0, #2
    7c9c:	bf1c      	itt	ne
    7c9e:	7830      	ldrbne	r0, [r6, #0]
    7ca0:	2803      	cmpne	r0, #3
    7ca2:	d005      	beq.n	7cb0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1e0>
    7ca4:	f44f 613a 	mov.w	r1, #2976	; 0xba0
    7ca8:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7cac:	f7fb ff6a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cb0:	4d37      	ldr	r5, [pc, #220]	; (7d90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c0>)
    7cb2:	7b28      	ldrb	r0, [r5, #12]
    7cb4:	b150      	cbz	r0, 7ccc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1fc>
    7cb6:	f105 0021 	add.w	r0, r5, #33	; 0x21
    7cba:	f006 fba1 	bl	e400 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7cbe:	2800      	cmp	r0, #0
    7cc0:	bf04      	itt	eq
    7cc2:	207f      	moveq	r0, #127	; 0x7f
    7cc4:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7cc8:	f006 fb80 	bl	e3cc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7ccc:	4c31      	ldr	r4, [pc, #196]	; (7d94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c4>)
    7cce:	6820      	ldr	r0, [r4, #0]
    7cd0:	f008 fe94 	bl	109fc <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>
    7cd4:	4607      	mov	r7, r0
    7cd6:	6860      	ldr	r0, [r4, #4]
    7cd8:	f04f 0800 	mov.w	r8, #0
    7cdc:	2800      	cmp	r0, #0
    7cde:	bf18      	it	ne
    7ce0:	f890 806b 	ldrbne.w	r8, [r0, #107]	; 0x6b
    7ce4:	f1b9 0f00 	cmp.w	r9, #0
    7ce8:	d03e      	beq.n	7d68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7cea:	f006 f80b 	bl	dd04 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    7cee:	2800      	cmp	r0, #0
    7cf0:	d03a      	beq.n	7d68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7cf2:	2f05      	cmp	r7, #5
    7cf4:	d11b      	bne.n	7d2e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7cf6:	6820      	ldr	r0, [r4, #0]
    7cf8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    7cfc:	f000 001f 	and.w	r0, r0, #31
    7d00:	2810      	cmp	r0, #16
    7d02:	d914      	bls.n	7d2e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7d04:	7ba8      	ldrb	r0, [r5, #14]
    7d06:	b190      	cbz	r0, 7d2e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x25e>
    7d08:	20ff      	movs	r0, #255	; 0xff
    7d0a:	f88d 0000 	strb.w	r0, [sp]
    7d0e:	2701      	movs	r7, #1
    7d10:	4669      	mov	r1, sp
    7d12:	2005      	movs	r0, #5
    7d14:	f000 fb24 	bl	8360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    7d18:	b330      	cbz	r0, 7d68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d1a:	f885 70a2 	strb.w	r7, [r5, #162]	; 0xa2
    7d1e:	6820      	ldr	r0, [r4, #0]
    7d20:	2222      	movs	r2, #34	; 0x22
    7d22:	1cc1      	adds	r1, r0, #3
    7d24:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
    7d28:	f7fb fda2 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7d2c:	e01c      	b.n	7d68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d2e:	4641      	mov	r1, r8
    7d30:	6820      	ldr	r0, [r4, #0]
    7d32:	f008 fe67 	bl	10a04 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7d36:	b1b8      	cbz	r0, 7d68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x298>
    7d38:	7831      	ldrb	r1, [r6, #0]
    7d3a:	4638      	mov	r0, r7
    7d3c:	2902      	cmp	r1, #2
    7d3e:	bf1c      	itt	ne
    7d40:	7831      	ldrbne	r1, [r6, #0]
    7d42:	2903      	cmpne	r1, #3
    7d44:	d005      	beq.n	7d52 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x282>
    7d46:	f640 3179 	movw	r1, #2937	; 0xb79
    7d4a:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7d4e:	f7fb ff19 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d52:	68a1      	ldr	r1, [r4, #8]
    7d54:	7832      	ldrb	r2, [r6, #0]
    7d56:	6949      	ldr	r1, [r1, #20]
    7d58:	f06f 0307 	mvn.w	r3, #7
    7d5c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7d60:	5889      	ldr	r1, [r1, r2]
    7d62:	4788      	blx	r1
    7d64:	4605      	mov	r5, r0
    7d66:	e000      	b.n	7d6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x29a>
    7d68:	2501      	movs	r5, #1
    7d6a:	7bb0      	ldrb	r0, [r6, #14]
    7d6c:	b118      	cbz	r0, 7d76 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2a6>
    7d6e:	f005 fcb3 	bl	d6d8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7d72:	f005 fad9 	bl	d328 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7d76:	2d00      	cmp	r5, #0
    7d78:	bf08      	it	eq
    7d7a:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7d7e:	68a0      	ldr	r0, [r4, #8]
    7d80:	6880      	ldr	r0, [r0, #8]
    7d82:	b001      	add	sp, #4
    7d84:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7d88:	4700      	bx	r0
    7d8a:	0000      	.short	0x0000
    7d8c:	2000156c 	.word	0x2000156c
    7d90:	200014a4 	.word	0x200014a4
    7d94:	20000110 	.word	0x20000110
    7d98:	b538      	push	{r3, r4, r5, lr}
    7d9a:	2803      	cmp	r0, #3
    7d9c:	d002      	beq.n	7da4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2d4>
    7d9e:	2805      	cmp	r0, #5
    7da0:	d067      	beq.n	7e72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a2>
    7da2:	e064      	b.n	7e6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7da4:	20ff      	movs	r0, #255	; 0xff
    7da6:	f88d 0000 	strb.w	r0, [sp]
    7daa:	4669      	mov	r1, sp
    7dac:	2003      	movs	r0, #3
    7dae:	f000 fad7 	bl	8360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    7db2:	2800      	cmp	r0, #0
    7db4:	d05b      	beq.n	7e6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7db6:	4c33      	ldr	r4, [pc, #204]	; (7e84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b4>)
    7db8:	4d33      	ldr	r5, [pc, #204]	; (7e88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3b8>)
    7dba:	7b20      	ldrb	r0, [r4, #12]
    7dbc:	b3b0      	cbz	r0, 7e2c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7dbe:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
    7dc2:	bb98      	cbnz	r0, 7e2c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x35c>
    7dc4:	f89d 0000 	ldrb.w	r0, [sp]
    7dc8:	2101      	movs	r1, #1
    7dca:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    7dce:	7821      	ldrb	r1, [r4, #0]
    7dd0:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    7dd4:	28ff      	cmp	r0, #255	; 0xff
    7dd6:	d011      	beq.n	7dfc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x32c>
    7dd8:	f104 029b 	add.w	r2, r4, #155	; 0x9b
    7ddc:	1e51      	subs	r1, r2, #1
    7dde:	f7fe f80b 	bl	5df8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7de2:	b130      	cbz	r0, 7df2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x322>
    7de4:	f894 009a 	ldrb.w	r0, [r4, #154]	; 0x9a
    7de8:	f040 0002 	orr.w	r0, r0, #2
    7dec:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    7df0:	e012      	b.n	7e18 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x348>
    7df2:	f640 6129 	movw	r1, #3625	; 0xe29
    7df6:	202d      	movs	r0, #45	; 0x2d
    7df8:	f7fb fec4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dfc:	6828      	ldr	r0, [r5, #0]
    7dfe:	7801      	ldrb	r1, [r0, #0]
    7e00:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7e04:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    7e08:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7e0c:	f8c4 109b 	str.w	r1, [r4, #155]	; 0x9b
    7e10:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7e14:	f8a4 009f 	strh.w	r0, [r4, #159]	; 0x9f
    7e18:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
    7e1c:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
    7e20:	297f      	cmp	r1, #127	; 0x7f
    7e22:	d01f      	beq.n	7e64 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x394>
    7e24:	7001      	strb	r1, [r0, #0]
    7e26:	207f      	movs	r0, #127	; 0x7f
    7e28:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    7e2c:	6828      	ldr	r0, [r5, #0]
    7e2e:	2100      	movs	r1, #0
    7e30:	8001      	strh	r1, [r0, #0]
    7e32:	2104      	movs	r1, #4
    7e34:	f008 fe84 	bl	10b40 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7e38:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    7e3c:	6828      	ldr	r0, [r5, #0]
    7e3e:	f008 feb1 	bl	10ba4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7e42:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    7e46:	6828      	ldr	r0, [r5, #0]
    7e48:	f008 feb3 	bl	10bb2 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7e4c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    7e4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7e50:	6828      	ldr	r0, [r5, #0]
    7e52:	f008 feb7 	bl	10bc4 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7e56:	490d      	ldr	r1, [pc, #52]	; (7e8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3bc>)
    7e58:	2005      	movs	r0, #5
    7e5a:	7008      	strb	r0, [r1, #0]
    7e5c:	6828      	ldr	r0, [r5, #0]
    7e5e:	f006 f829 	bl	deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7e62:	e00c      	b.n	7e7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    7e64:	f640 41cb 	movw	r1, #3275	; 0xccb
    7e68:	202d      	movs	r0, #45	; 0x2d
    7e6a:	f7fb fe8b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e6e:	2001      	movs	r0, #1
    7e70:	bd38      	pop	{r3, r4, r5, pc}
    7e72:	4807      	ldr	r0, [pc, #28]	; (7e90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c0>)
    7e74:	6800      	ldr	r0, [r0, #0]
    7e76:	b110      	cbz	r0, 7e7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ae>
    7e78:	4780      	blx	r0
    7e7a:	2800      	cmp	r0, #0
    7e7c:	d0f7      	beq.n	7e6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x39e>
    7e7e:	2000      	movs	r0, #0
    7e80:	bd38      	pop	{r3, r4, r5, pc}
    7e82:	0000      	.short	0x0000
    7e84:	200014a4 	.word	0x200014a4
    7e88:	20000110 	.word	0x20000110
    7e8c:	2000156c 	.word	0x2000156c
    7e90:	20000120 	.word	0x20000120
    7e94:	b510      	push	{r4, lr}
    7e96:	b990      	cbnz	r0, 7ebe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    7e98:	2900      	cmp	r1, #0
    7e9a:	bf08      	it	eq
    7e9c:	bd10      	popeq	{r4, pc}
    7e9e:	f000 feed 	bl	8c7c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7ea2:	b160      	cbz	r0, 7ebe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3ee>
    7ea4:	4808      	ldr	r0, [pc, #32]	; (7ec8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3f8>)
    7ea6:	4909      	ldr	r1, [pc, #36]	; (7ecc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3fc>)
    7ea8:	6880      	ldr	r0, [r0, #8]
    7eaa:	7809      	ldrb	r1, [r1, #0]
    7eac:	6900      	ldr	r0, [r0, #16]
    7eae:	f06f 020f 	mvn.w	r2, #15
    7eb2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7eb6:	5840      	ldr	r0, [r0, r1]
    7eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ebc:	4700      	bx	r0
    7ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ec2:	f000 bc7b 	b.w	87bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7bc>
    7ec6:	0000      	.short	0x0000
    7ec8:	20000110 	.word	0x20000110
    7ecc:	2000156c 	.word	0x2000156c
    7ed0:	b570      	push	{r4, r5, r6, lr}
    7ed2:	4c1a      	ldr	r4, [pc, #104]	; (7f3c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x46c>)
    7ed4:	2500      	movs	r5, #0
    7ed6:	8860      	ldrh	r0, [r4, #2]
    7ed8:	2810      	cmp	r0, #16
    7eda:	d011      	beq.n	7f00 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x430>
    7edc:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
    7ee0:	7bb0      	ldrb	r0, [r6, #14]
    7ee2:	b120      	cbz	r0, 7eee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x41e>
    7ee4:	f005 fa4c 	bl	d380 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7ee8:	2040      	movs	r0, #64	; 0x40
    7eea:	f005 fc05 	bl	d6f8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7eee:	4814      	ldr	r0, [pc, #80]	; (7f40 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x470>)
    7ef0:	6800      	ldr	r0, [r0, #0]
    7ef2:	f005 ffdf 	bl	deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ef6:	78a0      	ldrb	r0, [r4, #2]
    7ef8:	f010 0f04 	tst.w	r0, #4
    7efc:	d005      	beq.n	7f0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x43a>
    7efe:	e011      	b.n	7f24 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x454>
    7f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f04:	2001      	movs	r0, #1
    7f06:	f7ff bdeb 	b.w	7ae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    7f0a:	7c20      	ldrb	r0, [r4, #16]
    7f0c:	2801      	cmp	r0, #1
    7f0e:	bf14      	ite	ne
    7f10:	2803      	cmpne	r0, #3
    7f12:	2510      	moveq	r5, #16
    7f14:	f045 020e 	orr.w	r2, r5, #14
    7f18:	f04f 0100 	mov.w	r1, #0
    7f1c:	7923      	ldrb	r3, [r4, #4]
    7f1e:	4608      	mov	r0, r1
    7f20:	f006 f9a8 	bl	e274 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7f24:	7b20      	ldrb	r0, [r4, #12]
    7f26:	2800      	cmp	r0, #0
    7f28:	bf18      	it	ne
    7f2a:	f006 fa5b 	blne	e3e4 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>
    7f2e:	2000      	movs	r0, #0
    7f30:	f005 fe2e 	bl	db90 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7f34:	2002      	movs	r0, #2
    7f36:	7030      	strb	r0, [r6, #0]
    7f38:	bd70      	pop	{r4, r5, r6, pc}
    7f3a:	0000      	.short	0x0000
    7f3c:	200014a4 	.word	0x200014a4
    7f40:	20000110 	.word	0x20000110
    7f44:	b570      	push	{r4, r5, r6, lr}
    7f46:	4d1e      	ldr	r5, [pc, #120]	; (7fc0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f0>)
    7f48:	7b28      	ldrb	r0, [r5, #12]
    7f4a:	b150      	cbz	r0, 7f62 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x492>
    7f4c:	f105 0021 	add.w	r0, r5, #33	; 0x21
    7f50:	f006 fa56 	bl	e400 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7f54:	2800      	cmp	r0, #0
    7f56:	bf04      	itt	eq
    7f58:	207f      	moveq	r0, #127	; 0x7f
    7f5a:	f885 0021 	strbeq.w	r0, [r5, #33]	; 0x21
    7f5e:	f006 fa35 	bl	e3cc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    7f62:	4c18      	ldr	r4, [pc, #96]	; (7fc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f4>)
    7f64:	7ba0      	ldrb	r0, [r4, #14]
    7f66:	b118      	cbz	r0, 7f70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4a0>
    7f68:	f005 fbb6 	bl	d6d8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7f6c:	f005 f9dc 	bl	d328 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7f70:	f000 fe84 	bl	8c7c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7f74:	b1a0      	cbz	r0, 7fa0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7f76:	8868      	ldrh	r0, [r5, #2]
    7f78:	f3c0 1100 	ubfx	r1, r0, #4, #1
    7f7c:	2900      	cmp	r1, #0
    7f7e:	bf04      	itt	eq
    7f80:	f3c0 00c0 	ubfxeq	r0, r0, #3, #1
    7f84:	2800      	cmpeq	r0, #0
    7f86:	d00b      	beq.n	7fa0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d0>
    7f88:	7820      	ldrb	r0, [r4, #0]
    7f8a:	2802      	cmp	r0, #2
    7f8c:	bf1c      	itt	ne
    7f8e:	7820      	ldrbne	r0, [r4, #0]
    7f90:	2803      	cmpne	r0, #3
    7f92:	d009      	beq.n	7fa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4d8>
    7f94:	f640 21b5 	movw	r1, #2741	; 0xab5
    7f98:	f04f 002d 	mov.w	r0, #45	; 0x2d
    7f9c:	f7fb fdf2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fa4:	f000 bc0a 	b.w	87bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7bc>
    7fa8:	4807      	ldr	r0, [pc, #28]	; (7fc8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4f8>)
    7faa:	7821      	ldrb	r1, [r4, #0]
    7fac:	6880      	ldr	r0, [r0, #8]
    7fae:	68c0      	ldr	r0, [r0, #12]
    7fb0:	f06f 0207 	mvn.w	r2, #7
    7fb4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7fb8:	5840      	ldr	r0, [r0, r1]
    7fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fbe:	4700      	bx	r0
    7fc0:	200014a4 	.word	0x200014a4
    7fc4:	2000156c 	.word	0x2000156c
    7fc8:	20000110 	.word	0x20000110

00007fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fd0:	4ea1      	ldr	r6, [pc, #644]	; (8258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>)
    7fd2:	b087      	sub	sp, #28
    7fd4:	7830      	ldrb	r0, [r6, #0]
    7fd6:	2800      	cmp	r0, #0
    7fd8:	d17d      	bne.n	80d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    7fda:	f1a6 04c8 	sub.w	r4, r6, #200	; 0xc8
    7fde:	7820      	ldrb	r0, [r4, #0]
    7fe0:	28ff      	cmp	r0, #255	; 0xff
    7fe2:	d078      	beq.n	80d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    7fe4:	2500      	movs	r5, #0
    7fe6:	81b5      	strh	r5, [r6, #12]
    7fe8:	6075      	str	r5, [r6, #4]
    7fea:	7075      	strb	r5, [r6, #1]
    7fec:	70b5      	strb	r5, [r6, #2]
    7fee:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    7ff2:	4628      	mov	r0, r5
    7ff4:	f005 fe70 	bl	dcd8 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    7ff8:	4898      	ldr	r0, [pc, #608]	; (825c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25c>)
    7ffa:	af01      	add	r7, sp, #4
    7ffc:	f100 010c 	add.w	r1, r0, #12
    8000:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8260 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x260>
    8004:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    8008:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    800c:	69c0      	ldr	r0, [r0, #28]
    800e:	9005      	str	r0, [sp, #20]
    8010:	f8d8 0008 	ldr.w	r0, [r8, #8]
    8014:	6840      	ldr	r0, [r0, #4]
    8016:	9004      	str	r0, [sp, #16]
    8018:	a801      	add	r0, sp, #4
    801a:	f005 fd79 	bl	db10 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    801e:	f005 feab 	bl	dd78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    8022:	f005 fb59 	bl	d6d8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8026:	f005 f97f 	bl	d328 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    802a:	488e      	ldr	r0, [pc, #568]	; (8264 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x264>)
    802c:	f006 fa12 	bl	e454 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    8030:	488d      	ldr	r0, [pc, #564]	; (8268 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x268>)
    8032:	f006 fa1b 	bl	e46c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8036:	2000      	movs	r0, #0
    8038:	f7fb fc6e 	bl	3918 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    803c:	f104 0018 	add.w	r0, r4, #24
    8040:	f009 f810 	bl	11064 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    8044:	f104 0018 	add.w	r0, r4, #24
    8048:	f008 ff9c 	bl	10f84 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    804c:	f006 fa60 	bl	e510 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8050:	7921      	ldrb	r1, [r4, #4]
    8052:	2025      	movs	r0, #37	; 0x25
    8054:	f006 fa3e 	bl	e4d4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    8058:	f994 000f 	ldrsb.w	r0, [r4, #15]
    805c:	f005 ff24 	bl	dea8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    8060:	7921      	ldrb	r1, [r4, #4]
    8062:	2000      	movs	r0, #0
    8064:	f005 fbee 	bl	d844 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    8068:	2701      	movs	r7, #1
    806a:	60b0      	str	r0, [r6, #8]
    806c:	2800      	cmp	r0, #0
    806e:	bf08      	it	eq
    8070:	7037      	strbeq	r7, [r6, #0]
    8072:	f000 80ed 	beq.w	8250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x250>
    8076:	210f      	movs	r1, #15
    8078:	2005      	movs	r0, #5
    807a:	f005 fb6b 	bl	d754 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    807e:	7d20      	ldrb	r0, [r4, #20]
    8080:	2800      	cmp	r0, #0
    8082:	bf01      	itttt	eq
    8084:	7ca0      	ldrbeq	r0, [r4, #18]
    8086:	2800      	cmpeq	r0, #0
    8088:	78a0      	ldrbeq	r0, [r4, #2]
    808a:	f010 0f04 	tsteq.w	r0, #4
    808e:	d06b      	beq.n	8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    8090:	f006 fdbb 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8094:	4681      	mov	r9, r0
    8096:	4649      	mov	r1, r9
    8098:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    809a:	f7f9 f9f1 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    809e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    80a2:	4682      	mov	sl, r0
    80a4:	fb90 f0fb 	sdiv	r0, r0, fp
    80a8:	fb0b a010 	mls	r0, fp, r0, sl
    80ac:	4241      	negs	r1, r0
    80ae:	4648      	mov	r0, r9
    80b0:	f7f9 f9b0 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    80b4:	63a0      	str	r0, [r4, #56]	; 0x38
    80b6:	fb9a f0fb 	sdiv	r0, sl, fp
    80ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    80bc:	4408      	add	r0, r1
    80be:	6360      	str	r0, [r4, #52]	; 0x34
    80c0:	f7fe f808 	bl	60d4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    80c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    80c6:	4288      	cmp	r0, r1
    80c8:	d86a      	bhi.n	81a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    80ca:	e9c4 590d 	strd	r5, r9, [r4, #52]	; 0x34
    80ce:	f04f 0901 	mov.w	r9, #1
    80d2:	7ce0      	ldrb	r0, [r4, #19]
    80d4:	e000      	b.n	80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>
    80d6:	e01a      	b.n	810e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10e>
    80d8:	f7fd fdfe 	bl	5cd8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    80dc:	4682      	mov	sl, r0
    80de:	7ca0      	ldrb	r0, [r4, #18]
    80e0:	2800      	cmp	r0, #0
    80e2:	bf18      	it	ne
    80e4:	f1ba 0f00 	cmpne.w	sl, #0
    80e8:	d003      	beq.n	80f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf2>
    80ea:	7ce0      	ldrb	r0, [r4, #19]
    80ec:	f7fd fde8 	bl	5cc0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    80f0:	b188      	cbz	r0, 8116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    80f2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    80f6:	2800      	cmp	r0, #0
    80f8:	bf1c      	itt	ne
    80fa:	7d20      	ldrbne	r0, [r4, #20]
    80fc:	2800      	cmpne	r0, #0
    80fe:	d022      	beq.n	8146 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146>
    8100:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    8104:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    8108:	2801      	cmp	r0, #1
    810a:	d012      	beq.n	8132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    810c:	e016      	b.n	813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    810e:	b007      	add	sp, #28
    8110:	200c      	movs	r0, #12
    8112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8116:	463a      	mov	r2, r7
    8118:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    811c:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    8120:	4650      	mov	r0, sl
    8122:	f008 f893 	bl	1024c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8126:	7ce1      	ldrb	r1, [r4, #19]
    8128:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    812c:	f7fd fde0 	bl	5cf0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    8130:	e009      	b.n	8146 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146>
    8132:	7948      	ldrb	r0, [r1, #5]
    8134:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8138:	2840      	cmp	r0, #64	; 0x40
    813a:	d016      	beq.n	816a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a>
    813c:	4649      	mov	r1, r9
    813e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    8142:	f008 f873 	bl	1022c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8146:	78a0      	ldrb	r0, [r4, #2]
    8148:	f010 0f04 	tst.w	r0, #4
    814c:	bf1c      	itt	ne
    814e:	7ca0      	ldrbne	r0, [r4, #18]
    8150:	2800      	cmpne	r0, #0
    8152:	d025      	beq.n	81a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    8154:	7ce0      	ldrb	r0, [r4, #19]
    8156:	f7fd fe1d 	bl	5d94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    815a:	ea5f 0900 	movs.w	r9, r0
    815e:	d01f      	beq.n	81a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    8160:	2110      	movs	r1, #16
    8162:	f7fe fc17 	bl	6994 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8166:	b140      	cbz	r0, 817a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17a>
    8168:	e01a      	b.n	81a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>
    816a:	f7fd fda5 	bl	5cb8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    816e:	463a      	mov	r2, r7
    8170:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    8174:	f008 f86a 	bl	1024c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8178:	e7e5      	b.n	8146 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146>
    817a:	463a      	mov	r2, r7
    817c:	f884 704a 	strb.w	r7, [r4, #74]	; 0x4a
    8180:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    8184:	4648      	mov	r0, r9
    8186:	f008 f861 	bl	1024c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    818a:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    818e:	f8d8 0000 	ldr.w	r0, [r8]
    8192:	f008 fcf7 	bl	10b84 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8196:	2101      	movs	r1, #1
    8198:	f8d8 0000 	ldr.w	r0, [r8]
    819c:	f008 fcf9 	bl	10b92 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    81a0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    81a4:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    81a8:	f006 f948 	bl	e43c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    81ac:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    81b0:	b340      	cbz	r0, 8204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>
    81b2:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
    81b6:	8620      	strh	r0, [r4, #48]	; 0x30
    81b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    81ba:	62a0      	str	r0, [r4, #40]	; 0x28
    81bc:	78a0      	ldrb	r0, [r4, #2]
    81be:	f3c0 1000 	ubfx	r0, r0, #4, #1
    81c2:	b9e8      	cbnz	r0, 8200 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x200>
    81c4:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    81c8:	2102      	movs	r1, #2
    81ca:	f3c0 070b 	ubfx	r7, r0, #0, #12
    81ce:	f8ad 7000 	strh.w	r7, [sp]
    81d2:	4668      	mov	r0, sp
    81d4:	f7fc fd2c 	bl	4c30 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    81d8:	b128      	cbz	r0, 81e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e6>
    81da:	f8bd 0000 	ldrh.w	r0, [sp]
    81de:	f3c0 000b 	ubfx	r0, r0, #0, #12
    81e2:	42b8      	cmp	r0, r7
    81e4:	d104      	bne.n	81f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f0>
    81e6:	f8bd 0000 	ldrh.w	r0, [sp]
    81ea:	1c40      	adds	r0, r0, #1
    81ec:	f8ad 0000 	strh.w	r0, [sp]
    81f0:	f8bd 0000 	ldrh.w	r0, [sp]
    81f4:	f8b4 101f 	ldrh.w	r1, [r4, #31]
    81f8:	f360 010b 	bfi	r1, r0, #0, #12
    81fc:	f8a4 101f 	strh.w	r1, [r4, #31]
    8200:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    8204:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    8208:	b130      	cbz	r0, 8218 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x218>
    820a:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    820e:	8660      	strh	r0, [r4, #50]	; 0x32
    8210:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    8212:	62e0      	str	r0, [r4, #44]	; 0x2c
    8214:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    8218:	f8b4 001f 	ldrh.w	r0, [r4, #31]
    821c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    821e:	f3c0 000b 	ubfx	r0, r0, #0, #12
    8222:	fa50 f081 	uxtab	r0, r0, r1
    8226:	7fa1      	ldrb	r1, [r4, #30]
    8228:	4b11      	ldr	r3, [pc, #68]	; (8270 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x270>)
    822a:	4408      	add	r0, r1
    822c:	461a      	mov	r2, r3
    822e:	2100      	movs	r1, #0
    8230:	fbe0 2103 	umlal	r2, r1, r0, r3
    8234:	0909      	lsrs	r1, r1, #4
    8236:	f06f 0224 	mvn.w	r2, #36	; 0x24
    823a:	fb01 0002 	mla	r0, r1, r2, r0
    823e:	77a0      	strb	r0, [r4, #30]
    8240:	f7fe f80a 	bl	6258 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    8244:	2103      	movs	r1, #3
    8246:	f8d8 0000 	ldr.w	r0, [r8]
    824a:	f7fd fd21 	bl	5c90 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    824e:	73b0      	strb	r0, [r6, #14]
    8250:	b007      	add	sp, #28
    8252:	2000      	movs	r0, #0
    8254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8258:	2000156c 	.word	0x2000156c
    825c:	00008b84 	.word	0x00008b84
    8260:	20000110 	.word	0x20000110
    8264:	00008b8c 	.word	0x00008b8c
    8268:	00008b89 	.word	0x00008b89
    826c:	000f4240 	.word	0x000f4240
    8270:	6eb3e453 	.word	0x6eb3e453
    8274:	b570      	push	{r4, r5, r6, lr}
    8276:	4d1b      	ldr	r5, [pc, #108]	; (82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>)
    8278:	7828      	ldrb	r0, [r5, #0]
    827a:	2800      	cmp	r0, #0
    827c:	bf08      	it	eq
    827e:	bd70      	popeq	{r4, r5, r6, pc}
    8280:	7828      	ldrb	r0, [r5, #0]
    8282:	4c19      	ldr	r4, [pc, #100]	; (82e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>)
    8284:	2802      	cmp	r0, #2
    8286:	bf1c      	itt	ne
    8288:	7828      	ldrbne	r0, [r5, #0]
    828a:	2803      	cmpne	r0, #3
    828c:	d112      	bne.n	82b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>
    828e:	7b20      	ldrb	r0, [r4, #12]
    8290:	b150      	cbz	r0, 82a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a8>
    8292:	f104 0021 	add.w	r0, r4, #33	; 0x21
    8296:	f006 f8b3 	bl	e400 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    829a:	2800      	cmp	r0, #0
    829c:	bf04      	itt	eq
    829e:	207f      	moveq	r0, #127	; 0x7f
    82a0:	f884 0021 	strbeq.w	r0, [r4, #33]	; 0x21
    82a4:	f006 f892 	bl	e3cc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>
    82a8:	7ba8      	ldrb	r0, [r5, #14]
    82aa:	b118      	cbz	r0, 82b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>
    82ac:	f005 fa14 	bl	d6d8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    82b0:	f005 f83a 	bl	d328 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    82b4:	f7fb fb1c 	bl	38f0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    82b8:	f000 fce0 	bl	8c7c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    82bc:	b168      	cbz	r0, 82da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2da>
    82be:	78a0      	ldrb	r0, [r4, #2]
    82c0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    82c4:	b920      	cbnz	r0, 82d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d0>
    82c6:	f104 0018 	add.w	r0, r4, #24
    82ca:	f008 fea0 	bl	1100e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    82ce:	b120      	cbz	r0, 82da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2da>
    82d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82d4:	2001      	movs	r0, #1
    82d6:	f7ff bc03 	b.w	7ae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
    82da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82de:	f000 ba6d 	b.w	87bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7bc>
    82e2:	0000      	.short	0x0000
    82e4:	2000156c 	.word	0x2000156c
    82e8:	200014a4 	.word	0x200014a4
    82ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82f0:	4b19      	ldr	r3, [pc, #100]	; (8358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x358>)
    82f2:	2600      	movs	r6, #0
    82f4:	2701      	movs	r7, #1
    82f6:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
    82fa:	781c      	ldrb	r4, [r3, #0]
    82fc:	f893 c00d 	ldrb.w	ip, [r3, #13]
    8300:	b1b8      	cbz	r0, 8332 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x332>
    8302:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    8306:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
    830a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    830e:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    8312:	f1bc 0f00 	cmp.w	ip, #0
    8316:	bf0c      	ite	eq
    8318:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    831c:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    8320:	480e      	ldr	r0, [pc, #56]	; (835c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35c>)
    8322:	6840      	ldr	r0, [r0, #4]
    8324:	8800      	ldrh	r0, [r0, #0]
    8326:	f7fc f807 	bl	4338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    832a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    832e:	f007 bd72 	b.w	fe16 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    8332:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8336:	f883 408d 	strb.w	r4, [r3, #141]	; 0x8d
    833a:	f8a3 008e 	strh.w	r0, [r3, #142]	; 0x8e
    833e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    8342:	f883 708a 	strb.w	r7, [r3, #138]	; 0x8a
    8346:	f1bc 0f00 	cmp.w	ip, #0
    834a:	bf14      	ite	ne
    834c:	f883 5090 	strbne.w	r5, [r3, #144]	; 0x90
    8350:	f883 6090 	strbeq.w	r6, [r3, #144]	; 0x90
    8354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8358:	200014a4 	.word	0x200014a4
    835c:	20000110 	.word	0x20000110
    8360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8364:	4c43      	ldr	r4, [pc, #268]	; (8474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x474>)
    8366:	4680      	mov	r8, r0
    8368:	460f      	mov	r7, r1
    836a:	8860      	ldrh	r0, [r4, #2]
    836c:	f1b8 0f03 	cmp.w	r8, #3
    8370:	bf08      	it	eq
    8372:	f3c0 0540 	ubfxeq	r5, r0, #1, #1
    8376:	d008      	beq.n	838a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38a>
    8378:	f000 0501 	and.w	r5, r0, #1
    837c:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
    8380:	2800      	cmp	r0, #0
    8382:	bf18      	it	ne
    8384:	f04f 0901 	movne.w	r9, #1
    8388:	d101      	bne.n	838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    838a:	f04f 0900 	mov.w	r9, #0
    838e:	f005 f9db 	bl	d748 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    8392:	4606      	mov	r6, r0
    8394:	f1b8 0f03 	cmp.w	r8, #3
    8398:	bf0c      	ite	eq
    839a:	f04f 0802 	moveq.w	r8, #2
    839e:	f04f 0801 	movne.w	r8, #1
    83a2:	ea35 0009 	bics.w	r0, r5, r9
    83a6:	bf08      	it	eq
    83a8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83ac:	4832      	ldr	r0, [pc, #200]	; (8478 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x478>)
    83ae:	7b80      	ldrb	r0, [r0, #14]
    83b0:	b138      	cbz	r0, 83c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c2>
    83b2:	f007 ff83 	bl	102bc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    83b6:	7038      	strb	r0, [r7, #0]
    83b8:	28ff      	cmp	r0, #255	; 0xff
    83ba:	d002      	beq.n	83c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c2>
    83bc:	f7fd fd36 	bl	5e2c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    83c0:	4306      	orrs	r6, r0
    83c2:	4d2e      	ldr	r5, [pc, #184]	; (847c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x47c>)
    83c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    83c8:	6828      	ldr	r0, [r5, #0]
    83ca:	7801      	ldrb	r1, [r0, #0]
    83cc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    83d0:	4291      	cmp	r1, r2
    83d2:	d109      	bne.n	83e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e8>
    83d4:	2206      	movs	r2, #6
    83d6:	f104 0144 	add.w	r1, r4, #68	; 0x44
    83da:	1cc0      	adds	r0, r0, #3
    83dc:	f006 fd6a 	bl	eeb4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    83e0:	2800      	cmp	r0, #0
    83e2:	bf08      	it	eq
    83e4:	2001      	moveq	r0, #1
    83e6:	d000      	beq.n	83ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ea>
    83e8:	2000      	movs	r0, #0
    83ea:	7839      	ldrb	r1, [r7, #0]
    83ec:	29ff      	cmp	r1, #255	; 0xff
    83ee:	d004      	beq.n	83fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fa>
    83f0:	b9b8      	cbnz	r0, 8422 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x422>
    83f2:	7ce0      	ldrb	r0, [r4, #19]
    83f4:	4288      	cmp	r0, r1
    83f6:	d116      	bne.n	8426 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x426>
    83f8:	e013      	b.n	8422 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x422>
    83fa:	b1a0      	cbz	r0, 8426 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x426>
    83fc:	6829      	ldr	r1, [r5, #0]
    83fe:	f811 0b03 	ldrb.w	r0, [r1], #3
    8402:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8406:	f7fd fd23 	bl	5e50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    840a:	4607      	mov	r7, r0
    840c:	f7fd fe76 	bl	60fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    8410:	b138      	cbz	r0, 8422 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x422>
    8412:	4638      	mov	r0, r7
    8414:	f7fd fcbe 	bl	5d94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8418:	b118      	cbz	r0, 8422 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x422>
    841a:	2110      	movs	r1, #16
    841c:	f7fe faba 	bl	6994 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8420:	b108      	cbz	r0, 8426 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x426>
    8422:	2001      	movs	r0, #1
    8424:	e000      	b.n	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    8426:	2000      	movs	r0, #0
    8428:	78a1      	ldrb	r1, [r4, #2]
    842a:	f011 0f04 	tst.w	r1, #4
    842e:	d001      	beq.n	8434 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x434>
    8430:	b1e0      	cbz	r0, 846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>
    8432:	e018      	b.n	8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    8434:	b9be      	cbnz	r6, 8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    8436:	7c20      	ldrb	r0, [r4, #16]
    8438:	2800      	cmp	r0, #0
    843a:	bf18      	it	ne
    843c:	4540      	cmpne	r0, r8
    843e:	d115      	bne.n	846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>
    8440:	6829      	ldr	r1, [r5, #0]
    8442:	f811 0b03 	ldrb.w	r0, [r1], #3
    8446:	f3c0 1080 	ubfx	r0, r0, #6, #1
    844a:	f7fd fd01 	bl	5e50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    844e:	4604      	mov	r4, r0
    8450:	f7fd fe54 	bl	60fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    8454:	b138      	cbz	r0, 8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    8456:	4620      	mov	r0, r4
    8458:	f7fd fc9c 	bl	5d94 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    845c:	b118      	cbz	r0, 8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    845e:	2110      	movs	r1, #16
    8460:	f7fe fa98 	bl	6994 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8464:	b110      	cbz	r0, 846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>
    8466:	2001      	movs	r0, #1
    8468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    846c:	2000      	movs	r0, #0
    846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8472:	0000      	.short	0x0000
    8474:	200014a4 	.word	0x200014a4
    8478:	2000156c 	.word	0x2000156c
    847c:	20000110 	.word	0x20000110
    8480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8484:	2a02      	cmp	r2, #2
    8486:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    848a:	bf0c      	ite	eq
    848c:	f44f 7c7a 	moveq.w	ip, #1000	; 0x3e8
    8490:	f640 0c34 	movwne	ip, #2100	; 0x834
    8494:	f24a 14df 	movw	r4, #41439	; 0xa1df
    8498:	44a4      	add	ip, r4
    849a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    849e:	fbbc f6f4 	udiv	r6, ip, r4
    84a2:	2a08      	cmp	r2, #8
    84a4:	bf08      	it	eq
    84a6:	2440      	moveq	r4, #64	; 0x40
    84a8:	d00a      	beq.n	84c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c0>
    84aa:	2a04      	cmp	r2, #4
    84ac:	bf08      	it	eq
    84ae:	2410      	moveq	r4, #16
    84b0:	d006      	beq.n	84c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c0>
    84b2:	2a02      	cmp	r2, #2
    84b4:	bf06      	itte	eq
    84b6:	2404      	moveq	r4, #4
    84b8:	f04f 0c12 	moveq.w	ip, #18
    84bc:	2408      	movne	r4, #8
    84be:	d001      	beq.n	84c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c4>
    84c0:	f04f 0c19 	mov.w	ip, #25
    84c4:	fb14 f50c 	smulbb	r5, r4, ip
    84c8:	2400      	movs	r4, #0
    84ca:	272e      	movs	r7, #46	; 0x2e
    84cc:	f04f 0c40 	mov.w	ip, #64	; 0x40
    84d0:	2a08      	cmp	r2, #8
    84d2:	bf04      	itt	eq
    84d4:	4667      	moveq	r7, ip
    84d6:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    84da:	d009      	beq.n	84f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f0>
    84dc:	2a04      	cmp	r2, #4
    84de:	bf08      	it	eq
    84e0:	f44f 72a8 	moveq.w	r2, #336	; 0x150
    84e4:	d004      	beq.n	84f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f0>
    84e6:	4627      	mov	r7, r4
    84e8:	2a02      	cmp	r2, #2
    84ea:	bf0c      	ite	eq
    84ec:	2218      	moveq	r2, #24
    84ee:	2228      	movne	r2, #40	; 0x28
    84f0:	443a      	add	r2, r7
    84f2:	442a      	add	r2, r5
    84f4:	fb02 6200 	mla	r2, r2, r0, r6
    84f8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    84fc:	eb05 10c0 	add.w	r0, r5, r0, lsl #7
    8500:	4402      	add	r2, r0
    8502:	48ad      	ldr	r0, [pc, #692]	; (87b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b8>)
    8504:	f101 050b 	add.w	r5, r1, #11
    8508:	f244 2655 	movw	r6, #16981	; 0x4255
    850c:	7880      	ldrb	r0, [r0, #2]
    850e:	fb05 f506 	mul.w	r5, r5, r6
    8512:	f010 0701 	ands.w	r7, r0, #1
    8516:	ea4f 5895 	mov.w	r8, r5, lsr #22
    851a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    851e:	f04f 0a10 	mov.w	sl, #16
    8522:	f44f 75c8 	mov.w	r5, #400	; 0x190
    8526:	f44f 76bf 	mov.w	r6, #382	; 0x17e
    852a:	bf08      	it	eq
    852c:	2800      	cmpeq	r0, #0
    852e:	f000 80f5 	beq.w	871c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x71c>
    8532:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    8536:	b1b8      	cbz	r0, 8568 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x568>
    8538:	2b08      	cmp	r3, #8
    853a:	bf04      	itt	eq
    853c:	46ab      	moveq	fp, r5
    853e:	2040      	moveq	r0, #64	; 0x40
    8540:	d00c      	beq.n	855c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55c>
    8542:	2b04      	cmp	r3, #4
    8544:	bf04      	itt	eq
    8546:	46b3      	moveq	fp, r6
    8548:	2010      	moveq	r0, #16
    854a:	d007      	beq.n	855c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55c>
    854c:	2b02      	cmp	r3, #2
    854e:	bf07      	ittee	eq
    8550:	f104 0b18 	addeq.w	fp, r4, #24
    8554:	2004      	moveq	r0, #4
    8556:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
    855a:	2008      	movne	r0, #8
    855c:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
    8560:	eb0e 1080 	add.w	r0, lr, r0, lsl #6
    8564:	4458      	add	r0, fp
    8566:	e018      	b.n	859a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59a>
    8568:	f1b9 0f00 	cmp.w	r9, #0
    856c:	d017      	beq.n	859e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59e>
    856e:	2b08      	cmp	r3, #8
    8570:	bf04      	itt	eq
    8572:	46ab      	moveq	fp, r5
    8574:	2040      	moveq	r0, #64	; 0x40
    8576:	d00c      	beq.n	8592 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x592>
    8578:	2b04      	cmp	r3, #4
    857a:	bf04      	itt	eq
    857c:	46b3      	moveq	fp, r6
    857e:	2010      	moveq	r0, #16
    8580:	d007      	beq.n	8592 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x592>
    8582:	2b02      	cmp	r3, #2
    8584:	bf07      	ittee	eq
    8586:	f104 0b18 	addeq.w	fp, r4, #24
    858a:	2004      	moveq	r0, #4
    858c:	f104 0b28 	addne.w	fp, r4, #40	; 0x28
    8590:	2008      	movne	r0, #8
    8592:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    8596:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    859a:	4410      	add	r0, r2
    859c:	e020      	b.n	85e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e0>
    859e:	29ff      	cmp	r1, #255	; 0xff
    85a0:	bf34      	ite	cc
    85a2:	4608      	movcc	r0, r1
    85a4:	20ff      	movcs	r0, #255	; 0xff
    85a6:	f100 0b05 	add.w	fp, r0, #5
    85aa:	2b08      	cmp	r3, #8
    85ac:	bf04      	itt	eq
    85ae:	4660      	moveq	r0, ip
    85b0:	fb0b 2200 	mlaeq	r2, fp, r0, r2
    85b4:	d04c      	beq.n	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    85b6:	2b04      	cmp	r3, #4
    85b8:	bf04      	itt	eq
    85ba:	fb0b 220a 	mlaeq	r2, fp, sl, r2
    85be:	202e      	moveq	r0, #46	; 0x2e
    85c0:	d046      	beq.n	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    85c2:	2b02      	cmp	r3, #2
    85c4:	bf0c      	ite	eq
    85c6:	2004      	moveq	r0, #4
    85c8:	2008      	movne	r0, #8
    85ca:	fb0b 2200 	mla	r2, fp, r0, r2
    85ce:	bf07      	ittee	eq
    85d0:	4620      	moveq	r0, r4
    85d2:	f04f 0b18 	moveq.w	fp, #24
    85d6:	2000      	movne	r0, #0
    85d8:	f04f 0b28 	movne.w	fp, #40	; 0x28
    85dc:	4458      	add	r0, fp
    85de:	4410      	add	r0, r2
    85e0:	309c      	adds	r0, #156	; 0x9c
    85e2:	2b08      	cmp	r3, #8
    85e4:	bf04      	itt	eq
    85e6:	462a      	moveq	r2, r5
    85e8:	f04f 0b40 	moveq.w	fp, #64	; 0x40
    85ec:	d00f      	beq.n	860e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60e>
    85ee:	2b04      	cmp	r3, #4
    85f0:	bf04      	itt	eq
    85f2:	4632      	moveq	r2, r6
    85f4:	f04f 0b10 	moveq.w	fp, #16
    85f8:	d009      	beq.n	860e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60e>
    85fa:	2b02      	cmp	r3, #2
    85fc:	bf07      	ittee	eq
    85fe:	f104 0218 	addeq.w	r2, r4, #24
    8602:	f04f 0b04 	moveq.w	fp, #4
    8606:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    860a:	f04f 0b08 	movne.w	fp, #8
    860e:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
    8612:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    8616:	eb02 024b 	add.w	r2, r2, fp, lsl #1
    861a:	4410      	add	r0, r2
    861c:	3098      	adds	r0, #152	; 0x98
    861e:	b1d7      	cbz	r7, 8656 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x656>
    8620:	2b08      	cmp	r3, #8
    8622:	bf08      	it	eq
    8624:	2140      	moveq	r1, #64	; 0x40
    8626:	d00c      	beq.n	8642 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x642>
    8628:	2b04      	cmp	r3, #4
    862a:	bf04      	itt	eq
    862c:	4635      	moveq	r5, r6
    862e:	2110      	moveq	r1, #16
    8630:	d007      	beq.n	8642 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x642>
    8632:	2b02      	cmp	r3, #2
    8634:	bf07      	ittee	eq
    8636:	f104 0518 	addeq.w	r5, r4, #24
    863a:	2104      	moveq	r1, #4
    863c:	f104 0528 	addne.w	r5, r4, #40	; 0x28
    8640:	2108      	movne	r1, #8
    8642:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    8646:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    864a:	4429      	add	r1, r5
    864c:	4408      	add	r0, r1
    864e:	e062      	b.n	8716 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x716>
    8650:	f44f 7ba8 	mov.w	fp, #336	; 0x150
    8654:	e7c2      	b.n	85dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5dc>
    8656:	f1b9 0f00 	cmp.w	r9, #0
    865a:	d01b      	beq.n	8694 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x694>
    865c:	2b08      	cmp	r3, #8
    865e:	bf04      	itt	eq
    8660:	462a      	moveq	r2, r5
    8662:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    8666:	d00f      	beq.n	8688 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x688>
    8668:	2b04      	cmp	r3, #4
    866a:	bf04      	itt	eq
    866c:	4632      	moveq	r2, r6
    866e:	f04f 0c10 	moveq.w	ip, #16
    8672:	d009      	beq.n	8688 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x688>
    8674:	2b02      	cmp	r3, #2
    8676:	bf07      	ittee	eq
    8678:	f104 0218 	addeq.w	r2, r4, #24
    867c:	f04f 0c04 	moveq.w	ip, #4
    8680:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    8684:	f04f 0c08 	movne.w	ip, #8
    8688:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    868c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    8690:	4410      	add	r0, r2
    8692:	e020      	b.n	86d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d6>
    8694:	29ff      	cmp	r1, #255	; 0xff
    8696:	bf34      	ite	cc
    8698:	460a      	movcc	r2, r1
    869a:	22ff      	movcs	r2, #255	; 0xff
    869c:	1d52      	adds	r2, r2, #5
    869e:	2b08      	cmp	r3, #8
    86a0:	bf08      	it	eq
    86a2:	fb02 000c 	mlaeq	r0, r2, ip, r0
    86a6:	d01f      	beq.n	86e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e8>
    86a8:	2b04      	cmp	r3, #4
    86aa:	bf04      	itt	eq
    86ac:	fb02 000a 	mlaeq	r0, r2, sl, r0
    86b0:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    86b4:	d018      	beq.n	86e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e8>
    86b6:	2b02      	cmp	r3, #2
    86b8:	bf0c      	ite	eq
    86ba:	f04f 0c04 	moveq.w	ip, #4
    86be:	f04f 0c08 	movne.w	ip, #8
    86c2:	fb02 000c 	mla	r0, r2, ip, r0
    86c6:	bf07      	ittee	eq
    86c8:	46a4      	moveq	ip, r4
    86ca:	2218      	moveq	r2, #24
    86cc:	f04f 0c00 	movne.w	ip, #0
    86d0:	2228      	movne	r2, #40	; 0x28
    86d2:	4462      	add	r2, ip
    86d4:	4410      	add	r0, r2
    86d6:	29eb      	cmp	r1, #235	; 0xeb
    86d8:	d91d      	bls.n	8716 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x716>
    86da:	2b08      	cmp	r3, #8
    86dc:	d00a      	beq.n	86f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f4>
    86de:	2b04      	cmp	r3, #4
    86e0:	d005      	beq.n	86ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ee>
    86e2:	2b02      	cmp	r3, #2
    86e4:	d008      	beq.n	86f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f8>
    86e6:	e00b      	b.n	8700 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x700>
    86e8:	f44f 72a8 	mov.w	r2, #336	; 0x150
    86ec:	e7f1      	b.n	86d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d2>
    86ee:	4635      	mov	r5, r6
    86f0:	2110      	movs	r1, #16
    86f2:	e008      	b.n	8706 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x706>
    86f4:	2140      	movs	r1, #64	; 0x40
    86f6:	e006      	b.n	8706 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x706>
    86f8:	f104 0518 	add.w	r5, r4, #24
    86fc:	2104      	movs	r1, #4
    86fe:	e002      	b.n	8706 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x706>
    8700:	f104 0528 	add.w	r5, r4, #40	; 0x28
    8704:	2108      	movs	r1, #8
    8706:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    870a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    870e:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    8712:	fb08 0001 	mla	r0, r8, r1, r0
    8716:	30e9      	adds	r0, #233	; 0xe9
    8718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    871c:	f502 70a5 	add.w	r0, r2, #330	; 0x14a
    8720:	f1b9 0f00 	cmp.w	r9, #0
    8724:	d01b      	beq.n	875e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x75e>
    8726:	2b08      	cmp	r3, #8
    8728:	bf04      	itt	eq
    872a:	462a      	moveq	r2, r5
    872c:	f04f 0c40 	moveq.w	ip, #64	; 0x40
    8730:	d00f      	beq.n	8752 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x752>
    8732:	2b04      	cmp	r3, #4
    8734:	bf04      	itt	eq
    8736:	4632      	moveq	r2, r6
    8738:	f04f 0c10 	moveq.w	ip, #16
    873c:	d009      	beq.n	8752 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x752>
    873e:	2b02      	cmp	r3, #2
    8740:	bf07      	ittee	eq
    8742:	f104 0218 	addeq.w	r2, r4, #24
    8746:	f04f 0c04 	moveq.w	ip, #4
    874a:	f104 0228 	addne.w	r2, r4, #40	; 0x28
    874e:	f04f 0c08 	movne.w	ip, #8
    8752:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    8756:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    875a:	4410      	add	r0, r2
    875c:	e020      	b.n	87a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a0>
    875e:	29ff      	cmp	r1, #255	; 0xff
    8760:	bf34      	ite	cc
    8762:	460a      	movcc	r2, r1
    8764:	22ff      	movcs	r2, #255	; 0xff
    8766:	1d52      	adds	r2, r2, #5
    8768:	2b08      	cmp	r3, #8
    876a:	bf08      	it	eq
    876c:	fb02 000c 	mlaeq	r0, r2, ip, r0
    8770:	d01f      	beq.n	87b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b2>
    8772:	2b04      	cmp	r3, #4
    8774:	bf04      	itt	eq
    8776:	fb02 000a 	mlaeq	r0, r2, sl, r0
    877a:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
    877e:	d018      	beq.n	87b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b2>
    8780:	2b02      	cmp	r3, #2
    8782:	bf0c      	ite	eq
    8784:	f04f 0c04 	moveq.w	ip, #4
    8788:	f04f 0c08 	movne.w	ip, #8
    878c:	fb02 000c 	mla	r0, r2, ip, r0
    8790:	bf07      	ittee	eq
    8792:	46a4      	moveq	ip, r4
    8794:	2218      	moveq	r2, #24
    8796:	f04f 0c00 	movne.w	ip, #0
    879a:	2228      	movne	r2, #40	; 0x28
    879c:	4462      	add	r2, ip
    879e:	4410      	add	r0, r2
    87a0:	29eb      	cmp	r1, #235	; 0xeb
    87a2:	d9b8      	bls.n	8716 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x716>
    87a4:	2b08      	cmp	r3, #8
    87a6:	d0a5      	beq.n	86f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f4>
    87a8:	2b04      	cmp	r3, #4
    87aa:	d0a0      	beq.n	86ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ee>
    87ac:	2b02      	cmp	r3, #2
    87ae:	d1a7      	bne.n	8700 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x700>
    87b0:	e7a2      	b.n	86f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f8>
    87b2:	f44f 72a8 	mov.w	r2, #336	; 0x150
    87b6:	e7f1      	b.n	879c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x79c>
    87b8:	200014a4 	.word	0x200014a4
    87bc:	b570      	push	{r4, r5, r6, lr}
    87be:	4c1c      	ldr	r4, [pc, #112]	; (8830 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x830>)
    87c0:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
    87c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    87c6:	1c40      	adds	r0, r0, #1
    87c8:	6260      	str	r0, [r4, #36]	; 0x24
    87ca:	7ba8      	ldrb	r0, [r5, #14]
    87cc:	2600      	movs	r6, #0
    87ce:	b120      	cbz	r0, 87da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7da>
    87d0:	f004 ff82 	bl	d6d8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    87d4:	f004 fda8 	bl	d328 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    87d8:	73ae      	strb	r6, [r5, #14]
    87da:	702e      	strb	r6, [r5, #0]
    87dc:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
    87e0:	b120      	cbz	r0, 87ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ec>
    87e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87e6:	2001      	movs	r0, #1
    87e8:	f000 ba80 	b.w	8cec <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    87ec:	7b60      	ldrb	r0, [r4, #13]
    87ee:	b1d0      	cbz	r0, 8826 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x826>
    87f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    87f2:	4288      	cmp	r0, r1
    87f4:	d817      	bhi.n	8826 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x826>
    87f6:	2001      	movs	r0, #1
    87f8:	f000 fa78 	bl	8cec <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    87fc:	78a0      	ldrb	r0, [r4, #2]
    87fe:	f010 0f01 	tst.w	r0, #1
    8802:	d008      	beq.n	8816 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x816>
    8804:	480b      	ldr	r0, [pc, #44]	; (8834 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x834>)
    8806:	2243      	movs	r2, #67	; 0x43
    8808:	6840      	ldr	r0, [r0, #4]
    880a:	8801      	ldrh	r1, [r0, #0]
    880c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8810:	2001      	movs	r0, #1
    8812:	f7ff bd6b 	b.w	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    8816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    881a:	2243      	movs	r2, #67	; 0x43
    881c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8820:	2000      	movs	r0, #0
    8822:	f7ff bd63 	b.w	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    8826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    882a:	2000      	movs	r0, #0
    882c:	f000 ba5e 	b.w	8cec <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8830:	200014a4 	.word	0x200014a4
    8834:	20000110 	.word	0x20000110
    8838:	b570      	push	{r4, r5, r6, lr}
    883a:	4c3a      	ldr	r4, [pc, #232]	; (8924 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x924>)
    883c:	4605      	mov	r5, r0
    883e:	460e      	mov	r6, r1
    8840:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    8844:	b120      	cbz	r0, 8850 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x850>
    8846:	f640 21e9 	movw	r1, #2793	; 0xae9
    884a:	202d      	movs	r0, #45	; 0x2d
    884c:	f7fb f99a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8850:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    8854:	8828      	ldrh	r0, [r5, #0]
    8856:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    885a:	2a00      	cmp	r2, #0
    885c:	bf18      	it	ne
    885e:	bd70      	popne	{r4, r5, r6, pc}
    8860:	6868      	ldr	r0, [r5, #4]
    8862:	f007 fd65 	bl	10330 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    8866:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    886a:	8928      	ldrh	r0, [r5, #8]
    886c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    8870:	8968      	ldrh	r0, [r5, #10]
    8872:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    8876:	f895 0184 	ldrb.w	r0, [r5, #388]	; 0x184
    887a:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    887e:	7ca0      	ldrb	r0, [r4, #18]
    8880:	2500      	movs	r5, #0
    8882:	b150      	cbz	r0, 889a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x89a>
    8884:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    8888:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    888c:	2901      	cmp	r1, #1
    888e:	d104      	bne.n	889a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x89a>
    8890:	7940      	ldrb	r0, [r0, #5]
    8892:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    8896:	2840      	cmp	r0, #64	; 0x40
    8898:	d02d      	beq.n	88f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f6>
    889a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
    889e:	b148      	cbz	r0, 88b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b4>
    88a0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
    88a4:	f104 003d 	add.w	r0, r4, #61	; 0x3d
    88a8:	2901      	cmp	r1, #1
    88aa:	bf04      	itt	eq
    88ac:	7940      	ldrbeq	r0, [r0, #5]
    88ae:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
    88b2:	d020      	beq.n	88f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f6>
    88b4:	481c      	ldr	r0, [pc, #112]	; (8928 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x928>)
    88b6:	f009 fdb2 	bl	1241e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
    88ba:	481c      	ldr	r0, [pc, #112]	; (892c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92c>)
    88bc:	2eff      	cmp	r6, #255	; 0xff
    88be:	6800      	ldr	r0, [r0, #0]
    88c0:	7801      	ldrb	r1, [r0, #0]
    88c2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    88c6:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
    88ca:	f8d0 1003 	ldr.w	r1, [r0, #3]
    88ce:	d020      	beq.n	8912 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x912>
    88d0:	67e1      	str	r1, [r4, #124]	; 0x7c
    88d2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    88d6:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    88da:	f104 0270 	add.w	r2, r4, #112	; 0x70
    88de:	1e51      	subs	r1, r2, #1
    88e0:	4630      	mov	r0, r6
    88e2:	f7fd fa89 	bl	5df8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    88e6:	b178      	cbz	r0, 8908 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x908>
    88e8:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    88ec:	f040 0002 	orr.w	r0, r0, #2
    88f0:	f884 006f 	strb.w	r0, [r4, #111]	; 0x6f
    88f4:	bd70      	pop	{r4, r5, r6, pc}
    88f6:	f8d4 003d 	ldr.w	r0, [r4, #61]	; 0x3d
    88fa:	f8c4 0076 	str.w	r0, [r4, #118]	; 0x76
    88fe:	f8b4 0041 	ldrh.w	r0, [r4, #65]	; 0x41
    8902:	f8a4 007a 	strh.w	r0, [r4, #122]	; 0x7a
    8906:	e7d8      	b.n	88ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8ba>
    8908:	f640 310a 	movw	r1, #2826	; 0xb0a
    890c:	202d      	movs	r0, #45	; 0x2d
    890e:	f7fb f939 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8912:	6721      	str	r1, [r4, #112]	; 0x70
    8914:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8918:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    891c:	67e5      	str	r5, [r4, #124]	; 0x7c
    891e:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
    8922:	bd70      	pop	{r4, r5, r6, pc}
    8924:	200014a4 	.word	0x200014a4
    8928:	2000151a 	.word	0x2000151a
    892c:	20000110 	.word	0x20000110
    8930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8934:	b084      	sub	sp, #16
    8936:	4c52      	ldr	r4, [pc, #328]	; (8a80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa80>)
    8938:	20ff      	movs	r0, #255	; 0xff
    893a:	f88d 0000 	strb.w	r0, [sp]
    893e:	6820      	ldr	r0, [r4, #0]
    8940:	f04f 0901 	mov.w	r9, #1
    8944:	7801      	ldrb	r1, [r0, #0]
    8946:	f3c1 1880 	ubfx	r8, r1, #6, #1
    894a:	f8d0 1003 	ldr.w	r1, [r0, #3]
    894e:	9101      	str	r1, [sp, #4]
    8950:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    8954:	f8ad 0008 	strh.w	r0, [sp, #8]
    8958:	4669      	mov	r1, sp
    895a:	2005      	movs	r0, #5
    895c:	f7ff fd00 	bl	8360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    8960:	2800      	cmp	r0, #0
    8962:	d07d      	beq.n	8a60 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa60>
    8964:	e9d4 0500 	ldrd	r0, r5, [r4]
    8968:	4f46      	ldr	r7, [pc, #280]	; (8a84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa84>)
    896a:	f8d0 100f 	ldr.w	r1, [r0, #15]
    896e:	797e      	ldrb	r6, [r7, #5]
    8970:	f8c5 1012 	str.w	r1, [r5, #18]
    8974:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    8978:	82e9      	strh	r1, [r5, #22]
    897a:	7d41      	ldrb	r1, [r0, #21]
    897c:	7629      	strb	r1, [r5, #24]
    897e:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    8982:	f007 fcc9 	bl	10318 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8986:	4682      	mov	sl, r0
    8988:	6068      	str	r0, [r5, #4]
    898a:	6820      	ldr	r0, [r4, #0]
    898c:	4651      	mov	r1, sl
    898e:	7d80      	ldrb	r0, [r0, #22]
    8990:	f007 ff10 	bl	107b4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8994:	8368      	strh	r0, [r5, #26]
    8996:	6820      	ldr	r0, [r4, #0]
    8998:	4651      	mov	r1, sl
    899a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    899e:	f007 ff00 	bl	107a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    89a2:	61e8      	str	r0, [r5, #28]
    89a4:	6820      	ldr	r0, [r4, #0]
    89a6:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    89aa:	8129      	strh	r1, [r5, #8]
    89ac:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    89b0:	8169      	strh	r1, [r5, #10]
    89b2:	f100 011f 	add.w	r1, r0, #31
    89b6:	f105 000c 	add.w	r0, r5, #12
    89ba:	f009 fd2b 	bl	12414 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    89be:	6820      	ldr	r0, [r4, #0]
    89c0:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    89c4:	f001 011f 	and.w	r1, r1, #31
    89c8:	f885 1020 	strb.w	r1, [r5, #32]
    89cc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    89d0:	0940      	lsrs	r0, r0, #5
    89d2:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
    89d6:	f885 6066 	strb.w	r6, [r5, #102]	; 0x66
    89da:	f885 6067 	strb.w	r6, [r5, #103]	; 0x67
    89de:	2101      	movs	r1, #1
    89e0:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
    89e4:	2100      	movs	r1, #0
    89e6:	f105 0028 	add.w	r0, r5, #40	; 0x28
    89ea:	f008 fa57 	bl	10e9c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    89ee:	7bf8      	ldrb	r0, [r7, #15]
    89f0:	f885 006a 	strb.w	r0, [r5, #106]	; 0x6a
    89f4:	2200      	movs	r2, #0
    89f6:	f89d 1000 	ldrb.w	r1, [sp]
    89fa:	6860      	ldr	r0, [r4, #4]
    89fc:	f7ff ff1c 	bl	8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>
    8a00:	2106      	movs	r1, #6
    8a02:	6860      	ldr	r0, [r4, #4]
    8a04:	f000 fb86 	bl	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8a08:	481f      	ldr	r0, [pc, #124]	; (8a88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa88>)
    8a0a:	2100      	movs	r1, #0
    8a0c:	ad01      	add	r5, sp, #4
    8a0e:	6806      	ldr	r6, [r0, #0]
    8a10:	6820      	ldr	r0, [r4, #0]
    8a12:	8001      	strh	r1, [r0, #0]
    8a14:	2108      	movs	r1, #8
    8a16:	f008 f893 	bl	10b40 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8a1a:	2100      	movs	r1, #0
    8a1c:	6820      	ldr	r0, [r4, #0]
    8a1e:	f008 f82e 	bl	10a7e <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>
    8a22:	4631      	mov	r1, r6
    8a24:	6820      	ldr	r0, [r4, #0]
    8a26:	f008 f85d 	bl	10ae4 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>
    8a2a:	2306      	movs	r3, #6
    8a2c:	2200      	movs	r2, #0
    8a2e:	f107 013d 	add.w	r1, r7, #61	; 0x3d
    8a32:	6820      	ldr	r0, [r4, #0]
    8a34:	f008 f83c 	bl	10ab0 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8a38:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
    8a3c:	6820      	ldr	r0, [r4, #0]
    8a3e:	f008 f8b8 	bl	10bb2 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8a42:	4641      	mov	r1, r8
    8a44:	6820      	ldr	r0, [r4, #0]
    8a46:	f008 f8a4 	bl	10b92 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8a4a:	2306      	movs	r3, #6
    8a4c:	2201      	movs	r2, #1
    8a4e:	4629      	mov	r1, r5
    8a50:	6820      	ldr	r0, [r4, #0]
    8a52:	f008 f82d 	bl	10ab0 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>
    8a56:	7979      	ldrb	r1, [r7, #5]
    8a58:	20ff      	movs	r0, #255	; 0xff
    8a5a:	f005 fd3b 	bl	e4d4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    8a5e:	e000      	b.n	8a62 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa62>
    8a60:	e007      	b.n	8a72 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa72>
    8a62:	6820      	ldr	r0, [r4, #0]
    8a64:	f005 fa26 	bl	deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8a68:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
    8a6c:	2009      	movs	r0, #9
    8a6e:	7008      	strb	r0, [r1, #0]
    8a70:	e001      	b.n	8a76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa76>
    8a72:	f7ff fea3 	bl	87bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7bc>
    8a76:	b004      	add	sp, #16
    8a78:	4648      	mov	r0, r9
    8a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a7e:	0000      	.short	0x0000
    8a80:	20000110 	.word	0x20000110
    8a84:	200014a4 	.word	0x200014a4
    8a88:	00008b84 	.word	0x00008b84
    8a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8a90:	20ff      	movs	r0, #255	; 0xff
    8a92:	f88d 0000 	strb.w	r0, [sp]
    8a96:	2701      	movs	r7, #1
    8a98:	4669      	mov	r1, sp
    8a9a:	2005      	movs	r0, #5
    8a9c:	f7ff fc60 	bl	8360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    8aa0:	2800      	cmp	r0, #0
    8aa2:	bf08      	it	eq
    8aa4:	2700      	moveq	r7, #0
    8aa6:	d065      	beq.n	8b74 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb74>
    8aa8:	4d34      	ldr	r5, [pc, #208]	; (8b7c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb7c>)
    8aaa:	2601      	movs	r6, #1
    8aac:	6828      	ldr	r0, [r5, #0]
    8aae:	686c      	ldr	r4, [r5, #4]
    8ab0:	7802      	ldrb	r2, [r0, #0]
    8ab2:	7c61      	ldrb	r1, [r4, #17]
    8ab4:	f3c2 1240 	ubfx	r2, r2, #5, #1
    8ab8:	4011      	ands	r1, r2
    8aba:	7461      	strb	r1, [r4, #17]
    8abc:	f8d0 100f 	ldr.w	r1, [r0, #15]
    8ac0:	f8c4 1012 	str.w	r1, [r4, #18]
    8ac4:	f8b0 1013 	ldrh.w	r1, [r0, #19]
    8ac8:	82e1      	strh	r1, [r4, #22]
    8aca:	7d41      	ldrb	r1, [r0, #21]
    8acc:	7621      	strb	r1, [r4, #24]
    8ace:	f8b0 0019 	ldrh.w	r0, [r0, #25]
    8ad2:	f007 fc21 	bl	10318 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8ad6:	4680      	mov	r8, r0
    8ad8:	6060      	str	r0, [r4, #4]
    8ada:	6828      	ldr	r0, [r5, #0]
    8adc:	4641      	mov	r1, r8
    8ade:	7d80      	ldrb	r0, [r0, #22]
    8ae0:	f007 fe68 	bl	107b4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8ae4:	8360      	strh	r0, [r4, #26]
    8ae6:	6828      	ldr	r0, [r5, #0]
    8ae8:	4641      	mov	r1, r8
    8aea:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    8aee:	f007 fe58 	bl	107a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8af2:	61e0      	str	r0, [r4, #28]
    8af4:	6828      	ldr	r0, [r5, #0]
    8af6:	f8b0 101b 	ldrh.w	r1, [r0, #27]
    8afa:	8121      	strh	r1, [r4, #8]
    8afc:	f8b0 101d 	ldrh.w	r1, [r0, #29]
    8b00:	8161      	strh	r1, [r4, #10]
    8b02:	f100 011f 	add.w	r1, r0, #31
    8b06:	f104 000c 	add.w	r0, r4, #12
    8b0a:	f009 fc83 	bl	12414 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    8b0e:	6828      	ldr	r0, [r5, #0]
    8b10:	46b0      	mov	r8, r6
    8b12:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    8b16:	f001 011f 	and.w	r1, r1, #31
    8b1a:	f884 1020 	strb.w	r1, [r4, #32]
    8b1e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8b22:	0940      	lsrs	r0, r0, #5
    8b24:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    8b28:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
    8b2c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    8b30:	f884 8068 	strb.w	r8, [r4, #104]	; 0x68
    8b34:	2100      	movs	r1, #0
    8b36:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8b3a:	f008 f9af 	bl	10e9c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8b3e:	4e10      	ldr	r6, [pc, #64]	; (8b80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb80>)
    8b40:	2200      	movs	r2, #0
    8b42:	7bf0      	ldrb	r0, [r6, #15]
    8b44:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
    8b48:	f89d 1000 	ldrb.w	r1, [sp]
    8b4c:	6868      	ldr	r0, [r5, #4]
    8b4e:	f7ff fe73 	bl	8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>
    8b52:	f886 8068 	strb.w	r8, [r6, #104]	; 0x68
    8b56:	f896 206a 	ldrb.w	r2, [r6, #106]	; 0x6a
    8b5a:	f8b6 106c 	ldrh.w	r1, [r6, #108]	; 0x6c
    8b5e:	2001      	movs	r0, #1
    8b60:	f7ff fbc4 	bl	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    8b64:	f106 01c8 	add.w	r1, r6, #200	; 0xc8
    8b68:	2000      	movs	r0, #0
    8b6a:	7008      	strb	r0, [r1, #0]
    8b6c:	2105      	movs	r1, #5
    8b6e:	6868      	ldr	r0, [r5, #4]
    8b70:	f000 fad0 	bl	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8b74:	4638      	mov	r0, r7
    8b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b7a:	0000      	.short	0x0000
    8b7c:	20000110 	.word	0x20000110
    8b80:	200014a4 	.word	0x200014a4
    8b84:	00000003 	.word	0x00000003
    8b88:	55555501 	.word	0x55555501
    8b8c:	8e89bed6 	.word	0x8e89bed6
    8b90:	00007f45 	.word	0x00007f45
    8b94:	00007c91 	.word	0x00007c91
    8b98:	00007e95 	.word	0x00007e95
    8b9c:	00000000 	.word	0x00000000
    8ba0:	0000906d 	.word	0x0000906d
    8ba4:	00007d99 	.word	0x00007d99
    8ba8:	00007ed1 	.word	0x00007ed1
    8bac:	00010f0f 	.word	0x00010f0f
    8bb0:	00010f15 	.word	0x00010f15
    8bb4:	00010f1b 	.word	0x00010f1b
    8bb8:	00008275 	.word	0x00008275
    8bbc:	00010f31 	.word	0x00010f31
    8bc0:	00008bb0 	.word	0x00008bb0
    8bc4:	00008ba8 	.word	0x00008ba8
    8bc8:	00008ba4 	.word	0x00008ba4

00008bcc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8bcc:	b510      	push	{r4, lr}
    8bce:	1e42      	subs	r2, r0, #1
    8bd0:	2a02      	cmp	r2, #2
    8bd2:	d903      	bls.n	8bdc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
    8bd4:	21ca      	movs	r1, #202	; 0xca
    8bd6:	202f      	movs	r0, #47	; 0x2f
    8bd8:	f7fa ffd4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bdc:	1e40      	subs	r0, r0, #1
    8bde:	2910      	cmp	r1, #16
    8be0:	bf02      	ittt	eq
    8be2:	490a      	ldreq	r1, [pc, #40]	; (8c0c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
    8be4:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
    8be8:	bd10      	popeq	{r4, pc}
    8bea:	2912      	cmp	r1, #18
    8bec:	bf14      	ite	ne
    8bee:	2913      	cmpne	r1, #19
    8bf0:	4907      	ldreq	r1, [pc, #28]	; (8c10 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
    8bf2:	d007      	beq.n	8c04 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8bf4:	2915      	cmp	r1, #21
    8bf6:	bf08      	it	eq
    8bf8:	4906      	ldreq	r1, [pc, #24]	; (8c14 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
    8bfa:	d003      	beq.n	8c04 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
    8bfc:	21d8      	movs	r1, #216	; 0xd8
    8bfe:	202f      	movs	r0, #47	; 0x2f
    8c00:	f7fa ffc0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c04:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8c08:	bd10      	pop	{r4, pc}
    8c0a:	0000      	.short	0x0000
    8c0c:	0001108e 	.word	0x0001108e
    8c10:	00011088 	.word	0x00011088
    8c14:	00011094 	.word	0x00011094

00008c18 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8c18:	1e42      	subs	r2, r0, #1
    8c1a:	b510      	push	{r4, lr}
    8c1c:	b2d2      	uxtb	r2, r2
    8c1e:	2a01      	cmp	r2, #1
    8c20:	d905      	bls.n	8c2e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
    8c22:	291d      	cmp	r1, #29
    8c24:	d01e      	beq.n	8c64 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    8c26:	21ee      	movs	r1, #238	; 0xee
    8c28:	202f      	movs	r0, #47	; 0x2f
    8c2a:	f7fa ffab 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c2e:	2913      	cmp	r1, #19
    8c30:	d014      	beq.n	8c5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8c32:	dc08      	bgt.n	8c46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8c34:	2910      	cmp	r1, #16
    8c36:	bf02      	ittt	eq
    8c38:	480d      	ldreq	r0, [pc, #52]	; (8c70 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
    8c3a:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
    8c3e:	bd10      	popeq	{r4, pc}
    8c40:	2912      	cmp	r1, #18
    8c42:	d00b      	beq.n	8c5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
    8c44:	e005      	b.n	8c52 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
    8c46:	2915      	cmp	r1, #21
    8c48:	bf08      	it	eq
    8c4a:	480a      	ldreq	r0, [pc, #40]	; (8c74 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
    8c4c:	d007      	beq.n	8c5e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
    8c4e:	291d      	cmp	r1, #29
    8c50:	d008      	beq.n	8c64 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
    8c52:	f44f 7181 	mov.w	r1, #258	; 0x102
    8c56:	202f      	movs	r0, #47	; 0x2f
    8c58:	f7fa ff94 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c5c:	4806      	ldr	r0, [pc, #24]	; (8c78 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
    8c5e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8c62:	bd10      	pop	{r4, pc}
    8c64:	f240 315a 	movw	r1, #858	; 0x35a
    8c68:	fb10 f001 	smulbb	r0, r0, r1
    8c6c:	bd10      	pop	{r4, pc}
    8c6e:	0000      	.short	0x0000
    8c70:	0001107c 	.word	0x0001107c
    8c74:	00011084 	.word	0x00011084
    8c78:	00011080 	.word	0x00011080

00008c7c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    8c7c:	b570      	push	{r4, r5, r6, lr}
    8c7e:	4c1a      	ldr	r4, [pc, #104]	; (8ce8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x6c>)
    8c80:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    8c84:	2800      	cmp	r0, #0
    8c86:	bf1c      	itt	ne
    8c88:	2000      	movne	r0, #0
    8c8a:	bd70      	popne	{r4, r5, r6, pc}
    8c8c:	7a20      	ldrb	r0, [r4, #8]
    8c8e:	b138      	cbz	r0, 8ca0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    8c90:	68e1      	ldr	r1, [r4, #12]
    8c92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8c94:	4288      	cmp	r0, r1
    8c96:	d903      	bls.n	8ca0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x24>
    8c98:	f7fe fef4 	bl	7a84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8c9c:	2000      	movs	r0, #0
    8c9e:	bd70      	pop	{r4, r5, r6, pc}
    8ca0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8ca2:	b1f8      	cbz	r0, 8ce4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    8ca4:	f7fe fcb6 	bl	7614 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8ca8:	4605      	mov	r5, r0
    8caa:	f7fe fcdb 	bl	7664 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8cae:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8cb2:	4428      	add	r0, r5
    8cb4:	f242 7110 	movw	r1, #10000	; 0x2710
    8cb8:	1846      	adds	r6, r0, r1
    8cba:	f005 ffa6 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8cbe:	4605      	mov	r5, r0
    8cc0:	4629      	mov	r1, r5
    8cc2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8cc4:	f7f8 fbdc 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8cc8:	6325      	str	r5, [r4, #48]	; 0x30
    8cca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8ccc:	1982      	adds	r2, r0, r6
    8cce:	4291      	cmp	r1, r2
    8cd0:	bf24      	itt	cs
    8cd2:	1a08      	subcs	r0, r1, r0
    8cd4:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    8cd6:	d205      	bcs.n	8ce4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x68>
    8cd8:	2001      	movs	r0, #1
    8cda:	62e0      	str	r0, [r4, #44]	; 0x2c
    8cdc:	f7fe fed2 	bl	7a84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8ce0:	2000      	movs	r0, #0
    8ce2:	bd70      	pop	{r4, r5, r6, pc}
    8ce4:	2001      	movs	r0, #1
    8ce6:	bd70      	pop	{r4, r5, r6, pc}
    8ce8:	2000157c 	.word	0x2000157c

00008cec <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    8cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cee:	4f25      	ldr	r7, [pc, #148]	; (8d84 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x98>)
    8cf0:	4c25      	ldr	r4, [pc, #148]	; (8d88 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x9c>)
    8cf2:	2500      	movs	r5, #0
    8cf4:	b130      	cbz	r0, 8d04 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x18>
    8cf6:	2801      	cmp	r0, #1
    8cf8:	d039      	beq.n	8d6e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x82>
    8cfa:	f240 7153 	movw	r1, #1875	; 0x753
    8cfe:	2030      	movs	r0, #48	; 0x30
    8d00:	f7fa ff40 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d04:	7860      	ldrb	r0, [r4, #1]
    8d06:	2600      	movs	r6, #0
    8d08:	b160      	cbz	r0, 8d24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x38>
    8d0a:	2101      	movs	r1, #1
    8d0c:	4668      	mov	r0, sp
    8d0e:	f7fb ff8f 	bl	4c30 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    8d12:	f89d 0000 	ldrb.w	r0, [sp]
    8d16:	f242 7110 	movw	r1, #10000	; 0x2710
    8d1a:	0200      	lsls	r0, r0, #8
    8d1c:	fbb0 f2f1 	udiv	r2, r0, r1
    8d20:	fb01 0612 	mls	r6, r1, r2, r0
    8d24:	f7fe fc76 	bl	7614 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    8d28:	1981      	adds	r1, r0, r6
    8d2a:	6a20      	ldr	r0, [r4, #32]
    8d2c:	f7f8 fb72 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8d30:	6220      	str	r0, [r4, #32]
    8d32:	7525      	strb	r5, [r4, #20]
    8d34:	77e5      	strb	r5, [r4, #31]
    8d36:	2003      	movs	r0, #3
    8d38:	77a0      	strb	r0, [r4, #30]
    8d3a:	2064      	movs	r0, #100	; 0x64
    8d3c:	83a0      	strh	r0, [r4, #28]
    8d3e:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    8d42:	b928      	cbnz	r0, 8d50 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x64>
    8d44:	7820      	ldrb	r0, [r4, #0]
    8d46:	f104 0114 	add.w	r1, r4, #20
    8d4a:	f7f8 fcb7 	bl	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8d4e:	b148      	cbz	r0, 8d64 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x78>
    8d50:	84a5      	strh	r5, [r4, #36]	; 0x24
    8d52:	f004 ffdd 	bl	dd10 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8d56:	f7f9 fb25 	bl	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8d5a:	7978      	ldrb	r0, [r7, #5]
    8d5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8d60:	f7fa bd04 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8d64:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
    8d68:	2030      	movs	r0, #48	; 0x30
    8d6a:	f7fa ff0b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d6e:	7225      	strb	r5, [r4, #8]
    8d70:	f004 ffce 	bl	dd10 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8d74:	f7f9 fb16 	bl	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8d78:	7978      	ldrb	r0, [r7, #5]
    8d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8d7e:	f7fa bcf5 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    8d82:	0000      	.short	0x0000
    8d84:	20000124 	.word	0x20000124
    8d88:	2000157c 	.word	0x2000157c

00008d8c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    8d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d90:	4d48      	ldr	r5, [pc, #288]	; (8eb4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    8d92:	4606      	mov	r6, r0
    8d94:	460f      	mov	r7, r1
    8d96:	7c28      	ldrb	r0, [r5, #16]
    8d98:	2800      	cmp	r0, #0
    8d9a:	d150      	bne.n	8e3e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    8d9c:	4846      	ldr	r0, [pc, #280]	; (8eb8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    8d9e:	f7f9 fadf 	bl	2360 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8da2:	2820      	cmp	r0, #32
    8da4:	d04b      	beq.n	8e3e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb2>
    8da6:	2400      	movs	r4, #0
    8da8:	602c      	str	r4, [r5, #0]
    8daa:	606c      	str	r4, [r5, #4]
    8dac:	60ac      	str	r4, [r5, #8]
    8dae:	60ec      	str	r4, [r5, #12]
    8db0:	612c      	str	r4, [r5, #16]
    8db2:	616c      	str	r4, [r5, #20]
    8db4:	61ac      	str	r4, [r5, #24]
    8db6:	61ec      	str	r4, [r5, #28]
    8db8:	622c      	str	r4, [r5, #32]
    8dba:	626c      	str	r4, [r5, #36]	; 0x24
    8dbc:	62ac      	str	r4, [r5, #40]	; 0x28
    8dbe:	62ec      	str	r4, [r5, #44]	; 0x2c
    8dc0:	632c      	str	r4, [r5, #48]	; 0x30
    8dc2:	636c      	str	r4, [r5, #52]	; 0x34
    8dc4:	63ac      	str	r4, [r5, #56]	; 0x38
    8dc6:	7028      	strb	r0, [r5, #0]
    8dc8:	f04f 0803 	mov.w	r8, #3
    8dcc:	606e      	str	r6, [r5, #4]
    8dce:	f885 8010 	strb.w	r8, [r5, #16]
    8dd2:	b15e      	cbz	r6, 8dec <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x60>
    8dd4:	2101      	movs	r1, #1
    8dd6:	f506 7098 	add.w	r0, r6, #304	; 0x130
    8dda:	f7fb ff3f 	bl	4c5c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    8dde:	f896 0130 	ldrb.w	r0, [r6, #304]	; 0x130
    8de2:	f000 0007 	and.w	r0, r0, #7
    8de6:	1c40      	adds	r0, r0, #1
    8de8:	f886 0130 	strb.w	r0, [r6, #304]	; 0x130
    8dec:	2064      	movs	r0, #100	; 0x64
    8dee:	83a8      	strh	r0, [r5, #28]
    8df0:	f885 801e 	strb.w	r8, [r5, #30]
    8df4:	77ec      	strb	r4, [r5, #31]
    8df6:	752c      	strb	r4, [r5, #20]
    8df8:	f7f8 fc56 	bl	16a8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8dfc:	8ba9      	ldrh	r1, [r5, #28]
    8dfe:	4288      	cmp	r0, r1
    8e00:	bf98      	it	ls
    8e02:	4608      	movls	r0, r1
    8e04:	f200 60c2 	addw	r0, r0, #1730	; 0x6c2
    8e08:	b286      	uxth	r6, r0
    8e0a:	f7fe fd81 	bl	7910 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8e0e:	f04f 0801 	mov.w	r8, #1
    8e12:	b1f8      	cbz	r0, 8e54 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc8>
    8e14:	61af      	str	r7, [r5, #24]
    8e16:	f005 fef8 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8e1a:	4631      	mov	r1, r6
    8e1c:	f7f8 fafa 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8e20:	6228      	str	r0, [r5, #32]
    8e22:	706c      	strb	r4, [r5, #1]
    8e24:	f885 8008 	strb.w	r8, [r5, #8]
    8e28:	f7fe fd68 	bl	78fc <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
    8e2c:	b150      	cbz	r0, 8e44 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xb8>
    8e2e:	f7fe fc19 	bl	7664 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8e32:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8e36:	1a38      	subs	r0, r7, r0
    8e38:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
    8e3c:	e007      	b.n	8e4e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xc2>
    8e3e:	200c      	movs	r0, #12
    8e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8e44:	f008 f917 	bl	11076 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    8e48:	1a38      	subs	r0, r7, r0
    8e4a:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
    8e4e:	62ec      	str	r4, [r5, #44]	; 0x2c
    8e50:	60e8      	str	r0, [r5, #12]
    8e52:	e01d      	b.n	8e90 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x104>
    8e54:	f7fe fc06 	bl	7664 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    8e58:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    8e5c:	61a8      	str	r0, [r5, #24]
    8e5e:	f885 8001 	strb.w	r8, [r5, #1]
    8e62:	f005 fed2 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8e66:	4680      	mov	r8, r0
    8e68:	2101      	movs	r1, #1
    8e6a:	4668      	mov	r0, sp
    8e6c:	f7fb feee 	bl	4c4c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    8e70:	f89d 0000 	ldrb.w	r0, [sp]
    8e74:	f242 7110 	movw	r1, #10000	; 0x2710
    8e78:	0200      	lsls	r0, r0, #8
    8e7a:	fbb0 f2f1 	udiv	r2, r0, r1
    8e7e:	fb01 0012 	mls	r0, r1, r2, r0
    8e82:	1981      	adds	r1, r0, r6
    8e84:	4640      	mov	r0, r8
    8e86:	f7f8 fac5 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8e8a:	6228      	str	r0, [r5, #32]
    8e8c:	e9c5 780b 	strd	r7, r8, [r5, #44]	; 0x2c
    8e90:	7828      	ldrb	r0, [r5, #0]
    8e92:	f105 0114 	add.w	r1, r5, #20
    8e96:	f7f8 fc11 	bl	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    8e9a:	b130      	cbz	r0, 8eaa <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11e>
    8e9c:	84ac      	strh	r4, [r5, #36]	; 0x24
    8e9e:	2000      	movs	r0, #0
    8ea0:	f7fe fdda 	bl	7a58 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8ea4:	2000      	movs	r0, #0
    8ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8eaa:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    8eae:	2030      	movs	r0, #48	; 0x30
    8eb0:	f7fa fe68 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8eb4:	2000157c 	.word	0x2000157c
    8eb8:	000099c9 	.word	0x000099c9

00008ebc <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    8ebc:	b510      	push	{r4, lr}
    8ebe:	4c11      	ldr	r4, [pc, #68]	; (8f04 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x48>)
    8ec0:	7c20      	ldrb	r0, [r4, #16]
    8ec2:	b158      	cbz	r0, 8edc <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x20>
    8ec4:	2001      	movs	r0, #1
    8ec6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    8eca:	f7fe fdc5 	bl	7a58 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8ece:	7c20      	ldrb	r0, [r4, #16]
    8ed0:	2803      	cmp	r0, #3
    8ed2:	d005      	beq.n	8ee0 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x24>
    8ed4:	7c60      	ldrb	r0, [r4, #17]
    8ed6:	2800      	cmp	r0, #0
    8ed8:	bf08      	it	eq
    8eda:	bd10      	popeq	{r4, pc}
    8edc:	200c      	movs	r0, #12
    8ede:	bd10      	pop	{r4, pc}
    8ee0:	7820      	ldrb	r0, [r4, #0]
    8ee2:	f7f9 f807 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8ee6:	7820      	ldrb	r0, [r4, #0]
    8ee8:	f7f9 f932 	bl	2150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8eec:	7820      	ldrb	r0, [r4, #0]
    8eee:	f7f9 f90d 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8ef2:	b110      	cbz	r0, 8efa <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    8ef4:	2000      	movs	r0, #0
    8ef6:	7420      	strb	r0, [r4, #16]
    8ef8:	bd10      	pop	{r4, pc}
    8efa:	f240 11ef 	movw	r1, #495	; 0x1ef
    8efe:	2030      	movs	r0, #48	; 0x30
    8f00:	f7fa fe40 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f04:	2000157c 	.word	0x2000157c

00008f08 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    8f08:	4801      	ldr	r0, [pc, #4]	; (8f10 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A+0x8>)
    8f0a:	6840      	ldr	r0, [r0, #4]
    8f0c:	4770      	bx	lr
    8f0e:	0000      	.short	0x0000
    8f10:	2000157c 	.word	0x2000157c

00008f14 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    8f14:	4802      	ldr	r0, [pc, #8]	; (8f20 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA+0xc>)
    8f16:	7c00      	ldrb	r0, [r0, #16]
    8f18:	2800      	cmp	r0, #0
    8f1a:	bf18      	it	ne
    8f1c:	2001      	movne	r0, #1
    8f1e:	4770      	bx	lr
    8f20:	2000157c 	.word	0x2000157c

00008f24 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    8f24:	4906      	ldr	r1, [pc, #24]	; (8f40 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x1c>)
    8f26:	7148      	strb	r0, [r1, #5]
    8f28:	2000      	movs	r0, #0
    8f2a:	7088      	strb	r0, [r1, #2]
    8f2c:	2201      	movs	r2, #1
    8f2e:	700a      	strb	r2, [r1, #0]
    8f30:	7048      	strb	r0, [r1, #1]
    8f32:	710a      	strb	r2, [r1, #4]
    8f34:	70c8      	strb	r0, [r1, #3]
    8f36:	4903      	ldr	r1, [pc, #12]	; (8f44 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x20>)
    8f38:	7408      	strb	r0, [r1, #16]
    8f3a:	f000 b805 	b.w	8f48 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    8f3e:	0000      	.short	0x0000
    8f40:	20000124 	.word	0x20000124
    8f44:	2000157c 	.word	0x2000157c

00008f48 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    8f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f4c:	4c3d      	ldr	r4, [pc, #244]	; (9044 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xfc>)
    8f4e:	b084      	sub	sp, #16
    8f50:	7c20      	ldrb	r0, [r4, #16]
    8f52:	2601      	movs	r6, #1
    8f54:	2500      	movs	r5, #0
    8f56:	b148      	cbz	r0, 8f6c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8f58:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    8f5c:	2001      	movs	r0, #1
    8f5e:	f7fe fd7b 	bl	7a58 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8f62:	7c20      	ldrb	r0, [r4, #16]
    8f64:	2803      	cmp	r0, #3
    8f66:	bf18      	it	ne
    8f68:	7c60      	ldrbne	r0, [r4, #17]
    8f6a:	d00b      	beq.n	8f84 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x3c>
    8f6c:	4f36      	ldr	r7, [pc, #216]	; (9048 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x100>)
    8f6e:	70fe      	strb	r6, [r7, #3]
    8f70:	4669      	mov	r1, sp
    8f72:	2001      	movs	r0, #1
    8f74:	f007 f89d 	bl	100b2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8f78:	2800      	cmp	r0, #0
    8f7a:	bf08      	it	eq
    8f7c:	f64f 76ff 	movweq	r6, #65535	; 0xffff
    8f80:	d040      	beq.n	9004 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8f82:	e03a      	b.n	8ffa <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xb2>
    8f84:	7820      	ldrb	r0, [r4, #0]
    8f86:	f7f8 ffb5 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8f8a:	7820      	ldrb	r0, [r4, #0]
    8f8c:	f7f9 f8e0 	bl	2150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8f90:	7820      	ldrb	r0, [r4, #0]
    8f92:	f7f9 f8bb 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8f96:	2800      	cmp	r0, #0
    8f98:	bf18      	it	ne
    8f9a:	7425      	strbne	r5, [r4, #16]
    8f9c:	d1e6      	bne.n	8f6c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x24>
    8f9e:	f240 11ef 	movw	r1, #495	; 0x1ef
    8fa2:	2030      	movs	r0, #48	; 0x30
    8fa4:	f7fa fdee 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fa8:	9802      	ldr	r0, [sp, #8]
    8faa:	2800      	cmp	r0, #0
    8fac:	bf1c      	itt	ne
    8fae:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    8fb2:	2900      	cmpne	r1, #0
    8fb4:	d026      	beq.n	9004 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xbc>
    8fb6:	8800      	ldrh	r0, [r0, #0]
    8fb8:	42b0      	cmp	r0, r6
    8fba:	bf18      	it	ne
    8fbc:	f04f 0820 	movne.w	r8, #32
    8fc0:	d03b      	beq.n	903a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    8fc2:	2101      	movs	r1, #1
    8fc4:	f007 f86b 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8fc8:	0004      	movs	r4, r0
    8fca:	d021      	beq.n	9010 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xc8>
    8fcc:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8fd0:	f7f9 f8be 	bl	2150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8fd4:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    8fd8:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8fdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8fe0:	f7fd fcca 	bl	6978 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    8fe4:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    8fe8:	f7f9 f890 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8fec:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    8ff0:	4669      	mov	r1, sp
    8ff2:	2001      	movs	r0, #1
    8ff4:	f007 f85d 	bl	100b2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8ff8:	b1d0      	cbz	r0, 9030 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    8ffa:	f240 111d 	movw	r1, #285	; 0x11d
    8ffe:	2030      	movs	r0, #48	; 0x30
    9000:	f7fa fdc0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9004:	4668      	mov	r0, sp
    9006:	f7fa ffe5 	bl	3fd4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    900a:	2800      	cmp	r0, #0
    900c:	d0cc      	beq.n	8fa8 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x60>
    900e:	e014      	b.n	903a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    9010:	f240 113d 	movw	r1, #317	; 0x13d
    9014:	2030      	movs	r0, #48	; 0x30
    9016:	f7fa fdb5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    901a:	9802      	ldr	r0, [sp, #8]
    901c:	2800      	cmp	r0, #0
    901e:	bf1c      	itt	ne
    9020:	f890 1140 	ldrbne.w	r1, [r0, #320]	; 0x140
    9024:	2900      	cmpne	r1, #0
    9026:	d003      	beq.n	9030 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xe8>
    9028:	8800      	ldrh	r0, [r0, #0]
    902a:	42b0      	cmp	r0, r6
    902c:	d1c9      	bne.n	8fc2 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x7a>
    902e:	e004      	b.n	903a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xf2>
    9030:	4668      	mov	r0, sp
    9032:	f7fa ffcf 	bl	3fd4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    9036:	2800      	cmp	r0, #0
    9038:	d0ef      	beq.n	901a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0xd2>
    903a:	70fd      	strb	r5, [r7, #3]
    903c:	b004      	add	sp, #16
    903e:	2000      	movs	r0, #0
    9040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9044:	2000157c 	.word	0x2000157c
    9048:	20000124 	.word	0x20000124

0000904c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    904c:	4806      	ldr	r0, [pc, #24]	; (9068 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x1c>)
    904e:	7c00      	ldrb	r0, [r0, #16]
    9050:	2800      	cmp	r0, #0
    9052:	bf1c      	itt	ne
    9054:	2000      	movne	r0, #0
    9056:	4770      	bxne	lr
    9058:	b510      	push	{r4, lr}
    905a:	2001      	movs	r0, #1
    905c:	f007 f80d 	bl	1007a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    9060:	f080 0001 	eor.w	r0, r0, #1
    9064:	bd10      	pop	{r4, pc}
    9066:	0000      	.short	0x0000
    9068:	2000157c 	.word	0x2000157c

0000906c <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q>:
    906c:	4904      	ldr	r1, [pc, #16]	; (9080 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x14>)
    906e:	788a      	ldrb	r2, [r1, #2]
    9070:	2a02      	cmp	r2, #2
    9072:	bf07      	ittee	eq
    9074:	6949      	ldreq	r1, [r1, #20]
    9076:	f8c1 0178 	streq.w	r0, [r1, #376]	; 0x178
    907a:	4902      	ldrne	r1, [pc, #8]	; (9084 <sym_7XLJMDJLN3HFZ62N4AZADQFCXDQ5POE6FAL5P2Q+0x18>)
    907c:	6288      	strne	r0, [r1, #40]	; 0x28
    907e:	4770      	bx	lr
    9080:	20000124 	.word	0x20000124
    9084:	2000157c 	.word	0x2000157c

00009088 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    9088:	4901      	ldr	r1, [pc, #4]	; (9090 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    908a:	7008      	strb	r0, [r1, #0]
    908c:	4770      	bx	lr
    908e:	0000      	.short	0x0000
    9090:	20000124 	.word	0x20000124

00009094 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    9094:	4901      	ldr	r1, [pc, #4]	; (909c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    9096:	7048      	strb	r0, [r1, #1]
    9098:	4770      	bx	lr
    909a:	0000      	.short	0x0000
    909c:	20000124 	.word	0x20000124

000090a0 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    90a0:	4905      	ldr	r1, [pc, #20]	; (90b8 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    90a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    90a6:	fbb1 f1f2 	udiv	r1, r1, r2
    90aa:	b510      	push	{r4, lr}
    90ac:	f201 210d 	addw	r1, r1, #525	; 0x20d
    90b0:	f007 ff0e 	bl	10ed0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    90b4:	b280      	uxth	r0, r0
    90b6:	bd10      	pop	{r4, pc}
    90b8:	0001527d 	.word	0x0001527d

000090bc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    90bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90c0:	4c13      	ldr	r4, [pc, #76]	; (9110 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x54>)
    90c2:	4606      	mov	r6, r0
    90c4:	f8d0 7178 	ldr.w	r7, [r0, #376]	; 0x178
    90c8:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
    90cc:	7860      	ldrb	r0, [r4, #1]
    90ce:	b120      	cbz	r0, 90da <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1e>
    90d0:	463a      	mov	r2, r7
    90d2:	4628      	mov	r0, r5
    90d4:	f007 f93d 	bl	10352 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    90d8:	4605      	mov	r5, r0
    90da:	68a0      	ldr	r0, [r4, #8]
    90dc:	4285      	cmp	r5, r0
    90de:	d005      	beq.n	90ec <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x30>
    90e0:	6921      	ldr	r1, [r4, #16]
    90e2:	1a28      	subs	r0, r5, r0
    90e4:	4408      	add	r0, r1
    90e6:	6120      	str	r0, [r4, #16]
    90e8:	f7f9 f9f4 	bl	24d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    90ec:	60a5      	str	r5, [r4, #8]
    90ee:	42af      	cmp	r7, r5
    90f0:	d80a      	bhi.n	9108 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x4c>
    90f2:	6870      	ldr	r0, [r6, #4]
    90f4:	f641 514c 	movw	r1, #7500	; 0x1d4c
    90f8:	4281      	cmp	r1, r0
    90fa:	bf9c      	itt	ls
    90fc:	78e0      	ldrbls	r0, [r4, #3]
    90fe:	2800      	cmpls	r0, #0
    9100:	bf04      	itt	eq
    9102:	2001      	moveq	r0, #1
    9104:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    9108:	f04f 0000 	mov.w	r0, #0
    910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9110:	20000124 	.word	0x20000124

00009114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    9114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9118:	4a67      	ldr	r2, [pc, #412]	; (92b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a4>)
    911a:	2304      	movs	r3, #4
    911c:	2600      	movs	r6, #0
    911e:	4d67      	ldr	r5, [pc, #412]	; (92bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a8>)
    9120:	6a92      	ldr	r2, [r2, #40]	; 0x28
    9122:	2908      	cmp	r1, #8
    9124:	d27e      	bcs.n	9224 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x110>
    9126:	e8df f001 	tbb	[pc, r1]
    912a:	2c08      	.short	0x2c08
    912c:	b1311b04 	.word	0xb1311b04
    9130:	bbb7      	.short	0xbbb7
    9132:	4604      	mov	r4, r0
    9134:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    9138:	e006      	b.n	9148 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34>
    913a:	4604      	mov	r4, r0
    913c:	78e8      	ldrb	r0, [r5, #3]
    913e:	2800      	cmp	r0, #0
    9140:	bf18      	it	ne
    9142:	f884 3140 	strbne.w	r3, [r4, #320]	; 0x140
    9146:	d00d      	beq.n	9164 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x50>
    9148:	f004 fde2 	bl	dd10 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    914c:	f7f9 f92a 	bl	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9150:	f8a4 6172 	strh.w	r6, [r4, #370]	; 0x172
    9154:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    9158:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    915c:	f884 6155 	strb.w	r6, [r4, #341]	; 0x155
    9160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9164:	9600      	str	r6, [sp, #0]
    9166:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    916a:	2301      	movs	r3, #1
    916c:	2200      	movs	r2, #0
    916e:	4620      	mov	r0, r4
    9170:	f000 f8f8 	bl	9364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    9174:	2800      	cmp	r0, #0
    9176:	d0e7      	beq.n	9148 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34>
    9178:	f240 619e 	movw	r1, #1694	; 0x69e
    917c:	2030      	movs	r0, #48	; 0x30
    917e:	f7fa fd01 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9182:	2103      	movs	r1, #3
    9184:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
    9188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    918c:	f004 fdb4 	bl	dcf8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    9190:	696c      	ldr	r4, [r5, #20]
    9192:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
    9196:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    919a:	f009 f8a3 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    919e:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    91a2:	1a08      	subs	r0, r1, r0
    91a4:	68a9      	ldr	r1, [r5, #8]
    91a6:	4401      	add	r1, r0
    91a8:	60a9      	str	r1, [r5, #8]
    91aa:	68e9      	ldr	r1, [r5, #12]
    91ac:	4408      	add	r0, r1
    91ae:	60e8      	str	r0, [r5, #12]
    91b0:	696c      	ldr	r4, [r5, #20]
    91b2:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    91b6:	2800      	cmp	r0, #0
    91b8:	bf08      	it	eq
    91ba:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91be:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    91c2:	2803      	cmp	r0, #3
    91c4:	bf18      	it	ne
    91c6:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91ca:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    91ce:	7829      	ldrb	r1, [r5, #0]
    91d0:	290c      	cmp	r1, #12
    91d2:	d206      	bcs.n	91e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xce>
    91d4:	483a      	ldr	r0, [pc, #232]	; (92c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1ac>)
    91d6:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
    91da:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    91de:	290c      	cmp	r1, #12
    91e0:	d304      	bcc.n	91ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd8>
    91e2:	f44f 7147 	mov.w	r1, #796	; 0x31c
    91e6:	2006      	movs	r0, #6
    91e8:	f7fa fccc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91ec:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
    91f0:	1898      	adds	r0, r3, r2
    91f2:	b285      	uxth	r5, r0
    91f4:	f502 60c8 	add.w	r0, r2, #1600	; 0x640
    91f8:	fa1f f980 	uxth.w	r9, r0
    91fc:	4640      	mov	r0, r8
    91fe:	f009 f871 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9202:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    9206:	1a0f      	subs	r7, r1, r0
    9208:	4640      	mov	r0, r8
    920a:	f009 f879 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    920e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    9212:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9216:	fbb0 f0fa 	udiv	r0, r0, sl
    921a:	1a3f      	subs	r7, r7, r0
    921c:	4640      	mov	r0, r8
    921e:	f009 f861 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9222:	e000      	b.n	9226 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x112>
    9224:	e043      	b.n	92ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19a>
    9226:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    922a:	eba1 0b00 	sub.w	fp, r1, r0
    922e:	4640      	mov	r0, r8
    9230:	f009 f866 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9234:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9238:	4408      	add	r0, r1
    923a:	fbb0 f0fa 	udiv	r0, r0, sl
    923e:	ebab 0000 	sub.w	r0, fp, r0
    9242:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    9246:	4369      	muls	r1, r5
    9248:	fbb1 f1f9 	udiv	r1, r1, r9
    924c:	2229      	movs	r2, #41	; 0x29
    924e:	eb02 0050 	add.w	r0, r2, r0, lsr #1
    9252:	3160      	adds	r1, #96	; 0x60
    9254:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
    9258:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    925c:	4297      	cmp	r7, r2
    925e:	d301      	bcc.n	9264 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x150>
    9260:	4287      	cmp	r7, r0
    9262:	d901      	bls.n	9268 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x154>
    9264:	f7fa f8f4 	bl	3450 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    9268:	4629      	mov	r1, r5
    926a:	6860      	ldr	r0, [r4, #4]
    926c:	f005 fd01 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9270:	6861      	ldr	r1, [r4, #4]
    9272:	f641 524c 	movw	r2, #7500	; 0x1d4c
    9276:	4291      	cmp	r1, r2
    9278:	bf34      	ite	cc
    927a:	2102      	movcc	r1, #2
    927c:	2100      	movcs	r1, #0
    927e:	4408      	add	r0, r1
    9280:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9284:	f884 6156 	strb.w	r6, [r4, #342]	; 0x156
    9288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    928c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9290:	2100      	movs	r1, #0
    9292:	4610      	mov	r0, r2
    9294:	f000 b816 	b.w	92c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    9298:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
    929c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92a0:	f8d0 0178 	ldr.w	r0, [r0, #376]	; 0x178
    92a4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92a8:	2101      	movs	r1, #1
    92aa:	f000 b80b 	b.w	92c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
    92ae:	f240 7141 	movw	r1, #1857	; 0x741
    92b2:	2030      	movs	r0, #48	; 0x30
    92b4:	f7fa fc66 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92b8:	2000157c 	.word	0x2000157c
    92bc:	20000124 	.word	0x20000124
    92c0:	00011194 	.word	0x00011194
    92c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92c8:	4c24      	ldr	r4, [pc, #144]	; (935c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x248>)
    92ca:	2500      	movs	r5, #0
    92cc:	4680      	mov	r8, r0
    92ce:	7225      	strb	r5, [r4, #8]
    92d0:	6a26      	ldr	r6, [r4, #32]
    92d2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    92d6:	7425      	strb	r5, [r4, #16]
    92d8:	2701      	movs	r7, #1
    92da:	7467      	strb	r7, [r4, #17]
    92dc:	4639      	mov	r1, r7
    92de:	6860      	ldr	r0, [r4, #4]
    92e0:	f7fd fa46 	bl	6770 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    92e4:	6861      	ldr	r1, [r4, #4]
    92e6:	f8c1 6168 	str.w	r6, [r1, #360]	; 0x168
    92ea:	7820      	ldrb	r0, [r4, #0]
    92ec:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    92f0:	f8c1 8178 	str.w	r8, [r1, #376]	; 0x178
    92f4:	f8c1 616c 	str.w	r6, [r1, #364]	; 0x16c
    92f8:	8809      	ldrh	r1, [r1, #0]
    92fa:	f7fd fb3d 	bl	6978 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    92fe:	6864      	ldr	r4, [r4, #4]
    9300:	f884 5140 	strb.w	r5, [r4, #320]	; 0x140
    9304:	2300      	movs	r3, #0
    9306:	f8a4 5170 	strh.w	r5, [r4, #368]	; 0x170
    930a:	461a      	mov	r2, r3
    930c:	4619      	mov	r1, r3
    930e:	4620      	mov	r0, r4
    9310:	9500      	str	r5, [sp, #0]
    9312:	f000 f827 	bl	9364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    9316:	b120      	cbz	r0, 9322 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x20e>
    9318:	f240 210e 	movw	r1, #526	; 0x20e
    931c:	2030      	movs	r0, #48	; 0x30
    931e:	f7fa fc31 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9322:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    9326:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    932a:	f884 7140 	strb.w	r7, [r4, #320]	; 0x140
    932e:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
    9332:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
    9336:	f884 5155 	strb.w	r5, [r4, #341]	; 0x155
    933a:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    933e:	1e40      	subs	r0, r0, #1
    9340:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    9344:	f8a4 5172 	strh.w	r5, [r4, #370]	; 0x172
    9348:	f004 fce2 	bl	dd10 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    934c:	f7f9 f82a 	bl	23a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9350:	4803      	ldr	r0, [pc, #12]	; (9360 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24c>)
    9352:	7940      	ldrb	r0, [r0, #5]
    9354:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9358:	f7fa ba08 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    935c:	2000157c 	.word	0x2000157c
    9360:	20000124 	.word	0x20000124
    9364:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9368:	b085      	sub	sp, #20
    936a:	4604      	mov	r4, r0
    936c:	2000      	movs	r0, #0
    936e:	9000      	str	r0, [sp, #0]
    9370:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9374:	469b      	mov	fp, r3
    9376:	e9cd 3002 	strd	r3, r0, [sp, #8]
    937a:	48ff      	ldr	r0, [pc, #1020]	; (9778 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    937c:	4689      	mov	r9, r1
    937e:	7800      	ldrb	r0, [r0, #0]
    9380:	280c      	cmp	r0, #12
    9382:	d279      	bcs.n	9478 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    9384:	49fd      	ldr	r1, [pc, #1012]	; (977c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x668>)
    9386:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    938a:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    938e:	280c      	cmp	r0, #12
    9390:	d272      	bcs.n	9478 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x364>
    9392:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    9396:	4410      	add	r0, r2
    9398:	b285      	uxth	r5, r0
    939a:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    939e:	280d      	cmp	r0, #13
    93a0:	bf0c      	ite	eq
    93a2:	2001      	moveq	r0, #1
    93a4:	2000      	movne	r0, #0
    93a6:	9004      	str	r0, [sp, #16]
    93a8:	9807      	ldr	r0, [sp, #28]
    93aa:	2800      	cmp	r0, #0
    93ac:	bf04      	itt	eq
    93ae:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
    93b2:	2803      	cmpeq	r0, #3
    93b4:	d128      	bne.n	9408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    93b6:	9804      	ldr	r0, [sp, #16]
    93b8:	b330      	cbz	r0, 9408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    93ba:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    93be:	4548      	cmp	r0, r9
    93c0:	d122      	bne.n	9408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f4>
    93c2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    93c6:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    93ca:	6860      	ldr	r0, [r4, #4]
    93cc:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    93d0:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    93d4:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    93d8:	4408      	add	r0, r1
    93da:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    93de:	4620      	mov	r0, r4
    93e0:	f000 fd16 	bl	9e10 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    93e4:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    93e8:	61e0      	str	r0, [r4, #28]
    93ea:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    93ee:	8360      	strh	r0, [r4, #26]
    93f0:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    93f4:	6060      	str	r0, [r4, #4]
    93f6:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    93fa:	8120      	strh	r0, [r4, #8]
    93fc:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    9400:	8160      	strh	r0, [r4, #10]
    9402:	2002      	movs	r0, #2
    9404:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    9408:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    940c:	f504 76ac 	add.w	r6, r4, #344	; 0x158
    9410:	eba9 0000 	sub.w	r0, r9, r0
    9414:	fa0f f880 	sxth.w	r8, r0
    9418:	f8b4 0170 	ldrh.w	r0, [r4, #368]	; 0x170
    941c:	eba9 0000 	sub.w	r0, r9, r0
    9420:	b207      	sxth	r7, r0
    9422:	2f00      	cmp	r7, #0
    9424:	da09      	bge.n	943a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x326>
    9426:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    942a:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    942e:	2001      	movs	r0, #1
    9430:	9002      	str	r0, [sp, #8]
    9432:	2000      	movs	r0, #0
    9434:	4647      	mov	r7, r8
    9436:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    943a:	48cf      	ldr	r0, [pc, #828]	; (9778 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    943c:	f04f 0a00 	mov.w	sl, #0
    9440:	7900      	ldrb	r0, [r0, #4]
    9442:	2800      	cmp	r0, #0
    9444:	d07e      	beq.n	9544 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    9446:	f7fa f821 	bl	348c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    944a:	2800      	cmp	r0, #0
    944c:	d07a      	beq.n	9544 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    944e:	f8b4 012c 	ldrh.w	r0, [r4, #300]	; 0x12c
    9452:	2802      	cmp	r0, #2
    9454:	d37f      	bcc.n	9556 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    9456:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    945a:	2802      	cmp	r0, #2
    945c:	d07b      	beq.n	9556 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    945e:	f894 0156 	ldrb.w	r0, [r4, #342]	; 0x156
    9462:	2800      	cmp	r0, #0
    9464:	d177      	bne.n	9556 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    9466:	6860      	ldr	r0, [r4, #4]
    9468:	f641 514c 	movw	r1, #7500	; 0x1d4c
    946c:	4288      	cmp	r0, r1
    946e:	d372      	bcc.n	9556 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    9470:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    9474:	290c      	cmp	r1, #12
    9476:	d304      	bcc.n	9482 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x36e>
    9478:	f44f 7147 	mov.w	r1, #796	; 0x31c
    947c:	2006      	movs	r0, #6
    947e:	f7fa fb81 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9482:	4abe      	ldr	r2, [pc, #760]	; (977c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x668>)
    9484:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    9488:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    948c:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
    9490:	b289      	uxth	r1, r1
    9492:	460d      	mov	r5, r1
    9494:	2a01      	cmp	r2, #1
    9496:	d017      	beq.n	94c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    9498:	f005 fbeb 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    949c:	4601      	mov	r1, r0
    949e:	6862      	ldr	r2, [r4, #4]
    94a0:	f641 504c 	movw	r0, #7500	; 0x1d4c
    94a4:	4282      	cmp	r2, r0
    94a6:	bf2c      	ite	cs
    94a8:	2000      	movcs	r0, #0
    94aa:	2002      	movcc	r0, #2
    94ac:	4408      	add	r0, r1
    94ae:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    94b2:	b280      	uxth	r0, r0
    94b4:	4442      	add	r2, r8
    94b6:	1bd1      	subs	r1, r2, r7
    94b8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    94bc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    94c0:	1a82      	subs	r2, r0, r2
    94c2:	fb01 aa02 	mla	sl, r1, r2, sl
    94c6:	e043      	b.n	9550 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x43c>
    94c8:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    94cc:	2803      	cmp	r0, #3
    94ce:	d056      	beq.n	957e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x46a>
    94d0:	48ab      	ldr	r0, [pc, #684]	; (9780 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>)
    94d2:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    94d6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    94da:	f007 f813 	bl	10504 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    94de:	69e1      	ldr	r1, [r4, #28]
    94e0:	4408      	add	r0, r1
    94e2:	9001      	str	r0, [sp, #4]
    94e4:	4629      	mov	r1, r5
    94e6:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    94ea:	f005 fbc2 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    94ee:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    94f2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    94f6:	1a82      	subs	r2, r0, r2
    94f8:	fb01 aa02 	mla	sl, r1, r2, sl
    94fc:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    9500:	4629      	mov	r1, r5
    9502:	9801      	ldr	r0, [sp, #4]
    9504:	f005 fbb5 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9508:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    950c:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    9510:	1a41      	subs	r1, r0, r1
    9512:	448a      	add	sl, r1
    9514:	4629      	mov	r1, r5
    9516:	6860      	ldr	r0, [r4, #4]
    9518:	f005 fbab 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    951c:	4601      	mov	r1, r0
    951e:	6862      	ldr	r2, [r4, #4]
    9520:	f641 504c 	movw	r0, #7500	; 0x1d4c
    9524:	4282      	cmp	r2, r0
    9526:	bf34      	ite	cc
    9528:	2002      	movcc	r0, #2
    952a:	2000      	movcs	r0, #0
    952c:	4408      	add	r0, r1
    952e:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
    9532:	4442      	add	r2, r8
    9534:	1bd1      	subs	r1, r2, r7
    9536:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    953a:	1a89      	subs	r1, r1, r2
    953c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    9540:	1a82      	subs	r2, r0, r2
    9542:	e000      	b.n	9546 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x432>
    9544:	e007      	b.n	9556 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x442>
    9546:	1e49      	subs	r1, r1, #1
    9548:	fb01 aa02 	mla	sl, r1, r2, sl
    954c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9550:	2001      	movs	r0, #1
    9552:	f884 0156 	strb.w	r0, [r4, #342]	; 0x156
    9556:	f8cd a004 	str.w	sl, [sp, #4]
    955a:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    955e:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
    9562:	b190      	cbz	r0, 958a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x476>
    9564:	2801      	cmp	r0, #1
    9566:	f000 80ed 	beq.w	9744 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    956a:	2802      	cmp	r0, #2
    956c:	d079      	beq.n	9662 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x54e>
    956e:	2803      	cmp	r0, #3
    9570:	f000 811b 	beq.w	97aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x696>
    9574:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    9578:	2030      	movs	r0, #48	; 0x30
    957a:	f7fa fb03 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    957e:	69e1      	ldr	r1, [r4, #28]
    9580:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    9584:	4408      	add	r0, r1
    9586:	9001      	str	r0, [sp, #4]
    9588:	e7ac      	b.n	94e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3d0>
    958a:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    958e:	2800      	cmp	r0, #0
    9590:	d062      	beq.n	9658 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x544>
    9592:	487b      	ldr	r0, [pc, #492]	; (9780 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>)
    9594:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
    9598:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    959c:	f006 ffb2 	bl	10504 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    95a0:	4607      	mov	r7, r0
    95a2:	69e0      	ldr	r0, [r4, #28]
    95a4:	4629      	mov	r1, r5
    95a6:	4438      	add	r0, r7
    95a8:	f005 fb63 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    95ac:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    95b0:	4629      	mov	r1, r5
    95b2:	6860      	ldr	r0, [r4, #4]
    95b4:	f005 fb5d 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    95b8:	6862      	ldr	r2, [r4, #4]
    95ba:	f641 514c 	movw	r1, #7500	; 0x1d4c
    95be:	428a      	cmp	r2, r1
    95c0:	bf2c      	ite	cs
    95c2:	2100      	movcs	r1, #0
    95c4:	2102      	movcc	r1, #2
    95c6:	4408      	add	r0, r1
    95c8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    95cc:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    95d0:	f008 fe96 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    95d4:	f64d 7141 	movw	r1, #57153	; 0xdf41
    95d8:	4408      	add	r0, r1
    95da:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    95de:	fbb0 f0f5 	udiv	r0, r0, r5
    95e2:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    95e6:	f44f 71a8 	mov.w	r1, #336	; 0x150
    95ea:	4620      	mov	r0, r4
    95ec:	f007 fc0c 	bl	10e08 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    95f0:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    95f4:	9000      	str	r0, [sp, #0]
    95f6:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    95fa:	f008 fe81 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    95fe:	4450      	add	r0, sl
    9600:	fbb0 f0f5 	udiv	r0, r0, r5
    9604:	69e1      	ldr	r1, [r4, #28]
    9606:	9a00      	ldr	r2, [sp, #0]
    9608:	4439      	add	r1, r7
    960a:	1a09      	subs	r1, r1, r0
    960c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9610:	1a09      	subs	r1, r1, r0
    9612:	4411      	add	r1, r2
    9614:	3920      	subs	r1, #32
    9616:	9100      	str	r1, [sp, #0]
    9618:	0040      	lsls	r0, r0, #1
    961a:	8b61      	ldrh	r1, [r4, #26]
    961c:	3060      	adds	r0, #96	; 0x60
    961e:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    9622:	1847      	adds	r7, r0, r1
    9624:	4640      	mov	r0, r8
    9626:	f008 fe6b 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    962a:	4450      	add	r0, sl
    962c:	fbb0 f5f5 	udiv	r5, r0, r5
    9630:	4640      	mov	r0, r8
    9632:	f008 fe57 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9636:	4950      	ldr	r1, [pc, #320]	; (9778 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    9638:	4428      	add	r0, r5
    963a:	4438      	add	r0, r7
    963c:	6188      	str	r0, [r1, #24]
    963e:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
    9642:	9900      	ldr	r1, [sp, #0]
    9644:	1a08      	subs	r0, r1, r0
    9646:	f5b0 7ff5 	cmp.w	r0, #490	; 0x1ea
    964a:	f200 8122 	bhi.w	9892 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    964e:	f240 41c2 	movw	r1, #1218	; 0x4c2
    9652:	2030      	movs	r0, #48	; 0x30
    9654:	f7fa fa96 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9658:	f240 41a2 	movw	r1, #1186	; 0x4a2
    965c:	2030      	movs	r0, #48	; 0x30
    965e:	f7fa fa91 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9662:	69e1      	ldr	r1, [r4, #28]
    9664:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    9668:	4408      	add	r0, r1
    966a:	4629      	mov	r1, r5
    966c:	f005 fb01 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9670:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
    9674:	4629      	mov	r1, r5
    9676:	6860      	ldr	r0, [r4, #4]
    9678:	f005 fafb 	bl	ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    967c:	6862      	ldr	r2, [r4, #4]
    967e:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9682:	428a      	cmp	r2, r1
    9684:	bf34      	ite	cc
    9686:	2102      	movcc	r1, #2
    9688:	2100      	movcs	r1, #0
    968a:	4408      	add	r0, r1
    968c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    9690:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9694:	f008 fe34 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9698:	f64d 7141 	movw	r1, #57153	; 0xdf41
    969c:	4408      	add	r0, r1
    969e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    96a2:	fbb0 f0f7 	udiv	r0, r0, r7
    96a6:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
    96aa:	f44f 71a8 	mov.w	r1, #336	; 0x150
    96ae:	4620      	mov	r0, r4
    96b0:	f007 fbaa 	bl	10e08 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    96b4:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    96b8:	b9e0      	cbnz	r0, 96f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e0>
    96ba:	f1bb 0f00 	cmp.w	fp, #0
    96be:	d019      	beq.n	96f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5e0>
    96c0:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    96c4:	4628      	mov	r0, r5
    96c6:	f008 fe1b 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    96ca:	4450      	add	r0, sl
    96cc:	fbb0 f0f7 	udiv	r0, r0, r7
    96d0:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    96d4:	69e2      	ldr	r2, [r4, #28]
    96d6:	4408      	add	r0, r1
    96d8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    96dc:	4411      	add	r1, r2
    96de:	eba1 0800 	sub.w	r8, r1, r0
    96e2:	4628      	mov	r0, r5
    96e4:	f008 fdfe 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    96e8:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    96ec:	1a08      	subs	r0, r1, r0
    96ee:	4440      	add	r0, r8
    96f0:	3820      	subs	r0, #32
    96f2:	e006      	b.n	9702 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ee>
    96f4:	69e1      	ldr	r1, [r4, #28]
    96f6:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    96fa:	4408      	add	r0, r1
    96fc:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    9700:	1a40      	subs	r0, r0, r1
    9702:	9000      	str	r0, [sp, #0]
    9704:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    9708:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    970c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9710:	f894 8067 	ldrb.w	r8, [r4, #103]	; 0x67
    9714:	fb01 0002 	mla	r0, r1, r2, r0
    9718:	0040      	lsls	r0, r0, #1
    971a:	8b61      	ldrh	r1, [r4, #26]
    971c:	3060      	adds	r0, #96	; 0x60
    971e:	1845      	adds	r5, r0, r1
    9720:	4640      	mov	r0, r8
    9722:	f008 fded 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9726:	4450      	add	r0, sl
    9728:	fbb0 f7f7 	udiv	r7, r0, r7
    972c:	4640      	mov	r0, r8
    972e:	f008 fdd9 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9732:	4911      	ldr	r1, [pc, #68]	; (9778 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>)
    9734:	4438      	add	r0, r7
    9736:	4428      	add	r0, r5
    9738:	6188      	str	r0, [r1, #24]
    973a:	2001      	movs	r0, #1
    973c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    9740:	e0a7      	b.n	9892 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    9742:	bf00      	nop
    9744:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    9748:	6860      	ldr	r0, [r4, #4]
    974a:	1a80      	subs	r0, r0, r2
    974c:	4378      	muls	r0, r7
    974e:	9000      	str	r0, [sp, #0]
    9750:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    9754:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    9758:	4440      	add	r0, r8
    975a:	1a40      	subs	r0, r0, r1
    975c:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
    9760:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    9764:	1e40      	subs	r0, r0, #1
    9766:	fb0c 3101 	mla	r1, ip, r1, r3
    976a:	fb00 1002 	mla	r0, r0, r2, r1
    976e:	0040      	lsls	r0, r0, #1
    9770:	8b61      	ldrh	r1, [r4, #26]
    9772:	3060      	adds	r0, #96	; 0x60
    9774:	1845      	adds	r5, r0, r1
    9776:	e005      	b.n	9784 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x670>
    9778:	20000124 	.word	0x20000124
    977c:	00011194 	.word	0x00011194
    9780:	2000157c 	.word	0x2000157c
    9784:	f894 7067 	ldrb.w	r7, [r4, #103]	; 0x67
    9788:	4638      	mov	r0, r7
    978a:	f008 fdb9 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    978e:	eb00 010a 	add.w	r1, r0, sl
    9792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9796:	fbb1 f8f0 	udiv	r8, r1, r0
    979a:	4638      	mov	r0, r7
    979c:	f008 fda2 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    97a0:	4987      	ldr	r1, [pc, #540]	; (99c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    97a2:	4440      	add	r0, r8
    97a4:	4428      	add	r0, r5
    97a6:	6188      	str	r0, [r1, #24]
    97a8:	e073      	b.n	9892 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    97aa:	6860      	ldr	r0, [r4, #4]
    97ac:	4378      	muls	r0, r7
    97ae:	9000      	str	r0, [sp, #0]
    97b0:	f1bb 0f00 	cmp.w	fp, #0
    97b4:	d007      	beq.n	97c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6b2>
    97b6:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    97ba:	2900      	cmp	r1, #0
    97bc:	bf04      	itt	eq
    97be:	2100      	moveq	r1, #0
    97c0:	f884 1157 	strbeq.w	r1, [r4, #343]	; 0x157
    97c4:	d003      	beq.n	97ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ba>
    97c6:	f894 1157 	ldrb.w	r1, [r4, #343]	; 0x157
    97ca:	2900      	cmp	r1, #0
    97cc:	d161      	bne.n	9892 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    97ce:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    97d2:	fb07 0011 	mls	r0, r7, r1, r0
    97d6:	9000      	str	r0, [sp, #0]
    97d8:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
    97dc:	2824      	cmp	r0, #36	; 0x24
    97de:	bf1c      	itt	ne
    97e0:	f894 0085 	ldrbne.w	r0, [r4, #133]	; 0x85
    97e4:	2824      	cmpne	r0, #36	; 0x24
    97e6:	d10b      	bne.n	9800 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ec>
    97e8:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    97ec:	eba9 0000 	sub.w	r0, r9, r0
    97f0:	b200      	sxth	r0, r0
    97f2:	2800      	cmp	r0, #0
    97f4:	db04      	blt.n	9800 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6ec>
    97f6:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    97fa:	2800      	cmp	r0, #0
    97fc:	bf18      	it	ne
    97fe:	9003      	strne	r0, [sp, #12]
    9800:	9802      	ldr	r0, [sp, #8]
    9802:	b300      	cbz	r0, 9846 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x732>
    9804:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    9808:	b9e8      	cbnz	r0, 9846 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x732>
    980a:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    980e:	2800      	cmp	r0, #0
    9810:	bf1c      	itt	ne
    9812:	f8d4 0178 	ldrne.w	r0, [r4, #376]	; 0x178
    9816:	2800      	cmpne	r0, #0
    9818:	d07c      	beq.n	9914 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x800>
    981a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    981e:	f008 fd6f 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9822:	eb00 010a 	add.w	r1, r0, sl
    9826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    982a:	fbb1 f0f0 	udiv	r0, r1, r0
    982e:	9900      	ldr	r1, [sp, #0]
    9830:	1a0d      	subs	r5, r1, r0
    9832:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    9836:	f008 fd55 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    983a:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
    983e:	1a08      	subs	r0, r1, r0
    9840:	4428      	add	r0, r5
    9842:	3820      	subs	r0, #32
    9844:	9000      	str	r0, [sp, #0]
    9846:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    984a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    984e:	4440      	add	r0, r8
    9850:	4348      	muls	r0, r1
    9852:	0040      	lsls	r0, r0, #1
    9854:	9f03      	ldr	r7, [sp, #12]
    9856:	f100 0560 	add.w	r5, r0, #96	; 0x60
    985a:	4638      	mov	r0, r7
    985c:	f008 fd50 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9860:	eb00 010a 	add.w	r1, r0, sl
    9864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9868:	fbb1 f8f0 	udiv	r8, r1, r0
    986c:	4638      	mov	r0, r7
    986e:	f008 fd39 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    9872:	4953      	ldr	r1, [pc, #332]	; (99c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    9874:	4440      	add	r0, r8
    9876:	4428      	add	r0, r5
    9878:	6188      	str	r0, [r1, #24]
    987a:	6860      	ldr	r0, [r4, #4]
    987c:	f641 514c 	movw	r1, #7500	; 0x1d4c
    9880:	4288      	cmp	r0, r1
    9882:	d206      	bcs.n	9892 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x77e>
    9884:	466b      	mov	r3, sp
    9886:	4a4f      	ldr	r2, [pc, #316]	; (99c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8b0>)
    9888:	4629      	mov	r1, r5
    988a:	f006 ff79 	bl	10780 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
    988e:	f884 0157 	strb.w	r0, [r4, #343]	; 0x157
    9892:	e9dd 1000 	ldrd	r1, r0, [sp]
    9896:	1a08      	subs	r0, r1, r0
    9898:	9000      	str	r0, [sp, #0]
    989a:	4a49      	ldr	r2, [pc, #292]	; (99c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ac>)
    989c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    98a0:	6860      	ldr	r0, [r4, #4]
    98a2:	6991      	ldr	r1, [r2, #24]
    98a4:	1ac0      	subs	r0, r0, r3
    98a6:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
    98aa:	61d0      	str	r0, [r2, #28]
    98ac:	4281      	cmp	r1, r0
    98ae:	bf98      	it	ls
    98b0:	4608      	movls	r0, r1
    98b2:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    98b6:	2000      	movs	r0, #0
    98b8:	7030      	strb	r0, [r6, #0]
    98ba:	2064      	movs	r0, #100	; 0x64
    98bc:	8130      	strh	r0, [r6, #8]
    98be:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    98c2:	9900      	ldr	r1, [sp, #0]
    98c4:	f7f7 fda6 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    98c8:	60f0      	str	r0, [r6, #12]
    98ca:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    98ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    98d0:	4408      	add	r0, r1
    98d2:	6070      	str	r0, [r6, #4]
    98d4:	68f0      	ldr	r0, [r6, #12]
    98d6:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
    98da:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
    98de:	f000 facb 	bl	9e78 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
    98e2:	b110      	cbz	r0, 98ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7d6>
    98e4:	6870      	ldr	r0, [r6, #4]
    98e6:	301e      	adds	r0, #30
    98e8:	6070      	str	r0, [r6, #4]
    98ea:	2001      	movs	r0, #1
    98ec:	72b0      	strb	r0, [r6, #10]
    98ee:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
    98f2:	eba1 0109 	sub.w	r1, r1, r9
    98f6:	b209      	sxth	r1, r1
    98f8:	2900      	cmp	r1, #0
    98fa:	bfc4      	itt	gt
    98fc:	2103      	movgt	r1, #3
    98fe:	72b1      	strbgt	r1, [r6, #10]
    9900:	9904      	ldr	r1, [sp, #16]
    9902:	b3c9      	cbz	r1, 9978 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x864>
    9904:	f1bb 0f00 	cmp.w	fp, #0
    9908:	d027      	beq.n	995a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    990a:	bf00      	nop
    990c:	f8b4 212c 	ldrh.w	r2, [r4, #300]	; 0x12c
    9910:	2a00      	cmp	r2, #0
    9912:	e000      	b.n	9916 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x802>
    9914:	e031      	b.n	997a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x866>
    9916:	bf0c      	ite	eq
    9918:	2100      	moveq	r1, #0
    991a:	f8b4 112e 	ldrhne.w	r1, [r4, #302]	; 0x12e
    991e:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
    9922:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    9926:	1c49      	adds	r1, r1, #1
    9928:	4359      	muls	r1, r3
    992a:	4291      	cmp	r1, r2
    992c:	d215      	bcs.n	995a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    992e:	7ab1      	ldrb	r1, [r6, #10]
    9930:	1e49      	subs	r1, r1, #1
    9932:	2900      	cmp	r1, #0
    9934:	dd11      	ble.n	995a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    9936:	72b0      	strb	r0, [r6, #10]
    9938:	f8b4 012e 	ldrh.w	r0, [r4, #302]	; 0x12e
    993c:	2101      	movs	r1, #1
    993e:	1c40      	adds	r0, r0, #1
    9940:	f8a4 012e 	strh.w	r0, [r4, #302]	; 0x12e
    9944:	f504 7098 	add.w	r0, r4, #304	; 0x130
    9948:	f7fb f972 	bl	4c30 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    994c:	f894 0130 	ldrb.w	r0, [r4, #304]	; 0x130
    9950:	f000 0007 	and.w	r0, r0, #7
    9954:	1c40      	adds	r0, r0, #1
    9956:	f884 0130 	strb.w	r0, [r4, #304]	; 0x130
    995a:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    995e:	4631      	mov	r1, r6
    9960:	f7f7 feac 	bl	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9964:	b338      	cbz	r0, 99b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a2>
    9966:	9807      	ldr	r0, [sp, #28]
    9968:	f080 0001 	eor.w	r0, r0, #1
    996c:	f884 0154 	strb.w	r0, [r4, #340]	; 0x154
    9970:	b009      	add	sp, #36	; 0x24
    9972:	2000      	movs	r0, #0
    9974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9978:	e004      	b.n	9984 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x870>
    997a:	f240 5113 	movw	r1, #1299	; 0x513
    997e:	2030      	movs	r0, #48	; 0x30
    9980:	f7fa f900 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9984:	f1bb 0f00 	cmp.w	fp, #0
    9988:	d1c0      	bne.n	990c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f8>
    998a:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    998e:	2800      	cmp	r0, #0
    9990:	d0e3      	beq.n	995a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    9992:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    9996:	6860      	ldr	r0, [r4, #4]
    9998:	1a41      	subs	r1, r0, r1
    999a:	4630      	mov	r0, r6
    999c:	f006 fe28 	bl	105f0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    99a0:	0400      	lsls	r0, r0, #16
    99a2:	0c00      	lsrs	r0, r0, #16
    99a4:	d0d9      	beq.n	995a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x846>
    99a6:	9912      	ldr	r1, [sp, #72]	; 0x48
    99a8:	2900      	cmp	r1, #0
    99aa:	bf18      	it	ne
    99ac:	8008      	strhne	r0, [r1, #0]
    99ae:	2001      	movs	r0, #1
    99b0:	b009      	add	sp, #36	; 0x24
    99b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99b6:	f240 5175 	movw	r1, #1397	; 0x575
    99ba:	2030      	movs	r0, #48	; 0x30
    99bc:	f7fa f8e2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99c0:	20000124 	.word	0x20000124
    99c4:	2000013c 	.word	0x2000013c
    99c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99cc:	4cfd      	ldr	r4, [pc, #1012]	; (9dc4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcb0>)
    99ce:	468a      	mov	sl, r1
    99d0:	b083      	sub	sp, #12
    99d2:	7c21      	ldrb	r1, [r4, #16]
    99d4:	2702      	movs	r7, #2
    99d6:	4dfc      	ldr	r5, [pc, #1008]	; (9dc8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcb4>)
    99d8:	2600      	movs	r6, #0
    99da:	f04f 0801 	mov.w	r8, #1
    99de:	f04f 2be0 	mov.w	fp, #3758153728	; 0xe000e000
    99e2:	2903      	cmp	r1, #3
    99e4:	bf04      	itt	eq
    99e6:	7821      	ldrbeq	r1, [r4, #0]
    99e8:	4281      	cmpeq	r1, r0
    99ea:	f040 80e3 	bne.w	9bb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xaa0>
    99ee:	6860      	ldr	r0, [r4, #4]
    99f0:	6168      	str	r0, [r5, #20]
    99f2:	7c20      	ldrb	r0, [r4, #16]
    99f4:	2803      	cmp	r0, #3
    99f6:	d003      	beq.n	9a00 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ec>
    99f8:	21d2      	movs	r1, #210	; 0xd2
    99fa:	2030      	movs	r0, #48	; 0x30
    99fc:	f7fa f8c2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a00:	f04f 0903 	mov.w	r9, #3
    9a04:	f1ba 0f08 	cmp.w	sl, #8
    9a08:	f080 80d0 	bcs.w	9bac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa98>
    9a0c:	e8df f00a 	tbb	[pc, sl]
    9a10:	39391604 	.word	0x39391604
    9a14:	c7becef6 	.word	0xc7becef6
    9a18:	62a6      	str	r6, [r4, #40]	; 0x28
    9a1a:	f7fd ffa9 	bl	7970 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    9a1e:	b120      	cbz	r0, 9a2a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x916>
    9a20:	f240 2169 	movw	r1, #617	; 0x269
    9a24:	2030      	movs	r0, #48	; 0x30
    9a26:	f7fa f8ad 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a2a:	69a0      	ldr	r0, [r4, #24]
    9a2c:	38f9      	subs	r0, #249	; 0xf9
    9a2e:	f7f8 fd51 	bl	24d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9a32:	f885 9002 	strb.w	r9, [r5, #2]
    9a36:	b003      	add	sp, #12
    9a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a3c:	f7fd ff68 	bl	7910 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9a40:	b998      	cbnz	r0, 9a6a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x956>
    9a42:	f7fd fe0f 	bl	7664 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9a46:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    9a4a:	69a0      	ldr	r0, [r4, #24]
    9a4c:	42a8      	cmp	r0, r5
    9a4e:	d20b      	bcs.n	9a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x954>
    9a50:	1a28      	subs	r0, r5, r0
    9a52:	2104      	movs	r1, #4
    9a54:	f7f7 fbe6 	bl	1224 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9a58:	b130      	cbz	r0, 9a68 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x954>
    9a5a:	61a5      	str	r5, [r4, #24]
    9a5c:	b003      	add	sp, #12
    9a5e:	2000      	movs	r0, #0
    9a60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a64:	f7ff b942 	b.w	8cec <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    9a68:	61a5      	str	r5, [r4, #24]
    9a6a:	f7fd ffe7 	bl	7a3c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    9a6e:	2800      	cmp	r0, #0
    9a70:	bf04      	itt	eq
    9a72:	b003      	addeq	sp, #12
    9a74:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a78:	f240 219d 	movw	r1, #669	; 0x29d
    9a7c:	2030      	movs	r0, #48	; 0x30
    9a7e:	f7fa f881 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a82:	2064      	movs	r0, #100	; 0x64
    9a84:	83a0      	strh	r0, [r4, #28]
    9a86:	7526      	strb	r6, [r4, #20]
    9a88:	77e6      	strb	r6, [r4, #31]
    9a8a:	7a20      	ldrb	r0, [r4, #8]
    9a8c:	f04f 0a01 	mov.w	sl, #1
    9a90:	f242 7b10 	movw	fp, #10000	; 0x2710
    9a94:	b158      	cbz	r0, 9aae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x99a>
    9a96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9a9a:	6a20      	ldr	r0, [r4, #32]
    9a9c:	f7f7 fcba 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9aa0:	6220      	str	r0, [r4, #32]
    9aa2:	2100      	movs	r1, #0
    9aa4:	f104 0014 	add.w	r0, r4, #20
    9aa8:	f006 fda2 	bl	105f0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9aac:	e019      	b.n	9ae2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ce>
    9aae:	2101      	movs	r1, #1
    9ab0:	4668      	mov	r0, sp
    9ab2:	f7fb f8cb 	bl	4c4c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    9ab6:	f89d 0000 	ldrb.w	r0, [sp]
    9aba:	0200      	lsls	r0, r0, #8
    9abc:	fbb0 f1fb 	udiv	r1, r0, fp
    9ac0:	fb0b 0a11 	mls	sl, fp, r1, r0
    9ac4:	f7fd fda6 	bl	7614 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9ac8:	4482      	add	sl, r0
    9aca:	4651      	mov	r1, sl
    9acc:	6a20      	ldr	r0, [r4, #32]
    9ace:	f7f7 fca1 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9ad2:	6220      	str	r0, [r4, #32]
    9ad4:	4651      	mov	r1, sl
    9ad6:	f104 0014 	add.w	r0, r4, #20
    9ada:	f006 fd89 	bl	105f0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9ade:	f100 0a01 	add.w	sl, r0, #1
    9ae2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9ae4:	1c41      	adds	r1, r0, #1
    9ae6:	290a      	cmp	r1, #10
    9ae8:	bf3c      	itt	cc
    9aea:	4450      	addcc	r0, sl
    9aec:	84a0      	strhcc	r0, [r4, #36]	; 0x24
    9aee:	6860      	ldr	r0, [r4, #4]
    9af0:	b128      	cbz	r0, 9afe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ea>
    9af2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    9af4:	1c40      	adds	r0, r0, #1
    9af6:	280a      	cmp	r0, #10
    9af8:	bf28      	it	cs
    9afa:	77a7      	strbcs	r7, [r4, #30]
    9afc:	d201      	bcs.n	9b02 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x9ee>
    9afe:	f884 901e 	strb.w	r9, [r4, #30]
    9b02:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    9b06:	bb40      	cbnz	r0, 9b5a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa46>
    9b08:	7a20      	ldrb	r0, [r4, #8]
    9b0a:	b130      	cbz	r0, 9b1a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa06>
    9b0c:	68e1      	ldr	r1, [r4, #12]
    9b0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9b10:	4288      	cmp	r0, r1
    9b12:	d902      	bls.n	9b1a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa06>
    9b14:	f7fd ffb6 	bl	7a84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9b18:	e01f      	b.n	9b5a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa46>
    9b1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9b1c:	b338      	cbz	r0, 9b6e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa5a>
    9b1e:	f7fd fd79 	bl	7614 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9b22:	4607      	mov	r7, r0
    9b24:	f7fd fd9e 	bl	7664 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    9b28:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    9b2c:	4438      	add	r0, r7
    9b2e:	eb00 090b 	add.w	r9, r0, fp
    9b32:	f005 f86a 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9b36:	4607      	mov	r7, r0
    9b38:	4639      	mov	r1, r7
    9b3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9b3c:	f7f7 fca0 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9b40:	6327      	str	r7, [r4, #48]	; 0x30
    9b42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9b44:	eb00 0209 	add.w	r2, r0, r9
    9b48:	4291      	cmp	r1, r2
    9b4a:	bf24      	itt	cs
    9b4c:	1a08      	subcs	r0, r1, r0
    9b4e:	62e0      	strcs	r0, [r4, #44]	; 0x2c
    9b50:	d20d      	bcs.n	9b6e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa5a>
    9b52:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    9b56:	f7fd ff95 	bl	7a84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9b5a:	7820      	ldrb	r0, [r4, #0]
    9b5c:	f7f8 fad6 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9b60:	7426      	strb	r6, [r4, #16]
    9b62:	7968      	ldrb	r0, [r5, #5]
    9b64:	b003      	add	sp, #12
    9b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b6a:	f7f9 bdff 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9b6e:	f814 0b14 	ldrb.w	r0, [r4], #20
    9b72:	4621      	mov	r1, r4
    9b74:	f7f7 fda2 	bl	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    9b78:	2800      	cmp	r0, #0
    9b7a:	bf1c      	itt	ne
    9b7c:	b003      	addne	sp, #12
    9b7e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b82:	f240 6174 	movw	r1, #1652	; 0x674
    9b86:	2030      	movs	r0, #48	; 0x30
    9b88:	f7f9 fffc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b8c:	f004 fb4e 	bl	e22c <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>
    9b90:	f004 fcc4 	bl	e51c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9b94:	f8cb 7280 	str.w	r7, [fp, #640]	; 0x280
    9b98:	b003      	add	sp, #12
    9b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b9e:	4608      	mov	r0, r1
    9ba0:	f7f8 fab4 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9ba4:	7426      	strb	r6, [r4, #16]
    9ba6:	b003      	add	sp, #12
    9ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bac:	21f3      	movs	r1, #243	; 0xf3
    9bae:	2030      	movs	r0, #48	; 0x30
    9bb0:	f7f9 ffe8 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bb4:	4681      	mov	r9, r0
    9bb6:	f7fc fed1 	bl	695c <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    9bba:	2101      	movs	r1, #1
    9bbc:	f006 fa6f 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9bc0:	0004      	movs	r4, r0
    9bc2:	d009      	beq.n	9bd8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac4>
    9bc4:	4648      	mov	r0, r9
    9bc6:	f7fc fec9 	bl	695c <sym_HEY3ASR5MAPRZMQHCLX76ITJZYOQ2OWWQGFPKUQ>
    9bca:	8821      	ldrh	r1, [r4, #0]
    9bcc:	4288      	cmp	r0, r1
    9bce:	d007      	beq.n	9be0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xacc>
    9bd0:	219b      	movs	r1, #155	; 0x9b
    9bd2:	2030      	movs	r0, #48	; 0x30
    9bd4:	f7f9 ffd6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bd8:	219a      	movs	r1, #154	; 0x9a
    9bda:	2030      	movs	r0, #48	; 0x30
    9bdc:	f7f9 ffd2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9be0:	f04f 0920 	mov.w	r9, #32
    9be4:	616c      	str	r4, [r5, #20]
    9be6:	f1ba 0f08 	cmp.w	sl, #8
    9bea:	f080 810c 	bcs.w	9e06 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcf2>
    9bee:	e8df f00a 	tbb	[pc, sl]
    9bf2:	5506      	.short	0x5506
    9bf4:	ed5a5f5f 	.word	0xed5a5f5f
    9bf8:	ee04      	.short	0xee04
    9bfa:	e7c7      	b.n	9b8c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa78>
    9bfc:	e053      	b.n	9ca6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb92>
    9bfe:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
    9c02:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
    9c06:	f894 1154 	ldrb.w	r1, [r4, #340]	; 0x154
    9c0a:	4620      	mov	r0, r4
    9c0c:	b191      	cbz	r1, 9c34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb20>
    9c0e:	f8b0 2152 	ldrh.w	r2, [r0, #338]	; 0x152
    9c12:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    9c16:	428a      	cmp	r2, r1
    9c18:	d107      	bne.n	9c2a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb16>
    9c1a:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
    9c1e:	1a51      	subs	r1, r2, r1
    9c20:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9c24:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
    9c28:	e00f      	b.n	9c4a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb36>
    9c2a:	1a51      	subs	r1, r2, r1
    9c2c:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9c30:	b291      	uxth	r1, r2
    9c32:	e008      	b.n	9c46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb32>
    9c34:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    9c38:	f8b0 2078 	ldrh.w	r2, [r0, #120]	; 0x78
    9c3c:	1a89      	subs	r1, r1, r2
    9c3e:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    9c42:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
    9c46:	f8a0 1078 	strh.w	r1, [r0, #120]	; 0x78
    9c4a:	f8d0 1164 	ldr.w	r1, [r0, #356]	; 0x164
    9c4e:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    9c52:	f000 f9bd 	bl	9fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    9c56:	f7f7 fd27 	bl	16a8 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    9c5a:	2864      	cmp	r0, #100	; 0x64
    9c5c:	bf98      	it	ls
    9c5e:	2064      	movls	r0, #100	; 0x64
    9c60:	f200 18b9 	addw	r8, r0, #441	; 0x1b9
    9c64:	4620      	mov	r0, r4
    9c66:	f240 221d 	movw	r2, #541	; 0x21d
    9c6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9c6c:	f007 f839 	bl	10ce2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9c70:	4606      	mov	r6, r0
    9c72:	4642      	mov	r2, r8
    9c74:	4620      	mov	r0, r4
    9c76:	6861      	ldr	r1, [r4, #4]
    9c78:	f007 f833 	bl	10ce2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9c7c:	4601      	mov	r1, r0
    9c7e:	60e8      	str	r0, [r5, #12]
    9c80:	428e      	cmp	r6, r1
    9c82:	bf38      	it	cc
    9c84:	4631      	movcc	r1, r6
    9c86:	60a9      	str	r1, [r5, #8]
    9c88:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    9c8c:	38bd      	subs	r0, #189	; 0xbd
    9c8e:	6128      	str	r0, [r5, #16]
    9c90:	f7f8 fc20 	bl	24d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9c94:	70af      	strb	r7, [r5, #2]
    9c96:	b003      	add	sp, #12
    9c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c9c:	b003      	add	sp, #12
    9c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ca2:	f000 bb4b 	b.w	a33c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    9ca6:	b003      	add	sp, #12
    9ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cac:	f004 bc36 	b.w	e51c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9cb0:	f004 ffab 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9cb4:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    9cb8:	4601      	mov	r1, r0
    9cba:	4610      	mov	r0, r2
    9cbc:	f7f7 fbe0 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9cc0:	6861      	ldr	r1, [r4, #4]
    9cc2:	2900      	cmp	r1, #0
    9cc4:	bf14      	ite	ne
    9cc6:	fbb0 f0f1 	udivne	r0, r0, r1
    9cca:	4630      	moveq	r0, r6
    9ccc:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9cd0:	290d      	cmp	r1, #13
    9cd2:	d011      	beq.n	9cf8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe4>
    9cd4:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    9cd8:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
    9cdc:	180b      	adds	r3, r1, r0
    9cde:	1ad3      	subs	r3, r2, r3
    9ce0:	b21b      	sxth	r3, r3
    9ce2:	2b00      	cmp	r3, #0
    9ce4:	bfae      	itee	ge
    9ce6:	1c50      	addge	r0, r2, #1
    9ce8:	1c40      	addlt	r0, r0, #1
    9cea:	4408      	addlt	r0, r1
    9cec:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9cf0:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    9cf4:	b978      	cbnz	r0, 9d16 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc02>
    9cf6:	e005      	b.n	9d04 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbf0>
    9cf8:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9cfc:	1c40      	adds	r0, r0, #1
    9cfe:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9d02:	e008      	b.n	9d16 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc02>
    9d04:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9d08:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
    9d0c:	4288      	cmp	r0, r1
    9d0e:	bf04      	itt	eq
    9d10:	1c40      	addeq	r0, r0, #1
    9d12:	f8a4 0152 	strheq.w	r0, [r4, #338]	; 0x152
    9d16:	f8b4 0172 	ldrh.w	r0, [r4, #370]	; 0x172
    9d1a:	f10d 0a04 	add.w	sl, sp, #4
    9d1e:	1c40      	adds	r0, r0, #1
    9d20:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
    9d24:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
    9d28:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
    9d2c:	1a40      	subs	r0, r0, r1
    9d2e:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    9d32:	1e40      	subs	r0, r0, #1
    9d34:	4408      	add	r0, r1
    9d36:	b287      	uxth	r7, r0
    9d38:	e034      	b.n	9da4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc90>
    9d3a:	2300      	movs	r3, #0
    9d3c:	461a      	mov	r2, r3
    9d3e:	4620      	mov	r0, r4
    9d40:	f8cd a000 	str.w	sl, [sp]
    9d44:	f7ff fb0e 	bl	9364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    9d48:	b130      	cbz	r0, 9d58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc44>
    9d4a:	2801      	cmp	r0, #1
    9d4c:	d023      	beq.n	9d96 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc82>
    9d4e:	f240 6124 	movw	r1, #1572	; 0x624
    9d52:	2030      	movs	r0, #48	; 0x30
    9d54:	f7f9 ff16 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d58:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    9d5a:	2800      	cmp	r0, #0
    9d5c:	bf04      	itt	eq
    9d5e:	b003      	addeq	sp, #12
    9d60:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d64:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9d68:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    9d6c:	1a80      	subs	r0, r0, r2
    9d6e:	b201      	sxth	r1, r0
    9d70:	2900      	cmp	r1, #0
    9d72:	bfdc      	itt	le
    9d74:	b003      	addle	sp, #12
    9d76:	e8bd 8ff0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d7a:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    9d7e:	4401      	add	r1, r0
    9d80:	1e49      	subs	r1, r1, #1
    9d82:	fb91 f1f0 	sdiv	r1, r1, r0
    9d86:	b289      	uxth	r1, r1
    9d88:	fb01 2000 	mla	r0, r1, r0, r2
    9d8c:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    9d90:	b003      	add	sp, #12
    9d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d96:	f8b4 0152 	ldrh.w	r0, [r4, #338]	; 0x152
    9d9a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9d9e:	4408      	add	r0, r1
    9da0:	f8a4 0152 	strh.w	r0, [r4, #338]	; 0x152
    9da4:	f8b4 1152 	ldrh.w	r1, [r4, #338]	; 0x152
    9da8:	1a78      	subs	r0, r7, r1
    9daa:	b200      	sxth	r0, r0
    9dac:	2800      	cmp	r0, #0
    9dae:	dac4      	bge.n	9d3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xc26>
    9db0:	2008      	movs	r0, #8
    9db2:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    9db6:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
    9dba:	4620      	mov	r0, r4
    9dbc:	f007 fafe 	bl	113bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9dc0:	e00d      	b.n	9dde <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcca>
    9dc2:	e004      	b.n	9dce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcba>
    9dc4:	2000157c 	.word	0x2000157c
    9dc8:	20000124 	.word	0x20000124
    9dcc:	e01b      	b.n	9e06 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcf2>
    9dce:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
    9dd2:	2804      	cmp	r0, #4
    9dd4:	d003      	beq.n	9dde <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xcca>
    9dd6:	21bf      	movs	r1, #191	; 0xbf
    9dd8:	2030      	movs	r0, #48	; 0x30
    9dda:	f7f9 fed3 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9dde:	f884 6140 	strb.w	r6, [r4, #320]	; 0x140
    9de2:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9de6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9dea:	f7fc fdc5 	bl	6978 <sym_ODIQTAIRDNRDYKCNA6G2YSI7F2EB2RNBBTF6MBQ>
    9dee:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    9df2:	f7f8 f98b 	bl	210c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9df6:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    9dfa:	7968      	ldrb	r0, [r5, #5]
    9dfc:	b003      	add	sp, #12
    9dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e02:	f7f9 bcb3 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9e06:	21c7      	movs	r1, #199	; 0xc7
    9e08:	2030      	movs	r0, #48	; 0x30
    9e0a:	f7f9 febb 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
	...

00009e10 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    9e10:	b510      	push	{r4, lr}
    9e12:	4604      	mov	r4, r0
    9e14:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    9e18:	6861      	ldr	r1, [r4, #4]
    9e1a:	4288      	cmp	r0, r1
    9e1c:	d109      	bne.n	9e32 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    9e1e:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    9e22:	8922      	ldrh	r2, [r4, #8]
    9e24:	4291      	cmp	r1, r2
    9e26:	d104      	bne.n	9e32 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    9e28:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    9e2c:	8962      	ldrh	r2, [r4, #10]
    9e2e:	4291      	cmp	r1, r2
    9e30:	d015      	beq.n	9e5e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4e>
    9e32:	8821      	ldrh	r1, [r4, #0]
    9e34:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    9e38:	f006 fa7a 	bl	10330 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9e3c:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    9e40:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    9e44:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    9e48:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    9e4c:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    9e50:	2001      	movs	r0, #1
    9e52:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    9e56:	4807      	ldr	r0, [pc, #28]	; (9e74 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
    9e58:	7940      	ldrb	r0, [r0, #5]
    9e5a:	f7f9 fc87 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9e5e:	2102      	movs	r1, #2
    9e60:	4620      	mov	r0, r4
    9e62:	f7fc fc85 	bl	6770 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9e66:	2000      	movs	r0, #0
    9e68:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    9e6c:	2003      	movs	r0, #3
    9e6e:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    9e72:	bd10      	pop	{r4, pc}
    9e74:	20000144 	.word	0x20000144

00009e78 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
    9e78:	4802      	ldr	r0, [pc, #8]	; (9e84 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
    9e7a:	6980      	ldr	r0, [r0, #24]
    9e7c:	2800      	cmp	r0, #0
    9e7e:	bf18      	it	ne
    9e80:	2001      	movne	r0, #1
    9e82:	4770      	bx	lr
    9e84:	20000144 	.word	0x20000144

00009e88 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    9e88:	4806      	ldr	r0, [pc, #24]	; (9ea4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    9e8a:	4905      	ldr	r1, [pc, #20]	; (9ea0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    9e8c:	6501      	str	r1, [r0, #80]	; 0x50
    9e8e:	4906      	ldr	r1, [pc, #24]	; (9ea8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    9e90:	6541      	str	r1, [r0, #84]	; 0x54
    9e92:	4807      	ldr	r0, [pc, #28]	; (9eb0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    9e94:	4905      	ldr	r1, [pc, #20]	; (9eac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    9e96:	6501      	str	r1, [r0, #80]	; 0x50
    9e98:	4906      	ldr	r1, [pc, #24]	; (9eb4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    9e9a:	6541      	str	r1, [r0, #84]	; 0x54
    9e9c:	4770      	bx	lr
    9e9e:	0000      	.short	0x0000
    9ea0:	0000b525 	.word	0x0000b525
    9ea4:	20000164 	.word	0x20000164
    9ea8:	0000b5fd 	.word	0x0000b5fd
    9eac:	0000bdfd 	.word	0x0000bdfd
    9eb0:	200001c8 	.word	0x200001c8
    9eb4:	0000be2d 	.word	0x0000be2d

00009eb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9eb8:	491d      	ldr	r1, [pc, #116]	; (9f30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9eba:	2200      	movs	r2, #0
    9ebc:	618a      	str	r2, [r1, #24]
    9ebe:	61ca      	str	r2, [r1, #28]
    9ec0:	7148      	strb	r0, [r1, #5]
    9ec2:	481d      	ldr	r0, [pc, #116]	; (9f38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9ec4:	491b      	ldr	r1, [pc, #108]	; (9f34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    9ec6:	6081      	str	r1, [r0, #8]
    9ec8:	491c      	ldr	r1, [pc, #112]	; (9f3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9eca:	6041      	str	r1, [r0, #4]
    9ecc:	491c      	ldr	r1, [pc, #112]	; (9f40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    9ece:	6001      	str	r1, [r0, #0]
    9ed0:	491c      	ldr	r1, [pc, #112]	; (9f44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9ed2:	6281      	str	r1, [r0, #40]	; 0x28
    9ed4:	491c      	ldr	r1, [pc, #112]	; (9f48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9ed6:	62c1      	str	r1, [r0, #44]	; 0x2c
    9ed8:	491c      	ldr	r1, [pc, #112]	; (9f4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    9eda:	60c1      	str	r1, [r0, #12]
    9edc:	491c      	ldr	r1, [pc, #112]	; (9f50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    9ede:	6181      	str	r1, [r0, #24]
    9ee0:	491c      	ldr	r1, [pc, #112]	; (9f54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9ee2:	6301      	str	r1, [r0, #48]	; 0x30
    9ee4:	491c      	ldr	r1, [pc, #112]	; (9f58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9ee6:	6201      	str	r1, [r0, #32]
    9ee8:	491c      	ldr	r1, [pc, #112]	; (9f5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    9eea:	64c1      	str	r1, [r0, #76]	; 0x4c
    9eec:	491c      	ldr	r1, [pc, #112]	; (9f60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    9eee:	6481      	str	r1, [r0, #72]	; 0x48
    9ef0:	491c      	ldr	r1, [pc, #112]	; (9f64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9ef2:	6441      	str	r1, [r0, #68]	; 0x44
    9ef4:	491c      	ldr	r1, [pc, #112]	; (9f68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9ef6:	6341      	str	r1, [r0, #52]	; 0x34
    9ef8:	491c      	ldr	r1, [pc, #112]	; (9f6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    9efa:	61c1      	str	r1, [r0, #28]
    9efc:	481d      	ldr	r0, [pc, #116]	; (9f74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    9efe:	491c      	ldr	r1, [pc, #112]	; (9f70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    9f00:	6081      	str	r1, [r0, #8]
    9f02:	491d      	ldr	r1, [pc, #116]	; (9f78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    9f04:	61c1      	str	r1, [r0, #28]
    9f06:	491d      	ldr	r1, [pc, #116]	; (9f7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9f08:	6241      	str	r1, [r0, #36]	; 0x24
    9f0a:	491d      	ldr	r1, [pc, #116]	; (9f80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    9f0c:	62c1      	str	r1, [r0, #44]	; 0x2c
    9f0e:	491d      	ldr	r1, [pc, #116]	; (9f84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    9f10:	6101      	str	r1, [r0, #16]
    9f12:	491d      	ldr	r1, [pc, #116]	; (9f88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    9f14:	6141      	str	r1, [r0, #20]
    9f16:	491d      	ldr	r1, [pc, #116]	; (9f8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    9f18:	6441      	str	r1, [r0, #68]	; 0x44
    9f1a:	6341      	str	r1, [r0, #52]	; 0x34
    9f1c:	491c      	ldr	r1, [pc, #112]	; (9f90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    9f1e:	6181      	str	r1, [r0, #24]
    9f20:	491c      	ldr	r1, [pc, #112]	; (9f94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    9f22:	6301      	str	r1, [r0, #48]	; 0x30
    9f24:	491c      	ldr	r1, [pc, #112]	; (9f98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    9f26:	6481      	str	r1, [r0, #72]	; 0x48
    9f28:	491c      	ldr	r1, [pc, #112]	; (9f9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    9f2a:	64c1      	str	r1, [r0, #76]	; 0x4c
    9f2c:	4770      	bx	lr
    9f2e:	0000      	.short	0x0000
    9f30:	20000144 	.word	0x20000144
    9f34:	0000bb49 	.word	0x0000bb49
    9f38:	20000164 	.word	0x20000164
    9f3c:	0000b2b1 	.word	0x0000b2b1
    9f40:	0000b315 	.word	0x0000b315
    9f44:	0000b6f1 	.word	0x0000b6f1
    9f48:	0000b741 	.word	0x0000b741
    9f4c:	0000b3d1 	.word	0x0000b3d1
    9f50:	0000bb0d 	.word	0x0000bb0d
    9f54:	0000bcb9 	.word	0x0000bcb9
    9f58:	0000b47d 	.word	0x0000b47d
    9f5c:	0000b6c1 	.word	0x0000b6c1
    9f60:	0000b68d 	.word	0x0000b68d
    9f64:	0000ba55 	.word	0x0000ba55
    9f68:	0000babd 	.word	0x0000babd
    9f6c:	0000bb81 	.word	0x0000bb81
    9f70:	0000c019 	.word	0x0000c019
    9f74:	200001c8 	.word	0x200001c8
    9f78:	0000c041 	.word	0x0000c041
    9f7c:	0000bdb9 	.word	0x0000bdb9
    9f80:	0000bed5 	.word	0x0000bed5
    9f84:	0000bd8d 	.word	0x0000bd8d
    9f88:	0000bf7d 	.word	0x0000bf7d
    9f8c:	0000bf59 	.word	0x0000bf59
    9f90:	0000bfa1 	.word	0x0000bfa1
    9f94:	0000c0b5 	.word	0x0000c0b5
    9f98:	0000be71 	.word	0x0000be71
    9f9c:	0000bea1 	.word	0x0000bea1

00009fa0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    9fa0:	4806      	ldr	r0, [pc, #24]	; (9fbc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    9fa2:	4905      	ldr	r1, [pc, #20]	; (9fb8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9fa4:	6581      	str	r1, [r0, #88]	; 0x58
    9fa6:	4906      	ldr	r1, [pc, #24]	; (9fc0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9fa8:	6601      	str	r1, [r0, #96]	; 0x60
    9faa:	4807      	ldr	r0, [pc, #28]	; (9fc8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    9fac:	4905      	ldr	r1, [pc, #20]	; (9fc4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    9fae:	6581      	str	r1, [r0, #88]	; 0x58
    9fb0:	4906      	ldr	r1, [pc, #24]	; (9fcc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    9fb2:	65c1      	str	r1, [r0, #92]	; 0x5c
    9fb4:	4770      	bx	lr
    9fb6:	0000      	.short	0x0000
    9fb8:	0000b761 	.word	0x0000b761
    9fbc:	20000164 	.word	0x20000164
    9fc0:	0000b841 	.word	0x0000b841
    9fc4:	0000bf01 	.word	0x0000bf01
    9fc8:	200001c8 	.word	0x200001c8
    9fcc:	0000bf31 	.word	0x0000bf31

00009fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    9fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fd4:	2701      	movs	r7, #1
    9fd6:	4cd1      	ldr	r4, [pc, #836]	; (a31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x34c>)
    9fd8:	2500      	movs	r5, #0
    9fda:	f367 0907 	bfi	r9, r7, #0, #8
    9fde:	80e5      	strh	r5, [r4, #6]
    9fe0:	70e5      	strb	r5, [r4, #3]
    9fe2:	7125      	strb	r5, [r4, #4]
    9fe4:	7025      	strb	r5, [r4, #0]
    9fe6:	60e0      	str	r0, [r4, #12]
    9fe8:	4606      	mov	r6, r0
    9fea:	f880 710e 	strb.w	r7, [r0, #270]	; 0x10e
    9fee:	8800      	ldrh	r0, [r0, #0]
    9ff0:	f7fa f9b8 	bl	4364 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9ff4:	ea5f 0a00 	movs.w	sl, r0
    9ff8:	d010      	beq.n	a01c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c>
    9ffa:	68e0      	ldr	r0, [r4, #12]
    9ffc:	8800      	ldrh	r0, [r0, #0]
    9ffe:	f7fa ff17 	bl	4e30 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    a002:	68e0      	ldr	r0, [r4, #12]
    a004:	8800      	ldrh	r0, [r0, #0]
    a006:	f7fa feb9 	bl	4d7c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    a00a:	68e0      	ldr	r0, [r4, #12]
    a00c:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    a010:	b1a1      	cbz	r1, a03c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c>
    a012:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    a016:	29fe      	cmp	r1, #254	; 0xfe
    a018:	d005      	beq.n	a026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x56>
    a01a:	e014      	b.n	a046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x76>
    a01c:	f640 319e 	movw	r1, #2974	; 0xb9e
    a020:	2031      	movs	r0, #49	; 0x31
    a022:	f7f9 fdaf 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a026:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    a02a:	b189      	cbz	r1, a050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    a02c:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a030:	2301      	movs	r3, #1
    a032:	4619      	mov	r1, r3
    a034:	3078      	adds	r0, #120	; 0x78
    a036:	f006 f9a2 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a03a:	b188      	cbz	r0, a060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    a03c:	68e0      	ldr	r0, [r4, #12]
    a03e:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    a042:	28fe      	cmp	r0, #254	; 0xfe
    a044:	d004      	beq.n	a050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    a046:	68e0      	ldr	r0, [r4, #12]
    a048:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
    a04c:	f000 fbcc 	bl	a7e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ac>
    a050:	68e0      	ldr	r0, [r4, #12]
    a052:	f890 110f 	ldrb.w	r1, [r0, #271]	; 0x10f
    a056:	2900      	cmp	r1, #0
    a058:	bf18      	it	ne
    a05a:	8125      	strhne	r5, [r4, #8]
    a05c:	d11b      	bne.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    a05e:	e00f      	b.n	a080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    a060:	68e0      	ldr	r0, [r4, #12]
    a062:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    a066:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    a06a:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a06e:	2100      	movs	r1, #0
    a070:	2002      	movs	r0, #2
    a072:	f001 f879 	bl	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a076:	68e0      	ldr	r0, [r4, #12]
    a078:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
    a07c:	2002      	movs	r0, #2
    a07e:	e7e5      	b.n	a04c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    a080:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    a084:	b929      	cbnz	r1, a092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2>
    a086:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    a088:	8902      	ldrh	r2, [r0, #8]
    a08a:	4291      	cmp	r1, r2
    a08c:	bf88      	it	hi
    a08e:	8121      	strhhi	r1, [r4, #8]
    a090:	d801      	bhi.n	a096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    a092:	8901      	ldrh	r1, [r0, #8]
    a094:	8121      	strh	r1, [r4, #8]
    a096:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    a09a:	1e49      	subs	r1, r1, #1
    a09c:	fa1f f881 	uxth.w	r8, r1
    a0a0:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    a0a4:	4441      	add	r1, r8
    a0a6:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    a0aa:	f890 110c 	ldrb.w	r1, [r0, #268]	; 0x10c
    a0ae:	2900      	cmp	r1, #0
    a0b0:	bf1c      	itt	ne
    a0b2:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    a0b6:	f880 510c 	strbne.w	r5, [r0, #268]	; 0x10c
    a0ba:	d104      	bne.n	a0c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6>
    a0bc:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    a0c0:	4441      	add	r1, r8
    a0c2:	f8a0 110a 	strh.w	r1, [r0, #266]	; 0x10a
    a0c6:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    a0ca:	4441      	add	r1, r8
    a0cc:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    a0d0:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a0d4:	b939      	cbnz	r1, a0e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x116>
    a0d6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0da:	2301      	movs	r3, #1
    a0dc:	2106      	movs	r1, #6
    a0de:	3078      	adds	r0, #120	; 0x78
    a0e0:	f006 f94d 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0e4:	b128      	cbz	r0, a0f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122>
    a0e6:	68e0      	ldr	r0, [r4, #12]
    a0e8:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    a0ec:	4441      	add	r1, r8
    a0ee:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    a0f2:	68e0      	ldr	r0, [r4, #12]
    a0f4:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
    a0f8:	2901      	cmp	r1, #1
    a0fa:	bf9c      	itt	ls
    a0fc:	1c49      	addls	r1, r1, #1
    a0fe:	f8a0 1102 	strhls.w	r1, [r0, #258]	; 0x102
    a102:	f1b8 0f00 	cmp.w	r8, #0
    a106:	bf18      	it	ne
    a108:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    a10c:	4650      	mov	r0, sl
    a10e:	f005 fc41 	bl	f994 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    a112:	4680      	mov	r8, r0
    a114:	68e0      	ldr	r0, [r4, #12]
    a116:	f890 110d 	ldrb.w	r1, [r0, #269]	; 0x10d
    a11a:	b199      	cbz	r1, a144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    a11c:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    a120:	8922      	ldrh	r2, [r4, #8]
    a122:	4291      	cmp	r1, r2
    a124:	d20e      	bcs.n	a144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    a126:	f1b8 0f00 	cmp.w	r8, #0
    a12a:	bf1c      	itt	ne
    a12c:	f890 1181 	ldrbne.w	r1, [r0, #385]	; 0x181
    a130:	2900      	cmpne	r1, #0
    a132:	d007      	beq.n	a144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174>
    a134:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    a138:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
    a13c:	4281      	cmp	r1, r0
    a13e:	bf28      	it	cs
    a140:	f7fa ff16 	blcs	4f70 <sym_ZULXSERCAZOVB2ZZ7BC6764V73TJQV72ZPWILSQ>
    a144:	68e2      	ldr	r2, [r4, #12]
    a146:	f882 510d 	strb.w	r5, [r2, #269]	; 0x10d
    a14a:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a14e:	280b      	cmp	r0, #11
    a150:	bf18      	it	ne
    a152:	280c      	cmpne	r0, #12
    a154:	d118      	bne.n	a188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    a156:	f8b2 1078 	ldrh.w	r1, [r2, #120]	; 0x78
    a15a:	f8b2 31a4 	ldrh.w	r3, [r2, #420]	; 0x1a4
    a15e:	eba1 0103 	sub.w	r1, r1, r3
    a162:	b209      	sxth	r1, r1
    a164:	2900      	cmp	r1, #0
    a166:	db0f      	blt.n	a188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8>
    a168:	f502 71d3 	add.w	r1, r2, #422	; 0x1a6
    a16c:	f102 000c 	add.w	r0, r2, #12
    a170:	f008 f950 	bl	12414 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    a174:	2103      	movs	r1, #3
    a176:	68e0      	ldr	r0, [r4, #12]
    a178:	f7fc fafa 	bl	6770 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a17c:	68e0      	ldr	r0, [r4, #12]
    a17e:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a182:	f880 70c0 	strb.w	r7, [r0, #192]	; 0xc0
    a186:	e093      	b.n	a2b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    a188:	2824      	cmp	r0, #36	; 0x24
    a18a:	d146      	bne.n	a21a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    a18c:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    a190:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    a194:	1a40      	subs	r0, r0, r1
    a196:	b200      	sxth	r0, r0
    a198:	2800      	cmp	r0, #0
    a19a:	db3e      	blt.n	a21a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24a>
    a19c:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    a1a0:	2800      	cmp	r0, #0
    a1a2:	bf14      	ite	ne
    a1a4:	f04f 0a01 	movne.w	sl, #1
    a1a8:	f04f 0a00 	moveq.w	sl, #0
    a1ac:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    a1b0:	2900      	cmp	r1, #0
    a1b2:	bf14      	ite	ne
    a1b4:	f04f 0c01 	movne.w	ip, #1
    a1b8:	f04f 0c00 	moveq.w	ip, #0
    a1bc:	f1ba 0f00 	cmp.w	sl, #0
    a1c0:	bf08      	it	eq
    a1c2:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    a1c6:	f1bc 0f00 	cmp.w	ip, #0
    a1ca:	bf08      	it	eq
    a1cc:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    a1d0:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    a1d4:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    a1d8:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    a1dc:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    a1e0:	2801      	cmp	r0, #1
    a1e2:	d005      	beq.n	a1f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    a1e4:	f1ba 0f00 	cmp.w	sl, #0
    a1e8:	bf08      	it	eq
    a1ea:	f1bc 0f00 	cmpeq.w	ip, #0
    a1ee:	d003      	beq.n	a1f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    a1f0:	f04f 0000 	mov.w	r0, #0
    a1f4:	f001 f82e 	bl	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    a1f8:	68e0      	ldr	r0, [r4, #12]
    a1fa:	f006 fdb9 	bl	10d70 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a1fe:	b130      	cbz	r0, a20e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    a200:	68e1      	ldr	r1, [r4, #12]
    a202:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a206:	8808      	ldrh	r0, [r1, #0]
    a208:	3128      	adds	r1, #40	; 0x28
    a20a:	f006 fd34 	bl	10c76 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a20e:	68e0      	ldr	r0, [r4, #12]
    a210:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a214:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    a218:	e04a      	b.n	a2b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    a21a:	f892 0084 	ldrb.w	r0, [r2, #132]	; 0x84
    a21e:	2824      	cmp	r0, #36	; 0x24
    a220:	bf18      	it	ne
    a222:	2825      	cmpne	r0, #37	; 0x25
    a224:	d144      	bne.n	a2b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    a226:	f8b2 0078 	ldrh.w	r0, [r2, #120]	; 0x78
    a22a:	f8b2 11a4 	ldrh.w	r1, [r2, #420]	; 0x1a4
    a22e:	eba0 0001 	sub.w	r0, r0, r1
    a232:	b200      	sxth	r0, r0
    a234:	2800      	cmp	r0, #0
    a236:	db3b      	blt.n	a2b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2e0>
    a238:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    a23c:	2800      	cmp	r0, #0
    a23e:	bf14      	ite	ne
    a240:	f04f 0a01 	movne.w	sl, #1
    a244:	f04f 0a00 	moveq.w	sl, #0
    a248:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    a24c:	2900      	cmp	r1, #0
    a24e:	bf14      	ite	ne
    a250:	f04f 0c01 	movne.w	ip, #1
    a254:	f04f 0c00 	moveq.w	ip, #0
    a258:	f1ba 0f00 	cmp.w	sl, #0
    a25c:	bf08      	it	eq
    a25e:	f892 0066 	ldrbeq.w	r0, [r2, #102]	; 0x66
    a262:	f1bc 0f00 	cmp.w	ip, #0
    a266:	bf08      	it	eq
    a268:	f892 1067 	ldrbeq.w	r1, [r2, #103]	; 0x67
    a26c:	f882 0066 	strb.w	r0, [r2, #102]	; 0x66
    a270:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    a274:	f882 7068 	strb.w	r7, [r2, #104]	; 0x68
    a278:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    a27c:	2801      	cmp	r0, #1
    a27e:	d005      	beq.n	a28c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    a280:	f1ba 0f00 	cmp.w	sl, #0
    a284:	bf08      	it	eq
    a286:	f1bc 0f00 	cmpeq.w	ip, #0
    a28a:	d003      	beq.n	a294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    a28c:	f04f 0000 	mov.w	r0, #0
    a290:	f000 ffe0 	bl	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    a294:	68e0      	ldr	r0, [r4, #12]
    a296:	f006 fd6b 	bl	10d70 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a29a:	b130      	cbz	r0, a2aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2da>
    a29c:	68e1      	ldr	r1, [r4, #12]
    a29e:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a2a2:	8808      	ldrh	r0, [r1, #0]
    a2a4:	3128      	adds	r1, #40	; 0x28
    a2a6:	f006 fce6 	bl	10c76 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a2aa:	68e0      	ldr	r0, [r4, #12]
    a2ac:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    a2b0:	68e1      	ldr	r1, [r4, #12]
    a2b2:	f101 0078 	add.w	r0, r1, #120	; 0x78
    a2b6:	f8b1 2106 	ldrh.w	r2, [r1, #262]	; 0x106
    a2ba:	f7fc f969 	bl	6590 <sym_LC3ZEWHKON2ISXS533OVI5553RH2RKHRICHPDVA>
    a2be:	68e0      	ldr	r0, [r4, #12]
    a2c0:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
    a2c4:	2900      	cmp	r1, #0
    a2c6:	bf18      	it	ne
    a2c8:	f8a0 510a 	strhne.w	r5, [r0, #266]	; 0x10a
    a2cc:	f1b8 0f00 	cmp.w	r8, #0
    a2d0:	bf17      	itett	ne
    a2d2:	f890 0110 	ldrbne.w	r0, [r0, #272]	; 0x110
    a2d6:	f880 5110 	strbeq.w	r5, [r0, #272]	; 0x110
    a2da:	2800      	cmpne	r0, #0
    a2dc:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2e0:	480f      	ldr	r0, [pc, #60]	; (a320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x350>)
    a2e2:	9000      	str	r0, [sp, #0]
    a2e4:	4b0f      	ldr	r3, [pc, #60]	; (a324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x354>)
    a2e6:	4a10      	ldr	r2, [pc, #64]	; (a328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>)
    a2e8:	4631      	mov	r1, r6
    a2ea:	4648      	mov	r0, r9
    a2ec:	f7fa fe9a 	bl	5024 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    a2f0:	69e1      	ldr	r1, [r4, #28]
    a2f2:	2900      	cmp	r1, #0
    a2f4:	bf1c      	itt	ne
    a2f6:	7860      	ldrbne	r0, [r4, #1]
    a2f8:	f003 fa0c 	blne	d714 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
    a2fc:	68e0      	ldr	r0, [r4, #12]
    a2fe:	2301      	movs	r3, #1
    a300:	2105      	movs	r1, #5
    a302:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a306:	3078      	adds	r0, #120	; 0x78
    a308:	f006 f839 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a30c:	2800      	cmp	r0, #0
    a30e:	bf08      	it	eq
    a310:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a314:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a318:	f7fa be7e 	b.w	5018 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    a31c:	20000144 	.word	0x20000144
    a320:	0000a9ad 	.word	0x0000a9ad
    a324:	0000a359 	.word	0x0000a359
    a328:	0000b1a1 	.word	0x0000b1a1

0000a32c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    a32c:	4802      	ldr	r0, [pc, #8]	; (a338 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
    a32e:	2100      	movs	r1, #0
    a330:	6181      	str	r1, [r0, #24]
    a332:	61c1      	str	r1, [r0, #28]
    a334:	4608      	mov	r0, r1
    a336:	4770      	bx	lr
    a338:	20000144 	.word	0x20000144

0000a33c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    a33c:	4805      	ldr	r0, [pc, #20]	; (a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
    a33e:	68c0      	ldr	r0, [r0, #12]
    a340:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    a344:	b118      	cbz	r0, a34e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
    a346:	2100      	movs	r1, #0
    a348:	4608      	mov	r0, r1
    a34a:	f000 bb2f 	b.w	a9ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x670>
    a34e:	f7fb b81f 	b.w	5390 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    a352:	0000      	.short	0x0000
    a354:	20000144 	.word	0x20000144
    a358:	490d      	ldr	r1, [pc, #52]	; (a390 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x54>)
    a35a:	4602      	mov	r2, r0
    a35c:	78c8      	ldrb	r0, [r1, #3]
    a35e:	790b      	ldrb	r3, [r1, #4]
    a360:	4318      	orrs	r0, r3
    a362:	d113      	bne.n	a38c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a364:	4608      	mov	r0, r1
    a366:	68c0      	ldr	r0, [r0, #12]
    a368:	b14a      	cbz	r2, a37e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42>
    a36a:	7989      	ldrb	r1, [r1, #6]
    a36c:	f011 0f08 	tst.w	r1, #8
    a370:	d003      	beq.n	a37a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3e>
    a372:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a376:	2808      	cmp	r0, #8
    a378:	d008      	beq.n	a38c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a37a:	2001      	movs	r0, #1
    a37c:	4770      	bx	lr
    a37e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    a382:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    a384:	428a      	cmp	r2, r1
    a386:	d801      	bhi.n	a38c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50>
    a388:	f7fe be98 	b.w	90bc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    a38c:	2000      	movs	r0, #0
    a38e:	4770      	bx	lr
    a390:	20000144 	.word	0x20000144
    a394:	b570      	push	{r4, r5, r6, lr}
    a396:	4cf8      	ldr	r4, [pc, #992]	; (a778 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x43c>)
    a398:	68e0      	ldr	r0, [r4, #12]
    a39a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    a39e:	29fe      	cmp	r1, #254	; 0xfe
    a3a0:	bf06      	itte	eq
    a3a2:	78e1      	ldrbeq	r1, [r4, #3]
    a3a4:	2900      	cmpeq	r1, #0
    a3a6:	bd70      	popne	{r4, r5, r6, pc}
    a3a8:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    a3ac:	f04f 0301 	mov.w	r3, #1
    a3b0:	4619      	mov	r1, r3
    a3b2:	f100 0078 	add.w	r0, r0, #120	; 0x78
    a3b6:	f005 ffe2 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3ba:	2800      	cmp	r0, #0
    a3bc:	bf18      	it	ne
    a3be:	bd70      	popne	{r4, r5, r6, pc}
    a3c0:	68e0      	ldr	r0, [r4, #12]
    a3c2:	2500      	movs	r5, #0
    a3c4:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    a3c8:	b159      	cbz	r1, a3e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6>
    a3ca:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    a3ce:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    a3d2:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a3d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a3da:	2100      	movs	r1, #0
    a3dc:	2002      	movs	r0, #2
    a3de:	f000 bec3 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a3e2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a3e6:	2301      	movs	r3, #1
    a3e8:	2104      	movs	r1, #4
    a3ea:	3078      	adds	r0, #120	; 0x78
    a3ec:	f005 ffc7 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3f0:	0006      	movs	r6, r0
    a3f2:	68e0      	ldr	r0, [r4, #12]
    a3f4:	d00b      	beq.n	a40e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd2>
    a3f6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a3fa:	2910      	cmp	r1, #16
    a3fc:	d07d      	beq.n	a4fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be>
    a3fe:	2914      	cmp	r1, #20
    a400:	d07c      	beq.n	a4fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0>
    a402:	2915      	cmp	r1, #21
    a404:	d07b      	beq.n	a4fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c2>
    a406:	291b      	cmp	r1, #27
    a408:	d07a      	beq.n	a500 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c4>
    a40a:	f000 b8f1 	b.w	a5f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b4>
    a40e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a412:	f011 0f01 	tst.w	r1, #1
    a416:	d005      	beq.n	a424 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe8>
    a418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a41c:	2101      	movs	r1, #1
    a41e:	2009      	movs	r0, #9
    a420:	f000 bea2 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a424:	f011 0f02 	tst.w	r1, #2
    a428:	d00b      	beq.n	a442 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x106>
    a42a:	2101      	movs	r1, #1
    a42c:	200c      	movs	r0, #12
    a42e:	f000 fe9b 	bl	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a432:	68e0      	ldr	r0, [r4, #12]
    a434:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a438:	f041 0101 	orr.w	r1, r1, #1
    a43c:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a440:	bd70      	pop	{r4, r5, r6, pc}
    a442:	f011 0f04 	tst.w	r1, #4
    a446:	d005      	beq.n	a454 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x118>
    a448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a44c:	2101      	movs	r1, #1
    a44e:	2013      	movs	r0, #19
    a450:	f000 be8a 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a454:	f011 0f08 	tst.w	r1, #8
    a458:	d009      	beq.n	a46e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x132>
    a45a:	f890 10f1 	ldrb.w	r1, [r0, #241]	; 0xf1
    a45e:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a466:	2101      	movs	r1, #1
    a468:	2007      	movs	r0, #7
    a46a:	f000 be7d 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a46e:	f011 0f30 	tst.w	r1, #48	; 0x30
    a472:	d07d      	beq.n	a570 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    a474:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a478:	2900      	cmp	r1, #0
    a47a:	d179      	bne.n	a570 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    a47c:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a480:	b1c9      	cbz	r1, a4b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a>
    a482:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a486:	2924      	cmp	r1, #36	; 0x24
    a488:	bf1b      	ittet	ne
    a48a:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    a48e:	2924      	cmpne	r1, #36	; 0x24
    a490:	2301      	moveq	r3, #1
    a492:	2300      	movne	r3, #0
    a494:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    a498:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    a49c:	f006 fc13 	bl	10cc6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a4a0:	68e0      	ldr	r0, [r4, #12]
    a4a2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a4a6:	f021 0120 	bic.w	r1, r1, #32
    a4aa:	f041 0110 	orr.w	r1, r1, #16
    a4ae:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a4b2:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a4b6:	68e0      	ldr	r0, [r4, #12]
    a4b8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a4bc:	f011 0f10 	tst.w	r1, #16
    a4c0:	d056      	beq.n	a570 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x234>
    a4c2:	f006 fc55 	bl	10d70 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a4c6:	68e1      	ldr	r1, [r4, #12]
    a4c8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    a4cc:	2801      	cmp	r0, #1
    a4ce:	bf04      	itt	eq
    a4d0:	2002      	moveq	r0, #2
    a4d2:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    a4d6:	d008      	beq.n	a4ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ae>
    a4d8:	8808      	ldrh	r0, [r1, #0]
    a4da:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    a4de:	3128      	adds	r1, #40	; 0x28
    a4e0:	f006 fbc9 	bl	10c76 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a4e4:	7960      	ldrb	r0, [r4, #5]
    a4e6:	f7f9 f941 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a4ea:	68e0      	ldr	r0, [r4, #12]
    a4ec:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a4f0:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a4f4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a4f8:	e003      	b.n	a502 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c6>
    a4fa:	e00a      	b.n	a512 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6>
    a4fc:	e00f      	b.n	a51e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e2>
    a4fe:	e02b      	b.n	a558 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x21c>
    a500:	e060      	b.n	a5c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x288>
    a502:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a50a:	2101      	movs	r1, #1
    a50c:	2015      	movs	r0, #21
    a50e:	f000 be2b 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a516:	2101      	movs	r1, #1
    a518:	200b      	movs	r0, #11
    a51a:	f000 be25 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a51e:	f7fa fb81 	bl	4c24 <sym_Z532D623Y7HDGW5WU344Z73EWIA3AYTZGWVFKIY>
    a522:	280c      	cmp	r0, #12
    a524:	bf38      	it	cc
    a526:	bd70      	popcc	{r4, r5, r6, pc}
    a528:	2108      	movs	r1, #8
    a52a:	68e0      	ldr	r0, [r4, #12]
    a52c:	f500 7092 	add.w	r0, r0, #292	; 0x124
    a530:	f7fa fb7e 	bl	4c30 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a534:	b158      	cbz	r0, a54e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212>
    a536:	68e0      	ldr	r0, [r4, #12]
    a538:	2104      	movs	r1, #4
    a53a:	30ec      	adds	r0, #236	; 0xec
    a53c:	f7fa fb78 	bl	4c30 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
    a540:	b128      	cbz	r0, a54e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x212>
    a542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a546:	2101      	movs	r1, #1
    a548:	2004      	movs	r0, #4
    a54a:	f000 be0d 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a54e:	f240 719c 	movw	r1, #1948	; 0x79c
    a552:	2031      	movs	r0, #49	; 0x31
    a554:	f7f9 fb16 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a558:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    a55c:	2901      	cmp	r1, #1
    a55e:	d00d      	beq.n	a57c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x240>
    a560:	2902      	cmp	r1, #2
    a562:	bf18      	it	ne
    a564:	bd70      	popne	{r4, r5, r6, pc}
    a566:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a56a:	b1e9      	cbz	r1, a5a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
    a56c:	2106      	movs	r1, #6
    a56e:	e000      	b.n	a572 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x236>
    a570:	e02e      	b.n	a5d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x294>
    a572:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a576:	2101      	movs	r1, #1
    a578:	2002      	movs	r0, #2
    a57a:	e01d      	b.n	a5b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x27c>
    a57c:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    a580:	2900      	cmp	r1, #0
    a582:	bf18      	it	ne
    a584:	bd70      	popne	{r4, r5, r6, pc}
    a586:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    a58a:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    a58e:	2200      	movs	r2, #0
    a590:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    a594:	f7fb ffba 	bl	650c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a598:	2101      	movs	r1, #1
    a59a:	2005      	movs	r0, #5
    a59c:	f000 fde4 	bl	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a5a0:	68e0      	ldr	r0, [r4, #12]
    a5a2:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a5a6:	bd70      	pop	{r4, r5, r6, pc}
    a5a8:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a5ac:	f010 0f04 	tst.w	r0, #4
    a5b0:	bf14      	ite	ne
    a5b2:	2011      	movne	r0, #17
    a5b4:	200d      	moveq	r0, #13
    a5b6:	2101      	movs	r1, #1
    a5b8:	f000 fdd6 	bl	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a5bc:	68e0      	ldr	r0, [r4, #12]
    a5be:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    a5c2:	bd70      	pop	{r4, r5, r6, pc}
    a5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a5c8:	2101      	movs	r1, #1
    a5ca:	2006      	movs	r0, #6
    a5cc:	f000 bdcc 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a5d0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a5d4:	2921      	cmp	r1, #33	; 0x21
    a5d6:	d10b      	bne.n	a5f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2b4>
    a5d8:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a5dc:	2902      	cmp	r1, #2
    a5de:	d01d      	beq.n	a61c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2e0>
    a5e0:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a5e4:	2901      	cmp	r1, #1
    a5e6:	bf04      	itt	eq
    a5e8:	f890 01bf 	ldrbeq.w	r0, [r0, #447]	; 0x1bf
    a5ec:	2800      	cmpeq	r0, #0
    a5ee:	d015      	beq.n	a61c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2e0>
    a5f0:	68e0      	ldr	r0, [r4, #12]
    a5f2:	f04f 0301 	mov.w	r3, #1
    a5f6:	f04f 0100 	mov.w	r1, #0
    a5fa:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a5fe:	f100 0078 	add.w	r0, r0, #120	; 0x78
    a602:	f005 febc 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a606:	b1c8      	cbz	r0, a63c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a608:	68e0      	ldr	r0, [r4, #12]
    a60a:	2301      	movs	r3, #1
    a60c:	2104      	movs	r1, #4
    a60e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a612:	3078      	adds	r0, #120	; 0x78
    a614:	f005 feb3 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a618:	b130      	cbz	r0, a628 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2ec>
    a61a:	e00f      	b.n	a63c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a61c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a620:	2101      	movs	r1, #1
    a622:	2017      	movs	r0, #23
    a624:	f000 bda0 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a628:	68e0      	ldr	r0, [r4, #12]
    a62a:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
    a62e:	b128      	cbz	r0, a63c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x300>
    a630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a634:	2100      	movs	r1, #0
    a636:	2012      	movs	r0, #18
    a638:	f000 bd96 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a63c:	68e0      	ldr	r0, [r4, #12]
    a63e:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a642:	2a0a      	cmp	r2, #10
    a644:	d015      	beq.n	a672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x336>
    a646:	2e00      	cmp	r6, #0
    a648:	bf18      	it	ne
    a64a:	bd70      	popne	{r4, r5, r6, pc}
    a64c:	2301      	movs	r3, #1
    a64e:	2100      	movs	r1, #0
    a650:	3078      	adds	r0, #120	; 0x78
    a652:	f005 fe94 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a656:	2800      	cmp	r0, #0
    a658:	d07e      	beq.n	a758 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a65a:	68e0      	ldr	r0, [r4, #12]
    a65c:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    a660:	b189      	cbz	r1, a686 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x34a>
    a662:	2100      	movs	r1, #0
    a664:	200e      	movs	r0, #14
    a666:	f000 fd7f 	bl	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a66a:	68e0      	ldr	r0, [r4, #12]
    a66c:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    a670:	bd70      	pop	{r4, r5, r6, pc}
    a672:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    a676:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    a67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a67e:	2100      	movs	r1, #0
    a680:	2007      	movs	r0, #7
    a682:	f000 bd71 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a686:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a68a:	b121      	cbz	r1, a696 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x35a>
    a68c:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a690:	f011 0f03 	tst.w	r1, #3
    a694:	d00e      	beq.n	a6b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x378>
    a696:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a69a:	b111      	cbz	r1, a6a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x366>
    a69c:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a6a0:	b1c1      	cbz	r1, a6d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x398>
    a6a2:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a6a6:	2901      	cmp	r1, #1
    a6a8:	bf04      	itt	eq
    a6aa:	f890 11bf 	ldrbeq.w	r1, [r0, #447]	; 0x1bf
    a6ae:	2900      	cmpeq	r1, #0
    a6b0:	d17c      	bne.n	a7ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a6b2:	e02f      	b.n	a714 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3d8>
    a6b4:	f04f 0100 	mov.w	r1, #0
    a6b8:	f04f 000c 	mov.w	r0, #12
    a6bc:	f000 fd54 	bl	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a6c0:	68e0      	ldr	r0, [r4, #12]
    a6c2:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a6c6:	f041 0101 	orr.w	r1, r1, #1
    a6ca:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a6ce:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    a6d2:	bd70      	pop	{r4, r5, r6, pc}
    a6d4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a6d8:	2924      	cmp	r1, #36	; 0x24
    a6da:	bf1d      	ittte	ne
    a6dc:	f890 1084 	ldrbne.w	r1, [r0, #132]	; 0x84
    a6e0:	2924      	cmpne	r1, #36	; 0x24
    a6e2:	2300      	movne	r3, #0
    a6e4:	2301      	moveq	r3, #1
    a6e6:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    a6ea:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    a6ee:	f006 faea 	bl	10cc6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a6f2:	68e0      	ldr	r0, [r4, #12]
    a6f4:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a6f8:	2100      	movs	r1, #0
    a6fa:	2014      	movs	r0, #20
    a6fc:	f000 fd34 	bl	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a700:	68e0      	ldr	r0, [r4, #12]
    a702:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    a706:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    a70a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    a70e:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a712:	bd70      	pop	{r4, r5, r6, pc}
    a714:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a718:	2301      	movs	r3, #1
    a71a:	210b      	movs	r1, #11
    a71c:	3078      	adds	r0, #120	; 0x78
    a71e:	f005 fe2e 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a722:	b9c8      	cbnz	r0, a758 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41c>
    a724:	68e0      	ldr	r0, [r4, #12]
    a726:	f890 1066 	ldrb.w	r1, [r0, #102]	; 0x66
    a72a:	2901      	cmp	r1, #1
    a72c:	bf18      	it	ne
    a72e:	2902      	cmpne	r1, #2
    a730:	d006      	beq.n	a740 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x404>
    a732:	bf00      	nop
    a734:	f240 218f 	movw	r1, #655	; 0x28f
    a738:	f04f 0006 	mov.w	r0, #6
    a73c:	f7f9 fa22 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a740:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    a744:	2a01      	cmp	r2, #1
    a746:	bf18      	it	ne
    a748:	2a02      	cmpne	r2, #2
    a74a:	d1f3      	bne.n	a734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3f8>
    a74c:	f890 31c0 	ldrb.w	r3, [r0, #448]	; 0x1c0
    a750:	2901      	cmp	r1, #1
    a752:	d006      	beq.n	a762 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x426>
    a754:	2902      	cmp	r1, #2
    a756:	e000      	b.n	a75a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x41e>
    a758:	e028      	b.n	a7ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a75a:	bf08      	it	eq
    a75c:	2b02      	cmpeq	r3, #2
    a75e:	d002      	beq.n	a766 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x42a>
    a760:	e00e      	b.n	a780 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a762:	2b01      	cmp	r3, #1
    a764:	d10c      	bne.n	a780 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a766:	f890 11c1 	ldrb.w	r1, [r0, #449]	; 0x1c1
    a76a:	2a01      	cmp	r2, #1
    a76c:	d006      	beq.n	a77c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x440>
    a76e:	2a02      	cmp	r2, #2
    a770:	bf08      	it	eq
    a772:	2902      	cmpeq	r1, #2
    a774:	d00d      	beq.n	a792 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a776:	e003      	b.n	a780 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x444>
    a778:	20000144 	.word	0x20000144
    a77c:	2901      	cmp	r1, #1
    a77e:	d008      	beq.n	a792 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x456>
    a780:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a784:	2301      	movs	r3, #1
    a786:	2103      	movs	r1, #3
    a788:	3078      	adds	r0, #120	; 0x78
    a78a:	f005 fdf8 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a78e:	b968      	cbnz	r0, a7ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a790:	e003      	b.n	a79a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x45e>
    a792:	2000      	movs	r0, #0
    a794:	f000 fd5e 	bl	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    a798:	e008      	b.n	a7ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x470>
    a79a:	68e0      	ldr	r0, [r4, #12]
    a79c:	2301      	movs	r3, #1
    a79e:	2102      	movs	r1, #2
    a7a0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7a4:	3078      	adds	r0, #120	; 0x78
    a7a6:	f005 fdea 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7aa:	b1b0      	cbz	r0, a7da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x49e>
    a7ac:	68e0      	ldr	r0, [r4, #12]
    a7ae:	2301      	movs	r3, #1
    a7b0:	2100      	movs	r1, #0
    a7b2:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    a7b6:	3078      	adds	r0, #120	; 0x78
    a7b8:	f005 fde1 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7bc:	2800      	cmp	r0, #0
    a7be:	bf08      	it	eq
    a7c0:	bd70      	popeq	{r4, r5, r6, pc}
    a7c2:	68e0      	ldr	r0, [r4, #12]
    a7c4:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    a7c8:	2800      	cmp	r0, #0
    a7ca:	bf08      	it	eq
    a7cc:	bd70      	popeq	{r4, r5, r6, pc}
    a7ce:	2100      	movs	r1, #0
    a7d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a7d4:	20ff      	movs	r0, #255	; 0xff
    a7d6:	f000 bcc7 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a7de:	2100      	movs	r1, #0
    a7e0:	2016      	movs	r0, #22
    a7e2:	f000 bcc1 	b.w	b168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2c>
    a7e6:	0000      	movs	r0, r0
    a7e8:	b570      	push	{r4, r5, r6, lr}
    a7ea:	b084      	sub	sp, #16
    a7ec:	4605      	mov	r5, r0
    a7ee:	4668      	mov	r0, sp
    a7f0:	f7fa fb08 	bl	4e04 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a7f4:	b318      	cbz	r0, a83e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x502>
    a7f6:	2222      	movs	r2, #34	; 0x22
    a7f8:	2100      	movs	r1, #0
    a7fa:	9800      	ldr	r0, [sp, #0]
    a7fc:	f004 fb6a 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a800:	2103      	movs	r1, #3
    a802:	9800      	ldr	r0, [sp, #0]
    a804:	f006 f8e2 	bl	109cc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a808:	9800      	ldr	r0, [sp, #0]
    a80a:	7801      	ldrb	r1, [r0, #0]
    a80c:	f021 0110 	bic.w	r1, r1, #16
    a810:	7001      	strb	r1, [r0, #0]
    a812:	4629      	mov	r1, r5
    a814:	f7fc f9a8 	bl	6b68 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a818:	2200      	movs	r2, #0
    a81a:	4c63      	ldr	r4, [pc, #396]	; (a9a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x66c>)
    a81c:	f644 162f 	movw	r6, #18735	; 0x492f
    a820:	2d0e      	cmp	r5, #14
    a822:	d06e      	beq.n	a902 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c6>
    a824:	dc10      	bgt.n	a848 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x50c>
    a826:	f1a5 0002 	sub.w	r0, r5, #2
    a82a:	280c      	cmp	r0, #12
    a82c:	d21e      	bcs.n	a86c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a82e:	e8df f000 	tbb	[pc, r0]
    a832:	1d22      	.short	0x1d22
    a834:	22b0b048 	.word	0x22b0b048
    a838:	b01d551d 	.word	0xb01d551d
    a83c:	3b27      	.short	0x3b27
    a83e:	f640 1164 	movw	r1, #2404	; 0x964
    a842:	2031      	movs	r0, #49	; 0x31
    a844:	f7f9 f99e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a848:	2d15      	cmp	r5, #21
    a84a:	d05b      	beq.n	a904 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c8>
    a84c:	dc08      	bgt.n	a860 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x524>
    a84e:	2d11      	cmp	r5, #17
    a850:	d021      	beq.n	a896 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55a>
    a852:	2d12      	cmp	r5, #18
    a854:	bf18      	it	ne
    a856:	2d13      	cmpne	r5, #19
    a858:	d03f      	beq.n	a8da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x59e>
    a85a:	2d14      	cmp	r5, #20
    a85c:	d052      	beq.n	a904 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c8>
    a85e:	e005      	b.n	a86c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x530>
    a860:	2d16      	cmp	r5, #22
    a862:	d025      	beq.n	a8b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x574>
    a864:	2d17      	cmp	r5, #23
    a866:	d066      	beq.n	a936 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5fa>
    a868:	2dff      	cmp	r5, #255	; 0xff
    a86a:	d076      	beq.n	a95a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
    a86c:	f640 11d6 	movw	r1, #2518	; 0x9d6
    a870:	2031      	movs	r0, #49	; 0x31
    a872:	f7f9 f987 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a876:	68e1      	ldr	r1, [r4, #12]
    a878:	9800      	ldr	r0, [sp, #0]
    a87a:	f891 10f6 	ldrb.w	r1, [r1, #246]	; 0xf6
    a87e:	e015      	b.n	a8ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x570>
    a880:	9800      	ldr	r0, [sp, #0]
    a882:	210b      	movs	r1, #11
    a884:	7101      	strb	r1, [r0, #4]
    a886:	2159      	movs	r1, #89	; 0x59
    a888:	7141      	strb	r1, [r0, #5]
    a88a:	7182      	strb	r2, [r0, #6]
    a88c:	2137      	movs	r1, #55	; 0x37
    a88e:	71c1      	strb	r1, [r0, #7]
    a890:	2111      	movs	r1, #17
    a892:	7201      	strb	r1, [r0, #8]
    a894:	e07d      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a896:	2103      	movs	r1, #3
    a898:	9800      	ldr	r0, [sp, #0]
    a89a:	f006 f873 	bl	10984 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a89e:	2106      	movs	r1, #6
    a8a0:	9800      	ldr	r0, [sp, #0]
    a8a2:	f006 f871 	bl	10988 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a8a6:	e074      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a8a8:	9800      	ldr	r0, [sp, #0]
    a8aa:	2106      	movs	r1, #6
    a8ac:	7101      	strb	r1, [r0, #4]
    a8ae:	e070      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a8b0:	68e1      	ldr	r1, [r4, #12]
    a8b2:	9800      	ldr	r0, [sp, #0]
    a8b4:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    a8b8:	7102      	strb	r2, [r0, #4]
    a8ba:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    a8be:	7141      	strb	r1, [r0, #5]
    a8c0:	e067      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a8c2:	68e0      	ldr	r0, [r4, #12]
    a8c4:	f500 7192 	add.w	r1, r0, #292	; 0x124
    a8c8:	9800      	ldr	r0, [sp, #0]
    a8ca:	f006 f870 	bl	109ae <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    a8ce:	68e0      	ldr	r0, [r4, #12]
    a8d0:	f100 01ec 	add.w	r1, r0, #236	; 0xec
    a8d4:	9800      	ldr	r0, [sp, #0]
    a8d6:	f006 f867 	bl	109a8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    a8da:	e05a      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a8dc:	9202      	str	r2, [sp, #8]
    a8de:	9203      	str	r2, [sp, #12]
    a8e0:	f002 fcf2 	bl	d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a8e4:	68e1      	ldr	r1, [r4, #12]
    a8e6:	4030      	ands	r0, r6
    a8e8:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a8ec:	4001      	ands	r1, r0
    a8ee:	f88d 1008 	strb.w	r1, [sp, #8]
    a8f2:	0a00      	lsrs	r0, r0, #8
    a8f4:	f88d 0009 	strb.w	r0, [sp, #9]
    a8f8:	a902      	add	r1, sp, #8
    a8fa:	9800      	ldr	r0, [sp, #0]
    a8fc:	f006 f861 	bl	109c2 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    a900:	e047      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a902:	e02b      	b.n	a95c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x620>
    a904:	68e0      	ldr	r0, [r4, #12]
    a906:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a90a:	9800      	ldr	r0, [sp, #0]
    a90c:	f006 f866 	bl	109dc <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a910:	68e0      	ldr	r0, [r4, #12]
    a912:	f8b0 10f8 	ldrh.w	r1, [r0, #248]	; 0xf8
    a916:	9800      	ldr	r0, [sp, #0]
    a918:	f006 f864 	bl	109e4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a91c:	68e0      	ldr	r0, [r4, #12]
    a91e:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    a922:	9800      	ldr	r0, [sp, #0]
    a924:	f006 f862 	bl	109ec <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a928:	68e0      	ldr	r0, [r4, #12]
    a92a:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
    a92e:	9800      	ldr	r0, [sp, #0]
    a930:	f006 f860 	bl	109f4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a934:	e02d      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a936:	68e0      	ldr	r0, [r4, #12]
    a938:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a93c:	2901      	cmp	r1, #1
    a93e:	9900      	ldr	r1, [sp, #0]
    a940:	bf14      	ite	ne
    a942:	f890 2062 	ldrbne.w	r2, [r0, #98]	; 0x62
    a946:	f890 21c0 	ldrbeq.w	r2, [r0, #448]	; 0x1c0
    a94a:	710a      	strb	r2, [r1, #4]
    a94c:	bf14      	ite	ne
    a94e:	f890 0063 	ldrbne.w	r0, [r0, #99]	; 0x63
    a952:	f890 01c1 	ldrbeq.w	r0, [r0, #449]	; 0x1c1
    a956:	7148      	strb	r0, [r1, #5]
    a958:	e01b      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a95a:	e012      	b.n	a982 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x646>
    a95c:	9202      	str	r2, [sp, #8]
    a95e:	9203      	str	r2, [sp, #12]
    a960:	f002 fcb2 	bl	d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a964:	68e1      	ldr	r1, [r4, #12]
    a966:	4030      	ands	r0, r6
    a968:	f891 10be 	ldrb.w	r1, [r1, #190]	; 0xbe
    a96c:	4001      	ands	r1, r0
    a96e:	f88d 1008 	strb.w	r1, [sp, #8]
    a972:	0a00      	lsrs	r0, r0, #8
    a974:	f88d 0009 	strb.w	r0, [sp, #9]
    a978:	a902      	add	r1, sp, #8
    a97a:	9800      	ldr	r0, [sp, #0]
    a97c:	f006 f81c 	bl	109b8 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a980:	e007      	b.n	a992 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x656>
    a982:	68e0      	ldr	r0, [r4, #12]
    a984:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    a988:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    a98c:	9800      	ldr	r0, [sp, #0]
    a98e:	f005 fffd 	bl	1098c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    a992:	f7fa fa0f 	bl	4db4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a996:	2800      	cmp	r0, #0
    a998:	bf1c      	itt	ne
    a99a:	b004      	addne	sp, #16
    a99c:	bd70      	popne	{r4, r5, r6, pc}
    a99e:	f640 11da 	movw	r1, #2522	; 0x9da
    a9a2:	2031      	movs	r0, #49	; 0x31
    a9a4:	f7f9 f8ee 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9a8:	20000144 	.word	0x20000144
    a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9b0:	4cff      	ldr	r4, [pc, #1020]	; (adb0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa74>)
    a9b2:	4682      	mov	sl, r0
    a9b4:	b087      	sub	sp, #28
    a9b6:	68e0      	ldr	r0, [r4, #12]
    a9b8:	460d      	mov	r5, r1
    a9ba:	8800      	ldrh	r0, [r0, #0]
    a9bc:	f7f9 fcd2 	bl	4364 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    a9c0:	9005      	str	r0, [sp, #20]
    a9c2:	b178      	cbz	r0, a9e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a8>
    a9c4:	78e0      	ldrb	r0, [r4, #3]
    a9c6:	4328      	orrs	r0, r5
    a9c8:	70e0      	strb	r0, [r4, #3]
    a9ca:	88e0      	ldrh	r0, [r4, #6]
    a9cc:	f04f 0500 	mov.w	r5, #0
    a9d0:	f410 7f80 	tst.w	r0, #256	; 0x100
    a9d4:	68e0      	ldr	r0, [r4, #12]
    a9d6:	bf1c      	itt	ne
    a9d8:	f8a0 50a6 	strhne.w	r5, [r0, #166]	; 0xa6
    a9dc:	f880 5118 	strbne.w	r5, [r0, #280]	; 0x118
    a9e0:	d005      	beq.n	a9ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6b2>
    a9e2:	e009      	b.n	a9f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6bc>
    a9e4:	f640 516c 	movw	r1, #3436	; 0xd6c
    a9e8:	2031      	movs	r0, #49	; 0x31
    a9ea:	f7f9 f8cb 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9ee:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    a9f2:	1c49      	adds	r1, r1, #1
    a9f4:	f8a0 10a6 	strh.w	r1, [r0, #166]	; 0xa6
    a9f8:	68e0      	ldr	r0, [r4, #12]
    a9fa:	2701      	movs	r7, #1
    a9fc:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    aa00:	b939      	cbnz	r1, aa12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d6>
    aa02:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa06:	2301      	movs	r3, #1
    aa08:	2106      	movs	r1, #6
    aa0a:	3078      	adds	r0, #120	; 0x78
    aa0c:	f005 fcb7 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa10:	b340      	cbz	r0, aa64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    aa12:	88e0      	ldrh	r0, [r4, #6]
    aa14:	f410 6f00 	tst.w	r0, #2048	; 0x800
    aa18:	d007      	beq.n	aa2a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6ee>
    aa1a:	68e0      	ldr	r0, [r4, #12]
    aa1c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    aa20:	2900      	cmp	r1, #0
    aa22:	bf18      	it	ne
    aa24:	f8c0 5098 	strne.w	r5, [r0, #152]	; 0x98
    aa28:	d11c      	bne.n	aa64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    aa2a:	68e0      	ldr	r0, [r4, #12]
    aa2c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    aa30:	1c49      	adds	r1, r1, #1
    aa32:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    aa36:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    aa3a:	428a      	cmp	r2, r1
    aa3c:	bf2c      	ite	cs
    aa3e:	1a53      	subcs	r3, r2, r1
    aa40:	2300      	movcc	r3, #0
    aa42:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    aa46:	f10c 0c05 	add.w	ip, ip, #5
    aa4a:	4563      	cmp	r3, ip
    aa4c:	bf98      	it	ls
    aa4e:	f880 70a4 	strbls.w	r7, [r0, #164]	; 0xa4
    aa52:	4291      	cmp	r1, r2
    aa54:	d306      	bcc.n	aa64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x728>
    aa56:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    aa5a:	f880 720a 	strb.w	r7, [r0, #522]	; 0x20a
    aa5e:	7960      	ldrb	r0, [r4, #5]
    aa60:	f7f8 fe84 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    aa64:	88e0      	ldrh	r0, [r4, #6]
    aa66:	f04f 0602 	mov.w	r6, #2
    aa6a:	f410 7f40 	tst.w	r0, #768	; 0x300
    aa6e:	d011      	beq.n	aa94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    aa70:	68e0      	ldr	r0, [r4, #12]
    aa72:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    aa76:	b111      	cbz	r1, aa7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x742>
    aa78:	2903      	cmp	r1, #3
    aa7a:	d006      	beq.n	aa8a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x74e>
    aa7c:	e00a      	b.n	aa94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    aa7e:	f880 7088 	strb.w	r7, [r0, #136]	; 0x88
    aa82:	2101      	movs	r1, #1
    aa84:	f7fe fb46 	bl	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    aa88:	e004      	b.n	aa94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x758>
    aa8a:	f880 6088 	strb.w	r6, [r0, #136]	; 0x88
    aa8e:	2101      	movs	r1, #1
    aa90:	f7fe fb40 	bl	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    aa94:	68e0      	ldr	r0, [r4, #12]
    aa96:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    aa9a:	2901      	cmp	r1, #1
    aa9c:	d105      	bne.n	aaaa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x76e>
    aa9e:	88e1      	ldrh	r1, [r4, #6]
    aaa0:	f411 6f80 	tst.w	r1, #1024	; 0x400
    aaa4:	bf18      	it	ne
    aaa6:	f880 6088 	strbne.w	r6, [r0, #136]	; 0x88
    aaaa:	f04f 0808 	mov.w	r8, #8
    aaae:	f1ba 0f00 	cmp.w	sl, #0
    aab2:	f040 8295 	bne.w	afe0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    aab6:	88e1      	ldrh	r1, [r4, #6]
    aab8:	f011 0f40 	tst.w	r1, #64	; 0x40
    aabc:	bf18      	it	ne
    aabe:	f8a0 512c 	strhne.w	r5, [r0, #300]	; 0x12c
    aac2:	d104      	bne.n	aace <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x792>
    aac4:	f8b0 212c 	ldrh.w	r2, [r0, #300]	; 0x12c
    aac8:	1c52      	adds	r2, r2, #1
    aaca:	f8a0 212c 	strh.w	r2, [r0, #300]	; 0x12c
    aace:	78e2      	ldrb	r2, [r4, #3]
    aad0:	2a00      	cmp	r2, #0
    aad2:	d178      	bne.n	abc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x88a>
    aad4:	f011 0f08 	tst.w	r1, #8
    aad8:	f04f 0b20 	mov.w	fp, #32
    aadc:	d045      	beq.n	ab6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x82e>
    aade:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    aae2:	29fe      	cmp	r1, #254	; 0xfe
    aae4:	d00d      	beq.n	ab02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7c6>
    aae6:	21fe      	movs	r1, #254	; 0xfe
    aae8:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    aaec:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aaf0:	2919      	cmp	r1, #25
    aaf2:	d00b      	beq.n	ab0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7d0>
    aaf4:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    aaf8:	291f      	cmp	r1, #31
    aafa:	d019      	beq.n	ab30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7f4>
    aafc:	2927      	cmp	r1, #39	; 0x27
    aafe:	d026      	beq.n	ab4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x812>
    ab00:	e02b      	b.n	ab5a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
    ab02:	f240 7144 	movw	r1, #1860	; 0x744
    ab06:	2031      	movs	r0, #49	; 0x31
    ab08:	f7f9 f83c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab0c:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
    ab10:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    ab14:	1e49      	subs	r1, r1, #1
    ab16:	b249      	sxtb	r1, r1
    ab18:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    ab1c:	2900      	cmp	r1, #0
    ab1e:	bfa8      	it	ge
    ab20:	f880 5085 	strbge.w	r5, [r0, #133]	; 0x85
    ab24:	dae6      	bge.n	aaf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b8>
    ab26:	f44f 71c8 	mov.w	r1, #400	; 0x190
    ab2a:	2031      	movs	r0, #49	; 0x31
    ab2c:	f7f9 f82a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab30:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ab34:	f005 fc8f 	bl	10456 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    ab38:	2800      	cmp	r0, #0
    ab3a:	bf1d      	ittte	ne
    ab3c:	2026      	movne	r0, #38	; 0x26
    ab3e:	68e1      	ldrne	r1, [r4, #12]
    ab40:	f881 0084 	strbne.w	r0, [r1, #132]	; 0x84
    ab44:	68e0      	ldreq	r0, [r4, #12]
    ab46:	bf08      	it	eq
    ab48:	f880 b084 	strbeq.w	fp, [r0, #132]	; 0x84
    ab4c:	e005      	b.n	ab5a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
    ab4e:	f880 719d 	strb.w	r7, [r0, #413]	; 0x19d
    ab52:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    ab56:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    ab5a:	68e0      	ldr	r0, [r4, #12]
    ab5c:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ab60:	2908      	cmp	r1, #8
    ab62:	bf04      	itt	eq
    ab64:	7026      	strbeq	r6, [r4, #0]
    ab66:	f880 60f4 	strbeq.w	r6, [r0, #244]	; 0xf4
    ab6a:	2000      	movs	r0, #0
    ab6c:	79a1      	ldrb	r1, [r4, #6]
    ab6e:	f011 0f01 	tst.w	r1, #1
    ab72:	d060      	beq.n	ac36 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fa>
    ab74:	6960      	ldr	r0, [r4, #20]
    ab76:	2301      	movs	r3, #1
    ab78:	2105      	movs	r1, #5
    ab7a:	f890 9003 	ldrb.w	r9, [r0, #3]
    ab7e:	68e0      	ldr	r0, [r4, #12]
    ab80:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab84:	3078      	adds	r0, #120	; 0x78
    ab86:	f005 fbfa 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab8a:	b160      	cbz	r0, aba6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x86a>
    ab8c:	f1a9 0002 	sub.w	r0, r9, #2
    ab90:	280a      	cmp	r0, #10
    ab92:	d206      	bcs.n	aba2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x866>
    ab94:	e8df f000 	tbb	[pc, r0]
    ab98:	05050707 	.word	0x05050707
    ab9c:	05050707 	.word	0x05050707
    aba0:	0707      	.short	0x0707
    aba2:	4646      	mov	r6, r8
    aba4:	e048      	b.n	ac38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    aba6:	6960      	ldr	r0, [r4, #20]
    aba8:	f7fb ffb0 	bl	6b0c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    abac:	b160      	cbz	r0, abc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x88c>
    abae:	6960      	ldr	r0, [r4, #20]
    abb0:	f890 9003 	ldrb.w	r9, [r0, #3]
    abb4:	f1b9 0f00 	cmp.w	r9, #0
    abb8:	bf1c      	itt	ne
    abba:	f1b9 0f01 	cmpne.w	r9, #1
    abbe:	f1b9 0f16 	cmpne.w	r9, #22
    abc2:	d005      	beq.n	abd0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x894>
    abc4:	e01a      	b.n	abfc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    abc6:	e069      	b.n	ac9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    abc8:	f000 fc8e 	bl	b4e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    abcc:	4606      	mov	r6, r0
    abce:	e033      	b.n	ac38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    abd0:	68e0      	ldr	r0, [r4, #12]
    abd2:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    abd6:	f005 fc3e 	bl	10456 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    abda:	b178      	cbz	r0, abfc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    abdc:	68e1      	ldr	r1, [r4, #12]
    abde:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    abe2:	281f      	cmp	r0, #31
    abe4:	d00a      	beq.n	abfc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    abe6:	2820      	cmp	r0, #32
    abe8:	bf04      	itt	eq
    abea:	2026      	moveq	r0, #38	; 0x26
    abec:	f881 0084 	strbeq.w	r0, [r1, #132]	; 0x84
    abf0:	d004      	beq.n	abfc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c0>
    abf2:	f1b9 0f16 	cmp.w	r9, #22
    abf6:	bf08      	it	eq
    abf8:	465e      	moveq	r6, fp
    abfa:	e01d      	b.n	ac38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8fc>
    abfc:	f1b9 0f19 	cmp.w	r9, #25
    ac00:	d205      	bcs.n	ac0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8d2>
    ac02:	486c      	ldr	r0, [pc, #432]	; (adb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa78>)
    ac04:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
    ac08:	b108      	cbz	r0, ac0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8d2>
    ac0a:	4780      	blx	r0
    ac0c:	e00b      	b.n	ac26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ea>
    ac0e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    ac12:	d106      	bne.n	ac22 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
    ac14:	69a0      	ldr	r0, [r4, #24]
    ac16:	b120      	cbz	r0, ac22 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
    ac18:	68e0      	ldr	r0, [r4, #12]
    ac1a:	f880 719e 	strb.w	r7, [r0, #414]	; 0x19e
    ac1e:	2000      	movs	r0, #0
    ac20:	e001      	b.n	ac26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ea>
    ac22:	f000 fc61 	bl	b4e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    ac26:	68e1      	ldr	r1, [r4, #12]
    ac28:	e9d1 2334 	ldrd	r2, r3, [r1, #208]	; 0xd0
    ac2c:	1c52      	adds	r2, r2, #1
    ac2e:	f143 0300 	adc.w	r3, r3, #0
    ac32:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ac36:	4606      	mov	r6, r0
    ac38:	70e6      	strb	r6, [r4, #3]
    ac3a:	bb7e      	cbnz	r6, ac9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    ac3c:	88e0      	ldrh	r0, [r4, #6]
    ac3e:	f010 0f04 	tst.w	r0, #4
    ac42:	d005      	beq.n	ac50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x914>
    ac44:	68e1      	ldr	r1, [r4, #12]
    ac46:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    ac4a:	2907      	cmp	r1, #7
    ac4c:	bf08      	it	eq
    ac4e:	7027      	strbeq	r7, [r4, #0]
    ac50:	f010 0f02 	tst.w	r0, #2
    ac54:	d016      	beq.n	ac84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x948>
    ac56:	6920      	ldr	r0, [r4, #16]
    ac58:	78c1      	ldrb	r1, [r0, #3]
    ac5a:	2919      	cmp	r1, #25
    ac5c:	d205      	bcs.n	ac6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x92e>
    ac5e:	4856      	ldr	r0, [pc, #344]	; (adb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa7c>)
    ac60:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    ac64:	b108      	cbz	r0, ac6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x92e>
    ac66:	4780      	blx	r0
    ac68:	e00c      	b.n	ac84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x948>
    ac6a:	29ff      	cmp	r1, #255	; 0xff
    ac6c:	d004      	beq.n	ac78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x93c>
    ac6e:	f240 713a 	movw	r1, #1850	; 0x73a
    ac72:	2031      	movs	r0, #49	; 0x31
    ac74:	f7f8 ff86 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac78:	68e0      	ldr	r0, [r4, #12]
    ac7a:	2127      	movs	r1, #39	; 0x27
    ac7c:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    ac80:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    ac84:	79a0      	ldrb	r0, [r4, #6]
    ac86:	f010 0f10 	tst.w	r0, #16
    ac8a:	d007      	beq.n	ac9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
    ac8c:	68e0      	ldr	r0, [r4, #12]
    ac8e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ac92:	290b      	cmp	r1, #11
    ac94:	bf04      	itt	eq
    ac96:	210c      	moveq	r1, #12
    ac98:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    ac9c:	7920      	ldrb	r0, [r4, #4]
    ac9e:	f010 0f08 	tst.w	r0, #8
    aca2:	d011      	beq.n	acc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    aca4:	68e0      	ldr	r0, [r4, #12]
    aca6:	2301      	movs	r3, #1
    aca8:	2105      	movs	r1, #5
    acaa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    acae:	3078      	adds	r0, #120	; 0x78
    acb0:	f005 fb65 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    acb4:	b128      	cbz	r0, acc2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x986>
    acb6:	f884 8003 	strb.w	r8, [r4, #3]
    acba:	68e0      	ldr	r0, [r4, #12]
    acbc:	f880 51d4 	strb.w	r5, [r0, #468]	; 0x1d4
    acc0:	e002      	b.n	acc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x98c>
    acc2:	2000      	movs	r0, #0
    acc4:	f7fa fac6 	bl	5254 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    acc8:	69a0      	ldr	r0, [r4, #24]
    acca:	b3e8      	cbz	r0, ad48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa0c>
    accc:	9500      	str	r5, [sp, #0]
    acce:	9501      	str	r5, [sp, #4]
    acd0:	9502      	str	r5, [sp, #8]
    acd2:	9503      	str	r5, [sp, #12]
    acd4:	9504      	str	r5, [sp, #16]
    acd6:	68e0      	ldr	r0, [r4, #12]
    acd8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    acdc:	f007 fb10 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ace0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ace4:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    ace8:	fbb0 f6f1 	udiv	r6, r0, r1
    acec:	68e0      	ldr	r0, [r4, #12]
    acee:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    acf2:	f007 faf7 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    acf6:	4430      	add	r0, r6
    acf8:	f8ad 0006 	strh.w	r0, [sp, #6]
    acfc:	68e0      	ldr	r0, [r4, #12]
    acfe:	8801      	ldrh	r1, [r0, #0]
    ad00:	f8ad 1000 	strh.w	r1, [sp]
    ad04:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    ad08:	f8ad 1004 	strh.w	r1, [sp, #4]
    ad0c:	6840      	ldr	r0, [r0, #4]
    ad0e:	f005 fb0f 	bl	10330 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    ad12:	f8ad 0002 	strh.w	r0, [sp, #2]
    ad16:	68e0      	ldr	r0, [r4, #12]
    ad18:	f890 019e 	ldrb.w	r0, [r0, #414]	; 0x19e
    ad1c:	b130      	cbz	r0, ad2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f0>
    ad1e:	6960      	ldr	r0, [r4, #20]
    ad20:	1cc1      	adds	r1, r0, #3
    ad22:	9103      	str	r1, [sp, #12]
    ad24:	f005 fde3 	bl	108ee <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>
    ad28:	f88d 0010 	strb.w	r0, [sp, #16]
    ad2c:	68e0      	ldr	r0, [r4, #12]
    ad2e:	f890 019d 	ldrb.w	r0, [r0, #413]	; 0x19d
    ad32:	f88d 0008 	strb.w	r0, [sp, #8]
    ad36:	69a1      	ldr	r1, [r4, #24]
    ad38:	4668      	mov	r0, sp
    ad3a:	4788      	blx	r1
    ad3c:	68e0      	ldr	r0, [r4, #12]
    ad3e:	f880 519e 	strb.w	r5, [r0, #414]	; 0x19e
    ad42:	f880 519d 	strb.w	r5, [r0, #413]	; 0x19d
    ad46:	e000      	b.n	ad4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa0e>
    ad48:	e021      	b.n	ad8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    ad4a:	9903      	ldr	r1, [sp, #12]
    ad4c:	b1f9      	cbz	r1, ad8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    ad4e:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    ad52:	b9e1      	cbnz	r1, ad8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    ad54:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    ad58:	2927      	cmp	r1, #39	; 0x27
    ad5a:	d018      	beq.n	ad8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    ad5c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ad60:	9a03      	ldr	r2, [sp, #12]
    ad62:	b1a1      	cbz	r1, ad8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    ad64:	7813      	ldrb	r3, [r2, #0]
    ad66:	2bff      	cmp	r3, #255	; 0xff
    ad68:	d006      	beq.n	ad78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa3c>
    ad6a:	2b07      	cmp	r3, #7
    ad6c:	bf02      	ittt	eq
    ad6e:	2902      	cmpeq	r1, #2
    ad70:	7851      	ldrbeq	r1, [r2, #1]
    ad72:	29ff      	cmpeq	r1, #255	; 0xff
    ad74:	d002      	beq.n	ad7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa40>
    ad76:	e00a      	b.n	ad8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    ad78:	291b      	cmp	r1, #27
    ad7a:	d808      	bhi.n	ad8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
    ad7c:	f880 719c 	strb.w	r7, [r0, #412]	; 0x19c
    ad80:	9903      	ldr	r1, [sp, #12]
    ad82:	f8c0 11a0 	str.w	r1, [r0, #416]	; 0x1a0
    ad86:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ad8a:	f880 119f 	strb.w	r1, [r0, #415]	; 0x19f
    ad8e:	f7ff fb01 	bl	a394 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
    ad92:	f7fa f8ff 	bl	4f94 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    ad96:	b138      	cbz	r0, ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6c>
    ad98:	68e0      	ldr	r0, [r4, #12]
    ad9a:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ad9e:	2900      	cmp	r1, #0
    ada0:	bf08      	it	eq
    ada2:	f8a0 5108 	strheq.w	r5, [r0, #264]	; 0x108
    ada6:	d00c      	beq.n	adc2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa86>
    ada8:	68e0      	ldr	r0, [r4, #12]
    adaa:	f8b0 1108 	ldrh.w	r1, [r0, #264]	; 0x108
    adae:	e005      	b.n	adbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa80>
    adb0:	20000144 	.word	0x20000144
    adb4:	20000164 	.word	0x20000164
    adb8:	200001c8 	.word	0x200001c8
    adbc:	1c49      	adds	r1, r1, #1
    adbe:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    adc2:	f7fa f8e1 	bl	4f88 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    adc6:	b140      	cbz	r0, adda <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa9e>
    adc8:	68e1      	ldr	r1, [r4, #12]
    adca:	f891 0118 	ldrb.w	r0, [r1, #280]	; 0x118
    adce:	2802      	cmp	r0, #2
    add0:	bf9c      	itt	ls
    add2:	1c40      	addls	r0, r0, #1
    add4:	f881 0118 	strbls.w	r0, [r1, #280]	; 0x118
    add8:	d804      	bhi.n	ade4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaa8>
    adda:	68e0      	ldr	r0, [r4, #12]
    addc:	f890 0118 	ldrb.w	r0, [r0, #280]	; 0x118
    ade0:	2802      	cmp	r0, #2
    ade2:	d906      	bls.n	adf2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xab6>
    ade4:	68e0      	ldr	r0, [r4, #12]
    ade6:	f8a0 5108 	strh.w	r5, [r0, #264]	; 0x108
    adea:	f8a0 510a 	strh.w	r5, [r0, #266]	; 0x10a
    adee:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
    adf2:	68e0      	ldr	r0, [r4, #12]
    adf4:	2301      	movs	r3, #1
    adf6:	2100      	movs	r1, #0
    adf8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    adfc:	3078      	adds	r0, #120	; 0x78
    adfe:	f005 fabe 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae02:	b920      	cbnz	r0, ae0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad2>
    ae04:	68e0      	ldr	r0, [r4, #12]
    ae06:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ae0a:	280c      	cmp	r0, #12
    ae0c:	d168      	bne.n	aee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    ae0e:	68e0      	ldr	r0, [r4, #12]
    ae10:	2301      	movs	r3, #1
    ae12:	2100      	movs	r1, #0
    ae14:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    ae18:	3078      	adds	r0, #120	; 0x78
    ae1a:	f005 fab0 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae1e:	b3e0      	cbz	r0, ae9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    ae20:	68e0      	ldr	r0, [r4, #12]
    ae22:	2301      	movs	r3, #1
    ae24:	2100      	movs	r1, #0
    ae26:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    ae2a:	3078      	adds	r0, #120	; 0x78
    ae2c:	f005 faa7 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae30:	b398      	cbz	r0, ae9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    ae32:	68e0      	ldr	r0, [r4, #12]
    ae34:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    ae38:	2902      	cmp	r1, #2
    ae3a:	bf04      	itt	eq
    ae3c:	f890 0118 	ldrbeq.w	r0, [r0, #280]	; 0x118
    ae40:	2800      	cmpeq	r0, #0
    ae42:	d14d      	bne.n	aee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    ae44:	9805      	ldr	r0, [sp, #20]
    ae46:	f004 fda5 	bl	f994 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    ae4a:	b330      	cbz	r0, ae9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb5e>
    ae4c:	68e1      	ldr	r1, [r4, #12]
    ae4e:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
    ae52:	28fe      	cmp	r0, #254	; 0xfe
    ae54:	d144      	bne.n	aee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    ae56:	f8b1 0102 	ldrh.w	r0, [r1, #258]	; 0x102
    ae5a:	2801      	cmp	r0, #1
    ae5c:	d940      	bls.n	aee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    ae5e:	f881 710d 	strb.w	r7, [r1, #269]	; 0x10d
    ae62:	f8b1 00a8 	ldrh.w	r0, [r1, #168]	; 0xa8
    ae66:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    ae6a:	1e83      	subs	r3, r0, #2
    ae6c:	429a      	cmp	r2, r3
    ae6e:	bfaf      	iteee	ge
    ae70:	2001      	movge	r0, #1
    ae72:	1a80      	sublt	r0, r0, r2
    ae74:	1e40      	sublt	r0, r0, #1
    ae76:	b280      	uxthlt	r0, r0
    ae78:	f8b1 2108 	ldrh.w	r2, [r1, #264]	; 0x108
    ae7c:	8923      	ldrh	r3, [r4, #8]
    ae7e:	429a      	cmp	r2, r3
    ae80:	bf2f      	iteee	cs
    ae82:	2201      	movcs	r2, #1
    ae84:	1a9a      	subcc	r2, r3, r2
    ae86:	1c52      	addcc	r2, r2, #1
    ae88:	b292      	uxthcc	r2, r2
    ae8a:	4290      	cmp	r0, r2
    ae8c:	bf88      	it	hi
    ae8e:	4610      	movhi	r0, r2
    ae90:	2801      	cmp	r0, #1
    ae92:	bf08      	it	eq
    ae94:	f881 510d 	strbeq.w	r5, [r1, #269]	; 0x10d
    ae98:	e000      	b.n	ae9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb60>
    ae9a:	e021      	b.n	aee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xba4>
    ae9c:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
    aea0:	b96a      	cbnz	r2, aebe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    aea2:	6eca      	ldr	r2, [r1, #108]	; 0x6c
    aea4:	b15a      	cbz	r2, aebe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    aea6:	f8b1 20a2 	ldrh.w	r2, [r1, #162]	; 0xa2
    aeaa:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    aeae:	1ad2      	subs	r2, r2, r3
    aeb0:	b212      	sxth	r2, r2
    aeb2:	2a00      	cmp	r2, #0
    aeb4:	dd03      	ble.n	aebe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb82>
    aeb6:	4282      	cmp	r2, r0
    aeb8:	bfd8      	it	le
    aeba:	4610      	movle	r0, r2
    aebc:	b280      	uxth	r0, r0
    aebe:	f891 2181 	ldrb.w	r2, [r1, #385]	; 0x181
    aec2:	b18a      	cbz	r2, aee8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
    aec4:	f8b1 210a 	ldrh.w	r2, [r1, #266]	; 0x10a
    aec8:	f8b1 1182 	ldrh.w	r1, [r1, #386]	; 0x182
    aecc:	428a      	cmp	r2, r1
    aece:	bf2f      	iteee	cs
    aed0:	2101      	movcs	r1, #1
    aed2:	1a89      	subcc	r1, r1, r2
    aed4:	1c49      	addcc	r1, r1, #1
    aed6:	b289      	uxthcc	r1, r1
    aed8:	4288      	cmp	r0, r1
    aeda:	bf88      	it	hi
    aedc:	4608      	movhi	r0, r1
    aede:	e003      	b.n	aee8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
    aee0:	68e1      	ldr	r1, [r4, #12]
    aee2:	2001      	movs	r0, #1
    aee4:	f881 510d 	strb.w	r5, [r1, #269]	; 0x10d
    aee8:	78a1      	ldrb	r1, [r4, #2]
    aeea:	2900      	cmp	r1, #0
    aeec:	bf18      	it	ne
    aeee:	2801      	cmpne	r0, #1
    aef0:	bf9c      	itt	ls
    aef2:	68e1      	ldrls	r1, [r4, #12]
    aef4:	f881 5110 	strbls.w	r5, [r1, #272]	; 0x110
    aef8:	d903      	bls.n	af02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbc6>
    aefa:	68e0      	ldr	r0, [r4, #12]
    aefc:	f880 7110 	strb.w	r7, [r0, #272]	; 0x110
    af00:	2001      	movs	r0, #1
    af02:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    af06:	f8bc 1078 	ldrh.w	r1, [ip, #120]	; 0x78
    af0a:	4408      	add	r0, r1
    af0c:	b280      	uxth	r0, r0
    af0e:	f8ac 0104 	strh.w	r0, [ip, #260]	; 0x104
    af12:	f89c 2088 	ldrb.w	r2, [ip, #136]	; 0x88
    af16:	2a00      	cmp	r2, #0
    af18:	bf18      	it	ne
    af1a:	2a01      	cmpne	r2, #1
    af1c:	d009      	beq.n	af32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf6>
    af1e:	2a02      	cmp	r2, #2
    af20:	bf18      	it	ne
    af22:	2a03      	cmpne	r2, #3
    af24:	d008      	beq.n	af38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbfc>
    af26:	f640 2158 	movw	r1, #2648	; 0xa58
    af2a:	f04f 0031 	mov.w	r0, #49	; 0x31
    af2e:	f7f8 fe29 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af32:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    af36:	e053      	b.n	afe0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    af38:	f89c 2087 	ldrb.w	r2, [ip, #135]	; 0x87
    af3c:	2a08      	cmp	r2, #8
    af3e:	d022      	beq.n	af86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc4a>
    af40:	f8bc 00a6 	ldrh.w	r0, [ip, #166]	; 0xa6
    af44:	f8bc 10a8 	ldrh.w	r1, [ip, #168]	; 0xa8
    af48:	2600      	movs	r6, #0
    af4a:	1c82      	adds	r2, r0, #2
    af4c:	4291      	cmp	r1, r2
    af4e:	d306      	bcc.n	af5e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc22>
    af50:	1a08      	subs	r0, r1, r0
    af52:	1e80      	subs	r0, r0, #2
    af54:	0406      	lsls	r6, r0, #16
    af56:	0c36      	lsrs	r6, r6, #16
    af58:	bf1c      	itt	ne
    af5a:	1e70      	subne	r0, r6, #1
    af5c:	b286      	uxthne	r6, r0
    af5e:	f89c 00a4 	ldrb.w	r0, [ip, #164]	; 0xa4
    af62:	b158      	cbz	r0, af7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc40>
    af64:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    af68:	2301      	movs	r3, #1
    af6a:	2109      	movs	r1, #9
    af6c:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    af70:	f005 fa05 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af74:	2800      	cmp	r0, #0
    af76:	bf08      	it	eq
    af78:	2600      	moveq	r6, #0
    af7a:	d02b      	beq.n	afd4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc98>
    af7c:	68e0      	ldr	r0, [r4, #12]
    af7e:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    af82:	b999      	cbnz	r1, afac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc70>
    af84:	e00a      	b.n	af9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc60>
    af86:	f8bc 20a6 	ldrh.w	r2, [ip, #166]	; 0xa6
    af8a:	2a03      	cmp	r2, #3
    af8c:	d3d1      	bcc.n	af32 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbf6>
    af8e:	f8bc 00a8 	ldrh.w	r0, [ip, #168]	; 0xa8
    af92:	4408      	add	r0, r1
    af94:	1c40      	adds	r0, r0, #1
    af96:	f8ac 0100 	strh.w	r0, [ip, #256]	; 0x100
    af9a:	e021      	b.n	afe0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca4>
    af9c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afa0:	2301      	movs	r3, #1
    afa2:	2106      	movs	r1, #6
    afa4:	3078      	adds	r0, #120	; 0x78
    afa6:	f005 f9ea 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afaa:	b178      	cbz	r0, afcc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc90>
    afac:	68e1      	ldr	r1, [r4, #12]
    afae:	2000      	movs	r0, #0
    afb0:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
    afb4:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    afb8:	1c8b      	adds	r3, r1, #2
    afba:	429a      	cmp	r2, r3
    afbc:	d303      	bcc.n	afc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc8a>
    afbe:	1a50      	subs	r0, r2, r1
    afc0:	1e80      	subs	r0, r0, #2
    afc2:	bf18      	it	ne
    afc4:	1e40      	subne	r0, r0, #1
    afc6:	42b0      	cmp	r0, r6
    afc8:	bf38      	it	cc
    afca:	b286      	uxthcc	r6, r0
    afcc:	2e00      	cmp	r6, #0
    afce:	bf1c      	itt	ne
    afd0:	1e70      	subne	r0, r6, #1
    afd2:	b286      	uxthne	r6, r0
    afd4:	68e0      	ldr	r0, [r4, #12]
    afd6:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
    afda:	4431      	add	r1, r6
    afdc:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    afe0:	79a0      	ldrb	r0, [r4, #6]
    afe2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    afe6:	2800      	cmp	r0, #0
    afe8:	68e0      	ldr	r0, [r4, #12]
    afea:	bf18      	it	ne
    afec:	f8a0 511a 	strhne.w	r5, [r0, #282]	; 0x11a
    aff0:	d106      	bne.n	b000 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcc4>
    aff2:	f8b0 111a 	ldrh.w	r1, [r0, #282]	; 0x11a
    aff6:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    affa:	4411      	add	r1, r2
    affc:	f8a0 111a 	strh.w	r1, [r0, #282]	; 0x11a
    b000:	68e0      	ldr	r0, [r4, #12]
    b002:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    b006:	b939      	cbnz	r1, b018 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcdc>
    b008:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    b00c:	2301      	movs	r3, #1
    b00e:	4619      	mov	r1, r3
    b010:	3078      	adds	r0, #120	; 0x78
    b012:	f005 f9b4 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b016:	b138      	cbz	r0, b028 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcec>
    b018:	68e0      	ldr	r0, [r4, #12]
    b01a:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    b01e:	f8b0 2106 	ldrh.w	r2, [r0, #262]	; 0x106
    b022:	4411      	add	r1, r2
    b024:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    b028:	68e0      	ldr	r0, [r4, #12]
    b02a:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    b02e:	b132      	cbz	r2, b03e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd02>
    b030:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    b034:	f8b0 3106 	ldrh.w	r3, [r0, #262]	; 0x106
    b038:	4419      	add	r1, r3
    b03a:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
    b03e:	f990 30b4 	ldrsb.w	r3, [r0, #180]	; 0xb4
    b042:	2b00      	cmp	r3, #0
    b044:	dd06      	ble.n	b054 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd18>
    b046:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    b04a:	f8b0 c106 	ldrh.w	ip, [r0, #262]	; 0x106
    b04e:	4461      	add	r1, ip
    b050:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b054:	f04f 0c3d 	mov.w	ip, #61	; 0x3d
    b058:	f1ba 0f00 	cmp.w	sl, #0
    b05c:	bf18      	it	ne
    b05e:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    b062:	d14c      	bne.n	b0fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
    b064:	7821      	ldrb	r1, [r4, #0]
    b066:	2902      	cmp	r1, #2
    b068:	d011      	beq.n	b08e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd52>
    b06a:	2901      	cmp	r1, #1
    b06c:	bf08      	it	eq
    b06e:	f890 118a 	ldrbeq.w	r1, [r0, #394]	; 0x18a
    b072:	d042      	beq.n	b0fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbe>
    b074:	78e1      	ldrb	r1, [r4, #3]
    b076:	b339      	cbz	r1, b0c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd8c>
    b078:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    b07c:	f011 0f14 	tst.w	r1, #20
    b080:	bf18      	it	ne
    b082:	211e      	movne	r1, #30
    b084:	d009      	beq.n	b09a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd5e>
    b086:	bf00      	nop
    b088:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    b08c:	e052      	b.n	b134 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b08e:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
    b092:	2906      	cmp	r1, #6
    b094:	bf18      	it	ne
    b096:	2116      	movne	r1, #22
    b098:	e02f      	b.n	b0fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbe>
    b09a:	f011 0f08 	tst.w	r1, #8
    b09e:	bf18      	it	ne
    b0a0:	f880 c095 	strbne.w	ip, [r0, #149]	; 0x95
    b0a4:	d146      	bne.n	b134 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b0a6:	f011 0f20 	tst.w	r1, #32
    b0aa:	bf18      	it	ne
    b0ac:	2123      	movne	r1, #35	; 0x23
    b0ae:	d1eb      	bne.n	b088 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4c>
    b0b0:	f011 0f03 	tst.w	r1, #3
    b0b4:	bf1c      	itt	ne
    b0b6:	212a      	movne	r1, #42	; 0x2a
    b0b8:	f880 1095 	strbne.w	r1, [r0, #149]	; 0x95
    b0bc:	d13a      	bne.n	b134 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b0be:	f640 41ab 	movw	r1, #3243	; 0xcab
    b0c2:	2031      	movs	r0, #49	; 0x31
    b0c4:	f7f8 fd5e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0c8:	b12a      	cbz	r2, b0d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd9a>
    b0ca:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    b0ce:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    b0d2:	4291      	cmp	r1, r2
    b0d4:	d210      	bcs.n	b0f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbc>
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	dd05      	ble.n	b0e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdaa>
    b0da:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    b0de:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    b0e2:	4291      	cmp	r1, r2
    b0e4:	d208      	bcs.n	b0f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdbc>
    b0e6:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    b0ea:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    b0ee:	428a      	cmp	r2, r1
    b0f0:	d308      	bcc.n	b104 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc8>
    b0f2:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
    b0f6:	b12a      	cbz	r2, b104 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc8>
    b0f8:	2122      	movs	r1, #34	; 0x22
    b0fa:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    b0fe:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    b102:	e017      	b.n	b134 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b104:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b108:	b13a      	cbz	r2, b11a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdde>
    b10a:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    b10e:	428a      	cmp	r2, r1
    b110:	bf28      	it	cs
    b112:	f880 8095 	strbcs.w	r8, [r0, #149]	; 0x95
    b116:	d2f2      	bcs.n	b0fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
    b118:	e009      	b.n	b12e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf2>
    b11a:	f8b0 10a6 	ldrh.w	r1, [r0, #166]	; 0xa6
    b11e:	2906      	cmp	r1, #6
    b120:	d305      	bcc.n	b12e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf2>
    b122:	213e      	movs	r1, #62	; 0x3e
    b124:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    b128:	f880 7094 	strb.w	r7, [r0, #148]	; 0x94
    b12c:	e002      	b.n	b134 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf8>
    b12e:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    b132:	b171      	cbz	r1, b152 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe16>
    b134:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    b138:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b13c:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    b140:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    b144:	2900      	cmp	r1, #0
    b146:	bf14      	ite	ne
    b148:	2102      	movne	r1, #2
    b14a:	2103      	moveq	r1, #3
    b14c:	f7fd ffe2 	bl	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b150:	e002      	b.n	b158 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe1c>
    b152:	2100      	movs	r1, #0
    b154:	f7fd ffde 	bl	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b158:	68e0      	ldr	r0, [r4, #12]
    b15a:	f880 510e 	strb.w	r5, [r0, #270]	; 0x10e
    b15e:	b007      	add	sp, #28
    b160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b164:	f7f9 be10 	b.w	4d88 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    b168:	4a0c      	ldr	r2, [pc, #48]	; (b19c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe60>)
    b16a:	b510      	push	{r4, lr}
    b16c:	68d2      	ldr	r2, [r2, #12]
    b16e:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
    b172:	2bfe      	cmp	r3, #254	; 0xfe
    b174:	d004      	beq.n	b180 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe44>
    b176:	f640 11ed 	movw	r1, #2541	; 0x9ed
    b17a:	2031      	movs	r0, #49	; 0x31
    b17c:	f7f8 fd02 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b180:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    b184:	2000      	movs	r0, #0
    b186:	2900      	cmp	r1, #0
    b188:	bf1c      	itt	ne
    b18a:	f8a2 00b2 	strhne.w	r0, [r2, #178]	; 0xb2
    b18e:	bd10      	popne	{r4, pc}
    b190:	f8a2 00ac 	strh.w	r0, [r2, #172]	; 0xac
    b194:	2001      	movs	r0, #1
    b196:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    b19a:	bd10      	pop	{r4, pc}
    b19c:	20000144 	.word	0x20000144
    b1a0:	b570      	push	{r4, r5, r6, lr}
    b1a2:	4a2b      	ldr	r2, [pc, #172]	; (b250 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf14>)
    b1a4:	4603      	mov	r3, r0
    b1a6:	88d0      	ldrh	r0, [r2, #6]
    b1a8:	4318      	orrs	r0, r3
    b1aa:	80d0      	strh	r0, [r2, #6]
    b1ac:	4610      	mov	r0, r2
    b1ae:	2b40      	cmp	r3, #64	; 0x40
    b1b0:	68c0      	ldr	r0, [r0, #12]
    b1b2:	d011      	beq.n	b1d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe9c>
    b1b4:	f013 0f02 	tst.w	r3, #2
    b1b8:	f04f 0400 	mov.w	r4, #0
    b1bc:	f04f 0c01 	mov.w	ip, #1
    b1c0:	f003 0501 	and.w	r5, r3, #1
    b1c4:	d00d      	beq.n	b1e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xea6>
    b1c6:	2d00      	cmp	r5, #0
    b1c8:	bf08      	it	eq
    b1ca:	6111      	streq	r1, [r2, #16]
    b1cc:	d026      	beq.n	b21c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xee0>
    b1ce:	f640 41fe 	movw	r1, #3326	; 0xcfe
    b1d2:	2031      	movs	r0, #49	; 0x31
    b1d4:	f7f8 fcd6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b1dc:	2104      	movs	r1, #4
    b1de:	f7fd bf99 	b.w	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b1e2:	b1b5      	cbz	r5, b212 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    b1e4:	6151      	str	r1, [r2, #20]
    b1e6:	78c9      	ldrb	r1, [r1, #3]
    b1e8:	2906      	cmp	r1, #6
    b1ea:	d009      	beq.n	b200 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xec4>
    b1ec:	290b      	cmp	r1, #11
    b1ee:	bf01      	itttt	eq
    b1f0:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    b1f4:	2911      	cmpeq	r1, #17
    b1f6:	f880 4089 	strbeq.w	r4, [r0, #137]	; 0x89
    b1fa:	f880 c0b6 	strbeq.w	ip, [r0, #182]	; 0xb6
    b1fe:	e008      	b.n	b212 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    b200:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b204:	2917      	cmp	r1, #23
    b206:	d104      	bne.n	b212 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed6>
    b208:	2100      	movs	r1, #0
    b20a:	e9c0 1132 	strd	r1, r1, [r0, #200]	; 0xc8
    b20e:	f880 c089 	strb.w	ip, [r0, #137]	; 0x89
    b212:	f013 0f02 	tst.w	r3, #2
    b216:	bf18      	it	ne
    b218:	6911      	ldrne	r1, [r2, #16]
    b21a:	d013      	beq.n	b244 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    b21c:	78c9      	ldrb	r1, [r1, #3]
    b21e:	2905      	cmp	r1, #5
    b220:	d007      	beq.n	b232 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef6>
    b222:	290b      	cmp	r1, #11
    b224:	bf02      	ittt	eq
    b226:	f890 1085 	ldrbeq.w	r1, [r0, #133]	; 0x85
    b22a:	2910      	cmpeq	r1, #16
    b22c:	f880 408a 	strbeq.w	r4, [r0, #138]	; 0x8a
    b230:	e008      	b.n	b244 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    b232:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b236:	2915      	cmp	r1, #21
    b238:	d104      	bne.n	b244 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf08>
    b23a:	2100      	movs	r1, #0
    b23c:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    b240:	f880 c08a 	strb.w	ip, [r0, #138]	; 0x8a
    b244:	f013 0f20 	tst.w	r3, #32
    b248:	bf1c      	itt	ne
    b24a:	2008      	movne	r0, #8
    b24c:	7110      	strbne	r0, [r2, #4]
    b24e:	bd70      	pop	{r4, r5, r6, pc}
    b250:	20000144 	.word	0x20000144
    b254:	4a15      	ldr	r2, [pc, #84]	; (b2ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf70>)
    b256:	b510      	push	{r4, lr}
    b258:	68d1      	ldr	r1, [r2, #12]
    b25a:	880b      	ldrh	r3, [r1, #0]
    b25c:	f8a1 3216 	strh.w	r3, [r1, #534]	; 0x216
    b260:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    b264:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    b268:	2801      	cmp	r0, #1
    b26a:	bf18      	it	ne
    b26c:	2802      	cmpne	r0, #2
    b26e:	d005      	beq.n	b27c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf40>
    b270:	f240 218f 	movw	r1, #655	; 0x28f
    b274:	f04f 0006 	mov.w	r0, #6
    b278:	f7f8 fc84 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b27c:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    b280:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    b284:	2801      	cmp	r0, #1
    b286:	bf18      	it	ne
    b288:	2802      	cmpne	r0, #2
    b28a:	d1f1      	bne.n	b270 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf34>
    b28c:	f881 0219 	strb.w	r0, [r1, #537]	; 0x219
    b290:	f04f 0001 	mov.w	r0, #1
    b294:	f881 0212 	strb.w	r0, [r1, #530]	; 0x212
    b298:	f04f 0000 	mov.w	r0, #0
    b29c:	f881 01be 	strb.w	r0, [r1, #446]	; 0x1be
    b2a0:	7950      	ldrb	r0, [r2, #5]
    b2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2a6:	f7f8 ba61 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b2aa:	0000      	.short	0x0000
    b2ac:	20000144 	.word	0x20000144
    b2b0:	b510      	push	{r4, lr}
    b2b2:	4c17      	ldr	r4, [pc, #92]	; (b310 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd4>)
    b2b4:	2301      	movs	r3, #1
    b2b6:	2100      	movs	r1, #0
    b2b8:	68e0      	ldr	r0, [r4, #12]
    b2ba:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b2be:	3078      	adds	r0, #120	; 0x78
    b2c0:	f005 f85d 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2c4:	2800      	cmp	r0, #0
    b2c6:	bf04      	itt	eq
    b2c8:	2001      	moveq	r0, #1
    b2ca:	bd10      	popeq	{r4, pc}
    b2cc:	6960      	ldr	r0, [r4, #20]
    b2ce:	f005 faea 	bl	108a6 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    b2d2:	68e1      	ldr	r1, [r4, #12]
    b2d4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    b2d8:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    b2dc:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    b2e0:	1a80      	subs	r0, r0, r2
    b2e2:	b200      	sxth	r0, r0
    b2e4:	2201      	movs	r2, #1
    b2e6:	4283      	cmp	r3, r0
    b2e8:	bfa8      	it	ge
    b2ea:	2800      	cmpge	r0, #0
    b2ec:	dd09      	ble.n	b302 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfc6>
    b2ee:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    b2f2:	6960      	ldr	r0, [r4, #20]
    b2f4:	f005 fad2 	bl	1089c <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    b2f8:	68e1      	ldr	r1, [r4, #12]
    b2fa:	200b      	movs	r0, #11
    b2fc:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b300:	e004      	b.n	b30c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd0>
    b302:	2028      	movs	r0, #40	; 0x28
    b304:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b308:	f881 2094 	strb.w	r2, [r1, #148]	; 0x94
    b30c:	2000      	movs	r0, #0
    b30e:	bd10      	pop	{r4, pc}
    b310:	20000144 	.word	0x20000144
    b314:	b570      	push	{r4, r5, r6, lr}
    b316:	4c2d      	ldr	r4, [pc, #180]	; (b3cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1090>)
    b318:	2301      	movs	r3, #1
    b31a:	2100      	movs	r1, #0
    b31c:	68e0      	ldr	r0, [r4, #12]
    b31e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b322:	3078      	adds	r0, #120	; 0x78
    b324:	f005 f82b 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b328:	2800      	cmp	r0, #0
    b32a:	bf04      	itt	eq
    b32c:	2001      	moveq	r0, #1
    b32e:	bd70      	popeq	{r4, r5, r6, pc}
    b330:	68e0      	ldr	r0, [r4, #12]
    b332:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    b336:	6960      	ldr	r0, [r4, #20]
    b338:	f005 fa85 	bl	10846 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    b33c:	2800      	cmp	r0, #0
    b33e:	d039      	beq.n	b3b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1078>
    b340:	6960      	ldr	r0, [r4, #20]
    b342:	68e1      	ldr	r1, [r4, #12]
    b344:	f647 7cfe 	movw	ip, #32766	; 0x7ffe
    b348:	f8b0 200d 	ldrh.w	r2, [r0, #13]
    b34c:	f8a1 21a4 	strh.w	r2, [r1, #420]	; 0x1a4
    b350:	f8b1 3078 	ldrh.w	r3, [r1, #120]	; 0x78
    b354:	1ad2      	subs	r2, r2, r3
    b356:	b212      	sxth	r2, r2
    b358:	2301      	movs	r3, #1
    b35a:	4594      	cmp	ip, r2
    b35c:	bfa8      	it	ge
    b35e:	2a00      	cmpge	r2, #0
    b360:	dd2c      	ble.n	b3bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
    b362:	f005 faa3 	bl	108ac <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    b366:	f004 ffd7 	bl	10318 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    b36a:	4605      	mov	r5, r0
    b36c:	68e0      	ldr	r0, [r4, #12]
    b36e:	4629      	mov	r1, r5
    b370:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    b374:	6960      	ldr	r0, [r4, #20]
    b376:	7900      	ldrb	r0, [r0, #4]
    b378:	f005 fa1c 	bl	107b4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    b37c:	68e1      	ldr	r1, [r4, #12]
    b37e:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    b382:	6960      	ldr	r0, [r4, #20]
    b384:	4629      	mov	r1, r5
    b386:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    b38a:	f005 fa0a 	bl	107a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    b38e:	68e1      	ldr	r1, [r4, #12]
    b390:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    b394:	6960      	ldr	r0, [r4, #20]
    b396:	f005 fa8c 	bl	108b2 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    b39a:	68e1      	ldr	r1, [r4, #12]
    b39c:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    b3a0:	6960      	ldr	r0, [r4, #20]
    b3a2:	f005 fa89 	bl	108b8 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    b3a6:	68e1      	ldr	r1, [r4, #12]
    b3a8:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    b3ac:	200d      	movs	r0, #13
    b3ae:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b3b2:	e008      	b.n	b3c6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x108a>
    b3b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b3b8:	f000 b896 	b.w	b4e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b3bc:	2028      	movs	r0, #40	; 0x28
    b3be:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    b3c2:	f881 3094 	strb.w	r3, [r1, #148]	; 0x94
    b3c6:	2000      	movs	r0, #0
    b3c8:	bd70      	pop	{r4, r5, r6, pc}
    b3ca:	0000      	.short	0x0000
    b3cc:	20000144 	.word	0x20000144
    b3d0:	b510      	push	{r4, lr}
    b3d2:	4c29      	ldr	r4, [pc, #164]	; (b478 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x113c>)
    b3d4:	2301      	movs	r3, #1
    b3d6:	2100      	movs	r1, #0
    b3d8:	68e0      	ldr	r0, [r4, #12]
    b3da:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b3de:	3078      	adds	r0, #120	; 0x78
    b3e0:	f004 ffcd 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b3e4:	b970      	cbnz	r0, b404 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c8>
    b3e6:	68e0      	ldr	r0, [r4, #12]
    b3e8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b3ec:	2a12      	cmp	r2, #18
    b3ee:	d009      	beq.n	b404 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c8>
    b3f0:	2301      	movs	r3, #1
    b3f2:	2105      	movs	r1, #5
    b3f4:	3078      	adds	r0, #120	; 0x78
    b3f6:	f004 ffc2 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b3fa:	2800      	cmp	r0, #0
    b3fc:	bf0c      	ite	eq
    b3fe:	2001      	moveq	r0, #1
    b400:	2008      	movne	r0, #8
    b402:	bd10      	pop	{r4, pc}
    b404:	68e0      	ldr	r0, [r4, #12]
    b406:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    b40a:	b939      	cbnz	r1, b41c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10e0>
    b40c:	2100      	movs	r1, #0
    b40e:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b412:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b416:	1c49      	adds	r1, r1, #1
    b418:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b41c:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    b420:	6960      	ldr	r0, [r4, #20]
    b422:	f005 fa58 	bl	108d6 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    b426:	68e0      	ldr	r0, [r4, #12]
    b428:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    b42c:	6960      	ldr	r0, [r4, #20]
    b42e:	f005 fa49 	bl	108c4 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    b432:	68e0      	ldr	r0, [r4, #12]
    b434:	f890 11dc 	ldrb.w	r1, [r0, #476]	; 0x1dc
    b438:	b121      	cbz	r1, b444 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1108>
    b43a:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b43e:	2031      	movs	r0, #49	; 0x31
    b440:	f7f8 fba0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b444:	8801      	ldrh	r1, [r0, #0]
    b446:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    b44a:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    b44e:	6960      	ldr	r0, [r4, #20]
    b450:	f005 fa3c 	bl	108cc <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    b454:	68e0      	ldr	r0, [r4, #12]
    b456:	f500 71f4 	add.w	r1, r0, #488	; 0x1e8
    b45a:	6960      	ldr	r0, [r4, #20]
    b45c:	f005 fa2f 	bl	108be <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    b460:	68e0      	ldr	r0, [r4, #12]
    b462:	2101      	movs	r1, #1
    b464:	f880 11dc 	strb.w	r1, [r0, #476]	; 0x1dc
    b468:	2114      	movs	r1, #20
    b46a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b46e:	7960      	ldrb	r0, [r4, #5]
    b470:	f7f8 f97c 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b474:	2000      	movs	r0, #0
    b476:	bd10      	pop	{r4, pc}
    b478:	20000144 	.word	0x20000144
    b47c:	b510      	push	{r4, lr}
    b47e:	4c19      	ldr	r4, [pc, #100]	; (b4e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a8>)
    b480:	b082      	sub	sp, #8
    b482:	68e0      	ldr	r0, [r4, #12]
    b484:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    b488:	f010 0f01 	tst.w	r0, #1
    b48c:	bf1e      	ittt	ne
    b48e:	2001      	movne	r0, #1
    b490:	b002      	addne	sp, #8
    b492:	bd10      	popne	{r4, pc}
    b494:	4669      	mov	r1, sp
    b496:	6960      	ldr	r0, [r4, #20]
    b498:	f005 fa24 	bl	108e4 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    b49c:	f001 ff14 	bl	d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b4a0:	f644 112f 	movw	r1, #18735	; 0x492f
    b4a4:	4001      	ands	r1, r0
    b4a6:	f89d 0000 	ldrb.w	r0, [sp]
    b4aa:	ea00 0201 	and.w	r2, r0, r1
    b4ae:	68e0      	ldr	r0, [r4, #12]
    b4b0:	f880 20be 	strb.w	r2, [r0, #190]	; 0xbe
    b4b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
    b4b8:	ea02 2111 	and.w	r1, r2, r1, lsr #8
    b4bc:	f880 10bf 	strb.w	r1, [r0, #191]	; 0xbf
    b4c0:	2100      	movs	r1, #0
    b4c2:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b4c6:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b4ca:	1c49      	adds	r1, r1, #1
    b4cc:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b4d0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b4d4:	f041 0101 	orr.w	r1, r1, #1
    b4d8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b4dc:	b002      	add	sp, #8
    b4de:	2000      	movs	r0, #0
    b4e0:	bd10      	pop	{r4, pc}
    b4e2:	0000      	.short	0x0000
    b4e4:	20000144 	.word	0x20000144
    b4e8:	4a0d      	ldr	r2, [pc, #52]	; (b520 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11e4>)
    b4ea:	68d0      	ldr	r0, [r2, #12]
    b4ec:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b4f0:	f011 0f08 	tst.w	r1, #8
    b4f4:	bf1c      	itt	ne
    b4f6:	2001      	movne	r0, #1
    b4f8:	4770      	bxne	lr
    b4fa:	f041 0108 	orr.w	r1, r1, #8
    b4fe:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b502:	6951      	ldr	r1, [r2, #20]
    b504:	78c9      	ldrb	r1, [r1, #3]
    b506:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    b50a:	2100      	movs	r1, #0
    b50c:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b510:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b514:	1c49      	adds	r1, r1, #1
    b516:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b51a:	2000      	movs	r0, #0
    b51c:	4770      	bx	lr
    b51e:	0000      	.short	0x0000
    b520:	20000144 	.word	0x20000144
    b524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b526:	4c34      	ldr	r4, [pc, #208]	; (b5f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>)
    b528:	68e0      	ldr	r0, [r4, #12]
    b52a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    b52e:	f010 0f30 	tst.w	r0, #48	; 0x30
    b532:	bf1c      	itt	ne
    b534:	2001      	movne	r0, #1
    b536:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
    b538:	6960      	ldr	r0, [r4, #20]
    b53a:	f005 f9f0 	bl	1091e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b53e:	2800      	cmp	r0, #0
    b540:	d030      	beq.n	b5a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1268>
    b542:	6960      	ldr	r0, [r4, #20]
    b544:	f005 f9dd 	bl	10902 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b548:	4605      	mov	r5, r0
    b54a:	6960      	ldr	r0, [r4, #20]
    b54c:	f005 f9dd 	bl	1090a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b550:	4606      	mov	r6, r0
    b552:	6960      	ldr	r0, [r4, #20]
    b554:	f005 f9d3 	bl	108fe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b558:	4607      	mov	r7, r0
    b55a:	6960      	ldr	r0, [r4, #20]
    b55c:	f005 f9d3 	bl	10906 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b560:	4601      	mov	r1, r0
    b562:	9500      	str	r5, [sp, #0]
    b564:	68e0      	ldr	r0, [r4, #12]
    b566:	4633      	mov	r3, r6
    b568:	463a      	mov	r2, r7
    b56a:	3028      	adds	r0, #40	; 0x28
    b56c:	f005 fcbb 	bl	10ee6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b570:	79a0      	ldrb	r0, [r4, #6]
    b572:	f010 0f02 	tst.w	r0, #2
    b576:	d003      	beq.n	b580 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1244>
    b578:	6920      	ldr	r0, [r4, #16]
    b57a:	78c0      	ldrb	r0, [r0, #3]
    b57c:	2814      	cmp	r0, #20
    b57e:	d015      	beq.n	b5ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1270>
    b580:	68e1      	ldr	r1, [r4, #12]
    b582:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    b586:	281c      	cmp	r0, #28
    b588:	d010      	beq.n	b5ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1270>
    b58a:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b58e:	2801      	cmp	r0, #1
    b590:	d010      	beq.n	b5b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1278>
    b592:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    b596:	2800      	cmp	r0, #0
    b598:	bf04      	itt	eq
    b59a:	f891 01b4 	ldrbeq.w	r0, [r1, #436]	; 0x1b4
    b59e:	2800      	cmpeq	r0, #0
    b5a0:	d010      	beq.n	b5c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1288>
    b5a2:	e007      	b.n	b5b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1278>
    b5a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b5a8:	f7ff bf9e 	b.w	b4e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b5ac:	68e1      	ldr	r1, [r4, #12]
    b5ae:	2001      	movs	r0, #1
    b5b0:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    b5b4:	68e0      	ldr	r0, [r4, #12]
    b5b6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b5ba:	f041 0110 	orr.w	r1, r1, #16
    b5be:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b5c2:	e00e      	b.n	b5e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12a6>
    b5c4:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    b5c8:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    b5cc:	f040 0020 	orr.w	r0, r0, #32
    b5d0:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b5d4:	f831 0b28 	ldrh.w	r0, [r1], #40
    b5d8:	f005 fc8d 	bl	10ef6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    b5dc:	7960      	ldrb	r0, [r4, #5]
    b5de:	f7f8 f8c5 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b5e2:	68e0      	ldr	r0, [r4, #12]
    b5e4:	2100      	movs	r1, #0
    b5e6:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b5ea:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b5ee:	1c49      	adds	r1, r1, #1
    b5f0:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b5f4:	2000      	movs	r0, #0
    b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5f8:	20000144 	.word	0x20000144
    b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5fe:	4c22      	ldr	r4, [pc, #136]	; (b688 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x134c>)
    b600:	2301      	movs	r3, #1
    b602:	210a      	movs	r1, #10
    b604:	68e0      	ldr	r0, [r4, #12]
    b606:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b60a:	3078      	adds	r0, #120	; 0x78
    b60c:	f004 feb7 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b610:	2800      	cmp	r0, #0
    b612:	bf04      	itt	eq
    b614:	2001      	moveq	r0, #1
    b616:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    b618:	6960      	ldr	r0, [r4, #20]
    b61a:	f005 f980 	bl	1091e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    b61e:	b1c8      	cbz	r0, b654 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1318>
    b620:	6960      	ldr	r0, [r4, #20]
    b622:	f005 f96e 	bl	10902 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    b626:	4605      	mov	r5, r0
    b628:	6960      	ldr	r0, [r4, #20]
    b62a:	f005 f96e 	bl	1090a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    b62e:	4606      	mov	r6, r0
    b630:	6960      	ldr	r0, [r4, #20]
    b632:	f005 f964 	bl	108fe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    b636:	4607      	mov	r7, r0
    b638:	6960      	ldr	r0, [r4, #20]
    b63a:	f005 f964 	bl	10906 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    b63e:	4601      	mov	r1, r0
    b640:	9500      	str	r5, [sp, #0]
    b642:	68e0      	ldr	r0, [r4, #12]
    b644:	4633      	mov	r3, r6
    b646:	463a      	mov	r2, r7
    b648:	3028      	adds	r0, #40	; 0x28
    b64a:	f005 fc4c 	bl	10ee6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    b64e:	68e0      	ldr	r0, [r4, #12]
    b650:	f005 fb8e 	bl	10d70 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    b654:	68e1      	ldr	r1, [r4, #12]
    b656:	2000      	movs	r0, #0
    b658:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b65c:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b660:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    b664:	2801      	cmp	r0, #1
    b666:	bf04      	itt	eq
    b668:	2002      	moveq	r0, #2
    b66a:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    b66e:	d008      	beq.n	b682 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1346>
    b670:	8808      	ldrh	r0, [r1, #0]
    b672:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    b676:	3128      	adds	r1, #40	; 0x28
    b678:	f005 fafd 	bl	10c76 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    b67c:	7960      	ldrb	r0, [r4, #5]
    b67e:	f7f8 f875 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b682:	2000      	movs	r0, #0
    b684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b686:	0000      	.short	0x0000
    b688:	20000144 	.word	0x20000144
    b68c:	480b      	ldr	r0, [pc, #44]	; (b6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1380>)
    b68e:	68c0      	ldr	r0, [r0, #12]
    b690:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b694:	f011 0f04 	tst.w	r1, #4
    b698:	bf1c      	itt	ne
    b69a:	2001      	movne	r0, #1
    b69c:	4770      	bxne	lr
    b69e:	2200      	movs	r2, #0
    b6a0:	f8a0 20b2 	strh.w	r2, [r0, #178]	; 0xb2
    b6a4:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    b6a8:	f041 0104 	orr.w	r1, r1, #4
    b6ac:	1c52      	adds	r2, r2, #1
    b6ae:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    b6b2:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    b6b6:	2000      	movs	r0, #0
    b6b8:	4770      	bx	lr
    b6ba:	0000      	.short	0x0000
    b6bc:	20000144 	.word	0x20000144
    b6c0:	b510      	push	{r4, lr}
    b6c2:	4c0a      	ldr	r4, [pc, #40]	; (b6ec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13b0>)
    b6c4:	2301      	movs	r3, #1
    b6c6:	2109      	movs	r1, #9
    b6c8:	68e0      	ldr	r0, [r4, #12]
    b6ca:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    b6ce:	3078      	adds	r0, #120	; 0x78
    b6d0:	f004 fe55 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b6d4:	2800      	cmp	r0, #0
    b6d6:	bf08      	it	eq
    b6d8:	bd10      	popeq	{r4, pc}
    b6da:	2000      	movs	r0, #0
    b6dc:	68e1      	ldr	r1, [r4, #12]
    b6de:	f881 00a4 	strb.w	r0, [r1, #164]	; 0xa4
    b6e2:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    b6e6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    b6ea:	bd10      	pop	{r4, pc}
    b6ec:	20000144 	.word	0x20000144
    b6f0:	b510      	push	{r4, lr}
    b6f2:	4c12      	ldr	r4, [pc, #72]	; (b73c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1400>)
    b6f4:	2301      	movs	r3, #1
    b6f6:	2100      	movs	r1, #0
    b6f8:	68e0      	ldr	r0, [r4, #12]
    b6fa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b6fe:	3078      	adds	r0, #120	; 0x78
    b700:	f004 fe3d 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b704:	b168      	cbz	r0, b722 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13e6>
    b706:	68e0      	ldr	r0, [r4, #12]
    b708:	2100      	movs	r1, #0
    b70a:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    b70e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b712:	1c49      	adds	r1, r1, #1
    b714:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b718:	2110      	movs	r1, #16
    b71a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b71e:	2000      	movs	r0, #0
    b720:	bd10      	pop	{r4, pc}
    b722:	68e0      	ldr	r0, [r4, #12]
    b724:	2301      	movs	r3, #1
    b726:	2105      	movs	r1, #5
    b728:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b72c:	3078      	adds	r0, #120	; 0x78
    b72e:	f004 fe26 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b732:	2800      	cmp	r0, #0
    b734:	bf14      	ite	ne
    b736:	2008      	movne	r0, #8
    b738:	2001      	moveq	r0, #1
    b73a:	bd10      	pop	{r4, pc}
    b73c:	20000144 	.word	0x20000144
    b740:	4806      	ldr	r0, [pc, #24]	; (b75c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1420>)
    b742:	68c0      	ldr	r0, [r0, #12]
    b744:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b748:	2911      	cmp	r1, #17
    b74a:	bf1c      	itt	ne
    b74c:	2002      	movne	r0, #2
    b74e:	4770      	bxne	lr
    b750:	2112      	movs	r1, #18
    b752:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b756:	2000      	movs	r0, #0
    b758:	4770      	bx	lr
    b75a:	0000      	.short	0x0000
    b75c:	20000144 	.word	0x20000144
    b760:	b570      	push	{r4, r5, r6, lr}
    b762:	4c36      	ldr	r4, [pc, #216]	; (b83c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1500>)
    b764:	2301      	movs	r3, #1
    b766:	210b      	movs	r1, #11
    b768:	68e0      	ldr	r0, [r4, #12]
    b76a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b76e:	3078      	adds	r0, #120	; 0x78
    b770:	f004 fe05 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b774:	bb58      	cbnz	r0, b7ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1492>
    b776:	68e0      	ldr	r0, [r4, #12]
    b778:	2301      	movs	r3, #1
    b77a:	2100      	movs	r1, #0
    b77c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b780:	3078      	adds	r0, #120	; 0x78
    b782:	f004 fdfc 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b786:	2800      	cmp	r0, #0
    b788:	bf04      	itt	eq
    b78a:	2001      	moveq	r0, #1
    b78c:	bd70      	popeq	{r4, r5, r6, pc}
    b78e:	68e0      	ldr	r0, [r4, #12]
    b790:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    b794:	2824      	cmp	r0, #36	; 0x24
    b796:	d01a      	beq.n	b7ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1492>
    b798:	6960      	ldr	r0, [r4, #20]
    b79a:	f005 f8db 	bl	10954 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    b79e:	b1c0      	cbz	r0, b7d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1496>
    b7a0:	68e0      	ldr	r0, [r4, #12]
    b7a2:	2500      	movs	r5, #0
    b7a4:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b7a8:	f041 0104 	orr.w	r1, r1, #4
    b7ac:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b7b0:	6961      	ldr	r1, [r4, #20]
    b7b2:	794a      	ldrb	r2, [r1, #5]
    b7b4:	f002 0207 	and.w	r2, r2, #7
    b7b8:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
    b7bc:	7909      	ldrb	r1, [r1, #4]
    b7be:	f001 0107 	and.w	r1, r1, #7
    b7c2:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    b7c6:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    b7ca:	b133      	cbz	r3, b7da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x149e>
    b7cc:	e029      	b.n	b822 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b7ce:	2020      	movs	r0, #32
    b7d0:	bd70      	pop	{r4, r5, r6, pc}
    b7d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b7d6:	f7ff be87 	b.w	b4e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b7da:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    b7de:	2b01      	cmp	r3, #1
    b7e0:	d01f      	beq.n	b822 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b7e2:	f890 6067 	ldrb.w	r6, [r0, #103]	; 0x67
    b7e6:	f100 0366 	add.w	r3, r0, #102	; 0x66
    b7ea:	f04f 0c01 	mov.w	ip, #1
    b7ee:	428e      	cmp	r6, r1
    b7f0:	bf01      	itttt	eq
    b7f2:	7819      	ldrbeq	r1, [r3, #0]
    b7f4:	4291      	cmpeq	r1, r2
    b7f6:	2102      	moveq	r1, #2
    b7f8:	f880 11be 	strbeq.w	r1, [r0, #446]	; 0x1be
    b7fc:	d011      	beq.n	b822 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14e6>
    b7fe:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
    b802:	f880 c20c 	strb.w	ip, [r0, #524]	; 0x20c
    b806:	8802      	ldrh	r2, [r0, #0]
    b808:	f8a0 220e 	strh.w	r2, [r0, #526]	; 0x20e
    b80c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
    b810:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    b814:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    b818:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    b81c:	7960      	ldrb	r0, [r4, #5]
    b81e:	f7f7 ffa5 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b822:	68e0      	ldr	r0, [r4, #12]
    b824:	2121      	movs	r1, #33	; 0x21
    b826:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b82a:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    b82e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b832:	1c49      	adds	r1, r1, #1
    b834:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    b838:	2000      	movs	r0, #0
    b83a:	bd70      	pop	{r4, r5, r6, pc}
    b83c:	20000144 	.word	0x20000144
    b840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b844:	4c82      	ldr	r4, [pc, #520]	; (ba50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1714>)
    b846:	68e0      	ldr	r0, [r4, #12]
    b848:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    b84c:	2920      	cmp	r1, #32
    b84e:	bf0c      	ite	eq
    b850:	2501      	moveq	r5, #1
    b852:	2500      	movne	r5, #0
    b854:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b858:	2922      	cmp	r1, #34	; 0x22
    b85a:	bf08      	it	eq
    b85c:	f100 0685 	addeq.w	r6, r0, #133	; 0x85
    b860:	d006      	beq.n	b870 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1534>
    b862:	2d00      	cmp	r5, #0
    b864:	bf12      	itee	ne
    b866:	f100 0684 	addne.w	r6, r0, #132	; 0x84
    b86a:	2002      	moveq	r0, #2
    b86c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b870:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    b874:	f041 0104 	orr.w	r1, r1, #4
    b878:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b87c:	6960      	ldr	r0, [r4, #20]
    b87e:	f7fb f955 	bl	6b2c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    b882:	f04f 0a01 	mov.w	sl, #1
    b886:	f04f 0800 	mov.w	r8, #0
    b88a:	2800      	cmp	r0, #0
    b88c:	d052      	beq.n	b934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b88e:	6967      	ldr	r7, [r4, #20]
    b890:	4638      	mov	r0, r7
    b892:	f005 f832 	bl	108fa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    b896:	4681      	mov	r9, r0
    b898:	4638      	mov	r0, r7
    b89a:	f005 f83a 	bl	10912 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    b89e:	4607      	mov	r7, r0
    b8a0:	f004 fe21 	bl	104e6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b8a4:	b1e8      	cbz	r0, b8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b8a6:	68e2      	ldr	r2, [r4, #12]
    b8a8:	f892 1066 	ldrb.w	r1, [r2, #102]	; 0x66
    b8ac:	4281      	cmp	r1, r0
    b8ae:	d018      	beq.n	b8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b8b0:	f892 31be 	ldrb.w	r3, [r2, #446]	; 0x1be
    b8b4:	2b01      	cmp	r3, #1
    b8b6:	d028      	beq.n	b90a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ce>
    b8b8:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
    b8bc:	423b      	tst	r3, r7
    b8be:	d039      	beq.n	b934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b8c0:	2d00      	cmp	r5, #0
    b8c2:	bf04      	itt	eq
    b8c4:	f892 205f 	ldrbeq.w	r2, [r2, #95]	; 0x5f
    b8c8:	423a      	tsteq	r2, r7
    b8ca:	d10a      	bne.n	b8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b8cc:	b311      	cbz	r1, b914 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15d8>
    b8ce:	2904      	cmp	r1, #4
    b8d0:	bf18      	it	ne
    b8d2:	2804      	cmpne	r0, #4
    b8d4:	d023      	beq.n	b91e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e2>
    b8d6:	2908      	cmp	r1, #8
    b8d8:	bf18      	it	ne
    b8da:	2808      	cmpne	r0, #8
    b8dc:	d022      	beq.n	b924 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e8>
    b8de:	4281      	cmp	r1, r0
    b8e0:	d828      	bhi.n	b934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b8e2:	4648      	mov	r0, r9
    b8e4:	f004 fdff 	bl	104e6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    b8e8:	0001      	movs	r1, r0
    b8ea:	d040      	beq.n	b96e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b8ec:	68e0      	ldr	r0, [r4, #12]
    b8ee:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    b8f2:	428a      	cmp	r2, r1
    b8f4:	d03b      	beq.n	b96e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b8f6:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b8fa:	2901      	cmp	r1, #1
    b8fc:	d015      	beq.n	b92a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ee>
    b8fe:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    b902:	ea10 0f09 	tst.w	r0, r9
    b906:	d015      	beq.n	b934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b908:	e031      	b.n	b96e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b90a:	f892 31c0 	ldrb.w	r3, [r2, #448]	; 0x1c0
    b90e:	423b      	tst	r3, r7
    b910:	d1d6      	bne.n	b8c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1584>
    b912:	e00f      	b.n	b934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b914:	f240 1181 	movw	r1, #385	; 0x181
    b918:	2006      	movs	r0, #6
    b91a:	f7f8 f933 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b91e:	4281      	cmp	r1, r0
    b920:	d308      	bcc.n	b934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b922:	e7de      	b.n	b8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b924:	4281      	cmp	r1, r0
    b926:	d305      	bcc.n	b934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15f8>
    b928:	e7db      	b.n	b8e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a6>
    b92a:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    b92e:	ea10 0f09 	tst.w	r0, r9
    b932:	d11c      	bne.n	b96e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1632>
    b934:	68e0      	ldr	r0, [r4, #12]
    b936:	2700      	movs	r7, #0
    b938:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b93c:	2901      	cmp	r1, #1
    b93e:	bf0a      	itet	eq
    b940:	201e      	moveq	r0, #30
    b942:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    b946:	f7ff fc85 	bleq	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    b94a:	b38d      	cbz	r5, b9b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1674>
    b94c:	6960      	ldr	r0, [r4, #20]
    b94e:	78c1      	ldrb	r1, [r0, #3]
    b950:	68e0      	ldr	r0, [r4, #12]
    b952:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    b956:	fa0a f101 	lsl.w	r1, sl, r1
    b95a:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
    b95e:	d028      	beq.n	b9b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1676>
    b960:	210a      	movs	r1, #10
    b962:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    b966:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    b96a:	b338      	cbz	r0, b9bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1680>
    b96c:	e039      	b.n	b9e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16a6>
    b96e:	466a      	mov	r2, sp
    b970:	6961      	ldr	r1, [r4, #20]
    b972:	68e0      	ldr	r0, [r4, #12]
    b974:	f004 fe9a 	bl	106ac <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    b978:	b3b0      	cbz	r0, b9e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ac>
    b97a:	6960      	ldr	r0, [r4, #20]
    b97c:	f004 ffc7 	bl	1090e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    b980:	68e1      	ldr	r1, [r4, #12]
    b982:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    b986:	f8b1 2078 	ldrh.w	r2, [r1, #120]	; 0x78
    b98a:	1a80      	subs	r0, r0, r2
    b98c:	b200      	sxth	r0, r0
    b98e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    b992:	4282      	cmp	r2, r0
    b994:	bfa8      	it	ge
    b996:	2800      	cmpge	r0, #0
    b998:	dd3d      	ble.n	ba16 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16da>
    b99a:	f89d 0000 	ldrb.w	r0, [sp]
    b99e:	f881 01a6 	strb.w	r0, [r1, #422]	; 0x1a6
    b9a2:	f89d 0001 	ldrb.w	r0, [sp, #1]
    b9a6:	f881 01a7 	strb.w	r0, [r1, #423]	; 0x1a7
    b9aa:	2024      	movs	r0, #36	; 0x24
    b9ac:	7030      	strb	r0, [r6, #0]
    b9ae:	e037      	b.n	ba20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16e4>
    b9b0:	e009      	b.n	b9c6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x168a>
    b9b2:	f240 31c7 	movw	r1, #967	; 0x3c7
    b9b6:	2031      	movs	r0, #49	; 0x31
    b9b8:	f7f8 f8e4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9bc:	f240 31cf 	movw	r1, #975	; 0x3cf
    b9c0:	2031      	movs	r0, #49	; 0x31
    b9c2:	f7f8 f8df 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9c6:	f886 8000 	strb.w	r8, [r6]
    b9ca:	68e1      	ldr	r1, [r4, #12]
    b9cc:	f891 00b4 	ldrb.w	r0, [r1, #180]	; 0xb4
    b9d0:	1e40      	subs	r0, r0, #1
    b9d2:	b240      	sxtb	r0, r0
    b9d4:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    b9d8:	2800      	cmp	r0, #0
    b9da:	db31      	blt.n	ba40 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1704>
    b9dc:	f7ff fd84 	bl	b4e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ac>
    b9e0:	4607      	mov	r7, r0
    b9e2:	4638      	mov	r0, r7
    b9e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9e8:	e7ff      	b.n	b9ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ae>
    b9ea:	68e0      	ldr	r0, [r4, #12]
    b9ec:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    b9f0:	2901      	cmp	r1, #1
    b9f2:	bf18      	it	ne
    b9f4:	f880 81be 	strbne.w	r8, [r0, #446]	; 0x1be
    b9f8:	d007      	beq.n	ba0a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16ce>
    b9fa:	68e0      	ldr	r0, [r4, #12]
    b9fc:	f100 0185 	add.w	r1, r0, #133	; 0x85
    ba00:	428e      	cmp	r6, r1
    ba02:	bf08      	it	eq
    ba04:	f880 8085 	strbeq.w	r8, [r0, #133]	; 0x85
    ba08:	e00a      	b.n	ba20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16e4>
    ba0a:	2000      	movs	r0, #0
    ba0c:	f7ff fc22 	bl	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    ba10:	f886 8000 	strb.w	r8, [r6]
    ba14:	e7f1      	b.n	b9fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16be>
    ba16:	2028      	movs	r0, #40	; 0x28
    ba18:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    ba1c:	f881 a094 	strb.w	sl, [r1, #148]	; 0x94
    ba20:	68e0      	ldr	r0, [r4, #12]
    ba22:	f100 0185 	add.w	r1, r0, #133	; 0x85
    ba26:	428e      	cmp	r6, r1
    ba28:	bf18      	it	ne
    ba2a:	f880 80b0 	strbne.w	r8, [r0, #176]	; 0xb0
    ba2e:	d10c      	bne.n	ba4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x170e>
    ba30:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    ba34:	1e49      	subs	r1, r1, #1
    ba36:	b249      	sxtb	r1, r1
    ba38:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    ba3c:	2900      	cmp	r1, #0
    ba3e:	da04      	bge.n	ba4a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x170e>
    ba40:	f44f 71c8 	mov.w	r1, #400	; 0x190
    ba44:	2031      	movs	r0, #49	; 0x31
    ba46:	f7f8 f89d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba4a:	2000      	movs	r0, #0
    ba4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba50:	20000144 	.word	0x20000144
    ba54:	b510      	push	{r4, lr}
    ba56:	4c18      	ldr	r4, [pc, #96]	; (bab8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x177c>)
    ba58:	68e0      	ldr	r0, [r4, #12]
    ba5a:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    ba5e:	f041 0104 	orr.w	r1, r1, #4
    ba62:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    ba66:	6960      	ldr	r0, [r4, #20]
    ba68:	f004 ff88 	bl	1097c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    ba6c:	2816      	cmp	r0, #22
    ba6e:	d10a      	bne.n	ba86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174a>
    ba70:	6960      	ldr	r0, [r4, #20]
    ba72:	f004 ff85 	bl	10980 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    ba76:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    ba7a:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    ba7e:	2920      	cmp	r1, #32
    ba80:	d003      	beq.n	ba8a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x174e>
    ba82:	2926      	cmp	r1, #38	; 0x26
    ba84:	d004      	beq.n	ba90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1754>
    ba86:	2000      	movs	r0, #0
    ba88:	bd10      	pop	{r4, pc}
    ba8a:	f7ff fbe3 	bl	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    ba8e:	e00c      	b.n	baaa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x176e>
    ba90:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    ba94:	2301      	movs	r3, #1
    ba96:	210b      	movs	r1, #11
    ba98:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    ba9c:	f004 fc6f 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    baa0:	2800      	cmp	r0, #0
    baa2:	bf04      	itt	eq
    baa4:	202a      	moveq	r0, #42	; 0x2a
    baa6:	f7ff fbd5 	bleq	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    baaa:	2000      	movs	r0, #0
    baac:	68e1      	ldr	r1, [r4, #12]
    baae:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bab2:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    bab6:	bd10      	pop	{r4, pc}
    bab8:	20000144 	.word	0x20000144
    babc:	b510      	push	{r4, lr}
    babe:	4c12      	ldr	r4, [pc, #72]	; (bb08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17cc>)
    bac0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    bac4:	6960      	ldr	r0, [r4, #20]
    bac6:	f89c 1084 	ldrb.w	r1, [ip, #132]	; 0x84
    baca:	7900      	ldrb	r0, [r0, #4]
    bacc:	2920      	cmp	r1, #32
    bace:	d017      	beq.n	bb00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17c4>
    bad0:	2926      	cmp	r1, #38	; 0x26
    bad2:	bf1c      	itt	ne
    bad4:	2000      	movne	r0, #0
    bad6:	bd10      	popne	{r4, pc}
    bad8:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    badc:	2301      	movs	r3, #1
    bade:	210b      	movs	r1, #11
    bae0:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    bae4:	f004 fc4b 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bae8:	2800      	cmp	r0, #0
    baea:	bf04      	itt	eq
    baec:	202a      	moveq	r0, #42	; 0x2a
    baee:	f7ff fbb1 	bleq	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    baf2:	2000      	movs	r0, #0
    baf4:	68e1      	ldr	r1, [r4, #12]
    baf6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bafa:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    bafe:	bd10      	pop	{r4, pc}
    bb00:	f7ff fba8 	bl	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    bb04:	e7f5      	b.n	baf2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17b6>
    bb06:	0000      	.short	0x0000
    bb08:	20000144 	.word	0x20000144
    bb0c:	480d      	ldr	r0, [pc, #52]	; (bb44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1808>)
    bb0e:	b510      	push	{r4, lr}
    bb10:	68c0      	ldr	r0, [r0, #12]
    bb12:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bb16:	2917      	cmp	r1, #23
    bb18:	bf1c      	itt	ne
    bb1a:	2002      	movne	r0, #2
    bb1c:	bd10      	popne	{r4, pc}
    bb1e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bb22:	1e49      	subs	r1, r1, #1
    bb24:	b249      	sxtb	r1, r1
    bb26:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bb2a:	2900      	cmp	r1, #0
    bb2c:	da04      	bge.n	bb38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17fc>
    bb2e:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bb32:	2031      	movs	r0, #49	; 0x31
    bb34:	f7f8 f826 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb38:	211b      	movs	r1, #27
    bb3a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    bb3e:	2000      	movs	r0, #0
    bb40:	bd10      	pop	{r4, pc}
    bb42:	0000      	.short	0x0000
    bb44:	20000144 	.word	0x20000144
    bb48:	b510      	push	{r4, lr}
    bb4a:	4c0c      	ldr	r4, [pc, #48]	; (bb7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1840>)
    bb4c:	2301      	movs	r3, #1
    bb4e:	4619      	mov	r1, r3
    bb50:	68e0      	ldr	r0, [r4, #12]
    bb52:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    bb56:	3078      	adds	r0, #120	; 0x78
    bb58:	f004 fc11 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bb5c:	2800      	cmp	r0, #0
    bb5e:	bf1c      	itt	ne
    bb60:	2000      	movne	r0, #0
    bb62:	bd10      	popne	{r4, pc}
    bb64:	6960      	ldr	r0, [r4, #20]
    bb66:	f004 fed6 	bl	10916 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    bb6a:	68e1      	ldr	r1, [r4, #12]
    bb6c:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    bb70:	2007      	movs	r0, #7
    bb72:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    bb76:	2000      	movs	r0, #0
    bb78:	bd10      	pop	{r4, pc}
    bb7a:	0000      	.short	0x0000
    bb7c:	20000144 	.word	0x20000144
    bb80:	b570      	push	{r4, r5, r6, lr}
    bb82:	4c4c      	ldr	r4, [pc, #304]	; (bcb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1978>)
    bb84:	2600      	movs	r6, #0
    bb86:	4621      	mov	r1, r4
    bb88:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    bb8c:	6949      	ldr	r1, [r1, #20]
    bb8e:	2001      	movs	r0, #1
    bb90:	f89c 2084 	ldrb.w	r2, [ip, #132]	; 0x84
    bb94:	7909      	ldrb	r1, [r1, #4]
    bb96:	4635      	mov	r5, r6
    bb98:	2a0e      	cmp	r2, #14
    bb9a:	bf08      	it	eq
    bb9c:	2912      	cmpeq	r1, #18
    bb9e:	d01d      	beq.n	bbdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18a0>
    bba0:	2a1c      	cmp	r2, #28
    bba2:	bf08      	it	eq
    bba4:	2914      	cmpeq	r1, #20
    bba6:	d029      	beq.n	bbfc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18c0>
    bba8:	2a04      	cmp	r2, #4
    bbaa:	bf08      	it	eq
    bbac:	290e      	cmpeq	r1, #14
    bbae:	d043      	beq.n	bc38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18fc>
    bbb0:	2a20      	cmp	r2, #32
    bbb2:	bf08      	it	eq
    bbb4:	2916      	cmpeq	r1, #22
    bbb6:	d050      	beq.n	bc5a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x191e>
    bbb8:	2a26      	cmp	r2, #38	; 0x26
    bbba:	bf08      	it	eq
    bbbc:	2916      	cmpeq	r1, #22
    bbbe:	d04c      	beq.n	bc5a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x191e>
    bbc0:	2917      	cmp	r1, #23
    bbc2:	bf04      	itt	eq
    bbc4:	f89c 2085 	ldrbeq.w	r2, [ip, #133]	; 0x85
    bbc8:	2a22      	cmpeq	r2, #34	; 0x22
    bbca:	d059      	beq.n	bc80 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1944>
    bbcc:	69a2      	ldr	r2, [r4, #24]
    bbce:	2a00      	cmp	r2, #0
    bbd0:	d054      	beq.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bbd2:	29ff      	cmp	r1, #255	; 0xff
    bbd4:	bf08      	it	eq
    bbd6:	f88c 019e 	strbeq.w	r0, [ip, #414]	; 0x19e
    bbda:	e04f      	b.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bbdc:	2301      	movs	r3, #1
    bbde:	2109      	movs	r1, #9
    bbe0:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    bbe4:	f004 fbcb 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bbe8:	2800      	cmp	r0, #0
    bbea:	d047      	beq.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bbec:	68e0      	ldr	r0, [r4, #12]
    bbee:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    bbf2:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    bbf6:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    bbfa:	e03f      	b.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bbfc:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    bc00:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    bc04:	f89c 10be 	ldrb.w	r1, [ip, #190]	; 0xbe
    bc08:	f021 0120 	bic.w	r1, r1, #32
    bc0c:	f88c 10be 	strb.w	r1, [ip, #190]	; 0xbe
    bc10:	f89c 005c 	ldrb.w	r0, [ip, #92]	; 0x5c
    bc14:	2801      	cmp	r0, #1
    bc16:	bf04      	itt	eq
    bc18:	2002      	moveq	r0, #2
    bc1a:	f88c 005c 	strbeq.w	r0, [ip, #92]	; 0x5c
    bc1e:	d02d      	beq.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc20:	f8bc 0000 	ldrh.w	r0, [ip]
    bc24:	f50c 72f5 	add.w	r2, ip, #490	; 0x1ea
    bc28:	f10c 0128 	add.w	r1, ip, #40	; 0x28
    bc2c:	f005 f823 	bl	10c76 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    bc30:	7960      	ldrb	r0, [r4, #5]
    bc32:	f7f7 fd9b 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bc36:	e021      	b.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc38:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    bc3c:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    bc40:	f8bc 1000 	ldrh.w	r1, [ip]
    bc44:	f8ac 121e 	strh.w	r1, [ip, #542]	; 0x21e
    bc48:	211a      	movs	r1, #26
    bc4a:	f88c 121c 	strb.w	r1, [ip, #540]	; 0x21c
    bc4e:	f88c 021a 	strb.w	r0, [ip, #538]	; 0x21a
    bc52:	7960      	ldrb	r0, [r4, #5]
    bc54:	f7f7 fd8a 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bc58:	e010      	b.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc5a:	f88c 5084 	strb.w	r5, [ip, #132]	; 0x84
    bc5e:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    bc62:	f89c 0085 	ldrb.w	r0, [ip, #133]	; 0x85
    bc66:	2821      	cmp	r0, #33	; 0x21
    bc68:	d008      	beq.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bc6a:	f89c 00bf 	ldrb.w	r0, [ip, #191]	; 0xbf
    bc6e:	f020 0009 	bic.w	r0, r0, #9
    bc72:	f88c 00bf 	strb.w	r0, [ip, #191]	; 0xbf
    bc76:	201a      	movs	r0, #26
    bc78:	f7ff faec 	bl	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    bc7c:	4630      	mov	r0, r6
    bc7e:	bd70      	pop	{r4, r5, r6, pc}
    bc80:	f88c 5085 	strb.w	r5, [ip, #133]	; 0x85
    bc84:	f89c 00b4 	ldrb.w	r0, [ip, #180]	; 0xb4
    bc88:	1e40      	subs	r0, r0, #1
    bc8a:	b240      	sxtb	r0, r0
    bc8c:	f88c 00b4 	strb.w	r0, [ip, #180]	; 0xb4
    bc90:	2800      	cmp	r0, #0
    bc92:	da04      	bge.n	bc9e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1962>
    bc94:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bc98:	2031      	movs	r0, #49	; 0x31
    bc9a:	f7f7 ff73 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc9e:	f89c 01be 	ldrb.w	r0, [ip, #446]	; 0x1be
    bca2:	2801      	cmp	r0, #1
    bca4:	bf04      	itt	eq
    bca6:	2000      	moveq	r0, #0
    bca8:	f7ff fad4 	bleq	b254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf18>
    bcac:	68e0      	ldr	r0, [r4, #12]
    bcae:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    bcb2:	e7e3      	b.n	bc7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1940>
    bcb4:	20000144 	.word	0x20000144
    bcb8:	b570      	push	{r4, r5, r6, lr}
    bcba:	4c33      	ldr	r4, [pc, #204]	; (bd88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a4c>)
    bcbc:	68e0      	ldr	r0, [r4, #12]
    bcbe:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bcc2:	f011 0f02 	tst.w	r1, #2
    bcc6:	d00a      	beq.n	bcde <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19a2>
    bcc8:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bccc:	2301      	movs	r3, #1
    bcce:	2108      	movs	r1, #8
    bcd0:	3078      	adds	r0, #120	; 0x78
    bcd2:	f004 fb54 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bcd6:	2800      	cmp	r0, #0
    bcd8:	bf04      	itt	eq
    bcda:	2001      	moveq	r0, #1
    bcdc:	bd70      	popeq	{r4, r5, r6, pc}
    bcde:	68e0      	ldr	r0, [r4, #12]
    bce0:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
    bce4:	f010 0f02 	tst.w	r0, #2
    bce8:	d114      	bne.n	bd14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d8>
    bcea:	6960      	ldr	r0, [r4, #20]
    bcec:	f004 fe15 	bl	1091a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    bcf0:	68e1      	ldr	r1, [r4, #12]
    bcf2:	f881 00b9 	strb.w	r0, [r1, #185]	; 0xb9
    bcf6:	6960      	ldr	r0, [r4, #20]
    bcf8:	f8b0 2005 	ldrh.w	r2, [r0, #5]
    bcfc:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    bd00:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    bd04:	f8a1 00bc 	strh.w	r0, [r1, #188]	; 0xbc
    bd08:	f891 00b8 	ldrb.w	r0, [r1, #184]	; 0xb8
    bd0c:	f040 0002 	orr.w	r0, r0, #2
    bd10:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    bd14:	68e0      	ldr	r0, [r4, #12]
    bd16:	f04f 0500 	mov.w	r5, #0
    bd1a:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    bd1e:	f011 0f01 	tst.w	r1, #1
    bd22:	d114      	bne.n	bd4e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a12>
    bd24:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bd28:	f011 0f02 	tst.w	r1, #2
    bd2c:	d004      	beq.n	bd38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19fc>
    bd2e:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    bd32:	2031      	movs	r0, #49	; 0x31
    bd34:	f7f7 ff26 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd38:	f041 0102 	orr.w	r1, r1, #2
    bd3c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    bd40:	f8a0 50b2 	strh.w	r5, [r0, #178]	; 0xb2
    bd44:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    bd48:	1c49      	adds	r1, r1, #1
    bd4a:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bd4e:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    bd52:	2906      	cmp	r1, #6
    bd54:	d106      	bne.n	bd64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a28>
    bd56:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    bd5a:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    bd5e:	7960      	ldrb	r0, [r4, #5]
    bd60:	f7f7 fd04 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bd64:	68e0      	ldr	r0, [r4, #12]
    bd66:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    bd6a:	b159      	cbz	r1, bd84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a48>
    bd6c:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    bd70:	7960      	ldrb	r0, [r4, #5]
    bd72:	f7f7 fcfb 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bd76:	68e0      	ldr	r0, [r4, #12]
    bd78:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    bd7c:	2900      	cmp	r1, #0
    bd7e:	bf08      	it	eq
    bd80:	f880 50b0 	strbeq.w	r5, [r0, #176]	; 0xb0
    bd84:	2000      	movs	r0, #0
    bd86:	bd70      	pop	{r4, r5, r6, pc}
    bd88:	20000144 	.word	0x20000144
    bd8c:	4809      	ldr	r0, [pc, #36]	; (bdb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a78>)
    bd8e:	b510      	push	{r4, lr}
    bd90:	68c0      	ldr	r0, [r0, #12]
    bd92:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bd96:	2914      	cmp	r1, #20
    bd98:	d004      	beq.n	bda4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a68>
    bd9a:	f240 6187 	movw	r1, #1671	; 0x687
    bd9e:	2031      	movs	r0, #49	; 0x31
    bda0:	f7f7 fef0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bda4:	2101      	movs	r1, #1
    bda6:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    bdaa:	2115      	movs	r1, #21
    bdac:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    bdb0:	bd10      	pop	{r4, pc}
    bdb2:	0000      	.short	0x0000
    bdb4:	20000144 	.word	0x20000144
    bdb8:	480f      	ldr	r0, [pc, #60]	; (bdf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1abc>)
    bdba:	b510      	push	{r4, lr}
    bdbc:	68c0      	ldr	r0, [r0, #12]
    bdbe:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bdc2:	f011 0f01 	tst.w	r1, #1
    bdc6:	d011      	beq.n	bdec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ab0>
    bdc8:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    bdcc:	1e52      	subs	r2, r2, #1
    bdce:	b252      	sxtb	r2, r2
    bdd0:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    bdd4:	2a00      	cmp	r2, #0
    bdd6:	bfa2      	ittt	ge
    bdd8:	f021 0101 	bicge.w	r1, r1, #1
    bddc:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    bde0:	bd10      	popge	{r4, pc}
    bde2:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bde6:	2031      	movs	r0, #49	; 0x31
    bde8:	f7f7 fecc 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdec:	f44f 61ce 	mov.w	r1, #1648	; 0x670
    bdf0:	2031      	movs	r0, #49	; 0x31
    bdf2:	f7f7 fec7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdf6:	0000      	.short	0x0000
    bdf8:	20000144 	.word	0x20000144
    bdfc:	b510      	push	{r4, lr}
    bdfe:	4c0a      	ldr	r4, [pc, #40]	; (be28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aec>)
    be00:	2301      	movs	r3, #1
    be02:	2100      	movs	r1, #0
    be04:	68e0      	ldr	r0, [r4, #12]
    be06:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    be0a:	3078      	adds	r0, #120	; 0x78
    be0c:	f004 fab7 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    be10:	b120      	cbz	r0, be1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ae0>
    be12:	68e1      	ldr	r1, [r4, #12]
    be14:	201c      	movs	r0, #28
    be16:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    be1a:	bd10      	pop	{r4, pc}
    be1c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    be20:	2031      	movs	r0, #49	; 0x31
    be22:	f7f7 feaf 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be26:	0000      	.short	0x0000
    be28:	20000144 	.word	0x20000144
    be2c:	480f      	ldr	r0, [pc, #60]	; (be6c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b30>)
    be2e:	b510      	push	{r4, lr}
    be30:	68c0      	ldr	r0, [r0, #12]
    be32:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    be36:	f001 0230 	and.w	r2, r1, #48	; 0x30
    be3a:	2a10      	cmp	r2, #16
    be3c:	d004      	beq.n	be48 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0c>
    be3e:	f240 61fc 	movw	r1, #1788	; 0x6fc
    be42:	2031      	movs	r0, #49	; 0x31
    be44:	f7f7 fe9e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be48:	f021 0110 	bic.w	r1, r1, #16
    be4c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    be50:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    be54:	1e49      	subs	r1, r1, #1
    be56:	b249      	sxtb	r1, r1
    be58:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    be5c:	2900      	cmp	r1, #0
    be5e:	bfa8      	it	ge
    be60:	bd10      	popge	{r4, pc}
    be62:	f44f 71c8 	mov.w	r1, #400	; 0x190
    be66:	2031      	movs	r0, #49	; 0x31
    be68:	f7f7 fe8c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be6c:	20000144 	.word	0x20000144
    be70:	b510      	push	{r4, lr}
    be72:	4c0a      	ldr	r4, [pc, #40]	; (be9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b60>)
    be74:	2301      	movs	r3, #1
    be76:	2100      	movs	r1, #0
    be78:	68e0      	ldr	r0, [r4, #12]
    be7a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    be7e:	3078      	adds	r0, #120	; 0x78
    be80:	f004 fa7d 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    be84:	b120      	cbz	r0, be90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b54>
    be86:	68e1      	ldr	r1, [r4, #12]
    be88:	200e      	movs	r0, #14
    be8a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    be8e:	bd10      	pop	{r4, pc}
    be90:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    be94:	2031      	movs	r0, #49	; 0x31
    be96:	f7f7 fe75 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be9a:	0000      	.short	0x0000
    be9c:	20000144 	.word	0x20000144
    bea0:	480b      	ldr	r0, [pc, #44]	; (bed0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b94>)
    bea2:	68c0      	ldr	r0, [r0, #12]
    bea4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bea8:	f021 0104 	bic.w	r1, r1, #4
    beac:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    beb0:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    beb4:	1e49      	subs	r1, r1, #1
    beb6:	b249      	sxtb	r1, r1
    beb8:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    bebc:	2900      	cmp	r1, #0
    bebe:	bfa8      	it	ge
    bec0:	4770      	bxge	lr
    bec2:	b510      	push	{r4, lr}
    bec4:	f44f 71c8 	mov.w	r1, #400	; 0x190
    bec8:	2031      	movs	r0, #49	; 0x31
    beca:	f7f7 fe5b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bece:	0000      	.short	0x0000
    bed0:	20000144 	.word	0x20000144
    bed4:	4809      	ldr	r0, [pc, #36]	; (befc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bc0>)
    bed6:	b510      	push	{r4, lr}
    bed8:	68c0      	ldr	r0, [r0, #12]
    beda:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bede:	2910      	cmp	r1, #16
    bee0:	d004      	beq.n	beec <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb0>
    bee2:	f240 617f 	movw	r1, #1663	; 0x67f
    bee6:	2031      	movs	r0, #49	; 0x31
    bee8:	f7f7 fe4c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    beec:	2101      	movs	r1, #1
    beee:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
    bef2:	2111      	movs	r1, #17
    bef4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    bef8:	bd10      	pop	{r4, pc}
    befa:	0000      	.short	0x0000
    befc:	20000144 	.word	0x20000144
    bf00:	b510      	push	{r4, lr}
    bf02:	4c0a      	ldr	r4, [pc, #40]	; (bf2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bf0>)
    bf04:	2301      	movs	r3, #1
    bf06:	2100      	movs	r1, #0
    bf08:	68e0      	ldr	r0, [r4, #12]
    bf0a:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    bf0e:	3078      	adds	r0, #120	; 0x78
    bf10:	f004 fa35 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    bf14:	b120      	cbz	r0, bf20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1be4>
    bf16:	68e1      	ldr	r1, [r4, #12]
    bf18:	201f      	movs	r0, #31
    bf1a:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    bf1e:	bd10      	pop	{r4, pc}
    bf20:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    bf24:	2031      	movs	r0, #49	; 0x31
    bf26:	f7f7 fe2d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf2a:	0000      	.short	0x0000
    bf2c:	20000144 	.word	0x20000144
    bf30:	4808      	ldr	r0, [pc, #32]	; (bf54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c18>)
    bf32:	b510      	push	{r4, lr}
    bf34:	68c0      	ldr	r0, [r0, #12]
    bf36:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bf3a:	2921      	cmp	r1, #33	; 0x21
    bf3c:	bf11      	iteee	ne
    bf3e:	2900      	cmpne	r1, #0
    bf40:	2122      	moveq	r1, #34	; 0x22
    bf42:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bf46:	bd10      	popeq	{r4, pc}
    bf48:	f240 710f 	movw	r1, #1807	; 0x70f
    bf4c:	f04f 0031 	mov.w	r0, #49	; 0x31
    bf50:	f7f7 fe18 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf54:	20000144 	.word	0x20000144
    bf58:	4807      	ldr	r0, [pc, #28]	; (bf78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c3c>)
    bf5a:	b510      	push	{r4, lr}
    bf5c:	68c0      	ldr	r0, [r0, #12]
    bf5e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bf62:	2915      	cmp	r1, #21
    bf64:	bf02      	ittt	eq
    bf66:	2119      	moveq	r1, #25
    bf68:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bf6c:	bd10      	popeq	{r4, pc}
    bf6e:	f240 6194 	movw	r1, #1684	; 0x694
    bf72:	2031      	movs	r0, #49	; 0x31
    bf74:	f7f7 fe06 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf78:	20000144 	.word	0x20000144
    bf7c:	4807      	ldr	r0, [pc, #28]	; (bf9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c60>)
    bf7e:	b510      	push	{r4, lr}
    bf80:	68c0      	ldr	r0, [r0, #12]
    bf82:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bf86:	2915      	cmp	r1, #21
    bf88:	bf02      	ittt	eq
    bf8a:	2117      	moveq	r1, #23
    bf8c:	f880 1085 	strbeq.w	r1, [r0, #133]	; 0x85
    bf90:	bd10      	popeq	{r4, pc}
    bf92:	f240 618e 	movw	r1, #1678	; 0x68e
    bf96:	2031      	movs	r0, #49	; 0x31
    bf98:	f7f7 fdf4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf9c:	20000144 	.word	0x20000144
    bfa0:	b570      	push	{r4, r5, r6, lr}
    bfa2:	4d1c      	ldr	r5, [pc, #112]	; (c014 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cd8>)
    bfa4:	68e8      	ldr	r0, [r5, #12]
    bfa6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    bfaa:	291b      	cmp	r1, #27
    bfac:	d004      	beq.n	bfb8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c7c>
    bfae:	f240 61ae 	movw	r1, #1710	; 0x6ae
    bfb2:	2031      	movs	r0, #49	; 0x31
    bfb4:	f7f7 fde6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfb8:	2400      	movs	r4, #0
    bfba:	f880 40b5 	strb.w	r4, [r0, #181]	; 0xb5
    bfbe:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    bfc2:	b121      	cbz	r1, bfce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c92>
    bfc4:	f240 61b2 	movw	r1, #1714	; 0x6b2
    bfc8:	2031      	movs	r0, #49	; 0x31
    bfca:	f7f7 fddb 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfce:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    bfd2:	b141      	cbz	r1, bfe6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1caa>
    bfd4:	f880 40b6 	strb.w	r4, [r0, #182]	; 0xb6
    bfd8:	8801      	ldrh	r1, [r0, #0]
    bfda:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    bfde:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    bfe2:	210e      	movs	r1, #14
    bfe4:	e008      	b.n	bff8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cbc>
    bfe6:	8801      	ldrh	r1, [r0, #0]
    bfe8:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    bfec:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    bff0:	2101      	movs	r1, #1
    bff2:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    bff6:	210d      	movs	r1, #13
    bff8:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    bffc:	8800      	ldrh	r0, [r0, #0]
    bffe:	f7f8 f99b 	bl	4338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    c002:	f003 ff08 	bl	fe16 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    c006:	7968      	ldrb	r0, [r5, #5]
    c008:	f7f7 fbb0 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c00c:	68e8      	ldr	r0, [r5, #12]
    c00e:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    c012:	bd70      	pop	{r4, r5, r6, pc}
    c014:	20000144 	.word	0x20000144
    c018:	b510      	push	{r4, lr}
    c01a:	4c08      	ldr	r4, [pc, #32]	; (c03c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d00>)
    c01c:	2301      	movs	r3, #1
    c01e:	4619      	mov	r1, r3
    c020:	68e0      	ldr	r0, [r4, #12]
    c022:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    c026:	3078      	adds	r0, #120	; 0x78
    c028:	f004 f9a9 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c02c:	2800      	cmp	r0, #0
    c02e:	bf18      	it	ne
    c030:	bd10      	popne	{r4, pc}
    c032:	2008      	movs	r0, #8
    c034:	68e1      	ldr	r1, [r4, #12]
    c036:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    c03a:	bd10      	pop	{r4, pc}
    c03c:	20000144 	.word	0x20000144
    c040:	481b      	ldr	r0, [pc, #108]	; (c0b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d74>)
    c042:	b510      	push	{r4, lr}
    c044:	6901      	ldr	r1, [r0, #16]
    c046:	68c0      	ldr	r0, [r0, #12]
    c048:	2200      	movs	r2, #0
    c04a:	7909      	ldrb	r1, [r1, #4]
    c04c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    c050:	2b0a      	cmp	r3, #10
    c052:	bf01      	itttt	eq
    c054:	f890 30f2 	ldrbeq.w	r3, [r0, #242]	; 0xf2
    c058:	428b      	cmpeq	r3, r1
    c05a:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    c05e:	f880 20b0 	strbeq.w	r2, [r0, #176]	; 0xb0
    c062:	bf08      	it	eq
    c064:	bd10      	popeq	{r4, pc}
    c066:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    c06a:	f013 0f08 	tst.w	r3, #8
    c06e:	d012      	beq.n	c096 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d5a>
    c070:	f023 0108 	bic.w	r1, r3, #8
    c074:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    c078:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    c07c:	f1a1 0101 	sub.w	r1, r1, #1
    c080:	b249      	sxtb	r1, r1
    c082:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    c086:	2900      	cmp	r1, #0
    c088:	bfa8      	it	ge
    c08a:	bd10      	popge	{r4, pc}
    c08c:	f44f 71c8 	mov.w	r1, #400	; 0x190
    c090:	2031      	movs	r0, #49	; 0x31
    c092:	f7f7 fd77 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c096:	29ff      	cmp	r1, #255	; 0xff
    c098:	d004      	beq.n	c0a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d68>
    c09a:	f240 616a 	movw	r1, #1642	; 0x66a
    c09e:	2031      	movs	r0, #49	; 0x31
    c0a0:	f7f7 fd70 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0a4:	2127      	movs	r1, #39	; 0x27
    c0a6:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    c0aa:	f880 219c 	strb.w	r2, [r0, #412]	; 0x19c
    c0ae:	bd10      	pop	{r4, pc}
    c0b0:	20000144 	.word	0x20000144
    c0b4:	b510      	push	{r4, lr}
    c0b6:	4c1b      	ldr	r4, [pc, #108]	; (c124 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1de8>)
    c0b8:	68e0      	ldr	r0, [r4, #12]
    c0ba:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    c0be:	f011 0f02 	tst.w	r1, #2
    c0c2:	d01d      	beq.n	c100 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dc4>
    c0c4:	2100      	movs	r1, #0
    c0c6:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    c0ca:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    c0ce:	68e0      	ldr	r0, [r4, #12]
    c0d0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    c0d4:	f011 0f02 	tst.w	r1, #2
    c0d8:	bf08      	it	eq
    c0da:	bd10      	popeq	{r4, pc}
    c0dc:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
    c0e0:	1e52      	subs	r2, r2, #1
    c0e2:	b252      	sxtb	r2, r2
    c0e4:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
    c0e8:	2a00      	cmp	r2, #0
    c0ea:	bfa2      	ittt	ge
    c0ec:	f021 0102 	bicge.w	r1, r1, #2
    c0f0:	f880 1086 	strbge.w	r1, [r0, #134]	; 0x86
    c0f4:	bd10      	popge	{r4, pc}
    c0f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
    c0fa:	2031      	movs	r0, #49	; 0x31
    c0fc:	f7f7 fd42 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c100:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c104:	2301      	movs	r3, #1
    c106:	2100      	movs	r1, #0
    c108:	3078      	adds	r0, #120	; 0x78
    c10a:	f004 f938 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c10e:	b120      	cbz	r0, c11a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dde>
    c110:	68e1      	ldr	r1, [r4, #12]
    c112:	2006      	movs	r0, #6
    c114:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c118:	e7d9      	b.n	c0ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d92>
    c11a:	f240 61d4 	movw	r1, #1748	; 0x6d4
    c11e:	2031      	movs	r0, #49	; 0x31
    c120:	f7f7 fd30 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c124:	20000144 	.word	0x20000144

0000c128 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    c128:	4804      	ldr	r0, [pc, #16]	; (c13c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x14>)
    c12a:	6840      	ldr	r0, [r0, #4]
    c12c:	7801      	ldrb	r1, [r0, #0]
    c12e:	2900      	cmp	r1, #0
    c130:	bf14      	ite	ne
    c132:	8880      	ldrhne	r0, [r0, #4]
    c134:	f64f 70ff 	movweq	r0, #65535	; 0xffff
    c138:	4770      	bx	lr
    c13a:	0000      	.short	0x0000
    c13c:	2000022c 	.word	0x2000022c

0000c140 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>:
    c140:	4902      	ldr	r1, [pc, #8]	; (c14c <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY+0xc>)
    c142:	6849      	ldr	r1, [r1, #4]
    c144:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    c148:	4770      	bx	lr
    c14a:	0000      	.short	0x0000
    c14c:	2000022c 	.word	0x2000022c

0000c150 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    c150:	4802      	ldr	r0, [pc, #8]	; (c15c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    c152:	6840      	ldr	r0, [r0, #4]
    c154:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    c158:	4770      	bx	lr
    c15a:	0000      	.short	0x0000
    c15c:	2000022c 	.word	0x2000022c

0000c160 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    c160:	480c      	ldr	r0, [pc, #48]	; (c194 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
    c162:	6841      	ldr	r1, [r0, #4]
    c164:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    c168:	2803      	cmp	r0, #3
    c16a:	d004      	beq.n	c176 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    c16c:	2801      	cmp	r0, #1
    c16e:	bf18      	it	ne
    c170:	2802      	cmpne	r0, #2
    c172:	d007      	beq.n	c184 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    c174:	e004      	b.n	c180 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    c176:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    c17a:	2801      	cmp	r0, #1
    c17c:	bf08      	it	eq
    c17e:	4770      	bxeq	lr
    c180:	2000      	movs	r0, #0
    c182:	4770      	bx	lr
    c184:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    c188:	2801      	cmp	r0, #1
    c18a:	bf14      	ite	ne
    c18c:	2803      	cmpne	r0, #3
    c18e:	2001      	moveq	r0, #1
    c190:	d1f6      	bne.n	c180 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
    c192:	4770      	bx	lr
    c194:	2000022c 	.word	0x2000022c

0000c198 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>:
    c198:	4806      	ldr	r0, [pc, #24]	; (c1b4 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA+0x1c>)
    c19a:	7800      	ldrb	r0, [r0, #0]
    c19c:	2800      	cmp	r0, #0
    c19e:	bf1c      	itt	ne
    c1a0:	2000      	movne	r0, #0
    c1a2:	4770      	bxne	lr
    c1a4:	b510      	push	{r4, lr}
    c1a6:	2000      	movs	r0, #0
    c1a8:	f003 ff67 	bl	1007a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    c1ac:	f080 0001 	eor.w	r0, r0, #1
    c1b0:	bd10      	pop	{r4, pc}
    c1b2:	0000      	.short	0x0000
    c1b4:	2000166c 	.word	0x2000166c

0000c1b8 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA>:
    c1b8:	4901      	ldr	r1, [pc, #4]	; (c1c0 <sym_GF2KXTTMDWAZ6UYJ4CE5MONVFRL2IKMTPAUESVA+0x8>)
    c1ba:	6048      	str	r0, [r1, #4]
    c1bc:	4770      	bx	lr
    c1be:	0000      	.short	0x0000
    c1c0:	20001650 	.word	0x20001650

0000c1c4 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    c1c4:	4901      	ldr	r1, [pc, #4]	; (c1cc <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    c1c6:	7048      	strb	r0, [r1, #1]
    c1c8:	4770      	bx	lr
    c1ca:	0000      	.short	0x0000
    c1cc:	20001650 	.word	0x20001650

0000c1d0 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    c1d0:	4905      	ldr	r1, [pc, #20]	; (c1e8 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x18>)
    c1d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c1d6:	fbb1 f1f2 	udiv	r1, r1, r2
    c1da:	b510      	push	{r4, lr}
    c1dc:	f201 11df 	addw	r1, r1, #479	; 0x1df
    c1e0:	f004 fe76 	bl	10ed0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    c1e4:	b280      	uxth	r0, r0
    c1e6:	bd10      	pop	{r4, pc}
    c1e8:	00012105 	.word	0x00012105

0000c1ec <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    c1ec:	4801      	ldr	r0, [pc, #4]	; (c1f4 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    c1ee:	7800      	ldrb	r0, [r0, #0]
    c1f0:	4770      	bx	lr
    c1f2:	0000      	.short	0x0000
    c1f4:	2000166c 	.word	0x2000166c

0000c1f8 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>:
    c1f8:	4a01      	ldr	r2, [pc, #4]	; (c200 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ+0x8>)
    c1fa:	e9c2 0105 	strd	r0, r1, [r2, #20]
    c1fe:	4770      	bx	lr
    c200:	2000023c 	.word	0x2000023c

0000c204 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    c204:	4806      	ldr	r0, [pc, #24]	; (c220 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    c206:	4905      	ldr	r1, [pc, #20]	; (c21c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    c208:	6501      	str	r1, [r0, #80]	; 0x50
    c20a:	4906      	ldr	r1, [pc, #24]	; (c224 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    c20c:	6541      	str	r1, [r0, #84]	; 0x54
    c20e:	4807      	ldr	r0, [pc, #28]	; (c22c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    c210:	4905      	ldr	r1, [pc, #20]	; (c228 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    c212:	6501      	str	r1, [r0, #80]	; 0x50
    c214:	4906      	ldr	r1, [pc, #24]	; (c230 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    c216:	6541      	str	r1, [r0, #84]	; 0x54
    c218:	4770      	bx	lr
    c21a:	0000      	.short	0x0000
    c21c:	0000c339 	.word	0x0000c339
    c220:	20000258 	.word	0x20000258
    c224:	0000c3f9 	.word	0x0000c3f9
    c228:	0000c63d 	.word	0x0000c63d
    c22c:	200002bc 	.word	0x200002bc
    c230:	0000c66d 	.word	0x0000c66d

0000c234 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    c234:	4806      	ldr	r0, [pc, #24]	; (c250 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    c236:	4905      	ldr	r1, [pc, #20]	; (c24c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    c238:	6581      	str	r1, [r0, #88]	; 0x58
    c23a:	4906      	ldr	r1, [pc, #24]	; (c254 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    c23c:	65c1      	str	r1, [r0, #92]	; 0x5c
    c23e:	4807      	ldr	r0, [pc, #28]	; (c25c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    c240:	4905      	ldr	r1, [pc, #20]	; (c258 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    c242:	6581      	str	r1, [r0, #88]	; 0x58
    c244:	4906      	ldr	r1, [pc, #24]	; (c260 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    c246:	6601      	str	r1, [r0, #96]	; 0x60
    c248:	4770      	bx	lr
    c24a:	0000      	.short	0x0000
    c24c:	0000c489 	.word	0x0000c489
    c250:	20000258 	.word	0x20000258
    c254:	0000c59d 	.word	0x0000c59d
    c258:	0000c69d 	.word	0x0000c69d
    c25c:	200002bc 	.word	0x200002bc
    c260:	0000c6cd 	.word	0x0000c6cd
    c264:	4a15      	ldr	r2, [pc, #84]	; (c2bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x88>)
    c266:	b510      	push	{r4, lr}
    c268:	6891      	ldr	r1, [r2, #8]
    c26a:	880b      	ldrh	r3, [r1, #0]
    c26c:	f8a1 3178 	strh.w	r3, [r1, #376]	; 0x178
    c270:	f881 0176 	strb.w	r0, [r1, #374]	; 0x176
    c274:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    c278:	2801      	cmp	r0, #1
    c27a:	bf18      	it	ne
    c27c:	2802      	cmpne	r0, #2
    c27e:	d005      	beq.n	c28c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x58>
    c280:	f240 218f 	movw	r1, #655	; 0x28f
    c284:	f04f 0006 	mov.w	r0, #6
    c288:	f7f7 fc7c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c28c:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    c290:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    c294:	2801      	cmp	r0, #1
    c296:	bf18      	it	ne
    c298:	2802      	cmpne	r0, #2
    c29a:	d1f1      	bne.n	c280 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4c>
    c29c:	f881 017b 	strb.w	r0, [r1, #379]	; 0x17b
    c2a0:	f04f 0001 	mov.w	r0, #1
    c2a4:	f881 0174 	strb.w	r0, [r1, #372]	; 0x174
    c2a8:	f04f 0000 	mov.w	r0, #0
    c2ac:	f881 0142 	strb.w	r0, [r1, #322]	; 0x142
    c2b0:	78d0      	ldrb	r0, [r2, #3]
    c2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2b6:	f7f7 ba59 	b.w	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c2ba:	0000      	.short	0x0000
    c2bc:	2000023c 	.word	0x2000023c
    c2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2c4:	4c1b      	ldr	r4, [pc, #108]	; (c334 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x100>)
    c2c6:	2600      	movs	r6, #0
    c2c8:	2703      	movs	r7, #3
    c2ca:	f8d4 c008 	ldr.w	ip, [r4, #8]
    c2ce:	2501      	movs	r5, #1
    c2d0:	b1a0      	cbz	r0, c2fc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xc8>
    c2d2:	6920      	ldr	r0, [r4, #16]
    c2d4:	78c0      	ldrb	r0, [r0, #3]
    c2d6:	f88c 00f2 	strb.w	r0, [ip, #242]	; 0xf2
    c2da:	fa05 f000 	lsl.w	r0, r5, r0
    c2de:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c2e2:	d006      	beq.n	c2f2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xbe>
    c2e4:	f88c 7084 	strb.w	r7, [ip, #132]	; 0x84
    c2e8:	f8ac 60ac 	strh.w	r6, [ip, #172]	; 0xac
    c2ec:	f88c 50b0 	strb.w	r5, [ip, #176]	; 0xb0
    c2f0:	e01c      	b.n	c32c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0xf8>
    c2f2:	f240 5159 	movw	r1, #1369	; 0x559
    c2f6:	2036      	movs	r0, #54	; 0x36
    c2f8:	f7f7 fc44 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2fc:	2300      	movs	r3, #0
    c2fe:	f89c 2085 	ldrb.w	r2, [ip, #133]	; 0x85
    c302:	4619      	mov	r1, r3
    c304:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    c308:	f004 f839 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c30c:	2800      	cmp	r0, #0
    c30e:	bf04      	itt	eq
    c310:	2001      	moveq	r0, #1
    c312:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    c316:	6920      	ldr	r0, [r4, #16]
    c318:	78c1      	ldrb	r1, [r0, #3]
    c31a:	68a0      	ldr	r0, [r4, #8]
    c31c:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    c320:	f880 7085 	strb.w	r7, [r0, #133]	; 0x85
    c324:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
    c328:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c32c:	2000      	movs	r0, #0
    c32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c332:	0000      	.short	0x0000
    c334:	2000023c 	.word	0x2000023c
    c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c33a:	4c2e      	ldr	r4, [pc, #184]	; (c3f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c0>)
    c33c:	2300      	movs	r3, #0
    c33e:	4619      	mov	r1, r3
    c340:	68a0      	ldr	r0, [r4, #8]
    c342:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c346:	3078      	adds	r0, #120	; 0x78
    c348:	f004 f819 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c34c:	2800      	cmp	r0, #0
    c34e:	bf04      	itt	eq
    c350:	2001      	moveq	r0, #1
    c352:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    c354:	6920      	ldr	r0, [r4, #16]
    c356:	f004 fae2 	bl	1091e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    c35a:	2800      	cmp	r0, #0
    c35c:	d02f      	beq.n	c3be <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18a>
    c35e:	6920      	ldr	r0, [r4, #16]
    c360:	f004 facf 	bl	10902 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    c364:	4605      	mov	r5, r0
    c366:	6920      	ldr	r0, [r4, #16]
    c368:	f004 facf 	bl	1090a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    c36c:	4606      	mov	r6, r0
    c36e:	6920      	ldr	r0, [r4, #16]
    c370:	f004 fac5 	bl	108fe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    c374:	4607      	mov	r7, r0
    c376:	6920      	ldr	r0, [r4, #16]
    c378:	f004 fac5 	bl	10906 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    c37c:	4601      	mov	r1, r0
    c37e:	9500      	str	r5, [sp, #0]
    c380:	68a0      	ldr	r0, [r4, #8]
    c382:	4633      	mov	r3, r6
    c384:	463a      	mov	r2, r7
    c386:	3028      	adds	r0, #40	; 0x28
    c388:	f004 fdad 	bl	10ee6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    c38c:	68a1      	ldr	r1, [r4, #8]
    c38e:	2501      	movs	r5, #1
    c390:	f891 0084 	ldrb.w	r0, [r1, #132]	; 0x84
    c394:	281c      	cmp	r0, #28
    c396:	bf16      	itet	ne
    c398:	f891 005c 	ldrbne.w	r0, [r1, #92]	; 0x5c
    c39c:	f881 505c 	strbeq.w	r5, [r1, #92]	; 0x5c
    c3a0:	2801      	cmpne	r0, #1
    c3a2:	d007      	beq.n	c3b4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x180>
    c3a4:	f891 0139 	ldrb.w	r0, [r1, #313]	; 0x139
    c3a8:	2800      	cmp	r0, #0
    c3aa:	bf04      	itt	eq
    c3ac:	f891 0138 	ldrbeq.w	r0, [r1, #312]	; 0x138
    c3b0:	2800      	cmpeq	r0, #0
    c3b2:	d00a      	beq.n	c3ca <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x196>
    c3b4:	f04f 001e 	mov.w	r0, #30
    c3b8:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    c3bc:	e011      	b.n	c3e2 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1ae>
    c3be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c3c2:	f04f 0000 	mov.w	r0, #0
    c3c6:	f7ff bf7b 	b.w	c2c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c3ca:	201d      	movs	r0, #29
    c3cc:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    c3d0:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    c3d4:	f831 0b28 	ldrh.w	r0, [r1], #40
    c3d8:	f004 fd8d 	bl	10ef6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    c3dc:	78e0      	ldrb	r0, [r4, #3]
    c3de:	f7f7 f9c5 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c3e2:	68a0      	ldr	r0, [r4, #8]
    c3e4:	2100      	movs	r1, #0
    c3e6:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    c3ea:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c3ee:	4608      	mov	r0, r1
    c3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3f2:	0000      	.short	0x0000
    c3f4:	2000023c 	.word	0x2000023c
    c3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3fa:	4c22      	ldr	r4, [pc, #136]	; (c484 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x250>)
    c3fc:	2300      	movs	r3, #0
    c3fe:	210a      	movs	r1, #10
    c400:	68a0      	ldr	r0, [r4, #8]
    c402:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c406:	3078      	adds	r0, #120	; 0x78
    c408:	f003 ffb9 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c40c:	2800      	cmp	r0, #0
    c40e:	bf04      	itt	eq
    c410:	2001      	moveq	r0, #1
    c412:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
    c414:	6920      	ldr	r0, [r4, #16]
    c416:	f004 fa82 	bl	1091e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    c41a:	b1c8      	cbz	r0, c450 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x21c>
    c41c:	6920      	ldr	r0, [r4, #16]
    c41e:	f004 fa70 	bl	10902 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    c422:	4605      	mov	r5, r0
    c424:	6920      	ldr	r0, [r4, #16]
    c426:	f004 fa70 	bl	1090a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    c42a:	4606      	mov	r6, r0
    c42c:	6920      	ldr	r0, [r4, #16]
    c42e:	f004 fa66 	bl	108fe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    c432:	4607      	mov	r7, r0
    c434:	6920      	ldr	r0, [r4, #16]
    c436:	f004 fa66 	bl	10906 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    c43a:	4601      	mov	r1, r0
    c43c:	9500      	str	r5, [sp, #0]
    c43e:	68a0      	ldr	r0, [r4, #8]
    c440:	4633      	mov	r3, r6
    c442:	463a      	mov	r2, r7
    c444:	3028      	adds	r0, #40	; 0x28
    c446:	f004 fd4e 	bl	10ee6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    c44a:	68a0      	ldr	r0, [r4, #8]
    c44c:	f004 fc90 	bl	10d70 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    c450:	68a1      	ldr	r1, [r4, #8]
    c452:	2000      	movs	r0, #0
    c454:	f881 00b0 	strb.w	r0, [r1, #176]	; 0xb0
    c458:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c45c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    c460:	2801      	cmp	r0, #1
    c462:	bf04      	itt	eq
    c464:	2002      	moveq	r0, #2
    c466:	f881 005c 	strbeq.w	r0, [r1, #92]	; 0x5c
    c46a:	d008      	beq.n	c47e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24a>
    c46c:	8808      	ldrh	r0, [r1, #0]
    c46e:	f501 72aa 	add.w	r2, r1, #340	; 0x154
    c472:	3128      	adds	r1, #40	; 0x28
    c474:	f004 fbff 	bl	10c76 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    c478:	78e0      	ldrb	r0, [r4, #3]
    c47a:	f7f7 f977 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c47e:	2000      	movs	r0, #0
    c480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c482:	0000      	.short	0x0000
    c484:	2000023c 	.word	0x2000023c
    c488:	b5f0      	push	{r4, r5, r6, r7, lr}
    c48a:	4c43      	ldr	r4, [pc, #268]	; (c598 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x364>)
    c48c:	2500      	movs	r5, #0
    c48e:	b087      	sub	sp, #28
    c490:	68a0      	ldr	r0, [r4, #8]
    c492:	462b      	mov	r3, r5
    c494:	4629      	mov	r1, r5
    c496:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c49a:	3078      	adds	r0, #120	; 0x78
    c49c:	f003 ff6f 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c4a0:	2800      	cmp	r0, #0
    c4a2:	bf02      	ittt	eq
    c4a4:	2001      	moveq	r0, #1
    c4a6:	b007      	addeq	sp, #28
    c4a8:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    c4aa:	68a0      	ldr	r0, [r4, #8]
    c4ac:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c4b0:	2823      	cmp	r0, #35	; 0x23
    c4b2:	bf11      	iteee	ne
    c4b4:	2824      	cmpne	r0, #36	; 0x24
    c4b6:	2020      	moveq	r0, #32
    c4b8:	b007      	addeq	sp, #28
    c4ba:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    c4bc:	4668      	mov	r0, sp
    c4be:	f7f8 fc8d 	bl	4ddc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    c4c2:	2800      	cmp	r0, #0
    c4c4:	bf08      	it	eq
    c4c6:	2100      	moveq	r1, #0
    c4c8:	d004      	beq.n	c4d4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2a0>
    c4ca:	9800      	ldr	r0, [sp, #0]
    c4cc:	a901      	add	r1, sp, #4
    c4ce:	78c0      	ldrb	r0, [r0, #3]
    c4d0:	f88d 0004 	strb.w	r0, [sp, #4]
    c4d4:	68a0      	ldr	r0, [r4, #8]
    c4d6:	ab04      	add	r3, sp, #16
    c4d8:	2216      	movs	r2, #22
    c4da:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c4de:	f004 f824 	bl	1052a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    c4e2:	2700      	movs	r7, #0
    c4e4:	2601      	movs	r6, #1
    c4e6:	b188      	cbz	r0, c50c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2d8>
    c4e8:	68a0      	ldr	r0, [r4, #8]
    c4ea:	f89d 2010 	ldrb.w	r2, [sp, #16]
    c4ee:	2116      	movs	r1, #22
    c4f0:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    c4f4:	f880 1121 	strb.w	r1, [r0, #289]	; 0x121
    c4f8:	2119      	movs	r1, #25
    c4fa:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c4fe:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c502:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c506:	b007      	add	sp, #28
    c508:	2000      	movs	r0, #0
    c50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c50c:	6920      	ldr	r0, [r4, #16]
    c50e:	f004 fa21 	bl	10954 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    c512:	b178      	cbz	r0, c534 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x300>
    c514:	6922      	ldr	r2, [r4, #16]
    c516:	68a1      	ldr	r1, [r4, #8]
    c518:	7910      	ldrb	r0, [r2, #4]
    c51a:	f000 0007 	and.w	r0, r0, #7
    c51e:	f881 005e 	strb.w	r0, [r1, #94]	; 0x5e
    c522:	7952      	ldrb	r2, [r2, #5]
    c524:	f002 0307 	and.w	r3, r2, #7
    c528:	f881 305f 	strb.w	r3, [r1, #95]	; 0x5f
    c52c:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    c530:	b12a      	cbz	r2, c53e <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30a>
    c532:	e026      	b.n	c582 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c534:	2000      	movs	r0, #0
    c536:	f7ff fec3 	bl	c2c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c53a:	4605      	mov	r5, r0
    c53c:	e029      	b.n	c592 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x35e>
    c53e:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    c542:	2a01      	cmp	r2, #1
    c544:	d01d      	beq.n	c582 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c546:	f891 c067 	ldrb.w	ip, [r1, #103]	; 0x67
    c54a:	f101 0266 	add.w	r2, r1, #102	; 0x66
    c54e:	4584      	cmp	ip, r0
    c550:	bf01      	itttt	eq
    c552:	7810      	ldrbeq	r0, [r2, #0]
    c554:	4298      	cmpeq	r0, r3
    c556:	2002      	moveq	r0, #2
    c558:	f881 0142 	strbeq.w	r0, [r1, #322]	; 0x142
    c55c:	d011      	beq.n	c582 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x34e>
    c55e:	880a      	ldrh	r2, [r1, #0]
    c560:	f8a1 2170 	strh.w	r2, [r1, #368]	; 0x170
    c564:	f891 205e 	ldrb.w	r2, [r1, #94]	; 0x5e
    c568:	f501 70a6 	add.w	r0, r1, #332	; 0x14c
    c56c:	f881 2172 	strb.w	r2, [r1, #370]	; 0x172
    c570:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    c574:	f880 1027 	strb.w	r1, [r0, #39]	; 0x27
    c578:	f880 6022 	strb.w	r6, [r0, #34]	; 0x22
    c57c:	78e0      	ldrb	r0, [r4, #3]
    c57e:	f7f7 f8f5 	bl	376c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    c582:	68a0      	ldr	r0, [r4, #8]
    c584:	2121      	movs	r1, #33	; 0x21
    c586:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    c58a:	f880 60b4 	strb.w	r6, [r0, #180]	; 0xb4
    c58e:	f8a0 70b2 	strh.w	r7, [r0, #178]	; 0xb2
    c592:	b007      	add	sp, #28
    c594:	4628      	mov	r0, r5
    c596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c598:	2000023c 	.word	0x2000023c
    c59c:	b538      	push	{r3, r4, r5, lr}
    c59e:	4c26      	ldr	r4, [pc, #152]	; (c638 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x404>)
    c5a0:	68a0      	ldr	r0, [r4, #8]
    c5a2:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    c5a6:	281f      	cmp	r0, #31
    c5a8:	bf1c      	itt	ne
    c5aa:	2001      	movne	r0, #1
    c5ac:	bd38      	popne	{r3, r4, r5, pc}
    c5ae:	6920      	ldr	r0, [r4, #16]
    c5b0:	f004 f9da 	bl	10968 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    c5b4:	2800      	cmp	r0, #0
    c5b6:	d036      	beq.n	c626 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x3f2>
    c5b8:	6920      	ldr	r0, [r4, #16]
    c5ba:	68a2      	ldr	r2, [r4, #8]
    c5bc:	7901      	ldrb	r1, [r0, #4]
    c5be:	7940      	ldrb	r0, [r0, #5]
    c5c0:	f001 0107 	and.w	r1, r1, #7
    c5c4:	f361 0507 	bfi	r5, r1, #0, #8
    c5c8:	4629      	mov	r1, r5
    c5ca:	f000 0007 	and.w	r0, r0, #7
    c5ce:	f360 210f 	bfi	r1, r0, #8, #8
    c5d2:	2001      	movs	r0, #1
    c5d4:	f882 00b0 	strb.w	r0, [r2, #176]	; 0xb0
    c5d8:	2500      	movs	r5, #0
    c5da:	f8a2 50ac 	strh.w	r5, [r2, #172]	; 0xac
    c5de:	2023      	movs	r0, #35	; 0x23
    c5e0:	f882 0084 	strb.w	r0, [r2, #132]	; 0x84
    c5e4:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
    c5e8:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
    c5ec:	f8ad 2000 	strh.w	r2, [sp]
    c5f0:	f003 ffb7 	bl	10562 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    c5f4:	f89d 2000 	ldrb.w	r2, [sp]
    c5f8:	b2c1      	uxtb	r1, r0
    c5fa:	428a      	cmp	r2, r1
    c5fc:	bf07      	ittee	eq
    c5fe:	68a1      	ldreq	r1, [r4, #8]
    c600:	f881 5126 	strbeq.w	r5, [r1, #294]	; 0x126
    c604:	68a2      	ldrne	r2, [r4, #8]
    c606:	f882 1126 	strbne.w	r1, [r2, #294]	; 0x126
    c60a:	f89d 1001 	ldrb.w	r1, [sp, #1]
    c60e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c612:	4281      	cmp	r1, r0
    c614:	bf19      	ittee	ne
    c616:	68a1      	ldrne	r1, [r4, #8]
    c618:	f881 0127 	strbne.w	r0, [r1, #295]	; 0x127
    c61c:	68a0      	ldreq	r0, [r4, #8]
    c61e:	f880 5127 	strbeq.w	r5, [r0, #295]	; 0x127
    c622:	2000      	movs	r0, #0
    c624:	bd38      	pop	{r3, r4, r5, pc}
    c626:	2001      	movs	r0, #1
    c628:	f7ff fe4a 	bl	c2c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x8c>
    c62c:	4604      	mov	r4, r0
    c62e:	201e      	movs	r0, #30
    c630:	f7ff fe18 	bl	c264 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c634:	4620      	mov	r0, r4
    c636:	bd38      	pop	{r3, r4, r5, pc}
    c638:	2000023c 	.word	0x2000023c
    c63c:	b510      	push	{r4, lr}
    c63e:	4c0a      	ldr	r4, [pc, #40]	; (c668 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x434>)
    c640:	2300      	movs	r3, #0
    c642:	4619      	mov	r1, r3
    c644:	68a0      	ldr	r0, [r4, #8]
    c646:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c64a:	3078      	adds	r0, #120	; 0x78
    c64c:	f003 fe97 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c650:	b120      	cbz	r0, c65c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x428>
    c652:	68a1      	ldr	r1, [r4, #8]
    c654:	201c      	movs	r0, #28
    c656:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c65a:	bd10      	pop	{r4, pc}
    c65c:	f240 6162 	movw	r1, #1634	; 0x662
    c660:	2036      	movs	r0, #54	; 0x36
    c662:	f7f7 fa8f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c666:	0000      	.short	0x0000
    c668:	2000023c 	.word	0x2000023c
    c66c:	b510      	push	{r4, lr}
    c66e:	4c0a      	ldr	r4, [pc, #40]	; (c698 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x464>)
    c670:	2300      	movs	r3, #0
    c672:	4619      	mov	r1, r3
    c674:	68a0      	ldr	r0, [r4, #8]
    c676:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    c67a:	3078      	adds	r0, #120	; 0x78
    c67c:	f003 fe7f 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c680:	b120      	cbz	r0, c68c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x458>
    c682:	68a1      	ldr	r1, [r4, #8]
    c684:	2000      	movs	r0, #0
    c686:	f881 00b4 	strb.w	r0, [r1, #180]	; 0xb4
    c68a:	bd10      	pop	{r4, pc}
    c68c:	f240 6169 	movw	r1, #1641	; 0x669
    c690:	2036      	movs	r0, #54	; 0x36
    c692:	f7f7 fa77 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c696:	0000      	.short	0x0000
    c698:	2000023c 	.word	0x2000023c
    c69c:	b510      	push	{r4, lr}
    c69e:	4c0a      	ldr	r4, [pc, #40]	; (c6c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x494>)
    c6a0:	2300      	movs	r3, #0
    c6a2:	4619      	mov	r1, r3
    c6a4:	68a0      	ldr	r0, [r4, #8]
    c6a6:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
    c6aa:	3078      	adds	r0, #120	; 0x78
    c6ac:	f003 fe67 	bl	1037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    c6b0:	b120      	cbz	r0, c6bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x488>
    c6b2:	68a1      	ldr	r1, [r4, #8]
    c6b4:	201f      	movs	r0, #31
    c6b6:	f881 0084 	strb.w	r0, [r1, #132]	; 0x84
    c6ba:	bd10      	pop	{r4, pc}
    c6bc:	f240 6172 	movw	r1, #1650	; 0x672
    c6c0:	2036      	movs	r0, #54	; 0x36
    c6c2:	f7f7 fa5f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6c6:	0000      	.short	0x0000
    c6c8:	2000023c 	.word	0x2000023c
    c6cc:	b570      	push	{r4, r5, r6, lr}
    c6ce:	4c1f      	ldr	r4, [pc, #124]	; (c74c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x518>)
    c6d0:	68a0      	ldr	r0, [r4, #8]
    c6d2:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    c6d6:	2900      	cmp	r1, #0
    c6d8:	bf05      	ittet	eq
    c6da:	f890 1127 	ldrbeq.w	r1, [r0, #295]	; 0x127
    c6de:	2900      	cmpeq	r1, #0
    c6e0:	2100      	movne	r1, #0
    c6e2:	2101      	moveq	r1, #1
    c6e4:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    c6e8:	f04f 0224 	mov.w	r2, #36	; 0x24
    c6ec:	f04f 0500 	mov.w	r5, #0
    c6f0:	2b21      	cmp	r3, #33	; 0x21
    c6f2:	d008      	beq.n	c706 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4d2>
    c6f4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    c6f8:	2b23      	cmp	r3, #35	; 0x23
    c6fa:	d019      	beq.n	c730 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4fc>
    c6fc:	f240 619e 	movw	r1, #1694	; 0x69e
    c700:	2036      	movs	r0, #54	; 0x36
    c702:	f7f7 fa3f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c706:	2900      	cmp	r1, #0
    c708:	bf08      	it	eq
    c70a:	f880 2085 	strbeq.w	r2, [r0, #133]	; 0x85
    c70e:	d00b      	beq.n	c728 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x4f4>
    c710:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    c714:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    c718:	2801      	cmp	r0, #1
    c71a:	bf04      	itt	eq
    c71c:	2000      	moveq	r0, #0
    c71e:	f7ff fda1 	bleq	c264 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c722:	68a0      	ldr	r0, [r4, #8]
    c724:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
    c728:	68a0      	ldr	r0, [r4, #8]
    c72a:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    c72e:	bd70      	pop	{r4, r5, r6, pc}
    c730:	2900      	cmp	r1, #0
    c732:	bf08      	it	eq
    c734:	f880 2084 	strbeq.w	r2, [r0, #132]	; 0x84
    c738:	d004      	beq.n	c744 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x510>
    c73a:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    c73e:	2000      	movs	r0, #0
    c740:	f7ff fd90 	bl	c264 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x30>
    c744:	68a0      	ldr	r0, [r4, #8]
    c746:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    c74a:	bd70      	pop	{r4, r5, r6, pc}
    c74c:	2000023c 	.word	0x2000023c

0000c750 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    c750:	b510      	push	{r4, lr}
    c752:	4905      	ldr	r1, [pc, #20]	; (c768 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q+0x18>)
    c754:	4604      	mov	r4, r0
    c756:	2001      	movs	r0, #1
    c758:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c75c:	f7fb f8f8 	bl	7950 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    c760:	7020      	strb	r0, [r4, #0]
    c762:	2000      	movs	r0, #0
    c764:	bd10      	pop	{r4, pc}
    c766:	0000      	.short	0x0000
    c768:	20001244 	.word	0x20001244

0000c76c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    c76c:	4904      	ldr	r1, [pc, #16]	; (c780 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x14>)
    c76e:	f8b1 2242 	ldrh.w	r2, [r1, #578]	; 0x242
    c772:	8002      	strh	r2, [r0, #0]
    c774:	f891 1240 	ldrb.w	r1, [r1, #576]	; 0x240
    c778:	7081      	strb	r1, [r0, #2]
    c77a:	2000      	movs	r0, #0
    c77c:	4770      	bx	lr
    c77e:	0000      	.short	0x0000
    c780:	20001244 	.word	0x20001244

0000c784 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    c784:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c788:	460d      	mov	r5, r1
    c78a:	4606      	mov	r6, r0
    c78c:	f000 fd9c 	bl	d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c790:	f3c0 2000 	ubfx	r0, r0, #8, #1
    c794:	b1e0      	cbz	r0, c7d0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    c796:	8830      	ldrh	r0, [r6, #0]
    c798:	4669      	mov	r1, sp
    c79a:	f003 fda5 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c79e:	2800      	cmp	r0, #0
    c7a0:	d114      	bne.n	c7cc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    c7a2:	f8dd 4004 	ldr.w	r4, [sp, #4]
    c7a6:	2700      	movs	r7, #0
    c7a8:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    c7ac:	f814 0f66 	ldrb.w	r0, [r4, #102]!
    c7b0:	f005 fa97 	bl	11ce2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    c7b4:	70a8      	strb	r0, [r5, #2]
    c7b6:	7860      	ldrb	r0, [r4, #1]
    c7b8:	f005 fa93 	bl	11ce2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    c7bc:	70e8      	strb	r0, [r5, #3]
    c7be:	78a0      	ldrb	r0, [r4, #2]
    c7c0:	3c66      	subs	r4, #102	; 0x66
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d1f0      	bne.n	c7a8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    c7c6:	8830      	ldrh	r0, [r6, #0]
    c7c8:	8028      	strh	r0, [r5, #0]
    c7ca:	2000      	movs	r0, #0
    c7cc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c7d0:	2001      	movs	r0, #1
    c7d2:	e7fb      	b.n	c7cc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

0000c7d4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    c7d4:	b51c      	push	{r2, r3, r4, lr}
    c7d6:	8800      	ldrh	r0, [r0, #0]
    c7d8:	4669      	mov	r1, sp
    c7da:	f003 fd85 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c7de:	2800      	cmp	r0, #0
    c7e0:	d10f      	bne.n	c802 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    c7e2:	f89d 0000 	ldrb.w	r0, [sp]
    c7e6:	2401      	movs	r4, #1
    c7e8:	b160      	cbz	r0, c804 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    c7ea:	4811      	ldr	r0, [pc, #68]	; (c830 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x5c>)
    c7ec:	7800      	ldrb	r0, [r0, #0]
    c7ee:	b1e8      	cbz	r0, c82c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x58>
    c7f0:	9801      	ldr	r0, [sp, #4]
    c7f2:	f005 fbf4 	bl	11fde <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x366>
    c7f6:	b190      	cbz	r0, c81e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c7f8:	9801      	ldr	r0, [sp, #4]
    c7fa:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    c7fe:	b180      	cbz	r0, c822 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4e>
    c800:	203a      	movs	r0, #58	; 0x3a
    c802:	bd1c      	pop	{r2, r3, r4, pc}
    c804:	9801      	ldr	r0, [sp, #4]
    c806:	f005 fbde 	bl	11fc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
    c80a:	b140      	cbz	r0, c81e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x4a>
    c80c:	9801      	ldr	r0, [sp, #4]
    c80e:	f890 0149 	ldrb.w	r0, [r0, #329]	; 0x149
    c812:	2800      	cmp	r0, #0
    c814:	d1f4      	bne.n	c800 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    c816:	9801      	ldr	r0, [sp, #4]
    c818:	f880 4149 	strb.w	r4, [r0, #329]	; 0x149
    c81c:	e004      	b.n	c828 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x54>
    c81e:	2002      	movs	r0, #2
    c820:	bd1c      	pop	{r2, r3, r4, pc}
    c822:	9801      	ldr	r0, [sp, #4]
    c824:	f880 41c5 	strb.w	r4, [r0, #453]	; 0x1c5
    c828:	2000      	movs	r0, #0
    c82a:	bd1c      	pop	{r2, r3, r4, pc}
    c82c:	2011      	movs	r0, #17
    c82e:	bd1c      	pop	{r2, r3, r4, pc}
    c830:	20000320 	.word	0x20000320

0000c834 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    c834:	b510      	push	{r4, lr}
    c836:	4604      	mov	r4, r0
    c838:	f005 fbb8 	bl	11fac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    c83c:	b130      	cbz	r0, c84c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    c83e:	4804      	ldr	r0, [pc, #16]	; (c850 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    c840:	8941      	ldrh	r1, [r0, #10]
    c842:	8021      	strh	r1, [r4, #0]
    c844:	8980      	ldrh	r0, [r0, #12]
    c846:	8060      	strh	r0, [r4, #2]
    c848:	2000      	movs	r0, #0
    c84a:	bd10      	pop	{r4, pc}
    c84c:	2001      	movs	r0, #1
    c84e:	bd10      	pop	{r4, pc}
    c850:	2000170a 	.word	0x2000170a

0000c854 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    c854:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    c856:	4915      	ldr	r1, [pc, #84]	; (c8ac <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>)
    c858:	4605      	mov	r5, r0
    c85a:	2001      	movs	r0, #1
    c85c:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    c860:	4813      	ldr	r0, [pc, #76]	; (c8b0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x5c>)
    c862:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    c866:	6020      	str	r0, [r4, #0]
    c868:	301f      	adds	r0, #31
    c86a:	60a0      	str	r0, [r4, #8]
    c86c:	f000 fc38 	bl	d0e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    c870:	f894 0020 	ldrb.w	r0, [r4, #32]
    c874:	7829      	ldrb	r1, [r5, #0]
    c876:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    c87a:	221f      	movs	r2, #31
    c87c:	1c68      	adds	r0, r5, #1
    c87e:	f005 fa40 	bl	11d02 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8a>
    c882:	b120      	cbz	r0, c88e <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x3a>
    c884:	f241 31f1 	movw	r1, #5105	; 0x13f1
    c888:	2039      	movs	r0, #57	; 0x39
    c88a:	f7f7 f97b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c88e:	f894 0020 	ldrb.w	r0, [r4, #32]
    c892:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
    c896:	9001      	str	r0, [sp, #4]
    c898:	7828      	ldrb	r0, [r5, #0]
    c89a:	f8ad 0002 	strh.w	r0, [sp, #2]
    c89e:	2000      	movs	r0, #0
    c8a0:	f88d 0000 	strb.w	r0, [sp]
    c8a4:	4668      	mov	r0, sp
    c8a6:	f000 f923 	bl	caf0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    c8aa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    c8ac:	20001244 	.word	0x20001244
    c8b0:	2000173e 	.word	0x2000173e

0000c8b4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    c8b4:	b51c      	push	{r2, r3, r4, lr}
    c8b6:	4a0d      	ldr	r2, [pc, #52]	; (c8ec <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x38>)
    c8b8:	2101      	movs	r1, #1
    c8ba:	2400      	movs	r4, #0
    c8bc:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c8c0:	7800      	ldrb	r0, [r0, #0]
    c8c2:	f88d 0000 	strb.w	r0, [sp]
    c8c6:	f88d 1001 	strb.w	r1, [sp, #1]
    c8ca:	f88d 4002 	strb.w	r4, [sp, #2]
    c8ce:	f7fb f81f 	bl	7910 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    c8d2:	b118      	cbz	r0, c8dc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x28>
    c8d4:	2080      	movs	r0, #128	; 0x80
    c8d6:	f8ad 0003 	strh.w	r0, [sp, #3]
    c8da:	e001      	b.n	c8e0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2c>
    c8dc:	f8ad 4003 	strh.w	r4, [sp, #3]
    c8e0:	f88d 4005 	strb.w	r4, [sp, #5]
    c8e4:	4668      	mov	r0, sp
    c8e6:	f000 fb1b 	bl	cf20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    c8ea:	bd1c      	pop	{r2, r3, r4, pc}
    c8ec:	20001244 	.word	0x20001244

0000c8f0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    c8f0:	b510      	push	{r4, lr}
    c8f2:	4a39      	ldr	r2, [pc, #228]	; (c9d8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe8>)
    c8f4:	b08a      	sub	sp, #40	; 0x28
    c8f6:	2101      	movs	r1, #1
    c8f8:	f882 1257 	strb.w	r1, [r2, #599]	; 0x257
    c8fc:	8841      	ldrh	r1, [r0, #2]
    c8fe:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    c902:	d902      	bls.n	c90a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    c904:	2012      	movs	r0, #18
    c906:	b00a      	add	sp, #40	; 0x28
    c908:	bd10      	pop	{r4, pc}
    c90a:	2400      	movs	r4, #0
    c90c:	f88d 4004 	strb.w	r4, [sp, #4]
    c910:	7902      	ldrb	r2, [r0, #4]
    c912:	9400      	str	r4, [sp, #0]
    c914:	f89d 1000 	ldrb.w	r1, [sp]
    c918:	2a05      	cmp	r2, #5
    c91a:	f041 0110 	orr.w	r1, r1, #16
    c91e:	f88d 1000 	strb.w	r1, [sp]
    c922:	d253      	bcs.n	c9cc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xdc>
    c924:	e8df f002 	tbb	[pc, r2]
    c928:	11050803 	.word	0x11050803
    c92c:	000b      	.short	0x000b
    c92e:	f041 0101 	orr.w	r1, r1, #1
    c932:	f041 0102 	orr.w	r1, r1, #2
    c936:	e006      	b.n	c946 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    c938:	f041 0109 	orr.w	r1, r1, #9
    c93c:	e001      	b.n	c942 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    c93e:	f041 0101 	orr.w	r1, r1, #1
    c942:	f041 0104 	orr.w	r1, r1, #4
    c946:	f88d 1000 	strb.w	r1, [sp]
    c94a:	f8bd 1000 	ldrh.w	r1, [sp]
    c94e:	9100      	str	r1, [sp, #0]
    c950:	f8bd 1000 	ldrh.w	r1, [sp]
    c954:	f8ad 1005 	strh.w	r1, [sp, #5]
    c958:	8802      	ldrh	r2, [r0, #0]
    c95a:	f8dd 1006 	ldr.w	r1, [sp, #6]
    c95e:	f362 211f 	bfi	r1, r2, #8, #24
    c962:	f8cd 1006 	str.w	r1, [sp, #6]
    c966:	8842      	ldrh	r2, [r0, #2]
    c968:	f8dd 1009 	ldr.w	r1, [sp, #9]
    c96c:	f362 211f 	bfi	r1, r2, #8, #24
    c970:	f8cd 1009 	str.w	r1, [sp, #9]
    c974:	7b41      	ldrb	r1, [r0, #13]
    c976:	f88d 100d 	strb.w	r1, [sp, #13]
    c97a:	7941      	ldrb	r1, [r0, #5]
    c97c:	f88d 100e 	strb.w	r1, [sp, #14]
    c980:	7981      	ldrb	r1, [r0, #6]
    c982:	f88d 100f 	strb.w	r1, [sp, #15]
    c986:	f8d0 1007 	ldr.w	r1, [r0, #7]
    c98a:	9104      	str	r1, [sp, #16]
    c98c:	f8b0 100b 	ldrh.w	r1, [r0, #11]
    c990:	f8ad 1014 	strh.w	r1, [sp, #20]
    c994:	7b80      	ldrb	r0, [r0, #14]
    c996:	f88d 0016 	strb.w	r0, [sp, #22]
    c99a:	207f      	movs	r0, #127	; 0x7f
    c99c:	f88d 0017 	strb.w	r0, [sp, #23]
    c9a0:	2001      	movs	r0, #1
    c9a2:	f88d 0018 	strb.w	r0, [sp, #24]
    c9a6:	f88d 4019 	strb.w	r4, [sp, #25]
    c9aa:	f88d 001a 	strb.w	r0, [sp, #26]
    c9ae:	f88d 401b 	strb.w	r4, [sp, #27]
    c9b2:	f7fb f815 	bl	79e0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    c9b6:	f88d 001c 	strb.w	r0, [sp, #28]
    c9ba:	f88d 401d 	strb.w	r4, [sp, #29]
    c9be:	f88d 401e 	strb.w	r4, [sp, #30]
    c9c2:	a908      	add	r1, sp, #32
    c9c4:	a801      	add	r0, sp, #4
    c9c6:	f004 ffc9 	bl	1195c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    c9ca:	e79c      	b.n	c906 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    c9cc:	f241 0147 	movw	r1, #4167	; 0x1047
    c9d0:	2039      	movs	r0, #57	; 0x39
    c9d2:	f7f7 f8d7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9d6:	0000      	.short	0x0000
    c9d8:	20001244 	.word	0x20001244

0000c9dc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    c9dc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c9de:	4604      	mov	r4, r0
    c9e0:	f000 fc72 	bl	d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c9e4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    c9e8:	b318      	cbz	r0, ca32 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x56>
    c9ea:	2000      	movs	r0, #0
    c9ec:	f88d 0004 	strb.w	r0, [sp, #4]
    c9f0:	f88d 0008 	strb.w	r0, [sp, #8]
    c9f4:	a802      	add	r0, sp, #8
    c9f6:	9000      	str	r0, [sp, #0]
    c9f8:	78a2      	ldrb	r2, [r4, #2]
    c9fa:	7861      	ldrb	r1, [r4, #1]
    c9fc:	7820      	ldrb	r0, [r4, #0]
    c9fe:	ab01      	add	r3, sp, #4
    ca00:	f005 fb9b 	bl	1213a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4c2>
    ca04:	2800      	cmp	r0, #0
    ca06:	d113      	bne.n	ca30 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    ca08:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ca0c:	f005 fa47 	bl	11e9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
    ca10:	b188      	cbz	r0, ca36 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5a>
    ca12:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ca16:	f005 fa42 	bl	11e9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
    ca1a:	b160      	cbz	r0, ca36 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5a>
    ca1c:	4807      	ldr	r0, [pc, #28]	; (ca3c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x60>)
    ca1e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    ca22:	f880 1252 	strb.w	r1, [r0, #594]	; 0x252
    ca26:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ca2a:	f880 1253 	strb.w	r1, [r0, #595]	; 0x253
    ca2e:	2000      	movs	r0, #0
    ca30:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ca32:	2001      	movs	r0, #1
    ca34:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ca36:	2011      	movs	r0, #17
    ca38:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ca3a:	0000      	.short	0x0000
    ca3c:	20001244 	.word	0x20001244

0000ca40 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ca40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ca42:	4916      	ldr	r1, [pc, #88]	; (ca9c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x5c>)
    ca44:	4605      	mov	r5, r0
    ca46:	2001      	movs	r0, #1
    ca48:	f881 0257 	strb.w	r0, [r1, #599]	; 0x257
    ca4c:	4814      	ldr	r0, [pc, #80]	; (caa0 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x60>)
    ca4e:	f1a0 0460 	sub.w	r4, r0, #96	; 0x60
    ca52:	6120      	str	r0, [r4, #16]
    ca54:	301f      	adds	r0, #31
    ca56:	61a0      	str	r0, [r4, #24]
    ca58:	f000 fb52 	bl	d100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    ca5c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ca60:	7829      	ldrb	r1, [r5, #0]
    ca62:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
    ca66:	221f      	movs	r2, #31
    ca68:	1c68      	adds	r0, r5, #1
    ca6a:	3310      	adds	r3, #16
    ca6c:	f005 f949 	bl	11d02 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8a>
    ca70:	b120      	cbz	r0, ca7c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x3c>
    ca72:	f241 2174 	movw	r1, #4724	; 0x1274
    ca76:	2039      	movs	r0, #57	; 0x39
    ca78:	f7f7 f884 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca7c:	2000      	movs	r0, #0
    ca7e:	f88d 0000 	strb.w	r0, [sp]
    ca82:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ca86:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ca8a:	6900      	ldr	r0, [r0, #16]
    ca8c:	9001      	str	r0, [sp, #4]
    ca8e:	7828      	ldrb	r0, [r5, #0]
    ca90:	f8ad 0002 	strh.w	r0, [sp, #2]
    ca94:	4668      	mov	r0, sp
    ca96:	f000 f857 	bl	cb48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    ca9a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ca9c:	20001244 	.word	0x20001244
    caa0:	2000177c 	.word	0x2000177c

0000caa4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    caa4:	7801      	ldrb	r1, [r0, #0]
    caa6:	b181      	cbz	r1, caca <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    caa8:	7841      	ldrb	r1, [r0, #1]
    caaa:	b171      	cbz	r1, caca <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    caac:	8841      	ldrh	r1, [r0, #2]
    caae:	291b      	cmp	r1, #27
    cab0:	d30b      	bcc.n	caca <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    cab2:	8881      	ldrh	r1, [r0, #4]
    cab4:	291b      	cmp	r1, #27
    cab6:	d308      	bcc.n	caca <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x26>
    cab8:	4905      	ldr	r1, [pc, #20]	; (cad0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x2c>)
    caba:	6802      	ldr	r2, [r0, #0]
    cabc:	f8c1 2240 	str.w	r2, [r1, #576]	; 0x240
    cac0:	8880      	ldrh	r0, [r0, #4]
    cac2:	f8a1 0244 	strh.w	r0, [r1, #580]	; 0x244
    cac6:	2000      	movs	r0, #0
    cac8:	4770      	bx	lr
    caca:	2012      	movs	r0, #18
    cacc:	4770      	bx	lr
    cace:	0000      	.short	0x0000
    cad0:	20001244 	.word	0x20001244

0000cad4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    cad4:	6800      	ldr	r0, [r0, #0]
    cad6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    cada:	d304      	bcc.n	cae6 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    cadc:	4903      	ldr	r1, [pc, #12]	; (caec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    cade:	f8c1 0248 	str.w	r0, [r1, #584]	; 0x248
    cae2:	2000      	movs	r0, #0
    cae4:	4770      	bx	lr
    cae6:	2012      	movs	r0, #18
    cae8:	4770      	bx	lr
    caea:	0000      	.short	0x0000
    caec:	20001244 	.word	0x20001244

0000caf0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    caf0:	b570      	push	{r4, r5, r6, lr}
    caf2:	4d14      	ldr	r5, [pc, #80]	; (cb44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>)
    caf4:	4604      	mov	r4, r0
    caf6:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cafa:	b920      	cbnz	r0, cb06 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    cafc:	8860      	ldrh	r0, [r4, #2]
    cafe:	b110      	cbz	r0, cb06 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x16>
    cb00:	f7fa feda 	bl	78b8 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
    cb04:	b198      	cbz	r0, cb2e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x3e>
    cb06:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    cb0a:	8861      	ldrh	r1, [r4, #2]
    cb0c:	7820      	ldrb	r0, [r4, #0]
    cb0e:	f005 f90d 	bl	11d2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb4>
    cb12:	2800      	cmp	r0, #0
    cb14:	d10c      	bne.n	cb30 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x40>
    cb16:	f7fa fcd9 	bl	74cc <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    cb1a:	4601      	mov	r1, r0
    cb1c:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cb20:	2800      	cmp	r0, #0
    cb22:	8860      	ldrh	r0, [r4, #2]
    cb24:	d005      	beq.n	cb32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    cb26:	4288      	cmp	r0, r1
    cb28:	d907      	bls.n	cb3a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    cb2a:	4608      	mov	r0, r1
    cb2c:	e005      	b.n	cb3a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    cb2e:	2012      	movs	r0, #18
    cb30:	bd70      	pop	{r4, r5, r6, pc}
    cb32:	4288      	cmp	r0, r1
    cb34:	d901      	bls.n	cb3a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4a>
    cb36:	2007      	movs	r0, #7
    cb38:	bd70      	pop	{r4, r5, r6, pc}
    cb3a:	6861      	ldr	r1, [r4, #4]
    cb3c:	f7fa ff62 	bl	7a04 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    cb40:	2000      	movs	r0, #0
    cb42:	bd70      	pop	{r4, r5, r6, pc}
    cb44:	20001244 	.word	0x20001244

0000cb48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    cb48:	b570      	push	{r4, r5, r6, lr}
    cb4a:	4d11      	ldr	r5, [pc, #68]	; (cb90 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x48>)
    cb4c:	4604      	mov	r4, r0
    cb4e:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cb52:	b920      	cbnz	r0, cb5e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    cb54:	8860      	ldrh	r0, [r4, #2]
    cb56:	b110      	cbz	r0, cb5e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x16>
    cb58:	f7fa feea 	bl	7930 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    cb5c:	b178      	cbz	r0, cb7e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x36>
    cb5e:	f895 2257 	ldrb.w	r2, [r5, #599]	; 0x257
    cb62:	8861      	ldrh	r1, [r4, #2]
    cb64:	7820      	ldrb	r0, [r4, #0]
    cb66:	f005 f8e1 	bl	11d2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb4>
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d108      	bne.n	cb80 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x38>
    cb6e:	8866      	ldrh	r6, [r4, #2]
    cb70:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cb74:	b130      	cbz	r0, cb84 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    cb76:	f7fa fedb 	bl	7930 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    cb7a:	b110      	cbz	r0, cb82 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3a>
    cb7c:	e002      	b.n	cb84 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x3c>
    cb7e:	2012      	movs	r0, #18
    cb80:	bd70      	pop	{r4, r5, r6, pc}
    cb82:	2600      	movs	r6, #0
    cb84:	4630      	mov	r0, r6
    cb86:	6861      	ldr	r1, [r4, #4]
    cb88:	f7fa ff4a 	bl	7a20 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    cb8c:	2000      	movs	r0, #0
    cb8e:	bd70      	pop	{r4, r5, r6, pc}
    cb90:	20001244 	.word	0x20001244

0000cb94 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
    cb94:	b510      	push	{r4, lr}
    cb96:	4604      	mov	r4, r0
    cb98:	7800      	ldrb	r0, [r0, #0]
    cb9a:	07c0      	lsls	r0, r0, #31
    cb9c:	d004      	beq.n	cba8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    cb9e:	f001 f8a1 	bl	dce4 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>
    cba2:	b108      	cbz	r0, cba8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x14>
    cba4:	200c      	movs	r0, #12
    cba6:	bd10      	pop	{r4, pc}
    cba8:	7820      	ldrb	r0, [r4, #0]
    cbaa:	4903      	ldr	r1, [pc, #12]	; (cbb8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x24>)
    cbac:	f000 0001 	and.w	r0, r0, #1
    cbb0:	7388      	strb	r0, [r1, #14]
    cbb2:	2000      	movs	r0, #0
    cbb4:	bd10      	pop	{r4, pc}
    cbb6:	0000      	.short	0x0000
    cbb8:	2000170a 	.word	0x2000170a

0000cbbc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    cbbc:	4a03      	ldr	r2, [pc, #12]	; (cbcc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    cbbe:	e9d2 1200 	ldrd	r1, r2, [r2]
    cbc2:	6001      	str	r1, [r0, #0]
    cbc4:	6042      	str	r2, [r0, #4]
    cbc6:	2000      	movs	r0, #0
    cbc8:	4770      	bx	lr
    cbca:	0000      	.short	0x0000
    cbcc:	0000d158 	.word	0x0000d158

0000cbd0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    cbd0:	b510      	push	{r4, lr}
    cbd2:	2005      	movs	r0, #5
    cbd4:	f000 fb66 	bl	d2a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    cbd8:	f7ff fb14 	bl	c204 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    cbdc:	f7fd f954 	bl	9e88 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    cbe0:	4902      	ldr	r1, [pc, #8]	; (cbec <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x1c>)
    cbe2:	4801      	ldr	r0, [pc, #4]	; (cbe8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    cbe4:	6048      	str	r0, [r1, #4]
    cbe6:	bd10      	pop	{r4, pc}
    cbe8:	0000cd51 	.word	0x0000cd51
    cbec:	20000320 	.word	0x20000320

0000cbf0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    cbf0:	4901      	ldr	r1, [pc, #4]	; (cbf8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0x8>)
    cbf2:	7048      	strb	r0, [r1, #1]
    cbf4:	f000 b802 	b.w	cbfc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    cbf8:	20000320 	.word	0x20000320

0000cbfc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    cbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc00:	f7f8 f988 	bl	4f14 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    cc04:	f7f9 f8d2 	bl	5dac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    cc08:	4c22      	ldr	r4, [pc, #136]	; (cc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>)
    cc0a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    cc0e:	2500      	movs	r5, #0
    cc10:	f8a4 724e 	strh.w	r7, [r4, #590]	; 0x24e
    cc14:	f8a4 7250 	strh.w	r7, [r4, #592]	; 0x250
    cc18:	f884 5258 	strb.w	r5, [r4, #600]	; 0x258
    cc1c:	f8a4 525a 	strh.w	r5, [r4, #602]	; 0x25a
    cc20:	f884 523e 	strb.w	r5, [r4, #574]	; 0x23e
    cc24:	f204 243e 	addw	r4, r4, #574	; 0x23e
    cc28:	f000 fa5a 	bl	d0e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    cc2c:	f000 fa68 	bl	d100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
    cc30:	a019      	add	r0, pc, #100	; (adr r0, cc98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>)
    cc32:	7665      	strb	r5, [r4, #25]
    cc34:	4e1a      	ldr	r6, [pc, #104]	; (cca0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>)
    cc36:	6801      	ldr	r1, [r0, #0]
    cc38:	7900      	ldrb	r0, [r0, #4]
    cc3a:	f1a6 023e 	sub.w	r2, r6, #62	; 0x3e
    cc3e:	7035      	strb	r5, [r6, #0]
    cc40:	f842 1f3f 	str.w	r1, [r2, #63]!
    cc44:	1c71      	adds	r1, r6, #1
    cc46:	7110      	strb	r0, [r2, #4]
    cc48:	4630      	mov	r0, r6
    cc4a:	f7ff fad5 	bl	c1f8 <sym_IVQEDWU2IQCQRXV4LSTVJGUOGFD3ORQQY4SW3BQ>
    cc4e:	201b      	movs	r0, #27
    cc50:	80f0      	strh	r0, [r6, #6]
    cc52:	f44f 71a4 	mov.w	r1, #328	; 0x148
    cc56:	8131      	strh	r1, [r6, #8]
    cc58:	8170      	strh	r0, [r6, #10]
    cc5a:	81b1      	strh	r1, [r6, #12]
    cc5c:	7525      	strb	r5, [r4, #20]
    cc5e:	7565      	strb	r5, [r4, #21]
    cc60:	73f5      	strb	r5, [r6, #15]
    cc62:	2103      	movs	r1, #3
    cc64:	70a1      	strb	r1, [r4, #2]
    cc66:	70e1      	strb	r1, [r4, #3]
    cc68:	80a0      	strh	r0, [r4, #4]
    cc6a:	80e0      	strh	r0, [r4, #6]
    cc6c:	f640 60a6 	movw	r0, #3750	; 0xea6
    cc70:	f8c4 000a 	str.w	r0, [r4, #10]
    cc74:	f1a6 003e 	sub.w	r0, r6, #62	; 0x3e
    cc78:	73b5      	strb	r5, [r6, #14]
    cc7a:	7005      	strb	r5, [r0, #0]
    cc7c:	8047      	strh	r7, [r0, #2]
    cc7e:	4809      	ldr	r0, [pc, #36]	; (cca4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>)
    cc80:	7005      	strb	r5, [r0, #0]
    cc82:	f1a6 000e 	sub.w	r0, r6, #14
    cc86:	7005      	strb	r5, [r0, #0]
    cc88:	8047      	strh	r7, [r0, #2]
    cc8a:	7625      	strb	r5, [r4, #24]
    cc8c:	73a5      	strb	r5, [r4, #14]
    cc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc92:	0000      	.short	0x0000
    cc94:	20001244 	.word	0x20001244
    cc98:	ffffffff 	.word	0xffffffff
    cc9c:	0000001f 	.word	0x0000001f
    cca0:	2000170a 	.word	0x2000170a
    cca4:	20000328 	.word	0x20000328

0000cca8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    cca8:	b570      	push	{r4, r5, r6, lr}
    ccaa:	b150      	cbz	r0, ccc2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a>
    ccac:	4d16      	ldr	r5, [pc, #88]	; (cd08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x60>)
    ccae:	2400      	movs	r4, #0
    ccb0:	7829      	ldrb	r1, [r5, #0]
    ccb2:	b159      	cbz	r1, cccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    ccb4:	7044      	strb	r4, [r0, #1]
    ccb6:	2103      	movs	r1, #3
    ccb8:	7001      	strb	r1, [r0, #0]
    ccba:	2101      	movs	r1, #1
    ccbc:	7101      	strb	r1, [r0, #4]
    ccbe:	702c      	strb	r4, [r5, #0]
    ccc0:	e01c      	b.n	ccfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    ccc2:	f241 6190 	movw	r1, #5776	; 0x1690
    ccc6:	2039      	movs	r0, #57	; 0x39
    ccc8:	f7f6 ff5c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cccc:	78ab      	ldrb	r3, [r5, #2]
    ccce:	2105      	movs	r1, #5
    ccd0:	f44f 728e 	mov.w	r2, #284	; 0x11c
    ccd4:	b13b      	cbz	r3, cce6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    ccd6:	7044      	strb	r4, [r0, #1]
    ccd8:	f800 1b04 	strb.w	r1, [r0], #4
    ccdc:	1d29      	adds	r1, r5, #4
    ccde:	f7f6 fdc7 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cce2:	70ac      	strb	r4, [r5, #2]
    cce4:	e00a      	b.n	ccfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x54>
    cce6:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    ccea:	b14b      	cbz	r3, cd00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    ccec:	7044      	strb	r4, [r0, #1]
    ccee:	f800 1b04 	strb.w	r1, [r0], #4
    ccf2:	4906      	ldr	r1, [pc, #24]	; (cd0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>)
    ccf4:	f7f6 fdbc 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ccf8:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
    ccfc:	2001      	movs	r0, #1
    ccfe:	bd70      	pop	{r4, r5, r6, pc}
    cd00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cd04:	f7f9 bf44 	b.w	6b90 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    cd08:	20001244 	.word	0x20001244
    cd0c:	20001366 	.word	0x20001366
    cd10:	b570      	push	{r4, r5, r6, lr}
    cd12:	4604      	mov	r4, r0
    cd14:	480d      	ldr	r0, [pc, #52]	; (cd4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    cd16:	f890 5257 	ldrb.w	r5, [r0, #599]	; 0x257
    cd1a:	f7fc f8fb 	bl	8f14 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    cd1e:	b148      	cbz	r0, cd34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    cd20:	b11d      	cbz	r5, cd2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x82>
    cd22:	f7fa fe05 	bl	7930 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    cd26:	b110      	cbz	r0, cd2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x86>
    cd28:	e00b      	b.n	cd42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cd2a:	b154      	cbz	r4, cd42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cd2c:	e002      	b.n	cd34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    cd2e:	f7fa fddd 	bl	78ec <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    cd32:	b930      	cbnz	r0, cd42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    cd34:	f005 f95f 	bl	11ff6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    cd38:	b128      	cbz	r0, cd46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    cd3a:	f7ff fa09 	bl	c150 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    cd3e:	2801      	cmp	r0, #1
    cd40:	d001      	beq.n	cd46 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    cd42:	2000      	movs	r0, #0
    cd44:	bd70      	pop	{r4, r5, r6, pc}
    cd46:	2001      	movs	r0, #1
    cd48:	bd70      	pop	{r4, r5, r6, pc}
    cd4a:	0000      	.short	0x0000
    cd4c:	20001244 	.word	0x20001244
    cd50:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd54:	4692      	mov	sl, r2
    cd56:	460f      	mov	r7, r1
    cd58:	4681      	mov	r9, r0
    cd5a:	f005 f927 	bl	11fac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    cd5e:	2800      	cmp	r0, #0
    cd60:	d063      	beq.n	ce2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    cd62:	4933      	ldr	r1, [pc, #204]	; (ce30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    cd64:	f8b9 2050 	ldrh.w	r2, [r9, #80]	; 0x50
    cd68:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e
    cd6c:	88c8      	ldrh	r0, [r1, #6]
    cd6e:	4290      	cmp	r0, r2
    cd70:	d300      	bcc.n	cd74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    cd72:	4610      	mov	r0, r2
    cd74:	4680      	mov	r8, r0
    cd76:	8948      	ldrh	r0, [r1, #10]
    cd78:	42b0      	cmp	r0, r6
    cd7a:	d200      	bcs.n	cd7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
    cd7c:	4606      	mov	r6, r0
    cd7e:	890c      	ldrh	r4, [r1, #8]
    cd80:	f640 0048 	movw	r0, #2120	; 0x848
    cd84:	4284      	cmp	r4, r0
    cd86:	d300      	bcc.n	cd8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    cd88:	4604      	mov	r4, r0
    cd8a:	898d      	ldrh	r5, [r1, #12]
    cd8c:	4285      	cmp	r5, r0
    cd8e:	d300      	bcc.n	cd92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    cd90:	4605      	mov	r5, r0
    cd92:	4284      	cmp	r4, r0
    cd94:	d300      	bcc.n	cd98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    cd96:	4604      	mov	r4, r0
    cd98:	f44f 71a4 	mov.w	r1, #328	; 0x148
    cd9c:	2e1b      	cmp	r6, #27
    cd9e:	d001      	beq.n	cda4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    cda0:	428d      	cmp	r5, r1
    cda2:	d104      	bne.n	cdae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x106>
    cda4:	f1b8 0f1b 	cmp.w	r8, #27
    cda8:	d03f      	beq.n	ce2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    cdaa:	428c      	cmp	r4, r1
    cdac:	d03d      	beq.n	ce2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    cdae:	466a      	mov	r2, sp
    cdb0:	4651      	mov	r1, sl
    cdb2:	4648      	mov	r0, r9
    cdb4:	f005 f896 	bl	11ee4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
    cdb8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    cdbc:	4641      	mov	r1, r8
    cdbe:	4540      	cmp	r0, r8
    cdc0:	d900      	bls.n	cdc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11c>
    cdc2:	4608      	mov	r0, r1
    cdc4:	80f8      	strh	r0, [r7, #6]
    cdc6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    cdca:	42a1      	cmp	r1, r4
    cdcc:	d800      	bhi.n	cdd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    cdce:	460c      	mov	r4, r1
    cdd0:	813c      	strh	r4, [r7, #8]
    cdd2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    cdd6:	42b1      	cmp	r1, r6
    cdd8:	d800      	bhi.n	cddc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    cdda:	460e      	mov	r6, r1
    cddc:	807e      	strh	r6, [r7, #2]
    cdde:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    cde2:	42a9      	cmp	r1, r5
    cde4:	d900      	bls.n	cde8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>
    cde6:	4629      	mov	r1, r5
    cde8:	80b9      	strh	r1, [r7, #4]
    cdea:	2201      	movs	r2, #1
    cdec:	703a      	strb	r2, [r7, #0]
    cdee:	381b      	subs	r0, #27
    cdf0:	28e0      	cmp	r0, #224	; 0xe0
    cdf2:	d902      	bls.n	cdfa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    cdf4:	f640 4138 	movw	r1, #3128	; 0xc38
    cdf8:	e014      	b.n	ce24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    cdfa:	3e1b      	subs	r6, #27
    cdfc:	2ee0      	cmp	r6, #224	; 0xe0
    cdfe:	d902      	bls.n	ce06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    ce00:	f640 413a 	movw	r1, #3130	; 0xc3a
    ce04:	e00e      	b.n	ce24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    ce06:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    ce0a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    ce0e:	4284      	cmp	r4, r0
    ce10:	d902      	bls.n	ce18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    ce12:	f640 413c 	movw	r1, #3132	; 0xc3c
    ce16:	e005      	b.n	ce24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    ce18:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    ce1c:	4281      	cmp	r1, r0
    ce1e:	d904      	bls.n	ce2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    ce20:	f640 413e 	movw	r1, #3134	; 0xc3e
    ce24:	2039      	movs	r0, #57	; 0x39
    ce26:	f7f6 fead 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce2a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce2e:	0000      	.short	0x0000
    ce30:	2000170a 	.word	0x2000170a
    ce34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce38:	461d      	mov	r5, r3
    ce3a:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    ce3e:	f1a1 0c06 	sub.w	ip, r1, #6
    ce42:	f640 437a 	movw	r3, #3194	; 0xc7a
    ce46:	9e08      	ldr	r6, [sp, #32]
    ce48:	459c      	cmp	ip, r3
    ce4a:	d805      	bhi.n	ce58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>
    ce4c:	f1a2 0c06 	sub.w	ip, r2, #6
    ce50:	459c      	cmp	ip, r3
    ce52:	d801      	bhi.n	ce58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>
    ce54:	2301      	movs	r3, #1
    ce56:	e000      	b.n	ce5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    ce58:	2300      	movs	r3, #0
    ce5a:	b120      	cbz	r0, ce66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1be>
    ce5c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ce60:	b168      	cbz	r0, ce7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d6>
    ce62:	b96b      	cbnz	r3, ce80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d8>
    ce64:	e002      	b.n	ce6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    ce66:	4815      	ldr	r0, [pc, #84]	; (cebc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x214>)
    ce68:	7b80      	ldrb	r0, [r0, #14]
    ce6a:	e7f9      	b.n	ce60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    ce6c:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
    ce70:	2806      	cmp	r0, #6
    ce72:	d821      	bhi.n	ceb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ce74:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
    ce78:	2806      	cmp	r0, #6
    ce7a:	d901      	bls.n	ce80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1d8>
    ce7c:	e01c      	b.n	ceb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ce7e:	b1db      	cbz	r3, ceb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ce80:	4291      	cmp	r1, r2
    ce82:	d819      	bhi.n	ceb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ce84:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ce88:	d216      	bcs.n	ceb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ce8a:	f1a4 000a 	sub.w	r0, r4, #10
    ce8e:	f640 4176 	movw	r1, #3190	; 0xc76
    ce92:	4288      	cmp	r0, r1
    ce94:	d810      	bhi.n	ceb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ce96:	4610      	mov	r0, r2
    ce98:	f003 fa3e 	bl	10318 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ce9c:	1c6d      	adds	r5, r5, #1
    ce9e:	4368      	muls	r0, r5
    cea0:	f240 2171 	movw	r1, #625	; 0x271
    cea4:	0040      	lsls	r0, r0, #1
    cea6:	434c      	muls	r4, r1
    cea8:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    ceac:	d204      	bcs.n	ceb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ceae:	42b7      	cmp	r7, r6
    ceb0:	d802      	bhi.n	ceb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x210>
    ceb2:	2001      	movs	r0, #1
    ceb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ceb8:	2000      	movs	r0, #0
    ceba:	e7fb      	b.n	ceb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x20c>
    cebc:	2000170a 	.word	0x2000170a
    cec0:	b530      	push	{r4, r5, lr}
    cec2:	b087      	sub	sp, #28
    cec4:	4605      	mov	r5, r0
    cec6:	2000      	movs	r0, #0
    cec8:	9005      	str	r0, [sp, #20]
    ceca:	9001      	str	r0, [sp, #4]
    cecc:	9002      	str	r0, [sp, #8]
    cece:	8808      	ldrh	r0, [r1, #0]
    ced0:	f8ad 0004 	strh.w	r0, [sp, #4]
    ced4:	4811      	ldr	r0, [pc, #68]	; (cf1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x274>)
    ced6:	460c      	mov	r4, r1
    ced8:	ab03      	add	r3, sp, #12
    ceda:	f890 1252 	ldrb.w	r1, [r0, #594]	; 0x252
    cede:	f88d 1006 	strb.w	r1, [sp, #6]
    cee2:	f890 0253 	ldrb.w	r0, [r0, #595]	; 0x253
    cee6:	f88d 0007 	strb.w	r0, [sp, #7]
    ceea:	a804      	add	r0, sp, #16
    ceec:	9000      	str	r0, [sp, #0]
    ceee:	aa01      	add	r2, sp, #4
    cef0:	4621      	mov	r1, r4
    cef2:	4628      	mov	r0, r5
    cef4:	f005 f83a 	bl	11f6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f4>
    cef8:	0005      	movs	r5, r0
    cefa:	d10c      	bne.n	cf16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26e>
    cefc:	f89d 000c 	ldrb.w	r0, [sp, #12]
    cf00:	f88d 0014 	strb.w	r0, [sp, #20]
    cf04:	f89d 0010 	ldrb.w	r0, [sp, #16]
    cf08:	f88d 0015 	strb.w	r0, [sp, #21]
    cf0c:	a905      	add	r1, sp, #20
    cf0e:	4620      	mov	r0, r4
    cf10:	f003 fae5 	bl	104de <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    cf14:	4628      	mov	r0, r5
    cf16:	b007      	add	sp, #28
    cf18:	bd30      	pop	{r4, r5, pc}
    cf1a:	0000      	.short	0x0000
    cf1c:	20001244 	.word	0x20001244

0000cf20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    cf20:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    cf24:	4604      	mov	r4, r0
    cf26:	7840      	ldrb	r0, [r0, #1]
    cf28:	2542      	movs	r5, #66	; 0x42
    cf2a:	2801      	cmp	r0, #1
    cf2c:	d808      	bhi.n	cf40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cf2e:	78a0      	ldrb	r0, [r4, #2]
    cf30:	f7fa fd14 	bl	795c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    cf34:	b120      	cbz	r0, cf40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cf36:	7820      	ldrb	r0, [r4, #0]
    cf38:	2512      	movs	r5, #18
    cf3a:	2801      	cmp	r0, #1
    cf3c:	d003      	beq.n	cf46 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    cf3e:	b1a0      	cbz	r0, cf6a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4a>
    cf40:	4628      	mov	r0, r5
    cf42:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    cf46:	f7fa fce3 	bl	7910 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    cf4a:	b128      	cbz	r0, cf58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    cf4c:	f8b4 0003 	ldrh.w	r0, [r4, #3]
    cf50:	2800      	cmp	r0, #0
    cf52:	d0f5      	beq.n	cf40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cf54:	2880      	cmp	r0, #128	; 0x80
    cf56:	d8f3      	bhi.n	cf40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cf58:	7860      	ldrb	r0, [r4, #1]
    cf5a:	2800      	cmp	r0, #0
    cf5c:	d0f0      	beq.n	cf40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    cf5e:	f7fa fc99 	bl	7894 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    cf62:	b148      	cbz	r0, cf78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cf64:	7820      	ldrb	r0, [r4, #0]
    cf66:	2801      	cmp	r0, #1
    cf68:	d008      	beq.n	cf7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    cf6a:	f7fb ffcd 	bl	8f08 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    cf6e:	4604      	mov	r4, r0
    cf70:	f7fb ffa4 	bl	8ebc <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    cf74:	2800      	cmp	r0, #0
    cf76:	d079      	beq.n	d06c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
    cf78:	200c      	movs	r0, #12
    cf7a:	e7e2      	b.n	cf42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cf7c:	4d55      	ldr	r5, [pc, #340]	; (d0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b4>)
    cf7e:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cf82:	f7fa f9ad 	bl	72e0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    cf86:	b910      	cbnz	r0, cf8e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x6e>
    cf88:	f7fa fca8 	bl	78dc <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    cf8c:	b3f0      	cbz	r0, d00c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cf8e:	f7fb ffc1 	bl	8f14 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    cf92:	2800      	cmp	r0, #0
    cf94:	d1f0      	bne.n	cf78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cf96:	f7fa fa8d 	bl	74b4 <sym_LH2VB7IMRXMGTCCJDOMH7JXYZ5MZLQ2OSANOJDA>
    cf9a:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    cf9e:	39ff      	subs	r1, #255	; 0xff
    cfa0:	d1ea      	bne.n	cf78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x58>
    cfa2:	f895 0257 	ldrb.w	r0, [r5, #599]	; 0x257
    cfa6:	f7fa f9c5 	bl	7334 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    cfaa:	f8b4 6003 	ldrh.w	r6, [r4, #3]
    cfae:	f242 7010 	movw	r0, #10000	; 0x2710
    cfb2:	4346      	muls	r6, r0
    cfb4:	7960      	ldrb	r0, [r4, #5]
    cfb6:	f7fa fb73 	bl	76a0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    cfba:	f7fa fc97 	bl	78ec <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    cfbe:	b138      	cbz	r0, cfd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb0>
    cfc0:	f7fa fca6 	bl	7910 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    cfc4:	4f44      	ldr	r7, [pc, #272]	; (d0d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    cfc6:	b170      	cbz	r0, cfe6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    cfc8:	f7fa fcaa 	bl	7920 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    cfcc:	b148      	cbz	r0, cfe2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    cfce:	e00a      	b.n	cfe6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc6>
    cfd0:	4631      	mov	r1, r6
    cfd2:	2000      	movs	r0, #0
    cfd4:	f7fb feda 	bl	8d8c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    cfd8:	2800      	cmp	r0, #0
    cfda:	d0b2      	beq.n	cf42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    cfdc:	f241 313c 	movw	r1, #4924	; 0x133c
    cfe0:	e073      	b.n	d0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    cfe2:	7bb8      	ldrb	r0, [r7, #14]
    cfe4:	b190      	cbz	r0, d00c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    cfe6:	2200      	movs	r2, #0
    cfe8:	2101      	movs	r1, #1
    cfea:	a801      	add	r0, sp, #4
    cfec:	f7f6 ff6a 	bl	3ec4 <sym_QSUAMFEDJMVCYQUJNPHGXEKEFULJEH46BNC5SLA>
    cff0:	0004      	movs	r4, r0
    cff2:	d03c      	beq.n	d06e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    cff4:	2100      	movs	r1, #0
    cff6:	f7f9 fbbb 	bl	6770 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    cffa:	4620      	mov	r0, r4
    cffc:	f7fa fcfc 	bl	79f8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    d000:	f004 ffd4 	bl	11fac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
    d004:	b148      	cbz	r0, d01a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    d006:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d00a:	e000      	b.n	d00e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xee>
    d00c:	e016      	b.n	d03c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
    d00e:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    d012:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    d016:	84c1      	strh	r1, [r0, #38]	; 0x26
    d018:	8502      	strh	r2, [r0, #40]	; 0x28
    d01a:	7bb8      	ldrb	r0, [r7, #14]
    d01c:	b100      	cbz	r0, d020 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
    d01e:	2001      	movs	r0, #1
    d020:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
    d024:	f8d5 0248 	ldr.w	r0, [r5, #584]	; 0x248
    d028:	62a0      	str	r0, [r4, #40]	; 0x28
    d02a:	4620      	mov	r0, r4
    d02c:	f004 f835 	bl	1109a <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>
    d030:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    d034:	b120      	cbz	r0, d040 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x120>
    d036:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    d03a:	e003      	b.n	d044 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x124>
    d03c:	2012      	movs	r0, #18
    d03e:	e780      	b.n	cf42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    d040:	f641 574c 	movw	r7, #7500	; 0x1d4c
    d044:	f7fa fc6c 	bl	7920 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    d048:	b908      	cbnz	r0, d04e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    d04a:	f7fa fccf 	bl	79ec <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    d04e:	4621      	mov	r1, r4
    d050:	2001      	movs	r0, #1
    d052:	6067      	str	r7, [r4, #4]
    d054:	f7ff ff34 	bl	cec0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x218>
    d058:	b158      	cbz	r0, d072 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x152>
    d05a:	2101      	movs	r1, #1
    d05c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d060:	f7f6 ffde 	bl	4020 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d064:	b118      	cbz	r0, d06e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    d066:	f241 318a 	movw	r1, #5002	; 0x138a
    d06a:	e02e      	b.n	d0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    d06c:	e022      	b.n	d0b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>
    d06e:	2009      	movs	r0, #9
    d070:	e767      	b.n	cf42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    d072:	f895 0241 	ldrb.w	r0, [r5, #577]	; 0x241
    d076:	9000      	str	r0, [sp, #0]
    d078:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
    d07c:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
    d080:	f8b5 1242 	ldrh.w	r1, [r5, #578]	; 0x242
    d084:	8820      	ldrh	r0, [r4, #0]
    d086:	f7f7 f891 	bl	41ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    d08a:	b110      	cbz	r0, d092 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x172>
    d08c:	f241 3195 	movw	r1, #5013	; 0x1395
    d090:	e01b      	b.n	d0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    d092:	4631      	mov	r1, r6
    d094:	4620      	mov	r0, r4
    d096:	f7fb fe79 	bl	8d8c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    d09a:	b110      	cbz	r0, d0a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x182>
    d09c:	f241 3197 	movw	r1, #5015	; 0x1397
    d0a0:	e013      	b.n	d0ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
    d0a2:	480e      	ldr	r0, [pc, #56]	; (d0dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    d0a4:	6843      	ldr	r3, [r0, #4]
    d0a6:	b19b      	cbz	r3, d0d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    d0a8:	2200      	movs	r2, #0
    d0aa:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    d0ae:	4620      	mov	r0, r4
    d0b0:	4798      	blx	r3
    d0b2:	e00d      	b.n	d0d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    d0b4:	b164      	cbz	r4, d0d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    d0b6:	8820      	ldrh	r0, [r4, #0]
    d0b8:	f7f7 fe40 	bl	4d3c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    d0bc:	8820      	ldrh	r0, [r4, #0]
    d0be:	2101      	movs	r1, #1
    d0c0:	f7f6 ffae 	bl	4020 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d0c4:	b120      	cbz	r0, d0d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b0>
    d0c6:	f241 31af 	movw	r1, #5039	; 0x13af
    d0ca:	2039      	movs	r0, #57	; 0x39
    d0cc:	f7f6 fd5a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0d0:	2000      	movs	r0, #0
    d0d2:	e736      	b.n	cf42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22>
    d0d4:	20001244 	.word	0x20001244
    d0d8:	2000170a 	.word	0x2000170a
    d0dc:	20000320 	.word	0x20000320
    d0e0:	4806      	ldr	r0, [pc, #24]	; (d0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>)
    d0e2:	2100      	movs	r1, #0
    d0e4:	f890 2020 	ldrb.w	r2, [r0, #32]
    d0e8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    d0ec:	8091      	strh	r1, [r2, #4]
    d0ee:	f810 1f20 	ldrb.w	r1, [r0, #32]!
    d0f2:	1c49      	adds	r1, r1, #1
    d0f4:	f001 0101 	and.w	r1, r1, #1
    d0f8:	7001      	strb	r1, [r0, #0]
    d0fa:	4770      	bx	lr
    d0fc:	2000171c 	.word	0x2000171c
    d100:	4806      	ldr	r0, [pc, #24]	; (d11c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>)
    d102:	2100      	movs	r1, #0
    d104:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    d108:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    d10c:	8291      	strh	r1, [r2, #20]
    d10e:	f810 1f21 	ldrb.w	r1, [r0, #33]!
    d112:	1c49      	adds	r1, r1, #1
    d114:	f001 0101 	and.w	r1, r1, #1
    d118:	7001      	strb	r1, [r0, #0]
    d11a:	4770      	bx	lr
    d11c:	2000171c 	.word	0x2000171c
    d120:	b510      	push	{r4, lr}
    d122:	4604      	mov	r4, r0
    d124:	88c1      	ldrh	r1, [r0, #6]
    d126:	8880      	ldrh	r0, [r0, #4]
    d128:	f004 fece 	bl	11ec8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
    d12c:	2800      	cmp	r0, #0
    d12e:	d10f      	bne.n	d150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    d130:	8861      	ldrh	r1, [r4, #2]
    d132:	8820      	ldrh	r0, [r4, #0]
    d134:	f004 fec8 	bl	11ec8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
    d138:	2800      	cmp	r0, #0
    d13a:	d109      	bne.n	d150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    d13c:	4805      	ldr	r0, [pc, #20]	; (d154 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>)
    d13e:	88a1      	ldrh	r1, [r4, #4]
    d140:	8141      	strh	r1, [r0, #10]
    d142:	8821      	ldrh	r1, [r4, #0]
    d144:	80c1      	strh	r1, [r0, #6]
    d146:	88e1      	ldrh	r1, [r4, #6]
    d148:	8181      	strh	r1, [r0, #12]
    d14a:	8861      	ldrh	r1, [r4, #2]
    d14c:	8101      	strh	r1, [r0, #8]
    d14e:	2000      	movs	r0, #0
    d150:	bd10      	pop	{r4, pc}
    d152:	0000      	.short	0x0000
    d154:	2000170a 	.word	0x2000170a
    d158:	0b11370b 	.word	0x0b11370b
    d15c:	11370059 	.word	0x11370059

0000d160 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    d160:	b510      	push	{r4, lr}
    d162:	4a06      	ldr	r2, [pc, #24]	; (d17c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    d164:	4604      	mov	r4, r0
    d166:	7010      	strb	r0, [r2, #0]
    d168:	6051      	str	r1, [r2, #4]
    d16a:	6890      	ldr	r0, [r2, #8]
    d16c:	f005 f888 	bl	12280 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    d170:	4620      	mov	r0, r4
    d172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d176:	f7ff bd3b 	b.w	cbf0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    d17a:	0000      	.short	0x0000
    d17c:	20000330 	.word	0x20000330

0000d180 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    d180:	b510      	push	{r4, lr}
    d182:	4c07      	ldr	r4, [pc, #28]	; (d1a0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    d184:	68e0      	ldr	r0, [r4, #12]
    d186:	f005 f87b 	bl	12280 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    d18a:	6920      	ldr	r0, [r4, #16]
    d18c:	f005 f878 	bl	12280 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x98>
    d190:	f7f7 fec0 	bl	4f14 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    d194:	f7f8 fe0a 	bl	5dac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    d198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d19c:	f7ff bd2e 	b.w	cbfc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    d1a0:	20000330 	.word	0x20000330

0000d1a4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    d1a4:	b500      	push	{lr}
    d1a6:	4905      	ldr	r1, [pc, #20]	; (d1bc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    d1a8:	4805      	ldr	r0, [pc, #20]	; (d1c0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    d1aa:	f005 f81d 	bl	121e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d1ae:	4804      	ldr	r0, [pc, #16]	; (d1c0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    d1b0:	4904      	ldr	r1, [pc, #16]	; (d1c4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    d1b2:	1d00      	adds	r0, r0, #4
    d1b4:	f85d eb04 	ldr.w	lr, [sp], #4
    d1b8:	f005 b816 	b.w	121e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d1bc:	20000344 	.word	0x20000344
    d1c0:	20000338 	.word	0x20000338
    d1c4:	2000034c 	.word	0x2000034c

0000d1c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    d1c8:	b500      	push	{lr}
    d1ca:	4908      	ldr	r1, [pc, #32]	; (d1ec <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    d1cc:	4808      	ldr	r0, [pc, #32]	; (d1f0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    d1ce:	f005 f80b 	bl	121e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d1d2:	4807      	ldr	r0, [pc, #28]	; (d1f0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    d1d4:	4907      	ldr	r1, [pc, #28]	; (d1f4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    d1d6:	1d00      	adds	r0, r0, #4
    d1d8:	f005 f806 	bl	121e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d1dc:	4804      	ldr	r0, [pc, #16]	; (d1f0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    d1de:	4906      	ldr	r1, [pc, #24]	; (d1f8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    d1e0:	3008      	adds	r0, #8
    d1e2:	f85d eb04 	ldr.w	lr, [sp], #4
    d1e6:	f004 bfff 	b.w	121e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    d1ea:	0000      	.short	0x0000
    d1ec:	2000037c 	.word	0x2000037c
    d1f0:	20000338 	.word	0x20000338
    d1f4:	20000384 	.word	0x20000384
    d1f8:	20000374 	.word	0x20000374

0000d1fc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    d1fc:	4801      	ldr	r0, [pc, #4]	; (d204 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    d1fe:	7840      	ldrb	r0, [r0, #1]
    d200:	4770      	bx	lr
    d202:	0000      	.short	0x0000
    d204:	20000330 	.word	0x20000330
    d208:	4807      	ldr	r0, [pc, #28]	; (d228 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    d20a:	b510      	push	{r4, lr}
    d20c:	7800      	ldrb	r0, [r0, #0]
    d20e:	f7fb fe89 	bl	8f24 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    d212:	4806      	ldr	r0, [pc, #24]	; (d22c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    d214:	f7fa fb00 	bl	7818 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    d218:	4906      	ldr	r1, [pc, #24]	; (d234 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    d21a:	4805      	ldr	r0, [pc, #20]	; (d230 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    d21c:	6008      	str	r0, [r1, #0]
    d21e:	4907      	ldr	r1, [pc, #28]	; (d23c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x40>)
    d220:	4805      	ldr	r0, [pc, #20]	; (d238 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    d222:	6008      	str	r0, [r1, #0]
    d224:	bd10      	pop	{r4, pc}
    d226:	0000      	.short	0x0000
    d228:	20000330 	.word	0x20000330
    d22c:	20001cac 	.word	0x20001cac
    d230:	00007501 	.word	0x00007501
    d234:	20000354 	.word	0x20000354
    d238:	00006cd9 	.word	0x00006cd9
    d23c:	20000358 	.word	0x20000358
    d240:	b510      	push	{r4, lr}
    d242:	f7f7 fdfb 	bl	4e3c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    d246:	4806      	ldr	r0, [pc, #24]	; (d260 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x64>)
    d248:	4904      	ldr	r1, [pc, #16]	; (d25c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x60>)
    d24a:	7800      	ldrb	r0, [r0, #0]
    d24c:	f7f7 fece 	bl	4fec <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    d250:	f004 ffea 	bl	12228 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x40>
    d254:	4904      	ldr	r1, [pc, #16]	; (d268 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x6c>)
    d256:	4803      	ldr	r0, [pc, #12]	; (d264 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x68>)
    d258:	6008      	str	r0, [r1, #0]
    d25a:	bd10      	pop	{r4, pc}
    d25c:	20001cac 	.word	0x20001cac
    d260:	20000330 	.word	0x20000330
    d264:	00004fa1 	.word	0x00004fa1
    d268:	20000370 	.word	0x20000370
    d26c:	b510      	push	{r4, lr}
    d26e:	4c08      	ldr	r4, [pc, #32]	; (d290 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x94>)
    d270:	2001      	movs	r0, #1
    d272:	7060      	strb	r0, [r4, #1]
    d274:	f7fa fbf6 	bl	7a64 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    d278:	7820      	ldrb	r0, [r4, #0]
    d27a:	f7fc fe1d 	bl	9eb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    d27e:	f7ff ffdf 	bl	d240 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x44>
    d282:	4905      	ldr	r1, [pc, #20]	; (d298 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x9c>)
    d284:	4803      	ldr	r0, [pc, #12]	; (d294 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x98>)
    d286:	6008      	str	r0, [r1, #0]
    d288:	4905      	ldr	r1, [pc, #20]	; (d2a0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa4>)
    d28a:	4804      	ldr	r0, [pc, #16]	; (d29c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xa0>)
    d28c:	6008      	str	r0, [r1, #0]
    d28e:	bd10      	pop	{r4, pc}
    d290:	20000330 	.word	0x20000330
    d294:	000111c7 	.word	0x000111c7
    d298:	2000036c 	.word	0x2000036c
    d29c:	00006d39 	.word	0x00006d39
    d2a0:	20000360 	.word	0x20000360

0000d2a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    d2a4:	4a07      	ldr	r2, [pc, #28]	; (d2c4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x20>)
    d2a6:	b510      	push	{r4, lr}
    d2a8:	6811      	ldr	r1, [r2, #0]
    d2aa:	fa21 f300 	lsr.w	r3, r1, r0
    d2ae:	07db      	lsls	r3, r3, #31
    d2b0:	d003      	beq.n	d2ba <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x16>
    d2b2:	211f      	movs	r1, #31
    d2b4:	2002      	movs	r0, #2
    d2b6:	f7f6 fc65 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2ba:	2301      	movs	r3, #1
    d2bc:	4083      	lsls	r3, r0
    d2be:	430b      	orrs	r3, r1
    d2c0:	6013      	str	r3, [r2, #0]
    d2c2:	bd10      	pop	{r4, pc}
    d2c4:	2000038c 	.word	0x2000038c

0000d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    d2c8:	4801      	ldr	r0, [pc, #4]	; (d2d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    d2ca:	6800      	ldr	r0, [r0, #0]
    d2cc:	4770      	bx	lr
    d2ce:	0000      	.short	0x0000
    d2d0:	2000038c 	.word	0x2000038c

0000d2d4 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>:
    d2d4:	00c1      	lsls	r1, r0, #3
    d2d6:	4802      	ldr	r0, [pc, #8]	; (d2e0 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI+0xc>)
    d2d8:	6800      	ldr	r0, [r0, #0]
    d2da:	40c8      	lsrs	r0, r1
    d2dc:	b2c0      	uxtb	r0, r0
    d2de:	4770      	bx	lr
    d2e0:	2000038c 	.word	0x2000038c

0000d2e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    d2e4:	4803      	ldr	r0, [pc, #12]	; (d2f4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    d2e6:	8800      	ldrh	r0, [r0, #0]
    d2e8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    d2ec:	0040      	lsls	r0, r0, #1
    d2ee:	1c40      	adds	r0, r0, #1
    d2f0:	4770      	bx	lr
    d2f2:	0000      	.short	0x0000
    d2f4:	2000038c 	.word	0x2000038c

0000d2f8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    d2f8:	b570      	push	{r4, r5, r6, lr}
    d2fa:	4605      	mov	r5, r0
    d2fc:	4616      	mov	r6, r2
    d2fe:	460c      	mov	r4, r1
    d300:	2002      	movs	r0, #2
    d302:	f000 f9b9 	bl	d678 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d306:	4905      	ldr	r1, [pc, #20]	; (d31c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
    d308:	2001      	movs	r0, #1
    d30a:	7008      	strb	r0, [r1, #0]
    d30c:	4904      	ldr	r1, [pc, #16]	; (d320 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    d30e:	1ef0      	subs	r0, r6, #3
    d310:	6008      	str	r0, [r1, #0]
    d312:	4804      	ldr	r0, [pc, #16]	; (d324 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    d314:	6005      	str	r5, [r0, #0]
    d316:	1f00      	subs	r0, r0, #4
    d318:	6004      	str	r4, [r0, #0]
    d31a:	bd70      	pop	{r4, r5, r6, pc}
    d31c:	200003c3 	.word	0x200003c3
    d320:	4000f510 	.word	0x4000f510
    d324:	4000f508 	.word	0x4000f508

0000d328 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    d328:	4811      	ldr	r0, [pc, #68]	; (d370 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
    d32a:	7801      	ldrb	r1, [r0, #0]
    d32c:	b1d9      	cbz	r1, d366 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3e>
    d32e:	4a11      	ldr	r2, [pc, #68]	; (d374 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
    d330:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    d334:	6011      	str	r1, [r2, #0]
    d336:	4910      	ldr	r1, [pc, #64]	; (d378 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
    d338:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    d33c:	2200      	movs	r2, #0
    d33e:	2b00      	cmp	r3, #0
    d340:	bf1c      	itt	ne
    d342:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
    d346:	2b00      	cmpne	r3, #0
    d348:	d002      	beq.n	d350 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
    d34a:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
    d34e:	b119      	cbz	r1, d358 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x30>
    d350:	7042      	strb	r2, [r0, #1]
    d352:	f04f 0110 	mov.w	r1, #16
    d356:	e004      	b.n	d362 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
    d358:	f04f 0101 	mov.w	r1, #1
    d35c:	7041      	strb	r1, [r0, #1]
    d35e:	4907      	ldr	r1, [pc, #28]	; (d37c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x54>)
    d360:	6809      	ldr	r1, [r1, #0]
    d362:	7081      	strb	r1, [r0, #2]
    d364:	7002      	strb	r2, [r0, #0]
    d366:	f04f 0000 	mov.w	r0, #0
    d36a:	f000 b985 	b.w	d678 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d36e:	0000      	.short	0x0000
    d370:	200003c3 	.word	0x200003c3
    d374:	4001f508 	.word	0x4001f508
    d378:	4000f000 	.word	0x4000f000
    d37c:	4000f400 	.word	0x4000f400

0000d380 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    d380:	b510      	push	{r4, lr}
    d382:	2002      	movs	r0, #2
    d384:	f000 f978 	bl	d678 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d388:	4907      	ldr	r1, [pc, #28]	; (d3a8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
    d38a:	2001      	movs	r0, #1
    d38c:	7008      	strb	r0, [r1, #0]
    d38e:	4907      	ldr	r1, [pc, #28]	; (d3ac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
    d390:	2000      	movs	r0, #0
    d392:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d396:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    d39a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d39e:	4904      	ldr	r1, [pc, #16]	; (d3b0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
    d3a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d3a4:	6008      	str	r0, [r1, #0]
    d3a6:	bd10      	pop	{r4, pc}
    d3a8:	200003c3 	.word	0x200003c3
    d3ac:	4000f000 	.word	0x4000f000
    d3b0:	4001f504 	.word	0x4001f504

0000d3b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    d3b4:	4803      	ldr	r0, [pc, #12]	; (d3c4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    d3b6:	2100      	movs	r1, #0
    d3b8:	7001      	strb	r1, [r0, #0]
    d3ba:	7041      	strb	r1, [r0, #1]
    d3bc:	2110      	movs	r1, #16
    d3be:	7081      	strb	r1, [r0, #2]
    d3c0:	4770      	bx	lr
    d3c2:	0000      	.short	0x0000
    d3c4:	200003c3 	.word	0x200003c3

0000d3c8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    d3c8:	480c      	ldr	r0, [pc, #48]	; (d3fc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
    d3ca:	7801      	ldrb	r1, [r0, #0]
    d3cc:	2900      	cmp	r1, #0
    d3ce:	bf04      	itt	eq
    d3d0:	7880      	ldrbeq	r0, [r0, #2]
    d3d2:	4770      	bxeq	lr
    d3d4:	480a      	ldr	r0, [pc, #40]	; (d400 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
    d3d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d3da:	2900      	cmp	r1, #0
    d3dc:	bf1c      	itt	ne
    d3de:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    d3e2:	2900      	cmpne	r1, #0
    d3e4:	d002      	beq.n	d3ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
    d3e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    d3ea:	b110      	cbz	r0, d3f2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
    d3ec:	f04f 0010 	mov.w	r0, #16
    d3f0:	4770      	bx	lr
    d3f2:	4804      	ldr	r0, [pc, #16]	; (d404 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
    d3f4:	6800      	ldr	r0, [r0, #0]
    d3f6:	b2c0      	uxtb	r0, r0
    d3f8:	4770      	bx	lr
    d3fa:	0000      	.short	0x0000
    d3fc:	200003c3 	.word	0x200003c3
    d400:	4000f000 	.word	0x4000f000
    d404:	4000f400 	.word	0x4000f400

0000d408 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    d408:	480e      	ldr	r0, [pc, #56]	; (d444 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3c>)
    d40a:	7801      	ldrb	r1, [r0, #0]
    d40c:	2900      	cmp	r1, #0
    d40e:	bf04      	itt	eq
    d410:	7840      	ldrbeq	r0, [r0, #1]
    d412:	4770      	bxeq	lr
    d414:	480c      	ldr	r0, [pc, #48]	; (d448 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x40>)
    d416:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d41a:	2900      	cmp	r1, #0
    d41c:	bf04      	itt	eq
    d41e:	2002      	moveq	r0, #2
    d420:	4770      	bxeq	lr
    d422:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    d426:	2900      	cmp	r1, #0
    d428:	bf1c      	itt	ne
    d42a:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
    d42e:	2900      	cmpne	r1, #0
    d430:	d005      	beq.n	d43e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x36>
    d432:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    d436:	2800      	cmp	r0, #0
    d438:	bf04      	itt	eq
    d43a:	2001      	moveq	r0, #1
    d43c:	4770      	bxeq	lr
    d43e:	2000      	movs	r0, #0
    d440:	4770      	bx	lr
    d442:	0000      	.short	0x0000
    d444:	200003c3 	.word	0x200003c3
    d448:	4000f000 	.word	0x4000f000

0000d44c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    d44c:	4813      	ldr	r0, [pc, #76]	; (d49c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x50>)
    d44e:	b510      	push	{r4, lr}
    d450:	7802      	ldrb	r2, [r0, #0]
    d452:	4b13      	ldr	r3, [pc, #76]	; (d4a0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x54>)
    d454:	7840      	ldrb	r0, [r0, #1]
    d456:	21c8      	movs	r1, #200	; 0xc8
    d458:	1e49      	subs	r1, r1, #1
    d45a:	b2c9      	uxtb	r1, r1
    d45c:	b182      	cbz	r2, d480 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x34>
    d45e:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
    d462:	f1bc 0f00 	cmp.w	ip, #0
    d466:	d011      	beq.n	d48c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    d468:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    d46c:	2800      	cmp	r0, #0
    d46e:	bf1c      	itt	ne
    d470:	f8d3 0104 	ldrne.w	r0, [r3, #260]	; 0x104
    d474:	2800      	cmpne	r0, #0
    d476:	d007      	beq.n	d488 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    d478:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    d47c:	b160      	cbz	r0, d498 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    d47e:	e003      	b.n	d488 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x3c>
    d480:	2802      	cmp	r0, #2
    d482:	d003      	beq.n	d48c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x40>
    d484:	2801      	cmp	r0, #1
    d486:	d007      	beq.n	d498 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>
    d488:	2000      	movs	r0, #0
    d48a:	bd10      	pop	{r4, pc}
    d48c:	2900      	cmp	r1, #0
    d48e:	d1e3      	bne.n	d458 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
    d490:	218e      	movs	r1, #142	; 0x8e
    d492:	203b      	movs	r0, #59	; 0x3b
    d494:	f7f6 fb76 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d498:	2001      	movs	r0, #1
    d49a:	bd10      	pop	{r4, pc}
    d49c:	200003c3 	.word	0x200003c3
    d4a0:	4000f000 	.word	0x4000f000

0000d4a4 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    d4a4:	b570      	push	{r4, r5, r6, lr}
    d4a6:	4606      	mov	r6, r0
    d4a8:	4614      	mov	r4, r2
    d4aa:	460d      	mov	r5, r1
    d4ac:	2001      	movs	r0, #1
    d4ae:	f000 f8e3 	bl	d678 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d4b2:	4803      	ldr	r0, [pc, #12]	; (d4c0 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    d4b4:	6006      	str	r6, [r0, #0]
    d4b6:	1d00      	adds	r0, r0, #4
    d4b8:	6004      	str	r4, [r0, #0]
    d4ba:	1d00      	adds	r0, r0, #4
    d4bc:	6005      	str	r5, [r0, #0]
    d4be:	bd70      	pop	{r4, r5, r6, pc}
    d4c0:	4000f508 	.word	0x4000f508

0000d4c4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    d4c4:	480a      	ldr	r0, [pc, #40]	; (d4f0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    d4c6:	7801      	ldrb	r1, [r0, #0]
    d4c8:	b179      	cbz	r1, d4ea <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x26>
    d4ca:	4a0a      	ldr	r2, [pc, #40]	; (d4f4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    d4cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    d4d0:	6011      	str	r1, [r2, #0]
    d4d2:	4909      	ldr	r1, [pc, #36]	; (d4f8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    d4d4:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    d4d8:	2100      	movs	r1, #0
    d4da:	2a00      	cmp	r2, #0
    d4dc:	bf08      	it	eq
    d4de:	7041      	strbeq	r1, [r0, #1]
    d4e0:	d002      	beq.n	d4e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    d4e2:	4a06      	ldr	r2, [pc, #24]	; (d4fc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    d4e4:	6812      	ldr	r2, [r2, #0]
    d4e6:	7042      	strb	r2, [r0, #1]
    d4e8:	7001      	strb	r1, [r0, #0]
    d4ea:	2000      	movs	r0, #0
    d4ec:	f000 b8c4 	b.w	d678 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    d4f0:	200003c6 	.word	0x200003c6
    d4f4:	4001f508 	.word	0x4001f508
    d4f8:	4000f000 	.word	0x4000f000
    d4fc:	4000f400 	.word	0x4000f400

0000d500 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    d500:	b570      	push	{r4, r5, r6, lr}
    d502:	4604      	mov	r4, r0
    d504:	4817      	ldr	r0, [pc, #92]	; (d564 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    d506:	460e      	mov	r6, r1
    d508:	2501      	movs	r5, #1
    d50a:	7005      	strb	r5, [r0, #0]
    d50c:	4916      	ldr	r1, [pc, #88]	; (d568 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    d50e:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    d512:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    d516:	6008      	str	r0, [r1, #0]
    d518:	f001 fc8c 	bl	ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d51c:	b928      	cbnz	r0, d52a <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2a>
    d51e:	4813      	ldr	r0, [pc, #76]	; (d56c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    d520:	6801      	ldr	r1, [r0, #0]
    d522:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    d526:	4331      	orrs	r1, r6
    d528:	6001      	str	r1, [r0, #0]
    d52a:	4911      	ldr	r1, [pc, #68]	; (d570 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x70>)
    d52c:	2000      	movs	r0, #0
    d52e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    d532:	4b10      	ldr	r3, [pc, #64]	; (d574 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x74>)
    d534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    d538:	601a      	str	r2, [r3, #0]
    d53a:	2c00      	cmp	r4, #0
    d53c:	bf02      	ittt	eq
    d53e:	f8c1 5200 	streq.w	r5, [r1, #512]	; 0x200
    d542:	600d      	streq	r5, [r1, #0]
    d544:	bd70      	popeq	{r4, r5, r6, pc}
    d546:	2c01      	cmp	r4, #1
    d548:	d003      	beq.n	d552 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    d54a:	2174      	movs	r1, #116	; 0x74
    d54c:	203c      	movs	r0, #60	; 0x3c
    d54e:	f7f6 fb19 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d552:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    d556:	600d      	str	r5, [r1, #0]
    d558:	4907      	ldr	r1, [pc, #28]	; (d578 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x78>)
    d55a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    d55e:	6008      	str	r0, [r1, #0]
    d560:	bd70      	pop	{r4, r5, r6, pc}
    d562:	0000      	.short	0x0000
    d564:	200003c6 	.word	0x200003c6
    d568:	4000f504 	.word	0x4000f504
    d56c:	4000f518 	.word	0x4000f518
    d570:	4000f000 	.word	0x4000f000
    d574:	4001f508 	.word	0x4001f508
    d578:	4001f504 	.word	0x4001f504

0000d57c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    d57c:	4802      	ldr	r0, [pc, #8]	; (d588 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    d57e:	2100      	movs	r1, #0
    d580:	7001      	strb	r1, [r0, #0]
    d582:	7041      	strb	r1, [r0, #1]
    d584:	4770      	bx	lr
    d586:	0000      	.short	0x0000
    d588:	200003c6 	.word	0x200003c6

0000d58c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    d58c:	4807      	ldr	r0, [pc, #28]	; (d5ac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    d58e:	7801      	ldrb	r1, [r0, #0]
    d590:	2900      	cmp	r1, #0
    d592:	bf04      	itt	eq
    d594:	7840      	ldrbeq	r0, [r0, #1]
    d596:	4770      	bxeq	lr
    d598:	4805      	ldr	r0, [pc, #20]	; (d5b0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    d59a:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    d59e:	2800      	cmp	r0, #0
    d5a0:	bf08      	it	eq
    d5a2:	4770      	bxeq	lr
    d5a4:	4803      	ldr	r0, [pc, #12]	; (d5b4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x28>)
    d5a6:	6800      	ldr	r0, [r0, #0]
    d5a8:	b2c0      	uxtb	r0, r0
    d5aa:	4770      	bx	lr
    d5ac:	200003c6 	.word	0x200003c6
    d5b0:	4000f000 	.word	0x4000f000
    d5b4:	4000f400 	.word	0x4000f400

0000d5b8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    d5b8:	4901      	ldr	r1, [pc, #4]	; (d5c0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    d5ba:	2001      	movs	r0, #1
    d5bc:	6088      	str	r0, [r1, #8]
    d5be:	4770      	bx	lr
    d5c0:	4000f000 	.word	0x4000f000

0000d5c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    d5c4:	2800      	cmp	r0, #0
    d5c6:	bf08      	it	eq
    d5c8:	4770      	bxeq	lr
    d5ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5ce:	481b      	ldr	r0, [pc, #108]	; (d63c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
    d5d0:	7800      	ldrb	r0, [r0, #0]
    d5d2:	b1e0      	cbz	r0, d60e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4a>
    d5d4:	4c1a      	ldr	r4, [pc, #104]	; (d640 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    d5d6:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d5da:	2800      	cmp	r0, #0
    d5dc:	bf18      	it	ne
    d5de:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d5e2:	f04f 0902 	mov.w	r9, #2
    d5e6:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    d5ea:	4f16      	ldr	r7, [pc, #88]	; (d644 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    d5ec:	6838      	ldr	r0, [r7, #0]
    d5ee:	f3c0 1800 	ubfx	r8, r0, #4, #1
    d5f2:	6838      	ldr	r0, [r7, #0]
    d5f4:	f040 0010 	orr.w	r0, r0, #16
    d5f8:	6038      	str	r0, [r7, #0]
    d5fa:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d5fe:	2800      	cmp	r0, #0
    d600:	bf04      	itt	eq
    d602:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
    d606:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
    d60a:	d10c      	bne.n	d626 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    d60c:	e003      	b.n	d616 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d60e:	21d3      	movs	r1, #211	; 0xd3
    d610:	203c      	movs	r0, #60	; 0x3c
    d612:	f7f6 fab7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d616:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
    d61a:	f7f6 f8f9 	bl	3810 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    d61e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    d622:	2800      	cmp	r0, #0
    d624:	d0f7      	beq.n	d616 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x52>
    d626:	f1b8 0f00 	cmp.w	r8, #0
    d62a:	d103      	bne.n	d634 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    d62c:	6838      	ldr	r0, [r7, #0]
    d62e:	f020 0010 	bic.w	r0, r0, #16
    d632:	6038      	str	r0, [r7, #0]
    d634:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    d638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d63c:	200003c6 	.word	0x200003c6
    d640:	4000f000 	.word	0x4000f000
    d644:	e000ed10 	.word	0xe000ed10

0000d648 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    d648:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d64c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    d650:	2000      	movs	r0, #0
    d652:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    d656:	f3bf 8f4f 	dsb	sy
    d65a:	f3bf 8f6f 	isb	sy
    d65e:	4904      	ldr	r1, [pc, #16]	; (d670 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x28>)
    d660:	6008      	str	r0, [r1, #0]
    d662:	6008      	str	r0, [r1, #0]
    d664:	4903      	ldr	r1, [pc, #12]	; (d674 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
    d666:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    d66a:	6008      	str	r0, [r1, #0]
    d66c:	4770      	bx	lr
    d66e:	0000      	.short	0x0000
    d670:	4000f500 	.word	0x4000f500
    d674:	4001f508 	.word	0x4001f508

0000d678 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    d678:	4912      	ldr	r1, [pc, #72]	; (d6c4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
    d67a:	b510      	push	{r4, lr}
    d67c:	2200      	movs	r2, #0
    d67e:	600a      	str	r2, [r1, #0]
    d680:	600a      	str	r2, [r1, #0]
    d682:	4b11      	ldr	r3, [pc, #68]	; (d6c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
    d684:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
    d688:	601a      	str	r2, [r3, #0]
    d68a:	2800      	cmp	r0, #0
    d68c:	bf08      	it	eq
    d68e:	bd10      	popeq	{r4, pc}
    d690:	4a0e      	ldr	r2, [pc, #56]	; (d6cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
    d692:	4b0f      	ldr	r3, [pc, #60]	; (d6d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
    d694:	f8df c03c 	ldr.w	ip, [pc, #60]	; d6d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x5c>
    d698:	2801      	cmp	r0, #1
    d69a:	d005      	beq.n	d6a8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    d69c:	2802      	cmp	r0, #2
    d69e:	d008      	beq.n	d6b2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    d6a0:	217d      	movs	r1, #125	; 0x7d
    d6a2:	203d      	movs	r0, #61	; 0x3d
    d6a4:	f7f6 fa6e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6a8:	2002      	movs	r0, #2
    d6aa:	6008      	str	r0, [r1, #0]
    d6ac:	601a      	str	r2, [r3, #0]
    d6ae:	0600      	lsls	r0, r0, #24
    d6b0:	e004      	b.n	d6bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
    d6b2:	2003      	movs	r0, #3
    d6b4:	6008      	str	r0, [r1, #0]
    d6b6:	601a      	str	r2, [r3, #0]
    d6b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d6bc:	f8cc 0000 	str.w	r0, [ip]
    d6c0:	bd10      	pop	{r4, pc}
    d6c2:	0000      	.short	0x0000
    d6c4:	4000f500 	.word	0x4000f500
    d6c8:	4001f508 	.word	0x4001f508
    d6cc:	20001dae 	.word	0x20001dae
    d6d0:	4000f514 	.word	0x4000f514
    d6d4:	4001f504 	.word	0x4001f504

0000d6d8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    d6d8:	4805      	ldr	r0, [pc, #20]	; (d6f0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    d6da:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d6de:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    d6e2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d6e6:	4903      	ldr	r1, [pc, #12]	; (d6f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    d6e8:	2000      	movs	r0, #0
    d6ea:	6008      	str	r0, [r1, #0]
    d6ec:	4770      	bx	lr
    d6ee:	0000      	.short	0x0000
    d6f0:	40001000 	.word	0x40001000
    d6f4:	40001560 	.word	0x40001560

0000d6f8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    d6f8:	4904      	ldr	r1, [pc, #16]	; (d70c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    d6fa:	6008      	str	r0, [r1, #0]
    d6fc:	4804      	ldr	r0, [pc, #16]	; (d710 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    d6fe:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d702:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    d706:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d70a:	4770      	bx	lr
    d70c:	40001560 	.word	0x40001560
    d710:	40001000 	.word	0x40001000

0000d714 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
    d714:	00c2      	lsls	r2, r0, #3
    d716:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d71a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    d71e:	4b07      	ldr	r3, [pc, #28]	; (d73c <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
    d720:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    d724:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    d728:	2101      	movs	r1, #1
    d72a:	fa01 f000 	lsl.w	r0, r1, r0
    d72e:	4904      	ldr	r1, [pc, #16]	; (d740 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
    d730:	6008      	str	r0, [r1, #0]
    d732:	4904      	ldr	r1, [pc, #16]	; (d744 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
    d734:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    d736:	4310      	orrs	r0, r2
    d738:	6388      	str	r0, [r1, #56]	; 0x38
    d73a:	4770      	bx	lr
    d73c:	40001104 	.word	0x40001104
    d740:	4001f504 	.word	0x4001f504
    d744:	20001950 	.word	0x20001950

0000d748 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    d748:	4801      	ldr	r0, [pc, #4]	; (d750 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    d74a:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    d74e:	4770      	bx	lr
    d750:	20001950 	.word	0x20001950

0000d754 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    d754:	4a01      	ldr	r2, [pc, #4]	; (d75c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    d756:	7051      	strb	r1, [r2, #1]
    d758:	7010      	strb	r0, [r2, #0]
    d75a:	4770      	bx	lr
    d75c:	20001950 	.word	0x20001950

0000d760 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    d760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d764:	f7f6 f8c4 	bl	38f0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
    d768:	f7f6 f926 	bl	39b8 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
    d76c:	4b30      	ldr	r3, [pc, #192]	; (d830 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd0>)
    d76e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    d772:	2610      	movs	r6, #16
    d774:	f3c1 1500 	ubfx	r5, r1, #4, #1
    d778:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
    d77c:	2102      	movs	r1, #2
    d77e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    d782:	4a2c      	ldr	r2, [pc, #176]	; (d834 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd4>)
    d784:	4f2d      	ldr	r7, [pc, #180]	; (d83c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xdc>)
    d786:	f04f 0c00 	mov.w	ip, #0
    d78a:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c
    d78e:	492a      	ldr	r1, [pc, #168]	; (d838 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xd8>)
    d790:	6039      	str	r1, [r7, #0]
    d792:	7ad1      	ldrb	r1, [r2, #11]
    d794:	2401      	movs	r4, #1
    d796:	2901      	cmp	r1, #1
    d798:	d002      	beq.n	d7a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x40>
    d79a:	2902      	cmp	r1, #2
    d79c:	d003      	beq.n	d7a6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    d79e:	e017      	b.n	d7d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d7a0:	7e11      	ldrb	r1, [r2, #24]
    d7a2:	b911      	cbnz	r1, d7aa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4a>
    d7a4:	e014      	b.n	d7d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d7a6:	7e51      	ldrb	r1, [r2, #25]
    d7a8:	b191      	cbz	r1, d7d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    d7aa:	7f91      	ldrb	r1, [r2, #30]
    d7ac:	f892 801f 	ldrb.w	r8, [r2, #31]
    d7b0:	fa04 f101 	lsl.w	r1, r4, r1
    d7b4:	fa04 f808 	lsl.w	r8, r4, r8
    d7b8:	ea41 0108 	orr.w	r1, r1, r8
    d7bc:	6039      	str	r1, [r7, #0]
    d7be:	f892 1020 	ldrb.w	r1, [r2, #32]
    d7c2:	0089      	lsls	r1, r1, #2
    d7c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    d7c8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    d7cc:	f8c1 c510 	str.w	ip, [r1, #1296]	; 0x510
    d7d0:	491b      	ldr	r1, [pc, #108]	; (d840 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xe0>)
    d7d2:	6809      	ldr	r1, [r1, #0]
    d7d4:	b1a9      	cbz	r1, d802 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xa2>
    d7d6:	21ff      	movs	r1, #255	; 0xff
    d7d8:	f88d 1000 	strb.w	r1, [sp]
    d7dc:	f8c3 c110 	str.w	ip, [r3, #272]	; 0x110
    d7e0:	611c      	str	r4, [r3, #16]
    d7e2:	e004      	b.n	d7ee <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8e>
    d7e4:	f89d 1000 	ldrb.w	r1, [sp]
    d7e8:	1e49      	subs	r1, r1, #1
    d7ea:	f88d 1000 	strb.w	r1, [sp]
    d7ee:	f89d 1000 	ldrb.w	r1, [sp]
    d7f2:	b119      	cbz	r1, d7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>
    d7f4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    d7f8:	2900      	cmp	r1, #0
    d7fa:	d0f3      	beq.n	d7e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    d7fc:	f89d 1000 	ldrb.w	r1, [sp]
    d800:	b189      	cbz	r1, d826 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xc6>
    d802:	f8c3 c110 	str.w	ip, [r3, #272]	; 0x110
    d806:	f882 c009 	strb.w	ip, [r2, #9]
    d80a:	f882 c00a 	strb.w	ip, [r2, #10]
    d80e:	f882 c00b 	strb.w	ip, [r2, #11]
    d812:	7314      	strb	r4, [r2, #12]
    d814:	2d00      	cmp	r5, #0
    d816:	bf18      	it	ne
    d818:	f8c3 6304 	strne.w	r6, [r3, #772]	; 0x304
    d81c:	2800      	cmp	r0, #0
    d81e:	bf18      	it	ne
    d820:	611c      	strne	r4, [r3, #16]
    d822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d826:	f240 6183 	movw	r1, #1667	; 0x683
    d82a:	203e      	movs	r0, #62	; 0x3e
    d82c:	f7f6 f9aa 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d830:	40001000 	.word	0x40001000
    d834:	20001950 	.word	0x20001950
    d838:	040e0000 	.word	0x040e0000
    d83c:	4001f508 	.word	0x4001f508
    d840:	40001550 	.word	0x40001550

0000d844 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d848:	f8df a290 	ldr.w	sl, [pc, #656]	; dadc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x298>
    d84c:	4607      	mov	r7, r0
    d84e:	b087      	sub	sp, #28
    d850:	48a1      	ldr	r0, [pc, #644]	; (dad8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x294>)
    d852:	460d      	mov	r5, r1
    d854:	f8ca 0000 	str.w	r0, [sl]
    d858:	4ca1      	ldr	r4, [pc, #644]	; (dae0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x29c>)
    d85a:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    d85e:	f040 0002 	orr.w	r0, r0, #2
    d862:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    d866:	4608      	mov	r0, r1
    d868:	f001 f9a4 	bl	ebb4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    d86c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    d870:	2925      	cmp	r1, #37	; 0x25
    d872:	bf08      	it	eq
    d874:	2002      	moveq	r0, #2
    d876:	d00f      	beq.n	d898 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d878:	2926      	cmp	r1, #38	; 0x26
    d87a:	bf08      	it	eq
    d87c:	201a      	moveq	r0, #26
    d87e:	d00b      	beq.n	d898 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d880:	2927      	cmp	r1, #39	; 0x27
    d882:	bf08      	it	eq
    d884:	2050      	moveq	r0, #80	; 0x50
    d886:	d007      	beq.n	d898 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x54>
    d888:	290a      	cmp	r1, #10
    d88a:	4608      	mov	r0, r1
    d88c:	bf94      	ite	ls
    d88e:	2204      	movls	r2, #4
    d890:	2206      	movhi	r2, #6
    d892:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d896:	b2c0      	uxtb	r0, r0
    d898:	4a92      	ldr	r2, [pc, #584]	; (dae4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a0>)
    d89a:	6010      	str	r0, [r2, #0]
    d89c:	4892      	ldr	r0, [pc, #584]	; (dae8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a4>)
    d89e:	6001      	str	r1, [r0, #0]
    d8a0:	4e92      	ldr	r6, [pc, #584]	; (daec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2a8>)
    d8a2:	f04f 0800 	mov.w	r8, #0
    d8a6:	f04f 0b01 	mov.w	fp, #1
    d8aa:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    d8ae:	b117      	cbz	r7, d8b6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x72>
    d8b0:	2f01      	cmp	r7, #1
    d8b2:	d04d      	beq.n	d950 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x10c>
    d8b4:	e094      	b.n	d9e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d8b6:	2d01      	cmp	r5, #1
    d8b8:	bf08      	it	eq
    d8ba:	2000      	moveq	r0, #0
    d8bc:	d00b      	beq.n	d8d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d8be:	2d02      	cmp	r5, #2
    d8c0:	bf08      	it	eq
    d8c2:	2001      	moveq	r0, #1
    d8c4:	d007      	beq.n	d8d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d8c6:	2d04      	cmp	r5, #4
    d8c8:	bf08      	it	eq
    d8ca:	2003      	moveq	r0, #3
    d8cc:	d003      	beq.n	d8d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x92>
    d8ce:	2d08      	cmp	r5, #8
    d8d0:	bf08      	it	eq
    d8d2:	2002      	moveq	r0, #2
    d8d4:	d150      	bne.n	d978 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x134>
    d8d6:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d8da:	ab05      	add	r3, sp, #20
    d8dc:	f7f2 fd7a 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d8e0:	2800      	cmp	r0, #0
    d8e2:	d154      	bne.n	d98e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
    d8e4:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d8e8:	f001 f95e 	bl	eba8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d8ec:	7a60      	ldrb	r0, [r4, #9]
    d8ee:	2801      	cmp	r0, #1
    d8f0:	d105      	bne.n	d8fe <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xba>
    d8f2:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d8f6:	f040 0008 	orr.w	r0, r0, #8
    d8fa:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d8fe:	f001 fab5 	bl	ee6c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d902:	b178      	cbz	r0, d924 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>
    d904:	497a      	ldr	r1, [pc, #488]	; (daf0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2ac>)
    d906:	680a      	ldr	r2, [r1, #0]
    d908:	0648      	lsls	r0, r1, #25
    d90a:	2d02      	cmp	r5, #2
    d90c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    d910:	bf0c      	ite	eq
    d912:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    d916:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    d91a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    d91e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    d922:	6008      	str	r0, [r1, #0]
    d924:	f884 b00b 	strb.w	fp, [r4, #11]
    d928:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d92a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    d92e:	63a0      	str	r0, [r4, #56]	; 0x38
    d930:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d934:	f8ca 0000 	str.w	r0, [sl]
    d938:	2d02      	cmp	r5, #2
    d93a:	bf0c      	ite	eq
    d93c:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    d940:	f640 0034 	movwne	r0, #2100	; 0x834
    d944:	f649 71ec 	movw	r1, #40940	; 0x9fec
    d948:	4408      	add	r0, r1
    d94a:	fbb0 f8f9 	udiv	r8, r0, r9
    d94e:	e047      	b.n	d9e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d950:	7aa0      	ldrb	r0, [r4, #10]
    d952:	2801      	cmp	r0, #1
    d954:	d124      	bne.n	d9a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
    d956:	7b60      	ldrb	r0, [r4, #13]
    d958:	2801      	cmp	r0, #1
    d95a:	bf08      	it	eq
    d95c:	2000      	moveq	r0, #0
    d95e:	d010      	beq.n	d982 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d960:	2802      	cmp	r0, #2
    d962:	bf08      	it	eq
    d964:	2001      	moveq	r0, #1
    d966:	d00c      	beq.n	d982 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d968:	2804      	cmp	r0, #4
    d96a:	bf08      	it	eq
    d96c:	2003      	moveq	r0, #3
    d96e:	d008      	beq.n	d982 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d970:	2808      	cmp	r0, #8
    d972:	bf08      	it	eq
    d974:	2002      	moveq	r0, #2
    d976:	d004      	beq.n	d982 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x13e>
    d978:	f240 31f3 	movw	r1, #1011	; 0x3f3
    d97c:	2006      	movs	r0, #6
    d97e:	f7f6 f901 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d982:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    d986:	ab05      	add	r3, sp, #20
    d988:	f7f2 fd24 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    d98c:	b120      	cbz	r0, d998 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x154>
    d98e:	f240 31d5 	movw	r1, #981	; 0x3d5
    d992:	203e      	movs	r0, #62	; 0x3e
    d994:	f7f6 f8f6 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d998:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    d99c:	f001 f904 	bl	eba8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    d9a0:	7a60      	ldrb	r0, [r4, #9]
    d9a2:	2801      	cmp	r0, #1
    d9a4:	d105      	bne.n	d9b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x16e>
    d9a6:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    d9aa:	f040 0004 	orr.w	r0, r0, #4
    d9ae:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    d9b2:	2002      	movs	r0, #2
    d9b4:	72e0      	strb	r0, [r4, #11]
    d9b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    d9b8:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    d9bc:	63a0      	str	r0, [r4, #56]	; 0x38
    d9be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    d9c2:	f8ca 0000 	str.w	r0, [sl]
    d9c6:	f04f 0829 	mov.w	r8, #41	; 0x29
    d9ca:	f001 fa4f 	bl	ee6c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d9ce:	b938      	cbnz	r0, d9e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d9d0:	f001 fa3c 	bl	ee4c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    d9d4:	b920      	cbnz	r0, d9e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x19c>
    d9d6:	4847      	ldr	r0, [pc, #284]	; (daf4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b0>)
    d9d8:	6801      	ldr	r1, [r0, #0]
    d9da:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    d9de:	6001      	str	r1, [r0, #0]
    d9e0:	7a60      	ldrb	r0, [r4, #9]
    d9e2:	2800      	cmp	r0, #0
    d9e4:	bf04      	itt	eq
    d9e6:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    d9ea:	f040 0002 	orreq.w	r0, r0, #2
    d9ee:	d006      	beq.n	d9fe <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ba>
    d9f0:	2801      	cmp	r0, #1
    d9f2:	bf04      	itt	eq
    d9f4:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    d9f8:	f040 0004 	orreq.w	r0, r0, #4
    d9fc:	d101      	bne.n	da02 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1be>
    d9fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    da02:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    da06:	f010 0f01 	tst.w	r0, #1
    da0a:	d027      	beq.n	da5c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    da0c:	f010 0f02 	tst.w	r0, #2
    da10:	d018      	beq.n	da44 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x200>
    da12:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
    da16:	f040 0001 	orr.w	r0, r0, #1
    da1a:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    da1e:	4836      	ldr	r0, [pc, #216]	; (daf8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b4>)
    da20:	6801      	ldr	r1, [r0, #0]
    da22:	290b      	cmp	r1, #11
    da24:	bf1c      	itt	ne
    da26:	6801      	ldrne	r1, [r0, #0]
    da28:	290a      	cmpne	r1, #10
    da2a:	d005      	beq.n	da38 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1f4>
    da2c:	6801      	ldr	r1, [r0, #0]
    da2e:	2903      	cmp	r1, #3
    da30:	bf1c      	itt	ne
    da32:	6800      	ldrne	r0, [r0, #0]
    da34:	2802      	cmpne	r0, #2
    da36:	d111      	bne.n	da5c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    da38:	f240 414c 	movw	r1, #1100	; 0x44c
    da3c:	f04f 003e 	mov.w	r0, #62	; 0x3e
    da40:	f7f6 f8a0 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da44:	f010 0f04 	tst.w	r0, #4
    da48:	d008      	beq.n	da5c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x218>
    da4a:	492d      	ldr	r1, [pc, #180]	; (db00 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2bc>)
    da4c:	482b      	ldr	r0, [pc, #172]	; (dafc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2b8>)
    da4e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    da52:	482c      	ldr	r0, [pc, #176]	; (db04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c0>)
    da54:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    da58:	2801      	cmp	r0, #1
    da5a:	d031      	beq.n	dac0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x27c>
    da5c:	f001 f8d2 	bl	ec04 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    da60:	6800      	ldr	r0, [r0, #0]
    da62:	2801      	cmp	r0, #1
    da64:	d031      	beq.n	daca <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x286>
    da66:	2f01      	cmp	r7, #1
    da68:	bf08      	it	eq
    da6a:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    da6e:	d008      	beq.n	da82 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x23e>
    da70:	2d02      	cmp	r5, #2
    da72:	bf0c      	ite	eq
    da74:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    da78:	f640 0034 	movwne	r0, #2100	; 0x834
    da7c:	f24a 0150 	movw	r1, #41040	; 0xa050
    da80:	4408      	add	r0, r1
    da82:	fbb0 f0f9 	udiv	r0, r0, r9
    da86:	4920      	ldr	r1, [pc, #128]	; (db08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c4>)
    da88:	6809      	ldr	r1, [r1, #0]
    da8a:	4a20      	ldr	r2, [pc, #128]	; (db0c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x2c8>)
    da8c:	2f01      	cmp	r7, #1
    da8e:	f102 0314 	add.w	r3, r2, #20
    da92:	e893 1038 	ldmia.w	r3, {r3, r4, r5, ip}
    da96:	e88d 1038 	stmia.w	sp, {r3, r4, r5, ip}
    da9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    da9c:	9204      	str	r2, [sp, #16]
    da9e:	bf14      	ite	ne
    daa0:	2201      	movne	r2, #1
    daa2:	2200      	moveq	r2, #0
    daa4:	f88d 2001 	strb.w	r2, [sp, #1]
    daa8:	e9cd 1003 	strd	r1, r0, [sp, #12]
    daac:	4668      	mov	r0, sp
    daae:	f7f5 ff6d 	bl	398c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    dab2:	2000      	movs	r0, #0
    dab4:	f000 ffe4 	bl	ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
    dab8:	b007      	add	sp, #28
    daba:	4640      	mov	r0, r8
    dabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dac0:	f240 4153 	movw	r1, #1107	; 0x453
    dac4:	203e      	movs	r0, #62	; 0x3e
    dac6:	f7f6 f85d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daca:	f7ff fe49 	bl	d760 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    dace:	b007      	add	sp, #28
    dad0:	2000      	movs	r0, #0
    dad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dad6:	0000      	.short	0x0000
    dad8:	04040000 	.word	0x04040000
    dadc:	4001f504 	.word	0x4001f504
    dae0:	20001950 	.word	0x20001950
    dae4:	40001508 	.word	0x40001508
    dae8:	40001554 	.word	0x40001554
    daec:	40001000 	.word	0x40001000
    daf0:	40001588 	.word	0x40001588
    daf4:	40001568 	.word	0x40001568
    daf8:	40001550 	.word	0x40001550
    dafc:	40001008 	.word	0x40001008
    db00:	4001f098 	.word	0x4001f098
    db04:	40008000 	.word	0x40008000
    db08:	40008540 	.word	0x40008540
    db0c:	0000eb58 	.word	0x0000eb58

0000db10 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    db10:	b410      	push	{r4}
    db12:	e890 101c 	ldmia.w	r0, {r2, r3, r4, ip}
    db16:	4903      	ldr	r1, [pc, #12]	; (db24 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x14>)
    db18:	e881 101c 	stmia.w	r1, {r2, r3, r4, ip}
    db1c:	6900      	ldr	r0, [r0, #16]
    db1e:	6108      	str	r0, [r1, #16]
    db20:	bc10      	pop	{r4}
    db22:	4770      	bx	lr
    db24:	2000193c 	.word	0x2000193c

0000db28 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    db28:	4914      	ldr	r1, [pc, #80]	; (db7c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x54>)
    db2a:	b510      	push	{r4, lr}
    db2c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    db2e:	4282      	cmp	r2, r0
    db30:	d304      	bcc.n	db3c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
    db32:	f240 61ec 	movw	r1, #1772	; 0x6ec
    db36:	203e      	movs	r0, #62	; 0x3e
    db38:	f7f6 f824 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db3c:	2201      	movs	r2, #1
    db3e:	f8df c040 	ldr.w	ip, [pc, #64]	; db80 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x58>
    db42:	740a      	strb	r2, [r1, #16]
    db44:	6148      	str	r0, [r1, #20]
    db46:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
    db4a:	4b0e      	ldr	r3, [pc, #56]	; (db84 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
    db4c:	681c      	ldr	r4, [r3, #0]
    db4e:	1d64      	adds	r4, r4, #5
    db50:	4284      	cmp	r4, r0
    db52:	d306      	bcc.n	db62 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3a>
    db54:	480c      	ldr	r0, [pc, #48]	; (db88 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>)
    db56:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    db5a:	2900      	cmp	r1, #0
    db5c:	bf08      	it	eq
    db5e:	6102      	streq	r2, [r0, #16]
    db60:	bd10      	pop	{r4, pc}
    db62:	2200      	movs	r2, #0
    db64:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
    db68:	6018      	str	r0, [r3, #0]
    db6a:	6b88      	ldr	r0, [r1, #56]	; 0x38
    db6c:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    db70:	6388      	str	r0, [r1, #56]	; 0x38
    db72:	4906      	ldr	r1, [pc, #24]	; (db8c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
    db74:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    db78:	6008      	str	r0, [r1, #0]
    db7a:	bd10      	pop	{r4, pc}
    db7c:	20001950 	.word	0x20001950
    db80:	40008000 	.word	0x40008000
    db84:	40008544 	.word	0x40008544
    db88:	40001000 	.word	0x40001000
    db8c:	4001f504 	.word	0x4001f504

0000db90 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    db90:	b510      	push	{r4, lr}
    db92:	4c19      	ldr	r4, [pc, #100]	; (dbf8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x68>)
    db94:	4603      	mov	r3, r0
    db96:	2002      	movs	r0, #2
    db98:	4918      	ldr	r1, [pc, #96]	; (dbfc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x6c>)
    db9a:	7420      	strb	r0, [r4, #16]
    db9c:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    dba0:	680a      	ldr	r2, [r1, #0]
    dba2:	f002 020f 	and.w	r2, r2, #15
    dba6:	2a03      	cmp	r2, #3
    dba8:	bf08      	it	eq
    dbaa:	2201      	moveq	r2, #1
    dbac:	d00b      	beq.n	dbc6 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x36>
    dbae:	6809      	ldr	r1, [r1, #0]
    dbb0:	f001 010f 	and.w	r1, r1, #15
    dbb4:	2904      	cmp	r1, #4
    dbb6:	bf08      	it	eq
    dbb8:	2202      	moveq	r2, #2
    dbba:	d004      	beq.n	dbc6 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x36>
    dbbc:	f240 11d7 	movw	r1, #471	; 0x1d7
    dbc0:	203e      	movs	r0, #62	; 0x3e
    dbc2:	f7f5 ffdf 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbc6:	490c      	ldr	r1, [pc, #48]	; (dbf8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x68>)
    dbc8:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
    dbcc:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
    dbd0:	f1bc 0f01 	cmp.w	ip, #1
    dbd4:	d00c      	beq.n	dbf0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x60>
    dbd6:	f004 fba3 	bl	12320 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    dbda:	4909      	ldr	r1, [pc, #36]	; (dc00 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x70>)
    dbdc:	6160      	str	r0, [r4, #20]
    dbde:	2000      	movs	r0, #0
    dbe0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    dbe4:	6961      	ldr	r1, [r4, #20]
    dbe6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dbe8:	4408      	add	r0, r1
    dbea:	4906      	ldr	r1, [pc, #24]	; (dc04 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x74>)
    dbec:	6008      	str	r0, [r1, #0]
    dbee:	bd10      	pop	{r4, pc}
    dbf0:	f004 fbb2 	bl	12358 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    dbf4:	e7f1      	b.n	dbda <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4a>
    dbf6:	0000      	.short	0x0000
    dbf8:	20001950 	.word	0x20001950
    dbfc:	40001510 	.word	0x40001510
    dc00:	40008000 	.word	0x40008000
    dc04:	40008544 	.word	0x40008544

0000dc08 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    dc08:	4803      	ldr	r0, [pc, #12]	; (dc18 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x10>)
    dc0a:	6801      	ldr	r1, [r0, #0]
    dc0c:	f021 0101 	bic.w	r1, r1, #1
    dc10:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    dc14:	6001      	str	r1, [r0, #0]
    dc16:	4770      	bx	lr
    dc18:	40001774 	.word	0x40001774

0000dc1c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
    dc1c:	b510      	push	{r4, lr}
    dc1e:	2896      	cmp	r0, #150	; 0x96
    dc20:	bf9e      	ittt	ls
    dc22:	4904      	ldrls	r1, [pc, #16]	; (dc34 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
    dc24:	f881 0023 	strbls.w	r0, [r1, #35]	; 0x23
    dc28:	bd10      	popls	{r4, pc}
    dc2a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
    dc2e:	203e      	movs	r0, #62	; 0x3e
    dc30:	f7f5 ffa8 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc34:	20001950 	.word	0x20001950

0000dc38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    dc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc3c:	4822      	ldr	r0, [pc, #136]	; (dcc8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x90>)
    dc3e:	2400      	movs	r4, #0
    dc40:	2101      	movs	r1, #1
    dc42:	6144      	str	r4, [r0, #20]
    dc44:	6184      	str	r4, [r0, #24]
    dc46:	61c4      	str	r4, [r0, #28]
    dc48:	6204      	str	r4, [r0, #32]
    dc4a:	6244      	str	r4, [r0, #36]	; 0x24
    dc4c:	6284      	str	r4, [r0, #40]	; 0x28
    dc4e:	62c4      	str	r4, [r0, #44]	; 0x2c
    dc50:	6304      	str	r4, [r0, #48]	; 0x30
    dc52:	6344      	str	r4, [r0, #52]	; 0x34
    dc54:	6384      	str	r4, [r0, #56]	; 0x38
    dc56:	63c4      	str	r4, [r0, #60]	; 0x3c
    dc58:	6404      	str	r4, [r0, #64]	; 0x40
    dc5a:	6444      	str	r4, [r0, #68]	; 0x44
    dc5c:	6484      	str	r4, [r0, #72]	; 0x48
    dc5e:	64c4      	str	r4, [r0, #76]	; 0x4c
    dc60:	6504      	str	r4, [r0, #80]	; 0x50
    dc62:	3014      	adds	r0, #20
    dc64:	7244      	strb	r4, [r0, #9]
    dc66:	7284      	strb	r4, [r0, #10]
    dc68:	72c4      	strb	r4, [r0, #11]
    dc6a:	7301      	strb	r1, [r0, #12]
    dc6c:	f001 f8c4 	bl	edf8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    dc70:	4f16      	ldr	r7, [pc, #88]	; (dccc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x94>)
    dc72:	4d17      	ldr	r5, [pc, #92]	; (dcd0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x98>)
    dc74:	4e17      	ldr	r6, [pc, #92]	; (dcd4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x9c>)
    dc76:	b928      	cbnz	r0, dc84 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4c>
    dc78:	f001 f8c8 	bl	ee0c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    dc7c:	b910      	cbnz	r0, dc84 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4c>
    dc7e:	f001 f8cf 	bl	ee20 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    dc82:	b140      	cbz	r0, dc96 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5e>
    dc84:	2224      	movs	r2, #36	; 0x24
    dc86:	21ff      	movs	r1, #255	; 0xff
    dc88:	4638      	mov	r0, r7
    dc8a:	f001 f923 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dc8e:	602c      	str	r4, [r5, #0]
    dc90:	6034      	str	r4, [r6, #0]
    dc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc96:	f001 f903 	bl	eea0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    dc9a:	b910      	cbnz	r0, dca2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6a>
    dc9c:	f001 f8f6 	bl	ee8c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    dca0:	b140      	cbz	r0, dcb4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x7c>
    dca2:	2240      	movs	r2, #64	; 0x40
    dca4:	21ff      	movs	r1, #255	; 0xff
    dca6:	4638      	mov	r0, r7
    dca8:	f001 f914 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dcac:	602c      	str	r4, [r5, #0]
    dcae:	6034      	str	r4, [r6, #0]
    dcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcb4:	2238      	movs	r2, #56	; 0x38
    dcb6:	21ff      	movs	r1, #255	; 0xff
    dcb8:	4638      	mov	r0, r7
    dcba:	f001 f90b 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dcbe:	602c      	str	r4, [r5, #0]
    dcc0:	6034      	str	r4, [r6, #0]
    dcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcc6:	0000      	.short	0x0000
    dcc8:	2000193c 	.word	0x2000193c
    dccc:	40000e00 	.word	0x40000e00
    dcd0:	40000e08 	.word	0x40000e08
    dcd4:	40000e10 	.word	0x40000e10

0000dcd8 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    dcd8:	4901      	ldr	r1, [pc, #4]	; (dce0 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    dcda:	7008      	strb	r0, [r1, #0]
    dcdc:	4770      	bx	lr
    dcde:	0000      	.short	0x0000
    dce0:	20000390 	.word	0x20000390

0000dce4 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI>:
    dce4:	4803      	ldr	r0, [pc, #12]	; (dcf4 <sym_K3ZX75WK5AYBG56BAAWW5EYIERFL3FF7FE2U5HI+0x10>)
    dce6:	7e01      	ldrb	r1, [r0, #24]
    dce8:	2900      	cmp	r1, #0
    dcea:	bf06      	itte	eq
    dcec:	7e40      	ldrbeq	r0, [r0, #25]
    dcee:	2800      	cmpeq	r0, #0
    dcf0:	2001      	movne	r0, #1
    dcf2:	4770      	bx	lr
    dcf4:	20001950 	.word	0x20001950

0000dcf8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    dcf8:	4801      	ldr	r0, [pc, #4]	; (dd00 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    dcfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
    dcfc:	4770      	bx	lr
    dcfe:	0000      	.short	0x0000
    dd00:	20001950 	.word	0x20001950

0000dd04 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    dd04:	4801      	ldr	r0, [pc, #4]	; (dd0c <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    dd06:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    dd0a:	4770      	bx	lr
    dd0c:	20001950 	.word	0x20001950

0000dd10 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    dd10:	4915      	ldr	r1, [pc, #84]	; (dd68 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x58>)
    dd12:	b510      	push	{r4, lr}
    dd14:	6b88      	ldr	r0, [r1, #56]	; 0x38
    dd16:	4a15      	ldr	r2, [pc, #84]	; (dd6c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    dd18:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    dd1c:	6010      	str	r0, [r2, #0]
    dd1e:	2000      	movs	r0, #0
    dd20:	6388      	str	r0, [r1, #56]	; 0x38
    dd22:	7408      	strb	r0, [r1, #16]
    dd24:	62c8      	str	r0, [r1, #44]	; 0x2c
    dd26:	6288      	str	r0, [r1, #40]	; 0x28
    dd28:	4911      	ldr	r1, [pc, #68]	; (dd70 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    dd2a:	6008      	str	r0, [r1, #0]
    dd2c:	1d09      	adds	r1, r1, #4
    dd2e:	6008      	str	r0, [r1, #0]
    dd30:	1d09      	adds	r1, r1, #4
    dd32:	6008      	str	r0, [r1, #0]
    dd34:	1d09      	adds	r1, r1, #4
    dd36:	6008      	str	r0, [r1, #0]
    dd38:	490e      	ldr	r1, [pc, #56]	; (dd74 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    dd3a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    dd3e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    dd42:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    dd46:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    dd4a:	f7ff fd09 	bl	d760 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    dd4e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    dd52:	2002      	movs	r0, #2
    dd54:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    dd58:	f3bf 8f4f 	dsb	sy
    dd5c:	f3bf 8f6f 	isb	sy
    dd60:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    dd64:	bd10      	pop	{r4, pc}
    dd66:	0000      	.short	0x0000
    dd68:	20001950 	.word	0x20001950
    dd6c:	4001f508 	.word	0x4001f508
    dd70:	40008540 	.word	0x40008540
    dd74:	40008000 	.word	0x40008000

0000dd78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    dd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd7c:	2601      	movs	r6, #1
    dd7e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
    dd82:	2402      	movs	r4, #2
    dd84:	f04f 0800 	mov.w	r8, #0
    dd88:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
    dd8c:	f3bf 8f4f 	dsb	sy
    dd90:	f3bf 8f6f 	isb	sy
    dd94:	4833      	ldr	r0, [pc, #204]	; (de64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    dd96:	f8c0 8000 	str.w	r8, [r0]
    dd9a:	6006      	str	r6, [r0, #0]
    dd9c:	f001 f856 	bl	ee4c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    dda0:	4f31      	ldr	r7, [pc, #196]	; (de68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    dda2:	b118      	cbz	r0, ddac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    dda4:	6838      	ldr	r0, [r7, #0]
    dda6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ddaa:	6038      	str	r0, [r7, #0]
    ddac:	f001 f842 	bl	ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ddb0:	b138      	cbz	r0, ddc2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    ddb2:	6838      	ldr	r0, [r7, #0]
    ddb4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ddb8:	f040 0096 	orr.w	r0, r0, #150	; 0x96
    ddbc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    ddc0:	6038      	str	r0, [r7, #0]
    ddc2:	f001 f853 	bl	ee6c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ddc6:	b130      	cbz	r0, ddd6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x5e>
    ddc8:	4828      	ldr	r0, [pc, #160]	; (de6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ddca:	6801      	ldr	r1, [r0, #0]
    ddcc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ddd0:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ddd4:	6001      	str	r1, [r0, #0]
    ddd6:	4927      	ldr	r1, [pc, #156]	; (de74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ddd8:	4825      	ldr	r0, [pc, #148]	; (de70 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ddda:	6008      	str	r0, [r1, #0]
    dddc:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    dde0:	6e00      	ldr	r0, [r0, #96]	; 0x60
    dde2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    dde6:	d004      	beq.n	ddf2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7a>
    dde8:	4923      	ldr	r1, [pc, #140]	; (de78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ddea:	680a      	ldr	r2, [r1, #0]
    ddec:	f360 4217 	bfi	r2, r0, #16, #8
    ddf0:	600a      	str	r2, [r1, #0]
    ddf2:	4922      	ldr	r1, [pc, #136]	; (de7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ddf4:	f240 605b 	movw	r0, #1627	; 0x65b
    ddf8:	6008      	str	r0, [r1, #0]
    ddfa:	1f09      	subs	r1, r1, #4
    ddfc:	f240 1003 	movw	r0, #259	; 0x103
    de00:	6008      	str	r0, [r1, #0]
    de02:	1f08      	subs	r0, r1, #4
    de04:	6006      	str	r6, [r0, #0]
    de06:	491e      	ldr	r1, [pc, #120]	; (de80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    de08:	2003      	movs	r0, #3
    de0a:	6008      	str	r0, [r1, #0]
    de0c:	491d      	ldr	r1, [pc, #116]	; (de84 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    de0e:	f240 1001 	movw	r0, #257	; 0x101
    de12:	6008      	str	r0, [r1, #0]
    de14:	491c      	ldr	r1, [pc, #112]	; (de88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    de16:	f8c1 4200 	str.w	r4, [r1, #512]	; 0x200
    de1a:	4a1d      	ldr	r2, [pc, #116]	; (de90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
    de1c:	481b      	ldr	r0, [pc, #108]	; (de8c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
    de1e:	6010      	str	r0, [r2, #0]
    de20:	481d      	ldr	r0, [pc, #116]	; (de98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
    de22:	4a1c      	ldr	r2, [pc, #112]	; (de94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
    de24:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    de28:	4a1c      	ldr	r2, [pc, #112]	; (de9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
    de2a:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    de2e:	481c      	ldr	r0, [pc, #112]	; (dea0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
    de30:	f8a0 8044 	strh.w	r8, [r0, #68]	; 0x44
    de34:	3014      	adds	r0, #20
    de36:	2296      	movs	r2, #150	; 0x96
    de38:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
    de3c:	f880 803c 	strb.w	r8, [r0, #60]	; 0x3c
    de40:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
    de44:	f8c5 4280 	str.w	r4, [r5, #640]	; 0x280
    de48:	2010      	movs	r0, #16
    de4a:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
    de4e:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    de52:	4814      	ldr	r0, [pc, #80]	; (dea4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
    de54:	6840      	ldr	r0, [r0, #4]
    de56:	2800      	cmp	r0, #0
    de58:	bf08      	it	eq
    de5a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    de5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de62:	4700      	bx	r0
    de64:	40001ffc 	.word	0x40001ffc
    de68:	4000173c 	.word	0x4000173c
    de6c:	40001740 	.word	0x40001740
    de70:	8900002c 	.word	0x8900002c
    de74:	40001778 	.word	0x40001778
    de78:	4000158c 	.word	0x4000158c
    de7c:	40001538 	.word	0x40001538
    de80:	40001510 	.word	0x40001510
    de84:	40001650 	.word	0x40001650
    de88:	40001000 	.word	0x40001000
    de8c:	040e0000 	.word	0x040e0000
    de90:	4001f508 	.word	0x4001f508
    de94:	4000110c 	.word	0x4000110c
    de98:	4001f090 	.word	0x4001f090
    de9c:	40008040 	.word	0x40008040
    dea0:	2000193c 	.word	0x2000193c
    dea4:	20000390 	.word	0x20000390

0000dea8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    dea8:	4901      	ldr	r1, [pc, #4]	; (deb0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    deaa:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
    deae:	4770      	bx	lr
    deb0:	20001950 	.word	0x20001950

0000deb4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    deb4:	491e      	ldr	r1, [pc, #120]	; (df30 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
    deb6:	b510      	push	{r4, lr}
    deb8:	6008      	str	r0, [r1, #0]
    deba:	491e      	ldr	r1, [pc, #120]	; (df34 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
    debc:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
    dec0:	f040 0001 	orr.w	r0, r0, #1
    dec4:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
    dec8:	f010 0f01 	tst.w	r0, #1
    decc:	bf08      	it	eq
    dece:	bd10      	popeq	{r4, pc}
    ded0:	f010 0f02 	tst.w	r0, #2
    ded4:	d019      	beq.n	df0a <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x56>
    ded6:	4818      	ldr	r0, [pc, #96]	; (df38 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
    ded8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    dedc:	f041 0101 	orr.w	r1, r1, #1
    dee0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    dee4:	4815      	ldr	r0, [pc, #84]	; (df3c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
    dee6:	6801      	ldr	r1, [r0, #0]
    dee8:	290b      	cmp	r1, #11
    deea:	bf1c      	itt	ne
    deec:	6801      	ldrne	r1, [r0, #0]
    deee:	290a      	cmpne	r1, #10
    def0:	d005      	beq.n	defe <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x4a>
    def2:	6801      	ldr	r1, [r0, #0]
    def4:	2903      	cmp	r1, #3
    def6:	bf1e      	ittt	ne
    def8:	6800      	ldrne	r0, [r0, #0]
    defa:	2802      	cmpne	r0, #2
    defc:	bd10      	popne	{r4, pc}
    defe:	f240 414c 	movw	r1, #1100	; 0x44c
    df02:	f04f 003e 	mov.w	r0, #62	; 0x3e
    df06:	f7f5 fe3d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df0a:	f010 0f04 	tst.w	r0, #4
    df0e:	bf08      	it	eq
    df10:	bd10      	popeq	{r4, pc}
    df12:	480b      	ldr	r0, [pc, #44]	; (df40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
    df14:	490b      	ldr	r1, [pc, #44]	; (df44 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x90>)
    df16:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    df1a:	480b      	ldr	r0, [pc, #44]	; (df48 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x94>)
    df1c:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    df20:	2801      	cmp	r0, #1
    df22:	bf18      	it	ne
    df24:	bd10      	popne	{r4, pc}
    df26:	f240 4153 	movw	r1, #1107	; 0x453
    df2a:	203e      	movs	r0, #62	; 0x3e
    df2c:	f7f5 fe2a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df30:	40001504 	.word	0x40001504
    df34:	20001950 	.word	0x20001950
    df38:	40001000 	.word	0x40001000
    df3c:	40001550 	.word	0x40001550
    df40:	40001008 	.word	0x40001008
    df44:	4001f098 	.word	0x4001f098
    df48:	40008000 	.word	0x40008000

0000df4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    df4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df50:	f8df 9298 	ldr.w	r9, [pc, #664]	; e1ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a0>
    df54:	4607      	mov	r7, r0
    df56:	b087      	sub	sp, #28
    df58:	48a3      	ldr	r0, [pc, #652]	; (e1e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x29c>)
    df5a:	460d      	mov	r5, r1
    df5c:	4616      	mov	r6, r2
    df5e:	f8c9 0000 	str.w	r0, [r9]
    df62:	4ca3      	ldr	r4, [pc, #652]	; (e1f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a4>)
    df64:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    df68:	42b0      	cmp	r0, r6
    df6a:	bf1c      	itt	ne
    df6c:	4610      	movne	r0, r2
    df6e:	f000 fe21 	blne	ebb4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    df72:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    df76:	2925      	cmp	r1, #37	; 0x25
    df78:	bf08      	it	eq
    df7a:	2002      	moveq	r0, #2
    df7c:	d00f      	beq.n	df9e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    df7e:	2926      	cmp	r1, #38	; 0x26
    df80:	bf08      	it	eq
    df82:	201a      	moveq	r0, #26
    df84:	d00b      	beq.n	df9e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    df86:	2927      	cmp	r1, #39	; 0x27
    df88:	bf08      	it	eq
    df8a:	2050      	moveq	r0, #80	; 0x50
    df8c:	d007      	beq.n	df9e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
    df8e:	290a      	cmp	r1, #10
    df90:	4608      	mov	r0, r1
    df92:	bf94      	ite	ls
    df94:	2204      	movls	r2, #4
    df96:	2206      	movhi	r2, #6
    df98:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    df9c:	b2c0      	uxtb	r0, r0
    df9e:	4a95      	ldr	r2, [pc, #596]	; (e1f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2a8>)
    dfa0:	6010      	str	r0, [r2, #0]
    dfa2:	4895      	ldr	r0, [pc, #596]	; (e1f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2ac>)
    dfa4:	6001      	str	r1, [r0, #0]
    dfa6:	f8df b254 	ldr.w	fp, [pc, #596]	; e1fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b0>
    dfaa:	f8df 8254 	ldr.w	r8, [pc, #596]	; e200 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b4>
    dfae:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    dfb2:	b137      	cbz	r7, dfc2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x76>
    dfb4:	2f01      	cmp	r7, #1
    dfb6:	d06d      	beq.n	e094 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x148>
    dfb8:	f240 6103 	movw	r1, #1539	; 0x603
    dfbc:	203e      	movs	r0, #62	; 0x3e
    dfbe:	f7f5 fde1 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfc2:	2e01      	cmp	r6, #1
    dfc4:	bf08      	it	eq
    dfc6:	2000      	moveq	r0, #0
    dfc8:	d00b      	beq.n	dfe2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    dfca:	2e02      	cmp	r6, #2
    dfcc:	bf08      	it	eq
    dfce:	2001      	moveq	r0, #1
    dfd0:	d007      	beq.n	dfe2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    dfd2:	2e04      	cmp	r6, #4
    dfd4:	bf08      	it	eq
    dfd6:	2003      	moveq	r0, #3
    dfd8:	d003      	beq.n	dfe2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
    dfda:	2e08      	cmp	r6, #8
    dfdc:	bf08      	it	eq
    dfde:	2002      	moveq	r0, #2
    dfe0:	d16c      	bne.n	e0bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x170>
    dfe2:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    dfe6:	ab05      	add	r3, sp, #20
    dfe8:	f7f2 f9f4 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    dfec:	2800      	cmp	r0, #0
    dfee:	d170      	bne.n	e0d2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x186>
    dff0:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    dff4:	f000 fdd8 	bl	eba8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    dff8:	f000 ff38 	bl	ee6c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    dffc:	b178      	cbz	r0, e01e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    dffe:	4a81      	ldr	r2, [pc, #516]	; (e204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2b8>)
    e000:	6811      	ldr	r1, [r2, #0]
    e002:	0650      	lsls	r0, r2, #25
    e004:	2e02      	cmp	r6, #2
    e006:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    e00a:	bf0c      	ite	eq
    e00c:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
    e010:	f3c0 2006 	ubfxne	r0, r0, #8, #7
    e014:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    e018:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e01c:	6010      	str	r0, [r2, #0]
    e01e:	2e02      	cmp	r6, #2
    e020:	bf0c      	ite	eq
    e022:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e026:	f640 0034 	movwne	r0, #2100	; 0x834
    e02a:	f649 51f8 	movw	r1, #40440	; 0x9df8
    e02e:	4401      	add	r1, r0
    e030:	7a60      	ldrb	r0, [r4, #9]
    e032:	2801      	cmp	r0, #1
    e034:	d004      	beq.n	e040 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>
    e036:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    e03a:	fbb1 f1fa 	udiv	r1, r1, sl
    e03e:	1a6d      	subs	r5, r5, r1
    e040:	2800      	cmp	r0, #0
    e042:	bf04      	itt	eq
    e044:	4658      	moveq	r0, fp
    e046:	f8c8 b514 	streq.w	fp, [r8, #1300]	; 0x514
    e04a:	2001      	movs	r0, #1
    e04c:	72e0      	strb	r0, [r4, #11]
    e04e:	486e      	ldr	r0, [pc, #440]	; (e208 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2bc>)
    e050:	6005      	str	r5, [r0, #0]
    e052:	486e      	ldr	r0, [pc, #440]	; (e20c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c0>)
    e054:	f8c8 0510 	str.w	r0, [r8, #1296]	; 0x510
    e058:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e05a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    e05e:	63a0      	str	r0, [r4, #56]	; 0x38
    e060:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    e064:	f8c9 0000 	str.w	r0, [r9]
    e068:	2010      	movs	r0, #16
    e06a:	f8cb 0304 	str.w	r0, [fp, #772]	; 0x304
    e06e:	03c0      	lsls	r0, r0, #15
    e070:	f8c9 0000 	str.w	r0, [r9]
    e074:	7a60      	ldrb	r0, [r4, #9]
    e076:	2800      	cmp	r0, #0
    e078:	bf04      	itt	eq
    e07a:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    e07e:	f040 0002 	orreq.w	r0, r0, #2
    e082:	d049      	beq.n	e118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    e084:	2801      	cmp	r0, #1
    e086:	bf04      	itt	eq
    e088:	f894 003c 	ldrbeq.w	r0, [r4, #60]	; 0x3c
    e08c:	f040 0004 	orreq.w	r0, r0, #4
    e090:	d042      	beq.n	e118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1cc>
    e092:	e043      	b.n	e11c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1d0>
    e094:	7aa0      	ldrb	r0, [r4, #10]
    e096:	2801      	cmp	r0, #1
    e098:	d124      	bne.n	e0e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x198>
    e09a:	7b60      	ldrb	r0, [r4, #13]
    e09c:	2801      	cmp	r0, #1
    e09e:	bf08      	it	eq
    e0a0:	2000      	moveq	r0, #0
    e0a2:	d010      	beq.n	e0c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    e0a4:	2802      	cmp	r0, #2
    e0a6:	bf08      	it	eq
    e0a8:	2001      	moveq	r0, #1
    e0aa:	d00c      	beq.n	e0c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    e0ac:	2804      	cmp	r0, #4
    e0ae:	bf08      	it	eq
    e0b0:	2003      	moveq	r0, #3
    e0b2:	d008      	beq.n	e0c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    e0b4:	2808      	cmp	r0, #8
    e0b6:	bf08      	it	eq
    e0b8:	2002      	moveq	r0, #2
    e0ba:	d004      	beq.n	e0c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17a>
    e0bc:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e0c0:	2006      	movs	r0, #6
    e0c2:	f7f5 fd5f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0c6:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    e0ca:	ab05      	add	r3, sp, #20
    e0cc:	f7f2 f982 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e0d0:	b120      	cbz	r0, e0dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x190>
    e0d2:	f240 31d5 	movw	r1, #981	; 0x3d5
    e0d6:	203e      	movs	r0, #62	; 0x3e
    e0d8:	f7f5 fd54 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0dc:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e0e0:	f000 fd62 	bl	eba8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e0e4:	f000 fec2 	bl	ee6c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e0e8:	b938      	cbnz	r0, e0fa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ae>
    e0ea:	f000 feaf 	bl	ee4c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e0ee:	b920      	cbnz	r0, e0fa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ae>
    e0f0:	4847      	ldr	r0, [pc, #284]	; (e210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c4>)
    e0f2:	6801      	ldr	r1, [r0, #0]
    e0f4:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    e0f8:	6001      	str	r1, [r0, #0]
    e0fa:	7a61      	ldrb	r1, [r4, #9]
    e0fc:	2901      	cmp	r1, #1
    e0fe:	d004      	beq.n	e10a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1be>
    e100:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
    e104:	fbb0 f0fa 	udiv	r0, r0, sl
    e108:	1a2d      	subs	r5, r5, r0
    e10a:	4842      	ldr	r0, [pc, #264]	; (e214 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2c8>)
    e10c:	2900      	cmp	r1, #0
    e10e:	bf08      	it	eq
    e110:	f8c8 0514 	streq.w	r0, [r8, #1300]	; 0x514
    e114:	2002      	movs	r0, #2
    e116:	e799      	b.n	e04c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x100>
    e118:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    e11c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
    e120:	493d      	ldr	r1, [pc, #244]	; (e218 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2cc>)
    e122:	f010 0f01 	tst.w	r0, #1
    e126:	d025      	beq.n	e174 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    e128:	f010 0f02 	tst.w	r0, #2
    e12c:	d018      	beq.n	e160 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x214>
    e12e:	f8db 0200 	ldr.w	r0, [fp, #512]	; 0x200
    e132:	f040 0001 	orr.w	r0, r0, #1
    e136:	f8cb 0200 	str.w	r0, [fp, #512]	; 0x200
    e13a:	4838      	ldr	r0, [pc, #224]	; (e21c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d0>)
    e13c:	6802      	ldr	r2, [r0, #0]
    e13e:	2a0b      	cmp	r2, #11
    e140:	bf1c      	itt	ne
    e142:	6802      	ldrne	r2, [r0, #0]
    e144:	2a0a      	cmpne	r2, #10
    e146:	d005      	beq.n	e154 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x208>
    e148:	6802      	ldr	r2, [r0, #0]
    e14a:	2a03      	cmp	r2, #3
    e14c:	bf1c      	itt	ne
    e14e:	6800      	ldrne	r0, [r0, #0]
    e150:	2802      	cmpne	r0, #2
    e152:	d10f      	bne.n	e174 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    e154:	f240 414c 	movw	r1, #1100	; 0x44c
    e158:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e15c:	f7f5 fd12 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e160:	f010 0f04 	tst.w	r0, #4
    e164:	d006      	beq.n	e174 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x228>
    e166:	482e      	ldr	r0, [pc, #184]	; (e220 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d4>)
    e168:	f8c8 0514 	str.w	r0, [r8, #1300]	; 0x514
    e16c:	f8d1 0148 	ldr.w	r0, [r1, #328]	; 0x148
    e170:	2801      	cmp	r0, #1
    e172:	d00a      	beq.n	e18a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x23e>
    e174:	2001      	movs	r0, #1
    e176:	64c8      	str	r0, [r1, #76]	; 0x4c
    e178:	482a      	ldr	r0, [pc, #168]	; (e224 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2d8>)
    e17a:	6800      	ldr	r0, [r0, #0]
    e17c:	42a8      	cmp	r0, r5
    e17e:	d309      	bcc.n	e194 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x248>
    e180:	f240 6129 	movw	r1, #1577	; 0x629
    e184:	203e      	movs	r0, #62	; 0x3e
    e186:	f7f5 fcfd 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e18a:	f240 4153 	movw	r1, #1107	; 0x453
    e18e:	203e      	movs	r0, #62	; 0x3e
    e190:	f7f5 fcf8 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e194:	2f01      	cmp	r7, #1
    e196:	bf08      	it	eq
    e198:	f649 70ba 	movweq	r0, #40890	; 0x9fba
    e19c:	d008      	beq.n	e1b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>
    e19e:	2e02      	cmp	r6, #2
    e1a0:	bf0c      	ite	eq
    e1a2:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e1a6:	f640 0034 	movwne	r0, #2100	; 0x834
    e1aa:	f24a 0150 	movw	r1, #41040	; 0xa050
    e1ae:	4408      	add	r0, r1
    e1b0:	491d      	ldr	r1, [pc, #116]	; (e228 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x2dc>)
    e1b2:	fbb0 f0fa 	udiv	r0, r0, sl
    e1b6:	f101 0228 	add.w	r2, r1, #40	; 0x28
    e1ba:	2f01      	cmp	r7, #1
    e1bc:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    e1c0:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    e1c4:	6b89      	ldr	r1, [r1, #56]	; 0x38
    e1c6:	9104      	str	r1, [sp, #16]
    e1c8:	bf14      	ite	ne
    e1ca:	2101      	movne	r1, #1
    e1cc:	2100      	moveq	r1, #0
    e1ce:	f88d 1001 	strb.w	r1, [sp, #1]
    e1d2:	e9cd 5003 	strd	r5, r0, [sp, #12]
    e1d6:	4668      	mov	r0, sp
    e1d8:	f7f5 fbd8 	bl	398c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e1dc:	4628      	mov	r0, r5
    e1de:	f000 fc4f 	bl	ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
    e1e2:	b007      	add	sp, #28
    e1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1e8:	04040000 	.word	0x04040000
    e1ec:	4001f504 	.word	0x4001f504
    e1f0:	20001950 	.word	0x20001950
    e1f4:	40001508 	.word	0x40001508
    e1f8:	40001554 	.word	0x40001554
    e1fc:	40001000 	.word	0x40001000
    e200:	4001f098 	.word	0x4001f098
    e204:	40001588 	.word	0x40001588
    e208:	40008548 	.word	0x40008548
    e20c:	40008148 	.word	0x40008148
    e210:	40001568 	.word	0x40001568
    e214:	40001004 	.word	0x40001004
    e218:	40008000 	.word	0x40008000
    e21c:	40001550 	.word	0x40001550
    e220:	40001008 	.word	0x40001008
    e224:	4000854c 	.word	0x4000854c
    e228:	0000eb58 	.word	0x0000eb58

0000e22c <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q>:
    e22c:	b508      	push	{r3, lr}
    e22e:	20ff      	movs	r0, #255	; 0xff
    e230:	f88d 0000 	strb.w	r0, [sp]
    e234:	480e      	ldr	r0, [pc, #56]	; (e270 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x44>)
    e236:	2100      	movs	r1, #0
    e238:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    e23c:	2101      	movs	r1, #1
    e23e:	6101      	str	r1, [r0, #16]
    e240:	e005      	b.n	e24e <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x22>
    e242:	bf00      	nop
    e244:	f89d 1000 	ldrb.w	r1, [sp]
    e248:	1e49      	subs	r1, r1, #1
    e24a:	f88d 1000 	strb.w	r1, [sp]
    e24e:	f89d 1000 	ldrb.w	r1, [sp]
    e252:	b119      	cbz	r1, e25c <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x30>
    e254:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    e258:	2900      	cmp	r1, #0
    e25a:	d0f3      	beq.n	e244 <sym_ERTMJINALXFNEALQRFKAXRTKORMG5WJSM52TR4Q+0x18>
    e25c:	f89d 0000 	ldrb.w	r0, [sp]
    e260:	2800      	cmp	r0, #0
    e262:	bf18      	it	ne
    e264:	bd08      	popne	{r3, pc}
    e266:	f240 6183 	movw	r1, #1667	; 0x683
    e26a:	203e      	movs	r0, #62	; 0x3e
    e26c:	f7f5 fc8a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e270:	40001000 	.word	0x40001000

0000e274 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    e274:	b530      	push	{r4, r5, lr}
    e276:	b087      	sub	sp, #28
    e278:	460d      	mov	r5, r1
    e27a:	b16a      	cbz	r2, e298 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    e27c:	4c4d      	ldr	r4, [pc, #308]	; (e3b4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x140>)
    e27e:	f012 0f01 	tst.w	r2, #1
    e282:	7260      	strb	r0, [r4, #9]
    e284:	7363      	strb	r3, [r4, #13]
    e286:	bf18      	it	ne
    e288:	2a01      	cmpne	r2, #1
    e28a:	d00a      	beq.n	e2a2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x2e>
    e28c:	f240 71fa 	movw	r1, #2042	; 0x7fa
    e290:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e294:	f7f5 fc76 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e298:	f240 71f3 	movw	r1, #2035	; 0x7f3
    e29c:	203e      	movs	r0, #62	; 0x3e
    e29e:	f7f5 fc71 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2a2:	2d00      	cmp	r5, #0
    e2a4:	bf0c      	ite	eq
    e2a6:	2001      	moveq	r0, #1
    e2a8:	2002      	movne	r0, #2
    e2aa:	72a0      	strb	r0, [r4, #10]
    e2ac:	7322      	strb	r2, [r4, #12]
    e2ae:	2801      	cmp	r0, #1
    e2b0:	d006      	beq.n	e2c0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4c>
    e2b2:	2802      	cmp	r0, #2
    e2b4:	d02d      	beq.n	e312 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    e2b6:	f44f 6101 	mov.w	r1, #2064	; 0x810
    e2ba:	203e      	movs	r0, #62	; 0x3e
    e2bc:	f7f5 fc62 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2c0:	7ae0      	ldrb	r0, [r4, #11]
    e2c2:	2802      	cmp	r0, #2
    e2c4:	d125      	bne.n	e312 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x9e>
    e2c6:	2b01      	cmp	r3, #1
    e2c8:	bf08      	it	eq
    e2ca:	2000      	moveq	r0, #0
    e2cc:	d010      	beq.n	e2f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e2ce:	2b02      	cmp	r3, #2
    e2d0:	bf08      	it	eq
    e2d2:	2001      	moveq	r0, #1
    e2d4:	d00c      	beq.n	e2f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e2d6:	2b04      	cmp	r3, #4
    e2d8:	bf08      	it	eq
    e2da:	2003      	moveq	r0, #3
    e2dc:	d008      	beq.n	e2f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e2de:	2b08      	cmp	r3, #8
    e2e0:	bf08      	it	eq
    e2e2:	2002      	moveq	r0, #2
    e2e4:	d004      	beq.n	e2f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x7c>
    e2e6:	f240 31f3 	movw	r1, #1011	; 0x3f3
    e2ea:	2006      	movs	r0, #6
    e2ec:	f7f5 fc4a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2f0:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
    e2f4:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    e2f8:	ab05      	add	r3, sp, #20
    e2fa:	f7f2 f86b 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    e2fe:	b120      	cbz	r0, e30a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x96>
    e300:	f240 31d5 	movw	r1, #981	; 0x3d5
    e304:	203e      	movs	r0, #62	; 0x3e
    e306:	f7f5 fc3d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e30a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    e30e:	f000 fc4b 	bl	eba8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    e312:	4829      	ldr	r0, [pc, #164]	; (e3b8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x144>)
    e314:	6801      	ldr	r1, [r0, #0]
    e316:	f001 010f 	and.w	r1, r1, #15
    e31a:	2903      	cmp	r1, #3
    e31c:	bf08      	it	eq
    e31e:	2001      	moveq	r0, #1
    e320:	d00b      	beq.n	e33a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc6>
    e322:	6800      	ldr	r0, [r0, #0]
    e324:	f000 000f 	and.w	r0, r0, #15
    e328:	2804      	cmp	r0, #4
    e32a:	bf08      	it	eq
    e32c:	2002      	moveq	r0, #2
    e32e:	d004      	beq.n	e33a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc6>
    e330:	f240 11d7 	movw	r1, #471	; 0x1d7
    e334:	203e      	movs	r0, #62	; 0x3e
    e336:	f7f5 fc25 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e33a:	7ae2      	ldrb	r2, [r4, #11]
    e33c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e340:	2a02      	cmp	r2, #2
    e342:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    e346:	d01f      	beq.n	e388 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x114>
    e348:	2802      	cmp	r0, #2
    e34a:	bf0c      	ite	eq
    e34c:	f44f 707a 	moveq.w	r0, #1000	; 0x3e8
    e350:	f240 50dc 	movwne	r0, #1500	; 0x5dc
    e354:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e358:	fbb0 f0f1 	udiv	r0, r0, r1
    e35c:	4410      	add	r0, r2
    e35e:	4917      	ldr	r1, [pc, #92]	; (e3bc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x148>)
    e360:	2d01      	cmp	r5, #1
    e362:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    e366:	e892 101c 	ldmia.w	r2, {r2, r3, r4, ip}
    e36a:	e88d 101c 	stmia.w	sp, {r2, r3, r4, ip}
    e36e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    e370:	9104      	str	r1, [sp, #16]
    e372:	bf14      	ite	ne
    e374:	2101      	movne	r1, #1
    e376:	2100      	moveq	r1, #0
    e378:	f88d 1001 	strb.w	r1, [sp, #1]
    e37c:	9001      	str	r0, [sp, #4]
    e37e:	4668      	mov	r0, sp
    e380:	f7f5 fb04 	bl	398c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
    e384:	b007      	add	sp, #28
    e386:	bd30      	pop	{r4, r5, pc}
    e388:	2801      	cmp	r0, #1
    e38a:	bf08      	it	eq
    e38c:	f641 6014 	movweq	r0, #7700	; 0x1e14
    e390:	d009      	beq.n	e3a6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x132>
    e392:	2802      	cmp	r0, #2
    e394:	bf08      	it	eq
    e396:	f241 1030 	movweq	r0, #4400	; 0x1130
    e39a:	d004      	beq.n	e3a6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x132>
    e39c:	f640 2193 	movw	r1, #2707	; 0xa93
    e3a0:	203e      	movs	r0, #62	; 0x3e
    e3a2:	f7f5 fbef 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3a6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e3aa:	fbb0 f0f1 	udiv	r0, r0, r1
    e3ae:	1a10      	subs	r0, r2, r0
    e3b0:	e7d5      	b.n	e35e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xea>
    e3b2:	0000      	.short	0x0000
    e3b4:	20001950 	.word	0x20001950
    e3b8:	40001510 	.word	0x40001510
    e3bc:	0000eb58 	.word	0x0000eb58

0000e3c0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
    e3c0:	4901      	ldr	r1, [pc, #4]	; (e3c8 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
    e3c2:	7248      	strb	r0, [r1, #9]
    e3c4:	4770      	bx	lr
    e3c6:	0000      	.short	0x0000
    e3c8:	20001950 	.word	0x20001950

0000e3cc <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA>:
    e3cc:	4804      	ldr	r0, [pc, #16]	; (e3e0 <sym_MTFJUGWJZ5BLP55VF6FAZP3YTFXVTBNVA47KMPA+0x14>)
    e3ce:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e3d2:	f021 0110 	bic.w	r1, r1, #16
    e3d6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e3da:	2101      	movs	r1, #1
    e3dc:	6181      	str	r1, [r0, #24]
    e3de:	4770      	bx	lr
    e3e0:	40001000 	.word	0x40001000

0000e3e4 <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ>:
    e3e4:	4805      	ldr	r0, [pc, #20]	; (e3fc <sym_MV6YLFTX27ABEAVPYXLVBFBL4QEYOJZ2WRCTMPQ+0x18>)
    e3e6:	2100      	movs	r1, #0
    e3e8:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    e3ec:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e3f0:	f041 0110 	orr.w	r1, r1, #16
    e3f4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    e3f8:	4770      	bx	lr
    e3fa:	0000      	.short	0x0000
    e3fc:	40001000 	.word	0x40001000

0000e400 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    e400:	490b      	ldr	r1, [pc, #44]	; (e430 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    e402:	b081      	sub	sp, #4
    e404:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    e408:	2a01      	cmp	r2, #1
    e40a:	bf1e      	ittt	ne
    e40c:	2000      	movne	r0, #0
    e40e:	b001      	addne	sp, #4
    e410:	4770      	bxne	lr
    e412:	4a08      	ldr	r2, [pc, #32]	; (e434 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    e414:	6812      	ldr	r2, [r2, #0]
    e416:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e41a:	4252      	negs	r2, r2
    e41c:	7002      	strb	r2, [r0, #0]
    e41e:	2000      	movs	r0, #0
    e420:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    e424:	4804      	ldr	r0, [pc, #16]	; (e438 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x38>)
    e426:	6800      	ldr	r0, [r0, #0]
    e428:	9000      	str	r0, [sp, #0]
    e42a:	2001      	movs	r0, #1
    e42c:	b001      	add	sp, #4
    e42e:	4770      	bx	lr
    e430:	40001000 	.word	0x40001000
    e434:	40001548 	.word	0x40001548
    e438:	4000111c 	.word	0x4000111c

0000e43c <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    e43c:	4a04      	ldr	r2, [pc, #16]	; (e450 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    e43e:	6803      	ldr	r3, [r0, #0]
    e440:	f8c2 3016 	str.w	r3, [r2, #22]
    e444:	8880      	ldrh	r0, [r0, #4]
    e446:	8350      	strh	r0, [r2, #26]
    e448:	f102 0014 	add.w	r0, r2, #20
    e44c:	7201      	strb	r1, [r0, #8]
    e44e:	4770      	bx	lr
    e450:	2000193c 	.word	0x2000193c

0000e454 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    e454:	4a03      	ldr	r2, [pc, #12]	; (e464 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    e456:	78c1      	ldrb	r1, [r0, #3]
    e458:	6011      	str	r1, [r2, #0]
    e45a:	6800      	ldr	r0, [r0, #0]
    e45c:	4902      	ldr	r1, [pc, #8]	; (e468 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    e45e:	0200      	lsls	r0, r0, #8
    e460:	6008      	str	r0, [r1, #0]
    e462:	4770      	bx	lr
    e464:	40001524 	.word	0x40001524
    e468:	4000151c 	.word	0x4000151c

0000e46c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    e46c:	6800      	ldr	r0, [r0, #0]
    e46e:	4902      	ldr	r1, [pc, #8]	; (e478 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    e470:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e474:	6008      	str	r0, [r1, #0]
    e476:	4770      	bx	lr
    e478:	4000153c 	.word	0x4000153c

0000e47c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    e47c:	b510      	push	{r4, lr}
    e47e:	2200      	movs	r2, #0
    e480:	2901      	cmp	r1, #1
    e482:	d009      	beq.n	e498 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    e484:	2902      	cmp	r1, #2
    e486:	bf08      	it	eq
    e488:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    e48c:	d004      	beq.n	e498 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    e48e:	f44f 7109 	mov.w	r1, #548	; 0x224
    e492:	203e      	movs	r0, #62	; 0x3e
    e494:	f7f5 fb76 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e498:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    e49c:	4a0b      	ldr	r2, [pc, #44]	; (e4cc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x50>)
    e49e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e4a2:	6011      	str	r1, [r2, #0]
    e4a4:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    e4a8:	1d11      	adds	r1, r2, #4
    e4aa:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e4ae:	6008      	str	r0, [r1, #0]
    e4b0:	4807      	ldr	r0, [pc, #28]	; (e4d0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x54>)
    e4b2:	6801      	ldr	r1, [r0, #0]
    e4b4:	2903      	cmp	r1, #3
    e4b6:	bf1e      	ittt	ne
    e4b8:	6800      	ldrne	r0, [r0, #0]
    e4ba:	280b      	cmpne	r0, #11
    e4bc:	bd10      	popne	{r4, pc}
    e4be:	f240 213e 	movw	r1, #574	; 0x23e
    e4c2:	f04f 003e 	mov.w	r0, #62	; 0x3e
    e4c6:	f7f5 fb5d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4ca:	0000      	.short	0x0000
    e4cc:	40001514 	.word	0x40001514
    e4d0:	40001550 	.word	0x40001550

0000e4d4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    e4d4:	b510      	push	{r4, lr}
    e4d6:	2200      	movs	r2, #0
    e4d8:	2901      	cmp	r1, #1
    e4da:	d009      	beq.n	e4f0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x1c>
    e4dc:	2902      	cmp	r1, #2
    e4de:	bf08      	it	eq
    e4e0:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
    e4e4:	d004      	beq.n	e4f0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x1c>
    e4e6:	f44f 7109 	mov.w	r1, #548	; 0x224
    e4ea:	203e      	movs	r0, #62	; 0x3e
    e4ec:	f7f5 fb4a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4f0:	f442 7184 	orr.w	r1, r2, #264	; 0x108
    e4f4:	4a05      	ldr	r2, [pc, #20]	; (e50c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x38>)
    e4f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e4fa:	6011      	str	r1, [r2, #0]
    e4fc:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    e500:	1d11      	adds	r1, r2, #4
    e502:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
    e506:	6008      	str	r0, [r1, #0]
    e508:	bd10      	pop	{r4, pc}
    e50a:	0000      	.short	0x0000
    e50c:	40001514 	.word	0x40001514

0000e510 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    e510:	4901      	ldr	r1, [pc, #4]	; (e518 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    e512:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    e516:	4770      	bx	lr
    e518:	20001950 	.word	0x20001950

0000e51c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e520:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; e914 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    e524:	b083      	sub	sp, #12
    e526:	2701      	movs	r7, #1
    e528:	f8c9 704c 	str.w	r7, [r9, #76]	; 0x4c
    e52c:	f8d9 b14c 	ldr.w	fp, [r9, #332]	; 0x14c
    e530:	48f9      	ldr	r0, [pc, #996]	; (e918 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>)
    e532:	f8d0 8000 	ldr.w	r8, [r0]
    e536:	4af9      	ldr	r2, [pc, #996]	; (e91c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    e538:	7811      	ldrb	r1, [r2, #0]
    e53a:	2904      	cmp	r1, #4
    e53c:	d304      	bcc.n	e548 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    e53e:	f640 1176 	movw	r1, #2422	; 0x976
    e542:	203e      	movs	r0, #62	; 0x3e
    e544:	f7f5 fb1e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e548:	4df5      	ldr	r5, [pc, #980]	; (e920 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    e54a:	4bf6      	ldr	r3, [pc, #984]	; (e924 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e54c:	f04f 0c00 	mov.w	ip, #0
    e550:	7ae8      	ldrb	r0, [r5, #11]
    e552:	2801      	cmp	r0, #1
    e554:	d002      	beq.n	e55c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40>
    e556:	2802      	cmp	r0, #2
    e558:	d003      	beq.n	e562 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    e55a:	e015      	b.n	e588 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e55c:	7e2c      	ldrb	r4, [r5, #24]
    e55e:	b914      	cbnz	r4, e566 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a>
    e560:	e012      	b.n	e588 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e562:	7e6c      	ldrb	r4, [r5, #25]
    e564:	b184      	cbz	r4, e588 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6c>
    e566:	7fac      	ldrb	r4, [r5, #30]
    e568:	7fee      	ldrb	r6, [r5, #31]
    e56a:	fa07 f404 	lsl.w	r4, r7, r4
    e56e:	fa07 f606 	lsl.w	r6, r7, r6
    e572:	4334      	orrs	r4, r6
    e574:	601c      	str	r4, [r3, #0]
    e576:	f895 4020 	ldrb.w	r4, [r5, #32]
    e57a:	00a4      	lsls	r4, r4, #2
    e57c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    e580:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    e584:	f8c4 c510 	str.w	ip, [r4, #1296]	; 0x510
    e588:	4be6      	ldr	r3, [pc, #920]	; (e924 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e58a:	6bac      	ldr	r4, [r5, #56]	; 0x38
    e58c:	601c      	str	r4, [r3, #0]
    e58e:	4ce6      	ldr	r4, [pc, #920]	; (e928 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e590:	2300      	movs	r3, #0
    e592:	63ab      	str	r3, [r5, #56]	; 0x38
    e594:	f8d4 c200 	ldr.w	ip, [r4, #512]	; 0x200
    e598:	f02c 0c0d 	bic.w	ip, ip, #13
    e59c:	f8c4 c200 	str.w	ip, [r4, #512]	; 0x200
    e5a0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    e5a4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    e5a8:	2b00      	cmp	r3, #0
    e5aa:	bf08      	it	eq
    e5ac:	f8c9 7040 	streq.w	r7, [r9, #64]	; 0x40
    e5b0:	f04f 0a00 	mov.w	sl, #0
    e5b4:	7c2b      	ldrb	r3, [r5, #16]
    e5b6:	b12b      	cbz	r3, e5c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa8>
    e5b8:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
    e5bc:	2b01      	cmp	r3, #1
    e5be:	bf08      	it	eq
    e5c0:	2601      	moveq	r6, #1
    e5c2:	d000      	beq.n	e5c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xaa>
    e5c4:	2600      	movs	r6, #0
    e5c6:	2801      	cmp	r0, #1
    e5c8:	d00a      	beq.n	e5e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc4>
    e5ca:	2802      	cmp	r0, #2
    e5cc:	d011      	beq.n	e5f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    e5ce:	bf00      	nop
    e5d0:	f01a 0f0b 	tst.w	sl, #11
    e5d4:	d01d      	beq.n	e612 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    e5d6:	bf00      	nop
    e5d8:	f011 0f01 	tst.w	r1, #1
    e5dc:	d022      	beq.n	e624 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    e5de:	e043      	b.n	e668 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    e5e0:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    e5e4:	2801      	cmp	r0, #1
    e5e6:	bf14      	ite	ne
    e5e8:	f04f 0a00 	movne.w	sl, #0
    e5ec:	f04f 0a08 	moveq.w	sl, #8
    e5f0:	e7ee      	b.n	e5d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    e5f2:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
    e5f6:	2801      	cmp	r0, #1
    e5f8:	bf14      	ite	ne
    e5fa:	2000      	movne	r0, #0
    e5fc:	2002      	moveq	r0, #2
    e5fe:	4bcb      	ldr	r3, [pc, #812]	; (e92c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
    e600:	681b      	ldr	r3, [r3, #0]
    e602:	2b01      	cmp	r3, #1
    e604:	bf14      	ite	ne
    e606:	2304      	movne	r3, #4
    e608:	2300      	moveq	r3, #0
    e60a:	4318      	orrs	r0, r3
    e60c:	ea40 0a06 	orr.w	sl, r0, r6
    e610:	e7de      	b.n	e5d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    e612:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    e616:	2801      	cmp	r0, #1
    e618:	bf14      	ite	ne
    e61a:	2000      	movne	r0, #0
    e61c:	2010      	moveq	r0, #16
    e61e:	ea40 0a0a 	orr.w	sl, r0, sl
    e622:	e7d9      	b.n	e5d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xbc>
    e624:	48c2      	ldr	r0, [pc, #776]	; (e930 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>)
    e626:	6801      	ldr	r1, [r0, #0]
    e628:	f011 0fff 	tst.w	r1, #255	; 0xff
    e62c:	d003      	beq.n	e636 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11a>
    e62e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    e632:	2901      	cmp	r1, #1
    e634:	d000      	beq.n	e638 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11c>
    e636:	2100      	movs	r1, #0
    e638:	f885 1032 	strb.w	r1, [r5, #50]	; 0x32
    e63c:	6800      	ldr	r0, [r0, #0]
    e63e:	f010 0fff 	tst.w	r0, #255	; 0xff
    e642:	d003      	beq.n	e64c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    e644:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    e648:	2801      	cmp	r0, #1
    e64a:	d000      	beq.n	e64e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x132>
    e64c:	2000      	movs	r0, #0
    e64e:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
    e652:	48b8      	ldr	r0, [pc, #736]	; (e934 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
    e654:	6800      	ldr	r0, [r0, #0]
    e656:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    e65a:	f7fe fed5 	bl	d408 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    e65e:	2801      	cmp	r0, #1
    e660:	bf18      	it	ne
    e662:	2000      	movne	r0, #0
    e664:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    e668:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    e66c:	1e71      	subs	r1, r6, #1
    e66e:	4308      	orrs	r0, r1
    e670:	bf18      	it	ne
    e672:	2001      	movne	r0, #1
    e674:	f88d 0000 	strb.w	r0, [sp]
    e678:	48ab      	ldr	r0, [pc, #684]	; (e928 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e67a:	2600      	movs	r6, #0
    e67c:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
    e680:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
    e684:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    e688:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
    e68c:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
    e690:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
    e694:	48a8      	ldr	r0, [pc, #672]	; (e938 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    e696:	6800      	ldr	r0, [r0, #0]
    e698:	9001      	str	r0, [sp, #4]
    e69a:	4668      	mov	r0, sp
    e69c:	f7f5 f968 	bl	3970 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
    e6a0:	2800      	cmp	r0, #0
    e6a2:	bf18      	it	ne
    e6a4:	2010      	movne	r0, #16
    e6a6:	ea40 040a 	orr.w	r4, r0, sl
    e6aa:	f8c9 6144 	str.w	r6, [r9, #324]	; 0x144
    e6ae:	f014 0f10 	tst.w	r4, #16
    e6b2:	d006      	beq.n	e6c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a6>
    e6b4:	f014 0f08 	tst.w	r4, #8
    e6b8:	bf02      	ittt	eq
    e6ba:	7ae8      	ldrbeq	r0, [r5, #11]
    e6bc:	2801      	cmpeq	r0, #1
    e6be:	f044 0420 	orreq.w	r4, r4, #32
    e6c2:	489e      	ldr	r0, [pc, #632]	; (e93c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    e6c4:	6800      	ldr	r0, [r0, #0]
    e6c6:	9001      	str	r0, [sp, #4]
    e6c8:	489d      	ldr	r0, [pc, #628]	; (e940 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    e6ca:	6800      	ldr	r0, [r0, #0]
    e6cc:	499d      	ldr	r1, [pc, #628]	; (e944 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
    e6ce:	62e8      	str	r0, [r5, #44]	; 0x2c
    e6d0:	680a      	ldr	r2, [r1, #0]
    e6d2:	f002 020f 	and.w	r2, r2, #15
    e6d6:	2a03      	cmp	r2, #3
    e6d8:	bf08      	it	eq
    e6da:	2101      	moveq	r1, #1
    e6dc:	d00b      	beq.n	e6f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e6de:	6809      	ldr	r1, [r1, #0]
    e6e0:	f001 010f 	and.w	r1, r1, #15
    e6e4:	2904      	cmp	r1, #4
    e6e6:	bf08      	it	eq
    e6e8:	2102      	moveq	r1, #2
    e6ea:	d004      	beq.n	e6f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1da>
    e6ec:	f240 11d7 	movw	r1, #471	; 0x1d7
    e6f0:	203e      	movs	r0, #62	; 0x3e
    e6f2:	f7f5 fa47 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6f6:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    e6fa:	7ae9      	ldrb	r1, [r5, #11]
    e6fc:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    e700:	62ae      	str	r6, [r5, #40]	; 0x28
    e702:	2902      	cmp	r1, #2
    e704:	d10c      	bne.n	e720 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x204>
    e706:	7869      	ldrb	r1, [r5, #1]
    e708:	b151      	cbz	r1, e720 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x204>
    e70a:	4a8f      	ldr	r2, [pc, #572]	; (e948 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e70c:	6812      	ldr	r2, [r2, #0]
    e70e:	7812      	ldrb	r2, [r2, #0]
    e710:	4011      	ands	r1, r2
    e712:	782a      	ldrb	r2, [r5, #0]
    e714:	ea32 0101 	bics.w	r1, r2, r1
    e718:	bf08      	it	eq
    e71a:	f885 7024 	strbeq.w	r7, [r5, #36]	; 0x24
    e71e:	d001      	beq.n	e724 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    e720:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
    e724:	f8df a224 	ldr.w	sl, [pc, #548]	; e94c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>
    e728:	f014 0f02 	tst.w	r4, #2
    e72c:	bf1c      	itt	ne
    e72e:	f8da 1000 	ldrne.w	r1, [sl]
    e732:	62a9      	strne	r1, [r5, #40]	; 0x28
    e734:	f014 0f08 	tst.w	r4, #8
    e738:	bf1c      	itt	ne
    e73a:	f8da 1000 	ldrne.w	r1, [sl]
    e73e:	62a9      	strne	r1, [r5, #40]	; 0x28
    e740:	f8df 920c 	ldr.w	r9, [pc, #524]	; e950 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>
    e744:	f8d9 1010 	ldr.w	r1, [r9, #16]
    e748:	4788      	blx	r1
    e74a:	4874      	ldr	r0, [pc, #464]	; (e91c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
    e74c:	7800      	ldrb	r0, [r0, #0]
    e74e:	f010 0f01 	tst.w	r0, #1
    e752:	d11e      	bne.n	e792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e754:	487c      	ldr	r0, [pc, #496]	; (e948 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e756:	6801      	ldr	r1, [r0, #0]
    e758:	7809      	ldrb	r1, [r1, #0]
    e75a:	f001 010f 	and.w	r1, r1, #15
    e75e:	2907      	cmp	r1, #7
    e760:	bf28      	it	cs
    e762:	f885 6025 	strbcs.w	r6, [r5, #37]	; 0x25
    e766:	d214      	bcs.n	e792 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x276>
    e768:	4877      	ldr	r0, [pc, #476]	; (e948 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e76a:	6800      	ldr	r0, [r0, #0]
    e76c:	2206      	movs	r2, #6
    e76e:	f100 0109 	add.w	r1, r0, #9
    e772:	1ca8      	adds	r0, r5, #2
    e774:	f000 fb9e 	bl	eeb4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e778:	b940      	cbnz	r0, e78c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x270>
    e77a:	4873      	ldr	r0, [pc, #460]	; (e948 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
    e77c:	7a29      	ldrb	r1, [r5, #8]
    e77e:	6800      	ldr	r0, [r0, #0]
    e780:	7800      	ldrb	r0, [r0, #0]
    e782:	ebb1 1fd0 	cmp.w	r1, r0, lsr #7
    e786:	bf08      	it	eq
    e788:	2001      	moveq	r0, #1
    e78a:	d000      	beq.n	e78e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x272>
    e78c:	2000      	movs	r0, #0
    e78e:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
    e792:	2000      	movs	r0, #0
    e794:	f8cd 8008 	str.w	r8, [sp, #8]
    e798:	9000      	str	r0, [sp, #0]
    e79a:	7aa9      	ldrb	r1, [r5, #10]
    e79c:	b149      	cbz	r1, e7b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x296>
    e79e:	7b28      	ldrb	r0, [r5, #12]
    e7a0:	f010 0f02 	tst.w	r0, #2
    e7a4:	bf1c      	itt	ne
    e7a6:	f014 0f02 	tstne.w	r4, #2
    e7aa:	f014 0f04 	tstne.w	r4, #4
    e7ae:	d008      	beq.n	e7c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a6>
    e7b0:	e021      	b.n	e7f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e7b2:	495c      	ldr	r1, [pc, #368]	; (e924 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    e7b4:	4867      	ldr	r0, [pc, #412]	; (e954 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
    e7b6:	6008      	str	r0, [r1, #0]
    e7b8:	726e      	strb	r6, [r5, #9]
    e7ba:	72ae      	strb	r6, [r5, #10]
    e7bc:	72ee      	strb	r6, [r5, #11]
    e7be:	732f      	strb	r7, [r5, #12]
    e7c0:	e068      	b.n	e894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e7c2:	f010 0f10 	tst.w	r0, #16
    e7c6:	bf1c      	itt	ne
    e7c8:	f895 2033 	ldrbne.w	r2, [r5, #51]	; 0x33
    e7cc:	2a00      	cmpne	r2, #0
    e7ce:	d002      	beq.n	e7d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ba>
    e7d0:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    e7d4:	b17a      	cbz	r2, e7f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e7d6:	f010 0f08 	tst.w	r0, #8
    e7da:	bf1c      	itt	ne
    e7dc:	f895 2024 	ldrbne.w	r2, [r5, #36]	; 0x24
    e7e0:	2a00      	cmpne	r2, #0
    e7e2:	d108      	bne.n	e7f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e7e4:	f010 0f04 	tst.w	r0, #4
    e7e8:	d002      	beq.n	e7f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    e7ea:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
    e7ee:	b110      	cbz	r0, e7f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2da>
    e7f0:	f014 0f11 	tst.w	r4, #17
    e7f4:	d002      	beq.n	e7fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>
    e7f6:	f7fe ffb3 	bl	d760 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e7fa:	e04b      	b.n	e894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e7fc:	2901      	cmp	r1, #1
    e7fe:	bf14      	ite	ne
    e800:	f04f 0801 	movne.w	r8, #1
    e804:	f04f 0800 	moveq.w	r8, #0
    e808:	7a68      	ldrb	r0, [r5, #9]
    e80a:	2801      	cmp	r0, #1
    e80c:	bf18      	it	ne
    e80e:	2000      	movne	r0, #0
    e810:	9001      	str	r0, [sp, #4]
    e812:	726e      	strb	r6, [r5, #9]
    e814:	72ae      	strb	r6, [r5, #10]
    e816:	72ee      	strb	r6, [r5, #11]
    e818:	732f      	strb	r7, [r5, #12]
    e81a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    e81e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    e822:	2100      	movs	r1, #0
    e824:	b1d2      	cbz	r2, e85c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x340>
    e826:	f1b8 0f00 	cmp.w	r8, #0
    e82a:	d01c      	beq.n	e866 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34a>
    e82c:	f1b8 0f00 	cmp.w	r8, #0
    e830:	d007      	beq.n	e842 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e832:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e836:	2a01      	cmp	r2, #1
    e838:	d023      	beq.n	e882 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x366>
    e83a:	f003 fdb1 	bl	123a0 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    e83e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e840:	4401      	add	r1, r0
    e842:	9801      	ldr	r0, [sp, #4]
    e844:	b310      	cbz	r0, e88c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x370>
    e846:	9802      	ldr	r0, [sp, #8]
    e848:	303a      	adds	r0, #58	; 0x3a
    e84a:	4288      	cmp	r0, r1
    e84c:	bf98      	it	ls
    e84e:	726f      	strbls	r7, [r5, #9]
    e850:	d91c      	bls.n	e88c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x370>
    e852:	4835      	ldr	r0, [pc, #212]	; (e928 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
    e854:	6107      	str	r7, [r0, #16]
    e856:	2001      	movs	r0, #1
    e858:	9000      	str	r0, [sp, #0]
    e85a:	e01b      	b.n	e894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>
    e85c:	f240 6146 	movw	r1, #1606	; 0x646
    e860:	203e      	movs	r0, #62	; 0x3e
    e862:	f7f5 f98f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e866:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    e86a:	2a01      	cmp	r2, #1
    e86c:	d004      	beq.n	e878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    e86e:	f003 fda5 	bl	123bc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    e872:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e874:	4401      	add	r1, r0
    e876:	e7e4      	b.n	e842 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e878:	f003 fdba 	bl	123f0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    e87c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e87e:	4401      	add	r1, r0
    e880:	e7df      	b.n	e842 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e882:	f003 fda6 	bl	123d2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    e886:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e888:	4401      	add	r1, r0
    e88a:	e7da      	b.n	e842 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x326>
    e88c:	7b6a      	ldrb	r2, [r5, #13]
    e88e:	4640      	mov	r0, r8
    e890:	f7ff fb5c 	bl	df4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    e894:	f014 0f01 	tst.w	r4, #1
    e898:	d003      	beq.n	e8a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x386>
    e89a:	f8d9 0000 	ldr.w	r0, [r9]
    e89e:	4780      	blx	r0
    e8a0:	e06f      	b.n	e982 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    e8a2:	f014 0f02 	tst.w	r4, #2
    e8a6:	d05b      	beq.n	e960 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>
    e8a8:	7e68      	ldrb	r0, [r5, #25]
    e8aa:	b110      	cbz	r0, e8b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x396>
    e8ac:	f1bb 0f00 	cmp.w	fp, #0
    e8b0:	d003      	beq.n	e8ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x39e>
    e8b2:	f014 0f04 	tst.w	r4, #4
    e8b6:	d126      	bne.n	e906 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e8b8:	e004      	b.n	e8c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a8>
    e8ba:	f44f 611d 	mov.w	r1, #2512	; 0x9d0
    e8be:	203e      	movs	r0, #62	; 0x3e
    e8c0:	f7f5 f960 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8c4:	f000 fad2 	bl	ee6c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    e8c8:	b9e8      	cbnz	r0, e906 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e8ca:	f000 fabf 	bl	ee4c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    e8ce:	b9d0      	cbnz	r0, e906 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e8d0:	4821      	ldr	r0, [pc, #132]	; (e958 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
    e8d2:	6800      	ldr	r0, [r0, #0]
    e8d4:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    e8d8:	f3c0 6200 	ubfx	r2, r0, #24, #1
    e8dc:	f000 030f 	and.w	r3, r0, #15
    e8e0:	f3c0 1103 	ubfx	r1, r0, #4, #4
    e8e4:	f3c0 2003 	ubfx	r0, r0, #8, #4
    e8e8:	b16a      	cbz	r2, e906 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e8ea:	2b00      	cmp	r3, #0
    e8ec:	bf1c      	itt	ne
    e8ee:	2900      	cmpne	r1, #0
    e8f0:	2800      	cmpne	r0, #0
    e8f2:	d108      	bne.n	e906 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    e8f4:	4819      	ldr	r0, [pc, #100]	; (e95c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
    e8f6:	6800      	ldr	r0, [r0, #0]
    e8f8:	2800      	cmp	r0, #0
    e8fa:	bf18      	it	ne
    e8fc:	f1bc 0f03 	cmpne.w	ip, #3
    e900:	bf38      	it	cc
    e902:	f044 0404 	orrcc.w	r4, r4, #4
    e906:	ea27 0094 	bic.w	r0, r7, r4, lsr #2
    e90a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    e90e:	9900      	ldr	r1, [sp, #0]
    e910:	e036      	b.n	e980 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>
    e912:	0000      	.short	0x0000
    e914:	40008000 	.word	0x40008000
    e918:	4000854c 	.word	0x4000854c
    e91c:	20000390 	.word	0x20000390
    e920:	20001950 	.word	0x20001950
    e924:	4001f508 	.word	0x4001f508
    e928:	40001000 	.word	0x40001000
    e92c:	40001400 	.word	0x40001400
    e930:	40001640 	.word	0x40001640
    e934:	40001410 	.word	0x40001410
    e938:	40001118 	.word	0x40001118
    e93c:	40008144 	.word	0x40008144
    e940:	40008540 	.word	0x40008540
    e944:	40001510 	.word	0x40001510
    e948:	40001504 	.word	0x40001504
    e94c:	40008544 	.word	0x40008544
    e950:	2000193c 	.word	0x2000193c
    e954:	04040000 	.word	0x04040000
    e958:	40001450 	.word	0x40001450
    e95c:	40001454 	.word	0x40001454
    e960:	f014 0f28 	tst.w	r4, #40	; 0x28
    e964:	d00d      	beq.n	e982 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
    e966:	f014 0f20 	tst.w	r4, #32
    e96a:	d104      	bne.n	e976 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    e96c:	7e28      	ldrb	r0, [r5, #24]
    e96e:	b110      	cbz	r0, e976 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    e970:	f1bb 0f00 	cmp.w	fp, #0
    e974:	d00f      	beq.n	e996 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47a>
    e976:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e97a:	ea27 1154 	bic.w	r1, r7, r4, lsr #5
    e97e:	9800      	ldr	r0, [sp, #0]
    e980:	4790      	blx	r2
    e982:	f014 0f10 	tst.w	r4, #16
    e986:	bf1c      	itt	ne
    e988:	f8d9 000c 	ldrne.w	r0, [r9, #12]
    e98c:	4780      	blxne	r0
    e98e:	7ae8      	ldrb	r0, [r5, #11]
    e990:	2802      	cmp	r0, #2
    e992:	d11d      	bne.n	e9d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    e994:	e004      	b.n	e9a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x484>
    e996:	f44f 6120 	mov.w	r1, #2560	; 0xa00
    e99a:	203e      	movs	r0, #62	; 0x3e
    e99c:	f7f5 f8f2 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a0:	7c28      	ldrb	r0, [r5, #16]
    e9a2:	b1a8      	cbz	r0, e9d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    e9a4:	2802      	cmp	r0, #2
    e9a6:	d006      	beq.n	e9b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x49a>
    e9a8:	2801      	cmp	r0, #1
    e9aa:	d025      	beq.n	e9f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4dc>
    e9ac:	f640 2124 	movw	r1, #2596	; 0xa24
    e9b0:	203e      	movs	r0, #62	; 0x3e
    e9b2:	f7f5 f8e7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9b6:	6969      	ldr	r1, [r5, #20]
    e9b8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    e9ba:	4408      	add	r0, r1
    e9bc:	f8ca 0000 	str.w	r0, [sl]
    e9c0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    e9c2:	4913      	ldr	r1, [pc, #76]	; (ea10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4f4>)
    e9c4:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    e9c8:	63a8      	str	r0, [r5, #56]	; 0x38
    e9ca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    e9ce:	6008      	str	r0, [r1, #0]
    e9d0:	f014 0f10 	tst.w	r4, #16
    e9d4:	bf04      	itt	eq
    e9d6:	b003      	addeq	sp, #12
    e9d8:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9dc:	480d      	ldr	r0, [pc, #52]	; (ea14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4f8>)
    e9de:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
    e9e2:	480d      	ldr	r0, [pc, #52]	; (ea18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fc>)
    e9e4:	6800      	ldr	r0, [r0, #0]
    e9e6:	9000      	str	r0, [sp, #0]
    e9e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e9ec:	2002      	movs	r0, #2
    e9ee:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    e9f2:	b003      	add	sp, #12
    e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9f8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    e9fa:	6968      	ldr	r0, [r5, #20]
    e9fc:	4288      	cmp	r0, r1
    e9fe:	bf88      	it	hi
    ea00:	f8ca 0000 	strhi.w	r0, [sl]
    ea04:	d8dc      	bhi.n	e9c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4a4>
    ea06:	f640 2125 	movw	r1, #2597	; 0xa25
    ea0a:	203e      	movs	r0, #62	; 0x3e
    ea0c:	f7f5 f8ba 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea10:	4001f504 	.word	0x4001f504
    ea14:	40001000 	.word	0x40001000
    ea18:	40001110 	.word	0x40001110

0000ea1c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    ea1c:	0083      	lsls	r3, r0, #2
    ea1e:	b510      	push	{r4, lr}
    ea20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ea24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ea28:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    ea2c:	f8c3 c620 	str.w	ip, [r3, #1568]	; 0x620
    ea30:	f891 c000 	ldrb.w	ip, [r1]
    ea34:	f8d1 1001 	ldr.w	r1, [r1, #1]
    ea38:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    ea3c:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    ea40:	f100 0108 	add.w	r1, r0, #8
    ea44:	f04f 0c01 	mov.w	ip, #1
    ea48:	fa0c f301 	lsl.w	r3, ip, r1
    ea4c:	490b      	ldr	r1, [pc, #44]	; (ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>)
    ea4e:	2a00      	cmp	r2, #0
    ea50:	bf04      	itt	eq
    ea52:	680a      	ldreq	r2, [r1, #0]
    ea54:	439a      	biceq	r2, r3
    ea56:	d009      	beq.n	ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>
    ea58:	2a01      	cmp	r2, #1
    ea5a:	bf04      	itt	eq
    ea5c:	680a      	ldreq	r2, [r1, #0]
    ea5e:	431a      	orreq	r2, r3
    ea60:	d004      	beq.n	ea6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc>
    ea62:	f240 31a6 	movw	r1, #934	; 0x3a6
    ea66:	203e      	movs	r0, #62	; 0x3e
    ea68:	f7f5 f88c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea6c:	600a      	str	r2, [r1, #0]
    ea6e:	680a      	ldr	r2, [r1, #0]
    ea70:	fa0c f000 	lsl.w	r0, ip, r0
    ea74:	4310      	orrs	r0, r2
    ea76:	6008      	str	r0, [r1, #0]
    ea78:	bd10      	pop	{r4, pc}
    ea7a:	0000      	.short	0x0000
    ea7c:	40001640 	.word	0x40001640
    ea80:	492e      	ldr	r1, [pc, #184]	; (eb3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc>)
    ea82:	7aca      	ldrb	r2, [r1, #11]
    ea84:	2a01      	cmp	r2, #1
    ea86:	d04a      	beq.n	eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
    ea88:	2a02      	cmp	r2, #2
    ea8a:	bf18      	it	ne
    ea8c:	4770      	bxne	lr
    ea8e:	7e4b      	ldrb	r3, [r1, #25]
    ea90:	2b00      	cmp	r3, #0
    ea92:	bf08      	it	eq
    ea94:	4770      	bxeq	lr
    ea96:	2a01      	cmp	r2, #1
    ea98:	d045      	beq.n	eb26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc6>
    ea9a:	7ecb      	ldrb	r3, [r1, #27]
    ea9c:	7f4a      	ldrb	r2, [r1, #29]
    ea9e:	f113 0c00 	adds.w	ip, r3, #0
    eaa2:	bf18      	it	ne
    eaa4:	f04f 0c01 	movne.w	ip, #1
    eaa8:	2324      	movs	r3, #36	; 0x24
    eaaa:	4418      	add	r0, r3
    eaac:	4b24      	ldr	r3, [pc, #144]	; (eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>)
    eaae:	6018      	str	r0, [r3, #0]
    eab0:	0210      	lsls	r0, r2, #8
    eab2:	f08c 0201 	eor.w	r2, ip, #1
    eab6:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
    eaba:	f040 1203 	orr.w	r2, r0, #196611	; 0x30003
    eabe:	f891 0020 	ldrb.w	r0, [r1, #32]
    eac2:	0083      	lsls	r3, r0, #2
    eac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eac8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    eacc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    ead0:	4b1c      	ldr	r3, [pc, #112]	; (eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
    ead2:	7f8a      	ldrb	r2, [r1, #30]
    ead4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ead8:	00d3      	lsls	r3, r2, #3
    eada:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eade:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    eae2:	f8df c064 	ldr.w	ip, [pc, #100]	; eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>
    eae6:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    eaea:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    eaee:	7fc9      	ldrb	r1, [r1, #31]
    eaf0:	f8df c058 	ldr.w	ip, [pc, #88]	; eb4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xec>
    eaf4:	00cb      	lsls	r3, r1, #3
    eaf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eafa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    eafe:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
    eb02:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    eb06:	2001      	movs	r0, #1
    eb08:	fa00 f202 	lsl.w	r2, r0, r2
    eb0c:	4088      	lsls	r0, r1
    eb0e:	4910      	ldr	r1, [pc, #64]	; (eb50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0>)
    eb10:	4310      	orrs	r0, r2
    eb12:	6008      	str	r0, [r1, #0]
    eb14:	490f      	ldr	r1, [pc, #60]	; (eb54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4>)
    eb16:	2000      	movs	r0, #0
    eb18:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    eb1c:	4770      	bx	lr
    eb1e:	7e0b      	ldrb	r3, [r1, #24]
    eb20:	2b00      	cmp	r3, #0
    eb22:	d1b8      	bne.n	ea96 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36>
    eb24:	4770      	bx	lr
    eb26:	7e8b      	ldrb	r3, [r1, #26]
    eb28:	7f0a      	ldrb	r2, [r1, #28]
    eb2a:	2b00      	cmp	r3, #0
    eb2c:	bf14      	ite	ne
    eb2e:	f04f 0c01 	movne.w	ip, #1
    eb32:	f04f 0c00 	moveq.w	ip, #0
    eb36:	2311      	movs	r3, #17
    eb38:	e7b7      	b.n	eaaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4a>
    eb3a:	0000      	.short	0x0000
    eb3c:	20001950 	.word	0x20001950
    eb40:	4000854c 	.word	0x4000854c
    eb44:	40006000 	.word	0x40006000
    eb48:	4000814c 	.word	0x4000814c
    eb4c:	40001110 	.word	0x40001110
    eb50:	4001f504 	.word	0x4001f504
    eb54:	40008000 	.word	0x40008000
    eb58:	00000002 	.word	0x00000002
	...
    eb70:	40008000 	.word	0x40008000
	...
    eb84:	40008000 	.word	0x40008000
    eb88:	00000002 	.word	0x00000002
	...
    eb94:	00000001 	.word	0x00000001
	...

0000eba8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    eba8:	4901      	ldr	r1, [pc, #4]	; (ebb0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    ebaa:	b2c0      	uxtb	r0, r0
    ebac:	6008      	str	r0, [r1, #0]
    ebae:	4770      	bx	lr
    ebb0:	4000150c 	.word	0x4000150c

0000ebb4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    ebb4:	b510      	push	{r4, lr}
    ebb6:	4907      	ldr	r1, [pc, #28]	; (ebd4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    ebb8:	2801      	cmp	r0, #1
    ebba:	bf08      	it	eq
    ebbc:	2003      	moveq	r0, #3
    ebbe:	d007      	beq.n	ebd0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1c>
    ebc0:	2802      	cmp	r0, #2
    ebc2:	bf08      	it	eq
    ebc4:	2004      	moveq	r0, #4
    ebc6:	d003      	beq.n	ebd0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1c>
    ebc8:	2158      	movs	r1, #88	; 0x58
    ebca:	203f      	movs	r0, #63	; 0x3f
    ebcc:	f7f4 ffda 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebd0:	6008      	str	r0, [r1, #0]
    ebd2:	bd10      	pop	{r4, pc}
    ebd4:	40001510 	.word	0x40001510

0000ebd8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    ebd8:	4770      	bx	lr
    ebda:	2100      	movs	r1, #0
    ebdc:	7081      	strb	r1, [r0, #2]
    ebde:	7001      	strb	r1, [r0, #0]
    ebe0:	7041      	strb	r1, [r0, #1]
    ebe2:	4770      	bx	lr

0000ebe4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    ebe4:	b570      	push	{r4, r5, r6, lr}
    ebe6:	f7f1 fc0f 	bl	408 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ebea:	4605      	mov	r5, r0
    ebec:	2400      	movs	r4, #0
    ebee:	e006      	b.n	ebfe <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    ebf0:	4620      	mov	r0, r4
    ebf2:	f7f1 fc0f 	bl	414 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ebf6:	f7ff fff0 	bl	ebda <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    ebfa:	1c64      	adds	r4, r4, #1
    ebfc:	b2e4      	uxtb	r4, r4
    ebfe:	42ac      	cmp	r4, r5
    ec00:	d3f6      	bcc.n	ebf0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    ec02:	bd70      	pop	{r4, r5, r6, pc}

0000ec04 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    ec04:	2000      	movs	r0, #0
    ec06:	f7f4 b945 	b.w	2e94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    ec0a:	b510      	push	{r4, lr}
    ec0c:	f7f3 fe3a 	bl	2884 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ec10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec14:	f000 b800 	b.w	ec18 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>

0000ec18 <sym_2VDVUOTV276POQPJRTHRUH2MRDLS4UTGJOVIRQY>:
    ec18:	0a41      	lsrs	r1, r0, #9
    ec1a:	f643 5209 	movw	r2, #15625	; 0x3d09
    ec1e:	4351      	muls	r1, r2
    ec20:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ec24:	fb10 f002 	smulbb	r0, r0, r2
    ec28:	f500 7080 	add.w	r0, r0, #256	; 0x100
    ec2c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    ec30:	4770      	bx	lr

0000ec32 <MPSL_IRQ_RADIO_Handler>:
    ec32:	f7f2 bc49 	b.w	14c8 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    ec36:	2800      	cmp	r0, #0
    ec38:	db09      	blt.n	ec4e <MPSL_IRQ_RADIO_Handler+0x1c>
    ec3a:	f000 021f 	and.w	r2, r0, #31
    ec3e:	2101      	movs	r1, #1
    ec40:	4091      	lsls	r1, r2
    ec42:	0940      	lsrs	r0, r0, #5
    ec44:	0080      	lsls	r0, r0, #2
    ec46:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ec4a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ec4e:	4770      	bx	lr
    ec50:	2800      	cmp	r0, #0
    ec52:	db0d      	blt.n	ec70 <MPSL_IRQ_RADIO_Handler+0x3e>
    ec54:	f000 021f 	and.w	r2, r0, #31
    ec58:	2101      	movs	r1, #1
    ec5a:	4091      	lsls	r1, r2
    ec5c:	0940      	lsrs	r0, r0, #5
    ec5e:	0080      	lsls	r0, r0, #2
    ec60:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ec64:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ec68:	f3bf 8f4f 	dsb	sy
    ec6c:	f3bf 8f6f 	isb	sy
    ec70:	4770      	bx	lr

0000ec72 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    ec72:	b570      	push	{r4, r5, r6, lr}
    ec74:	4602      	mov	r2, r0
    ec76:	2000      	movs	r0, #0
    ec78:	2900      	cmp	r1, #0
    ec7a:	d01d      	beq.n	ecb8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    ec7c:	fba2 0101 	umull	r0, r1, r2, r1
    ec80:	0a40      	lsrs	r0, r0, #9
    ec82:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    ec86:	0a49      	lsrs	r1, r1, #9
    ec88:	1c40      	adds	r0, r0, #1
    ec8a:	f141 0100 	adc.w	r1, r1, #0
    ec8e:	f240 72a1 	movw	r2, #1953	; 0x7a1
    ec92:	1883      	adds	r3, r0, r2
    ec94:	f141 0100 	adc.w	r1, r1, #0
    ec98:	1c5b      	adds	r3, r3, #1
    ec9a:	f141 0400 	adc.w	r4, r1, #0
    ec9e:	2100      	movs	r1, #0
    eca0:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    eca4:	41a1      	sbcs	r1, r4
    eca6:	d203      	bcs.n	ecb0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    eca8:	216c      	movs	r1, #108	; 0x6c
    ecaa:	206d      	movs	r0, #109	; 0x6d
    ecac:	f7f4 fc8e 	bl	35cc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ecb0:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    ecb4:	fbb0 f0f2 	udiv	r0, r0, r2
    ecb8:	bd70      	pop	{r4, r5, r6, pc}
    ecba:	5840      	ldr	r0, [r0, r1]
    ecbc:	2800      	cmp	r0, #0
    ecbe:	d000      	beq.n	ecc2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    ecc0:	2001      	movs	r0, #1
    ecc2:	4770      	bx	lr
    ecc4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    ecc8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    eccc:	f002 0201 	and.w	r2, r2, #1
    ecd0:	03c0      	lsls	r0, r0, #15
    ecd2:	d503      	bpl.n	ecdc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ecd4:	428a      	cmp	r2, r1
    ecd6:	d101      	bne.n	ecdc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    ecd8:	2001      	movs	r0, #1
    ecda:	4770      	bx	lr
    ecdc:	2000      	movs	r0, #0
    ecde:	4770      	bx	lr

0000ece0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    ece0:	b510      	push	{r4, lr}
    ece2:	2101      	movs	r1, #1
    ece4:	0788      	lsls	r0, r1, #30
    ece6:	f7f4 fc2f 	bl	3548 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    ecea:	2800      	cmp	r0, #0
    ecec:	d000      	beq.n	ecf0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    ecee:	2001      	movs	r0, #1
    ecf0:	bd10      	pop	{r4, pc}

0000ecf2 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    ecf2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ecf6:	2101      	movs	r1, #1
    ecf8:	6001      	str	r1, [r0, #0]
    ecfa:	4770      	bx	lr

0000ecfc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    ecfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    ed00:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    ed04:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    ed08:	f002 0203 	and.w	r2, r2, #3
    ed0c:	03c9      	lsls	r1, r1, #15
    ed0e:	d503      	bpl.n	ed18 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    ed10:	4282      	cmp	r2, r0
    ed12:	d101      	bne.n	ed18 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    ed14:	2001      	movs	r0, #1
    ed16:	4770      	bx	lr
    ed18:	2000      	movs	r0, #0
    ed1a:	4770      	bx	lr

0000ed1c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    ed1c:	b510      	push	{r4, lr}
    ed1e:	2100      	movs	r1, #0
    ed20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ed24:	f7f4 fc10 	bl	3548 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    ed28:	2800      	cmp	r0, #0
    ed2a:	d000      	beq.n	ed2e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    ed2c:	2001      	movs	r0, #1
    ed2e:	bd10      	pop	{r4, pc}
    ed30:	2800      	cmp	r0, #0
    ed32:	db09      	blt.n	ed48 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    ed34:	f000 021f 	and.w	r2, r0, #31
    ed38:	2101      	movs	r1, #1
    ed3a:	4091      	lsls	r1, r2
    ed3c:	0940      	lsrs	r0, r0, #5
    ed3e:	0080      	lsls	r0, r0, #2
    ed40:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ed44:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ed48:	4770      	bx	lr
    ed4a:	2800      	cmp	r0, #0
    ed4c:	db0d      	blt.n	ed6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    ed4e:	f000 021f 	and.w	r2, r0, #31
    ed52:	2101      	movs	r1, #1
    ed54:	4091      	lsls	r1, r2
    ed56:	0940      	lsrs	r0, r0, #5
    ed58:	0080      	lsls	r0, r0, #2
    ed5a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ed5e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ed62:	f3bf 8f4f 	dsb	sy
    ed66:	f3bf 8f6f 	isb	sy
    ed6a:	4770      	bx	lr
    ed6c:	00021000 	.word	0x00021000
    ed70:	643300fa 	.word	0x643300fa
    ed74:	efddbd95 	.word	0xefddbd95
    ed78:	4fc80257 	.word	0x4fc80257
    ed7c:	5560481f 	.word	0x5560481f
    ed80:	8787e478 	.word	0x8787e478
    ed84:	dcb7      	.short	0xdcb7
    ed86:	2800      	cmp	r0, #0
    ed88:	db09      	blt.n	ed9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x82>
    ed8a:	f000 021f 	and.w	r2, r0, #31
    ed8e:	2101      	movs	r1, #1
    ed90:	4091      	lsls	r1, r2
    ed92:	0940      	lsrs	r0, r0, #5
    ed94:	0080      	lsls	r0, r0, #2
    ed96:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ed9a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ed9e:	4770      	bx	lr

0000eda0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    eda0:	f3ef 8110 	mrs	r1, PRIMASK
    eda4:	b672      	cpsid	i
    eda6:	7802      	ldrb	r2, [r0, #0]
    eda8:	2a01      	cmp	r2, #1
    edaa:	d001      	beq.n	edb0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    edac:	2201      	movs	r2, #1
    edae:	e000      	b.n	edb2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    edb0:	2200      	movs	r2, #0
    edb2:	2301      	movs	r3, #1
    edb4:	7003      	strb	r3, [r0, #0]
    edb6:	b901      	cbnz	r1, edba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    edb8:	b662      	cpsie	i
    edba:	b10a      	cbz	r2, edc0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    edbc:	2000      	movs	r0, #0
    edbe:	4770      	bx	lr
    edc0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    edc4:	4770      	bx	lr

0000edc6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    edc6:	2100      	movs	r1, #0
    edc8:	7001      	strb	r1, [r0, #0]
    edca:	4608      	mov	r0, r1
    edcc:	4770      	bx	lr

0000edce <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    edce:	f3ef 8110 	mrs	r1, PRIMASK
    edd2:	b672      	cpsid	i
    edd4:	2200      	movs	r2, #0
    edd6:	7002      	strb	r2, [r0, #0]
    edd8:	b901      	cbnz	r1, eddc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    edda:	b662      	cpsie	i
    eddc:	2000      	movs	r0, #0
    edde:	4770      	bx	lr

0000ede0 <mpsl_low_priority_process>:
    ede0:	f7f4 bce0 	b.w	37a4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000ede4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    ede4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ede8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    edec:	280f      	cmp	r0, #15
    edee:	d001      	beq.n	edf4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    edf0:	2000      	movs	r0, #0
    edf2:	4770      	bx	lr
    edf4:	2001      	movs	r0, #1
    edf6:	4770      	bx	lr

0000edf8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    edf8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    edfc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee00:	280a      	cmp	r0, #10
    ee02:	d001      	beq.n	ee08 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    ee04:	2000      	movs	r0, #0
    ee06:	4770      	bx	lr
    ee08:	2001      	movs	r0, #1
    ee0a:	4770      	bx	lr

0000ee0c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    ee0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee10:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee14:	280e      	cmp	r0, #14
    ee16:	d001      	beq.n	ee1c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    ee18:	2000      	movs	r0, #0
    ee1a:	4770      	bx	lr
    ee1c:	2001      	movs	r0, #1
    ee1e:	4770      	bx	lr

0000ee20 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    ee20:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee24:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee28:	2810      	cmp	r0, #16
    ee2a:	d001      	beq.n	ee30 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    ee2c:	2000      	movs	r0, #0
    ee2e:	4770      	bx	lr
    ee30:	2001      	movs	r0, #1
    ee32:	4770      	bx	lr

0000ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    ee34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee38:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee3c:	2806      	cmp	r0, #6
    ee3e:	d003      	beq.n	ee48 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ee40:	1c40      	adds	r0, r0, #1
    ee42:	d001      	beq.n	ee48 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ee44:	2000      	movs	r0, #0
    ee46:	4770      	bx	lr
    ee48:	2001      	movs	r0, #1
    ee4a:	4770      	bx	lr

0000ee4c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    ee4c:	b500      	push	{lr}
    ee4e:	f7ff fff1 	bl	ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ee52:	b148      	cbz	r0, ee68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ee54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee58:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ee5c:	2806      	cmp	r0, #6
    ee5e:	d303      	bcc.n	ee68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ee60:	1c40      	adds	r0, r0, #1
    ee62:	d001      	beq.n	ee68 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ee64:	2001      	movs	r0, #1
    ee66:	bd00      	pop	{pc}
    ee68:	2000      	movs	r0, #0
    ee6a:	bd00      	pop	{pc}

0000ee6c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    ee6c:	b500      	push	{lr}
    ee6e:	f7ff ffe1 	bl	ee34 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ee72:	b138      	cbz	r0, ee84 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    ee74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee78:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ee7c:	2806      	cmp	r0, #6
    ee7e:	d303      	bcc.n	ee88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    ee80:	1c40      	adds	r0, r0, #1
    ee82:	d001      	beq.n	ee88 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    ee84:	2000      	movs	r0, #0
    ee86:	bd00      	pop	{pc}
    ee88:	2001      	movs	r0, #1
    ee8a:	bd00      	pop	{pc}

0000ee8c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    ee8c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ee90:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ee94:	280d      	cmp	r0, #13
    ee96:	d001      	beq.n	ee9c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    ee98:	2000      	movs	r0, #0
    ee9a:	4770      	bx	lr
    ee9c:	2001      	movs	r0, #1
    ee9e:	4770      	bx	lr

0000eea0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    eea0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    eea4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    eea8:	2808      	cmp	r0, #8
    eeaa:	d001      	beq.n	eeb0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    eeac:	2000      	movs	r0, #0
    eeae:	4770      	bx	lr
    eeb0:	2001      	movs	r0, #1
    eeb2:	4770      	bx	lr

0000eeb4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    eeb4:	b510      	push	{r4, lr}
    eeb6:	b91a      	cbnz	r2, eec0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0xc>
    eeb8:	2000      	movs	r0, #0
    eeba:	bd10      	pop	{r4, pc}
    eebc:	1c40      	adds	r0, r0, #1
    eebe:	1c49      	adds	r1, r1, #1
    eec0:	1e52      	subs	r2, r2, #1
    eec2:	d003      	beq.n	eecc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x18>
    eec4:	7803      	ldrb	r3, [r0, #0]
    eec6:	780c      	ldrb	r4, [r1, #0]
    eec8:	42a3      	cmp	r3, r4
    eeca:	d0f7      	beq.n	eebc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    eecc:	7800      	ldrb	r0, [r0, #0]
    eece:	7809      	ldrb	r1, [r1, #0]
    eed0:	1a40      	subs	r0, r0, r1
    eed2:	bd10      	pop	{r4, pc}

0000eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    eed4:	b530      	push	{r4, r5, lr}
    eed6:	4603      	mov	r3, r0
    eed8:	b2cc      	uxtb	r4, r1
    eeda:	e004      	b.n	eee6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12>
    eedc:	2a00      	cmp	r2, #0
    eede:	d014      	beq.n	ef0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x36>
    eee0:	f803 4b01 	strb.w	r4, [r3], #1
    eee4:	1e52      	subs	r2, r2, #1
    eee6:	079d      	lsls	r5, r3, #30
    eee8:	d1f8      	bne.n	eedc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x8>
    eeea:	b2c9      	uxtb	r1, r1
    eeec:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    eef0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    eef4:	e001      	b.n	eefa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x26>
    eef6:	c302      	stmia	r3!, {r1}
    eef8:	1f12      	subs	r2, r2, #4
    eefa:	2a04      	cmp	r2, #4
    eefc:	d2fb      	bcs.n	eef6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    eefe:	e002      	b.n	ef06 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x32>
    ef00:	f803 4b01 	strb.w	r4, [r3], #1
    ef04:	1e52      	subs	r2, r2, #1
    ef06:	2a00      	cmp	r2, #0
    ef08:	d1fa      	bne.n	ef00 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x2c>
    ef0a:	bd30      	pop	{r4, r5, pc}
    ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef0e:	4604      	mov	r4, r0
    ef10:	f100 0003 	add.w	r0, r0, #3
    ef14:	f020 0003 	bic.w	r0, r0, #3
    ef18:	9000      	str	r0, [sp, #0]
    ef1a:	460e      	mov	r6, r1
    ef1c:	780b      	ldrb	r3, [r1, #0]
    ef1e:	7849      	ldrb	r1, [r1, #1]
    ef20:	0015      	movs	r5, r2
    ef22:	d000      	beq.n	ef26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x52>
    ef24:	2000      	movs	r0, #0
    ef26:	2200      	movs	r2, #0
    ef28:	f7f5 f810 	bl	3f4c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    ef2c:	9900      	ldr	r1, [sp, #0]
    ef2e:	462a      	mov	r2, r5
    ef30:	4408      	add	r0, r1
    ef32:	9000      	str	r0, [sp, #0]
    ef34:	4631      	mov	r1, r6
    ef36:	4668      	mov	r0, sp
    ef38:	f000 f807 	bl	ef4a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x76>
    ef3c:	9800      	ldr	r0, [sp, #0]
    ef3e:	1dc0      	adds	r0, r0, #7
    ef40:	f020 0007 	bic.w	r0, r0, #7
    ef44:	9000      	str	r0, [sp, #0]
    ef46:	1b00      	subs	r0, r0, r4
    ef48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef4e:	4606      	mov	r6, r0
    ef50:	460c      	mov	r4, r1
    ef52:	7808      	ldrb	r0, [r1, #0]
    ef54:	7849      	ldrb	r1, [r1, #1]
    ef56:	2700      	movs	r7, #0
    ef58:	4408      	add	r0, r1
    ef5a:	4691      	mov	r9, r2
    ef5c:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    ef60:	463d      	mov	r5, r7
    ef62:	e00e      	b.n	ef82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xae>
    ef64:	7963      	ldrb	r3, [r4, #5]
    ef66:	2b03      	cmp	r3, #3
    ef68:	d200      	bcs.n	ef6c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x98>
    ef6a:	2303      	movs	r3, #3
    ef6c:	7922      	ldrb	r2, [r4, #4]
    ef6e:	2a03      	cmp	r2, #3
    ef70:	d200      	bcs.n	ef74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa0>
    ef72:	2203      	movs	r2, #3
    ef74:	78e1      	ldrb	r1, [r4, #3]
    ef76:	78a0      	ldrb	r0, [r4, #2]
    ef78:	f001 f8b6 	bl	100e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    ef7c:	1c6d      	adds	r5, r5, #1
    ef7e:	4407      	add	r7, r0
    ef80:	b2ed      	uxtb	r5, r5
    ef82:	4545      	cmp	r5, r8
    ef84:	d3ee      	bcc.n	ef64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x90>
    ef86:	6830      	ldr	r0, [r6, #0]
    ef88:	1cc0      	adds	r0, r0, #3
    ef8a:	f020 0003 	bic.w	r0, r0, #3
    ef8e:	6030      	str	r0, [r6, #0]
    ef90:	f1b9 0f00 	cmp.w	r9, #0
    ef94:	d000      	beq.n	ef98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xc4>
    ef96:	2000      	movs	r0, #0
    ef98:	463a      	mov	r2, r7
    ef9a:	4641      	mov	r1, r8
    ef9c:	f7f5 f984 	bl	42a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    efa0:	6831      	ldr	r1, [r6, #0]
    efa2:	4408      	add	r0, r1
    efa4:	6030      	str	r0, [r6, #0]
    efa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000efaa <sdc_RNG_IRQHandler>:
    efaa:	f7f5 bd93 	b.w	4ad4 <sym_44PAL7VRDLM7JAHHE46SH64ZILJVRWB7LYZHG4I>

0000efae <sdc_support_adv>:
    efae:	b510      	push	{r4, lr}
    efb0:	f7fe f8f8 	bl	d1a4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    efb4:	2000      	movs	r0, #0
    efb6:	bd10      	pop	{r4, pc}

0000efb8 <sdc_support_dle>:
    efb8:	b510      	push	{r4, lr}
    efba:	f7fd fe09 	bl	cbd0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    efbe:	2000      	movs	r0, #0
    efc0:	bd10      	pop	{r4, pc}

0000efc2 <sdc_support_le_2m_phy>:
    efc2:	b510      	push	{r4, lr}
    efc4:	f002 fe4e 	bl	11c64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    efc8:	2000      	movs	r0, #0
    efca:	bd10      	pop	{r4, pc}

0000efcc <sdc_support_slave>:
    efcc:	b510      	push	{r4, lr}
    efce:	f7fe f8fb 	bl	d1c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    efd2:	2000      	movs	r0, #0
    efd4:	bd10      	pop	{r4, pc}

0000efd6 <sdc_soc_ecb_block_encrypt>:
    efd6:	b530      	push	{r4, r5, lr}
    efd8:	460d      	mov	r5, r1
    efda:	b08d      	sub	sp, #52	; 0x34
    efdc:	4614      	mov	r4, r2
    efde:	4601      	mov	r1, r0
    efe0:	2210      	movs	r2, #16
    efe2:	4668      	mov	r0, sp
    efe4:	f7f4 fc44 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    efe8:	2210      	movs	r2, #16
    efea:	4629      	mov	r1, r5
    efec:	a804      	add	r0, sp, #16
    efee:	f7f4 fc3f 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eff2:	4668      	mov	r0, sp
    eff4:	f7f5 fa74 	bl	44e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    eff8:	b118      	cbz	r0, f002 <sdc_soc_ecb_block_encrypt+0x2c>
    effa:	f06f 0015 	mvn.w	r0, #21
    effe:	b00d      	add	sp, #52	; 0x34
    f000:	bd30      	pop	{r4, r5, pc}
    f002:	2210      	movs	r2, #16
    f004:	4620      	mov	r0, r4
    f006:	a908      	add	r1, sp, #32
    f008:	f7f4 fc32 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f00c:	2000      	movs	r0, #0
    f00e:	e7f6      	b.n	effe <sdc_soc_ecb_block_encrypt+0x28>

0000f010 <sdc_soc_rand_vector_get>:
    f010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f014:	460c      	mov	r4, r1
    f016:	4605      	mov	r5, r0
    f018:	f001 f8ff 	bl	1021a <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>
    f01c:	4607      	mov	r7, r0
    f01e:	e00c      	b.n	f03a <sdc_soc_rand_vector_get+0x2a>
    f020:	42bc      	cmp	r4, r7
    f022:	d201      	bcs.n	f028 <sdc_soc_rand_vector_get+0x18>
    f024:	4620      	mov	r0, r4
    f026:	e000      	b.n	f02a <sdc_soc_rand_vector_get+0x1a>
    f028:	4638      	mov	r0, r7
    f02a:	b2c6      	uxtb	r6, r0
    f02c:	4631      	mov	r1, r6
    f02e:	4628      	mov	r0, r5
    f030:	f7f5 fe14 	bl	4c5c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
    f034:	1ba0      	subs	r0, r4, r6
    f036:	4435      	add	r5, r6
    f038:	b284      	uxth	r4, r0
    f03a:	2c00      	cmp	r4, #0
    f03c:	d1f0      	bne.n	f020 <sdc_soc_rand_vector_get+0x10>
    f03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f042 <sdc_soc_rand_vector_poll>:
    f042:	b570      	push	{r4, r5, r6, lr}
    f044:	460c      	mov	r4, r1
    f046:	4605      	mov	r5, r0
    f048:	f7f5 fdfa 	bl	4c40 <sym_D6WSZJGHBVSNS7ZN6DCIU7W37KOBRFZ3D7V2IKQ>
    f04c:	42a0      	cmp	r0, r4
    f04e:	d300      	bcc.n	f052 <sdc_soc_rand_vector_poll+0x10>
    f050:	4620      	mov	r0, r4
    f052:	b2c4      	uxtb	r4, r0
    f054:	4621      	mov	r1, r4
    f056:	4628      	mov	r0, r5
    f058:	f7f5 fdf8 	bl	4c4c <sym_5J64OSX6B5PYXNSLHXY64ZK4MCPU4BDFR5B2EQI>
    f05c:	2800      	cmp	r0, #0
    f05e:	d000      	beq.n	f062 <sdc_soc_rand_vector_poll+0x20>
    f060:	4620      	mov	r0, r4
    f062:	bd70      	pop	{r4, r5, r6, pc}

0000f064 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    f064:	2000      	movs	r0, #0
    f066:	4770      	bx	lr

0000f068 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    f068:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f06a:	4604      	mov	r4, r0
    f06c:	1d01      	adds	r1, r0, #4
    f06e:	4668      	mov	r0, sp
    f070:	f7f7 ff36 	bl	6ee0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    f074:	2800      	cmp	r0, #0
    f076:	d004      	beq.n	f082 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    f078:	4669      	mov	r1, sp
    f07a:	4620      	mov	r0, r4
    f07c:	f000 f825 	bl	f0ca <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    f080:	2001      	movs	r0, #1
    f082:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f084 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    f084:	b50e      	push	{r1, r2, r3, lr}
    f086:	4601      	mov	r1, r0
    f088:	4668      	mov	r0, sp
    f08a:	f000 f804 	bl	f096 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    f08e:	4668      	mov	r0, sp
    f090:	f7f7 ffda 	bl	7048 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    f094:	bd0e      	pop	{r1, r2, r3, pc}

0000f096 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    f096:	880a      	ldrh	r2, [r1, #0]
    f098:	f3c2 020b 	ubfx	r2, r2, #0, #12
    f09c:	8002      	strh	r2, [r0, #0]
    f09e:	884a      	ldrh	r2, [r1, #2]
    f0a0:	8042      	strh	r2, [r0, #2]
    f0a2:	784a      	ldrb	r2, [r1, #1]
    f0a4:	0993      	lsrs	r3, r2, #6
    f0a6:	2200      	movs	r2, #0
    f0a8:	7142      	strb	r2, [r0, #5]
    f0aa:	784b      	ldrb	r3, [r1, #1]
    f0ac:	f3c3 1301 	ubfx	r3, r3, #4, #2
    f0b0:	b11b      	cbz	r3, f0ba <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    f0b2:	2b01      	cmp	r3, #1
    f0b4:	d005      	beq.n	f0c2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    f0b6:	2b02      	cmp	r3, #2
    f0b8:	d005      	beq.n	f0c6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    f0ba:	7102      	strb	r2, [r0, #4]
    f0bc:	1d09      	adds	r1, r1, #4
    f0be:	6081      	str	r1, [r0, #8]
    f0c0:	4770      	bx	lr
    f0c2:	2201      	movs	r2, #1
    f0c4:	e7f9      	b.n	f0ba <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    f0c6:	2202      	movs	r2, #2
    f0c8:	e7f7      	b.n	f0ba <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000f0ca <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    f0ca:	b510      	push	{r4, lr}
    f0cc:	460c      	mov	r4, r1
    f0ce:	7809      	ldrb	r1, [r1, #0]
    f0d0:	7001      	strb	r1, [r0, #0]
    f0d2:	7841      	ldrb	r1, [r0, #1]
    f0d4:	f021 010f 	bic.w	r1, r1, #15
    f0d8:	7041      	strb	r1, [r0, #1]
    f0da:	8822      	ldrh	r2, [r4, #0]
    f0dc:	f3c2 2203 	ubfx	r2, r2, #8, #4
    f0e0:	4311      	orrs	r1, r2
    f0e2:	7041      	strb	r1, [r0, #1]
    f0e4:	78a2      	ldrb	r2, [r4, #2]
    f0e6:	7082      	strb	r2, [r0, #2]
    f0e8:	8862      	ldrh	r2, [r4, #2]
    f0ea:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    f0ee:	0a12      	lsrs	r2, r2, #8
    f0f0:	70c2      	strb	r2, [r0, #3]
    f0f2:	7041      	strb	r1, [r0, #1]
    f0f4:	7922      	ldrb	r2, [r4, #4]
    f0f6:	f002 0203 	and.w	r2, r2, #3
    f0fa:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    f0fe:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    f102:	7041      	strb	r1, [r0, #1]
    f104:	7962      	ldrb	r2, [r4, #5]
    f106:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    f10a:	7041      	strb	r1, [r0, #1]
    f10c:	68a1      	ldr	r1, [r4, #8]
    f10e:	1d02      	adds	r2, r0, #4
    f110:	4291      	cmp	r1, r2
    f112:	d006      	beq.n	f122 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    f114:	8862      	ldrh	r2, [r4, #2]
    f116:	2afb      	cmp	r2, #251	; 0xfb
    f118:	d300      	bcc.n	f11c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    f11a:	22fb      	movs	r2, #251	; 0xfb
    f11c:	1d00      	adds	r0, r0, #4
    f11e:	f7f4 fba7 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f122:	78a0      	ldrb	r0, [r4, #2]
    f124:	1d00      	adds	r0, r0, #4
    f126:	b2c0      	uxtb	r0, r0
    f128:	bd10      	pop	{r4, pc}

0000f12a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    f12a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f12e:	4604      	mov	r4, r0
    f130:	f891 c000 	ldrb.w	ip, [r1]
    f134:	2000      	movs	r0, #0
    f136:	260c      	movs	r6, #12
    f138:	223e      	movs	r2, #62	; 0x3e
    f13a:	2512      	movs	r5, #18
    f13c:	23ff      	movs	r3, #255	; 0xff
    f13e:	f04f 0b14 	mov.w	fp, #20
    f142:	f04f 0e13 	mov.w	lr, #19
    f146:	f04f 0a05 	mov.w	sl, #5
    f14a:	f104 070d 	add.w	r7, r4, #13
    f14e:	f04f 0911 	mov.w	r9, #17
    f152:	f1bc 0f20 	cmp.w	ip, #32
    f156:	d272      	bcs.n	f23e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    f158:	e8df f00c 	tbb	[pc, ip]
    f15c:	29271071 	.word	0x29271071
    f160:	a46dfc2e 	.word	0xa46dfc2e
    f164:	fbdac0ae 	.word	0xfbdac0ae
    f168:	f7f8f9fa 	.word	0xf7f8f9fa
    f16c:	507171f6 	.word	0x507171f6
    f170:	f3f4f572 	.word	0xf3f4f572
    f174:	eff0f1f2 	.word	0xeff0f1f2
    f178:	ec71edee 	.word	0xec71edee
    f17c:	7026      	strb	r6, [r4, #0]
    f17e:	7908      	ldrb	r0, [r1, #4]
    f180:	70a0      	strb	r0, [r4, #2]
    f182:	7948      	ldrb	r0, [r1, #5]
    f184:	70e0      	strb	r0, [r4, #3]
    f186:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    f18a:	0a00      	lsrs	r0, r0, #8
    f18c:	7120      	strb	r0, [r4, #4]
    f18e:	79c8      	ldrb	r0, [r1, #7]
    f190:	7160      	strb	r0, [r4, #5]
    f192:	7a08      	ldrb	r0, [r1, #8]
    f194:	71a0      	strb	r0, [r4, #6]
    f196:	8908      	ldrh	r0, [r1, #8]
    f198:	0a00      	lsrs	r0, r0, #8
    f19a:	71e0      	strb	r0, [r4, #7]
    f19c:	7a88      	ldrb	r0, [r1, #10]
    f19e:	7220      	strb	r0, [r4, #8]
    f1a0:	8948      	ldrh	r0, [r1, #10]
    f1a2:	0a00      	lsrs	r0, r0, #8
    f1a4:	7260      	strb	r0, [r4, #9]
    f1a6:	2008      	movs	r0, #8
    f1a8:	e153      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f1aa:	2010      	movs	r0, #16
    f1ac:	e000      	b.n	f1b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    f1ae:	201a      	movs	r0, #26
    f1b0:	7020      	strb	r0, [r4, #0]
    f1b2:	7908      	ldrb	r0, [r1, #4]
    f1b4:	70a0      	strb	r0, [r4, #2]
    f1b6:	e154      	b.n	f462 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    f1b8:	7022      	strb	r2, [r4, #0]
    f1ba:	2002      	movs	r0, #2
    f1bc:	70a0      	strb	r0, [r4, #2]
    f1be:	7908      	ldrb	r0, [r1, #4]
    f1c0:	70e0      	strb	r0, [r4, #3]
    f1c2:	7b88      	ldrb	r0, [r1, #14]
    f1c4:	7120      	strb	r0, [r4, #4]
    f1c6:	7948      	ldrb	r0, [r1, #5]
    f1c8:	7160      	strb	r0, [r4, #5]
    f1ca:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f1ce:	f8c4 0006 	str.w	r0, [r4, #6]
    f1d2:	8948      	ldrh	r0, [r1, #10]
    f1d4:	8160      	strh	r0, [r4, #10]
    f1d6:	7b08      	ldrb	r0, [r1, #12]
    f1d8:	7320      	strb	r0, [r4, #12]
    f1da:	7b0e      	ldrb	r6, [r1, #12]
    f1dc:	1d0d      	adds	r5, r1, #4
    f1de:	2e1f      	cmp	r6, #31
    f1e0:	d300      	bcc.n	f1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    f1e2:	261f      	movs	r6, #31
    f1e4:	4638      	mov	r0, r7
    f1e6:	4632      	mov	r2, r6
    f1e8:	f105 010b 	add.w	r1, r5, #11
    f1ec:	f7f4 fb40 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f1f0:	360d      	adds	r6, #13
    f1f2:	7a69      	ldrb	r1, [r5, #9]
    f1f4:	55a1      	strb	r1, [r4, r6]
    f1f6:	1e76      	subs	r6, r6, #1
    f1f8:	b2f0      	uxtb	r0, r6
    f1fa:	e128      	b.n	f44e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f1fc:	7022      	strb	r2, [r4, #0]
    f1fe:	200b      	movs	r0, #11
    f200:	70a0      	strb	r0, [r4, #2]
    f202:	7908      	ldrb	r0, [r1, #4]
    f204:	70e0      	strb	r0, [r4, #3]
    f206:	7948      	ldrb	r0, [r1, #5]
    f208:	7120      	strb	r0, [r4, #4]
    f20a:	7988      	ldrb	r0, [r1, #6]
    f20c:	7160      	strb	r0, [r4, #5]
    f20e:	f8d1 0007 	ldr.w	r0, [r1, #7]
    f212:	f8c4 0006 	str.w	r0, [r4, #6]
    f216:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    f21a:	8160      	strh	r0, [r4, #10]
    f21c:	7b48      	ldrb	r0, [r1, #13]
    f21e:	7320      	strb	r0, [r4, #12]
    f220:	f8d1 000e 	ldr.w	r0, [r1, #14]
    f224:	f8c4 000d 	str.w	r0, [r4, #13]
    f228:	8a48      	ldrh	r0, [r1, #18]
    f22a:	f8a4 0011 	strh.w	r0, [r4, #17]
    f22e:	7d08      	ldrb	r0, [r1, #20]
    f230:	74e0      	strb	r0, [r4, #19]
    f232:	4628      	mov	r0, r5
    f234:	e10d      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f236:	4620      	mov	r0, r4
    f238:	f000 f98d 	bl	f556 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    f23c:	e107      	b.n	f44e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f23e:	e10b      	b.n	f458 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    f240:	7022      	strb	r2, [r4, #0]
    f242:	200a      	movs	r0, #10
    f244:	70a0      	strb	r0, [r4, #2]
    f246:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    f24a:	70e0      	strb	r0, [r4, #3]
    f24c:	7888      	ldrb	r0, [r1, #2]
    f24e:	7120      	strb	r0, [r4, #4]
    f250:	8848      	ldrh	r0, [r1, #2]
    f252:	0a00      	lsrs	r0, r0, #8
    f254:	7160      	strb	r0, [r4, #5]
    f256:	7908      	ldrb	r0, [r1, #4]
    f258:	71a0      	strb	r0, [r4, #6]
    f25a:	7948      	ldrb	r0, [r1, #5]
    f25c:	71e0      	strb	r0, [r4, #7]
    f25e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f262:	60a0      	str	r0, [r4, #8]
    f264:	8948      	ldrh	r0, [r1, #10]
    f266:	81a0      	strh	r0, [r4, #12]
    f268:	68c8      	ldr	r0, [r1, #12]
    f26a:	f8c4 000e 	str.w	r0, [r4, #14]
    f26e:	8a08      	ldrh	r0, [r1, #16]
    f270:	8260      	strh	r0, [r4, #18]
    f272:	f8d1 0012 	ldr.w	r0, [r1, #18]
    f276:	6160      	str	r0, [r4, #20]
    f278:	8ac8      	ldrh	r0, [r1, #22]
    f27a:	8320      	strh	r0, [r4, #24]
    f27c:	7e08      	ldrb	r0, [r1, #24]
    f27e:	76a0      	strb	r0, [r4, #26]
    f280:	8b08      	ldrh	r0, [r1, #24]
    f282:	0a00      	lsrs	r0, r0, #8
    f284:	76e0      	strb	r0, [r4, #27]
    f286:	7e88      	ldrb	r0, [r1, #26]
    f288:	7720      	strb	r0, [r4, #28]
    f28a:	8b48      	ldrh	r0, [r1, #26]
    f28c:	0a00      	lsrs	r0, r0, #8
    f28e:	7760      	strb	r0, [r4, #29]
    f290:	7f08      	ldrb	r0, [r1, #28]
    f292:	77a0      	strb	r0, [r4, #30]
    f294:	8b88      	ldrh	r0, [r1, #28]
    f296:	0a00      	lsrs	r0, r0, #8
    f298:	77e0      	strb	r0, [r4, #31]
    f29a:	7f88      	ldrb	r0, [r1, #30]
    f29c:	f884 0020 	strb.w	r0, [r4, #32]
    f2a0:	201f      	movs	r0, #31
    f2a2:	e0d6      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f2a4:	7022      	strb	r2, [r4, #0]
    f2a6:	f884 b002 	strb.w	fp, [r4, #2]
    f2aa:	7908      	ldrb	r0, [r1, #4]
    f2ac:	70e0      	strb	r0, [r4, #3]
    f2ae:	8888      	ldrh	r0, [r1, #4]
    f2b0:	0a00      	lsrs	r0, r0, #8
    f2b2:	7120      	strb	r0, [r4, #4]
    f2b4:	7988      	ldrb	r0, [r1, #6]
    f2b6:	e0ed      	b.n	f494 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f2b8:	7022      	strb	r2, [r4, #0]
    f2ba:	2004      	movs	r0, #4
    f2bc:	70a0      	strb	r0, [r4, #2]
    f2be:	7908      	ldrb	r0, [r1, #4]
    f2c0:	70e0      	strb	r0, [r4, #3]
    f2c2:	7988      	ldrb	r0, [r1, #6]
    f2c4:	7120      	strb	r0, [r4, #4]
    f2c6:	88c8      	ldrh	r0, [r1, #6]
    f2c8:	0a00      	lsrs	r0, r0, #8
    f2ca:	7160      	strb	r0, [r4, #5]
    f2cc:	6888      	ldr	r0, [r1, #8]
    f2ce:	f8c4 0006 	str.w	r0, [r4, #6]
    f2d2:	68c8      	ldr	r0, [r1, #12]
    f2d4:	f8c4 000a 	str.w	r0, [r4, #10]
    f2d8:	200c      	movs	r0, #12
    f2da:	e0ba      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f2dc:	7022      	strb	r2, [r4, #0]
    f2de:	2003      	movs	r0, #3
    f2e0:	70a0      	strb	r0, [r4, #2]
    f2e2:	7908      	ldrb	r0, [r1, #4]
    f2e4:	70e0      	strb	r0, [r4, #3]
    f2e6:	7988      	ldrb	r0, [r1, #6]
    f2e8:	7120      	strb	r0, [r4, #4]
    f2ea:	88c8      	ldrh	r0, [r1, #6]
    f2ec:	0a00      	lsrs	r0, r0, #8
    f2ee:	7160      	strb	r0, [r4, #5]
    f2f0:	7a08      	ldrb	r0, [r1, #8]
    f2f2:	71a0      	strb	r0, [r4, #6]
    f2f4:	8908      	ldrh	r0, [r1, #8]
    f2f6:	0a00      	lsrs	r0, r0, #8
    f2f8:	71e0      	strb	r0, [r4, #7]
    f2fa:	7a88      	ldrb	r0, [r1, #10]
    f2fc:	7220      	strb	r0, [r4, #8]
    f2fe:	8948      	ldrh	r0, [r1, #10]
    f300:	0a00      	lsrs	r0, r0, #8
    f302:	7260      	strb	r0, [r4, #9]
    f304:	7b08      	ldrb	r0, [r1, #12]
    f306:	72a0      	strb	r0, [r4, #10]
    f308:	8988      	ldrh	r0, [r1, #12]
    f30a:	0a00      	lsrs	r0, r0, #8
    f30c:	72e0      	strb	r0, [r4, #11]
    f30e:	e120      	b.n	f552 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    f310:	7022      	strb	r2, [r4, #0]
    f312:	f884 a002 	strb.w	sl, [r4, #2]
    f316:	7908      	ldrb	r0, [r1, #4]
    f318:	70e0      	strb	r0, [r4, #3]
    f31a:	8888      	ldrh	r0, [r1, #4]
    f31c:	0a00      	lsrs	r0, r0, #8
    f31e:	7120      	strb	r0, [r4, #4]
    f320:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f324:	f8c4 0005 	str.w	r0, [r4, #5]
    f328:	f8d1 000a 	ldr.w	r0, [r1, #10]
    f32c:	f8c4 0009 	str.w	r0, [r4, #9]
    f330:	89c8      	ldrh	r0, [r1, #14]
    f332:	e010      	b.n	f356 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    f334:	e0fa      	b.n	f52c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    f336:	e0ce      	b.n	f4d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    f338:	e0af      	b.n	f49a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    f33a:	e0da      	b.n	f4f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    f33c:	e0e8      	b.n	f510 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    f33e:	e0a1      	b.n	f484 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    f340:	e08c      	b.n	f45c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    f342:	e090      	b.n	f466 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    f344:	e033      	b.n	f3ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    f346:	e02f      	b.n	f3a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    f348:	e043      	b.n	f3d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    f34a:	e03d      	b.n	f3c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    f34c:	e021      	b.n	f392 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    f34e:	e015      	b.n	f37c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    f350:	e008      	b.n	f364 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    f352:	e004      	b.n	f35e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    f354:	e046      	b.n	f3e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    f356:	f8a4 000d 	strh.w	r0, [r4, #13]
    f35a:	200d      	movs	r0, #13
    f35c:	e079      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f35e:	f884 9000 	strb.w	r9, [r4]
    f362:	e038      	b.n	f3d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    f364:	f884 a000 	strb.w	sl, [r4]
    f368:	7908      	ldrb	r0, [r1, #4]
    f36a:	70a0      	strb	r0, [r4, #2]
    f36c:	7948      	ldrb	r0, [r1, #5]
    f36e:	70e0      	strb	r0, [r4, #3]
    f370:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    f374:	0a00      	lsrs	r0, r0, #8
    f376:	7120      	strb	r0, [r4, #4]
    f378:	79c8      	ldrb	r0, [r1, #7]
    f37a:	e08b      	b.n	f494 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f37c:	2008      	movs	r0, #8
    f37e:	7020      	strb	r0, [r4, #0]
    f380:	7908      	ldrb	r0, [r1, #4]
    f382:	70a0      	strb	r0, [r4, #2]
    f384:	7988      	ldrb	r0, [r1, #6]
    f386:	70e0      	strb	r0, [r4, #3]
    f388:	88c8      	ldrh	r0, [r1, #6]
    f38a:	0a00      	lsrs	r0, r0, #8
    f38c:	7120      	strb	r0, [r4, #4]
    f38e:	7a08      	ldrb	r0, [r1, #8]
    f390:	e080      	b.n	f494 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    f392:	2030      	movs	r0, #48	; 0x30
    f394:	7020      	strb	r0, [r4, #0]
    f396:	7908      	ldrb	r0, [r1, #4]
    f398:	70a0      	strb	r0, [r4, #2]
    f39a:	7988      	ldrb	r0, [r1, #6]
    f39c:	70e0      	strb	r0, [r4, #3]
    f39e:	88c8      	ldrh	r0, [r1, #6]
    f3a0:	0a00      	lsrs	r0, r0, #8
    f3a2:	7120      	strb	r0, [r4, #4]
    f3a4:	2003      	movs	r0, #3
    f3a6:	e054      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f3a8:	7022      	strb	r2, [r4, #0]
    f3aa:	2007      	movs	r0, #7
    f3ac:	e077      	b.n	f49e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    f3ae:	7022      	strb	r2, [r4, #0]
    f3b0:	70a6      	strb	r6, [r4, #2]
    f3b2:	7908      	ldrb	r0, [r1, #4]
    f3b4:	70e0      	strb	r0, [r4, #3]
    f3b6:	7988      	ldrb	r0, [r1, #6]
    f3b8:	7120      	strb	r0, [r4, #4]
    f3ba:	88c8      	ldrh	r0, [r1, #6]
    f3bc:	0a00      	lsrs	r0, r0, #8
    f3be:	7160      	strb	r0, [r4, #5]
    f3c0:	7a08      	ldrb	r0, [r1, #8]
    f3c2:	71a0      	strb	r0, [r4, #6]
    f3c4:	7a48      	ldrb	r0, [r1, #9]
    f3c6:	e05a      	b.n	f47e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    f3c8:	4620      	mov	r0, r4
    f3ca:	1d09      	adds	r1, r1, #4
    f3cc:	f7f4 fcd2 	bl	3d74 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
    f3d0:	e03d      	b.n	f44e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    f3d2:	2057      	movs	r0, #87	; 0x57
    f3d4:	7020      	strb	r0, [r4, #0]
    f3d6:	7908      	ldrb	r0, [r1, #4]
    f3d8:	70a0      	strb	r0, [r4, #2]
    f3da:	8888      	ldrh	r0, [r1, #4]
    f3dc:	0a00      	lsrs	r0, r0, #8
    f3de:	70e0      	strb	r0, [r4, #3]
    f3e0:	2002      	movs	r0, #2
    f3e2:	e036      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f3e4:	7022      	strb	r2, [r4, #0]
    f3e6:	220d      	movs	r2, #13
    f3e8:	70a2      	strb	r2, [r4, #2]
    f3ea:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    f3ee:	70e2      	strb	r2, [r4, #3]
    f3f0:	894a      	ldrh	r2, [r1, #10]
    f3f2:	80a2      	strh	r2, [r4, #4]
    f3f4:	784a      	ldrb	r2, [r1, #1]
    f3f6:	71a2      	strb	r2, [r4, #6]
    f3f8:	f8d1 2002 	ldr.w	r2, [r1, #2]
    f3fc:	f8c4 2007 	str.w	r2, [r4, #7]
    f400:	88ca      	ldrh	r2, [r1, #6]
    f402:	f8a4 200b 	strh.w	r2, [r4, #11]
    f406:	7b0a      	ldrb	r2, [r1, #12]
    f408:	4620      	mov	r0, r4
    f40a:	7362      	strb	r2, [r4, #13]
    f40c:	7b4a      	ldrb	r2, [r1, #13]
    f40e:	7382      	strb	r2, [r0, #14]
    f410:	7b8a      	ldrb	r2, [r1, #14]
    f412:	73c2      	strb	r2, [r0, #15]
    f414:	7eca      	ldrb	r2, [r1, #27]
    f416:	7402      	strb	r2, [r0, #16]
    f418:	7a4a      	ldrb	r2, [r1, #9]
    f41a:	7442      	strb	r2, [r0, #17]
    f41c:	8a4a      	ldrh	r2, [r1, #18]
    f41e:	8242      	strh	r2, [r0, #18]
    f420:	7d0a      	ldrb	r2, [r1, #20]
    f422:	7502      	strb	r2, [r0, #20]
    f424:	f8d1 2015 	ldr.w	r2, [r1, #21]
    f428:	f8c0 2015 	str.w	r2, [r0, #21]
    f42c:	f8b1 2019 	ldrh.w	r2, [r1, #25]
    f430:	f8a0 2019 	strh.w	r2, [r0, #25]
    f434:	7a0a      	ldrb	r2, [r1, #8]
    f436:	76c2      	strb	r2, [r0, #27]
    f438:	7a0d      	ldrb	r5, [r1, #8]
    f43a:	2de5      	cmp	r5, #229	; 0xe5
    f43c:	d300      	bcc.n	f440 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    f43e:	25e5      	movs	r5, #229	; 0xe5
    f440:	462a      	mov	r2, r5
    f442:	301c      	adds	r0, #28
    f444:	311d      	adds	r1, #29
    f446:	f7f4 fa13 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f44a:	351a      	adds	r5, #26
    f44c:	b2e8      	uxtb	r0, r5
    f44e:	2800      	cmp	r0, #0
    f450:	d002      	beq.n	f458 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    f452:	7060      	strb	r0, [r4, #1]
    f454:	1c80      	adds	r0, r0, #2
    f456:	b2c0      	uxtb	r0, r0
    f458:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    f45c:	7022      	strb	r2, [r4, #0]
    f45e:	f884 9002 	strb.w	r9, [r4, #2]
    f462:	2001      	movs	r0, #1
    f464:	e7f5      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f466:	7022      	strb	r2, [r4, #0]
    f468:	70a5      	strb	r5, [r4, #2]
    f46a:	7908      	ldrb	r0, [r1, #4]
    f46c:	70e0      	strb	r0, [r4, #3]
    f46e:	7948      	ldrb	r0, [r1, #5]
    f470:	7120      	strb	r0, [r4, #4]
    f472:	7988      	ldrb	r0, [r1, #6]
    f474:	7160      	strb	r0, [r4, #5]
    f476:	88c8      	ldrh	r0, [r1, #6]
    f478:	0a00      	lsrs	r0, r0, #8
    f47a:	71a0      	strb	r0, [r4, #6]
    f47c:	7a08      	ldrb	r0, [r1, #8]
    f47e:	71e0      	strb	r0, [r4, #7]
    f480:	2006      	movs	r0, #6
    f482:	e7e6      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f484:	7023      	strb	r3, [r4, #0]
    f486:	20a1      	movs	r0, #161	; 0xa1
    f488:	70a0      	strb	r0, [r4, #2]
    f48a:	7908      	ldrb	r0, [r1, #4]
    f48c:	70e0      	strb	r0, [r4, #3]
    f48e:	7948      	ldrb	r0, [r1, #5]
    f490:	7120      	strb	r0, [r4, #4]
    f492:	2000      	movs	r0, #0
    f494:	7160      	strb	r0, [r4, #5]
    f496:	2004      	movs	r0, #4
    f498:	e7db      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f49a:	7023      	strb	r3, [r4, #0]
    f49c:	20a2      	movs	r0, #162	; 0xa2
    f49e:	70a0      	strb	r0, [r4, #2]
    f4a0:	7908      	ldrb	r0, [r1, #4]
    f4a2:	70e0      	strb	r0, [r4, #3]
    f4a4:	8888      	ldrh	r0, [r1, #4]
    f4a6:	0a00      	lsrs	r0, r0, #8
    f4a8:	7120      	strb	r0, [r4, #4]
    f4aa:	7988      	ldrb	r0, [r1, #6]
    f4ac:	7160      	strb	r0, [r4, #5]
    f4ae:	88c8      	ldrh	r0, [r1, #6]
    f4b0:	0a00      	lsrs	r0, r0, #8
    f4b2:	71a0      	strb	r0, [r4, #6]
    f4b4:	7a08      	ldrb	r0, [r1, #8]
    f4b6:	71e0      	strb	r0, [r4, #7]
    f4b8:	8908      	ldrh	r0, [r1, #8]
    f4ba:	0a00      	lsrs	r0, r0, #8
    f4bc:	7220      	strb	r0, [r4, #8]
    f4be:	7a88      	ldrb	r0, [r1, #10]
    f4c0:	7260      	strb	r0, [r4, #9]
    f4c2:	8948      	ldrh	r0, [r1, #10]
    f4c4:	0a00      	lsrs	r0, r0, #8
    f4c6:	72a0      	strb	r0, [r4, #10]
    f4c8:	7b08      	ldrb	r0, [r1, #12]
    f4ca:	72e0      	strb	r0, [r4, #11]
    f4cc:	8988      	ldrh	r0, [r1, #12]
    f4ce:	0a00      	lsrs	r0, r0, #8
    f4d0:	7320      	strb	r0, [r4, #12]
    f4d2:	200b      	movs	r0, #11
    f4d4:	e7bd      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f4d6:	7023      	strb	r3, [r4, #0]
    f4d8:	20a3      	movs	r0, #163	; 0xa3
    f4da:	70a0      	strb	r0, [r4, #2]
    f4dc:	7908      	ldrb	r0, [r1, #4]
    f4de:	70e0      	strb	r0, [r4, #3]
    f4e0:	8888      	ldrh	r0, [r1, #4]
    f4e2:	0a00      	lsrs	r0, r0, #8
    f4e4:	7120      	strb	r0, [r4, #4]
    f4e6:	7988      	ldrb	r0, [r1, #6]
    f4e8:	7160      	strb	r0, [r4, #5]
    f4ea:	79c8      	ldrb	r0, [r1, #7]
    f4ec:	71a0      	strb	r0, [r4, #6]
    f4ee:	2005      	movs	r0, #5
    f4f0:	e7af      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f4f2:	7022      	strb	r2, [r4, #0]
    f4f4:	f884 e002 	strb.w	lr, [r4, #2]
    f4f8:	7908      	ldrb	r0, [r1, #4]
    f4fa:	70e0      	strb	r0, [r4, #3]
    f4fc:	7948      	ldrb	r0, [r1, #5]
    f4fe:	7120      	strb	r0, [r4, #4]
    f500:	f8d1 0006 	ldr.w	r0, [r1, #6]
    f504:	f8c4 0005 	str.w	r0, [r4, #5]
    f508:	8948      	ldrh	r0, [r1, #10]
    f50a:	f8a4 0009 	strh.w	r0, [r4, #9]
    f50e:	e020      	b.n	f552 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    f510:	7023      	strb	r3, [r4, #0]
    f512:	20a4      	movs	r0, #164	; 0xa4
    f514:	70a0      	strb	r0, [r4, #2]
    f516:	7908      	ldrb	r0, [r1, #4]
    f518:	70e0      	strb	r0, [r4, #3]
    f51a:	8888      	ldrh	r0, [r1, #4]
    f51c:	0a00      	lsrs	r0, r0, #8
    f51e:	7120      	strb	r0, [r4, #4]
    f520:	7988      	ldrb	r0, [r1, #6]
    f522:	7160      	strb	r0, [r4, #5]
    f524:	79c8      	ldrb	r0, [r1, #7]
    f526:	71a0      	strb	r0, [r4, #6]
    f528:	2007      	movs	r0, #7
    f52a:	e792      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    f52c:	7023      	strb	r3, [r4, #0]
    f52e:	2080      	movs	r0, #128	; 0x80
    f530:	70a0      	strb	r0, [r4, #2]
    f532:	888a      	ldrh	r2, [r1, #4]
    f534:	f8a4 2003 	strh.w	r2, [r4, #3]
    f538:	88ca      	ldrh	r2, [r1, #6]
    f53a:	f8a4 2005 	strh.w	r2, [r4, #5]
    f53e:	7a0a      	ldrb	r2, [r1, #8]
    f540:	71e2      	strb	r2, [r4, #7]
    f542:	7a4a      	ldrb	r2, [r1, #9]
    f544:	8122      	strh	r2, [r4, #8]
    f546:	7a8a      	ldrb	r2, [r1, #10]
    f548:	72a2      	strb	r2, [r4, #10]
    f54a:	7ac9      	ldrb	r1, [r1, #11]
    f54c:	f001 0101 	and.w	r1, r1, #1
    f550:	72e1      	strb	r1, [r4, #11]
    f552:	200a      	movs	r0, #10
    f554:	e77d      	b.n	f452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>

0000f556 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    f556:	223e      	movs	r2, #62	; 0x3e
    f558:	7002      	strb	r2, [r0, #0]
    f55a:	2201      	movs	r2, #1
    f55c:	7082      	strb	r2, [r0, #2]
    f55e:	790a      	ldrb	r2, [r1, #4]
    f560:	70c2      	strb	r2, [r0, #3]
    f562:	798a      	ldrb	r2, [r1, #6]
    f564:	7102      	strb	r2, [r0, #4]
    f566:	88ca      	ldrh	r2, [r1, #6]
    f568:	0a12      	lsrs	r2, r2, #8
    f56a:	7142      	strb	r2, [r0, #5]
    f56c:	7a0a      	ldrb	r2, [r1, #8]
    f56e:	7182      	strb	r2, [r0, #6]
    f570:	7a4a      	ldrb	r2, [r1, #9]
    f572:	71c2      	strb	r2, [r0, #7]
    f574:	f8d1 200a 	ldr.w	r2, [r1, #10]
    f578:	6082      	str	r2, [r0, #8]
    f57a:	89ca      	ldrh	r2, [r1, #14]
    f57c:	8182      	strh	r2, [r0, #12]
    f57e:	7c0a      	ldrb	r2, [r1, #16]
    f580:	7382      	strb	r2, [r0, #14]
    f582:	8a0a      	ldrh	r2, [r1, #16]
    f584:	0a12      	lsrs	r2, r2, #8
    f586:	73c2      	strb	r2, [r0, #15]
    f588:	7c8a      	ldrb	r2, [r1, #18]
    f58a:	7402      	strb	r2, [r0, #16]
    f58c:	8a4a      	ldrh	r2, [r1, #18]
    f58e:	0a12      	lsrs	r2, r2, #8
    f590:	7442      	strb	r2, [r0, #17]
    f592:	7d0a      	ldrb	r2, [r1, #20]
    f594:	7482      	strb	r2, [r0, #18]
    f596:	8a8a      	ldrh	r2, [r1, #20]
    f598:	0a12      	lsrs	r2, r2, #8
    f59a:	74c2      	strb	r2, [r0, #19]
    f59c:	7d89      	ldrb	r1, [r1, #22]
    f59e:	7501      	strb	r1, [r0, #20]
    f5a0:	2013      	movs	r0, #19
    f5a2:	4770      	bx	lr

0000f5a4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    f5a4:	223e      	movs	r2, #62	; 0x3e
    f5a6:	7002      	strb	r2, [r0, #0]
    f5a8:	2201      	movs	r2, #1
    f5aa:	7082      	strb	r2, [r0, #2]
    f5ac:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    f5b0:	70c2      	strb	r2, [r0, #3]
    f5b2:	788a      	ldrb	r2, [r1, #2]
    f5b4:	7102      	strb	r2, [r0, #4]
    f5b6:	884a      	ldrh	r2, [r1, #2]
    f5b8:	0a12      	lsrs	r2, r2, #8
    f5ba:	7142      	strb	r2, [r0, #5]
    f5bc:	790a      	ldrb	r2, [r1, #4]
    f5be:	7182      	strb	r2, [r0, #6]
    f5c0:	794a      	ldrb	r2, [r1, #5]
    f5c2:	71c2      	strb	r2, [r0, #7]
    f5c4:	f8d1 2006 	ldr.w	r2, [r1, #6]
    f5c8:	6082      	str	r2, [r0, #8]
    f5ca:	894a      	ldrh	r2, [r1, #10]
    f5cc:	8182      	strh	r2, [r0, #12]
    f5ce:	7e0a      	ldrb	r2, [r1, #24]
    f5d0:	7382      	strb	r2, [r0, #14]
    f5d2:	8b0a      	ldrh	r2, [r1, #24]
    f5d4:	0a12      	lsrs	r2, r2, #8
    f5d6:	73c2      	strb	r2, [r0, #15]
    f5d8:	7e8a      	ldrb	r2, [r1, #26]
    f5da:	7402      	strb	r2, [r0, #16]
    f5dc:	8b4a      	ldrh	r2, [r1, #26]
    f5de:	0a12      	lsrs	r2, r2, #8
    f5e0:	7442      	strb	r2, [r0, #17]
    f5e2:	7f0a      	ldrb	r2, [r1, #28]
    f5e4:	7482      	strb	r2, [r0, #18]
    f5e6:	8b8a      	ldrh	r2, [r1, #28]
    f5e8:	0a12      	lsrs	r2, r2, #8
    f5ea:	74c2      	strb	r2, [r0, #19]
    f5ec:	7f89      	ldrb	r1, [r1, #30]
    f5ee:	7501      	strb	r1, [r0, #20]
    f5f0:	2113      	movs	r1, #19
    f5f2:	7041      	strb	r1, [r0, #1]
    f5f4:	4608      	mov	r0, r1
    f5f6:	4770      	bx	lr

0000f5f8 <sdc_hci_data_get>:
    f5f8:	b510      	push	{r4, lr}
    f5fa:	b120      	cbz	r0, f606 <sdc_hci_data_get+0xe>
    f5fc:	f7ff fd34 	bl	f068 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    f600:	b120      	cbz	r0, f60c <sdc_hci_data_get+0x14>
    f602:	2000      	movs	r0, #0
    f604:	bd10      	pop	{r4, pc}
    f606:	f06f 0015 	mvn.w	r0, #21
    f60a:	bd10      	pop	{r4, pc}
    f60c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f610:	bd10      	pop	{r4, pc}

0000f612 <sdc_hci_data_put>:
    f612:	b510      	push	{r4, lr}
    f614:	f06f 0415 	mvn.w	r4, #21
    f618:	b120      	cbz	r0, f624 <sdc_hci_data_put+0x12>
    f61a:	f7ff fd33 	bl	f084 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    f61e:	b108      	cbz	r0, f624 <sdc_hci_data_put+0x12>
    f620:	2000      	movs	r0, #0
    f622:	bd10      	pop	{r4, pc}
    f624:	4620      	mov	r0, r4
    f626:	bd10      	pop	{r4, pc}

0000f628 <sdc_hci_evt_get>:
    f628:	b510      	push	{r4, lr}
    f62a:	b120      	cbz	r0, f636 <sdc_hci_evt_get+0xe>
    f62c:	f7f4 fb4c 	bl	3cc8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    f630:	b120      	cbz	r0, f63c <sdc_hci_evt_get+0x14>
    f632:	2000      	movs	r0, #0
    f634:	bd10      	pop	{r4, pc}
    f636:	f06f 0015 	mvn.w	r0, #21
    f63a:	bd10      	pop	{r4, pc}
    f63c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f640:	bd10      	pop	{r4, pc}

0000f642 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    f642:	f002 ba06 	b.w	11a52 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000f646 <sdc_hci_cmd_cb_read_transmit_power_level>:
    f646:	f002 ba57 	b.w	11af8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000f64a <sdc_hci_cmd_cb_set_event_mask>:
    f64a:	b510      	push	{r4, lr}
    f64c:	f7f4 fbf0 	bl	3e30 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    f650:	2000      	movs	r0, #0
    f652:	bd10      	pop	{r4, pc}

0000f654 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    f654:	b510      	push	{r4, lr}
    f656:	f7f4 fbf9 	bl	3e4c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    f65a:	2000      	movs	r0, #0
    f65c:	bd10      	pop	{r4, pc}

0000f65e <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    f65e:	f002 ba66 	b.w	11b2e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000f662 <sdc_hci_cmd_vs_conn_event_extend>:
    f662:	b508      	push	{r3, lr}
    f664:	7800      	ldrb	r0, [r0, #0]
    f666:	f88d 0000 	strb.w	r0, [sp]
    f66a:	4668      	mov	r0, sp
    f66c:	f002 f9bd 	bl	119ea <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    f670:	bd08      	pop	{r3, pc}

0000f672 <sdc_hci_cmd_vs_conn_update>:
    f672:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f674:	2100      	movs	r1, #0
    f676:	9100      	str	r1, [sp, #0]
    f678:	9101      	str	r1, [sp, #4]
    f67a:	9102      	str	r1, [sp, #8]
    f67c:	9103      	str	r1, [sp, #12]
    f67e:	f8d0 1002 	ldr.w	r1, [r0, #2]
    f682:	f641 524c 	movw	r2, #7500	; 0x1d4c
    f686:	4291      	cmp	r1, r2
    f688:	d304      	bcc.n	f694 <sdc_hci_cmd_vs_conn_update+0x22>
    f68a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f68e:	fbb1 f1f2 	udiv	r1, r1, r2
    f692:	e005      	b.n	f6a0 <sdc_hci_cmd_vs_conn_update+0x2e>
    f694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f698:	fbb1 f1f2 	udiv	r1, r1, r2
    f69c:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    f6a0:	8802      	ldrh	r2, [r0, #0]
    f6a2:	b289      	uxth	r1, r1
    f6a4:	f8ad 2000 	strh.w	r2, [sp]
    f6a8:	f8ad 1002 	strh.w	r1, [sp, #2]
    f6ac:	f8ad 1004 	strh.w	r1, [sp, #4]
    f6b0:	88c1      	ldrh	r1, [r0, #6]
    f6b2:	f8ad 1006 	strh.w	r1, [sp, #6]
    f6b6:	8900      	ldrh	r0, [r0, #8]
    f6b8:	f8ad 0008 	strh.w	r0, [sp, #8]
    f6bc:	4668      	mov	r0, sp
    f6be:	f001 ff6a 	bl	11596 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    f6c2:	b004      	add	sp, #16
    f6c4:	bd10      	pop	{r4, pc}

0000f6c6 <sdc_hci_cmd_vs_event_length_set>:
    f6c6:	f7fd ba05 	b.w	cad4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000f6ca <sdc_hci_cmd_vs_llpm_mode_set>:
    f6ca:	b508      	push	{r3, lr}
    f6cc:	7800      	ldrb	r0, [r0, #0]
    f6ce:	f88d 0000 	strb.w	r0, [sp]
    f6d2:	4668      	mov	r0, sp
    f6d4:	f7fd fa5e 	bl	cb94 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
    f6d8:	bd08      	pop	{r3, pc}

0000f6da <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    f6da:	7800      	ldrb	r0, [r0, #0]
    f6dc:	b100      	cbz	r0, f6e0 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    f6de:	2001      	movs	r0, #1
    f6e0:	f002 b91d 	b.w	1191e <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000f6e4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    f6e4:	b510      	push	{r4, lr}
    f6e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    f6ea:	4604      	mov	r4, r0
    f6ec:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f6f0:	1c40      	adds	r0, r0, #1
    f6f2:	d105      	bne.n	f700 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    f6f4:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f6f8:	43c0      	mvns	r0, r0
    f6fa:	0400      	lsls	r0, r0, #16
    f6fc:	0c00      	lsrs	r0, r0, #16
    f6fe:	d036      	beq.n	f76e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f700:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
    f704:	07c0      	lsls	r0, r0, #31
    f706:	d032      	beq.n	f76e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8a>
    f708:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
    f70c:	f8c4 0001 	str.w	r0, [r4, #1]
    f710:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    f714:	f8a4 0005 	strh.w	r0, [r4, #5]
    f718:	79a0      	ldrb	r0, [r4, #6]
    f71a:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    f71e:	71a0      	strb	r0, [r4, #6]
    f720:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    f724:	1c40      	adds	r0, r0, #1
    f726:	d019      	beq.n	f75c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f728:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    f72c:	1c40      	adds	r0, r0, #1
    f72e:	d015      	beq.n	f75c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f730:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
    f734:	1c40      	adds	r0, r0, #1
    f736:	d011      	beq.n	f75c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f738:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    f73c:	1c40      	adds	r0, r0, #1
    f73e:	d00d      	beq.n	f75c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>
    f740:	f851 0f90 	ldr.w	r0, [r1, #144]!
    f744:	f8c4 0007 	str.w	r0, [r4, #7]
    f748:	6848      	ldr	r0, [r1, #4]
    f74a:	f8c4 000b 	str.w	r0, [r4, #11]
    f74e:	6888      	ldr	r0, [r1, #8]
    f750:	f8c4 000f 	str.w	r0, [r4, #15]
    f754:	68c8      	ldr	r0, [r1, #12]
    f756:	f8c4 0013 	str.w	r0, [r4, #19]
    f75a:	e004      	b.n	f766 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x82>
    f75c:	2210      	movs	r2, #16
    f75e:	2100      	movs	r1, #0
    f760:	1de0      	adds	r0, r4, #7
    f762:	f7ff fbb7 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f766:	2001      	movs	r0, #1
    f768:	7020      	strb	r0, [r4, #0]
    f76a:	2000      	movs	r0, #0
    f76c:	bd10      	pop	{r4, pc}
    f76e:	2000      	movs	r0, #0
    f770:	e7fa      	b.n	f768 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x84>

0000f772 <sdc_hci_cmd_vs_zephyr_read_supported_commands>:
    f772:	b510      	push	{r4, lr}
    f774:	4604      	mov	r4, r0
    f776:	2240      	movs	r2, #64	; 0x40
    f778:	2100      	movs	r1, #0
    f77a:	f7ff fbab 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f77e:	7861      	ldrb	r1, [r4, #1]
    f780:	7820      	ldrb	r0, [r4, #0]
    f782:	f041 0121 	orr.w	r1, r1, #33	; 0x21
    f786:	7061      	strb	r1, [r4, #1]
    f788:	f040 0023 	orr.w	r0, r0, #35	; 0x23
    f78c:	7020      	strb	r0, [r4, #0]
    f78e:	2000      	movs	r0, #0
    f790:	bd10      	pop	{r4, pc}

0000f792 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    f792:	f002 b90a 	b.w	119aa <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000f796 <sdc_hci_cmd_ip_read_bd_addr>:
    f796:	f002 b96d 	b.w	11a74 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000f79a <sdc_hci_cmd_ip_read_local_supported_features>:
    f79a:	f002 b977 	b.w	11a8c <sym_2PTHETYGBZAPJ2ZKYDOVYDIWST3AXGZGS3MY6DI>

0000f79e <sdc_hci_cmd_ip_read_local_version_information>:
    f79e:	f7fd ba0d 	b.w	cbbc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000f7a2 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    f7a2:	f001 bea9 	b.w	114f8 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000f7a6 <sdc_hci_cmd_le_add_device_to_white_list>:
    f7a6:	f001 bec2 	b.w	1152e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000f7aa <sdc_hci_cmd_le_clear_resolving_list>:
    f7aa:	f001 bedd 	b.w	11568 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000f7ae <sdc_hci_cmd_le_clear_white_list>:
    f7ae:	f001 bee8 	b.w	11582 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000f7b2 <sdc_hci_cmd_le_encrypt>:
    f7b2:	f001 bf4d 	b.w	11650 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000f7b6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    f7b6:	8802      	ldrh	r2, [r0, #0]
    f7b8:	800a      	strh	r2, [r1, #0]
    f7ba:	f001 bf52 	b.w	11662 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000f7be <sdc_hci_cmd_le_long_term_key_request_reply>:
    f7be:	8802      	ldrh	r2, [r0, #0]
    f7c0:	800a      	strh	r2, [r1, #0]
    f7c2:	f001 bf67 	b.w	11694 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000f7c6 <sdc_hci_cmd_le_rand>:
    f7c6:	f001 bf89 	b.w	116dc <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000f7ca <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    f7ca:	f7fc bfc1 	b.w	c750 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000f7ce <sdc_hci_cmd_le_read_buffer_size>:
    f7ce:	f7fc bfcd 	b.w	c76c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000f7d2 <sdc_hci_cmd_le_read_channel_map>:
    f7d2:	f001 bf89 	b.w	116e8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000f7d6 <sdc_hci_cmd_le_read_local_supported_features>:
    f7d6:	f001 bfa8 	b.w	1172a <sym_7YL5EH5YISPHYP3GLCPHHLYJDC4YFSU26ARBXOI>

0000f7da <sdc_hci_cmd_le_read_max_data_length>:
    f7da:	f001 bfb4 	b.w	11746 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000f7de <sdc_hci_cmd_le_read_phy>:
    f7de:	f7fc bfd1 	b.w	c784 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000f7e2 <sdc_hci_cmd_le_read_remote_features>:
    f7e2:	f7fc bff7 	b.w	c7d4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000f7e6 <sdc_hci_cmd_le_read_resolving_list_size>:
    f7e6:	f001 bfbe 	b.w	11766 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000f7ea <sdc_hci_cmd_le_read_suggested_default_data_length>:
    f7ea:	f7fd b823 	b.w	c834 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000f7ee <sdc_hci_cmd_le_read_transmit_power>:
    f7ee:	f001 bfbe 	b.w	1176e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000f7f2 <sdc_hci_cmd_le_read_white_list_size>:
    f7f2:	f001 bfc2 	b.w	1177a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000f7f6 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    f7f6:	f001 bfc4 	b.w	11782 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000f7fa <sdc_hci_cmd_le_remove_device_from_white_list>:
    f7fa:	f001 bfdb 	b.w	117b4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000f7fe <sdc_hci_cmd_le_set_address_resolution_enable>:
    f7fe:	f001 bff5 	b.w	117ec <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000f802 <sdc_hci_cmd_le_set_adv_data>:
    f802:	f7fd b827 	b.w	c854 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000f806 <sdc_hci_cmd_le_set_adv_enable>:
    f806:	f7fd b855 	b.w	c8b4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000f80a <sdc_hci_cmd_le_set_adv_params>:
    f80a:	f7fd b871 	b.w	c8f0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000f80e <sdc_hci_cmd_le_set_data_length>:
    f80e:	f001 bffb 	b.w	11808 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000f812 <sdc_hci_cmd_le_set_default_phy>:
    f812:	f7fd b8e3 	b.w	c9dc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000f816 <sdc_hci_cmd_le_set_event_mask>:
    f816:	b510      	push	{r4, lr}
    f818:	f7f4 fb04 	bl	3e24 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    f81c:	2000      	movs	r0, #0
    f81e:	bd10      	pop	{r4, pc}

0000f820 <sdc_hci_cmd_le_set_phy>:
    f820:	f002 b819 	b.w	11856 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000f824 <sdc_hci_cmd_le_set_privacy_mode>:
    f824:	f002 b837 	b.w	11896 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000f828 <sdc_hci_cmd_le_set_random_address>:
    f828:	f002 b84b 	b.w	118c2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000f82c <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    f82c:	f002 b857 	b.w	118de <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000f830 <sdc_hci_cmd_le_set_scan_response_data>:
    f830:	f7fd b906 	b.w	ca40 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000f834 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    f834:	f002 b85c 	b.w	118f0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000f838 <sdc_hci_cmd_lc_disconnect>:
    f838:	f001 bdfe 	b.w	11438 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000f83c <sdc_hci_cmd_lc_read_remote_version_information>:
    f83c:	f002 b92d 	b.w	11a9a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    f840:	b530      	push	{r4, r5, lr}
    f842:	8804      	ldrh	r4, [r0, #0]
    f844:	f424 4500 	bic.w	r5, r4, #32768	; 0x8000
    f848:	4429      	add	r1, r5
    f84a:	b289      	uxth	r1, r1
    f84c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f850:	4291      	cmp	r1, r2
    f852:	d20b      	bcs.n	f86c <sdc_hci_cmd_lc_read_remote_version_information+0x30>
    f854:	1a52      	subs	r2, r2, r1
    f856:	b292      	uxth	r2, r2
    f858:	331b      	adds	r3, #27
    f85a:	429a      	cmp	r2, r3
    f85c:	d201      	bcs.n	f862 <sdc_hci_cmd_lc_read_remote_version_information+0x26>
    f85e:	43a5      	bics	r5, r4
    f860:	e002      	b.n	f868 <sdc_hci_cmd_lc_read_remote_version_information+0x2c>
    f862:	f404 4500 	and.w	r5, r4, #32768	; 0x8000
    f866:	430d      	orrs	r5, r1
    f868:	8005      	strh	r5, [r0, #0]
    f86a:	bd30      	pop	{r4, r5, pc}
    f86c:	1a89      	subs	r1, r1, r2
    f86e:	b289      	uxth	r1, r1
    f870:	43a5      	bics	r5, r4
    f872:	e7f8      	b.n	f866 <sdc_hci_cmd_lc_read_remote_version_information+0x2a>
    f874:	b510      	push	{r4, lr}
    f876:	8802      	ldrh	r2, [r0, #0]
    f878:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    f87c:	428b      	cmp	r3, r1
    f87e:	d203      	bcs.n	f888 <sdc_hci_cmd_lc_read_remote_version_information+0x4c>
    f880:	21b6      	movs	r1, #182	; 0xb6
    f882:	2014      	movs	r0, #20
    f884:	f7f4 f97e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f88c:	4393      	bics	r3, r2
    f88e:	430b      	orrs	r3, r1
    f890:	8003      	strh	r3, [r0, #0]
    f892:	bd10      	pop	{r4, pc}
    f894:	4288      	cmp	r0, r1
    f896:	d101      	bne.n	f89c <sdc_hci_cmd_lc_read_remote_version_information+0x60>
    f898:	2001      	movs	r0, #1
    f89a:	4770      	bx	lr
    f89c:	2000      	movs	r0, #0
    f89e:	4770      	bx	lr
    f8a0:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    f8a4:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    f8a8:	429a      	cmp	r2, r3
    f8aa:	d107      	bne.n	f8bc <sdc_hci_cmd_lc_read_remote_version_information+0x80>
    f8ac:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    f8b0:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    f8b4:	4288      	cmp	r0, r1
    f8b6:	d001      	beq.n	f8bc <sdc_hci_cmd_lc_read_remote_version_information+0x80>
    f8b8:	2001      	movs	r0, #1
    f8ba:	4770      	bx	lr
    f8bc:	2000      	movs	r0, #0
    f8be:	4770      	bx	lr

0000f8c0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    f8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8c4:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f8c8:	7f40      	ldrb	r0, [r0, #29]
    f8ca:	461d      	mov	r5, r3
    f8cc:	3008      	adds	r0, #8
    f8ce:	4690      	mov	r8, r2
    f8d0:	1843      	adds	r3, r0, r1
    f8d2:	2400      	movs	r4, #0
    f8d4:	8808      	ldrh	r0, [r1, #0]
    f8d6:	884f      	ldrh	r7, [r1, #2]
    f8d8:	9a06      	ldr	r2, [sp, #24]
    f8da:	1edb      	subs	r3, r3, #3
    f8dc:	b190      	cbz	r0, f904 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x44>
    f8de:	1cc0      	adds	r0, r0, #3
    f8e0:	b280      	uxth	r0, r0
    f8e2:	4290      	cmp	r0, r2
    f8e4:	d912      	bls.n	f90c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x4c>
    f8e6:	1a80      	subs	r0, r0, r2
    f8e8:	42a8      	cmp	r0, r5
    f8ea:	db00      	blt.n	f8ee <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2e>
    f8ec:	4628      	mov	r0, r5
    f8ee:	b284      	uxth	r4, r0
    f8f0:	1899      	adds	r1, r3, r2
    f8f2:	4622      	mov	r2, r4
    f8f4:	4640      	mov	r0, r8
    f8f6:	f7f3 ffbb 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f8fa:	1b28      	subs	r0, r5, r4
    f8fc:	b285      	uxth	r5, r0
    f8fe:	44a0      	add	r8, r4
    f900:	2000      	movs	r0, #0
    f902:	e005      	b.n	f910 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x50>
    f904:	1cff      	adds	r7, r7, #3
    f906:	b2bf      	uxth	r7, r7
    f908:	1ef6      	subs	r6, r6, #3
    f90a:	e7ea      	b.n	f8e2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x22>
    f90c:	1a10      	subs	r0, r2, r0
    f90e:	b280      	uxth	r0, r0
    f910:	1941      	adds	r1, r0, r5
    f912:	42b9      	cmp	r1, r7
    f914:	d806      	bhi.n	f924 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x64>
    f916:	1831      	adds	r1, r6, r0
    f918:	462a      	mov	r2, r5
    f91a:	4640      	mov	r0, r8
    f91c:	f7f3 ffa8 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f920:	1960      	adds	r0, r4, r5
    f922:	b284      	uxth	r4, r0
    f924:	4620      	mov	r0, r4
    f926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f92a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    f92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f92e:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f932:	7f40      	ldrb	r0, [r0, #29]
    f934:	461d      	mov	r5, r3
    f936:	3008      	adds	r0, #8
    f938:	4690      	mov	r8, r2
    f93a:	1843      	adds	r3, r0, r1
    f93c:	2400      	movs	r4, #0
    f93e:	8808      	ldrh	r0, [r1, #0]
    f940:	884f      	ldrh	r7, [r1, #2]
    f942:	9a06      	ldr	r2, [sp, #24]
    f944:	1edb      	subs	r3, r3, #3
    f946:	b190      	cbz	r0, f96e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x44>
    f948:	1cc0      	adds	r0, r0, #3
    f94a:	b280      	uxth	r0, r0
    f94c:	4290      	cmp	r0, r2
    f94e:	d912      	bls.n	f976 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x4c>
    f950:	1a80      	subs	r0, r0, r2
    f952:	42a8      	cmp	r0, r5
    f954:	db00      	blt.n	f958 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2e>
    f956:	4628      	mov	r0, r5
    f958:	b284      	uxth	r4, r0
    f95a:	1898      	adds	r0, r3, r2
    f95c:	4622      	mov	r2, r4
    f95e:	4641      	mov	r1, r8
    f960:	f7f3 ff86 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f964:	1b28      	subs	r0, r5, r4
    f966:	b285      	uxth	r5, r0
    f968:	44a0      	add	r8, r4
    f96a:	2000      	movs	r0, #0
    f96c:	e005      	b.n	f97a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x50>
    f96e:	1cff      	adds	r7, r7, #3
    f970:	b2bf      	uxth	r7, r7
    f972:	1ef6      	subs	r6, r6, #3
    f974:	e7ea      	b.n	f94c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x22>
    f976:	1a10      	subs	r0, r2, r0
    f978:	b280      	uxth	r0, r0
    f97a:	1941      	adds	r1, r0, r5
    f97c:	42b9      	cmp	r1, r7
    f97e:	d806      	bhi.n	f98e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x64>
    f980:	4430      	add	r0, r6
    f982:	462a      	mov	r2, r5
    f984:	4641      	mov	r1, r8
    f986:	f7f3 ff73 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f98a:	1960      	adds	r0, r4, r5
    f98c:	b284      	uxth	r4, r0
    f98e:	4620      	mov	r0, r4
    f990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f994 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    f994:	88c1      	ldrh	r1, [r0, #6]
    f996:	8880      	ldrh	r0, [r0, #4]
    f998:	f7ff bf7c 	b.w	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>

0000f99c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    f99c:	8881      	ldrh	r1, [r0, #4]
    f99e:	8900      	ldrh	r0, [r0, #8]
    f9a0:	f7ff bf78 	b.w	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>

0000f9a4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    f9a4:	b570      	push	{r4, r5, r6, lr}
    f9a6:	4604      	mov	r4, r0
    f9a8:	f100 0128 	add.w	r1, r0, #40	; 0x28
    f9ac:	8880      	ldrh	r0, [r0, #4]
    f9ae:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    f9b2:	1842      	adds	r2, r0, r1
    f9b4:	8a20      	ldrh	r0, [r4, #16]
    f9b6:	2800      	cmp	r0, #0
    f9b8:	d027      	beq.n	fa0a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x66>
    f9ba:	89a1      	ldrh	r1, [r4, #12]
    f9bc:	2500      	movs	r5, #0
    f9be:	4408      	add	r0, r1
    f9c0:	b280      	uxth	r0, r0
    f9c2:	81a0      	strh	r0, [r4, #12]
    f9c4:	8811      	ldrh	r1, [r2, #0]
    f9c6:	8853      	ldrh	r3, [r2, #2]
    f9c8:	4419      	add	r1, r3
    f9ca:	4281      	cmp	r1, r0
    f9cc:	d205      	bcs.n	f9da <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    f9ce:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
    f9d2:	f04f 0014 	mov.w	r0, #20
    f9d6:	f7f4 f8d5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9da:	d114      	bne.n	fa06 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x62>
    f9dc:	69a0      	ldr	r0, [r4, #24]
    f9de:	b108      	cbz	r0, f9e4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    f9e0:	7f80      	ldrb	r0, [r0, #30]
    f9e2:	7110      	strb	r0, [r2, #4]
    f9e4:	8851      	ldrh	r1, [r2, #2]
    f9e6:	b121      	cbz	r1, f9f2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4e>
    f9e8:	f104 0004 	add.w	r0, r4, #4
    f9ec:	f7ff ff42 	bl	f874 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    f9f0:	e008      	b.n	fa04 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x60>
    f9f2:	7f63      	ldrb	r3, [r4, #29]
    f9f4:	8810      	ldrh	r0, [r2, #0]
    f9f6:	3308      	adds	r3, #8
    f9f8:	4418      	add	r0, r3
    f9fa:	b281      	uxth	r1, r0
    f9fc:	8862      	ldrh	r2, [r4, #2]
    f9fe:	1d20      	adds	r0, r4, #4
    fa00:	f7ff ff1e 	bl	f840 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fa04:	81a5      	strh	r5, [r4, #12]
    fa06:	8225      	strh	r5, [r4, #16]
    fa08:	2001      	movs	r0, #1
    fa0a:	bd70      	pop	{r4, r5, r6, pc}

0000fa0c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    fa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa10:	4604      	mov	r4, r0
    fa12:	f100 0328 	add.w	r3, r0, #40	; 0x28
    fa16:	88c0      	ldrh	r0, [r0, #6]
    fa18:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fa1c:	8a60      	ldrh	r0, [r4, #18]
    fa1e:	19dd      	adds	r5, r3, r7
    fa20:	b108      	cbz	r0, fa26 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    fa22:	4288      	cmp	r0, r1
    fa24:	d202      	bcs.n	fa2c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x20>
    fa26:	2000      	movs	r0, #0
    fa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa2c:	89e6      	ldrh	r6, [r4, #14]
    fa2e:	b15e      	cbz	r6, fa48 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3c>
    fa30:	8828      	ldrh	r0, [r5, #0]
    fa32:	f8b5 c002 	ldrh.w	ip, [r5, #2]
    fa36:	eb00 080c 	add.w	r8, r0, ip
    fa3a:	4546      	cmp	r6, r8
    fa3c:	d008      	beq.n	fa50 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x44>
    fa3e:	f240 3112 	movw	r1, #786	; 0x312
    fa42:	2014      	movs	r0, #20
    fa44:	f7f4 f89e 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa48:	2000      	movs	r0, #0
    fa4a:	7fa6      	ldrb	r6, [r4, #30]
    fa4c:	4684      	mov	ip, r0
    fa4e:	712e      	strb	r6, [r5, #4]
    fa50:	f894 801c 	ldrb.w	r8, [r4, #28]
    fa54:	f04f 0600 	mov.w	r6, #0
    fa58:	46c1      	mov	r9, r8
    fa5a:	ea58 080c 	orrs.w	r8, r8, ip
    fa5e:	d003      	beq.n	fa68 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    fa60:	ea5f 0709 	movs.w	r7, r9
    fa64:	d02d      	beq.n	fac2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xb6>
    fa66:	e037      	b.n	fad8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xcc>
    fa68:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    fa6c:	f1bc 0f00 	cmp.w	ip, #0
    fa70:	d00e      	beq.n	fa90 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x84>
    fa72:	f894 801d 	ldrb.w	r8, [r4, #29]
    fa76:	449c      	add	ip, r3
    fa78:	f108 0808 	add.w	r8, r8, #8
    fa7c:	44b8      	add	r8, r7
    fa7e:	44c4      	add	ip, r8
    fa80:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    fa84:	f82c 8c03 	strh.w	r8, [ip, #-3]
    fa88:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    fa8c:	f80c 8c01 	strb.w	r8, [ip, #-1]
    fa90:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    fa94:	4408      	add	r0, r1
    fa96:	4461      	add	r1, ip
    fa98:	81e1      	strh	r1, [r4, #14]
    fa9a:	8028      	strh	r0, [r5, #0]
    fa9c:	806e      	strh	r6, [r5, #2]
    fa9e:	b14a      	cbz	r2, fab4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa8>
    faa0:	7f63      	ldrb	r3, [r4, #29]
    faa2:	8828      	ldrh	r0, [r5, #0]
    faa4:	3308      	adds	r3, #8
    faa6:	4418      	add	r0, r3
    faa8:	b281      	uxth	r1, r0
    faaa:	8862      	ldrh	r2, [r4, #2]
    faac:	1da0      	adds	r0, r4, #6
    faae:	f7ff fec7 	bl	f840 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fab2:	e01f      	b.n	faf4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xe8>
    fab4:	7f60      	ldrb	r0, [r4, #29]
    fab6:	89e1      	ldrh	r1, [r4, #14]
    fab8:	3008      	adds	r0, #8
    faba:	4438      	add	r0, r7
    fabc:	4419      	add	r1, r3
    fabe:	4408      	add	r0, r1
    fac0:	e028      	b.n	fb14 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x108>
    fac2:	89e7      	ldrh	r7, [r4, #14]
    fac4:	f8b4 801f 	ldrh.w	r8, [r4, #31]
    fac8:	441f      	add	r7, r3
    faca:	1a3f      	subs	r7, r7, r0
    facc:	f827 8c03 	strh.w	r8, [r7, #-3]
    fad0:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
    fad4:	f807 8c01 	strb.w	r8, [r7, #-1]
    fad8:	eb0c 0701 	add.w	r7, ip, r1
    fadc:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    fae0:	b2bf      	uxth	r7, r7
    fae2:	4461      	add	r1, ip
    fae4:	81e1      	strh	r1, [r4, #14]
    fae6:	8028      	strh	r0, [r5, #0]
    fae8:	806f      	strh	r7, [r5, #2]
    faea:	b182      	cbz	r2, fb0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x102>
    faec:	4639      	mov	r1, r7
    faee:	1da0      	adds	r0, r4, #6
    faf0:	f7ff fec0 	bl	f874 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    faf4:	81e6      	strh	r6, [r4, #14]
    faf6:	7fa0      	ldrb	r0, [r4, #30]
    faf8:	1c40      	adds	r0, r0, #1
    fafa:	77a0      	strb	r0, [r4, #30]
    fafc:	7da0      	ldrb	r0, [r4, #22]
    fafe:	b108      	cbz	r0, fb04 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xf8>
    fb00:	88e0      	ldrh	r0, [r4, #6]
    fb02:	82a0      	strh	r0, [r4, #20]
    fb04:	75a6      	strb	r6, [r4, #22]
    fb06:	8266      	strh	r6, [r4, #18]
    fb08:	75e6      	strb	r6, [r4, #23]
    fb0a:	2001      	movs	r0, #1
    fb0c:	e78c      	b.n	fa28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    fb0e:	89e1      	ldrh	r1, [r4, #14]
    fb10:	4419      	add	r1, r3
    fb12:	1a08      	subs	r0, r1, r0
    fb14:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    fb18:	f8a4 101f 	strh.w	r1, [r4, #31]
    fb1c:	7880      	ldrb	r0, [r0, #2]
    fb1e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    fb22:	e7f0      	b.n	fb06 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xfa>

0000fb24 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    fb24:	b570      	push	{r4, r5, r6, lr}
    fb26:	4604      	mov	r4, r0
    fb28:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fb2c:	88c1      	ldrh	r1, [r0, #6]
    fb2e:	8880      	ldrh	r0, [r0, #4]
    fb30:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fb34:	18d5      	adds	r5, r2, r3
    fb36:	f7ff fead 	bl	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fb3a:	b938      	cbnz	r0, fb4c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fb3c:	89a0      	ldrh	r0, [r4, #12]
    fb3e:	b928      	cbnz	r0, fb4c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fb40:	8a20      	ldrh	r0, [r4, #16]
    fb42:	b918      	cbnz	r0, fb4c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x28>
    fb44:	88a0      	ldrh	r0, [r4, #4]
    fb46:	8aa1      	ldrh	r1, [r4, #20]
    fb48:	4288      	cmp	r0, r1
    fb4a:	d101      	bne.n	fb50 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x2c>
    fb4c:	2000      	movs	r0, #0
    fb4e:	bd70      	pop	{r4, r5, r6, pc}
    fb50:	8828      	ldrh	r0, [r5, #0]
    fb52:	8869      	ldrh	r1, [r5, #2]
    fb54:	b131      	cbz	r1, fb64 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x40>
    fb56:	1d20      	adds	r0, r4, #4
    fb58:	f7ff fe8c 	bl	f874 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fb5c:	2000      	movs	r0, #0
    fb5e:	8220      	strh	r0, [r4, #16]
    fb60:	2001      	movs	r0, #1
    fb62:	bd70      	pop	{r4, r5, r6, pc}
    fb64:	7f63      	ldrb	r3, [r4, #29]
    fb66:	8862      	ldrh	r2, [r4, #2]
    fb68:	3308      	adds	r3, #8
    fb6a:	4418      	add	r0, r3
    fb6c:	b281      	uxth	r1, r0
    fb6e:	1d20      	adds	r0, r4, #4
    fb70:	f7ff fe66 	bl	f840 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fb74:	e7f2      	b.n	fb5c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x38>

0000fb76 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    fb76:	b570      	push	{r4, r5, r6, lr}
    fb78:	4604      	mov	r4, r0
    fb7a:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fb7e:	88c0      	ldrh	r0, [r0, #6]
    fb80:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fb84:	7de0      	ldrb	r0, [r4, #23]
    fb86:	2800      	cmp	r0, #0
    fb88:	d006      	beq.n	fb98 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x22>
    fb8a:	18d0      	adds	r0, r2, r3
    fb8c:	8802      	ldrh	r2, [r0, #0]
    fb8e:	8843      	ldrh	r3, [r0, #2]
    fb90:	4413      	add	r3, r2
    fb92:	428b      	cmp	r3, r1
    fb94:	d201      	bcs.n	fb9a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x24>
    fb96:	2000      	movs	r0, #0
    fb98:	bd70      	pop	{r4, r5, r6, pc}
    fb9a:	2500      	movs	r5, #0
    fb9c:	428a      	cmp	r2, r1
    fb9e:	d302      	bcc.n	fba6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x30>
    fba0:	8001      	strh	r1, [r0, #0]
    fba2:	8045      	strh	r5, [r0, #2]
    fba4:	e008      	b.n	fbb8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    fba6:	1a89      	subs	r1, r1, r2
    fba8:	0409      	lsls	r1, r1, #16
    fbaa:	0c09      	lsrs	r1, r1, #16
    fbac:	8041      	strh	r1, [r0, #2]
    fbae:	d003      	beq.n	fbb8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x42>
    fbb0:	1da0      	adds	r0, r4, #6
    fbb2:	f7ff fe5f 	bl	f874 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fbb6:	e008      	b.n	fbca <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x54>
    fbb8:	7f63      	ldrb	r3, [r4, #29]
    fbba:	8800      	ldrh	r0, [r0, #0]
    fbbc:	3308      	adds	r3, #8
    fbbe:	4418      	add	r0, r3
    fbc0:	b281      	uxth	r1, r0
    fbc2:	8862      	ldrh	r2, [r4, #2]
    fbc4:	1da0      	adds	r0, r4, #6
    fbc6:	f7ff fe3b 	bl	f840 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fbca:	75e5      	strb	r5, [r4, #23]
    fbcc:	2001      	movs	r0, #1
    fbce:	bd70      	pop	{r4, r5, r6, pc}

0000fbd0 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    fbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fbd4:	4604      	mov	r4, r0
    fbd6:	f100 0628 	add.w	r6, r0, #40	; 0x28
    fbda:	8947      	ldrh	r7, [r0, #10]
    fbdc:	8880      	ldrh	r0, [r0, #4]
    fbde:	2500      	movs	r5, #0
    fbe0:	4681      	mov	r9, r0
    fbe2:	4601      	mov	r1, r0
    fbe4:	4638      	mov	r0, r7
    fbe6:	f7ff fe55 	bl	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fbea:	b9e0      	cbnz	r0, fc26 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x56>
    fbec:	f104 080a 	add.w	r8, r4, #10
    fbf0:	f427 4000 	bic.w	r0, r7, #32768	; 0x8000
    fbf4:	4430      	add	r0, r6
    fbf6:	8841      	ldrh	r1, [r0, #2]
    fbf8:	b119      	cbz	r1, fc02 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x32>
    fbfa:	4640      	mov	r0, r8
    fbfc:	f7ff fe3a 	bl	f874 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fc00:	e008      	b.n	fc14 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x44>
    fc02:	7f63      	ldrb	r3, [r4, #29]
    fc04:	8800      	ldrh	r0, [r0, #0]
    fc06:	3308      	adds	r3, #8
    fc08:	4418      	add	r0, r3
    fc0a:	b281      	uxth	r1, r0
    fc0c:	8862      	ldrh	r2, [r4, #2]
    fc0e:	4640      	mov	r0, r8
    fc10:	f7ff fe16 	bl	f840 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    fc14:	8967      	ldrh	r7, [r4, #10]
    fc16:	1c6d      	adds	r5, r5, #1
    fc18:	b2ad      	uxth	r5, r5
    fc1a:	4649      	mov	r1, r9
    fc1c:	4638      	mov	r0, r7
    fc1e:	f7ff fe39 	bl	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fc22:	2800      	cmp	r0, #0
    fc24:	d0e4      	beq.n	fbf0 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    fc26:	4628      	mov	r0, r5
    fc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000fc2c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    fc2c:	b570      	push	{r4, r5, r6, lr}
    fc2e:	4604      	mov	r4, r0
    fc30:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fc34:	88c1      	ldrh	r1, [r0, #6]
    fc36:	8880      	ldrh	r0, [r0, #4]
    fc38:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    fc3c:	18d5      	adds	r5, r2, r3
    fc3e:	88a2      	ldrh	r2, [r4, #4]
    fc40:	8aa3      	ldrh	r3, [r4, #20]
    fc42:	429a      	cmp	r2, r3
    fc44:	d013      	beq.n	fc6e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fc46:	f7ff fe25 	bl	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fc4a:	b980      	cbnz	r0, fc6e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fc4c:	89a0      	ldrh	r0, [r4, #12]
    fc4e:	b970      	cbnz	r0, fc6e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    fc50:	69a4      	ldr	r4, [r4, #24]
    fc52:	b174      	cbz	r4, fc72 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fc54:	4620      	mov	r0, r4
    fc56:	f7ff fea1 	bl	f99c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    fc5a:	b950      	cbnz	r0, fc72 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fc5c:	8920      	ldrh	r0, [r4, #8]
    fc5e:	3428      	adds	r4, #40	; 0x28
    fc60:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    fc64:	4420      	add	r0, r4
    fc66:	7929      	ldrb	r1, [r5, #4]
    fc68:	7900      	ldrb	r0, [r0, #4]
    fc6a:	4288      	cmp	r0, r1
    fc6c:	d101      	bne.n	fc72 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x46>
    fc6e:	2000      	movs	r0, #0
    fc70:	bd70      	pop	{r4, r5, r6, pc}
    fc72:	4628      	mov	r0, r5
    fc74:	bd70      	pop	{r4, r5, r6, pc}

0000fc76 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    fc76:	f100 0328 	add.w	r3, r0, #40	; 0x28
    fc7a:	7f40      	ldrb	r0, [r0, #29]
    fc7c:	3008      	adds	r0, #8
    fc7e:	4408      	add	r0, r1
    fc80:	1ec0      	subs	r0, r0, #3
    fc82:	6010      	str	r0, [r2, #0]
    fc84:	8808      	ldrh	r0, [r1, #0]
    fc86:	b908      	cbnz	r0, fc8c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY+0x16>
    fc88:	1edb      	subs	r3, r3, #3
    fc8a:	6013      	str	r3, [r2, #0]
    fc8c:	8808      	ldrh	r0, [r1, #0]
    fc8e:	8849      	ldrh	r1, [r1, #2]
    fc90:	4408      	add	r0, r1
    fc92:	b280      	uxth	r0, r0
    fc94:	4770      	bx	lr

0000fc96 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    fc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc9a:	460e      	mov	r6, r1
    fc9c:	88c1      	ldrh	r1, [r0, #6]
    fc9e:	4604      	mov	r4, r0
    fca0:	f100 0828 	add.w	r8, r0, #40	; 0x28
    fca4:	8900      	ldrh	r0, [r0, #8]
    fca6:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    fcaa:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fcae:	f7ff fdf7 	bl	f8a0 <sdc_hci_cmd_lc_read_remote_version_information+0x64>
    fcb2:	b110      	cbz	r0, fcba <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x24>
    fcb4:	2000      	movs	r0, #0
    fcb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcba:	2200      	movs	r2, #0
    fcbc:	2301      	movs	r3, #1
    fcbe:	7f60      	ldrb	r0, [r4, #29]
    fcc0:	42af      	cmp	r7, r5
    fcc2:	d90b      	bls.n	fcdc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x46>
    fcc4:	1b79      	subs	r1, r7, r5
    fcc6:	3008      	adds	r0, #8
    fcc8:	1a08      	subs	r0, r1, r0
    fcca:	4286      	cmp	r6, r0
    fccc:	dc1d      	bgt.n	fd0a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    fcce:	eb08 0005 	add.w	r0, r8, r5
    fcd2:	2100      	movs	r1, #0
    fcd4:	8006      	strh	r6, [r0, #0]
    fcd6:	8041      	strh	r1, [r0, #2]
    fcd8:	75e3      	strb	r3, [r4, #23]
    fcda:	e7ec      	b.n	fcb6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    fcdc:	8861      	ldrh	r1, [r4, #2]
    fcde:	3008      	adds	r0, #8
    fce0:	1b49      	subs	r1, r1, r5
    fce2:	1a08      	subs	r0, r1, r0
    fce4:	d411      	bmi.n	fd0a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x74>
    fce6:	281b      	cmp	r0, #27
    fce8:	da04      	bge.n	fcf4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x5e>
    fcea:	f240 111d 	movw	r1, #285	; 0x11d
    fcee:	2014      	movs	r0, #20
    fcf0:	f7f3 ff48 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcf4:	4286      	cmp	r6, r0
    fcf6:	dc01      	bgt.n	fcfc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x66>
    fcf8:	4630      	mov	r0, r6
    fcfa:	e000      	b.n	fcfe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x68>
    fcfc:	b280      	uxth	r0, r0
    fcfe:	1a31      	subs	r1, r6, r0
    fd00:	0409      	lsls	r1, r1, #16
    fd02:	0c09      	lsrs	r1, r1, #16
    fd04:	d003      	beq.n	fd0e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    fd06:	42b9      	cmp	r1, r7
    fd08:	dd01      	ble.n	fd0e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x78>
    fd0a:	75e2      	strb	r2, [r4, #23]
    fd0c:	e7d2      	b.n	fcb4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x1e>
    fd0e:	eb08 0205 	add.w	r2, r8, r5
    fd12:	8010      	strh	r0, [r2, #0]
    fd14:	8051      	strh	r1, [r2, #2]
    fd16:	75e3      	strb	r3, [r4, #23]
    fd18:	4610      	mov	r0, r2
    fd1a:	e7cc      	b.n	fcb6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>

0000fd1c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    fd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd20:	4604      	mov	r4, r0
    fd22:	f100 0228 	add.w	r2, r0, #40	; 0x28
    fd26:	88c1      	ldrh	r1, [r0, #6]
    fd28:	8880      	ldrh	r0, [r0, #4]
    fd2a:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    fd2e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    fd32:	19d6      	adds	r6, r2, r7
    fd34:	f7ff fdae 	bl	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fd38:	b9e8      	cbnz	r0, fd76 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fd3a:	89a0      	ldrh	r0, [r4, #12]
    fd3c:	8a21      	ldrh	r1, [r4, #16]
    fd3e:	8832      	ldrh	r2, [r6, #0]
    fd40:	4401      	add	r1, r0
    fd42:	8870      	ldrh	r0, [r6, #2]
    fd44:	1813      	adds	r3, r2, r0
    fd46:	4299      	cmp	r1, r3
    fd48:	d312      	bcc.n	fd70 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    fd4a:	b110      	cbz	r0, fd52 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    fd4c:	42a8      	cmp	r0, r5
    fd4e:	d30f      	bcc.n	fd70 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    fd50:	e011      	b.n	fd76 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fd52:	7f61      	ldrb	r1, [r4, #29]
    fd54:	3108      	adds	r1, #8
    fd56:	19c8      	adds	r0, r1, r7
    fd58:	4410      	add	r0, r2
    fd5a:	8862      	ldrh	r2, [r4, #2]
    fd5c:	b280      	uxth	r0, r0
    fd5e:	1a12      	subs	r2, r2, r0
    fd60:	b292      	uxth	r2, r2
    fd62:	311b      	adds	r1, #27
    fd64:	4291      	cmp	r1, r2
    fd66:	d901      	bls.n	fd6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x50>
    fd68:	b915      	cbnz	r5, fd70 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x54>
    fd6a:	e004      	b.n	fd76 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fd6c:	42a8      	cmp	r0, r5
    fd6e:	d002      	beq.n	fd76 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x5a>
    fd70:	2001      	movs	r0, #1
    fd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd76:	2000      	movs	r0, #0
    fd78:	e7fb      	b.n	fd72 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x56>

0000fd7a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    fd7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd7e:	460f      	mov	r7, r1
    fd80:	4604      	mov	r4, r0
    fd82:	f100 0528 	add.w	r5, r0, #40	; 0x28
    fd86:	88c1      	ldrh	r1, [r0, #6]
    fd88:	8880      	ldrh	r0, [r0, #4]
    fd8a:	4690      	mov	r8, r2
    fd8c:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    fd90:	18ae      	adds	r6, r5, r2
    fd92:	f7ff fd7f 	bl	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fd96:	b118      	cbz	r0, fda0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x26>
    fd98:	2000      	movs	r0, #0
    fd9a:	8220      	strh	r0, [r4, #16]
    fd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fda0:	89a0      	ldrh	r0, [r4, #12]
    fda2:	8831      	ldrh	r1, [r6, #0]
    fda4:	4288      	cmp	r0, r1
    fda6:	d306      	bcc.n	fdb6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3c>
    fda8:	1a40      	subs	r0, r0, r1
    fdaa:	8871      	ldrh	r1, [r6, #2]
    fdac:	1a09      	subs	r1, r1, r0
    fdae:	4428      	add	r0, r5
    fdb0:	b289      	uxth	r1, r1
    fdb2:	1ec0      	subs	r0, r0, #3
    fdb4:	e005      	b.n	fdc2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x48>
    fdb6:	1a09      	subs	r1, r1, r0
    fdb8:	7f62      	ldrb	r2, [r4, #29]
    fdba:	b289      	uxth	r1, r1
    fdbc:	4410      	add	r0, r2
    fdbe:	4430      	add	r0, r6
    fdc0:	1d40      	adds	r0, r0, #5
    fdc2:	883a      	ldrh	r2, [r7, #0]
    fdc4:	428a      	cmp	r2, r1
    fdc6:	d900      	bls.n	fdca <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
    fdc8:	8039      	strh	r1, [r7, #0]
    fdca:	89a1      	ldrh	r1, [r4, #12]
    fdcc:	b129      	cbz	r1, fdda <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x60>
    fdce:	2100      	movs	r1, #0
    fdd0:	f888 1000 	strb.w	r1, [r8]
    fdd4:	8839      	ldrh	r1, [r7, #0]
    fdd6:	8221      	strh	r1, [r4, #16]
    fdd8:	e7e0      	b.n	fd9c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x22>
    fdda:	2101      	movs	r1, #1
    fddc:	e7f8      	b.n	fdd0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x56>

0000fdde <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    fdde:	b510      	push	{r4, lr}
    fde0:	8a81      	ldrh	r1, [r0, #20]
    fde2:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    fde6:	3aff      	subs	r2, #255	; 0xff
    fde8:	d002      	beq.n	fdf0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    fdea:	7d82      	ldrb	r2, [r0, #22]
    fdec:	b95a      	cbnz	r2, fe06 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    fdee:	e004      	b.n	fdfa <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    fdf0:	f240 41ea 	movw	r1, #1258	; 0x4ea
    fdf4:	2014      	movs	r0, #20
    fdf6:	f7f3 fec5 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fdfa:	8880      	ldrh	r0, [r0, #4]
    fdfc:	f7ff fd4a 	bl	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fe00:	b108      	cbz	r0, fe06 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    fe02:	2000      	movs	r0, #0
    fe04:	bd10      	pop	{r4, pc}
    fe06:	2001      	movs	r0, #1
    fe08:	bd10      	pop	{r4, pc}

0000fe0a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    fe0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fe0e:	8281      	strh	r1, [r0, #20]
    fe10:	2100      	movs	r1, #0
    fe12:	7581      	strb	r1, [r0, #22]
    fe14:	4770      	bx	lr

0000fe16 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    fe16:	b510      	push	{r4, lr}
    fe18:	8a81      	ldrh	r1, [r0, #20]
    fe1a:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    fe1e:	3aff      	subs	r2, #255	; 0xff
    fe20:	d004      	beq.n	fe2c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    fe22:	f240 41cd 	movw	r1, #1229	; 0x4cd
    fe26:	2014      	movs	r0, #20
    fe28:	f7f3 feac 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe2c:	88c1      	ldrh	r1, [r0, #6]
    fe2e:	8281      	strh	r1, [r0, #20]
    fe30:	89c1      	ldrh	r1, [r0, #14]
    fe32:	b101      	cbz	r1, fe36 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    fe34:	2101      	movs	r1, #1
    fe36:	7581      	strb	r1, [r0, #22]
    fe38:	bd10      	pop	{r4, pc}

0000fe3a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    fe3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe3e:	461e      	mov	r6, r3
    fe40:	4613      	mov	r3, r2
    fe42:	460f      	mov	r7, r1
    fe44:	4604      	mov	r4, r0
    fe46:	4631      	mov	r1, r6
    fe48:	4618      	mov	r0, r3
    fe4a:	9a06      	ldr	r2, [sp, #24]
    fe4c:	f000 f864 	bl	ff18 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    fe50:	4605      	mov	r5, r0
    fe52:	42af      	cmp	r7, r5
    fe54:	d201      	bcs.n	fe5a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    fe56:	21ca      	movs	r1, #202	; 0xca
    fe58:	e016      	b.n	fe88 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    fe5a:	2228      	movs	r2, #40	; 0x28
    fe5c:	2100      	movs	r1, #0
    fe5e:	4620      	mov	r0, r4
    fe60:	f7ff f838 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fe64:	f64f 70ff 	movw	r0, #65535	; 0xffff
    fe68:	82a0      	strh	r0, [r4, #20]
    fe6a:	3d28      	subs	r5, #40	; 0x28
    fe6c:	b2a8      	uxth	r0, r5
    fe6e:	7766      	strb	r6, [r4, #29]
    fe70:	8060      	strh	r0, [r4, #2]
    fe72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    fe76:	d901      	bls.n	fe7c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x42>
    fe78:	21d0      	movs	r1, #208	; 0xd0
    fe7a:	e005      	b.n	fe88 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4e>
    fe7c:	f106 013c 	add.w	r1, r6, #60	; 0x3c
    fe80:	3608      	adds	r6, #8
    fe82:	4281      	cmp	r1, r0
    fe84:	d903      	bls.n	fe8e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x54>
    fe86:	21d2      	movs	r1, #210	; 0xd2
    fe88:	2014      	movs	r0, #20
    fe8a:	f7f3 fe7b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe8e:	1b80      	subs	r0, r0, r6
    fe90:	3834      	subs	r0, #52	; 0x34
    fe92:	b280      	uxth	r0, r0
    fe94:	8020      	strh	r0, [r4, #0]
    fe96:	281b      	cmp	r0, #27
    fe98:	d200      	bcs.n	fe9c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x62>
    fe9a:	201b      	movs	r0, #27
    fe9c:	8020      	strh	r0, [r4, #0]
    fe9e:	2000      	movs	r0, #0
    fea0:	77a0      	strb	r0, [r4, #30]
    fea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fea6 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    fea6:	6181      	str	r1, [r0, #24]
    fea8:	6188      	str	r0, [r1, #24]
    feaa:	4770      	bx	lr

0000feac <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    feac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    feb0:	4604      	mov	r4, r0
    feb2:	4689      	mov	r9, r1
    feb4:	8927      	ldrh	r7, [r4, #8]
    feb6:	f8b4 800a 	ldrh.w	r8, [r4, #10]
    feba:	88a1      	ldrh	r1, [r4, #4]
    febc:	4616      	mov	r6, r2
    febe:	3028      	adds	r0, #40	; 0x28
    fec0:	f427 4200 	bic.w	r2, r7, #32768	; 0x8000
    fec4:	1885      	adds	r5, r0, r2
    fec6:	4638      	mov	r0, r7
    fec8:	f7ff fce4 	bl	f894 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
    fecc:	b110      	cbz	r0, fed4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    fece:	2000      	movs	r0, #0
    fed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fed4:	b10e      	cbz	r6, feda <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2e>
    fed6:	1d68      	adds	r0, r5, #5
    fed8:	6030      	str	r0, [r6, #0]
    feda:	f1b9 0f00 	cmp.w	r9, #0
    fede:	d004      	beq.n	feea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x3e>
    fee0:	7f62      	ldrb	r2, [r4, #29]
    fee2:	1d69      	adds	r1, r5, #5
    fee4:	4648      	mov	r0, r9
    fee6:	f7f3 fcc3 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    feea:	882e      	ldrh	r6, [r5, #0]
    feec:	8869      	ldrh	r1, [r5, #2]
    feee:	f104 0008 	add.w	r0, r4, #8
    fef2:	b121      	cbz	r1, fefe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x52>
    fef4:	198a      	adds	r2, r1, r6
    fef6:	b296      	uxth	r6, r2
    fef8:	f7ff fcbc 	bl	f874 <sdc_hci_cmd_lc_read_remote_version_information+0x38>
    fefc:	e006      	b.n	ff0c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x60>
    fefe:	7f63      	ldrb	r3, [r4, #29]
    ff00:	8862      	ldrh	r2, [r4, #2]
    ff02:	3308      	adds	r3, #8
    ff04:	1999      	adds	r1, r3, r6
    ff06:	b289      	uxth	r1, r1
    ff08:	f7ff fc9a 	bl	f840 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ff0c:	4547      	cmp	r7, r8
    ff0e:	d101      	bne.n	ff14 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x68>
    ff10:	8920      	ldrh	r0, [r4, #8]
    ff12:	8160      	strh	r0, [r4, #10]
    ff14:	4630      	mov	r0, r6
    ff16:	e7db      	b.n	fed0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>

0000ff18 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    ff18:	f101 0308 	add.w	r3, r1, #8
    ff1c:	4418      	add	r0, r3
    ff1e:	4350      	muls	r0, r2
    ff20:	314a      	adds	r1, #74	; 0x4a
    ff22:	4408      	add	r0, r1
    ff24:	b280      	uxth	r0, r0
    ff26:	4770      	bx	lr

0000ff28 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    ff28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff2c:	4688      	mov	r8, r1
    ff2e:	88c1      	ldrh	r1, [r0, #6]
    ff30:	4604      	mov	r4, r0
    ff32:	8900      	ldrh	r0, [r0, #8]
    ff34:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    ff38:	f104 0628 	add.w	r6, r4, #40	; 0x28
    ff3c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ff40:	eb06 0905 	add.w	r9, r6, r5
    ff44:	f7ff fcac 	bl	f8a0 <sdc_hci_cmd_lc_read_remote_version_information+0x64>
    ff48:	2300      	movs	r3, #0
    ff4a:	bb80      	cbnz	r0, ffae <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x86>
    ff4c:	7f60      	ldrb	r0, [r4, #29]
    ff4e:	42af      	cmp	r7, r5
    ff50:	d904      	bls.n	ff5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x34>
    ff52:	1b79      	subs	r1, r7, r5
    ff54:	3008      	adds	r0, #8
    ff56:	1a09      	subs	r1, r1, r0
    ff58:	2700      	movs	r7, #0
    ff5a:	e003      	b.n	ff64 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3c>
    ff5c:	8861      	ldrh	r1, [r4, #2]
    ff5e:	3008      	adds	r0, #8
    ff60:	1b49      	subs	r1, r1, r5
    ff62:	1a09      	subs	r1, r1, r0
    ff64:	2900      	cmp	r1, #0
    ff66:	db23      	blt.n	ffb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    ff68:	89e0      	ldrh	r0, [r4, #14]
    ff6a:	b160      	cbz	r0, ff86 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
    ff6c:	f8b9 0000 	ldrh.w	r0, [r9]
    ff70:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    ff74:	b13a      	cbz	r2, ff86 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x5e>
    ff76:	1ab9      	subs	r1, r7, r2
    ff78:	7723      	strb	r3, [r4, #28]
    ff7a:	4541      	cmp	r1, r8
    ff7c:	db18      	blt.n	ffb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    ff7e:	89e1      	ldrh	r1, [r4, #14]
    ff80:	4431      	add	r1, r6
    ff82:	1a08      	subs	r0, r1, r0
    ff84:	e009      	b.n	ff9a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x72>
    ff86:	1a09      	subs	r1, r1, r0
    ff88:	7723      	strb	r3, [r4, #28]
    ff8a:	4541      	cmp	r1, r8
    ff8c:	db0a      	blt.n	ffa4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x7c>
    ff8e:	7f60      	ldrb	r0, [r4, #29]
    ff90:	89e1      	ldrh	r1, [r4, #14]
    ff92:	3008      	adds	r0, #8
    ff94:	4428      	add	r0, r5
    ff96:	4431      	add	r1, r6
    ff98:	4408      	add	r0, r1
    ff9a:	1ec0      	subs	r0, r0, #3
    ff9c:	f8a4 8012 	strh.w	r8, [r4, #18]
    ffa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ffa4:	4547      	cmp	r7, r8
    ffa6:	db03      	blt.n	ffb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    ffa8:	2101      	movs	r1, #1
    ffaa:	7721      	strb	r1, [r4, #28]
    ffac:	e7e7      	b.n	ff7e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x56>
    ffae:	e7ff      	b.n	ffb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x88>
    ffb0:	8263      	strh	r3, [r4, #18]
    ffb2:	2000      	movs	r0, #0
    ffb4:	e7f4      	b.n	ffa0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x78>

0000ffb6 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    ffb6:	2100      	movs	r1, #0
    ffb8:	81c1      	strh	r1, [r0, #14]
    ffba:	7701      	strb	r1, [r0, #28]
    ffbc:	8241      	strh	r1, [r0, #18]
    ffbe:	75c1      	strb	r1, [r0, #23]
    ffc0:	7581      	strb	r1, [r0, #22]
    ffc2:	4770      	bx	lr

0000ffc4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    ffc4:	b570      	push	{r4, r5, r6, lr}
    ffc6:	2300      	movs	r3, #0
    ffc8:	2908      	cmp	r1, #8
    ffca:	d204      	bcs.n	ffd6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    ffcc:	f240 11cb 	movw	r1, #459	; 0x1cb
    ffd0:	2015      	movs	r0, #21
    ffd2:	f7f3 fdd7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffd6:	6802      	ldr	r2, [r0, #0]
    ffd8:	b90a      	cbnz	r2, ffde <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    ffda:	e01e      	b.n	1001a <CONFIG_PM_SRAM_SIZE+0x1a>
    ffdc:	4610      	mov	r0, r2
    ffde:	6802      	ldr	r2, [r0, #0]
    ffe0:	8893      	ldrh	r3, [r2, #4]
    ffe2:	428b      	cmp	r3, r1
    ffe4:	d002      	beq.n	ffec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    ffe6:	6813      	ldr	r3, [r2, #0]
    ffe8:	2b00      	cmp	r3, #0
    ffea:	d1f7      	bne.n	ffdc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    ffec:	8894      	ldrh	r4, [r2, #4]
    ffee:	4613      	mov	r3, r2
    fff0:	428c      	cmp	r4, r1
    fff2:	d101      	bne.n	fff8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    fff4:	6811      	ldr	r1, [r2, #0]
    fff6:	e00d      	b.n	10014 <CONFIG_PM_SRAM_SIZE+0x14>
    fff8:	f101 0508 	add.w	r5, r1, #8
    fffc:	b2ad      	uxth	r5, r5
    fffe:	42ac      	cmp	r4, r5
   10000:	d30a      	bcc.n	10018 <CONFIG_PM_SRAM_SIZE+0x18>
   10002:	1a64      	subs	r4, r4, r1
   10004:	4411      	add	r1, r2
   10006:	2200      	movs	r2, #0
   10008:	600a      	str	r2, [r1, #0]
   1000a:	808c      	strh	r4, [r1, #4]
   1000c:	6802      	ldr	r2, [r0, #0]
   1000e:	6812      	ldr	r2, [r2, #0]
   10010:	6002      	str	r2, [r0, #0]
   10012:	600a      	str	r2, [r1, #0]
   10014:	6001      	str	r1, [r0, #0]
   10016:	e000      	b.n	1001a <CONFIG_PM_SRAM_SIZE+0x1a>
   10018:	2300      	movs	r3, #0
   1001a:	4618      	mov	r0, r3
   1001c:	bd70      	pop	{r4, r5, r6, pc}

0001001e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   1001e:	b510      	push	{r4, lr}
   10020:	000c      	movs	r4, r1
   10022:	d006      	beq.n	10032 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
   10024:	2c08      	cmp	r4, #8
   10026:	d209      	bcs.n	1003c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
   10028:	f240 1195 	movw	r1, #405	; 0x195
   1002c:	2015      	movs	r0, #21
   1002e:	f7f3 fda9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10032:	b108      	cbz	r0, 10038 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   10034:	2100      	movs	r1, #0
   10036:	6001      	str	r1, [r0, #0]
   10038:	2000      	movs	r0, #0
   1003a:	bd10      	pop	{r4, pc}
   1003c:	b118      	cbz	r0, 10046 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
   1003e:	b2a1      	uxth	r1, r4
   10040:	6800      	ldr	r0, [r0, #0]
   10042:	f000 f814 	bl	1006e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   10046:	1d20      	adds	r0, r4, #4
   10048:	bd10      	pop	{r4, pc}

0001004a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   1004a:	2100      	movs	r1, #0
   1004c:	6802      	ldr	r2, [r0, #0]
   1004e:	e003      	b.n	10058 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   10050:	8893      	ldrh	r3, [r2, #4]
   10052:	6812      	ldr	r2, [r2, #0]
   10054:	4419      	add	r1, r3
   10056:	b289      	uxth	r1, r1
   10058:	2a00      	cmp	r2, #0
   1005a:	d1f9      	bne.n	10050 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   1005c:	f000 b807 	b.w	1006e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00010060 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   10060:	2300      	movs	r3, #0
   10062:	600b      	str	r3, [r1, #0]
   10064:	808a      	strh	r2, [r1, #4]
   10066:	6802      	ldr	r2, [r0, #0]
   10068:	600a      	str	r2, [r1, #0]
   1006a:	6001      	str	r1, [r0, #0]
   1006c:	4770      	bx	lr
   1006e:	2300      	movs	r3, #0
   10070:	6043      	str	r3, [r0, #4]
   10072:	1d02      	adds	r2, r0, #4
   10074:	8101      	strh	r1, [r0, #8]
   10076:	6002      	str	r2, [r0, #0]
   10078:	4770      	bx	lr

0001007a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
   1007a:	b50e      	push	{r1, r2, r3, lr}
   1007c:	4669      	mov	r1, sp
   1007e:	f000 f818 	bl	100b2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10082:	b120      	cbz	r0, 1008e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
   10084:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   10088:	2017      	movs	r0, #23
   1008a:	f7f3 fd7b 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1008e:	4668      	mov	r0, sp
   10090:	f7f3 ffa0 	bl	3fd4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10094:	b108      	cbz	r0, 1009a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
   10096:	2000      	movs	r0, #0
   10098:	bd0e      	pop	{r1, r2, r3, pc}
   1009a:	2001      	movs	r0, #1
   1009c:	bd0e      	pop	{r1, r2, r3, pc}

0001009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   1009e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   100a2:	3aff      	subs	r2, #255	; 0xff
   100a4:	d001      	beq.n	100aa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   100a6:	2902      	cmp	r1, #2
   100a8:	d301      	bcc.n	100ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   100aa:	2000      	movs	r0, #0
   100ac:	4770      	bx	lr
   100ae:	f7f4 b827 	b.w	4100 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>

000100b2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
   100b2:	b570      	push	{r4, r5, r6, lr}
   100b4:	4605      	mov	r5, r0
   100b6:	460c      	mov	r4, r1
   100b8:	4608      	mov	r0, r1
   100ba:	f000 f8b0 	bl	1021e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
   100be:	b108      	cbz	r0, 100c4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
   100c0:	2010      	movs	r0, #16
   100c2:	bd70      	pop	{r4, r5, r6, pc}
   100c4:	2d02      	cmp	r5, #2
   100c6:	d301      	bcc.n	100cc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
   100c8:	2007      	movs	r0, #7
   100ca:	bd70      	pop	{r4, r5, r6, pc}
   100cc:	7025      	strb	r5, [r4, #0]
   100ce:	2000      	movs	r0, #0
   100d0:	8060      	strh	r0, [r4, #2]
   100d2:	bd70      	pop	{r4, r5, r6, pc}
   100d4:	b510      	push	{r4, lr}
   100d6:	4604      	mov	r4, r0
   100d8:	f7f3 ffd4 	bl	4084 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
   100dc:	42a0      	cmp	r0, r4
   100de:	d901      	bls.n	100e4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
   100e0:	2001      	movs	r0, #1
   100e2:	bd10      	pop	{r4, pc}
   100e4:	2000      	movs	r0, #0
   100e6:	bd10      	pop	{r4, pc}

000100e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   100e8:	b570      	push	{r4, r5, r6, lr}
   100ea:	460e      	mov	r6, r1
   100ec:	461d      	mov	r5, r3
   100ee:	4611      	mov	r1, r2
   100f0:	f000 f811 	bl	10116 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
   100f4:	4604      	mov	r4, r0
   100f6:	4629      	mov	r1, r5
   100f8:	4630      	mov	r0, r6
   100fa:	f000 f803 	bl	10104 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
   100fe:	4420      	add	r0, r4
   10100:	1d00      	adds	r0, r0, #4
   10102:	bd70      	pop	{r4, r5, r6, pc}
   10104:	b510      	push	{r4, lr}
   10106:	460a      	mov	r2, r1
   10108:	2101      	movs	r1, #1
   1010a:	f7ff ff05 	bl	ff18 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1010e:	1cc0      	adds	r0, r0, #3
   10110:	f020 0003 	bic.w	r0, r0, #3
   10114:	bd10      	pop	{r4, pc}
   10116:	b510      	push	{r4, lr}
   10118:	460a      	mov	r2, r1
   1011a:	2101      	movs	r1, #1
   1011c:	f7ff fefc 	bl	ff18 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   10120:	1cc0      	adds	r0, r0, #3
   10122:	f020 0003 	bic.w	r0, r0, #3
   10126:	bd10      	pop	{r4, pc}
   10128:	2800      	cmp	r0, #0
   1012a:	db09      	blt.n	10140 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
   1012c:	f000 021f 	and.w	r2, r0, #31
   10130:	2101      	movs	r1, #1
   10132:	4091      	lsls	r1, r2
   10134:	0940      	lsrs	r0, r0, #5
   10136:	0080      	lsls	r0, r0, #2
   10138:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1013c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10140:	4770      	bx	lr

00010142 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   10142:	f7f4 b9cd 	b.w	44e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   10146:	f7f1 bab9 	b.w	16bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   1014a:	b570      	push	{r4, r5, r6, lr}
   1014c:	4605      	mov	r5, r0
   1014e:	2000      	movs	r0, #0
   10150:	f7f4 fa8c 	bl	466c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x20>
   10154:	0004      	movs	r4, r0
   10156:	d105      	bne.n	10164 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x22>
   10158:	4628      	mov	r0, r5
   1015a:	f7f4 fca3 	bl	4aa4 <sym_TQOU6M5FOJGYBQ73ADAMFJFBW345AJHKSTMZKNQ>
   1015e:	2001      	movs	r0, #1
   10160:	f7f4 fa84 	bl	466c <sym_FRQCN2KJNNZFYMAUJKFDGLFKE5V5FBD7HJ4IAKQ+0x20>
   10164:	4620      	mov	r0, r4
   10166:	bd70      	pop	{r4, r5, r6, pc}

00010168 <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY>:
   10168:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1016c:	6909      	ldr	r1, [r1, #16]
   1016e:	1e49      	subs	r1, r1, #1
   10170:	4388      	bics	r0, r1
   10172:	4770      	bx	lr
   10174:	2800      	cmp	r0, #0
   10176:	db09      	blt.n	1018c <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY+0x24>
   10178:	f000 021f 	and.w	r2, r0, #31
   1017c:	2101      	movs	r1, #1
   1017e:	4091      	lsls	r1, r2
   10180:	0940      	lsrs	r0, r0, #5
   10182:	0080      	lsls	r0, r0, #2
   10184:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10188:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1018c:	4770      	bx	lr
   1018e:	2800      	cmp	r0, #0
   10190:	db0d      	blt.n	101ae <sym_ATM4LDAGOCXPVS3IUTS42Y2BLFSC3BZI66JOPMY+0x46>
   10192:	f000 021f 	and.w	r2, r0, #31
   10196:	2101      	movs	r1, #1
   10198:	4091      	lsls	r1, r2
   1019a:	0940      	lsrs	r0, r0, #5
   1019c:	0080      	lsls	r0, r0, #2
   1019e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101a2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   101a6:	f3bf 8f4f 	dsb	sy
   101aa:	f3bf 8f6f 	isb	sy
   101ae:	4770      	bx	lr

000101b0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
   101b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   101b4:	2000      	movs	r0, #0
   101b6:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   101ba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   101be:	2001      	movs	r0, #1
   101c0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   101c4:	4770      	bx	lr
   101c6:	2800      	cmp	r0, #0
   101c8:	db04      	blt.n	101d4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x24>
   101ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101ce:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
   101d2:	e005      	b.n	101e0 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x30>
   101d4:	f000 000f 	and.w	r0, r0, #15
   101d8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101dc:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
   101e0:	0940      	lsrs	r0, r0, #5
   101e2:	4770      	bx	lr
   101e4:	f810 1f41 	ldrb.w	r1, [r0, #65]!
   101e8:	7840      	ldrb	r0, [r0, #1]
   101ea:	4281      	cmp	r1, r0
   101ec:	d301      	bcc.n	101f2 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x42>
   101ee:	1a08      	subs	r0, r1, r0
   101f0:	e002      	b.n	101f8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x48>
   101f2:	f1c0 0041 	rsb	r0, r0, #65	; 0x41
   101f6:	4408      	add	r0, r1
   101f8:	b2c0      	uxtb	r0, r0
   101fa:	4770      	bx	lr
   101fc:	f810 1f41 	ldrb.w	r1, [r0, #65]!
   10200:	2241      	movs	r2, #65	; 0x41
   10202:	1c49      	adds	r1, r1, #1
   10204:	fbb1 f3f2 	udiv	r3, r1, r2
   10208:	fb02 1113 	mls	r1, r2, r3, r1
   1020c:	7840      	ldrb	r0, [r0, #1]
   1020e:	4281      	cmp	r1, r0
   10210:	d101      	bne.n	10216 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A+0x66>
   10212:	2001      	movs	r0, #1
   10214:	4770      	bx	lr
   10216:	2000      	movs	r0, #0
   10218:	4770      	bx	lr

0001021a <sym_L2Q2RRM2AUTHKDBBOOJKGD25HNDEXGOAO2RVWJY>:
   1021a:	2040      	movs	r0, #64	; 0x40
   1021c:	4770      	bx	lr

0001021e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
   1021e:	b108      	cbz	r0, 10224 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
   10220:	2000      	movs	r0, #0
   10222:	4770      	bx	lr
   10224:	2001      	movs	r0, #1
   10226:	4770      	bx	lr

00010228 <sym_7CQPRIENPSEG44TGL6Z3BVGO7DIMXJIZVLL4DWI>:
   10228:	2000      	movs	r0, #0
   1022a:	4770      	bx	lr

0001022c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   1022c:	b510      	push	{r4, lr}
   1022e:	2900      	cmp	r1, #0
   10230:	4604      	mov	r4, r0
   10232:	f04f 0106 	mov.w	r1, #6
   10236:	d002      	beq.n	1023e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   10238:	f7f4 fcfa 	bl	4c30 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
   1023c:	e001      	b.n	10242 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   1023e:	f7f4 fd0d 	bl	4c5c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   10242:	7960      	ldrb	r0, [r4, #5]
   10244:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   10248:	7160      	strb	r0, [r4, #5]
   1024a:	bd10      	pop	{r4, pc}

0001024c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   1024c:	b530      	push	{r4, r5, lr}
   1024e:	460c      	mov	r4, r1
   10250:	4605      	mov	r5, r0
   10252:	b08d      	sub	sp, #52	; 0x34
   10254:	f04f 0103 	mov.w	r1, #3
   10258:	f104 0003 	add.w	r0, r4, #3
   1025c:	b112      	cbz	r2, 10264 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   1025e:	f7f4 fce7 	bl	4c30 <sym_P6K4PWFIUTLB5PEOIIMIJKUC3RGJ5ERWNYQK34Y>
   10262:	e001      	b.n	10268 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   10264:	f7f4 fcfa 	bl	4c5c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   10268:	7960      	ldrb	r0, [r4, #5]
   1026a:	220d      	movs	r2, #13
   1026c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   10270:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   10274:	7160      	strb	r0, [r4, #5]
   10276:	2100      	movs	r1, #0
   10278:	a804      	add	r0, sp, #16
   1027a:	f7fe fe2b 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1027e:	78e0      	ldrb	r0, [r4, #3]
   10280:	f88d 001f 	strb.w	r0, [sp, #31]
   10284:	7920      	ldrb	r0, [r4, #4]
   10286:	f88d 001e 	strb.w	r0, [sp, #30]
   1028a:	7960      	ldrb	r0, [r4, #5]
   1028c:	f88d 001d 	strb.w	r0, [sp, #29]
   10290:	6828      	ldr	r0, [r5, #0]
   10292:	9000      	str	r0, [sp, #0]
   10294:	6868      	ldr	r0, [r5, #4]
   10296:	9001      	str	r0, [sp, #4]
   10298:	68a8      	ldr	r0, [r5, #8]
   1029a:	9002      	str	r0, [sp, #8]
   1029c:	68e8      	ldr	r0, [r5, #12]
   1029e:	9003      	str	r0, [sp, #12]
   102a0:	4668      	mov	r0, sp
   102a2:	f7ff ff4e 	bl	10142 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   102a6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   102aa:	7020      	strb	r0, [r4, #0]
   102ac:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   102b0:	7060      	strb	r0, [r4, #1]
   102b2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   102b6:	70a0      	strb	r0, [r4, #2]
   102b8:	b00d      	add	sp, #52	; 0x34
   102ba:	bd30      	pop	{r4, r5, pc}

000102bc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   102bc:	b510      	push	{r4, lr}
   102be:	f7fd f8c5 	bl	d44c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   102c2:	2800      	cmp	r0, #0
   102c4:	bf04      	itt	eq
   102c6:	20ff      	moveq	r0, #255	; 0xff
   102c8:	bd10      	popeq	{r4, pc}
   102ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102ce:	f7fd b87b 	b.w	d3c8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

000102d2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   102d2:	b510      	push	{r4, lr}
   102d4:	f7f6 f812 	bl	62fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   102d8:	2810      	cmp	r0, #16
   102da:	bf04      	itt	eq
   102dc:	2000      	moveq	r0, #0
   102de:	bd10      	popeq	{r4, pc}
   102e0:	f7f6 f8c6 	bl	6470 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x218>
   102e4:	2001      	movs	r0, #1
   102e6:	bd10      	pop	{r4, pc}

000102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   102e8:	b570      	push	{r4, r5, r6, lr}
   102ea:	460c      	mov	r4, r1
   102ec:	4605      	mov	r5, r0
   102ee:	2100      	movs	r1, #0
   102f0:	f7ff fed5 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   102f4:	6060      	str	r0, [r4, #4]
   102f6:	b110      	cbz	r0, 102fe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   102f8:	2000      	movs	r0, #0
   102fa:	7020      	strb	r0, [r4, #0]
   102fc:	bd70      	pop	{r4, r5, r6, pc}
   102fe:	2101      	movs	r1, #1
   10300:	4628      	mov	r0, r5
   10302:	f7ff fecc 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10306:	6060      	str	r0, [r4, #4]
   10308:	2800      	cmp	r0, #0
   1030a:	bf04      	itt	eq
   1030c:	2002      	moveq	r0, #2
   1030e:	bd70      	popeq	{r4, r5, r6, pc}
   10310:	2001      	movs	r0, #1
   10312:	7020      	strb	r0, [r4, #0]
   10314:	2000      	movs	r0, #0
   10316:	bd70      	pop	{r4, r5, r6, pc}

00010318 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   10318:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
   1031c:	2906      	cmp	r1, #6
   1031e:	bf9a      	itte	ls
   10320:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   10324:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
   10328:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   1032c:	4348      	muls	r0, r1
   1032e:	4770      	bx	lr

00010330 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   10330:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
   10334:	f241 7270 	movw	r2, #6000	; 0x1770
   10338:	4291      	cmp	r1, r2
   1033a:	bf94      	ite	ls
   1033c:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   10340:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   10344:	fbb0 f0f1 	udiv	r0, r0, r1
   10348:	bf98      	it	ls
   1034a:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
   1034e:	b280      	uxth	r0, r0
   10350:	4770      	bx	lr

00010352 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   10352:	b570      	push	{r4, r5, r6, lr}
   10354:	4604      	mov	r4, r0
   10356:	4290      	cmp	r0, r2
   10358:	bf28      	it	cs
   1035a:	bd70      	popcs	{r4, r5, r6, pc}
   1035c:	1b10      	subs	r0, r2, r4
   1035e:	2864      	cmp	r0, #100	; 0x64
   10360:	d30b      	bcc.n	1037a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
   10362:	1825      	adds	r5, r4, r0
   10364:	428d      	cmp	r5, r1
   10366:	d806      	bhi.n	10376 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
   10368:	2104      	movs	r1, #4
   1036a:	f7f0 ff5b 	bl	1224 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1036e:	2800      	cmp	r0, #0
   10370:	bf04      	itt	eq
   10372:	4628      	moveq	r0, r5
   10374:	bd70      	popeq	{r4, r5, r6, pc}
   10376:	4620      	mov	r0, r4
   10378:	bd70      	pop	{r4, r5, r6, pc}
   1037a:	2064      	movs	r0, #100	; 0x64
   1037c:	e7f1      	b.n	10362 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

0001037e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   1037e:	290c      	cmp	r1, #12
   10380:	d265      	bcs.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10382:	e8df f001 	tbb	[pc, r1]
   10386:	0906      	.short	0x0906
   10388:	1b16130e 	.word	0x1b16130e
   1038c:	5e433c32 	.word	0x5e433c32
   10390:	504a      	.short	0x504a
   10392:	2a00      	cmp	r2, #0
   10394:	d05d      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10396:	e05a      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10398:	2a07      	cmp	r2, #7
   1039a:	bf18      	it	ne
   1039c:	2a08      	cmpne	r2, #8
   1039e:	d058      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103a0:	e055      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103a2:	2a0c      	cmp	r2, #12
   103a4:	bf18      	it	ne
   103a6:	2a0b      	cmpne	r2, #11
   103a8:	d053      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103aa:	e050      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103ac:	2a0d      	cmp	r2, #13
   103ae:	d050      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103b0:	e04d      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103b2:	f1a2 000f 	sub.w	r0, r2, #15
   103b6:	280c      	cmp	r0, #12
   103b8:	d94b      	bls.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103ba:	e048      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103bc:	b123      	cbz	r3, 103c8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x4a>
   103be:	f1a2 0010 	sub.w	r0, r2, #16
   103c2:	280b      	cmp	r0, #11
   103c4:	d945      	bls.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103c6:	e042      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103c8:	2a12      	cmp	r2, #18
   103ca:	bf18      	it	ne
   103cc:	2a11      	cmpne	r2, #17
   103ce:	d040      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103d0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
   103d4:	b120      	cbz	r0, 103e0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x62>
   103d6:	2a12      	cmp	r2, #18
   103d8:	d339      	bcc.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103da:	2a1a      	cmp	r2, #26
   103dc:	d939      	bls.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103de:	e036      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103e0:	2a16      	cmp	r2, #22
   103e2:	d334      	bcc.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103e4:	2a1a      	cmp	r2, #26
   103e6:	d934      	bls.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103e8:	e031      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103ea:	f1a2 010f 	sub.w	r1, r2, #15
   103ee:	2903      	cmp	r1, #3
   103f0:	d92f      	bls.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103f2:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
   103f6:	b318      	cbz	r0, 10440 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc2>
   103f8:	2a1b      	cmp	r2, #27
   103fa:	d92a      	bls.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   103fc:	e027      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   103fe:	b113      	cbz	r3, 10406 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x88>
   10400:	2a04      	cmp	r2, #4
   10402:	d026      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10404:	e023      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10406:	2a04      	cmp	r2, #4
   10408:	d121      	bne.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1040a:	e022      	b.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1040c:	b113      	cbz	r3, 10414 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x96>
   1040e:	2a06      	cmp	r2, #6
   10410:	d01f      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10412:	e01c      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10414:	2a01      	cmp	r2, #1
   10416:	d11a      	bne.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10418:	e01b      	b.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1041a:	2a1c      	cmp	r2, #28
   1041c:	bf1c      	itt	ne
   1041e:	2a1d      	cmpne	r2, #29
   10420:	2a1e      	cmpne	r2, #30
   10422:	d016      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10424:	e013      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10426:	2a1f      	cmp	r2, #31
   10428:	bf18      	it	ne
   1042a:	2a20      	cmpne	r2, #32
   1042c:	d011      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1042e:	2a21      	cmp	r2, #33	; 0x21
   10430:	bf18      	it	ne
   10432:	2a22      	cmpne	r2, #34	; 0x22
   10434:	d00d      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10436:	2a23      	cmp	r2, #35	; 0x23
   10438:	bf1c      	itt	ne
   1043a:	2a24      	cmpne	r2, #36	; 0x24
   1043c:	2a26      	cmpne	r2, #38	; 0x26
   1043e:	d008      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10440:	e005      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   10442:	b113      	cbz	r3, 1044a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xcc>
   10444:	2a0e      	cmp	r2, #14
   10446:	d004      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   10448:	e001      	b.n	1044e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd0>
   1044a:	2a05      	cmp	r2, #5
   1044c:	d001      	beq.n	10452 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xd4>
   1044e:	2000      	movs	r0, #0
   10450:	4770      	bx	lr
   10452:	2001      	movs	r0, #1
   10454:	4770      	bx	lr

00010456 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   10456:	280c      	cmp	r0, #12
   10458:	bf18      	it	ne
   1045a:	280b      	cmpne	r0, #11
   1045c:	d010      	beq.n	10480 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   1045e:	280d      	cmp	r0, #13
   10460:	bf18      	it	ne
   10462:	281f      	cmpne	r0, #31
   10464:	d00c      	beq.n	10480 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   10466:	2820      	cmp	r0, #32
   10468:	bf18      	it	ne
   1046a:	2821      	cmpne	r0, #33	; 0x21
   1046c:	d008      	beq.n	10480 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   1046e:	2822      	cmp	r0, #34	; 0x22
   10470:	bf18      	it	ne
   10472:	2823      	cmpne	r0, #35	; 0x23
   10474:	d004      	beq.n	10480 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2a>
   10476:	2824      	cmp	r0, #36	; 0x24
   10478:	bf1e      	ittt	ne
   1047a:	2826      	cmpne	r0, #38	; 0x26
   1047c:	2000      	movne	r0, #0
   1047e:	4770      	bxne	lr
   10480:	f04f 0001 	mov.w	r0, #1
   10484:	4770      	bx	lr

00010486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   10486:	f011 0f0c 	tst.w	r1, #12
   1048a:	d013      	beq.n	104b4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2e>
   1048c:	f001 0104 	and.w	r1, r1, #4
   10490:	2900      	cmp	r1, #0
   10492:	bf0d      	iteet	eq
   10494:	2240      	moveq	r2, #64	; 0x40
   10496:	2210      	movne	r2, #16
   10498:	2196      	movne	r1, #150	; 0x96
   1049a:	f44f 7116 	moveq.w	r1, #600	; 0x258
   1049e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   104a2:	eba0 0301 	sub.w	r3, r0, r1
   104a6:	4288      	cmp	r0, r1
   104a8:	bf88      	it	hi
   104aa:	fb93 f0f2 	sdivhi	r0, r3, r2
   104ae:	d90e      	bls.n	104ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   104b0:	b280      	uxth	r0, r0
   104b2:	4770      	bx	lr
   104b4:	2902      	cmp	r1, #2
   104b6:	d002      	beq.n	104be <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
   104b8:	2870      	cmp	r0, #112	; 0x70
   104ba:	d908      	bls.n	104ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   104bc:	e009      	b.n	104d2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4c>
   104be:	283c      	cmp	r0, #60	; 0x3c
   104c0:	d905      	bls.n	104ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x48>
   104c2:	383c      	subs	r0, #60	; 0x3c
   104c4:	17c1      	asrs	r1, r0, #31
   104c6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   104ca:	1080      	asrs	r0, r0, #2
   104cc:	e7f0      	b.n	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   104ce:	2000      	movs	r0, #0
   104d0:	e7ee      	b.n	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>
   104d2:	3870      	subs	r0, #112	; 0x70
   104d4:	17c1      	asrs	r1, r0, #31
   104d6:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   104da:	10c0      	asrs	r0, r0, #3
   104dc:	e7e8      	b.n	104b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2a>

000104de <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   104de:	6809      	ldr	r1, [r1, #0]
   104e0:	f8c0 1062 	str.w	r1, [r0, #98]	; 0x62
   104e4:	4770      	bx	lr

000104e6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   104e6:	f010 0f01 	tst.w	r0, #1
   104ea:	bf1c      	itt	ne
   104ec:	2001      	movne	r0, #1
   104ee:	4770      	bxne	lr
   104f0:	f010 0f02 	tst.w	r0, #2
   104f4:	bf1c      	itt	ne
   104f6:	2002      	movne	r0, #2
   104f8:	4770      	bxne	lr
   104fa:	f010 0004 	ands.w	r0, r0, #4
   104fe:	bf18      	it	ne
   10500:	2008      	movne	r0, #8
   10502:	4770      	bx	lr

00010504 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   10504:	2901      	cmp	r1, #1
   10506:	d002      	beq.n	1050e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0xa>
   10508:	2902      	cmp	r1, #2
   1050a:	d005      	beq.n	10518 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x14>
   1050c:	e007      	b.n	1051e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
   1050e:	2800      	cmp	r0, #0
   10510:	bf04      	itt	eq
   10512:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   10516:	4770      	bxeq	lr
   10518:	f640 10c4 	movw	r0, #2500	; 0x9c4
   1051c:	4770      	bx	lr
   1051e:	b510      	push	{r4, lr}
   10520:	f240 514a 	movw	r1, #1354	; 0x54a
   10524:	2029      	movs	r0, #41	; 0x29
   10526:	f7f3 fb2d 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001052a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
   1052a:	2a16      	cmp	r2, #22
   1052c:	d110      	bne.n	10550 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   1052e:	222a      	movs	r2, #42	; 0x2a
   10530:	280c      	cmp	r0, #12
   10532:	bf18      	it	ne
   10534:	280d      	cmpne	r0, #13
   10536:	d00f      	beq.n	10558 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   10538:	f04f 0c23 	mov.w	ip, #35	; 0x23
   1053c:	281f      	cmp	r0, #31
   1053e:	d00d      	beq.n	1055c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   10540:	b131      	cbz	r1, 10550 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
   10542:	7808      	ldrb	r0, [r1, #0]
   10544:	2801      	cmp	r0, #1
   10546:	bf18      	it	ne
   10548:	2800      	cmpne	r0, #0
   1054a:	d005      	beq.n	10558 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2e>
   1054c:	2816      	cmp	r0, #22
   1054e:	d005      	beq.n	1055c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x32>
   10550:	2000      	movs	r0, #0
   10552:	4770      	bx	lr
   10554:	2001      	movs	r0, #1
   10556:	4770      	bx	lr
   10558:	701a      	strb	r2, [r3, #0]
   1055a:	e7fb      	b.n	10554 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
   1055c:	f883 c000 	strb.w	ip, [r3]
   10560:	e7f8      	b.n	10554 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>

00010562 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
   10562:	b418      	push	{r3, r4}
   10564:	b2cb      	uxtb	r3, r1
   10566:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   1056a:	b2c1      	uxtb	r1, r0
   1056c:	f3c0 2007 	ubfx	r0, r0, #8, #8
   10570:	2b01      	cmp	r3, #1
   10572:	d005      	beq.n	10580 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x1e>
   10574:	2b02      	cmp	r3, #2
   10576:	bf08      	it	eq
   10578:	f1bc 0f02 	cmpeq.w	ip, #2
   1057c:	d01a      	beq.n	105b4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   1057e:	e002      	b.n	10586 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
   10580:	f1bc 0f01 	cmp.w	ip, #1
   10584:	d016      	beq.n	105b4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   10586:	2901      	cmp	r1, #1
   10588:	d004      	beq.n	10594 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x32>
   1058a:	2902      	cmp	r1, #2
   1058c:	bf08      	it	eq
   1058e:	2802      	cmpeq	r0, #2
   10590:	d010      	beq.n	105b4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   10592:	e001      	b.n	10598 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
   10594:	2801      	cmp	r0, #1
   10596:	d00d      	beq.n	105b4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x52>
   10598:	ea01 010c 	and.w	r1, r1, ip
   1059c:	f361 0207 	bfi	r2, r1, #0, #8
   105a0:	4018      	ands	r0, r3
   105a2:	f360 220f 	bfi	r2, r0, #8, #8
   105a6:	b2d0      	uxtb	r0, r2
   105a8:	f010 0f02 	tst.w	r0, #2
   105ac:	bf18      	it	ne
   105ae:	2002      	movne	r0, #2
   105b0:	d10b      	bne.n	105ca <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x68>
   105b2:	e006      	b.n	105c2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x60>
   105b4:	4008      	ands	r0, r1
   105b6:	ea03 010c 	and.w	r1, r3, ip
   105ba:	4008      	ands	r0, r1
   105bc:	f360 0207 	bfi	r2, r0, #0, #8
   105c0:	e7ef      	b.n	105a2 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x40>
   105c2:	f010 0001 	ands.w	r0, r0, #1
   105c6:	bf18      	it	ne
   105c8:	2001      	movne	r0, #1
   105ca:	f88d 0000 	strb.w	r0, [sp]
   105ce:	f3c2 2007 	ubfx	r0, r2, #8, #8
   105d2:	f010 0f02 	tst.w	r0, #2
   105d6:	bf18      	it	ne
   105d8:	2002      	movne	r0, #2
   105da:	d103      	bne.n	105e4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x82>
   105dc:	f010 0001 	ands.w	r0, r0, #1
   105e0:	bf18      	it	ne
   105e2:	2001      	movne	r0, #1
   105e4:	f88d 0001 	strb.w	r0, [sp, #1]
   105e8:	f8bd 0000 	ldrh.w	r0, [sp]
   105ec:	bc18      	pop	{r3, r4}
   105ee:	4770      	bx	lr

000105f0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   105f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105f4:	460c      	mov	r4, r1
   105f6:	4605      	mov	r5, r0
   105f8:	68c7      	ldr	r7, [r0, #12]
   105fa:	f7f1 fa99 	bl	1b30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   105fe:	b198      	cbz	r0, 10628 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
   10600:	b1bc      	cbz	r4, 10632 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   10602:	4638      	mov	r0, r7
   10604:	68e9      	ldr	r1, [r5, #12]
   10606:	f7f0 ff3b 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   1060a:	2800      	cmp	r0, #0
   1060c:	dd11      	ble.n	10632 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
   1060e:	4420      	add	r0, r4
   10610:	1e40      	subs	r0, r0, #1
   10612:	fbb0 f6f4 	udiv	r6, r0, r4
   10616:	fb06 f104 	mul.w	r1, r6, r4
   1061a:	4638      	mov	r0, r7
   1061c:	f7f0 fefa 	bl	1414 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
   10620:	60e8      	str	r0, [r5, #12]
   10622:	4630      	mov	r0, r6
   10624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10628:	f240 31cf 	movw	r1, #975	; 0x3cf
   1062c:	2029      	movs	r0, #41	; 0x29
   1062e:	f7f3 faa9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10632:	2000      	movs	r0, #0
   10634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010638 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
   10638:	b538      	push	{r3, r4, r5, lr}
   1063a:	4605      	mov	r5, r0
   1063c:	460c      	mov	r4, r1
   1063e:	4668      	mov	r0, sp
   10640:	f7fd fede 	bl	e400 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   10644:	2800      	cmp	r0, #0
   10646:	bf08      	it	eq
   10648:	bd38      	popeq	{r3, r4, r5, pc}
   1064a:	f99d 2000 	ldrsb.w	r2, [sp]
   1064e:	7222      	strb	r2, [r4, #8]
   10650:	7ee0      	ldrb	r0, [r4, #27]
   10652:	7260      	strb	r0, [r4, #9]
   10654:	f994 100a 	ldrsb.w	r1, [r4, #10]
   10658:	2000      	movs	r0, #0
   1065a:	1a51      	subs	r1, r2, r1
   1065c:	bf48      	it	mi
   1065e:	4249      	negmi	r1, r1
   10660:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   10664:	428b      	cmp	r3, r1
   10666:	bfc8      	it	gt
   10668:	bd38      	popgt	{r3, r4, r5, pc}
   1066a:	2bff      	cmp	r3, #255	; 0xff
   1066c:	bf08      	it	eq
   1066e:	bd38      	popeq	{r3, r4, r5, pc}
   10670:	7ae1      	ldrb	r1, [r4, #11]
   10672:	1c49      	adds	r1, r1, #1
   10674:	b2c9      	uxtb	r1, r1
   10676:	72e1      	strb	r1, [r4, #11]
   10678:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1067c:	4299      	cmp	r1, r3
   1067e:	d803      	bhi.n	10688 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
   10680:	7aa1      	ldrb	r1, [r4, #10]
   10682:	297f      	cmp	r1, #127	; 0x7f
   10684:	bf18      	it	ne
   10686:	bd38      	popne	{r3, r4, r5, pc}
   10688:	72a2      	strb	r2, [r4, #10]
   1068a:	2000      	movs	r0, #0
   1068c:	72e0      	strb	r0, [r4, #11]
   1068e:	2001      	movs	r0, #1
   10690:	bd38      	pop	{r3, r4, r5, pc}

00010692 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   10692:	2300      	movs	r3, #0
   10694:	6203      	str	r3, [r0, #32]
   10696:	8502      	strh	r2, [r0, #40]	; 0x28
   10698:	f240 2371 	movw	r3, #625	; 0x271
   1069c:	435a      	muls	r2, r3
   1069e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   106a2:	1e52      	subs	r2, r2, #1
   106a4:	fbb2 f1f1 	udiv	r1, r2, r1
   106a8:	6241      	str	r1, [r0, #36]	; 0x24
   106aa:	4770      	bx	lr

000106ac <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
   106ac:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   106b0:	4607      	mov	r7, r0
   106b2:	4691      	mov	r9, r2
   106b4:	468a      	mov	sl, r1
   106b6:	f04f 0801 	mov.w	r8, #1
   106ba:	4608      	mov	r0, r1
   106bc:	f000 f91d 	bl	108fa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
   106c0:	4604      	mov	r4, r0
   106c2:	4650      	mov	r0, sl
   106c4:	f000 f925 	bl	10912 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
   106c8:	4606      	mov	r6, r0
   106ca:	f010 0f01 	tst.w	r0, #1
   106ce:	bf18      	it	ne
   106d0:	2501      	movne	r5, #1
   106d2:	d02a      	beq.n	1072a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x7e>
   106d4:	f014 0f01 	tst.w	r4, #1
   106d8:	bf18      	it	ne
   106da:	f04f 0b01 	movne.w	fp, #1
   106de:	d02f      	beq.n	10740 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x94>
   106e0:	ea55 000b 	orrs.w	r0, r5, fp
   106e4:	bf08      	it	eq
   106e6:	f04f 0800 	moveq.w	r8, #0
   106ea:	f7fc fdfb 	bl	d2e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   106ee:	4230      	tst	r0, r6
   106f0:	bf08      	it	eq
   106f2:	2500      	moveq	r5, #0
   106f4:	f7fc fdf6 	bl	d2e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   106f8:	4220      	tst	r0, r4
   106fa:	bf08      	it	eq
   106fc:	f04f 0b00 	moveq.w	fp, #0
   10700:	f897 0066 	ldrb.w	r0, [r7, #102]	; 0x66
   10704:	42a8      	cmp	r0, r5
   10706:	bf08      	it	eq
   10708:	2500      	moveq	r5, #0
   1070a:	f889 5000 	strb.w	r5, [r9]
   1070e:	f897 0067 	ldrb.w	r0, [r7, #103]	; 0x67
   10712:	4558      	cmp	r0, fp
   10714:	bf08      	it	eq
   10716:	f04f 0b00 	moveq.w	fp, #0
   1071a:	f889 b001 	strb.w	fp, [r9, #1]
   1071e:	2d00      	cmp	r5, #0
   10720:	bf08      	it	eq
   10722:	f1bb 0f00 	cmpeq.w	fp, #0
   10726:	d128      	bne.n	1077a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xce>
   10728:	e018      	b.n	1075c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb0>
   1072a:	f010 0f02 	tst.w	r0, #2
   1072e:	bf18      	it	ne
   10730:	2502      	movne	r5, #2
   10732:	d1cf      	bne.n	106d4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   10734:	f016 0f04 	tst.w	r6, #4
   10738:	bf14      	ite	ne
   1073a:	2508      	movne	r5, #8
   1073c:	2500      	moveq	r5, #0
   1073e:	e7c9      	b.n	106d4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   10740:	f014 0f02 	tst.w	r4, #2
   10744:	bf18      	it	ne
   10746:	f04f 0b02 	movne.w	fp, #2
   1074a:	d1c9      	bne.n	106e0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   1074c:	f014 0f04 	tst.w	r4, #4
   10750:	bf14      	ite	ne
   10752:	f04f 0b08 	movne.w	fp, #8
   10756:	f04f 0b00 	moveq.w	fp, #0
   1075a:	e7c1      	b.n	106e0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   1075c:	4650      	mov	r0, sl
   1075e:	f000 f8d6 	bl	1090e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
   10762:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
   10766:	1a40      	subs	r0, r0, r1
   10768:	b200      	sxth	r0, r0
   1076a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1076e:	4288      	cmp	r0, r1
   10770:	dc01      	bgt.n	10776 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xca>
   10772:	2800      	cmp	r0, #0
   10774:	dc01      	bgt.n	1077a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xce>
   10776:	f04f 0800 	mov.w	r8, #0
   1077a:	4640      	mov	r0, r8
   1077c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

00010780 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   10780:	f2a0 10bf 	subw	r0, r0, #447	; 0x1bf
   10784:	4281      	cmp	r1, r0
   10786:	bf38      	it	cc
   10788:	4608      	movcc	r0, r1
   1078a:	1a08      	subs	r0, r1, r0
   1078c:	6819      	ldr	r1, [r3, #0]
   1078e:	0840      	lsrs	r0, r0, #1
   10790:	4401      	add	r1, r0
   10792:	6019      	str	r1, [r3, #0]
   10794:	6811      	ldr	r1, [r2, #0]
   10796:	eba1 0100 	sub.w	r1, r1, r0
   1079a:	6011      	str	r1, [r2, #0]
   1079c:	bf18      	it	ne
   1079e:	2001      	movne	r0, #1
   107a0:	4770      	bx	lr

000107a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   107a2:	f641 524c 	movw	r2, #7500	; 0x1d4c
   107a6:	4291      	cmp	r1, r2
   107a8:	bf34      	ite	cc
   107aa:	2164      	movcc	r1, #100	; 0x64
   107ac:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   107b0:	4348      	muls	r0, r1
   107b2:	4770      	bx	lr

000107b4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   107b4:	f641 524c 	movw	r2, #7500	; 0x1d4c
   107b8:	4291      	cmp	r1, r2
   107ba:	bf34      	ite	cc
   107bc:	2164      	movcc	r1, #100	; 0x64
   107be:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   107c2:	fb10 f001 	smulbb	r0, r0, r1
   107c6:	4770      	bx	lr
   107c8:	b510      	push	{r4, lr}
   107ca:	7c0a      	ldrb	r2, [r1, #16]
   107cc:	f002 021f 	and.w	r2, r2, #31
   107d0:	740a      	strb	r2, [r1, #16]
   107d2:	2200      	movs	r2, #0
   107d4:	7642      	strb	r2, [r0, #25]
   107d6:	188b      	adds	r3, r1, r2
   107d8:	f893 c00c 	ldrb.w	ip, [r3, #12]
   107dc:	f00c 0301 	and.w	r3, ip, #1
   107e0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   107e4:	f00c 0401 	and.w	r4, ip, #1
   107e8:	4423      	add	r3, r4
   107ea:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   107ee:	f00c 0401 	and.w	r4, ip, #1
   107f2:	4423      	add	r3, r4
   107f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   107f8:	f00c 0401 	and.w	r4, ip, #1
   107fc:	4423      	add	r3, r4
   107fe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10802:	f00c 0401 	and.w	r4, ip, #1
   10806:	4423      	add	r3, r4
   10808:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1080c:	f00c 0401 	and.w	r4, ip, #1
   10810:	4423      	add	r3, r4
   10812:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10816:	f00c 0401 	and.w	r4, ip, #1
   1081a:	4423      	add	r3, r4
   1081c:	eb03 035c 	add.w	r3, r3, ip, lsr #1
   10820:	eb00 0c02 	add.w	ip, r0, r2
   10824:	1c52      	adds	r2, r2, #1
   10826:	f88c 3014 	strb.w	r3, [ip, #20]
   1082a:	f890 c019 	ldrb.w	ip, [r0, #25]
   1082e:	2a05      	cmp	r2, #5
   10830:	4463      	add	r3, ip
   10832:	7643      	strb	r3, [r0, #25]
   10834:	dbcf      	blt.n	107d6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ+0x22>
   10836:	b2d8      	uxtb	r0, r3
   10838:	2825      	cmp	r0, #37	; 0x25
   1083a:	bf98      	it	ls
   1083c:	bd10      	popls	{r4, pc}
   1083e:	21d8      	movs	r1, #216	; 0xd8
   10840:	2029      	movs	r0, #41	; 0x29
   10842:	f7f3 f99f 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010846 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
   10846:	b430      	push	{r4, r5}
   10848:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   1084c:	f8b0 4009 	ldrh.w	r4, [r0, #9]
   10850:	f8b0 c005 	ldrh.w	ip, [r0, #5]
   10854:	7903      	ldrb	r3, [r0, #4]
   10856:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   1085a:	2900      	cmp	r1, #0
   1085c:	bf18      	it	ne
   1085e:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   10862:	d903      	bls.n	1086c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x26>
   10864:	f640 5107 	movw	r1, #3335	; 0xd07
   10868:	428a      	cmp	r2, r1
   1086a:	d90b      	bls.n	10884 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3e>
   1086c:	1f91      	subs	r1, r2, #6
   1086e:	f640 457a 	movw	r5, #3194	; 0xc7a
   10872:	42a9      	cmp	r1, r5
   10874:	d80f      	bhi.n	10896 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10876:	b173      	cbz	r3, 10896 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10878:	2b08      	cmp	r3, #8
   1087a:	bf98      	it	ls
   1087c:	4293      	cmpls	r3, r2
   1087e:	d20a      	bcs.n	10896 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10880:	4562      	cmp	r2, ip
   10882:	d308      	bcc.n	10896 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   10884:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   10888:	d205      	bcs.n	10896 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x50>
   1088a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1088e:	bf9e      	ittt	ls
   10890:	2001      	movls	r0, #1
   10892:	bc30      	popls	{r4, r5}
   10894:	4770      	bxls	lr
   10896:	2000      	movs	r0, #0
   10898:	bc30      	pop	{r4, r5}
   1089a:	4770      	bx	lr

0001089c <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
   1089c:	1d02      	adds	r2, r0, #4
   1089e:	4608      	mov	r0, r1
   108a0:	4611      	mov	r1, r2
   108a2:	f001 bdb7 	b.w	12414 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

000108a6 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
   108a6:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   108aa:	4770      	bx	lr

000108ac <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
   108ac:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   108b0:	4770      	bx	lr

000108b2 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
   108b2:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   108b6:	4770      	bx	lr

000108b8 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
   108b8:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   108bc:	4770      	bx	lr

000108be <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
   108be:	8980      	ldrh	r0, [r0, #12]
   108c0:	8008      	strh	r0, [r1, #0]
   108c2:	4770      	bx	lr

000108c4 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
   108c4:	f8d0 0016 	ldr.w	r0, [r0, #22]
   108c8:	6008      	str	r0, [r1, #0]
   108ca:	4770      	bx	lr

000108cc <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
   108cc:	6842      	ldr	r2, [r0, #4]
   108ce:	600a      	str	r2, [r1, #0]
   108d0:	6880      	ldr	r0, [r0, #8]
   108d2:	6048      	str	r0, [r1, #4]
   108d4:	4770      	bx	lr

000108d6 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
   108d6:	f8d0 200e 	ldr.w	r2, [r0, #14]
   108da:	600a      	str	r2, [r1, #0]
   108dc:	f8d0 0012 	ldr.w	r0, [r0, #18]
   108e0:	6048      	str	r0, [r1, #4]
   108e2:	4770      	bx	lr

000108e4 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
   108e4:	6842      	ldr	r2, [r0, #4]
   108e6:	600a      	str	r2, [r1, #0]
   108e8:	6880      	ldr	r0, [r0, #8]
   108ea:	6048      	str	r0, [r1, #4]
   108ec:	4770      	bx	lr

000108ee <sym_2OY4CBUPUQFBPO3TTOOGECQPSEJIOADUCURWLFI>:
   108ee:	7840      	ldrb	r0, [r0, #1]
   108f0:	4770      	bx	lr

000108f2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
   108f2:	7800      	ldrb	r0, [r0, #0]
   108f4:	f000 0003 	and.w	r0, r0, #3
   108f8:	4770      	bx	lr

000108fa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
   108fa:	7900      	ldrb	r0, [r0, #4]
   108fc:	4770      	bx	lr

000108fe <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
   108fe:	8880      	ldrh	r0, [r0, #4]
   10900:	4770      	bx	lr

00010902 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
   10902:	88c0      	ldrh	r0, [r0, #6]
   10904:	4770      	bx	lr

00010906 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
   10906:	8900      	ldrh	r0, [r0, #8]
   10908:	4770      	bx	lr

0001090a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
   1090a:	8940      	ldrh	r0, [r0, #10]
   1090c:	4770      	bx	lr

0001090e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
   1090e:	88c0      	ldrh	r0, [r0, #6]
   10910:	4770      	bx	lr

00010912 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
   10912:	7940      	ldrb	r0, [r0, #5]
   10914:	4770      	bx	lr

00010916 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
   10916:	7900      	ldrb	r0, [r0, #4]
   10918:	4770      	bx	lr

0001091a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
   1091a:	7900      	ldrb	r0, [r0, #4]
   1091c:	4770      	bx	lr

0001091e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
   1091e:	8901      	ldrh	r1, [r0, #8]
   10920:	291b      	cmp	r1, #27
   10922:	bf24      	itt	cs
   10924:	8941      	ldrhcs	r1, [r0, #10]
   10926:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   1092a:	d307      	bcc.n	1093c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x1e>
   1092c:	8881      	ldrh	r1, [r0, #4]
   1092e:	291b      	cmp	r1, #27
   10930:	bf21      	itttt	cs
   10932:	88c0      	ldrhcs	r0, [r0, #6]
   10934:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   10938:	2001      	movcs	r0, #1
   1093a:	4770      	bxcs	lr
   1093c:	2000      	movs	r0, #0
   1093e:	4770      	bx	lr

00010940 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
   10940:	b510      	push	{r4, lr}
   10942:	29fb      	cmp	r1, #251	; 0xfb
   10944:	bf9c      	itt	ls
   10946:	7041      	strbls	r1, [r0, #1]
   10948:	bd10      	popls	{r4, pc}
   1094a:	f240 5156 	movw	r1, #1366	; 0x556
   1094e:	202a      	movs	r0, #42	; 0x2a
   10950:	f7f3 f918 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010954 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
   10954:	7901      	ldrb	r1, [r0, #4]
   10956:	f011 0f07 	tst.w	r1, #7
   1095a:	bf1b      	ittet	ne
   1095c:	7940      	ldrbne	r0, [r0, #5]
   1095e:	f010 0f07 	tstne.w	r0, #7
   10962:	2000      	moveq	r0, #0
   10964:	2001      	movne	r0, #1
   10966:	4770      	bx	lr

00010968 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
   10968:	7901      	ldrb	r1, [r0, #4]
   1096a:	f011 0f07 	tst.w	r1, #7
   1096e:	bf1b      	ittet	ne
   10970:	7940      	ldrbne	r0, [r0, #5]
   10972:	f010 0f07 	tstne.w	r0, #7
   10976:	2000      	moveq	r0, #0
   10978:	2001      	movne	r0, #1
   1097a:	4770      	bx	lr

0001097c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
   1097c:	7900      	ldrb	r0, [r0, #4]
   1097e:	4770      	bx	lr

00010980 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
   10980:	7940      	ldrb	r0, [r0, #5]
   10982:	4770      	bx	lr

00010984 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
   10984:	7101      	strb	r1, [r0, #4]
   10986:	4770      	bx	lr

00010988 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
   10988:	7141      	strb	r1, [r0, #5]
   1098a:	4770      	bx	lr

0001098c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
   1098c:	b510      	push	{r4, lr}
   1098e:	2a1b      	cmp	r2, #27
   10990:	d904      	bls.n	1099c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
   10992:	f240 31bd 	movw	r1, #957	; 0x3bd
   10996:	202a      	movs	r0, #42	; 0x2a
   10998:	f7f3 f8f4 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1099c:	7042      	strb	r2, [r0, #1]
   1099e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   109a2:	1cc0      	adds	r0, r0, #3
   109a4:	f7f2 bf64 	b.w	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

000109a8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
   109a8:	6809      	ldr	r1, [r1, #0]
   109aa:	60c1      	str	r1, [r0, #12]
   109ac:	4770      	bx	lr

000109ae <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
   109ae:	680a      	ldr	r2, [r1, #0]
   109b0:	6042      	str	r2, [r0, #4]
   109b2:	6849      	ldr	r1, [r1, #4]
   109b4:	6081      	str	r1, [r0, #8]
   109b6:	4770      	bx	lr

000109b8 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
   109b8:	680a      	ldr	r2, [r1, #0]
   109ba:	6042      	str	r2, [r0, #4]
   109bc:	6849      	ldr	r1, [r1, #4]
   109be:	6081      	str	r1, [r0, #8]
   109c0:	4770      	bx	lr

000109c2 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
   109c2:	680a      	ldr	r2, [r1, #0]
   109c4:	6042      	str	r2, [r0, #4]
   109c6:	6849      	ldr	r1, [r1, #4]
   109c8:	6081      	str	r1, [r0, #8]
   109ca:	4770      	bx	lr

000109cc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
   109cc:	7802      	ldrb	r2, [r0, #0]
   109ce:	f001 0103 	and.w	r1, r1, #3
   109d2:	f022 0203 	bic.w	r2, r2, #3
   109d6:	4311      	orrs	r1, r2
   109d8:	7001      	strb	r1, [r0, #0]
   109da:	4770      	bx	lr

000109dc <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
   109dc:	7101      	strb	r1, [r0, #4]
   109de:	0a09      	lsrs	r1, r1, #8
   109e0:	7141      	strb	r1, [r0, #5]
   109e2:	4770      	bx	lr

000109e4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
   109e4:	7181      	strb	r1, [r0, #6]
   109e6:	0a09      	lsrs	r1, r1, #8
   109e8:	71c1      	strb	r1, [r0, #7]
   109ea:	4770      	bx	lr

000109ec <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
   109ec:	7201      	strb	r1, [r0, #8]
   109ee:	0a09      	lsrs	r1, r1, #8
   109f0:	7241      	strb	r1, [r0, #9]
   109f2:	4770      	bx	lr

000109f4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
   109f4:	7281      	strb	r1, [r0, #10]
   109f6:	0a09      	lsrs	r1, r1, #8
   109f8:	72c1      	strb	r1, [r0, #11]
   109fa:	4770      	bx	lr

000109fc <sym_BKZP2NS6ZML5FASSJGDL3MGGCLMOR2QD3H4TIDQ>:
   109fc:	7800      	ldrb	r0, [r0, #0]
   109fe:	f000 000f 	and.w	r0, r0, #15
   10a02:	4770      	bx	lr

00010a04 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
   10a04:	b430      	push	{r4, r5}
   10a06:	7802      	ldrb	r2, [r0, #0]
   10a08:	f002 020f 	and.w	r2, r2, #15
   10a0c:	2a03      	cmp	r2, #3
   10a0e:	d02d      	beq.n	10a6c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x68>
   10a10:	2a05      	cmp	r2, #5
   10a12:	d12e      	bne.n	10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a14:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   10a18:	f8b0 401b 	ldrh.w	r4, [r0, #27]
   10a1c:	f8b0 c017 	ldrh.w	ip, [r0, #23]
   10a20:	7d83      	ldrb	r3, [r0, #22]
   10a22:	2900      	cmp	r1, #0
   10a24:	bf18      	it	ne
   10a26:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   10a2a:	d907      	bls.n	10a3c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10a2c:	f640 5107 	movw	r1, #3335	; 0xd07
   10a30:	428a      	cmp	r2, r1
   10a32:	d803      	bhi.n	10a3c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x38>
   10a34:	7841      	ldrb	r1, [r0, #1]
   10a36:	2922      	cmp	r1, #34	; 0x22
   10a38:	d11b      	bne.n	10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a3a:	e00e      	b.n	10a5a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x56>
   10a3c:	7841      	ldrb	r1, [r0, #1]
   10a3e:	2922      	cmp	r1, #34	; 0x22
   10a40:	d117      	bne.n	10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a42:	1f91      	subs	r1, r2, #6
   10a44:	f640 457a 	movw	r5, #3194	; 0xc7a
   10a48:	42a9      	cmp	r1, r5
   10a4a:	d812      	bhi.n	10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a4c:	b18b      	cbz	r3, 10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a4e:	2b08      	cmp	r3, #8
   10a50:	bf98      	it	ls
   10a52:	4293      	cmpls	r3, r2
   10a54:	d20d      	bcs.n	10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a56:	4562      	cmp	r2, ip
   10a58:	d30b      	bcc.n	10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a5a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   10a5e:	d208      	bcs.n	10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a60:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   10a64:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   10a68:	d803      	bhi.n	10a72 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6e>
   10a6a:	e005      	b.n	10a78 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10a6c:	7840      	ldrb	r0, [r0, #1]
   10a6e:	280c      	cmp	r0, #12
   10a70:	d002      	beq.n	10a78 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x74>
   10a72:	bc30      	pop	{r4, r5}
   10a74:	2000      	movs	r0, #0
   10a76:	4770      	bx	lr
   10a78:	bc30      	pop	{r4, r5}
   10a7a:	2001      	movs	r0, #1
   10a7c:	4770      	bx	lr

00010a7e <sym_CYEMV7N7AHPPTI2YTL52NLQ5W4V6HWEZXWJTRZI>:
   10a7e:	22c0      	movs	r2, #192	; 0xc0
   10a80:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   10a84:	78c2      	ldrb	r2, [r0, #3]
   10a86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   10a8a:	4311      	orrs	r1, r2
   10a8c:	70c1      	strb	r1, [r0, #3]
   10a8e:	4770      	bx	lr

00010a90 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
   10a90:	b570      	push	{r4, r5, r6, lr}
   10a92:	4614      	mov	r4, r2
   10a94:	4605      	mov	r5, r0
   10a96:	2a1f      	cmp	r2, #31
   10a98:	d903      	bls.n	10aa2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
   10a9a:	21b0      	movs	r1, #176	; 0xb0
   10a9c:	202a      	movs	r0, #42	; 0x2a
   10a9e:	f7f3 f871 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10aa2:	f105 0009 	add.w	r0, r5, #9
   10aa6:	f7f2 fee3 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10aaa:	1da0      	adds	r0, r4, #6
   10aac:	7068      	strb	r0, [r5, #1]
   10aae:	bd70      	pop	{r4, r5, r6, pc}

00010ab0 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ>:
   10ab0:	b570      	push	{r4, r5, r6, lr}
   10ab2:	461e      	mov	r6, r3
   10ab4:	000c      	movs	r4, r1
   10ab6:	4605      	mov	r5, r0
   10ab8:	d00a      	beq.n	10ad0 <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x20>
   10aba:	4611      	mov	r1, r2
   10abc:	f7f5 ffc6 	bl	6a4c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0xb8>
   10ac0:	b158      	cbz	r0, 10ada <sym_V2BZXQPNP7Q2P4CVYNHVSD2T3GLJDRR2FQ2IZTQ+0x2a>
   10ac2:	4428      	add	r0, r5
   10ac4:	4632      	mov	r2, r6
   10ac6:	4621      	mov	r1, r4
   10ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10acc:	f7f2 bed0 	b.w	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10ad0:	f240 21be 	movw	r1, #702	; 0x2be
   10ad4:	202a      	movs	r0, #42	; 0x2a
   10ad6:	f7f3 f855 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ada:	f240 21bf 	movw	r1, #703	; 0x2bf
   10ade:	202a      	movs	r0, #42	; 0x2a
   10ae0:	f7f3 f850 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010ae4 <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ>:
   10ae4:	b2c9      	uxtb	r1, r1
   10ae6:	f001 0201 	and.w	r2, r1, #1
   10aea:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10aee:	441a      	add	r2, r3
   10af0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10af4:	f3c1 0380 	ubfx	r3, r1, #2, #1
   10af8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10afc:	f3c1 03c0 	ubfx	r3, r1, #3, #1
   10b00:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   10b04:	f3c1 1300 	ubfx	r3, r1, #4, #1
   10b08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10b0c:	441a      	add	r2, r3
   10b0e:	f3c1 1340 	ubfx	r3, r1, #5, #1
   10b12:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10b16:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   10b1a:	f3c1 1380 	ubfx	r3, r1, #6, #1
   10b1e:	441a      	add	r2, r3
   10b20:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10b24:	d002      	beq.n	10b2c <sym_V7H2M3MTBM7H2QADZOWCWF3DY44SEJODLUCCHMQ+0x48>
   10b26:	1c52      	adds	r2, r2, #1
   10b28:	b2d2      	uxtb	r2, r2
   10b2a:	7101      	strb	r1, [r0, #4]
   10b2c:	78c3      	ldrb	r3, [r0, #3]
   10b2e:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   10b32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10b36:	4319      	orrs	r1, r3
   10b38:	70c1      	strb	r1, [r0, #3]
   10b3a:	1c51      	adds	r1, r2, #1
   10b3c:	7041      	strb	r1, [r0, #1]
   10b3e:	4770      	bx	lr

00010b40 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
   10b40:	b510      	push	{r4, lr}
   10b42:	7802      	ldrb	r2, [r0, #0]
   10b44:	f001 030f 	and.w	r3, r1, #15
   10b48:	f022 020f 	bic.w	r2, r2, #15
   10b4c:	431a      	orrs	r2, r3
   10b4e:	7002      	strb	r2, [r0, #0]
   10b50:	2909      	cmp	r1, #9
   10b52:	d213      	bcs.n	10b7c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x3c>
   10b54:	e8df f001 	tbb	[pc, r1]
   10b58:	07050705 	.word	0x07050705
   10b5c:	0b050905 	.word	0x0b050905
   10b60:	000f      	.short	0x000f
   10b62:	2106      	movs	r1, #6
   10b64:	e008      	b.n	10b78 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10b66:	210c      	movs	r1, #12
   10b68:	e006      	b.n	10b78 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10b6a:	2122      	movs	r1, #34	; 0x22
   10b6c:	e004      	b.n	10b78 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10b6e:	2101      	movs	r1, #1
   10b70:	2200      	movs	r2, #0
   10b72:	70c2      	strb	r2, [r0, #3]
   10b74:	e000      	b.n	10b78 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x38>
   10b76:	210e      	movs	r1, #14
   10b78:	7041      	strb	r1, [r0, #1]
   10b7a:	bd10      	pop	{r4, pc}
   10b7c:	216e      	movs	r1, #110	; 0x6e
   10b7e:	202a      	movs	r0, #42	; 0x2a
   10b80:	f7f3 f800 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010b84 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
   10b84:	680a      	ldr	r2, [r1, #0]
   10b86:	f8c0 2009 	str.w	r2, [r0, #9]
   10b8a:	8889      	ldrh	r1, [r1, #4]
   10b8c:	f8a0 100d 	strh.w	r1, [r0, #13]
   10b90:	4770      	bx	lr

00010b92 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
   10b92:	7802      	ldrb	r2, [r0, #0]
   10b94:	2380      	movs	r3, #128	; 0x80
   10b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   10b9a:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   10b9e:	4311      	orrs	r1, r2
   10ba0:	7001      	strb	r1, [r0, #0]
   10ba2:	4770      	bx	lr

00010ba4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
   10ba4:	680a      	ldr	r2, [r1, #0]
   10ba6:	f8c0 2003 	str.w	r2, [r0, #3]
   10baa:	8889      	ldrh	r1, [r1, #4]
   10bac:	f8a0 1007 	strh.w	r1, [r0, #7]
   10bb0:	4770      	bx	lr

00010bb2 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
   10bb2:	7802      	ldrb	r2, [r0, #0]
   10bb4:	2340      	movs	r3, #64	; 0x40
   10bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10bba:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   10bbe:	4311      	orrs	r1, r2
   10bc0:	7001      	strb	r1, [r0, #0]
   10bc2:	4770      	bx	lr

00010bc4 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
   10bc4:	b570      	push	{r4, r5, r6, lr}
   10bc6:	4614      	mov	r4, r2
   10bc8:	4605      	mov	r5, r0
   10bca:	2a1f      	cmp	r2, #31
   10bcc:	d903      	bls.n	10bd6 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
   10bce:	21d2      	movs	r1, #210	; 0xd2
   10bd0:	202a      	movs	r0, #42	; 0x2a
   10bd2:	f7f2 ffd7 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10bd6:	f105 0009 	add.w	r0, r5, #9
   10bda:	f7f2 fe49 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10bde:	1da0      	adds	r0, r4, #6
   10be0:	7068      	strb	r0, [r5, #1]
   10be2:	bd70      	pop	{r4, r5, r6, pc}

00010be4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
   10be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10be8:	4604      	mov	r4, r0
   10bea:	b082      	sub	sp, #8
   10bec:	4688      	mov	r8, r1
   10bee:	2000      	movs	r0, #0
   10bf0:	f7f3 f99e 	bl	3f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10bf4:	4605      	mov	r5, r0
   10bf6:	2001      	movs	r0, #1
   10bf8:	f7f3 f99a 	bl	3f30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10bfc:	4428      	add	r0, r5
   10bfe:	b2c7      	uxtb	r7, r0
   10c00:	2600      	movs	r6, #0
   10c02:	eb17 0508 	adds.w	r5, r7, r8
   10c06:	bf18      	it	ne
   10c08:	f04f 0800 	movne.w	r8, #0
   10c0c:	d01c      	beq.n	10c48 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x64>
   10c0e:	8820      	ldrh	r0, [r4, #0]
   10c10:	1c40      	adds	r0, r0, #1
   10c12:	b280      	uxth	r0, r0
   10c14:	8020      	strh	r0, [r4, #0]
   10c16:	42a8      	cmp	r0, r5
   10c18:	bf28      	it	cs
   10c1a:	f8a4 8000 	strhcs.w	r8, [r4]
   10c1e:	8820      	ldrh	r0, [r4, #0]
   10c20:	42b8      	cmp	r0, r7
   10c22:	bf28      	it	cs
   10c24:	4285      	cmpcs	r5, r0
   10c26:	d903      	bls.n	10c30 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4c>
   10c28:	b002      	add	sp, #8
   10c2a:	2000      	movs	r0, #0
   10c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c30:	4669      	mov	r1, sp
   10c32:	f7ff fb59 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10c36:	2800      	cmp	r0, #0
   10c38:	bf04      	itt	eq
   10c3a:	b002      	addeq	sp, #8
   10c3c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c40:	1c70      	adds	r0, r6, #1
   10c42:	b2c6      	uxtb	r6, r0
   10c44:	42b5      	cmp	r5, r6
   10c46:	d8e2      	bhi.n	10c0e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x2a>
   10c48:	f64f 70ff 	movw	r0, #65535	; 0xffff
   10c4c:	8020      	strh	r0, [r4, #0]
   10c4e:	b002      	add	sp, #8
   10c50:	2012      	movs	r0, #18
   10c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010c56 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   10c56:	7801      	ldrb	r1, [r0, #0]
   10c58:	2900      	cmp	r1, #0
   10c5a:	bf08      	it	eq
   10c5c:	4770      	bxeq	lr
   10c5e:	6841      	ldr	r1, [r0, #4]
   10c60:	f891 210d 	ldrb.w	r2, [r1, #269]	; 0x10d
   10c64:	2a00      	cmp	r2, #0
   10c66:	bf08      	it	eq
   10c68:	4770      	bxeq	lr
   10c6a:	2200      	movs	r2, #0
   10c6c:	f881 210d 	strb.w	r2, [r1, #269]	; 0x10d
   10c70:	6840      	ldr	r0, [r0, #4]
   10c72:	f000 ba28 	b.w	110c6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>

00010c76 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   10c76:	b430      	push	{r4, r5}
   10c78:	8050      	strh	r0, [r2, #2]
   10c7a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   10c7e:	f8a2 c004 	strh.w	ip, [r2, #4]
   10c82:	898b      	ldrh	r3, [r1, #12]
   10c84:	80d3      	strh	r3, [r2, #6]
   10c86:	8948      	ldrh	r0, [r1, #10]
   10c88:	8110      	strh	r0, [r2, #8]
   10c8a:	89cc      	ldrh	r4, [r1, #14]
   10c8c:	8154      	strh	r4, [r2, #10]
   10c8e:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
   10c90:	42a5      	cmp	r5, r4
   10c92:	bf04      	itt	eq
   10c94:	8d4c      	ldrheq	r4, [r1, #42]	; 0x2a
   10c96:	4284      	cmpeq	r4, r0
   10c98:	d106      	bne.n	10ca8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   10c9a:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
   10c9c:	429c      	cmp	r4, r3
   10c9e:	bf02      	ittt	eq
   10ca0:	8d8b      	ldrheq	r3, [r1, #44]	; 0x2c
   10ca2:	4563      	cmpeq	r3, ip
   10ca4:	2300      	moveq	r3, #0
   10ca6:	d001      	beq.n	10cac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   10ca8:	f04f 0301 	mov.w	r3, #1
   10cac:	7313      	strb	r3, [r2, #12]
   10cae:	8548      	strh	r0, [r1, #42]	; 0x2a
   10cb0:	8950      	ldrh	r0, [r2, #10]
   10cb2:	85c8      	strh	r0, [r1, #46]	; 0x2e
   10cb4:	8890      	ldrh	r0, [r2, #4]
   10cb6:	8588      	strh	r0, [r1, #44]	; 0x2c
   10cb8:	88d0      	ldrh	r0, [r2, #6]
   10cba:	8608      	strh	r0, [r1, #48]	; 0x30
   10cbc:	f04f 0001 	mov.w	r0, #1
   10cc0:	7010      	strb	r0, [r2, #0]
   10cc2:	bc30      	pop	{r4, r5}
   10cc4:	4770      	bx	lr

00010cc6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   10cc6:	888a      	ldrh	r2, [r1, #4]
   10cc8:	890b      	ldrh	r3, [r1, #8]
   10cca:	f8b1 c002 	ldrh.w	ip, [r1, #2]
   10cce:	88c9      	ldrh	r1, [r1, #6]
   10cd0:	f8a0 c044 	strh.w	ip, [r0, #68]	; 0x44
   10cd4:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
   10cd8:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
   10cdc:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
   10ce0:	4770      	bx	lr

00010ce2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   10ce2:	b4f0      	push	{r4, r5, r6, r7}
   10ce4:	f8d0 c004 	ldr.w	ip, [r0, #4]
   10ce8:	2696      	movs	r6, #150	; 0x96
   10cea:	f641 534c 	movw	r3, #7500	; 0x1d4c
   10cee:	459c      	cmp	ip, r3
   10cf0:	bf3a      	itte	cc
   10cf2:	264d      	movcc	r6, #77	; 0x4d
   10cf4:	4635      	movcc	r5, r6
   10cf6:	2596      	movcs	r5, #150	; 0x96
   10cf8:	f890 c066 	ldrb.w	ip, [r0, #102]	; 0x66
   10cfc:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
   10d00:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10d02:	f1bc 0f02 	cmp.w	ip, #2
   10d06:	bf07      	ittee	eq
   10d08:	009b      	lsleq	r3, r3, #2
   10d0a:	333c      	addeq	r3, #60	; 0x3c
   10d0c:	00db      	lslne	r3, r3, #3
   10d0e:	3370      	addne	r3, #112	; 0x70
   10d10:	fa1f fc83 	uxth.w	ip, r3
   10d14:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   10d18:	f8b0 7042 	ldrh.w	r7, [r0, #66]	; 0x42
   10d1c:	42bb      	cmp	r3, r7
   10d1e:	bf28      	it	cs
   10d20:	463b      	movcs	r3, r7
   10d22:	4563      	cmp	r3, ip
   10d24:	bf28      	it	cs
   10d26:	4663      	movcs	r3, ip
   10d28:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10d2c:	2c02      	cmp	r4, #2
   10d2e:	bf07      	ittee	eq
   10d30:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   10d34:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   10d38:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   10d3c:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   10d40:	fa1f f48c 	uxth.w	r4, ip
   10d44:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	; 0x4a
   10d48:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   10d4c:	4584      	cmp	ip, r0
   10d4e:	bf28      	it	cs
   10d50:	4684      	movcs	ip, r0
   10d52:	45a4      	cmp	ip, r4
   10d54:	bf28      	it	cs
   10d56:	46a4      	movcs	ip, r4
   10d58:	eb03 000c 	add.w	r0, r3, ip
   10d5c:	4428      	add	r0, r5
   10d5e:	1d80      	adds	r0, r0, #6
   10d60:	4430      	add	r0, r6
   10d62:	4410      	add	r0, r2
   10d64:	4288      	cmp	r0, r1
   10d66:	bf94      	ite	ls
   10d68:	1a08      	subls	r0, r1, r0
   10d6a:	2000      	movhi	r0, #0
   10d6c:	bcf0      	pop	{r4, r5, r6, r7}
   10d6e:	4770      	bx	lr

00010d70 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   10d70:	b470      	push	{r4, r5, r6}
   10d72:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   10d76:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   10d78:	8e45      	ldrh	r5, [r0, #50]	; 0x32
   10d7a:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
   10d7c:	428a      	cmp	r2, r1
   10d7e:	bf28      	it	cs
   10d80:	460a      	movcs	r2, r1
   10d82:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   10d86:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
   10d8a:	428b      	cmp	r3, r1
   10d8c:	bf38      	it	cc
   10d8e:	4619      	movcc	r1, r3
   10d90:	8642      	strh	r2, [r0, #50]	; 0x32
   10d92:	86c1      	strh	r1, [r0, #54]	; 0x36
   10d94:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10d98:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   10d9a:	4594      	cmp	ip, r2
   10d9c:	bf38      	it	cc
   10d9e:	4694      	movcc	ip, r2
   10da0:	428b      	cmp	r3, r1
   10da2:	bf38      	it	cc
   10da4:	460b      	movcc	r3, r1
   10da6:	f8a0 c038 	strh.w	ip, [r0, #56]	; 0x38
   10daa:	8743      	strh	r3, [r0, #58]	; 0x3a
   10dac:	42aa      	cmp	r2, r5
   10dae:	bf0a      	itet	eq
   10db0:	42a1      	cmpeq	r1, r4
   10db2:	2301      	movne	r3, #1
   10db4:	2300      	moveq	r3, #0
   10db6:	8e04      	ldrh	r4, [r0, #48]	; 0x30
   10db8:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   10dbc:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   10dbe:	f8b0 c034 	ldrh.w	ip, [r0, #52]	; 0x34
   10dc2:	428a      	cmp	r2, r1
   10dc4:	bf28      	it	cs
   10dc6:	460a      	movcs	r2, r1
   10dc8:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
   10dcc:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
   10dd0:	428d      	cmp	r5, r1
   10dd2:	bf38      	it	cc
   10dd4:	4629      	movcc	r1, r5
   10dd6:	f890 505c 	ldrb.w	r5, [r0, #92]	; 0x5c
   10dda:	2d02      	cmp	r5, #2
   10ddc:	d00a      	beq.n	10df4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
   10dde:	8602      	strh	r2, [r0, #48]	; 0x30
   10de0:	8681      	strh	r1, [r0, #52]	; 0x34
   10de2:	42a2      	cmp	r2, r4
   10de4:	bf0a      	itet	eq
   10de6:	4561      	cmpeq	r1, ip
   10de8:	2001      	movne	r0, #1
   10dea:	2000      	moveq	r0, #0
   10dec:	ea40 0003 	orr.w	r0, r0, r3
   10df0:	bc70      	pop	{r4, r5, r6}
   10df2:	4770      	bx	lr
   10df4:	4294      	cmp	r4, r2
   10df6:	bf38      	it	cc
   10df8:	4622      	movcc	r2, r4
   10dfa:	458c      	cmp	ip, r1
   10dfc:	bf38      	it	cc
   10dfe:	4661      	movcc	r1, ip
   10e00:	2500      	movs	r5, #0
   10e02:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
   10e06:	e7ea      	b.n	10dde <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6e>

00010e08 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   10e08:	b4f0      	push	{r4, r5, r6, r7}
   10e0a:	6845      	ldr	r5, [r0, #4]
   10e0c:	f641 534c 	movw	r3, #7500	; 0x1d4c
   10e10:	429d      	cmp	r5, r3
   10e12:	bf34      	ite	cc
   10e14:	264d      	movcc	r6, #77	; 0x4d
   10e16:	2696      	movcs	r6, #150	; 0x96
   10e18:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
   10e1c:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   10e20:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
   10e24:	2c02      	cmp	r4, #2
   10e26:	bf07      	ittee	eq
   10e28:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   10e2c:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   10e30:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   10e34:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   10e38:	fa1f f48c 	uxth.w	r4, ip
   10e3c:	f8b0 7046 	ldrh.w	r7, [r0, #70]	; 0x46
   10e40:	f8b0 c042 	ldrh.w	ip, [r0, #66]	; 0x42
   10e44:	4567      	cmp	r7, ip
   10e46:	bf38      	it	cc
   10e48:	46bc      	movcc	ip, r7
   10e4a:	45a4      	cmp	ip, r4
   10e4c:	bf38      	it	cc
   10e4e:	4664      	movcc	r4, ip
   10e50:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   10e54:	2b02      	cmp	r3, #2
   10e56:	bf07      	ittee	eq
   10e58:	ea4f 038c 	moveq.w	r3, ip, lsl #2
   10e5c:	333c      	addeq	r3, #60	; 0x3c
   10e5e:	ea4f 03cc 	movne.w	r3, ip, lsl #3
   10e62:	3370      	addne	r3, #112	; 0x70
   10e64:	fa1f fc83 	uxth.w	ip, r3
   10e68:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
   10e6c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10e70:	429f      	cmp	r7, r3
   10e72:	bf38      	it	cc
   10e74:	463b      	movcc	r3, r7
   10e76:	4563      	cmp	r3, ip
   10e78:	bf28      	it	cs
   10e7a:	4663      	movcs	r3, ip
   10e7c:	4423      	add	r3, r4
   10e7e:	4433      	add	r3, r6
   10e80:	f8d0 c028 	ldr.w	ip, [r0, #40]	; 0x28
   10e84:	1d9b      	adds	r3, r3, #6
   10e86:	45ac      	cmp	ip, r5
   10e88:	bf38      	it	cc
   10e8a:	4665      	movcc	r5, ip
   10e8c:	1a69      	subs	r1, r5, r1
   10e8e:	441a      	add	r2, r3
   10e90:	428a      	cmp	r2, r1
   10e92:	bf28      	it	cs
   10e94:	4611      	movcs	r1, r2
   10e96:	62c1      	str	r1, [r0, #44]	; 0x2c
   10e98:	bcf0      	pop	{r4, r5, r6, r7}
   10e9a:	4770      	bx	lr

00010e9c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   10e9c:	221b      	movs	r2, #27
   10e9e:	8402      	strh	r2, [r0, #32]
   10ea0:	8382      	strh	r2, [r0, #28]
   10ea2:	82c2      	strh	r2, [r0, #22]
   10ea4:	8282      	strh	r2, [r0, #20]
   10ea6:	8142      	strh	r2, [r0, #10]
   10ea8:	8202      	strh	r2, [r0, #16]
   10eaa:	8102      	strh	r2, [r0, #8]
   10eac:	8542      	strh	r2, [r0, #42]	; 0x2a
   10eae:	8582      	strh	r2, [r0, #44]	; 0x2c
   10eb0:	8482      	strh	r2, [r0, #36]	; 0x24
   10eb2:	2900      	cmp	r1, #0
   10eb4:	bf18      	it	ne
   10eb6:	4770      	bxne	lr
   10eb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10ebc:	8441      	strh	r1, [r0, #34]	; 0x22
   10ebe:	83c1      	strh	r1, [r0, #30]
   10ec0:	8341      	strh	r1, [r0, #26]
   10ec2:	8301      	strh	r1, [r0, #24]
   10ec4:	81c1      	strh	r1, [r0, #14]
   10ec6:	8241      	strh	r1, [r0, #18]
   10ec8:	8181      	strh	r1, [r0, #12]
   10eca:	85c1      	strh	r1, [r0, #46]	; 0x2e
   10ecc:	8601      	strh	r1, [r0, #48]	; 0x30
   10ece:	4770      	bx	lr

00010ed0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   10ed0:	6800      	ldr	r0, [r0, #0]
   10ed2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   10ed6:	4290      	cmp	r0, r2
   10ed8:	bf9c      	itt	ls
   10eda:	2000      	movls	r0, #0
   10edc:	4770      	bxls	lr
   10ede:	1a40      	subs	r0, r0, r1
   10ee0:	389c      	subs	r0, #156	; 0x9c
   10ee2:	0840      	lsrs	r0, r0, #1
   10ee4:	4770      	bx	lr

00010ee6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   10ee6:	f8dd c000 	ldr.w	ip, [sp]
   10eea:	8281      	strh	r1, [r0, #20]
   10eec:	82c2      	strh	r2, [r0, #22]
   10eee:	8303      	strh	r3, [r0, #24]
   10ef0:	f8a0 c01a 	strh.w	ip, [r0, #26]
   10ef4:	4770      	bx	lr

00010ef6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   10ef6:	8050      	strh	r0, [r2, #2]
   10ef8:	8a88      	ldrh	r0, [r1, #20]
   10efa:	8090      	strh	r0, [r2, #4]
   10efc:	8ac8      	ldrh	r0, [r1, #22]
   10efe:	80d0      	strh	r0, [r2, #6]
   10f00:	8b08      	ldrh	r0, [r1, #24]
   10f02:	8110      	strh	r0, [r2, #8]
   10f04:	8b48      	ldrh	r0, [r1, #26]
   10f06:	8150      	strh	r0, [r2, #10]
   10f08:	2001      	movs	r0, #1
   10f0a:	7010      	strb	r0, [r2, #0]
   10f0c:	4770      	bx	lr
   10f0e:	2001      	movs	r0, #1
   10f10:	f7f6 bde6 	b.w	7ae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f14:	2001      	movs	r0, #1
   10f16:	f7f6 bde3 	b.w	7ae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f1a:	b510      	push	{r4, lr}
   10f1c:	f7f7 f856 	bl	7fcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   10f20:	2800      	cmp	r0, #0
   10f22:	bf18      	it	ne
   10f24:	bd10      	popne	{r4, pc}
   10f26:	2000      	movs	r0, #0
   10f28:	f7f6 fdda 	bl	7ae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>
   10f2c:	2000      	movs	r0, #0
   10f2e:	bd10      	pop	{r4, pc}
   10f30:	2001      	movs	r0, #1
   10f32:	f7f6 bdd5 	b.w	7ae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x10>

00010f36 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   10f36:	b510      	push	{r4, lr}
   10f38:	7001      	strb	r1, [r0, #0]
   10f3a:	7042      	strb	r2, [r0, #1]
   10f3c:	7880      	ldrb	r0, [r0, #2]
   10f3e:	f3c0 0380 	ubfx	r3, r0, #2, #1
   10f42:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   10f46:	4463      	add	r3, ip
   10f48:	f000 0001 	and.w	r0, r0, #1
   10f4c:	4418      	add	r0, r3
   10f4e:	fb10 f001 	smulbb	r0, r0, r1
   10f52:	fb10 f002 	smulbb	r0, r0, r2
   10f56:	28ff      	cmp	r0, #255	; 0xff
   10f58:	bf38      	it	cc
   10f5a:	bd10      	popcc	{r4, pc}
   10f5c:	215c      	movs	r1, #92	; 0x5c
   10f5e:	202e      	movs	r0, #46	; 0x2e
   10f60:	f7f2 fe10 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010f64 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   10f64:	7881      	ldrb	r1, [r0, #2]
   10f66:	f3c1 0280 	ubfx	r2, r1, #2, #1
   10f6a:	f3c1 0340 	ubfx	r3, r1, #1, #1
   10f6e:	441a      	add	r2, r3
   10f70:	f001 0101 	and.w	r1, r1, #1
   10f74:	4411      	add	r1, r2
   10f76:	7842      	ldrb	r2, [r0, #1]
   10f78:	7800      	ldrb	r0, [r0, #0]
   10f7a:	fb12 f000 	smulbb	r0, r2, r0
   10f7e:	4348      	muls	r0, r1
   10f80:	b2c0      	uxtb	r0, r0
   10f82:	4770      	bx	lr

00010f84 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   10f84:	7882      	ldrb	r2, [r0, #2]
   10f86:	2100      	movs	r1, #0
   10f88:	f012 0f01 	tst.w	r2, #1
   10f8c:	d005      	beq.n	10f9a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   10f8e:	78c3      	ldrb	r3, [r0, #3]
   10f90:	f013 0f01 	tst.w	r3, #1
   10f94:	bf08      	it	eq
   10f96:	2101      	moveq	r1, #1
   10f98:	d010      	beq.n	10fbc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10f9a:	f012 0f02 	tst.w	r2, #2
   10f9e:	d005      	beq.n	10fac <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   10fa0:	78c3      	ldrb	r3, [r0, #3]
   10fa2:	f013 0f02 	tst.w	r3, #2
   10fa6:	bf08      	it	eq
   10fa8:	2102      	moveq	r1, #2
   10faa:	d007      	beq.n	10fbc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10fac:	f012 0f04 	tst.w	r2, #4
   10fb0:	d004      	beq.n	10fbc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   10fb2:	78c3      	ldrb	r3, [r0, #3]
   10fb4:	f013 0f04 	tst.w	r3, #4
   10fb8:	bf08      	it	eq
   10fba:	2104      	moveq	r1, #4
   10fbc:	7943      	ldrb	r3, [r0, #5]
   10fbe:	1c5b      	adds	r3, r3, #1
   10fc0:	b2db      	uxtb	r3, r3
   10fc2:	7143      	strb	r3, [r0, #5]
   10fc4:	f890 c001 	ldrb.w	ip, [r0, #1]
   10fc8:	4563      	cmp	r3, ip
   10fca:	d10d      	bne.n	10fe8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   10fcc:	2300      	movs	r3, #0
   10fce:	7143      	strb	r3, [r0, #5]
   10fd0:	f890 c003 	ldrb.w	ip, [r0, #3]
   10fd4:	ea4c 0c01 	orr.w	ip, ip, r1
   10fd8:	f880 c003 	strb.w	ip, [r0, #3]
   10fdc:	4594      	cmp	ip, r2
   10fde:	d103      	bne.n	10fe8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   10fe0:	70c3      	strb	r3, [r0, #3]
   10fe2:	7902      	ldrb	r2, [r0, #4]
   10fe4:	1c52      	adds	r2, r2, #1
   10fe6:	7102      	strb	r2, [r0, #4]
   10fe8:	2901      	cmp	r1, #1
   10fea:	bf04      	itt	eq
   10fec:	2025      	moveq	r0, #37	; 0x25
   10fee:	4770      	bxeq	lr
   10ff0:	2902      	cmp	r1, #2
   10ff2:	bf04      	itt	eq
   10ff4:	2026      	moveq	r0, #38	; 0x26
   10ff6:	4770      	bxeq	lr
   10ff8:	2904      	cmp	r1, #4
   10ffa:	bf04      	itt	eq
   10ffc:	2027      	moveq	r0, #39	; 0x27
   10ffe:	4770      	bxeq	lr
   11000:	b510      	push	{r4, lr}
   11002:	2139      	movs	r1, #57	; 0x39
   11004:	202e      	movs	r0, #46	; 0x2e
   11006:	f7f2 fdbd 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001100a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   1100a:	7081      	strb	r1, [r0, #2]
   1100c:	4770      	bx	lr

0001100e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   1100e:	b410      	push	{r4}
   11010:	7881      	ldrb	r1, [r0, #2]
   11012:	f3c1 0280 	ubfx	r2, r1, #2, #1
   11016:	f3c1 0340 	ubfx	r3, r1, #1, #1
   1101a:	441a      	add	r2, r3
   1101c:	f001 0101 	and.w	r1, r1, #1
   11020:	7843      	ldrb	r3, [r0, #1]
   11022:	4411      	add	r1, r2
   11024:	fb13 f201 	smulbb	r2, r3, r1
   11028:	78c1      	ldrb	r1, [r0, #3]
   1102a:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   1102e:	f3c1 0440 	ubfx	r4, r1, #1, #1
   11032:	44a4      	add	ip, r4
   11034:	f001 0101 	and.w	r1, r1, #1
   11038:	4461      	add	r1, ip
   1103a:	f890 c005 	ldrb.w	ip, [r0, #5]
   1103e:	fb11 c103 	smlabb	r1, r1, r3, ip
   11042:	7803      	ldrb	r3, [r0, #0]
   11044:	7900      	ldrb	r0, [r0, #4]
   11046:	1a18      	subs	r0, r3, r0
   11048:	fb10 f002 	smulbb	r0, r0, r2
   1104c:	1a40      	subs	r0, r0, r1
   1104e:	bc10      	pop	{r4}
   11050:	b2c0      	uxtb	r0, r0
   11052:	4770      	bx	lr

00011054 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   11054:	b510      	push	{r4, lr}
   11056:	4604      	mov	r4, r0
   11058:	f001 f9e1 	bl	1241e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   1105c:	2001      	movs	r0, #1
   1105e:	7060      	strb	r0, [r4, #1]
   11060:	7020      	strb	r0, [r4, #0]
   11062:	bd10      	pop	{r4, pc}

00011064 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   11064:	2100      	movs	r1, #0
   11066:	70c1      	strb	r1, [r0, #3]
   11068:	7141      	strb	r1, [r0, #5]
   1106a:	7101      	strb	r1, [r0, #4]
   1106c:	4770      	bx	lr

0001106e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   1106e:	f240 315a 	movw	r1, #858	; 0x35a
   11072:	4348      	muls	r0, r1
   11074:	4770      	bx	lr

00011076 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   11076:	f240 20ef 	movw	r0, #751	; 0x2ef
   1107a:	4770      	bx	lr
   1107c:	041c020e 	.word	0x041c020e
   11080:	0c600630 	.word	0x0c600630
   11084:	06b4035a 	.word	0x06b4035a
   11088:	0bf505c5 	.word	0x0bf505c5
   1108c:	01a31225 	.word	0x01a31225
   11090:	05bf03b1 	.word	0x05bf03b1
   11094:	064902ef 	.word	0x064902ef
   11098:	09a3      	.short	0x09a3

0001109a <sym_ILVOLFEEJCI66RN2YEICR66DMMTD4LTX63YPZIQ>:
   1109a:	b510      	push	{r4, lr}
   1109c:	4604      	mov	r4, r0
   1109e:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   110a2:	f001 f92d 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   110a6:	f64d 7141 	movw	r1, #57153	; 0xdf41
   110aa:	4408      	add	r0, r1
   110ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   110b0:	fbb0 f0f1 	udiv	r0, r0, r1
   110b4:	f100 02bd 	add.w	r2, r0, #189	; 0xbd
   110b8:	4620      	mov	r0, r4
   110ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   110be:	f44f 71a8 	mov.w	r1, #336	; 0x150
   110c2:	f7ff bea1 	b.w	10e08 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>

000110c6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
   110c6:	b570      	push	{r4, r5, r6, lr}
   110c8:	4604      	mov	r4, r0
   110ca:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
   110ce:	b082      	sub	sp, #8
   110d0:	2800      	cmp	r0, #0
   110d2:	bf07      	ittee	eq
   110d4:	f894 0140 	ldrbeq.w	r0, [r4, #320]	; 0x140
   110d8:	2803      	cmpeq	r0, #3
   110da:	b002      	addne	sp, #8
   110dc:	bd70      	popne	{r4, r5, r6, pc}
   110de:	f7fd fd94 	bl	ec0a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   110e2:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
   110e6:	4601      	mov	r1, r0
   110e8:	4610      	mov	r0, r2
   110ea:	f7f0 f9c9 	bl	1480 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   110ee:	2800      	cmp	r0, #0
   110f0:	bfdc      	itt	le
   110f2:	b002      	addle	sp, #8
   110f4:	bd70      	pople	{r4, r5, r6, pc}
   110f6:	6861      	ldr	r1, [r4, #4]
   110f8:	2900      	cmp	r1, #0
   110fa:	bf14      	ite	ne
   110fc:	fbb0 f0f1 	udivne	r0, r0, r1
   11100:	2000      	moveq	r0, #0
   11102:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   11106:	1c40      	adds	r0, r0, #1
   11108:	4408      	add	r0, r1
   1110a:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   1110e:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
   11112:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   11116:	1a08      	subs	r0, r1, r0
   11118:	b200      	sxth	r0, r0
   1111a:	2800      	cmp	r0, #0
   1111c:	bfdc      	itt	le
   1111e:	b002      	addle	sp, #8
   11120:	bd70      	pople	{r4, r5, r6, pc}
   11122:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
   11126:	f7f0 fee5 	bl	1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   1112a:	2800      	cmp	r0, #0
   1112c:	bf04      	itt	eq
   1112e:	b002      	addeq	sp, #8
   11130:	bd70      	popeq	{r4, r5, r6, pc}
   11132:	2001      	movs	r0, #1
   11134:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
   11138:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
   1113c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   11140:	ae01      	add	r6, sp, #4
   11142:	1a40      	subs	r0, r0, r1
   11144:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   11148:	1e40      	subs	r0, r0, #1
   1114a:	4408      	add	r0, r1
   1114c:	b285      	uxth	r5, r0
   1114e:	e019      	b.n	11184 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xbe>
   11150:	9600      	str	r6, [sp, #0]
   11152:	f8b4 1150 	ldrh.w	r1, [r4, #336]	; 0x150
   11156:	2300      	movs	r3, #0
   11158:	2201      	movs	r2, #1
   1115a:	4620      	mov	r0, r4
   1115c:	f7f8 f902 	bl	9364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
   11160:	2800      	cmp	r0, #0
   11162:	bf04      	itt	eq
   11164:	b002      	addeq	sp, #8
   11166:	bd70      	popeq	{r4, r5, r6, pc}
   11168:	2801      	cmp	r0, #1
   1116a:	d004      	beq.n	11176 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb0>
   1116c:	f240 51df 	movw	r1, #1503	; 0x5df
   11170:	2030      	movs	r0, #48	; 0x30
   11172:	f7f2 fd07 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11176:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   1117a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1117e:	4408      	add	r0, r1
   11180:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
   11184:	f8b4 0150 	ldrh.w	r0, [r4, #336]	; 0x150
   11188:	1a28      	subs	r0, r5, r0
   1118a:	b200      	sxth	r0, r0
   1118c:	2800      	cmp	r0, #0
   1118e:	dadf      	bge.n	11150 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x8a>
   11190:	b002      	add	sp, #8
   11192:	bd70      	pop	{r4, r5, r6, pc}
   11194:	00fa01f4 	.word	0x00fa01f4
   11198:	00640096 	.word	0x00640096
   1119c:	0032004b 	.word	0x0032004b
   111a0:	0014001e 	.word	0x0014001e
   111a4:	0005000a 	.word	0x0005000a
   111a8:	00010002 	.word	0x00010002

000111ac <sym_KI22E7SNUU4SSUGQ7PUDMBEHERNXLLCCBKOZDTY>:
   111ac:	b570      	push	{r4, r5, r6, lr}
   111ae:	460c      	mov	r4, r1
   111b0:	4605      	mov	r5, r0
   111b2:	f44f 720a 	mov.w	r2, #552	; 0x228
   111b6:	2100      	movs	r1, #0
   111b8:	4620      	mov	r0, r4
   111ba:	f7fd fe8b 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   111be:	8025      	strh	r5, [r4, #0]
   111c0:	bd70      	pop	{r4, r5, r6, pc}

000111c2 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   111c2:	f7f3 b845 	b.w	4250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

000111c6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
   111c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111ca:	460d      	mov	r5, r1
   111cc:	4607      	mov	r7, r0
   111ce:	2101      	movs	r1, #1
   111d0:	f7fe ff65 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   111d4:	1e04      	subs	r4, r0, #0
   111d6:	bf08      	it	eq
   111d8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   111dc:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   111e0:	2600      	movs	r6, #0
   111e2:	b1b8      	cbz	r0, 11214 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4e>
   111e4:	706e      	strb	r6, [r5, #1]
   111e6:	2009      	movs	r0, #9
   111e8:	7028      	strb	r0, [r5, #0]
   111ea:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   111ee:	b178      	cbz	r0, 11210 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4a>
   111f0:	8466      	strh	r6, [r4, #34]	; 0x22
   111f2:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
   111f6:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
   111fa:	6068      	str	r0, [r5, #4]
   111fc:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
   11200:	60a8      	str	r0, [r5, #8]
   11202:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
   11206:	81a8      	strh	r0, [r5, #12]
   11208:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   1120c:	2800      	cmp	r0, #0
   1120e:	d1ef      	bne.n	111f0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x2a>
   11210:	712e      	strb	r6, [r5, #4]
   11212:	e047      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11214:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   11218:	2800      	cmp	r0, #0
   1121a:	d03a      	beq.n	11292 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xcc>
   1121c:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
   11220:	280d      	cmp	r0, #13
   11222:	d01b      	beq.n	1125c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x96>
   11224:	280e      	cmp	r0, #14
   11226:	d004      	beq.n	11232 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x6c>
   11228:	f640 21c9 	movw	r1, #2761	; 0xac9
   1122c:	2031      	movs	r0, #49	; 0x31
   1122e:	f7f2 fca9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11232:	8820      	ldrh	r0, [r4, #0]
   11234:	f7f3 f880 	bl	4338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   11238:	4607      	mov	r7, r0
   1123a:	f7fe fdd0 	bl	fdde <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   1123e:	b9a0      	cbnz	r0, 1126a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa4>
   11240:	706e      	strb	r6, [r5, #1]
   11242:	200e      	movs	r0, #14
   11244:	7028      	strb	r0, [r5, #0]
   11246:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   1124a:	7128      	strb	r0, [r5, #4]
   1124c:	8820      	ldrh	r0, [r4, #0]
   1124e:	80e8      	strh	r0, [r5, #6]
   11250:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   11254:	4638      	mov	r0, r7
   11256:	f7fe fdd8 	bl	fe0a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   1125a:	e023      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1125c:	8820      	ldrh	r0, [r4, #0]
   1125e:	f7f3 f86b 	bl	4338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   11262:	4607      	mov	r7, r0
   11264:	f7fe fdbb 	bl	fdde <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
   11268:	b110      	cbz	r0, 11270 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xaa>
   1126a:	2000      	movs	r0, #0
   1126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11270:	706e      	strb	r6, [r5, #1]
   11272:	200d      	movs	r0, #13
   11274:	7028      	strb	r0, [r5, #0]
   11276:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
   1127a:	7128      	strb	r0, [r5, #4]
   1127c:	8820      	ldrh	r0, [r4, #0]
   1127e:	80e8      	strh	r0, [r5, #6]
   11280:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
   11284:	7228      	strb	r0, [r5, #8]
   11286:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
   1128a:	4638      	mov	r0, r7
   1128c:	f7fe fdbd 	bl	fe0a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
   11290:	e008      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11292:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
   11296:	b140      	cbz	r0, 112aa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xe4>
   11298:	706e      	strb	r6, [r5, #1]
   1129a:	2010      	movs	r0, #16
   1129c:	7028      	strb	r0, [r5, #0]
   1129e:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
   112a2:	80af      	strh	r7, [r5, #4]
   112a4:	2001      	movs	r0, #1
   112a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112aa:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   112ae:	b190      	cbz	r0, 112d6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x110>
   112b0:	706e      	strb	r6, [r5, #1]
   112b2:	200a      	movs	r0, #10
   112b4:	7028      	strb	r0, [r5, #0]
   112b6:	8820      	ldrh	r0, [r4, #0]
   112b8:	80a8      	strh	r0, [r5, #4]
   112ba:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   112be:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
   112c2:	f8c5 0006 	str.w	r0, [r5, #6]
   112c6:	f8c5 100a 	str.w	r1, [r5, #10]
   112ca:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
   112ce:	81e8      	strh	r0, [r5, #14]
   112d0:	f884 61dc 	strb.w	r6, [r4, #476]	; 0x1dc
   112d4:	e7e6      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   112d6:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   112da:	b180      	cbz	r0, 112fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x138>
   112dc:	706e      	strb	r6, [r5, #1]
   112de:	201a      	movs	r0, #26
   112e0:	7028      	strb	r0, [r5, #0]
   112e2:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   112e6:	2800      	cmp	r0, #0
   112e8:	d0dc      	beq.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   112ea:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
   112ee:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
   112f2:	6068      	str	r0, [r5, #4]
   112f4:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   112f8:	2800      	cmp	r0, #0
   112fa:	d1f6      	bne.n	112ea <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x124>
   112fc:	e7d2      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   112fe:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
   11302:	b160      	cbz	r0, 1131e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x158>
   11304:	706e      	strb	r6, [r5, #1]
   11306:	2008      	movs	r0, #8
   11308:	7028      	strb	r0, [r5, #0]
   1130a:	e9d4 0187 	ldrd	r0, r1, [r4, #540]	; 0x21c
   1130e:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
   11312:	60ea      	str	r2, [r5, #12]
   11314:	e9c5 0101 	strd	r0, r1, [r5, #4]
   11318:	f884 621a 	strb.w	r6, [r4, #538]	; 0x21a
   1131c:	e7c2      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1131e:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   11322:	b1a0      	cbz	r0, 1134e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x188>
   11324:	706e      	strb	r6, [r5, #1]
   11326:	2015      	movs	r0, #21
   11328:	7028      	strb	r0, [r5, #0]
   1132a:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   1132e:	2800      	cmp	r0, #0
   11330:	d0b8      	beq.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11332:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
   11336:	e9d4 017b 	ldrd	r0, r1, [r4, #492]	; 0x1ec
   1133a:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
   1133e:	60ea      	str	r2, [r5, #12]
   11340:	e9c5 0101 	strd	r0, r1, [r5, #4]
   11344:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
   11348:	2800      	cmp	r0, #0
   1134a:	d1f2      	bne.n	11332 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
   1134c:	e7aa      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   1134e:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
   11352:	b170      	cbz	r0, 11372 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ac>
   11354:	706e      	strb	r6, [r5, #1]
   11356:	201c      	movs	r0, #28
   11358:	7028      	strb	r0, [r5, #0]
   1135a:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
   1135e:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
   11362:	6068      	str	r0, [r5, #4]
   11364:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
   11368:	60a8      	str	r0, [r5, #8]
   1136a:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
   1136e:	81a8      	strh	r0, [r5, #12]
   11370:	e798      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11372:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
   11376:	b138      	cbz	r0, 11388 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1c2>
   11378:	201d      	movs	r0, #29
   1137a:	7028      	strb	r0, [r5, #0]
   1137c:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
   11380:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
   11384:	6068      	str	r0, [r5, #4]
   11386:	e78d      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   11388:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   1138c:	2800      	cmp	r0, #0
   1138e:	bf08      	it	eq
   11390:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   11394:	706e      	strb	r6, [r5, #1]
   11396:	2016      	movs	r0, #22
   11398:	7028      	strb	r0, [r5, #0]
   1139a:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   1139e:	2800      	cmp	r0, #0
   113a0:	d080      	beq.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>
   113a2:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
   113a6:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
   113aa:	6068      	str	r0, [r5, #4]
   113ac:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
   113b0:	8128      	strh	r0, [r5, #8]
   113b2:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
   113b6:	2800      	cmp	r0, #0
   113b8:	d1f3      	bne.n	113a2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1dc>
   113ba:	e773      	b.n	112a4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xde>

000113bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   113bc:	2100      	movs	r1, #0
   113be:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
   113c2:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   113c6:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
   113ca:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
   113ce:	b111      	cbz	r1, 113d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   113d0:	2102      	movs	r1, #2
   113d2:	f7f7 be9f 	b.w	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   113d6:	2103      	movs	r1, #3
   113d8:	f7f7 be9c 	b.w	9114 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>

000113dc <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY>:
   113dc:	b570      	push	{r4, r5, r6, lr}
   113de:	460c      	mov	r4, r1
   113e0:	4615      	mov	r5, r2
   113e2:	4606      	mov	r6, r0
   113e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   113e8:	2100      	movs	r1, #0
   113ea:	4620      	mov	r0, r4
   113ec:	f7fd fd72 	bl	eed4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   113f0:	8026      	strh	r6, [r4, #0]
   113f2:	b14d      	cbz	r5, 11408 <sym_ZPJU5R5GDEFYRMC4TDZZOTGF3X7ZJAYC5F5EFYY+0x2c>
   113f4:	6828      	ldr	r0, [r5, #0]
   113f6:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
   113fa:	6868      	ldr	r0, [r5, #4]
   113fc:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
   11400:	68a8      	ldr	r0, [r5, #8]
   11402:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   11406:	bd70      	pop	{r4, r5, r6, pc}
   11408:	f640 116b 	movw	r1, #2411	; 0x96b
   1140c:	2036      	movs	r0, #54	; 0x36
   1140e:	f7f2 fbb9 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011412 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   11412:	f7f2 bf1d 	b.w	4250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   11416:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1141a:	f001 0107 	and.w	r1, r1, #7
   1141e:	7800      	ldrb	r0, [r0, #0]
   11420:	2201      	movs	r2, #1
   11422:	408a      	lsls	r2, r1
   11424:	4010      	ands	r0, r2
   11426:	40c8      	lsrs	r0, r1
   11428:	4770      	bx	lr
   1142a:	b118      	cbz	r0, 11434 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   1142c:	2802      	cmp	r0, #2
   1142e:	d001      	beq.n	11434 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x22>
   11430:	2001      	movs	r0, #1
   11432:	4770      	bx	lr
   11434:	2000      	movs	r0, #0
   11436:	4770      	bx	lr

00011438 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   11438:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1143c:	7881      	ldrb	r1, [r0, #2]
   1143e:	4605      	mov	r5, r0
   11440:	291a      	cmp	r1, #26
   11442:	d025      	beq.n	11490 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
   11444:	dc0e      	bgt.n	11464 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   11446:	2916      	cmp	r1, #22
   11448:	d22e      	bcs.n	114a8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   1144a:	e8df f001 	tbb	[pc, r1]
   1144e:	2d2d      	.short	0x2d2d
   11450:	212d2d2d 	.word	0x212d2d2d
   11454:	2d2d2d2d 	.word	0x2d2d2d2d
   11458:	2d2d2d2d 	.word	0x2d2d2d2d
   1145c:	2d2d2d2d 	.word	0x2d2d2d2d
   11460:	2121212d 	.word	0x2121212d
   11464:	292a      	cmp	r1, #42	; 0x2a
   11466:	d01f      	beq.n	114a8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   11468:	dc0b      	bgt.n	11482 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   1146a:	f1a1 011e 	sub.w	r1, r1, #30
   1146e:	290c      	cmp	r1, #12
   11470:	d21a      	bcs.n	114a8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   11472:	e8df f001 	tbb	[pc, r1]
   11476:	1919      	.short	0x1919
   11478:	19191919 	.word	0x19191919
   1147c:	19191919 	.word	0x19191919
   11480:	0d19      	.short	0x0d19
   11482:	393a      	subs	r1, #58	; 0x3a
   11484:	2904      	cmp	r1, #4
   11486:	d20f      	bcs.n	114a8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   11488:	e8df f001 	tbb	[pc, r1]
   1148c:	020e020e 	.word	0x020e020e
   11490:	8828      	ldrh	r0, [r5, #0]
   11492:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   11496:	d207      	bcs.n	114a8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   11498:	2701      	movs	r7, #1
   1149a:	4669      	mov	r1, sp
   1149c:	f7fe ff24 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   114a0:	b120      	cbz	r0, 114ac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
   114a2:	2002      	movs	r0, #2
   114a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   114a8:	2012      	movs	r0, #18
   114aa:	e7fb      	b.n	114a4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   114ac:	f89d 0000 	ldrb.w	r0, [sp]
   114b0:	f000 fc22 	bl	11cf8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   114b4:	9c01      	ldr	r4, [sp, #4]
   114b6:	b110      	cbz	r0, 114be <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x86>
   114b8:	f504 7494 	add.w	r4, r4, #296	; 0x128
   114bc:	e001      	b.n	114c2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   114be:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   114c2:	f89d 0000 	ldrb.w	r0, [sp]
   114c6:	f000 fc17 	bl	11cf8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   114ca:	9e01      	ldr	r6, [sp, #4]
   114cc:	b110      	cbz	r0, 114d4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x9c>
   114ce:	f206 1629 	addw	r6, r6, #297	; 0x129
   114d2:	e001      	b.n	114d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xa0>
   114d4:	f206 1689 	addw	r6, r6, #393	; 0x189
   114d8:	4668      	mov	r0, sp
   114da:	f000 fd6d 	bl	11fb8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   114de:	b108      	cbz	r0, 114e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xac>
   114e0:	7820      	ldrb	r0, [r4, #0]
   114e2:	b108      	cbz	r0, 114e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xb0>
   114e4:	200c      	movs	r0, #12
   114e6:	e7dd      	b.n	114a4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   114e8:	7027      	strb	r7, [r4, #0]
   114ea:	78a8      	ldrb	r0, [r5, #2]
   114ec:	7030      	strb	r0, [r6, #0]
   114ee:	4668      	mov	r0, sp
   114f0:	f7ff fbb1 	bl	10c56 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   114f4:	2000      	movs	r0, #0
   114f6:	e7d5      	b.n	114a4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

000114f8 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   114f8:	b510      	push	{r4, lr}
   114fa:	4604      	mov	r4, r0
   114fc:	7800      	ldrb	r0, [r0, #0]
   114fe:	b118      	cbz	r0, 11508 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   11500:	2801      	cmp	r0, #1
   11502:	d001      	beq.n	11508 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   11504:	2012      	movs	r0, #18
   11506:	bd10      	pop	{r4, pc}
   11508:	f000 fd26 	bl	11f58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   1150c:	b120      	cbz	r0, 11518 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1150e:	f7f4 fc6d 	bl	5dec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11512:	b108      	cbz	r0, 11518 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   11514:	200c      	movs	r0, #12
   11516:	bd10      	pop	{r4, pc}
   11518:	7820      	ldrb	r0, [r4, #0]
   1151a:	f7ff ff86 	bl	1142a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   1151e:	1de2      	adds	r2, r4, #7
   11520:	f104 0317 	add.w	r3, r4, #23
   11524:	1c61      	adds	r1, r4, #1
   11526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1152a:	f7f4 bcaf 	b.w	5e8c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0001152e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1152e:	b510      	push	{r4, lr}
   11530:	4604      	mov	r4, r0
   11532:	f000 fe48 	bl	121c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   11536:	b108      	cbz	r0, 1153c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   11538:	200c      	movs	r0, #12
   1153a:	bd10      	pop	{r4, pc}
   1153c:	7820      	ldrb	r0, [r4, #0]
   1153e:	b128      	cbz	r0, 1154c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   11540:	2801      	cmp	r0, #1
   11542:	d003      	beq.n	1154c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   11544:	28ff      	cmp	r0, #255	; 0xff
   11546:	d00b      	beq.n	11560 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   11548:	2012      	movs	r0, #18
   1154a:	bd10      	pop	{r4, pc}
   1154c:	f7ff ff6d 	bl	1142a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   11550:	1c61      	adds	r1, r4, #1
   11552:	f7f4 fde3 	bl	611c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   11556:	b108      	cbz	r0, 1155c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   11558:	2000      	movs	r0, #0
   1155a:	bd10      	pop	{r4, pc}
   1155c:	2007      	movs	r0, #7
   1155e:	bd10      	pop	{r4, pc}
   11560:	2001      	movs	r0, #1
   11562:	f7f4 fe17 	bl	6194 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   11566:	e7f7      	b.n	11558 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

00011568 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   11568:	b510      	push	{r4, lr}
   1156a:	f000 fcf5 	bl	11f58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   1156e:	b120      	cbz	r0, 1157a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   11570:	f7f4 fc3c 	bl	5dec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11574:	b108      	cbz	r0, 1157a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   11576:	200c      	movs	r0, #12
   11578:	bd10      	pop	{r4, pc}
   1157a:	f7f4 fced 	bl	5f58 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   1157e:	2000      	movs	r0, #0
   11580:	bd10      	pop	{r4, pc}

00011582 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   11582:	b510      	push	{r4, lr}
   11584:	f000 fe1f 	bl	121c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   11588:	b108      	cbz	r0, 1158e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   1158a:	200c      	movs	r0, #12
   1158c:	bd10      	pop	{r4, pc}
   1158e:	f7f4 fe07 	bl	61a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   11592:	2000      	movs	r0, #0
   11594:	bd10      	pop	{r4, pc}

00011596 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   11596:	b570      	push	{r4, r5, r6, lr}
   11598:	4605      	mov	r5, r0
   1159a:	f000 fb6d 	bl	11c78 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   1159e:	2800      	cmp	r0, #0
   115a0:	d10e      	bne.n	115c0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2a>
   115a2:	8828      	ldrh	r0, [r5, #0]
   115a4:	2100      	movs	r1, #0
   115a6:	f7fe fd7a 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   115aa:	0004      	movs	r4, r0
   115ac:	d007      	beq.n	115be <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   115ae:	f000 fd0a 	bl	11fc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   115b2:	b120      	cbz	r0, 115be <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x28>
   115b4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   115b8:	7800      	ldrb	r0, [r0, #0]
   115ba:	b930      	cbnz	r0, 115ca <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   115bc:	e001      	b.n	115c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x2c>
   115be:	2002      	movs	r0, #2
   115c0:	bd70      	pop	{r4, r5, r6, pc}
   115c2:	f8d4 018c 	ldr.w	r0, [r4, #396]	; 0x18c
   115c6:	7800      	ldrb	r0, [r0, #0]
   115c8:	b108      	cbz	r0, 115ce <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   115ca:	203a      	movs	r0, #58	; 0x3a
   115cc:	bd70      	pop	{r4, r5, r6, pc}
   115ce:	88a8      	ldrh	r0, [r5, #4]
   115d0:	f7fe fea2 	bl	10318 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   115d4:	4606      	mov	r6, r0
   115d6:	4601      	mov	r1, r0
   115d8:	2005      	movs	r0, #5
   115da:	f7ff f8eb 	bl	107b4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   115de:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   115e2:	80c8      	strh	r0, [r1, #6]
   115e4:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   115e8:	2000      	movs	r0, #0
   115ea:	6088      	str	r0, [r1, #8]
   115ec:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   115f0:	60c6      	str	r6, [r0, #12]
   115f2:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   115f6:	88e8      	ldrh	r0, [r5, #6]
   115f8:	8208      	strh	r0, [r1, #16]
   115fa:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   115fe:	8928      	ldrh	r0, [r5, #8]
   11600:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   11604:	8248      	strh	r0, [r1, #18]
   11606:	4631      	mov	r1, r6
   11608:	2008      	movs	r0, #8
   1160a:	f7ff f8d3 	bl	107b4 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   1160e:	6821      	ldr	r1, [r4, #0]
   11610:	4602      	mov	r2, r0
   11612:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   11616:	88c8      	ldrh	r0, [r1, #6]
   11618:	4282      	cmp	r2, r0
   1161a:	d301      	bcc.n	11620 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x8a>
   1161c:	42b0      	cmp	r0, r6
   1161e:	d301      	bcc.n	11624 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x8e>
   11620:	2012      	movs	r0, #18
   11622:	bd70      	pop	{r4, r5, r6, pc}
   11624:	f641 504c 	movw	r0, #7500	; 0x1d4c
   11628:	4286      	cmp	r6, r0
   1162a:	d209      	bcs.n	11640 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xaa>
   1162c:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
   11630:	2802      	cmp	r0, #2
   11632:	d103      	bne.n	1163c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xa6>
   11634:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11638:	2802      	cmp	r0, #2
   1163a:	d001      	beq.n	11640 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0xaa>
   1163c:	200c      	movs	r0, #12
   1163e:	bd70      	pop	{r4, r5, r6, pc}
   11640:	8828      	ldrh	r0, [r5, #0]
   11642:	8048      	strh	r0, [r1, #2]
   11644:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   11648:	2002      	movs	r0, #2
   1164a:	7008      	strb	r0, [r1, #0]
   1164c:	2000      	movs	r0, #0
   1164e:	bd70      	pop	{r4, r5, r6, pc}

00011650 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   11650:	b510      	push	{r4, lr}
   11652:	460b      	mov	r3, r1
   11654:	2201      	movs	r2, #1
   11656:	f100 0110 	add.w	r1, r0, #16
   1165a:	f7f4 ff57 	bl	650c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   1165e:	2000      	movs	r0, #0
   11660:	bd10      	pop	{r4, pc}

00011662 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   11662:	b510      	push	{r4, lr}
   11664:	8800      	ldrh	r0, [r0, #0]
   11666:	2101      	movs	r1, #1
   11668:	f7fe fd19 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1166c:	b118      	cbz	r0, 11676 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   1166e:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
   11672:	b111      	cbz	r1, 1167a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   11674:	e007      	b.n	11686 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   11676:	2002      	movs	r0, #2
   11678:	bd10      	pop	{r4, pc}
   1167a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
   1167e:	2914      	cmp	r1, #20
   11680:	d003      	beq.n	1168a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   11682:	2915      	cmp	r1, #21
   11684:	d001      	beq.n	1168a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   11686:	200c      	movs	r0, #12
   11688:	bd10      	pop	{r4, pc}
   1168a:	2102      	movs	r1, #2
   1168c:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
   11690:	2000      	movs	r0, #0
   11692:	bd10      	pop	{r4, pc}

00011694 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   11694:	b570      	push	{r4, r5, r6, lr}
   11696:	4605      	mov	r5, r0
   11698:	8800      	ldrh	r0, [r0, #0]
   1169a:	2101      	movs	r1, #1
   1169c:	f7fe fcff 	bl	1009e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   116a0:	0004      	movs	r4, r0
   116a2:	d003      	beq.n	116ac <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   116a4:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
   116a8:	b110      	cbz	r0, 116b0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   116aa:	e00a      	b.n	116c2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   116ac:	2002      	movs	r0, #2
   116ae:	bd70      	pop	{r4, r5, r6, pc}
   116b0:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
   116b4:	2814      	cmp	r0, #20
   116b6:	d001      	beq.n	116bc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   116b8:	2815      	cmp	r0, #21
   116ba:	d102      	bne.n	116c2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x2e>
   116bc:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
   116c0:	b108      	cbz	r0, 116c6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x32>
   116c2:	200c      	movs	r0, #12
   116c4:	bd70      	pop	{r4, r5, r6, pc}
   116c6:	2210      	movs	r2, #16
   116c8:	1ca9      	adds	r1, r5, #2
   116ca:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
   116ce:	f7f2 f8cf 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   116d2:	2001      	movs	r0, #1
   116d4:	f884 018b 	strb.w	r0, [r4, #395]	; 0x18b
   116d8:	2000      	movs	r0, #0
   116da:	bd70      	pop	{r4, r5, r6, pc}

000116dc <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   116dc:	b510      	push	{r4, lr}
   116de:	2108      	movs	r1, #8
   116e0:	f7f3 fabc 	bl	4c5c <sym_MCAMJAIBJDD4JPS3OAKE3HA4IEMPLSTZ46SLXYY>
   116e4:	2000      	movs	r0, #0
   116e6:	bd10      	pop	{r4, pc}

000116e8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   116e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   116ea:	460c      	mov	r4, r1
   116ec:	4605      	mov	r5, r0
   116ee:	8800      	ldrh	r0, [r0, #0]
   116f0:	4669      	mov	r1, sp
   116f2:	f7fe fdf9 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   116f6:	2200      	movs	r2, #0
   116f8:	b128      	cbz	r0, 11706 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   116fa:	f8c4 2002 	str.w	r2, [r4, #2]
   116fe:	71a2      	strb	r2, [r4, #6]
   11700:	8022      	strh	r2, [r4, #0]
   11702:	2002      	movs	r0, #2
   11704:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11706:	9901      	ldr	r1, [sp, #4]
   11708:	4608      	mov	r0, r1
   1170a:	3178      	adds	r1, #120	; 0x78
   1170c:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
   11710:	68c3      	ldr	r3, [r0, #12]
   11712:	f8c4 3002 	str.w	r3, [r4, #2]
   11716:	7c03      	ldrb	r3, [r0, #16]
   11718:	71a3      	strb	r3, [r4, #6]
   1171a:	882b      	ldrh	r3, [r5, #0]
   1171c:	8023      	strh	r3, [r4, #0]
   1171e:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   11722:	2b00      	cmp	r3, #0
   11724:	d1f2      	bne.n	1170c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   11726:	2000      	movs	r0, #0
   11728:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001172a <sym_7YL5EH5YISPHYP3GLCPHHLYJDC4YFSU26ARBXOI>:
   1172a:	b510      	push	{r4, lr}
   1172c:	4604      	mov	r4, r0
   1172e:	2000      	movs	r0, #0
   11730:	6020      	str	r0, [r4, #0]
   11732:	6060      	str	r0, [r4, #4]
   11734:	f7fb fdce 	bl	d2d4 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>
   11738:	7020      	strb	r0, [r4, #0]
   1173a:	2001      	movs	r0, #1
   1173c:	f7fb fdca 	bl	d2d4 <sym_JE272R3HBS6JPKEOTWU6LUGD7QH33BV7DJJJ5YI>
   11740:	7060      	strb	r0, [r4, #1]
   11742:	2000      	movs	r0, #0
   11744:	bd10      	pop	{r4, pc}

00011746 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   11746:	b510      	push	{r4, lr}
   11748:	4604      	mov	r4, r0
   1174a:	f000 fc2f 	bl	11fac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   1174e:	b140      	cbz	r0, 11762 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   11750:	20fb      	movs	r0, #251	; 0xfb
   11752:	8020      	strh	r0, [r4, #0]
   11754:	f640 0148 	movw	r1, #2120	; 0x848
   11758:	8061      	strh	r1, [r4, #2]
   1175a:	80a0      	strh	r0, [r4, #4]
   1175c:	80e1      	strh	r1, [r4, #6]
   1175e:	2000      	movs	r0, #0
   11760:	bd10      	pop	{r4, pc}
   11762:	2001      	movs	r0, #1
   11764:	bd10      	pop	{r4, pc}

00011766 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   11766:	2108      	movs	r1, #8
   11768:	7001      	strb	r1, [r0, #0]
   1176a:	2000      	movs	r0, #0
   1176c:	4770      	bx	lr

0001176e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   1176e:	21d8      	movs	r1, #216	; 0xd8
   11770:	7001      	strb	r1, [r0, #0]
   11772:	2104      	movs	r1, #4
   11774:	7041      	strb	r1, [r0, #1]
   11776:	2000      	movs	r0, #0
   11778:	4770      	bx	lr

0001177a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1177a:	2108      	movs	r1, #8
   1177c:	7001      	strb	r1, [r0, #0]
   1177e:	2000      	movs	r0, #0
   11780:	4770      	bx	lr

00011782 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   11782:	b510      	push	{r4, lr}
   11784:	4604      	mov	r4, r0
   11786:	7800      	ldrb	r0, [r0, #0]
   11788:	b108      	cbz	r0, 1178e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   1178a:	2801      	cmp	r0, #1
   1178c:	d110      	bne.n	117b0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1178e:	f000 fbe3 	bl	11f58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   11792:	b120      	cbz	r0, 1179e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   11794:	f7f4 fb2a 	bl	5dec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   11798:	b108      	cbz	r0, 1179e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   1179a:	200c      	movs	r0, #12
   1179c:	bd10      	pop	{r4, pc}
   1179e:	7820      	ldrb	r0, [r4, #0]
   117a0:	f7ff fe43 	bl	1142a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   117a4:	1c61      	adds	r1, r4, #1
   117a6:	f7f4 fc75 	bl	6094 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   117aa:	b108      	cbz	r0, 117b0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   117ac:	2000      	movs	r0, #0
   117ae:	bd10      	pop	{r4, pc}
   117b0:	2012      	movs	r0, #18
   117b2:	bd10      	pop	{r4, pc}

000117b4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   117b4:	b510      	push	{r4, lr}
   117b6:	4604      	mov	r4, r0
   117b8:	f000 fd05 	bl	121c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54e>
   117bc:	b108      	cbz	r0, 117c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   117be:	200c      	movs	r0, #12
   117c0:	bd10      	pop	{r4, pc}
   117c2:	7820      	ldrb	r0, [r4, #0]
   117c4:	b120      	cbz	r0, 117d0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   117c6:	2801      	cmp	r0, #1
   117c8:	d002      	beq.n	117d0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   117ca:	28ff      	cmp	r0, #255	; 0xff
   117cc:	d108      	bne.n	117e0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   117ce:	e009      	b.n	117e4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   117d0:	f7ff fe2b 	bl	1142a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   117d4:	1c61      	adds	r1, r4, #1
   117d6:	f7fe fd7c 	bl	102d2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   117da:	b108      	cbz	r0, 117e0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   117dc:	2000      	movs	r0, #0
   117de:	bd10      	pop	{r4, pc}
   117e0:	2012      	movs	r0, #18
   117e2:	bd10      	pop	{r4, pc}
   117e4:	2000      	movs	r0, #0
   117e6:	f7f4 fcd5 	bl	6194 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   117ea:	e7f7      	b.n	117dc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

000117ec <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   117ec:	b510      	push	{r4, lr}
   117ee:	4604      	mov	r4, r0
   117f0:	f000 fbb2 	bl	11f58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   117f4:	b108      	cbz	r0, 117fa <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   117f6:	200c      	movs	r0, #12
   117f8:	bd10      	pop	{r4, pc}
   117fa:	7820      	ldrb	r0, [r4, #0]
   117fc:	f000 0001 	and.w	r0, r0, #1
   11800:	f7f4 faee 	bl	5de0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   11804:	2000      	movs	r0, #0
   11806:	bd10      	pop	{r4, pc}

00011808 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   11808:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1180a:	460d      	mov	r5, r1
   1180c:	4604      	mov	r4, r0
   1180e:	f000 fbcd 	bl	11fac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11812:	b130      	cbz	r0, 11822 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   11814:	88a2      	ldrh	r2, [r4, #4]
   11816:	f244 2090 	movw	r0, #17040	; 0x4290
   1181a:	4282      	cmp	r2, r0
   1181c:	d903      	bls.n	11826 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   1181e:	2012      	movs	r0, #18
   11820:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11822:	2001      	movs	r0, #1
   11824:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11826:	f640 0048 	movw	r0, #2120	; 0x848
   1182a:	4282      	cmp	r2, r0
   1182c:	d300      	bcc.n	11830 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   1182e:	4602      	mov	r2, r0
   11830:	8820      	ldrh	r0, [r4, #0]
   11832:	f8ad 0000 	strh.w	r0, [sp]
   11836:	8860      	ldrh	r0, [r4, #2]
   11838:	f8ad 0002 	strh.w	r0, [sp, #2]
   1183c:	f8ad 2004 	strh.w	r2, [sp, #4]
   11840:	8860      	ldrh	r0, [r4, #2]
   11842:	f8ad 0006 	strh.w	r0, [sp, #6]
   11846:	f8ad 2008 	strh.w	r2, [sp, #8]
   1184a:	8820      	ldrh	r0, [r4, #0]
   1184c:	8028      	strh	r0, [r5, #0]
   1184e:	4668      	mov	r0, sp
   11850:	f000 fbdc 	bl	1200c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x394>
   11854:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00011856 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   11856:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11858:	4604      	mov	r4, r0
   1185a:	f7fb fd35 	bl	d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1185e:	f3c0 2000 	ubfx	r0, r0, #8, #1
   11862:	b1b0      	cbz	r0, 11892 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   11864:	f10d 0007 	add.w	r0, sp, #7
   11868:	9000      	str	r0, [sp, #0]
   1186a:	7922      	ldrb	r2, [r4, #4]
   1186c:	78e1      	ldrb	r1, [r4, #3]
   1186e:	78a0      	ldrb	r0, [r4, #2]
   11870:	f10d 0306 	add.w	r3, sp, #6
   11874:	f000 fc61 	bl	1213a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4c2>
   11878:	2800      	cmp	r0, #0
   1187a:	d109      	bne.n	11890 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   1187c:	8820      	ldrh	r0, [r4, #0]
   1187e:	f8ad 0004 	strh.w	r0, [sp, #4]
   11882:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   11886:	f8ad 0008 	strh.w	r0, [sp, #8]
   1188a:	a801      	add	r0, sp, #4
   1188c:	f000 f8c7 	bl	11a1e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   11890:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11892:	2001      	movs	r0, #1
   11894:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00011896 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   11896:	b510      	push	{r4, lr}
   11898:	4604      	mov	r4, r0
   1189a:	f000 fb5d 	bl	11f58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e0>
   1189e:	b120      	cbz	r0, 118aa <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   118a0:	f7f4 faa4 	bl	5dec <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   118a4:	b108      	cbz	r0, 118aa <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   118a6:	200c      	movs	r0, #12
   118a8:	bd10      	pop	{r4, pc}
   118aa:	7820      	ldrb	r0, [r4, #0]
   118ac:	f7ff fdbd 	bl	1142a <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x18>
   118b0:	79e2      	ldrb	r2, [r4, #7]
   118b2:	1c61      	adds	r1, r4, #1
   118b4:	f7f4 fa2a 	bl	5d0c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   118b8:	b108      	cbz	r0, 118be <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   118ba:	2000      	movs	r0, #0
   118bc:	bd10      	pop	{r4, pc}
   118be:	2002      	movs	r0, #2
   118c0:	bd10      	pop	{r4, pc}

000118c2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   118c2:	b510      	push	{r4, lr}
   118c4:	4604      	mov	r4, r0
   118c6:	2001      	movs	r0, #1
   118c8:	f7fb fa22 	bl	cd10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   118cc:	b128      	cbz	r0, 118da <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   118ce:	4621      	mov	r1, r4
   118d0:	2001      	movs	r0, #1
   118d2:	f7f3 fb25 	bl	4f20 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   118d6:	2000      	movs	r0, #0
   118d8:	bd10      	pop	{r4, pc}
   118da:	200c      	movs	r0, #12
   118dc:	bd10      	pop	{r4, pc}

000118de <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   118de:	b510      	push	{r4, lr}
   118e0:	8800      	ldrh	r0, [r0, #0]
   118e2:	f7f4 fbfd 	bl	60e0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   118e6:	b108      	cbz	r0, 118ec <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   118e8:	2000      	movs	r0, #0
   118ea:	bd10      	pop	{r4, pc}
   118ec:	2030      	movs	r0, #48	; 0x30
   118ee:	bd10      	pop	{r4, pc}

000118f0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   118f0:	b51c      	push	{r2, r3, r4, lr}
   118f2:	4604      	mov	r4, r0
   118f4:	f000 fb5a 	bl	11fac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   118f8:	b178      	cbz	r0, 1191a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   118fa:	8820      	ldrh	r0, [r4, #0]
   118fc:	f8ad 0000 	strh.w	r0, [sp]
   11900:	8860      	ldrh	r0, [r4, #2]
   11902:	f8ad 0002 	strh.w	r0, [sp, #2]
   11906:	8820      	ldrh	r0, [r4, #0]
   11908:	f8ad 0004 	strh.w	r0, [sp, #4]
   1190c:	8860      	ldrh	r0, [r4, #2]
   1190e:	f8ad 0006 	strh.w	r0, [sp, #6]
   11912:	4668      	mov	r0, sp
   11914:	f7fb fc04 	bl	d120 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
   11918:	bd1c      	pop	{r2, r3, r4, pc}
   1191a:	2001      	movs	r0, #1
   1191c:	bd1c      	pop	{r2, r3, r4, pc}

0001191e <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   1191e:	b510      	push	{r4, lr}
   11920:	f7f3 fb2c 	bl	4f7c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   11924:	2000      	movs	r0, #0
   11926:	bd10      	pop	{r4, pc}

00011928 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   11928:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1192a:	460c      	mov	r4, r1
   1192c:	4605      	mov	r5, r0
   1192e:	f000 fb3d 	bl	11fac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11932:	b178      	cbz	r0, 11954 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2c>
   11934:	4669      	mov	r1, sp
   11936:	4628      	mov	r0, r5
   11938:	f7fe fcd6 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1193c:	2800      	cmp	r0, #0
   1193e:	d108      	bne.n	11952 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x2a>
   11940:	f89d 0000 	ldrb.w	r0, [sp]
   11944:	b140      	cbz	r0, 11958 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x30>
   11946:	2100      	movs	r1, #0
   11948:	4622      	mov	r2, r4
   1194a:	9801      	ldr	r0, [sp, #4]
   1194c:	f000 faca 	bl	11ee4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   11950:	2000      	movs	r0, #0
   11952:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11954:	2001      	movs	r0, #1
   11956:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11958:	2101      	movs	r1, #1
   1195a:	e7f5      	b.n	11948 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>

0001195c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   1195c:	b538      	push	{r3, r4, r5, lr}
   1195e:	460d      	mov	r5, r1
   11960:	4604      	mov	r4, r0
   11962:	f000 fa32 	bl	11dca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   11966:	2800      	cmp	r0, #0
   11968:	d108      	bne.n	1197c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   1196a:	4620      	mov	r0, r4
   1196c:	f000 f9fc 	bl	11d68 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf0>
   11970:	2800      	cmp	r0, #0
   11972:	d103      	bne.n	1197c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x20>
   11974:	f7f7 face 	bl	8f14 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   11978:	b108      	cbz	r0, 1197e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x22>
   1197a:	200c      	movs	r0, #12
   1197c:	bd38      	pop	{r3, r4, r5, pc}
   1197e:	f7f5 ffe7 	bl	7950 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   11982:	7028      	strb	r0, [r5, #0]
   11984:	74e0      	strb	r0, [r4, #19]
   11986:	7e60      	ldrb	r0, [r4, #25]
   11988:	b150      	cbz	r0, 119a0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x44>
   1198a:	20ff      	movs	r0, #255	; 0xff
   1198c:	f88d 0000 	strb.w	r0, [sp]
   11990:	4669      	mov	r1, sp
   11992:	2000      	movs	r0, #0
   11994:	f7f6 f836 	bl	7a04 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
   11998:	4669      	mov	r1, sp
   1199a:	2000      	movs	r0, #0
   1199c:	f7f6 f840 	bl	7a20 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
   119a0:	4620      	mov	r0, r4
   119a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   119a6:	f7f5 be87 	b.w	76b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>

000119aa <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   119aa:	b510      	push	{r4, lr}
   119ac:	4604      	mov	r4, r0
   119ae:	2000      	movs	r0, #0
   119b0:	f7fb f9ae 	bl	cd10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x68>
   119b4:	b128      	cbz	r0, 119c2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   119b6:	4621      	mov	r1, r4
   119b8:	2000      	movs	r0, #0
   119ba:	f7f3 fab1 	bl	4f20 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   119be:	2000      	movs	r0, #0
   119c0:	bd10      	pop	{r4, pc}
   119c2:	200c      	movs	r0, #12
   119c4:	bd10      	pop	{r4, pc}

000119c6 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
   119c6:	b510      	push	{r4, lr}
   119c8:	4604      	mov	r4, r0
   119ca:	f7fa fbe5 	bl	c198 <sym_OGE53YVCDVSXCRWCTHIWFUD3N5GK3H27GWUSVTA>
   119ce:	b150      	cbz	r0, 119e6 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   119d0:	f7f7 fb3c 	bl	904c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
   119d4:	b138      	cbz	r0, 119e6 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x20>
   119d6:	7820      	ldrb	r0, [r4, #0]
   119d8:	f7f7 fb56 	bl	9088 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
   119dc:	7820      	ldrb	r0, [r4, #0]
   119de:	f7fa fbaf 	bl	c140 <sym_RYEXTTI2ZOCM2CXR6YIX3LY4EY42JA2IAGTBDIY>
   119e2:	2000      	movs	r0, #0
   119e4:	bd10      	pop	{r4, pc}
   119e6:	200c      	movs	r0, #12
   119e8:	bd10      	pop	{r4, pc}

000119ea <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   119ea:	b510      	push	{r4, lr}
   119ec:	4604      	mov	r4, r0
   119ee:	7800      	ldrb	r0, [r0, #0]
   119f0:	f000 0001 	and.w	r0, r0, #1
   119f4:	f7fa fbe6 	bl	c1c4 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
   119f8:	7820      	ldrb	r0, [r4, #0]
   119fa:	f000 0001 	and.w	r0, r0, #1
   119fe:	f7f7 fb49 	bl	9094 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
   11a02:	2000      	movs	r0, #0
   11a04:	bd10      	pop	{r4, pc}

00011a06 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   11a06:	b510      	push	{r4, lr}
   11a08:	4604      	mov	r4, r0
   11a0a:	f000 facf 	bl	11fac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x334>
   11a0e:	b120      	cbz	r0, 11a1a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   11a10:	4620      	mov	r0, r4
   11a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a16:	f000 baf9 	b.w	1200c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x394>
   11a1a:	2001      	movs	r0, #1
   11a1c:	bd10      	pop	{r4, pc}

00011a1e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   11a1e:	b510      	push	{r4, lr}
   11a20:	4604      	mov	r4, r0
   11a22:	8880      	ldrh	r0, [r0, #4]
   11a24:	b128      	cbz	r0, 11a32 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11a26:	2801      	cmp	r0, #1
   11a28:	d003      	beq.n	11a32 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11a2a:	2802      	cmp	r0, #2
   11a2c:	d001      	beq.n	11a32 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   11a2e:	2012      	movs	r0, #18
   11a30:	bd10      	pop	{r4, pc}
   11a32:	78e0      	ldrb	r0, [r4, #3]
   11a34:	f000 fa33 	bl	11e9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
   11a38:	b148      	cbz	r0, 11a4e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11a3a:	78a0      	ldrb	r0, [r4, #2]
   11a3c:	f000 fa2f 	bl	11e9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x226>
   11a40:	b128      	cbz	r0, 11a4e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   11a42:	4620      	mov	r0, r4
   11a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a48:	2101      	movs	r1, #1
   11a4a:	f000 b893 	b.w	11b74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   11a4e:	2011      	movs	r0, #17
   11a50:	bd10      	pop	{r4, pc}

00011a52 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   11a52:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11a54:	460c      	mov	r4, r1
   11a56:	4605      	mov	r5, r0
   11a58:	8800      	ldrh	r0, [r0, #0]
   11a5a:	4669      	mov	r1, sp
   11a5c:	f7fe fc44 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11a60:	2800      	cmp	r0, #0
   11a62:	d106      	bne.n	11a72 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   11a64:	9801      	ldr	r0, [sp, #4]
   11a66:	8829      	ldrh	r1, [r5, #0]
   11a68:	8021      	strh	r1, [r4, #0]
   11a6a:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   11a6e:	8060      	strh	r0, [r4, #2]
   11a70:	2000      	movs	r0, #0
   11a72:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011a74 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   11a74:	b510      	push	{r4, lr}
   11a76:	4604      	mov	r4, r0
   11a78:	4601      	mov	r1, r0
   11a7a:	2000      	movs	r0, #0
   11a7c:	f7f3 fa2e 	bl	4edc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   11a80:	b910      	cbnz	r0, 11a88 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   11a82:	2000      	movs	r0, #0
   11a84:	6020      	str	r0, [r4, #0]
   11a86:	80a0      	strh	r0, [r4, #4]
   11a88:	2000      	movs	r0, #0
   11a8a:	bd10      	pop	{r4, pc}

00011a8c <sym_2PTHETYGBZAPJ2ZKYDOVYDIWST3AXGZGS3MY6DI>:
   11a8c:	2100      	movs	r1, #0
   11a8e:	6001      	str	r1, [r0, #0]
   11a90:	6041      	str	r1, [r0, #4]
   11a92:	2160      	movs	r1, #96	; 0x60
   11a94:	7101      	strb	r1, [r0, #4]
   11a96:	2000      	movs	r0, #0
   11a98:	4770      	bx	lr

00011a9a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   11a9a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11a9c:	8800      	ldrh	r0, [r0, #0]
   11a9e:	4669      	mov	r1, sp
   11aa0:	f7fe fc22 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11aa4:	b978      	cbnz	r0, 11ac6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   11aa6:	4668      	mov	r0, sp
   11aa8:	f000 fa86 	bl	11fb8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x340>
   11aac:	b158      	cbz	r0, 11ac6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   11aae:	9c01      	ldr	r4, [sp, #4]
   11ab0:	f89d 0000 	ldrb.w	r0, [sp]
   11ab4:	3478      	adds	r4, #120	; 0x78
   11ab6:	f000 f91f 	bl	11cf8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   11aba:	2800      	cmp	r0, #0
   11abc:	9801      	ldr	r0, [sp, #4]
   11abe:	d004      	beq.n	11aca <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x30>
   11ac0:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   11ac4:	e003      	b.n	11ace <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   11ac6:	2002      	movs	r0, #2
   11ac8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11aca:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
   11ace:	7801      	ldrb	r1, [r0, #0]
   11ad0:	b911      	cbnz	r1, 11ad8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   11ad2:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   11ad6:	b109      	cbz	r1, 11adc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   11ad8:	203a      	movs	r0, #58	; 0x3a
   11ada:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11adc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   11ae0:	f04f 0501 	mov.w	r5, #1
   11ae4:	0789      	lsls	r1, r1, #30
   11ae6:	d103      	bne.n	11af0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x56>
   11ae8:	7005      	strb	r5, [r0, #0]
   11aea:	4668      	mov	r0, sp
   11aec:	f7ff f8b3 	bl	10c56 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   11af0:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   11af4:	2000      	movs	r0, #0
   11af6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00011af8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   11af8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   11afa:	460c      	mov	r4, r1
   11afc:	4605      	mov	r5, r0
   11afe:	8800      	ldrh	r0, [r0, #0]
   11b00:	4669      	mov	r1, sp
   11b02:	f7fe fbf1 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11b06:	b108      	cbz	r0, 11b0c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   11b08:	2002      	movs	r0, #2
   11b0a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11b0c:	78a8      	ldrb	r0, [r5, #2]
   11b0e:	b128      	cbz	r0, 11b1c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x24>
   11b10:	2004      	movs	r0, #4
   11b12:	70a0      	strb	r0, [r4, #2]
   11b14:	8828      	ldrh	r0, [r5, #0]
   11b16:	8020      	strh	r0, [r4, #0]
   11b18:	2000      	movs	r0, #0
   11b1a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   11b1c:	9801      	ldr	r0, [sp, #4]
   11b1e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   11b22:	e7f6      	b.n	11b12 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1a>

00011b24 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   11b24:	b510      	push	{r4, lr}
   11b26:	f7fb fb2b 	bl	d180 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   11b2a:	2000      	movs	r0, #0
   11b2c:	bd10      	pop	{r4, pc}

00011b2e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   11b2e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11b32:	460d      	mov	r5, r1
   11b34:	4604      	mov	r4, r0
   11b36:	8842      	ldrh	r2, [r0, #2]
   11b38:	f64b 3180 	movw	r1, #48000	; 0xbb80
   11b3c:	2012      	movs	r0, #18
   11b3e:	428a      	cmp	r2, r1
   11b40:	d816      	bhi.n	11b70 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11b42:	2a00      	cmp	r2, #0
   11b44:	d014      	beq.n	11b70 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11b46:	8820      	ldrh	r0, [r4, #0]
   11b48:	4669      	mov	r1, sp
   11b4a:	f7fe fbcd 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11b4e:	2800      	cmp	r0, #0
   11b50:	d10e      	bne.n	11b70 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x42>
   11b52:	8820      	ldrh	r0, [r4, #0]
   11b54:	8028      	strh	r0, [r5, #0]
   11b56:	9e01      	ldr	r6, [sp, #4]
   11b58:	1d35      	adds	r5, r6, #4
   11b5a:	3678      	adds	r6, #120	; 0x78
   11b5c:	682f      	ldr	r7, [r5, #0]
   11b5e:	8862      	ldrh	r2, [r4, #2]
   11b60:	4639      	mov	r1, r7
   11b62:	4630      	mov	r0, r6
   11b64:	f7fe fd95 	bl	10692 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   11b68:	6828      	ldr	r0, [r5, #0]
   11b6a:	42b8      	cmp	r0, r7
   11b6c:	d1f6      	bne.n	11b5c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x2e>
   11b6e:	2000      	movs	r0, #0
   11b70:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

00011b74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   11b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11b78:	b089      	sub	sp, #36	; 0x24
   11b7a:	4689      	mov	r9, r1
   11b7c:	4604      	mov	r4, r0
   11b7e:	8800      	ldrh	r0, [r0, #0]
   11b80:	a904      	add	r1, sp, #16
   11b82:	f7fe fbb1 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11b86:	2800      	cmp	r0, #0
   11b88:	d14a      	bne.n	11c20 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11b8a:	9805      	ldr	r0, [sp, #20]
   11b8c:	f89d 1010 	ldrb.w	r1, [sp, #16]
   11b90:	4605      	mov	r5, r0
   11b92:	3078      	adds	r0, #120	; 0x78
   11b94:	2900      	cmp	r1, #0
   11b96:	4629      	mov	r1, r5
   11b98:	d005      	beq.n	11ba6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x32>
   11b9a:	f891 620c 	ldrb.w	r6, [r1, #524]	; 0x20c
   11b9e:	7b41      	ldrb	r1, [r0, #13]
   11ba0:	2921      	cmp	r1, #33	; 0x21
   11ba2:	d003      	beq.n	11bac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   11ba4:	e003      	b.n	11bae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   11ba6:	f891 616e 	ldrb.w	r6, [r1, #366]	; 0x16e
   11baa:	e7f8      	b.n	11b9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x2a>
   11bac:	b13e      	cbz	r6, 11bbe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4a>
   11bae:	2700      	movs	r7, #0
   11bb0:	3046      	adds	r0, #70	; 0x46
   11bb2:	2108      	movs	r1, #8
   11bb4:	4680      	mov	r8, r0
   11bb6:	f7ff fc2e 	bl	11416 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   11bba:	b110      	cbz	r0, 11bc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   11bbc:	e007      	b.n	11bce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   11bbe:	2701      	movs	r7, #1
   11bc0:	e7f6      	b.n	11bb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   11bc2:	210b      	movs	r1, #11
   11bc4:	4640      	mov	r0, r8
   11bc6:	f7ff fc26 	bl	11416 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   11bca:	b900      	cbnz	r0, 11bce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5a>
   11bcc:	b33f      	cbz	r7, 11c1e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xaa>
   11bce:	a802      	add	r0, sp, #8
   11bd0:	9000      	str	r0, [sp, #0]
   11bd2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11bd6:	ab01      	add	r3, sp, #4
   11bd8:	4622      	mov	r2, r4
   11bda:	4629      	mov	r1, r5
   11bdc:	f000 f9c6 	bl	11f6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f4>
   11be0:	0007      	movs	r7, r0
   11be2:	d11d      	bne.n	11c20 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11be4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11be8:	9c05      	ldr	r4, [sp, #20]
   11bea:	b1e0      	cbz	r0, 11c26 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb2>
   11bec:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   11bf0:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   11bf4:	b168      	cbz	r0, 11c12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   11bf6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11bfa:	f010 0102 	ands.w	r1, r0, #2
   11bfe:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11c02:	f88d 1004 	strb.w	r1, [sp, #4]
   11c06:	f000 0002 	and.w	r0, r0, #2
   11c0a:	f88d 0008 	strb.w	r0, [sp, #8]
   11c0e:	d00d      	beq.n	11c2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   11c10:	b160      	cbz	r0, 11c2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   11c12:	2001      	movs	r0, #1
   11c14:	7060      	strb	r0, [r4, #1]
   11c16:	f04f 0800 	mov.w	r8, #0
   11c1a:	b95e      	cbnz	r6, 11c34 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc0>
   11c1c:	e008      	b.n	11c30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xbc>
   11c1e:	201a      	movs	r0, #26
   11c20:	b009      	add	sp, #36	; 0x24
   11c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11c26:	f504 74a1 	add.w	r4, r4, #322	; 0x142
   11c2a:	e7e1      	b.n	11bf0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7c>
   11c2c:	2009      	movs	r0, #9
   11c2e:	e7f7      	b.n	11c20 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   11c30:	7820      	ldrb	r0, [r4, #0]
   11c32:	b108      	cbz	r0, 11c38 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
   11c34:	273a      	movs	r7, #58	; 0x3a
   11c36:	e011      	b.n	11c5c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe8>
   11c38:	f8cd 8018 	str.w	r8, [sp, #24]
   11c3c:	f884 9000 	strb.w	r9, [r4]
   11c40:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11c44:	70a1      	strb	r1, [r4, #2]
   11c46:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11c4a:	70e0      	strb	r0, [r4, #3]
   11c4c:	f88d 1018 	strb.w	r1, [sp, #24]
   11c50:	f88d 0019 	strb.w	r0, [sp, #25]
   11c54:	a906      	add	r1, sp, #24
   11c56:	4628      	mov	r0, r5
   11c58:	f7fe fc41 	bl	104de <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   11c5c:	f884 8001 	strb.w	r8, [r4, #1]
   11c60:	4638      	mov	r0, r7
   11c62:	e7dd      	b.n	11c20 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>

00011c64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   11c64:	b510      	push	{r4, lr}
   11c66:	2008      	movs	r0, #8
   11c68:	f7fb fb1c 	bl	d2a4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   11c6c:	f7fa fae2 	bl	c234 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>
   11c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11c74:	f7f8 b994 	b.w	9fa0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>

00011c78 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   11c78:	b510      	push	{r4, lr}
   11c7a:	4604      	mov	r4, r0
   11c7c:	2000      	movs	r0, #0
   11c7e:	8822      	ldrh	r2, [r4, #0]
   11c80:	b086      	sub	sp, #24
   11c82:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   11c86:	39ff      	subs	r1, #255	; 0xff
   11c88:	d008      	beq.n	11c9c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   11c8a:	a903      	add	r1, sp, #12
   11c8c:	4610      	mov	r0, r2
   11c8e:	f7fe fb2b 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   11c92:	b110      	cbz	r0, 11c9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   11c94:	2002      	movs	r0, #2
   11c96:	b006      	add	sp, #24
   11c98:	bd10      	pop	{r4, pc}
   11c9a:	9804      	ldr	r0, [sp, #16]
   11c9c:	8921      	ldrh	r1, [r4, #8]
   11c9e:	89a3      	ldrh	r3, [r4, #12]
   11ca0:	8962      	ldrh	r2, [r4, #10]
   11ca2:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   11ca6:	88e3      	ldrh	r3, [r4, #6]
   11ca8:	88a2      	ldrh	r2, [r4, #4]
   11caa:	8861      	ldrh	r1, [r4, #2]
   11cac:	f7fb f8c2 	bl	ce34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18c>
   11cb0:	b108      	cbz	r0, 11cb6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   11cb2:	2000      	movs	r0, #0
   11cb4:	e7ef      	b.n	11c96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   11cb6:	2030      	movs	r0, #48	; 0x30
   11cb8:	e7ed      	b.n	11c96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   11cba:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11cbe:	4288      	cmp	r0, r1
   11cc0:	d303      	bcc.n	11cca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   11cc2:	f640 0148 	movw	r1, #2120	; 0x848
   11cc6:	4288      	cmp	r0, r1
   11cc8:	d300      	bcc.n	11ccc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   11cca:	4608      	mov	r0, r1
   11ccc:	4770      	bx	lr
   11cce:	07c1      	lsls	r1, r0, #31
   11cd0:	d001      	beq.n	11cd6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   11cd2:	2001      	movs	r0, #1
   11cd4:	4770      	bx	lr
   11cd6:	0780      	lsls	r0, r0, #30
   11cd8:	d501      	bpl.n	11cde <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   11cda:	2002      	movs	r0, #2
   11cdc:	4770      	bx	lr
   11cde:	2000      	movs	r0, #0
   11ce0:	4770      	bx	lr
   11ce2:	b510      	push	{r4, lr}
   11ce4:	2801      	cmp	r0, #1
   11ce6:	d006      	beq.n	11cf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   11ce8:	2802      	cmp	r0, #2
   11cea:	d004      	beq.n	11cf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   11cec:	f240 218f 	movw	r1, #655	; 0x28f
   11cf0:	2006      	movs	r0, #6
   11cf2:	f7f1 ff47 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11cf6:	bd10      	pop	{r4, pc}
   11cf8:	b108      	cbz	r0, 11cfe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x86>
   11cfa:	2000      	movs	r0, #0
   11cfc:	4770      	bx	lr
   11cfe:	2001      	movs	r0, #1
   11d00:	4770      	bx	lr
   11d02:	b570      	push	{r4, r5, r6, lr}
   11d04:	460d      	mov	r5, r1
   11d06:	8899      	ldrh	r1, [r3, #4]
   11d08:	461c      	mov	r4, r3
   11d0a:	194b      	adds	r3, r1, r5
   11d0c:	4293      	cmp	r3, r2
   11d0e:	d901      	bls.n	11d14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x9c>
   11d10:	2007      	movs	r0, #7
   11d12:	bd70      	pop	{r4, r5, r6, pc}
   11d14:	6822      	ldr	r2, [r4, #0]
   11d16:	1853      	adds	r3, r2, r1
   11d18:	4601      	mov	r1, r0
   11d1a:	462a      	mov	r2, r5
   11d1c:	4618      	mov	r0, r3
   11d1e:	f7f1 fda7 	bl	3870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11d22:	88a0      	ldrh	r0, [r4, #4]
   11d24:	4428      	add	r0, r5
   11d26:	80a0      	strh	r0, [r4, #4]
   11d28:	2000      	movs	r0, #0
   11d2a:	bd70      	pop	{r4, r5, r6, pc}
   11d2c:	b570      	push	{r4, r5, r6, lr}
   11d2e:	460c      	mov	r4, r1
   11d30:	4605      	mov	r5, r0
   11d32:	b112      	cbz	r2, 11d3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   11d34:	291f      	cmp	r1, #31
   11d36:	d807      	bhi.n	11d48 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
   11d38:	e010      	b.n	11d5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe4>
   11d3a:	2cff      	cmp	r4, #255	; 0xff
   11d3c:	d804      	bhi.n	11d48 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
   11d3e:	f7f5 fdef 	bl	7920 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   11d42:	b118      	cbz	r0, 11d4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   11d44:	2c1f      	cmp	r4, #31
   11d46:	d901      	bls.n	11d4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd4>
   11d48:	2012      	movs	r0, #18
   11d4a:	bd70      	pop	{r4, r5, r6, pc}
   11d4c:	4628      	mov	r0, r5
   11d4e:	f7f5 fe05 	bl	795c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   11d52:	b128      	cbz	r0, 11d60 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe8>
   11d54:	4620      	mov	r0, r4
   11d56:	f7f5 fc63 	bl	7620 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   11d5a:	b118      	cbz	r0, 11d64 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xec>
   11d5c:	2000      	movs	r0, #0
   11d5e:	bd70      	pop	{r4, r5, r6, pc}
   11d60:	2042      	movs	r0, #66	; 0x42
   11d62:	bd70      	pop	{r4, r5, r6, pc}
   11d64:	2045      	movs	r0, #69	; 0x45
   11d66:	bd70      	pop	{r4, r5, r6, pc}
   11d68:	b510      	push	{r4, lr}
   11d6a:	4604      	mov	r4, r0
   11d6c:	7840      	ldrb	r0, [r0, #1]
   11d6e:	06c0      	lsls	r0, r0, #27
   11d70:	d413      	bmi.n	11d9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
   11d72:	f7fb fab7 	bl	d2e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11d76:	0780      	lsls	r0, r0, #30
   11d78:	d405      	bmi.n	11d86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x10e>
   11d7a:	7d20      	ldrb	r0, [r4, #20]
   11d7c:	2802      	cmp	r0, #2
   11d7e:	d020      	beq.n	11dc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11d80:	7da0      	ldrb	r0, [r4, #22]
   11d82:	2802      	cmp	r0, #2
   11d84:	d01d      	beq.n	11dc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11d86:	f7fb faad 	bl	d2e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11d8a:	0740      	lsls	r0, r0, #29
   11d8c:	d405      	bmi.n	11d9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
   11d8e:	7d20      	ldrb	r0, [r4, #20]
   11d90:	2803      	cmp	r0, #3
   11d92:	d016      	beq.n	11dc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11d94:	7da0      	ldrb	r0, [r4, #22]
   11d96:	2803      	cmp	r0, #3
   11d98:	d013      	beq.n	11dc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11d9a:	7860      	ldrb	r0, [r4, #1]
   11d9c:	07c0      	lsls	r0, r0, #31
   11d9e:	d002      	beq.n	11da6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x12e>
   11da0:	f7fb fa2c 	bl	d1fc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   11da4:	b168      	cbz	r0, 11dc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11da6:	7860      	ldrb	r0, [r4, #1]
   11da8:	06c1      	lsls	r1, r0, #27
   11daa:	d405      	bmi.n	11db8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   11dac:	0700      	lsls	r0, r0, #28
   11dae:	d503      	bpl.n	11db8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
   11db0:	7d20      	ldrb	r0, [r4, #20]
   11db2:	2802      	cmp	r0, #2
   11db4:	d105      	bne.n	11dc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14a>
   11db6:	e006      	b.n	11dc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   11db8:	7d20      	ldrb	r0, [r4, #20]
   11dba:	2802      	cmp	r0, #2
   11dbc:	d003      	beq.n	11dc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   11dbe:	7ea0      	ldrb	r0, [r4, #26]
   11dc0:	b108      	cbz	r0, 11dc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   11dc2:	2011      	movs	r0, #17
   11dc4:	bd10      	pop	{r4, pc}
   11dc6:	2000      	movs	r0, #0
   11dc8:	bd10      	pop	{r4, pc}
   11dca:	b538      	push	{r3, r4, r5, lr}
   11dcc:	4604      	mov	r4, r0
   11dce:	7800      	ldrb	r0, [r0, #0]
   11dd0:	28ef      	cmp	r0, #239	; 0xef
   11dd2:	d860      	bhi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11dd4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   11dd8:	f8ad 0000 	strh.w	r0, [sp]
   11ddc:	9800      	ldr	r0, [sp, #0]
   11dde:	f000 f9c3 	bl	12168 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f0>
   11de2:	b3c0      	cbz	r0, 11e56 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
   11de4:	7860      	ldrb	r0, [r4, #1]
   11de6:	0701      	lsls	r1, r0, #28
   11de8:	d40f      	bmi.n	11e0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x192>
   11dea:	f8d4 2002 	ldr.w	r2, [r4, #2]
   11dee:	f8d4 1005 	ldr.w	r1, [r4, #5]
   11df2:	0a13      	lsrs	r3, r2, #8
   11df4:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
   11df8:	d84d      	bhi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11dfa:	2320      	movs	r3, #32
   11dfc:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
   11e00:	d849      	bhi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e02:	025a      	lsls	r2, r3, #9
   11e04:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   11e08:	d345      	bcc.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e0a:	7a61      	ldrb	r1, [r4, #9]
   11e0c:	b319      	cbz	r1, 11e56 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
   11e0e:	2907      	cmp	r1, #7
   11e10:	d841      	bhi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e12:	7aa1      	ldrb	r1, [r4, #10]
   11e14:	b129      	cbz	r1, 11e22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11e16:	2901      	cmp	r1, #1
   11e18:	d003      	beq.n	11e22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11e1a:	2902      	cmp	r1, #2
   11e1c:	d001      	beq.n	11e22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1aa>
   11e1e:	2903      	cmp	r1, #3
   11e20:	d139      	bne.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e22:	0742      	lsls	r2, r0, #29
   11e24:	d403      	bmi.n	11e2e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b6>
   11e26:	2902      	cmp	r1, #2
   11e28:	d001      	beq.n	11e2e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b6>
   11e2a:	2903      	cmp	r1, #3
   11e2c:	d105      	bne.n	11e3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c2>
   11e2e:	7ae1      	ldrb	r1, [r4, #11]
   11e30:	b109      	cbz	r1, 11e36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1be>
   11e32:	2901      	cmp	r1, #1
   11e34:	d12f      	bne.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e36:	0741      	lsls	r1, r0, #29
   11e38:	d407      	bmi.n	11e4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11e3a:	7ca1      	ldrb	r1, [r4, #18]
   11e3c:	b129      	cbz	r1, 11e4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11e3e:	2901      	cmp	r1, #1
   11e40:	d003      	beq.n	11e4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11e42:	2902      	cmp	r1, #2
   11e44:	d001      	beq.n	11e4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1d2>
   11e46:	2903      	cmp	r1, #3
   11e48:	d125      	bne.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e4a:	06c1      	lsls	r1, r0, #27
   11e4c:	d504      	bpl.n	11e58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e0>
   11e4e:	7d20      	ldrb	r0, [r4, #20]
   11e50:	2801      	cmp	r0, #1
   11e52:	d120      	bne.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e54:	e01b      	b.n	11e8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x216>
   11e56:	e01e      	b.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e58:	7d21      	ldrb	r1, [r4, #20]
   11e5a:	2902      	cmp	r1, #2
   11e5c:	d10b      	bne.n	11e76 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fe>
   11e5e:	07c1      	lsls	r1, r0, #31
   11e60:	d019      	beq.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e62:	0741      	lsls	r1, r0, #29
   11e64:	d417      	bmi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e66:	0701      	lsls	r1, r0, #28
   11e68:	d515      	bpl.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e6a:	0641      	lsls	r1, r0, #25
   11e6c:	d413      	bmi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e6e:	0681      	lsls	r1, r0, #26
   11e70:	d411      	bmi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e72:	0781      	lsls	r1, r0, #30
   11e74:	d40f      	bmi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e76:	06c0      	lsls	r0, r0, #27
   11e78:	d409      	bmi.n	11e8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x216>
   11e7a:	7da0      	ldrb	r0, [r4, #22]
   11e7c:	2801      	cmp	r0, #1
   11e7e:	d003      	beq.n	11e88 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   11e80:	2802      	cmp	r0, #2
   11e82:	d001      	beq.n	11e88 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   11e84:	2803      	cmp	r0, #3
   11e86:	d106      	bne.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e88:	7de0      	ldrb	r0, [r4, #23]
   11e8a:	280f      	cmp	r0, #15
   11e8c:	d803      	bhi.n	11e96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21e>
   11e8e:	7e20      	ldrb	r0, [r4, #24]
   11e90:	b118      	cbz	r0, 11e9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   11e92:	2801      	cmp	r0, #1
   11e94:	d001      	beq.n	11e9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   11e96:	2012      	movs	r0, #18
   11e98:	bd38      	pop	{r3, r4, r5, pc}
   11e9a:	2000      	movs	r0, #0
   11e9c:	bd38      	pop	{r3, r4, r5, pc}
   11e9e:	b510      	push	{r4, lr}
   11ea0:	0004      	movs	r4, r0
   11ea2:	d005      	beq.n	11eb0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   11ea4:	f7fb fa1e 	bl	d2e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11ea8:	4384      	bics	r4, r0
   11eaa:	d001      	beq.n	11eb0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
   11eac:	2000      	movs	r0, #0
   11eae:	bd10      	pop	{r4, pc}
   11eb0:	2001      	movs	r0, #1
   11eb2:	bd10      	pop	{r4, pc}
   11eb4:	28fb      	cmp	r0, #251	; 0xfb
   11eb6:	d803      	bhi.n	11ec0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x248>
   11eb8:	f640 0048 	movw	r0, #2120	; 0x848
   11ebc:	4281      	cmp	r1, r0
   11ebe:	d901      	bls.n	11ec4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24c>
   11ec0:	2011      	movs	r0, #17
   11ec2:	4770      	bx	lr
   11ec4:	2000      	movs	r0, #0
   11ec6:	4770      	bx	lr
   11ec8:	381b      	subs	r0, #27
   11eca:	28e1      	cmp	r0, #225	; 0xe1
   11ecc:	d206      	bcs.n	11edc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
   11ece:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   11ed2:	d303      	bcc.n	11edc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
   11ed4:	f244 2090 	movw	r0, #17040	; 0x4290
   11ed8:	4281      	cmp	r1, r0
   11eda:	d901      	bls.n	11ee0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x268>
   11edc:	2012      	movs	r0, #18
   11ede:	4770      	bx	lr
   11ee0:	2000      	movs	r0, #0
   11ee2:	4770      	bx	lr
   11ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ee8:	4605      	mov	r5, r0
   11eea:	f8b0 704e 	ldrh.w	r7, [r0, #78]	; 0x4e
   11eee:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
   11ef2:	4616      	mov	r6, r2
   11ef4:	3028      	adds	r0, #40	; 0x28
   11ef6:	b111      	cbz	r1, 11efe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   11ef8:	f7fa f96a 	bl	c1d0 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   11efc:	e001      	b.n	11f02 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28a>
   11efe:	f7f7 f8cf 	bl	90a0 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
   11f02:	4680      	mov	r8, r0
   11f04:	2102      	movs	r1, #2
   11f06:	f7fe fabe 	bl	10486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11f0a:	4287      	cmp	r7, r0
   11f0c:	d200      	bcs.n	11f10 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   11f0e:	4638      	mov	r0, r7
   11f10:	4607      	mov	r7, r0
   11f12:	2102      	movs	r1, #2
   11f14:	4640      	mov	r0, r8
   11f16:	f7fe fab6 	bl	10486 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11f1a:	4284      	cmp	r4, r0
   11f1c:	d200      	bcs.n	11f20 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a8>
   11f1e:	4620      	mov	r0, r4
   11f20:	8829      	ldrh	r1, [r5, #0]
   11f22:	8031      	strh	r1, [r6, #0]
   11f24:	2f1b      	cmp	r7, #27
   11f26:	d913      	bls.n	11f50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d8>
   11f28:	2ffb      	cmp	r7, #251	; 0xfb
   11f2a:	d300      	bcc.n	11f2e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b6>
   11f2c:	27fb      	movs	r7, #251	; 0xfb
   11f2e:	8077      	strh	r7, [r6, #2]
   11f30:	281b      	cmp	r0, #27
   11f32:	d90f      	bls.n	11f54 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2dc>
   11f34:	28fb      	cmp	r0, #251	; 0xfb
   11f36:	d300      	bcc.n	11f3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   11f38:	20fb      	movs	r0, #251	; 0xfb
   11f3a:	80f0      	strh	r0, [r6, #6]
   11f3c:	4640      	mov	r0, r8
   11f3e:	f7ff febc 	bl	11cba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   11f42:	80b0      	strh	r0, [r6, #4]
   11f44:	4640      	mov	r0, r8
   11f46:	f7ff feb8 	bl	11cba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   11f4a:	8130      	strh	r0, [r6, #8]
   11f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f50:	271b      	movs	r7, #27
   11f52:	e7ec      	b.n	11f2e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2b6>
   11f54:	201b      	movs	r0, #27
   11f56:	e7f0      	b.n	11f3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c2>
   11f58:	b510      	push	{r4, lr}
   11f5a:	f000 f84c 	bl	11ff6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   11f5e:	b918      	cbnz	r0, 11f68 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f0>
   11f60:	f7f6 ffd8 	bl	8f14 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   11f64:	2800      	cmp	r0, #0
   11f66:	d000      	beq.n	11f6a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f2>
   11f68:	2001      	movs	r0, #1
   11f6a:	bd10      	pop	{r4, pc}
   11f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f70:	7890      	ldrb	r0, [r2, #2]
   11f72:	9e06      	ldr	r6, [sp, #24]
   11f74:	461d      	mov	r5, r3
   11f76:	4614      	mov	r4, r2
   11f78:	b908      	cbnz	r0, 11f7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x306>
   11f7a:	f7fb f9b3 	bl	d2e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11f7e:	78e4      	ldrb	r4, [r4, #3]
   11f80:	4607      	mov	r7, r0
   11f82:	b914      	cbnz	r4, 11f8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x312>
   11f84:	f7fb f9ae 	bl	d2e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11f88:	4604      	mov	r4, r0
   11f8a:	b16f      	cbz	r7, 11fa8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11f8c:	b164      	cbz	r4, 11fa8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11f8e:	4638      	mov	r0, r7
   11f90:	f7ff fe9d 	bl	11cce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   11f94:	4620      	mov	r0, r4
   11f96:	f7ff fe9a 	bl	11cce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   11f9a:	b12f      	cbz	r7, 11fa8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11f9c:	b124      	cbz	r4, 11fa8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x330>
   11f9e:	702f      	strb	r7, [r5, #0]
   11fa0:	7034      	strb	r4, [r6, #0]
   11fa2:	2000      	movs	r0, #0
   11fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fa8:	2009      	movs	r0, #9
   11faa:	e7fb      	b.n	11fa4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x32c>
   11fac:	b510      	push	{r4, lr}
   11fae:	f7fb f98b 	bl	d2c8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   11fb2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11fb6:	bd10      	pop	{r4, pc}
   11fb8:	7801      	ldrb	r1, [r0, #0]
   11fba:	6840      	ldr	r0, [r0, #4]
   11fbc:	b109      	cbz	r1, 11fc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34a>
   11fbe:	f000 b80e 	b.w	11fde <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x366>
   11fc2:	f000 b800 	b.w	11fc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x34e>
   11fc6:	f890 111c 	ldrb.w	r1, [r0, #284]	; 0x11c
   11fca:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   11fce:	b920      	cbnz	r0, 11fda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11fd0:	b119      	cbz	r1, 11fda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11fd2:	2904      	cmp	r1, #4
   11fd4:	d001      	beq.n	11fda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x362>
   11fd6:	2001      	movs	r0, #1
   11fd8:	4770      	bx	lr
   11fda:	2000      	movs	r0, #0
   11fdc:	4770      	bx	lr
   11fde:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
   11fe2:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   11fe6:	b920      	cbnz	r0, 11ff2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11fe8:	b119      	cbz	r1, 11ff2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11fea:	2904      	cmp	r1, #4
   11fec:	d001      	beq.n	11ff2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37a>
   11fee:	2001      	movs	r0, #1
   11ff0:	4770      	bx	lr
   11ff2:	2000      	movs	r0, #0
   11ff4:	4770      	bx	lr
   11ff6:	b510      	push	{r4, lr}
   11ff8:	f7fa f8f8 	bl	c1ec <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   11ffc:	2804      	cmp	r0, #4
   11ffe:	d003      	beq.n	12008 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x390>
   12000:	2805      	cmp	r0, #5
   12002:	d001      	beq.n	12008 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x390>
   12004:	2000      	movs	r0, #0
   12006:	bd10      	pop	{r4, pc}
   12008:	2001      	movs	r0, #1
   1200a:	bd10      	pop	{r4, pc}
   1200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12010:	b086      	sub	sp, #24
   12012:	4604      	mov	r4, r0
   12014:	8800      	ldrh	r0, [r0, #0]
   12016:	4669      	mov	r1, sp
   12018:	f7fe f966 	bl	102e8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1201c:	2800      	cmp	r0, #0
   1201e:	d151      	bne.n	120c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   12020:	9801      	ldr	r0, [sp, #4]
   12022:	f89d 1000 	ldrb.w	r1, [sp]
   12026:	3078      	adds	r0, #120	; 0x78
   12028:	2900      	cmp	r1, #0
   1202a:	9901      	ldr	r1, [sp, #4]
   1202c:	d007      	beq.n	1203e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
   1202e:	f891 11f8 	ldrb.w	r1, [r1, #504]	; 0x1f8
   12032:	f88d 1008 	strb.w	r1, [sp, #8]
   12036:	7b81      	ldrb	r1, [r0, #14]
   12038:	0689      	lsls	r1, r1, #26
   1203a:	d413      	bmi.n	12064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   1203c:	e009      	b.n	12052 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   1203e:	f891 1162 	ldrb.w	r1, [r1, #354]	; 0x162
   12042:	f88d 1008 	strb.w	r1, [sp, #8]
   12046:	7b41      	ldrb	r1, [r0, #13]
   12048:	291d      	cmp	r1, #29
   1204a:	d00b      	beq.n	12064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ec>
   1204c:	e001      	b.n	12052 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   1204e:	2101      	movs	r1, #1
   12050:	e000      	b.n	12054 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3dc>
   12052:	2100      	movs	r1, #0
   12054:	f88d 100c 	strb.w	r1, [sp, #12]
   12058:	2105      	movs	r1, #5
   1205a:	3046      	adds	r0, #70	; 0x46
   1205c:	f7ff f9db 	bl	11416 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x4>
   12060:	b128      	cbz	r0, 1206e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f6>
   12062:	e007      	b.n	12074 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fc>
   12064:	f89d 1008 	ldrb.w	r1, [sp, #8]
   12068:	2900      	cmp	r1, #0
   1206a:	d1f2      	bne.n	12052 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3da>
   1206c:	e7ef      	b.n	1204e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d6>
   1206e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12072:	b330      	cbz	r0, 120c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44a>
   12074:	8921      	ldrh	r1, [r4, #8]
   12076:	88e0      	ldrh	r0, [r4, #6]
   12078:	f7ff ff26 	bl	11ec8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
   1207c:	2800      	cmp	r0, #0
   1207e:	d121      	bne.n	120c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   12080:	88a1      	ldrh	r1, [r4, #4]
   12082:	8860      	ldrh	r0, [r4, #2]
   12084:	f7ff ff20 	bl	11ec8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x250>
   12088:	2800      	cmp	r0, #0
   1208a:	d11b      	bne.n	120c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   1208c:	8921      	ldrh	r1, [r4, #8]
   1208e:	88e0      	ldrh	r0, [r4, #6]
   12090:	f7ff ff10 	bl	11eb4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   12094:	2800      	cmp	r0, #0
   12096:	d115      	bne.n	120c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   12098:	88a1      	ldrh	r1, [r4, #4]
   1209a:	8860      	ldrh	r0, [r4, #2]
   1209c:	f7ff ff0a 	bl	11eb4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   120a0:	0006      	movs	r6, r0
   120a2:	d10f      	bne.n	120c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   120a4:	f89d 0000 	ldrb.w	r0, [sp]
   120a8:	9f01      	ldr	r7, [sp, #4]
   120aa:	b170      	cbz	r0, 120ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
   120ac:	f507 75da 	add.w	r5, r7, #436	; 0x1b4
   120b0:	f04f 0801 	mov.w	r8, #1
   120b4:	f885 8001 	strb.w	r8, [r5, #1]
   120b8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   120bc:	b140      	cbz	r0, 120d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x458>
   120be:	263a      	movs	r6, #58	; 0x3a
   120c0:	e037      	b.n	12132 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ba>
   120c2:	201a      	movs	r0, #26
   120c4:	b006      	add	sp, #24
   120c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120ca:	f507 759c 	add.w	r5, r7, #312	; 0x138
   120ce:	e7ef      	b.n	120b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x438>
   120d0:	f89d 0000 	ldrb.w	r0, [sp]
   120d4:	f7ff fe10 	bl	11cf8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   120d8:	4601      	mov	r1, r0
   120da:	aa02      	add	r2, sp, #8
   120dc:	4638      	mov	r0, r7
   120de:	f7ff ff01 	bl	11ee4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26c>
   120e2:	8861      	ldrh	r1, [r4, #2]
   120e4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   120e8:	4281      	cmp	r1, r0
   120ea:	d200      	bcs.n	120ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
   120ec:	4608      	mov	r0, r1
   120ee:	80e8      	strh	r0, [r5, #6]
   120f0:	88a1      	ldrh	r1, [r4, #4]
   120f2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   120f6:	4281      	cmp	r1, r0
   120f8:	d200      	bcs.n	120fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x484>
   120fa:	4608      	mov	r0, r1
   120fc:	8128      	strh	r0, [r5, #8]
   120fe:	88e2      	ldrh	r2, [r4, #6]
   12100:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   12104:	428a      	cmp	r2, r1
   12106:	d200      	bcs.n	1210a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x492>
   12108:	4611      	mov	r1, r2
   1210a:	8069      	strh	r1, [r5, #2]
   1210c:	8921      	ldrh	r1, [r4, #8]
   1210e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   12112:	4291      	cmp	r1, r2
   12114:	d300      	bcc.n	12118 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a0>
   12116:	4611      	mov	r1, r2
   12118:	f640 0248 	movw	r2, #2120	; 0x848
   1211c:	80a9      	strh	r1, [r5, #4]
   1211e:	4291      	cmp	r1, r2
   12120:	d300      	bcc.n	12124 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ac>
   12122:	4611      	mov	r1, r2
   12124:	80a9      	strh	r1, [r5, #4]
   12126:	4290      	cmp	r0, r2
   12128:	d200      	bcs.n	1212c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4b4>
   1212a:	4602      	mov	r2, r0
   1212c:	812a      	strh	r2, [r5, #8]
   1212e:	f885 8000 	strb.w	r8, [r5]
   12132:	2000      	movs	r0, #0
   12134:	7068      	strb	r0, [r5, #1]
   12136:	4630      	mov	r0, r6
   12138:	e7c4      	b.n	120c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x44c>
   1213a:	b530      	push	{r4, r5, lr}
   1213c:	f340 0400 	sbfx	r4, r0, #0, #1
   12140:	f340 0040 	sbfx	r0, r0, #1, #1
   12144:	1c40      	adds	r0, r0, #1
   12146:	9d03      	ldr	r5, [sp, #12]
   12148:	1c64      	adds	r4, r4, #1
   1214a:	d000      	beq.n	1214e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4d6>
   1214c:	b119      	cbz	r1, 12156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   1214e:	b100      	cbz	r0, 12152 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4da>
   12150:	b10a      	cbz	r2, 12156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   12152:	b91c      	cbnz	r4, 1215c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e4>
   12154:	e001      	b.n	1215a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4e2>
   12156:	2011      	movs	r0, #17
   12158:	bd30      	pop	{r4, r5, pc}
   1215a:	2100      	movs	r1, #0
   1215c:	7019      	strb	r1, [r3, #0]
   1215e:	b900      	cbnz	r0, 12162 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ea>
   12160:	2200      	movs	r2, #0
   12162:	702a      	strb	r2, [r5, #0]
   12164:	2000      	movs	r0, #0
   12166:	bd30      	pop	{r4, r5, pc}
   12168:	b2c0      	uxtb	r0, r0
   1216a:	06c1      	lsls	r1, r0, #27
   1216c:	d415      	bmi.n	1219a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x522>
   1216e:	0681      	lsls	r1, r0, #26
   12170:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   12174:	d503      	bpl.n	1217e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x506>
   12176:	bb21      	cbnz	r1, 121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   12178:	0781      	lsls	r1, r0, #30
   1217a:	d422      	bmi.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   1217c:	e001      	b.n	12182 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x50a>
   1217e:	2900      	cmp	r1, #0
   12180:	d1fa      	bne.n	12178 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x500>
   12182:	0701      	lsls	r1, r0, #28
   12184:	d51b      	bpl.n	121be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   12186:	07c1      	lsls	r1, r0, #31
   12188:	d01b      	beq.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   1218a:	0781      	lsls	r1, r0, #30
   1218c:	d419      	bmi.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   1218e:	0641      	lsls	r1, r0, #25
   12190:	d417      	bmi.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   12192:	0741      	lsls	r1, r0, #29
   12194:	d415      	bmi.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   12196:	0680      	lsls	r0, r0, #26
   12198:	e00f      	b.n	121ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x542>
   1219a:	0641      	lsls	r1, r0, #25
   1219c:	d411      	bmi.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   1219e:	0681      	lsls	r1, r0, #26
   121a0:	d40f      	bmi.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121a2:	07c1      	lsls	r1, r0, #31
   121a4:	ea4f 7180 	mov.w	r1, r0, lsl #30
   121a8:	d004      	beq.n	121b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   121aa:	2900      	cmp	r1, #0
   121ac:	db02      	blt.n	121b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   121ae:	0740      	lsls	r0, r0, #29
   121b0:	d405      	bmi.n	121be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x546>
   121b2:	e006      	b.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121b4:	0701      	lsls	r1, r0, #28
   121b6:	d404      	bmi.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121b8:	0740      	lsls	r0, r0, #29
   121ba:	2800      	cmp	r0, #0
   121bc:	db01      	blt.n	121c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54a>
   121be:	2001      	movs	r0, #1
   121c0:	4770      	bx	lr
   121c2:	2000      	movs	r0, #0
   121c4:	4770      	bx	lr
   121c6:	b510      	push	{r4, lr}
   121c8:	f7ff ff15 	bl	11ff6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   121cc:	b110      	cbz	r0, 121d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x55c>
   121ce:	f7f9 ffc7 	bl	c160 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   121d2:	b928      	cbnz	r0, 121e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x568>
   121d4:	f7f6 fe9e 	bl	8f14 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   121d8:	b120      	cbz	r0, 121e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   121da:	f7f5 fc79 	bl	7ad0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   121de:	b108      	cbz	r0, 121e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56c>
   121e0:	2001      	movs	r0, #1
   121e2:	bd10      	pop	{r4, pc}
   121e4:	2000      	movs	r0, #0
   121e6:	bd10      	pop	{r4, pc}

000121e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   121e8:	6802      	ldr	r2, [r0, #0]
   121ea:	b912      	cbnz	r2, 121f2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   121ec:	6001      	str	r1, [r0, #0]
   121ee:	4770      	bx	lr
   121f0:	4602      	mov	r2, r0
   121f2:	6850      	ldr	r0, [r2, #4]
   121f4:	2800      	cmp	r0, #0
   121f6:	d1fb      	bne.n	121f0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   121f8:	6051      	str	r1, [r2, #4]
   121fa:	4770      	bx	lr
   121fc:	b510      	push	{r4, lr}
   121fe:	f7f5 fb9f 	bl	7940 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   12202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12206:	f7fa bfff 	b.w	d208 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   1220a:	b510      	push	{r4, lr}
   1220c:	f7f6 fe9c 	bl	8f48 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
   12210:	b108      	cbz	r0, 12216 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   12212:	21e2      	movs	r1, #226	; 0xe2
   12214:	e004      	b.n	12220 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x38>
   12216:	f7f5 fbb1 	bl	797c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1221a:	2800      	cmp	r0, #0
   1221c:	d003      	beq.n	12226 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
   1221e:	21e7      	movs	r1, #231	; 0xe7
   12220:	2001      	movs	r0, #1
   12222:	f7f1 fcaf 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12226:	bd10      	pop	{r4, pc}
   12228:	b50e      	push	{r1, r2, r3, lr}
   1222a:	4669      	mov	r1, sp
   1222c:	2001      	movs	r0, #1
   1222e:	f7fd ff40 	bl	100b2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   12232:	b148      	cbz	r0, 12248 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x60>
   12234:	219c      	movs	r1, #156	; 0x9c
   12236:	e01a      	b.n	1226e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   12238:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1223c:	2101      	movs	r1, #1
   1223e:	f7f1 feef 	bl	4020 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   12242:	b108      	cbz	r0, 12248 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x60>
   12244:	21a0      	movs	r1, #160	; 0xa0
   12246:	e012      	b.n	1226e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   12248:	4668      	mov	r0, sp
   1224a:	f7f1 fec3 	bl	3fd4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1224e:	2800      	cmp	r0, #0
   12250:	d0f2      	beq.n	12238 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x50>
   12252:	4669      	mov	r1, sp
   12254:	2000      	movs	r0, #0
   12256:	f7fd ff2c 	bl	100b2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1225a:	b158      	cbz	r0, 12274 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   1225c:	21a6      	movs	r1, #166	; 0xa6
   1225e:	e006      	b.n	1226e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x86>
   12260:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12264:	2100      	movs	r1, #0
   12266:	f7f1 fedb 	bl	4020 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1226a:	b118      	cbz	r0, 12274 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8c>
   1226c:	21aa      	movs	r1, #170	; 0xaa
   1226e:	2001      	movs	r0, #1
   12270:	f7f1 fc88 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12274:	4668      	mov	r0, sp
   12276:	f7f1 fead 	bl	3fd4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1227a:	2800      	cmp	r0, #0
   1227c:	d0f0      	beq.n	12260 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x78>
   1227e:	bd0e      	pop	{r1, r2, r3, pc}
   12280:	b510      	push	{r4, lr}
   12282:	4604      	mov	r4, r0
   12284:	e002      	b.n	1228c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa4>
   12286:	6820      	ldr	r0, [r4, #0]
   12288:	4780      	blx	r0
   1228a:	6864      	ldr	r4, [r4, #4]
   1228c:	2c00      	cmp	r4, #0
   1228e:	d1fa      	bne.n	12286 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x9e>
   12290:	bd10      	pop	{r4, pc}
   12292:	b510      	push	{r4, lr}
   12294:	f7ff ffc8 	bl	12228 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x40>
   12298:	f7f2 f83a 	bl	4310 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1229c:	f7f2 fdde 	bl	4e5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   122a0:	f7f3 f86e 	bl	5380 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   122a4:	2800      	cmp	r0, #0
   122a6:	d003      	beq.n	122b0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xc8>
   122a8:	21c0      	movs	r1, #192	; 0xc0
   122aa:	2001      	movs	r0, #1
   122ac:	f7f1 fc6a 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   122b0:	bd10      	pop	{r4, pc}
   122b2:	f7ff bfee 	b.w	12292 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xaa>
   122b6:	b510      	push	{r4, lr}
   122b8:	f7ff ffa7 	bl	1220a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x22>
   122bc:	f7f8 f836 	bl	a32c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   122c0:	2800      	cmp	r0, #0
   122c2:	d003      	beq.n	122cc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xe4>
   122c4:	21fe      	movs	r1, #254	; 0xfe
   122c6:	2001      	movs	r0, #1
   122c8:	f7f1 fc5c 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   122cc:	bd10      	pop	{r4, pc}

000122ce <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   122ce:	b510      	push	{r4, lr}
   122d0:	f7fb fcb2 	bl	dc38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   122d4:	f7fb f9b8 	bl	d648 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   122d8:	f7fb f86c 	bl	d3b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   122dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   122e0:	f7fb b94c 	b.w	d57c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   122e4:	2801      	cmp	r0, #1
   122e6:	bf04      	itt	eq
   122e8:	2028      	moveq	r0, #40	; 0x28
   122ea:	4770      	bxeq	lr
   122ec:	2802      	cmp	r0, #2
   122ee:	bf04      	itt	eq
   122f0:	2018      	moveq	r0, #24
   122f2:	4770      	bxeq	lr
   122f4:	b510      	push	{r4, lr}
   122f6:	f640 217f 	movw	r1, #2687	; 0xa7f
   122fa:	203e      	movs	r0, #62	; 0x3e
   122fc:	f7f1 fc42 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   12300:	2801      	cmp	r0, #1
   12302:	bf04      	itt	eq
   12304:	f641 6014 	movweq	r0, #7700	; 0x1e14
   12308:	4770      	bxeq	lr
   1230a:	2802      	cmp	r0, #2
   1230c:	bf04      	itt	eq
   1230e:	f241 1030 	movweq	r0, #4400	; 0x1130
   12312:	4770      	bxeq	lr
   12314:	b510      	push	{r4, lr}
   12316:	f640 2193 	movw	r1, #2707	; 0xa93
   1231a:	203e      	movs	r0, #62	; 0x3e
   1231c:	f7f1 fc32 	bl	3b84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00012320 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   12320:	b570      	push	{r4, r5, r6, lr}
   12322:	4604      	mov	r4, r0
   12324:	4615      	mov	r5, r2
   12326:	4608      	mov	r0, r1
   12328:	f7ff ffea 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1232c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   12330:	ebc1 11c4 	rsb	r1, r1, r4, lsl #7
   12334:	ebc0 04c1 	rsb	r4, r0, r1, lsl #3
   12338:	4628      	mov	r0, r5
   1233a:	f7ff ffe1 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1233e:	4420      	add	r0, r4
   12340:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12344:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   12348:	fbb0 f4f1 	udiv	r4, r0, r1
   1234c:	4628      	mov	r0, r5
   1234e:	f7ff ffc9 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   12352:	4420      	add	r0, r4
   12354:	1d40      	adds	r0, r0, #5
   12356:	bd70      	pop	{r4, r5, r6, pc}

00012358 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   12358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1235c:	4606      	mov	r6, r0
   1235e:	461c      	mov	r4, r3
   12360:	460d      	mov	r5, r1
   12362:	4617      	mov	r7, r2
   12364:	4610      	mov	r0, r2
   12366:	f7ff ffcb 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1236a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   1236e:	ebc1 11c6 	rsb	r1, r1, r6, lsl #7
   12372:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   12376:	2d02      	cmp	r5, #2
   12378:	bf0c      	ite	eq
   1237a:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   1237e:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   12382:	4408      	add	r0, r1
   12384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12388:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1238c:	fbb0 f5f1 	udiv	r5, r0, r1
   12390:	4638      	mov	r0, r7
   12392:	f7ff ffa7 	bl	122e4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   12396:	4428      	add	r0, r5
   12398:	4420      	add	r0, r4
   1239a:	1d40      	adds	r0, r0, #5
   1239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000123a0 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   123a0:	b510      	push	{r4, lr}
   123a2:	4604      	mov	r4, r0
   123a4:	4608      	mov	r0, r1
   123a6:	f7ff ffab 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   123aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   123ae:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   123b2:	fbb0 f0f1 	udiv	r0, r0, r1
   123b6:	1a20      	subs	r0, r4, r0
   123b8:	1e80      	subs	r0, r0, #2
   123ba:	bd10      	pop	{r4, pc}

000123bc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   123bc:	b510      	push	{r4, lr}
   123be:	4604      	mov	r4, r0
   123c0:	4608      	mov	r0, r1
   123c2:	f7ff ff9d 	bl	12300 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   123c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   123ca:	fbb0 f0f1 	udiv	r0, r0, r1
   123ce:	1a20      	subs	r0, r4, r0
   123d0:	bd10      	pop	{r4, pc}

000123d2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   123d2:	2902      	cmp	r1, #2
   123d4:	bf0c      	ite	eq
   123d6:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   123da:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   123de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   123e2:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   123e6:	fbb1 f1f2 	udiv	r1, r1, r2
   123ea:	4408      	add	r0, r1
   123ec:	1e80      	subs	r0, r0, #2
   123ee:	4770      	bx	lr

000123f0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   123f0:	2902      	cmp	r1, #2
   123f2:	bf0c      	ite	eq
   123f4:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
   123f8:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   123fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12400:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   12404:	fbb1 f1f2 	udiv	r1, r1, r2
   12408:	4408      	add	r0, r1
   1240a:	4770      	bx	lr

0001240c <sym_EYCTNYR4EGC7WLNGYDH3RDAKCGFJGNKW3YTY5LI>:
   1240c:	2100      	movs	r1, #0
   1240e:	6001      	str	r1, [r0, #0]
   12410:	6041      	str	r1, [r0, #4]
   12412:	4770      	bx	lr

00012414 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   12414:	680a      	ldr	r2, [r1, #0]
   12416:	6002      	str	r2, [r0, #0]
   12418:	790b      	ldrb	r3, [r1, #4]
   1241a:	7103      	strb	r3, [r0, #4]
   1241c:	4770      	bx	lr

0001241e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   1241e:	2100      	movs	r1, #0
   12420:	6001      	str	r1, [r0, #0]
   12422:	8081      	strh	r1, [r0, #4]
   12424:	4770      	bx	lr
   12426:	0345      	.short	0x0345
   12428:	02310502 	.word	0x02310502
   1242c:	0402      	.short	0x0402
   1242e:	080c      	.short	0x080c
   12430:	010d1702 	.word	0x010d1702
   12434:	09090201 	.word	0x09090201
   12438:	02060101 	.word	0x02060101
   1243c:	03181809 	.word	0x03181809
   12440:	09090101 	.word	0x09090101
   12444:	00050303 	.word	0x00050303

00012448 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   12448:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1244a:	4d40      	ldr	r5, [pc, #256]	; (1254c <bt_init+0x104>)
   1244c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   12450:	6899      	ldr	r1, [r3, #8]
   12452:	f011 0101 	ands.w	r1, r1, #1
   12456:	d11f      	bne.n	12498 <bt_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   12458:	aa01      	add	r2, sp, #4
   1245a:	f640 4003 	movw	r0, #3075	; 0xc03
   1245e:	f004 fd8f 	bl	16f80 <bt_hci_cmd_send_sync>
		if (err) {
   12462:	4604      	mov	r4, r0
   12464:	2800      	cmp	r0, #0
   12466:	d16e      	bne.n	12546 <bt_init+0xfe>
		hci_reset_complete(rsp);
   12468:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   1246a:	689b      	ldr	r3, [r3, #8]
	if (status) {
   1246c:	781b      	ldrb	r3, [r3, #0]
   1246e:	b983      	cbnz	r3, 12492 <bt_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   12470:	f105 0398 	add.w	r3, r5, #152	; 0x98
   12474:	4618      	mov	r0, r3
   12476:	f012 fc6a 	bl	24d4e <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1247a:	f3bf 8f5b 	dmb	ish
   1247e:	f000 0005 	and.w	r0, r0, #5
   12482:	e853 2f00 	ldrex	r2, [r3]
   12486:	e843 0100 	strex	r1, r0, [r3]
   1248a:	2900      	cmp	r1, #0
   1248c:	d1f9      	bne.n	12482 <bt_init+0x3a>
   1248e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   12492:	9801      	ldr	r0, [sp, #4]
   12494:	f00a fee4 	bl	1d260 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   12498:	aa01      	add	r2, sp, #4
   1249a:	2100      	movs	r1, #0
   1249c:	f241 0003 	movw	r0, #4099	; 0x1003
   124a0:	f004 fd6e 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   124a4:	4604      	mov	r4, r0
   124a6:	2800      	cmp	r0, #0
   124a8:	d14d      	bne.n	12546 <bt_init+0xfe>
	read_local_features_complete(rsp);
   124aa:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   124ac:	4828      	ldr	r0, [pc, #160]	; (12550 <bt_init+0x108>)
   124ae:	6899      	ldr	r1, [r3, #8]
   124b0:	2208      	movs	r2, #8
   124b2:	3101      	adds	r1, #1
   124b4:	f012 fb06 	bl	24ac4 <memcpy>
	net_buf_unref(rsp);
   124b8:	9801      	ldr	r0, [sp, #4]
   124ba:	f00a fed1 	bl	1d260 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   124be:	4621      	mov	r1, r4
   124c0:	aa01      	add	r2, sp, #4
   124c2:	f241 0001 	movw	r0, #4097	; 0x1001
   124c6:	f004 fd5b 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   124ca:	4604      	mov	r4, r0
   124cc:	2800      	cmp	r0, #0
   124ce:	d13a      	bne.n	12546 <bt_init+0xfe>
	read_local_ver_complete(rsp);
   124d0:	9801      	ldr	r0, [sp, #4]
   124d2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   124d4:	785a      	ldrb	r2, [r3, #1]
   124d6:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   124da:	78d9      	ldrb	r1, [r3, #3]
   124dc:	789a      	ldrb	r2, [r3, #2]
   124de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   124e2:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
   124e4:	791a      	ldrb	r2, [r3, #4]
   124e6:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   124ea:	7a19      	ldrb	r1, [r3, #8]
   124ec:	79da      	ldrb	r2, [r3, #7]
   124ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   124f2:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   124f4:	795a      	ldrb	r2, [r3, #5]
   124f6:	799b      	ldrb	r3, [r3, #6]
   124f8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   124fc:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
   124fe:	f00a feaf 	bl	1d260 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   12502:	4621      	mov	r1, r4
   12504:	aa01      	add	r2, sp, #4
   12506:	f241 0002 	movw	r0, #4098	; 0x1002
   1250a:	f004 fd39 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   1250e:	4604      	mov	r4, r0
   12510:	b9c8      	cbnz	r0, 12546 <bt_init+0xfe>
	read_supported_commands_complete(rsp);
   12512:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   12514:	480f      	ldr	r0, [pc, #60]	; (12554 <bt_init+0x10c>)
   12516:	6899      	ldr	r1, [r3, #8]
   12518:	2240      	movs	r2, #64	; 0x40
   1251a:	3101      	adds	r1, #1
   1251c:	f012 fad2 	bl	24ac4 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
   12520:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
   12524:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
   12526:	f043 0306 	orr.w	r3, r3, #6
   1252a:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
   1252e:	f00a fe97 	bl	1d260 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   12532:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   12536:	065a      	lsls	r2, r3, #25
   12538:	d410      	bmi.n	1255c <bt_init+0x114>
		BT_ERR("Non-LE capable controller detected!");
   1253a:	4807      	ldr	r0, [pc, #28]	; (12558 <bt_init+0x110>)
   1253c:	2145      	movs	r1, #69	; 0x45
   1253e:	f010 fbf5 	bl	22d2c <printk>
		return -ENODEV;
   12542:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   12546:	4620      	mov	r0, r4
   12548:	b002      	add	sp, #8
   1254a:	bd70      	pop	{r4, r5, r6, pc}
   1254c:	200003c8 	.word	0x200003c8
   12550:	20000408 	.word	0x20000408
   12554:	20000410 	.word	0x20000410
   12558:	00028db9 	.word	0x00028db9
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1255c:	4621      	mov	r1, r4
   1255e:	aa01      	add	r2, sp, #4
   12560:	f242 0003 	movw	r0, #8195	; 0x2003
   12564:	f004 fd0c 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   12568:	4604      	mov	r4, r0
   1256a:	2800      	cmp	r0, #0
   1256c:	d1eb      	bne.n	12546 <bt_init+0xfe>
	read_le_features_complete(rsp);
   1256e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12570:	48b9      	ldr	r0, [pc, #740]	; (12858 <bt_init+0x410>)
   12572:	6899      	ldr	r1, [r3, #8]
   12574:	2208      	movs	r2, #8
   12576:	3101      	adds	r1, #1
   12578:	f012 faa4 	bl	24ac4 <memcpy>
	net_buf_unref(rsp);
   1257c:	9801      	ldr	r0, [sp, #4]
   1257e:	f00a fe6f 	bl	1d260 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   12582:	4621      	mov	r1, r4
   12584:	aa01      	add	r2, sp, #4
   12586:	f242 0002 	movw	r0, #8194	; 0x2002
   1258a:	f004 fcf9 	bl	16f80 <bt_hci_cmd_send_sync>
		if (err) {
   1258e:	4604      	mov	r4, r0
   12590:	2800      	cmp	r0, #0
   12592:	d1d8      	bne.n	12546 <bt_init+0xfe>
		le_read_buffer_size_complete(rsp);
   12594:	9b01      	ldr	r3, [sp, #4]
   12596:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   12598:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1259c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
   125a0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   125a2:	b121      	cbz	r1, 125ae <bt_init+0x166>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   125a4:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   125a6:	48ad      	ldr	r0, [pc, #692]	; (1285c <bt_init+0x414>)
   125a8:	4611      	mov	r1, r2
   125aa:	f014 fb08 	bl	26bbe <z_impl_k_sem_init>
		net_buf_unref(rsp);
   125ae:	9801      	ldr	r0, [sp, #4]
   125b0:	f00a fe56 	bl	1d260 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   125b4:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
   125b8:	f016 0620 	ands.w	r6, r6, #32
   125bc:	f000 80f0 	beq.w	127a0 <bt_init+0x358>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   125c0:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   125c4:	071b      	lsls	r3, r3, #28
   125c6:	d511      	bpl.n	125ec <bt_init+0x1a4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   125c8:	aa01      	add	r2, sp, #4
   125ca:	2100      	movs	r1, #0
   125cc:	f242 001c 	movw	r0, #8220	; 0x201c
   125d0:	f004 fcd6 	bl	16f80 <bt_hci_cmd_send_sync>
		if (err) {
   125d4:	4604      	mov	r4, r0
   125d6:	2800      	cmp	r0, #0
   125d8:	d1b5      	bne.n	12546 <bt_init+0xfe>
		le_read_supp_states_complete(rsp);
   125da:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   125dc:	6883      	ldr	r3, [r0, #8]
   125de:	f853 2f01 	ldr.w	r2, [r3, #1]!
   125e2:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   125e4:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   125e8:	f00a fe3a 	bl	1d260 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   125ec:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   125f0:	069e      	lsls	r6, r3, #26
   125f2:	d523      	bpl.n	1263c <bt_init+0x1f4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   125f4:	f10d 0102 	add.w	r1, sp, #2
   125f8:	4668      	mov	r0, sp
   125fa:	f004 fd23 	bl	17044 <hci_le_read_max_data_len>
		if (err) {
   125fe:	4604      	mov	r4, r0
   12600:	2800      	cmp	r0, #0
   12602:	d1a0      	bne.n	12546 <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12604:	2104      	movs	r1, #4
   12606:	f242 0024 	movw	r0, #8228	; 0x2024
   1260a:	f004 fb7b 	bl	16d04 <bt_hci_cmd_create>
		if (!buf) {
   1260e:	4606      	mov	r6, r0
   12610:	2800      	cmp	r0, #0
   12612:	f000 80cc 	beq.w	127ae <bt_init+0x366>
		cp = net_buf_add(buf, sizeof(*cp));
   12616:	2104      	movs	r1, #4
   12618:	3008      	adds	r0, #8
   1261a:	f00a ff37 	bl	1d48c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1261e:	f8bd 3000 	ldrh.w	r3, [sp]
   12622:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   12624:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12628:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1262a:	4622      	mov	r2, r4
   1262c:	4631      	mov	r1, r6
   1262e:	f242 0024 	movw	r0, #8228	; 0x2024
   12632:	f004 fca5 	bl	16f80 <bt_hci_cmd_send_sync>
		if (err) {
   12636:	4604      	mov	r4, r0
   12638:	2800      	cmp	r0, #0
   1263a:	d184      	bne.n	12546 <bt_init+0xfe>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1263c:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   12640:	065c      	lsls	r4, r3, #25
   12642:	d510      	bpl.n	12666 <bt_init+0x21e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   12644:	aa01      	add	r2, sp, #4
   12646:	2100      	movs	r1, #0
   12648:	f242 002a 	movw	r0, #8234	; 0x202a
   1264c:	f004 fc98 	bl	16f80 <bt_hci_cmd_send_sync>
		if (err) {
   12650:	4604      	mov	r4, r0
   12652:	2800      	cmp	r0, #0
   12654:	f47f af77 	bne.w	12546 <bt_init+0xfe>
		le_read_resolving_list_size_complete(rsp);
   12658:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   1265a:	6883      	ldr	r3, [r0, #8]
   1265c:	785b      	ldrb	r3, [r3, #1]
   1265e:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
   12662:	f00a fdfd 	bl	1d260 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   12666:	2108      	movs	r1, #8
   12668:	f242 0001 	movw	r0, #8193	; 0x2001
   1266c:	f004 fb4a 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   12670:	4604      	mov	r4, r0
   12672:	2800      	cmp	r0, #0
   12674:	f000 809b 	beq.w	127ae <bt_init+0x366>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
   12678:	2108      	movs	r1, #8
   1267a:	4408      	add	r0, r1
   1267c:	f00a ff06 	bl	1d48c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   12680:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   12684:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
   12688:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   1268a:	f240 2302 	movw	r3, #514	; 0x202
   1268e:	bf08      	it	eq
   12690:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   12692:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   12694:	bf4c      	ite	mi
   12696:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1269a:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1269e:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   126a0:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   126a4:	bf48      	it	mi
   126a6:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   126aa:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   126ae:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   126b2:	bf18      	it	ne
   126b4:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   126b8:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   126bc:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   126be:	bf48      	it	mi
   126c0:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   126c4:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   126c6:	bf08      	it	eq
   126c8:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   126cc:	2100      	movs	r1, #0
   126ce:	f012 fb79 	bl	24dc4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   126d2:	4621      	mov	r1, r4
   126d4:	2200      	movs	r2, #0
   126d6:	f242 0001 	movw	r0, #8193	; 0x2001
   126da:	f004 fc51 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   126de:	4604      	mov	r4, r0
   126e0:	2800      	cmp	r0, #0
   126e2:	f47f af30 	bne.w	12546 <bt_init+0xfe>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   126e6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   126ea:	0698      	lsls	r0, r3, #26
   126ec:	d41e      	bmi.n	1272c <bt_init+0x2e4>
	if (bt_dev.le.acl_mtu) {
   126ee:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   126f2:	b9d9      	cbnz	r1, 1272c <bt_init+0x2e4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   126f4:	aa01      	add	r2, sp, #4
   126f6:	f241 0005 	movw	r0, #4101	; 0x1005
   126fa:	f004 fc41 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   126fe:	4604      	mov	r4, r0
   12700:	2800      	cmp	r0, #0
   12702:	f47f af20 	bne.w	12546 <bt_init+0xfe>
	if (bt_dev.le.acl_mtu) {
   12706:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   1270a:	b963      	cbnz	r3, 12726 <bt_init+0x2de>
	read_buffer_size_complete(rsp);
   1270c:	9b01      	ldr	r3, [sp, #4]
   1270e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   12710:	785a      	ldrb	r2, [r3, #1]
   12712:	7899      	ldrb	r1, [r3, #2]
   12714:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12718:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1271c:	889a      	ldrh	r2, [r3, #4]
   1271e:	484f      	ldr	r0, [pc, #316]	; (1285c <bt_init+0x414>)
   12720:	4611      	mov	r1, r2
   12722:	f014 fa4c 	bl	26bbe <z_impl_k_sem_init>
	net_buf_unref(rsp);
   12726:	9801      	ldr	r0, [sp, #4]
   12728:	f00a fd9a 	bl	1d260 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1272c:	2108      	movs	r1, #8
   1272e:	f640 4001 	movw	r0, #3073	; 0xc01
   12732:	f004 fae7 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   12736:	4604      	mov	r4, r0
   12738:	2800      	cmp	r0, #0
   1273a:	d038      	beq.n	127ae <bt_init+0x366>
	ev = net_buf_add(buf, sizeof(*ev));
   1273c:	2108      	movs	r1, #8
   1273e:	4408      	add	r0, r1
   12740:	f00a fea4 	bl	1d48c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   12744:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   12748:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
   1274a:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1274c:	d544      	bpl.n	127d8 <bt_init+0x390>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   1274e:	a140      	add	r1, pc, #256	; (adr r1, 12850 <bt_init+0x408>)
   12750:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   12754:	f012 fb36 	bl	24dc4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   12758:	4621      	mov	r1, r4
   1275a:	2200      	movs	r2, #0
   1275c:	f640 4001 	movw	r0, #3073	; 0xc01
   12760:	f004 fc0e 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   12764:	4604      	mov	r4, r0
   12766:	2800      	cmp	r0, #0
   12768:	f47f aeed 	bne.w	12546 <bt_init+0xfe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1276c:	4601      	mov	r1, r0
   1276e:	aa01      	add	r2, sp, #4
   12770:	f64f 4001 	movw	r0, #64513	; 0xfc01
   12774:	f004 fc04 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   12778:	4604      	mov	r4, r0
   1277a:	b388      	cbz	r0, 127e0 <bt_init+0x398>
		BT_WARN("Vendor HCI extensions not available");
   1277c:	4838      	ldr	r0, [pc, #224]	; (12860 <bt_init+0x418>)
   1277e:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   12780:	f010 fad4 	bl	22d2c <printk>
		err = bt_conn_init();
   12784:	f006 fb7e 	bl	18e84 <bt_conn_init>
		if (err) {
   12788:	4604      	mov	r4, r0
   1278a:	2800      	cmp	r0, #0
   1278c:	f47f aedb 	bne.w	12546 <bt_init+0xfe>
		if (!bt_dev.id_count) {
   12790:	79eb      	ldrb	r3, [r5, #7]
   12792:	2b00      	cmp	r3, #0
   12794:	d155      	bne.n	12842 <bt_init+0x3fa>
			BT_INFO("No ID address. App must call settings_load()");
   12796:	4833      	ldr	r0, [pc, #204]	; (12864 <bt_init+0x41c>)
   12798:	2149      	movs	r1, #73	; 0x49
   1279a:	f010 fac7 	bl	22d2c <printk>
			return 0;
   1279e:	e6d2      	b.n	12546 <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   127a0:	2102      	movs	r1, #2
   127a2:	f640 406d 	movw	r0, #3181	; 0xc6d
   127a6:	f004 faad 	bl	16d04 <bt_hci_cmd_create>
		if (!buf) {
   127aa:	4604      	mov	r4, r0
   127ac:	b910      	cbnz	r0, 127b4 <bt_init+0x36c>
		return -ENOBUFS;
   127ae:	f06f 0436 	mvn.w	r4, #54	; 0x36
   127b2:	e6c8      	b.n	12546 <bt_init+0xfe>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
   127b4:	2102      	movs	r1, #2
   127b6:	3008      	adds	r0, #8
   127b8:	f00a fe68 	bl	1d48c <net_buf_simple_add>
		cp_le->le = 0x01;
   127bc:	2301      	movs	r3, #1
   127be:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   127c0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   127c2:	4621      	mov	r1, r4
   127c4:	4632      	mov	r2, r6
   127c6:	f640 406d 	movw	r0, #3181	; 0xc6d
   127ca:	f004 fbd9 	bl	16f80 <bt_hci_cmd_send_sync>
		if (err) {
   127ce:	4604      	mov	r4, r0
   127d0:	2800      	cmp	r0, #0
   127d2:	f43f aef5 	beq.w	125c0 <bt_init+0x178>
   127d6:	e6b6      	b.n	12546 <bt_init+0xfe>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   127d8:	4823      	ldr	r0, [pc, #140]	; (12868 <bt_init+0x420>)
   127da:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   127de:	e7b9      	b.n	12754 <bt_init+0x30c>
	net_buf_unref(rsp);
   127e0:	9801      	ldr	r0, [sp, #4]
   127e2:	f00a fd3d 	bl	1d260 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   127e6:	4621      	mov	r1, r4
   127e8:	aa01      	add	r2, sp, #4
   127ea:	f64f 4002 	movw	r0, #64514	; 0xfc02
   127ee:	f004 fbc7 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   127f2:	4604      	mov	r4, r0
   127f4:	b110      	cbz	r0, 127fc <bt_init+0x3b4>
		BT_WARN("Failed to read supported vendor commands");
   127f6:	481d      	ldr	r0, [pc, #116]	; (1286c <bt_init+0x424>)
   127f8:	2157      	movs	r1, #87	; 0x57
   127fa:	e7c1      	b.n	12780 <bt_init+0x338>
	rp.cmds = (void *)rsp->data;
   127fc:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   127fe:	481c      	ldr	r0, [pc, #112]	; (12870 <bt_init+0x428>)
   12800:	6899      	ldr	r1, [r3, #8]
   12802:	2202      	movs	r2, #2
   12804:	3101      	adds	r1, #1
   12806:	f012 f95d 	bl	24ac4 <memcpy>
	net_buf_unref(rsp);
   1280a:	9801      	ldr	r0, [sp, #4]
   1280c:	f00a fd28 	bl	1d260 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   12810:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
   12814:	075b      	lsls	r3, r3, #29
   12816:	d5b5      	bpl.n	12784 <bt_init+0x33c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   12818:	aa01      	add	r2, sp, #4
   1281a:	4621      	mov	r1, r4
   1281c:	f64f 4003 	movw	r0, #64515	; 0xfc03
   12820:	f004 fbae 	bl	16f80 <bt_hci_cmd_send_sync>
		if (err) {
   12824:	b110      	cbz	r0, 1282c <bt_init+0x3e4>
			BT_WARN("Failed to read supported vendor features");
   12826:	4813      	ldr	r0, [pc, #76]	; (12874 <bt_init+0x42c>)
   12828:	2157      	movs	r1, #87	; 0x57
   1282a:	e7a9      	b.n	12780 <bt_init+0x338>
		rp.feat = (void *)rsp->data;
   1282c:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1282e:	4812      	ldr	r0, [pc, #72]	; (12878 <bt_init+0x430>)
   12830:	6899      	ldr	r1, [r3, #8]
   12832:	2201      	movs	r2, #1
   12834:	4411      	add	r1, r2
   12836:	f012 f945 	bl	24ac4 <memcpy>
		net_buf_unref(rsp);
   1283a:	9801      	ldr	r0, [sp, #4]
   1283c:	f00a fd10 	bl	1d260 <net_buf_unref>
   12840:	e7a0      	b.n	12784 <bt_init+0x33c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12842:	2104      	movs	r1, #4
   12844:	480d      	ldr	r0, [pc, #52]	; (1287c <bt_init+0x434>)
   12846:	f012 fa8b 	bl	24d60 <atomic_or>
	bt_finalize_init();
   1284a:	f005 f859 	bl	17900 <bt_finalize_init>
	return 0;
   1284e:	e67a      	b.n	12546 <bt_init+0xfe>
   12850:	02008890 	.word	0x02008890
   12854:	20008000 	.word	0x20008000
   12858:	20000468 	.word	0x20000468
   1285c:	20000498 	.word	0x20000498
   12860:	00028de2 	.word	0x00028de2
   12864:	00028e67 	.word	0x00028e67
   12868:	02008810 	.word	0x02008810
   1286c:	00028e0b 	.word	0x00028e0b
   12870:	20000451 	.word	0x20000451
   12874:	00028e39 	.word	0x00028e39
   12878:	20000450 	.word	0x20000450
   1287c:	20000460 	.word	0x20000460

00012880 <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
   12880:	4b01      	ldr	r3, [pc, #4]	; (12888 <app_button_cb+0x8>)
   12882:	7818      	ldrb	r0, [r3, #0]
   12884:	4770      	bx	lr
   12886:	bf00      	nop
   12888:	20002b9a 	.word	0x20002b9a

0001288c <disconnected>:
{
   1288c:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   1288e:	4804      	ldr	r0, [pc, #16]	; (128a0 <disconnected+0x14>)
   12890:	f010 fa4c 	bl	22d2c <printk>
}
   12894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
   12898:	2001      	movs	r0, #1
   1289a:	f014 b863 	b.w	26964 <dk_set_led_off>
   1289e:	bf00      	nop
   128a0:	000279a4 	.word	0x000279a4

000128a4 <connected>:
{
   128a4:	b508      	push	{r3, lr}
	if (err) {
   128a6:	b121      	cbz	r1, 128b2 <connected+0xe>
}
   128a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
   128ac:	4805      	ldr	r0, [pc, #20]	; (128c4 <connected+0x20>)
   128ae:	f010 ba3d 	b.w	22d2c <printk>
	printk("Connected\n");
   128b2:	4805      	ldr	r0, [pc, #20]	; (128c8 <connected+0x24>)
   128b4:	f010 fa3a 	bl	22d2c <printk>
}
   128b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_on(CON_STATUS_LED);
   128bc:	2001      	movs	r0, #1
   128be:	f014 b84e 	b.w	2695e <dk_set_led_on>
   128c2:	bf00      	nop
   128c4:	000279be 	.word	0x000279be
   128c8:	000279da 	.word	0x000279da

000128cc <button_changed>:



static void button_changed(uint32_t button_state, uint32_t has_changed)
{
	if (has_changed & USER_BUTTON) {
   128cc:	07cb      	lsls	r3, r1, #31
{
   128ce:	b510      	push	{r4, lr}
	if (has_changed & USER_BUTTON) {
   128d0:	d507      	bpl.n	128e2 <button_changed+0x16>
		bt_lbs_send_button_state(button_state);
   128d2:	1e04      	subs	r4, r0, #0
   128d4:	bf18      	it	ne
   128d6:	2401      	movne	r4, #1
   128d8:	4620      	mov	r0, r4
   128da:	f000 f9c1 	bl	12c60 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
   128de:	4b01      	ldr	r3, [pc, #4]	; (128e4 <button_changed+0x18>)
   128e0:	701c      	strb	r4, [r3, #0]
	}
}
   128e2:	bd10      	pop	{r4, pc}
   128e4:	20002b9a 	.word	0x20002b9a

000128e8 <bt_addr_le_to_str.constprop.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   128e8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   128ea:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   128ec:	b08a      	sub	sp, #40	; 0x28
   128ee:	4604      	mov	r4, r0
   128f0:	460e      	mov	r6, r1
   128f2:	ad07      	add	r5, sp, #28
   128f4:	2b03      	cmp	r3, #3
   128f6:	d820      	bhi.n	1293a <bt_addr_le_to_str.constprop.0+0x52>
   128f8:	e8df f003 	tbb	[pc, r3]
   128fc:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   12900:	4911      	ldr	r1, [pc, #68]	; (12948 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   12902:	4628      	mov	r0, r5
   12904:	f012 f8a2 	bl	24a4c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   12908:	7863      	ldrb	r3, [r4, #1]
   1290a:	9304      	str	r3, [sp, #16]
   1290c:	78a3      	ldrb	r3, [r4, #2]
   1290e:	9303      	str	r3, [sp, #12]
   12910:	78e3      	ldrb	r3, [r4, #3]
   12912:	9302      	str	r3, [sp, #8]
   12914:	7923      	ldrb	r3, [r4, #4]
   12916:	9301      	str	r3, [sp, #4]
   12918:	7963      	ldrb	r3, [r4, #5]
   1291a:	9300      	str	r3, [sp, #0]
   1291c:	4a0b      	ldr	r2, [pc, #44]	; (1294c <bt_addr_le_to_str.constprop.0+0x64>)
   1291e:	79a3      	ldrb	r3, [r4, #6]
   12920:	9505      	str	r5, [sp, #20]
   12922:	211e      	movs	r1, #30
   12924:	4630      	mov	r0, r6
   12926:	f010 fa0e 	bl	22d46 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1292a:	b00a      	add	sp, #40	; 0x28
   1292c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1292e:	4908      	ldr	r1, [pc, #32]	; (12950 <bt_addr_le_to_str.constprop.0+0x68>)
   12930:	e7e7      	b.n	12902 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   12932:	4908      	ldr	r1, [pc, #32]	; (12954 <bt_addr_le_to_str.constprop.0+0x6c>)
   12934:	e7e5      	b.n	12902 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   12936:	4908      	ldr	r1, [pc, #32]	; (12958 <bt_addr_le_to_str.constprop.0+0x70>)
   12938:	e7e3      	b.n	12902 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1293a:	4a08      	ldr	r2, [pc, #32]	; (1295c <bt_addr_le_to_str.constprop.0+0x74>)
   1293c:	210a      	movs	r1, #10
   1293e:	4628      	mov	r0, r5
   12940:	f010 fa01 	bl	22d46 <snprintk>
		break;
   12944:	e7e0      	b.n	12908 <bt_addr_le_to_str.constprop.0+0x20>
   12946:	bf00      	nop
   12948:	000279e5 	.word	0x000279e5
   1294c:	00027a0e 	.word	0x00027a0e
   12950:	000279ec 	.word	0x000279ec
   12954:	000279f3 	.word	0x000279f3
   12958:	000279fd 	.word	0x000279fd
   1295c:	00027a07 	.word	0x00027a07

00012960 <pairing_confirm>:
{
   12960:	b510      	push	{r4, lr}
   12962:	b088      	sub	sp, #32
   12964:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   12966:	f012 fc88 	bl	2527a <bt_conn_get_dst>
   1296a:	4669      	mov	r1, sp
   1296c:	f7ff ffbc 	bl	128e8 <bt_addr_le_to_str.constprop.0>
	bt_conn_auth_pairing_confirm(conn);
   12970:	4620      	mov	r0, r4
   12972:	f006 fa5b 	bl	18e2c <bt_conn_auth_pairing_confirm>
	printk("Pairing confirmed: %s\n", addr);
   12976:	4803      	ldr	r0, [pc, #12]	; (12984 <pairing_confirm+0x24>)
   12978:	4669      	mov	r1, sp
   1297a:	f010 f9d7 	bl	22d2c <printk>
}
   1297e:	b008      	add	sp, #32
   12980:	bd10      	pop	{r4, pc}
   12982:	bf00      	nop
   12984:	00027a31 	.word	0x00027a31

00012988 <security_changed>:
{
   12988:	b530      	push	{r4, r5, lr}
   1298a:	b089      	sub	sp, #36	; 0x24
   1298c:	460c      	mov	r4, r1
   1298e:	4615      	mov	r5, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   12990:	f012 fc73 	bl	2527a <bt_conn_get_dst>
   12994:	4669      	mov	r1, sp
   12996:	f7ff ffa7 	bl	128e8 <bt_addr_le_to_str.constprop.0>
	if (!err) {
   1299a:	b935      	cbnz	r5, 129aa <security_changed+0x22>
		printk("Security changed: %s level %u\n", addr, level);
   1299c:	4806      	ldr	r0, [pc, #24]	; (129b8 <security_changed+0x30>)
   1299e:	4622      	mov	r2, r4
   129a0:	4669      	mov	r1, sp
   129a2:	f010 f9c3 	bl	22d2c <printk>
}
   129a6:	b009      	add	sp, #36	; 0x24
   129a8:	bd30      	pop	{r4, r5, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
   129aa:	4804      	ldr	r0, [pc, #16]	; (129bc <security_changed+0x34>)
   129ac:	462b      	mov	r3, r5
   129ae:	4622      	mov	r2, r4
   129b0:	4669      	mov	r1, sp
   129b2:	f010 f9bb 	bl	22d2c <printk>
}
   129b6:	e7f6      	b.n	129a6 <security_changed+0x1e>
   129b8:	00027a48 	.word	0x00027a48
   129bc:	00027a67 	.word	0x00027a67

000129c0 <auth_passkey_display>:
{
   129c0:	b510      	push	{r4, lr}
   129c2:	b088      	sub	sp, #32
   129c4:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   129c6:	f012 fc58 	bl	2527a <bt_conn_get_dst>
   129ca:	4669      	mov	r1, sp
   129cc:	f7ff ff8c 	bl	128e8 <bt_addr_le_to_str.constprop.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
   129d0:	4803      	ldr	r0, [pc, #12]	; (129e0 <auth_passkey_display+0x20>)
   129d2:	4622      	mov	r2, r4
   129d4:	4669      	mov	r1, sp
   129d6:	f010 f9a9 	bl	22d2c <printk>
}
   129da:	b008      	add	sp, #32
   129dc:	bd10      	pop	{r4, pc}
   129de:	bf00      	nop
   129e0:	00027a8c 	.word	0x00027a8c

000129e4 <auth_cancel>:
{
   129e4:	b500      	push	{lr}
   129e6:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   129e8:	f012 fc47 	bl	2527a <bt_conn_get_dst>
   129ec:	4669      	mov	r1, sp
   129ee:	f7ff ff7b 	bl	128e8 <bt_addr_le_to_str.constprop.0>
	printk("Pairing cancelled: %s\n", addr);
   129f2:	4803      	ldr	r0, [pc, #12]	; (12a00 <auth_cancel+0x1c>)
   129f4:	4669      	mov	r1, sp
   129f6:	f010 f999 	bl	22d2c <printk>
}
   129fa:	b009      	add	sp, #36	; 0x24
   129fc:	f85d fb04 	ldr.w	pc, [sp], #4
   12a00:	00027aa2 	.word	0x00027aa2

00012a04 <pairing_complete>:
{
   12a04:	b510      	push	{r4, lr}
   12a06:	b088      	sub	sp, #32
   12a08:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   12a0a:	f012 fc36 	bl	2527a <bt_conn_get_dst>
   12a0e:	4669      	mov	r1, sp
   12a10:	f7ff ff6a 	bl	128e8 <bt_addr_le_to_str.constprop.0>
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   12a14:	4803      	ldr	r0, [pc, #12]	; (12a24 <pairing_complete+0x20>)
   12a16:	4622      	mov	r2, r4
   12a18:	4669      	mov	r1, sp
   12a1a:	f010 f987 	bl	22d2c <printk>
}
   12a1e:	b008      	add	sp, #32
   12a20:	bd10      	pop	{r4, pc}
   12a22:	bf00      	nop
   12a24:	00027ab9 	.word	0x00027ab9

00012a28 <pairing_failed>:
{
   12a28:	b510      	push	{r4, lr}
   12a2a:	b088      	sub	sp, #32
   12a2c:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   12a2e:	f012 fc24 	bl	2527a <bt_conn_get_dst>
   12a32:	4669      	mov	r1, sp
   12a34:	f7ff ff58 	bl	128e8 <bt_addr_le_to_str.constprop.0>
	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   12a38:	4803      	ldr	r0, [pc, #12]	; (12a48 <pairing_failed+0x20>)
   12a3a:	4622      	mov	r2, r4
   12a3c:	4669      	mov	r1, sp
   12a3e:	f010 f975 	bl	22d2c <printk>
}
   12a42:	b008      	add	sp, #32
   12a44:	bd10      	pop	{r4, pc}
   12a46:	bf00      	nop
   12a48:	00027adc 	.word	0x00027adc

00012a4c <pwm_set>:
void pwm_set(){
   12a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ret = pwm_pin_set_usec(pwm, PWM_CHANNEL, PERIOD_USEC, PERIOD_USEC/2, PWM_FLAGS);
   12a50:	4b1e      	ldr	r3, [pc, #120]	; (12acc <pwm_set+0x80>)
void pwm_set(){
   12a52:	b085      	sub	sp, #20
        ret = pwm_pin_set_usec(pwm, PWM_CHANNEL, PERIOD_USEC, PERIOD_USEC/2, PWM_FLAGS);
   12a54:	681e      	ldr	r6, [r3, #0]
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
   12a56:	68b3      	ldr	r3, [r6, #8]
   12a58:	aa02      	add	r2, sp, #8
   12a5a:	685b      	ldr	r3, [r3, #4]
   12a5c:	2114      	movs	r1, #20
   12a5e:	4630      	mov	r0, r6
   12a60:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
   12a62:	4683      	mov	fp, r0
   12a64:	bb78      	cbnz	r0, 12ac6 <pwm_set+0x7a>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   12a66:	e9dd 4a02 	ldrd	r4, sl, [sp, #8]
   12a6a:	4b19      	ldr	r3, [pc, #100]	; (12ad0 <pwm_set+0x84>)
   12a6c:	4a19      	ldr	r2, [pc, #100]	; (12ad4 <pwm_set+0x88>)
   12a6e:	fba4 8903 	umull	r8, r9, r4, r3
   12a72:	fb03 990a 	mla	r9, r3, sl, r9
   12a76:	4640      	mov	r0, r8
   12a78:	2300      	movs	r3, #0
   12a7a:	4649      	mov	r1, r9
   12a7c:	f7ed fb30 	bl	e0 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
   12a80:	4b15      	ldr	r3, [pc, #84]	; (12ad8 <pwm_set+0x8c>)
   12a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a86:	454b      	cmp	r3, r9
   12a88:	bf08      	it	eq
   12a8a:	4542      	cmpeq	r2, r8
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   12a8c:	4607      	mov	r7, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
   12a8e:	d31a      	bcc.n	12ac6 <pwm_set+0x7a>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   12a90:	4b12      	ldr	r3, [pc, #72]	; (12adc <pwm_set+0x90>)
   12a92:	4a10      	ldr	r2, [pc, #64]	; (12ad4 <pwm_set+0x88>)
   12a94:	fba4 4503 	umull	r4, r5, r4, r3
   12a98:	fb03 550a 	mla	r5, r3, sl, r5
   12a9c:	4620      	mov	r0, r4
   12a9e:	2300      	movs	r3, #0
   12aa0:	4629      	mov	r1, r5
   12aa2:	f7ed fb1d 	bl	e0 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
   12aa6:	4a0c      	ldr	r2, [pc, #48]	; (12ad8 <pwm_set+0x8c>)
   12aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12aac:	42aa      	cmp	r2, r5
   12aae:	bf08      	it	eq
   12ab0:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   12ab2:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
   12ab4:	d307      	bcc.n	12ac6 <pwm_set+0x7a>
	return api->pin_set(dev, pwm, period, pulse, flags);
   12ab6:	68b2      	ldr	r2, [r6, #8]
   12ab8:	f8cd b000 	str.w	fp, [sp]
   12abc:	6814      	ldr	r4, [r2, #0]
   12abe:	2114      	movs	r1, #20
   12ac0:	463a      	mov	r2, r7
   12ac2:	4630      	mov	r0, r6
   12ac4:	47a0      	blx	r4
}
   12ac6:	b005      	add	sp, #20
   12ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12acc:	20002784 	.word	0x20002784
   12ad0:	00030d40 	.word	0x00030d40
   12ad4:	000f4240 	.word	0x000f4240
   12ad8:	000f423f 	.word	0x000f423f
   12adc:	000186a0 	.word	0x000186a0

00012ae0 <app_value_cb>:
static void app_value_cb(uint32_t value){
   12ae0:	b510      	push	{r4, lr}
        data=value;
   12ae2:	4b05      	ldr	r3, [pc, #20]	; (12af8 <app_value_cb+0x18>)
static void app_value_cb(uint32_t value){
   12ae4:	4604      	mov	r4, r0
        data=value;
   12ae6:	6018      	str	r0, [r3, #0]
        pwm_set();
   12ae8:	f7ff ffb0 	bl	12a4c <pwm_set>
        printk("Duty Cycle: %i\n", value);
   12aec:	4621      	mov	r1, r4
   12aee:	4803      	ldr	r0, [pc, #12]	; (12afc <app_value_cb+0x1c>)
}
   12af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Duty Cycle: %i\n", value);
   12af4:	f010 b91a 	b.w	22d2c <printk>
   12af8:	20002780 	.word	0x20002780
   12afc:	00027b00 	.word	0x00027b00

00012b00 <main>:

	return err;
}

void main(void)
{
   12b00:	b530      	push	{r4, r5, lr}
	int blink_status = 0;
	int err;
        const struct device *pwm;
	printk("Starting Bluetooth Peripheral LBS example\n");
   12b02:	482f      	ldr	r0, [pc, #188]	; (12bc0 <main+0xc0>)
{
   12b04:	b089      	sub	sp, #36	; 0x24
	printk("Starting Bluetooth Peripheral LBS example\n");
   12b06:	f010 f911 	bl	22d2c <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   12b0a:	482e      	ldr	r0, [pc, #184]	; (12bc4 <main+0xc4>)
   12b0c:	f00d f93e 	bl	1fd8c <z_impl_device_get_binding>
        /*PWM INIT*/
        pwm = device_get_binding(PWM_LABEL);
	if (!pwm) {
   12b10:	b928      	cbnz	r0, 12b1e <main+0x1e>
		printk("Error: didn't find %s device\n", PWM_LABEL);
   12b12:	492c      	ldr	r1, [pc, #176]	; (12bc4 <main+0xc4>)
   12b14:	482c      	ldr	r0, [pc, #176]	; (12bc8 <main+0xc8>)
	}

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
			      sd, ARRAY_SIZE(sd));
	if (err) {
		printk("Advertising failed to start (err %d)\n", err);
   12b16:	f010 f909 	bl	22d2c <printk>

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   12b1a:	b009      	add	sp, #36	; 0x24
   12b1c:	bd30      	pop	{r4, r5, pc}
	err = dk_leds_init();
   12b1e:	f00b fec5 	bl	1e8ac <dk_leds_init>
	if (err) {
   12b22:	4601      	mov	r1, r0
   12b24:	b108      	cbz	r0, 12b2a <main+0x2a>
		printk("LEDs init failed (err %d)\n", err);
   12b26:	4829      	ldr	r0, [pc, #164]	; (12bcc <main+0xcc>)
   12b28:	e7f5      	b.n	12b16 <main+0x16>
	err = dk_buttons_init(button_changed);
   12b2a:	4829      	ldr	r0, [pc, #164]	; (12bd0 <main+0xd0>)
   12b2c:	f00b ff02 	bl	1e934 <dk_buttons_init>
	if (err) {
   12b30:	4604      	mov	r4, r0
   12b32:	2800      	cmp	r0, #0
   12b34:	d036      	beq.n	12ba4 <main+0xa4>
		printk("Cannot init buttons (err: %d)\n", err);
   12b36:	4601      	mov	r1, r0
   12b38:	4826      	ldr	r0, [pc, #152]	; (12bd4 <main+0xd4>)
   12b3a:	f010 f8f7 	bl	22d2c <printk>
		printk("Button init failed (err %d)\n", err);
   12b3e:	4826      	ldr	r0, [pc, #152]	; (12bd8 <main+0xd8>)
   12b40:	4621      	mov	r1, r4
   12b42:	e7e8      	b.n	12b16 <main+0x16>
	printk("Bluetooth initialized\n");
   12b44:	4825      	ldr	r0, [pc, #148]	; (12bdc <main+0xdc>)
   12b46:	f010 f8f1 	bl	22d2c <printk>
		settings_load();
   12b4a:	f010 fce0 	bl	2350e <settings_load>
	err = bt_lbs_init(&lbs_callbacs);
   12b4e:	4824      	ldr	r0, [pc, #144]	; (12be0 <main+0xe0>)
   12b50:	f000 f87a 	bl	12c48 <bt_lbs_init>
	if (err) {
   12b54:	4601      	mov	r1, r0
   12b56:	b108      	cbz	r0, 12b5c <main+0x5c>
		printk("Failed to init LBS (err:%d)\n", err);
   12b58:	4822      	ldr	r0, [pc, #136]	; (12be4 <main+0xe4>)
   12b5a:	e7dc      	b.n	12b16 <main+0x16>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   12b5c:	4d22      	ldr	r5, [pc, #136]	; (12be8 <main+0xe8>)
   12b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12b60:	ac03      	add	r4, sp, #12
   12b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12b64:	682b      	ldr	r3, [r5, #0]
   12b66:	6023      	str	r3, [r4, #0]
   12b68:	2301      	movs	r3, #1
   12b6a:	9300      	str	r3, [sp, #0]
   12b6c:	491f      	ldr	r1, [pc, #124]	; (12bec <main+0xec>)
   12b6e:	4b20      	ldr	r3, [pc, #128]	; (12bf0 <main+0xf0>)
   12b70:	2202      	movs	r2, #2
   12b72:	a803      	add	r0, sp, #12
   12b74:	f005 f966 	bl	17e44 <bt_le_adv_start>
	if (err) {
   12b78:	4604      	mov	r4, r0
   12b7a:	b110      	cbz	r0, 12b82 <main+0x82>
		printk("Advertising failed to start (err %d)\n", err);
   12b7c:	4601      	mov	r1, r0
   12b7e:	481d      	ldr	r0, [pc, #116]	; (12bf4 <main+0xf4>)
   12b80:	e7c9      	b.n	12b16 <main+0x16>
	printk("Advertising successfully started\n");
   12b82:	481d      	ldr	r0, [pc, #116]	; (12bf8 <main+0xf8>)
   12b84:	f010 f8d2 	bl	22d2c <printk>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   12b88:	3401      	adds	r4, #1
   12b8a:	f004 0101 	and.w	r1, r4, #1
   12b8e:	bf48      	it	mi
   12b90:	4249      	negmi	r1, r1
   12b92:	2000      	movs	r0, #0
   12b94:	f00b ff62 	bl	1ea5c <dk_set_led>
	return z_impl_k_sleep(timeout);
   12b98:	2100      	movs	r1, #0
   12b9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12b9e:	f00e fef3 	bl	21988 <z_impl_k_sleep>
	for (;;) {
   12ba2:	e7f1      	b.n	12b88 <main+0x88>
	bt_conn_cb_register(&conn_callbacks);
   12ba4:	4815      	ldr	r0, [pc, #84]	; (12bfc <main+0xfc>)
   12ba6:	f005 fcf9 	bl	1859c <bt_conn_cb_register>
		bt_conn_auth_cb_register(&conn_auth_callbacks);
   12baa:	4815      	ldr	r0, [pc, #84]	; (12c00 <main+0x100>)
   12bac:	f006 f922 	bl	18df4 <bt_conn_auth_cb_register>
	err = bt_enable(NULL);
   12bb0:	4620      	mov	r0, r4
   12bb2:	f004 feb7 	bl	17924 <bt_enable>
	if (err) {
   12bb6:	4601      	mov	r1, r0
   12bb8:	2800      	cmp	r0, #0
   12bba:	d0c3      	beq.n	12b44 <main+0x44>
		printk("Bluetooth init failed (err %d)\n", err);
   12bbc:	4811      	ldr	r0, [pc, #68]	; (12c04 <main+0x104>)
   12bbe:	e7aa      	b.n	12b16 <main+0x16>
   12bc0:	00027b10 	.word	0x00027b10
   12bc4:	00027b3b 	.word	0x00027b3b
   12bc8:	00027b41 	.word	0x00027b41
   12bcc:	00027b5f 	.word	0x00027b5f
   12bd0:	000128cd 	.word	0x000128cd
   12bd4:	00027b7a 	.word	0x00027b7a
   12bd8:	00027b99 	.word	0x00027b99
   12bdc:	00027bd6 	.word	0x00027bd6
   12be0:	20000550 	.word	0x20000550
   12be4:	00027bed 	.word	0x00027bed
   12be8:	00027170 	.word	0x00027170
   12bec:	00027208 	.word	0x00027208
   12bf0:	00027218 	.word	0x00027218
   12bf4:	00027c0a 	.word	0x00027c0a
   12bf8:	00027c30 	.word	0x00027c30
   12bfc:	20000534 	.word	0x20000534
   12c00:	20000510 	.word	0x20000510
   12c04:	00027bb6 	.word	0x00027bb6

00012c08 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   12c08:	1e4b      	subs	r3, r1, #1
   12c0a:	4259      	negs	r1, r3
   12c0c:	4159      	adcs	r1, r3
   12c0e:	4b01      	ldr	r3, [pc, #4]	; (12c14 <lbslc_ccc_cfg_changed+0xc>)
   12c10:	7019      	strb	r1, [r3, #0]
}
   12c12:	4770      	bx	lr
   12c14:	20002b9b 	.word	0x20002b9b

00012c18 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   12c18:	b510      	push	{r4, lr}
   12c1a:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);
	if (lbs_cb.led_cb) {
   12c1c:	4b03      	ldr	r3, [pc, #12]	; (12c2c <write_led+0x14>)
   12c1e:	681b      	ldr	r3, [r3, #0]
   12c20:	b10b      	cbz	r3, 12c26 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
   12c22:	7810      	ldrb	r0, [r2, #0]
   12c24:	4798      	blx	r3
	}
        
	return len;
}
   12c26:	4620      	mov	r0, r4
   12c28:	bd10      	pop	{r4, pc}
   12c2a:	bf00      	nop
   12c2c:	20002788 	.word	0x20002788

00012c30 <send_data>:

static ssize_t send_data(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   12c30:	b510      	push	{r4, lr}
   12c32:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);
        //printk("Value: %i\n", *(int *)buf);
        
	if (lbs_cb.value_cb) {
   12c34:	4b03      	ldr	r3, [pc, #12]	; (12c44 <send_data+0x14>)
   12c36:	689b      	ldr	r3, [r3, #8]
   12c38:	b10b      	cbz	r3, 12c3e <send_data+0xe>
		lbs_cb.value_cb(*(uint32_t *)buf);
   12c3a:	6810      	ldr	r0, [r2, #0]
   12c3c:	4798      	blx	r3
	}
        
        //lbs_cb.value=*(int *)buf;
	return len;
}
   12c3e:	4620      	mov	r0, r4
   12c40:	bd10      	pop	{r4, pc}
   12c42:	bf00      	nop
   12c44:	20002788 	.word	0x20002788

00012c48 <bt_lbs_init>:
			       NULL, send_data, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
   12c48:	b130      	cbz	r0, 12c58 <bt_lbs_init+0x10>
		lbs_cb.led_cb    = callbacks->led_cb;
   12c4a:	4b04      	ldr	r3, [pc, #16]	; (12c5c <bt_lbs_init+0x14>)
   12c4c:	6802      	ldr	r2, [r0, #0]
   12c4e:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
   12c50:	6842      	ldr	r2, [r0, #4]
   12c52:	605a      	str	r2, [r3, #4]
                lbs_cb.value_cb = callbacks->value_cb;
   12c54:	6882      	ldr	r2, [r0, #8]
   12c56:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   12c58:	2000      	movs	r0, #0
   12c5a:	4770      	bx	lr
   12c5c:	20002788 	.word	0x20002788

00012c60 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
   12c60:	b500      	push	{lr}
	if (!notify_enabled) {
   12c62:	4b0e      	ldr	r3, [pc, #56]	; (12c9c <bt_lbs_send_button_state+0x3c>)
{
   12c64:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
   12c66:	781b      	ldrb	r3, [r3, #0]
{
   12c68:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
   12c6c:	b19b      	cbz	r3, 12c96 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   12c6e:	2100      	movs	r1, #0
   12c70:	2218      	movs	r2, #24
   12c72:	a802      	add	r0, sp, #8
   12c74:	f011 ff51 	bl	24b1a <memset>

	params.attr = attr;
   12c78:	4b09      	ldr	r3, [pc, #36]	; (12ca0 <bt_lbs_send_button_state+0x40>)
   12c7a:	9303      	str	r3, [sp, #12]
	params.data = data;
   12c7c:	f10d 0307 	add.w	r3, sp, #7
   12c80:	9304      	str	r3, [sp, #16]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   12c82:	a902      	add	r1, sp, #8
	params.len = len;
   12c84:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   12c86:	2000      	movs	r0, #0
	params.len = len;
   12c88:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   12c8c:	f008 fa58 	bl	1b140 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
   12c90:	b009      	add	sp, #36	; 0x24
   12c92:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   12c96:	f06f 000c 	mvn.w	r0, #12
   12c9a:	e7f9      	b.n	12c90 <bt_lbs_send_button_state+0x30>
   12c9c:	20002b9b 	.word	0x20002b9b
   12ca0:	00027248 	.word	0x00027248

00012ca4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   12ca4:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12ca6:	4c0a      	ldr	r4, [pc, #40]	; (12cd0 <crc8_ccitt+0x2c>)
   12ca8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   12caa:	4291      	cmp	r1, r2
   12cac:	d100      	bne.n	12cb0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   12cae:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   12cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
   12cb4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12cb6:	0903      	lsrs	r3, r0, #4
   12cb8:	5ce3      	ldrb	r3, [r4, r3]
   12cba:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   12cbe:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12cc0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   12cc4:	5ce0      	ldrb	r0, [r4, r3]
   12cc6:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   12cca:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   12ccc:	e7ed      	b.n	12caa <crc8_ccitt+0x6>
   12cce:	bf00      	nop
   12cd0:	00027c67 	.word	0x00027c67

00012cd4 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   12cd4:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   12cd6:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   12cda:	2b02      	cmp	r3, #2
{
   12cdc:	b570      	push	{r4, r5, r6, lr}
   12cde:	4604      	mov	r4, r0
   12ce0:	460e      	mov	r6, r1
	notify->result = res;
   12ce2:	6081      	str	r1, [r0, #8]
	switch (method) {
   12ce4:	d010      	beq.n	12d08 <sys_notify_finalize+0x34>
   12ce6:	2b03      	cmp	r3, #3
   12ce8:	d004      	beq.n	12cf4 <sys_notify_finalize+0x20>
   12cea:	2b01      	cmp	r3, #1
   12cec:	d10f      	bne.n	12d0e <sys_notify_finalize+0x3a>
   12cee:	2500      	movs	r5, #0
   12cf0:	4628      	mov	r0, r5
   12cf2:	e001      	b.n	12cf8 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   12cf4:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   12cf6:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12cf8:	2300      	movs	r3, #0
   12cfa:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12cfc:	b110      	cbz	r0, 12d04 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   12cfe:	4631      	mov	r1, r6
   12d00:	f00f ff16 	bl	22b30 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12d04:	4628      	mov	r0, r5
   12d06:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   12d08:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   12d0a:	2500      	movs	r5, #0
		break;
   12d0c:	e7f4      	b.n	12cf8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   12d0e:	4905      	ldr	r1, [pc, #20]	; (12d24 <sys_notify_finalize+0x50>)
   12d10:	4805      	ldr	r0, [pc, #20]	; (12d28 <sys_notify_finalize+0x54>)
   12d12:	2245      	movs	r2, #69	; 0x45
   12d14:	f010 f80a 	bl	22d2c <printk>
   12d18:	4802      	ldr	r0, [pc, #8]	; (12d24 <sys_notify_finalize+0x50>)
   12d1a:	2145      	movs	r1, #69	; 0x45
   12d1c:	f010 fa69 	bl	231f2 <assert_post_action>
	sys_notify_generic_callback rv = 0;
   12d20:	2500      	movs	r5, #0
   12d22:	e7e8      	b.n	12cf6 <sys_notify_finalize+0x22>
   12d24:	00027c77 	.word	0x00027c77
   12d28:	00027c9a 	.word	0x00027c9a

00012d2c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12d2c:	680b      	ldr	r3, [r1, #0]
   12d2e:	3301      	adds	r3, #1
   12d30:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   12d32:	4b01      	ldr	r3, [pc, #4]	; (12d38 <char_out+0xc>)
   12d34:	681b      	ldr	r3, [r3, #0]
   12d36:	4718      	bx	r3
   12d38:	2000058c 	.word	0x2000058c

00012d3c <__printk_hook_install>:
	_char_out = fn;
   12d3c:	4b01      	ldr	r3, [pc, #4]	; (12d44 <__printk_hook_install+0x8>)
   12d3e:	6018      	str	r0, [r3, #0]
}
   12d40:	4770      	bx	lr
   12d42:	bf00      	nop
   12d44:	2000058c 	.word	0x2000058c

00012d48 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12d48:	b507      	push	{r0, r1, r2, lr}
   12d4a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12d4c:	2100      	movs	r1, #0
{
   12d4e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   12d50:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   12d52:	4803      	ldr	r0, [pc, #12]	; (12d60 <vprintk+0x18>)
   12d54:	a901      	add	r1, sp, #4
   12d56:	f000 fd15 	bl	13784 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12d5a:	b003      	add	sp, #12
   12d5c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d60:	00012d2d 	.word	0x00012d2d

00012d64 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12d64:	b530      	push	{r4, r5, lr}
   12d66:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   12d68:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   12d6c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   12d6e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   12d70:	a901      	add	r1, sp, #4
   12d72:	4805      	ldr	r0, [pc, #20]	; (12d88 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   12d74:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   12d76:	f000 fd05 	bl	13784 <cbvprintf>

	if (ctx.count < ctx.max) {
   12d7a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   12d7e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12d80:	bfb8      	it	lt
   12d82:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12d84:	b005      	add	sp, #20
   12d86:	bd30      	pop	{r4, r5, pc}
   12d88:	00022d07 	.word	0x00022d07

00012d8c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12d90:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12d94:	f01a 0f08 	tst.w	sl, #8
{
   12d98:	4604      	mov	r4, r0
   12d9a:	4693      	mov	fp, r2
	if (processing) {
   12d9c:	d01c      	beq.n	12dd8 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   12d9e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12da0:	bf0c      	ite	eq
   12da2:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12da6:	f04a 0a20 	orrne.w	sl, sl, #32
   12daa:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12dae:	f104 0014 	add.w	r0, r4, #20
   12db2:	f00f f821 	bl	21df8 <z_spin_unlock_valid>
   12db6:	b940      	cbnz	r0, 12dca <process_event+0x3e>
   12db8:	49ba      	ldr	r1, [pc, #744]	; (130a4 <process_event+0x318>)
   12dba:	48bb      	ldr	r0, [pc, #748]	; (130a8 <process_event+0x31c>)
   12dbc:	22a3      	movs	r2, #163	; 0xa3
   12dbe:	f00f ffb5 	bl	22d2c <printk>
   12dc2:	48b8      	ldr	r0, [pc, #736]	; (130a4 <process_event+0x318>)
   12dc4:	21a3      	movs	r1, #163	; 0xa3
   12dc6:	f010 fa14 	bl	231f2 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12dca:	f38b 8811 	msr	BASEPRI, fp
   12dce:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12dd2:	b003      	add	sp, #12
   12dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   12dd8:	4fb4      	ldr	r7, [pc, #720]	; (130ac <process_event+0x320>)
   12dda:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 130a8 <process_event+0x31c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12dde:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   12de2:	2902      	cmp	r1, #2
   12de4:	d106      	bne.n	12df4 <process_event+0x68>
			evt = process_recheck(mgr);
   12de6:	4620      	mov	r0, r4
   12de8:	f00f ffba 	bl	22d60 <process_recheck>
		if (evt == EVT_NOP) {
   12dec:	2800      	cmp	r0, #0
   12dee:	d0de      	beq.n	12dae <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   12df0:	2801      	cmp	r0, #1
   12df2:	d165      	bne.n	12ec0 <process_event+0x134>
			res = mgr->last_res;
   12df4:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12df8:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   12dfa:	f1b9 0f00 	cmp.w	r9, #0
   12dfe:	da19      	bge.n	12e34 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12e00:	2600      	movs	r6, #0
		*clients = mgr->clients;
   12e02:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e04:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   12e08:	e9c4 6600 	strd	r6, r6, [r4]
   12e0c:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12e10:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12e12:	8ba3      	ldrh	r3, [r4, #28]
   12e14:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12e18:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12e1a:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   12e1c:	d003      	beq.n	12e26 <process_event+0x9a>
		if (do_monitors
   12e1e:	68a2      	ldr	r2, [r4, #8]
   12e20:	2a00      	cmp	r2, #0
   12e22:	f040 80f1 	bne.w	13008 <process_event+0x27c>
		    || !sys_slist_is_empty(&clients)
   12e26:	b915      	cbnz	r5, 12e2e <process_event+0xa2>
		    || (transit != NULL)) {
   12e28:	2e00      	cmp	r6, #0
   12e2a:	f000 812b 	beq.w	13084 <process_event+0x2f8>
   12e2e:	f04f 0a00 	mov.w	sl, #0
   12e32:	e0eb      	b.n	1300c <process_event+0x280>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12e34:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12e38:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12e3a:	2901      	cmp	r1, #1
   12e3c:	d822      	bhi.n	12e84 <process_event+0xf8>
	list->head = NULL;
   12e3e:	2100      	movs	r1, #0
   12e40:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   12e44:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   12e46:	6825      	ldr	r5, [r4, #0]
   12e48:	b29b      	uxth	r3, r3
	list->tail = NULL;
   12e4a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12e4e:	d10c      	bne.n	12e6a <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12e50:	428d      	cmp	r5, r1
   12e52:	462a      	mov	r2, r5
   12e54:	bf38      	it	cc
   12e56:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12e58:	b12a      	cbz	r2, 12e66 <process_event+0xda>
				mgr->refs += 1U;
   12e5a:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12e5c:	6812      	ldr	r2, [r2, #0]
   12e5e:	3101      	adds	r1, #1
   12e60:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12e62:	2a00      	cmp	r2, #0
   12e64:	d1f8      	bne.n	12e58 <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e66:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12e6a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12e6c:	4620      	mov	r0, r4
   12e6e:	f00f ff77 	bl	22d60 <process_recheck>
   12e72:	4606      	mov	r6, r0
   12e74:	2800      	cmp	r0, #0
   12e76:	d0cc      	beq.n	12e12 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12e78:	8ba3      	ldrh	r3, [r4, #28]
   12e7a:	f043 0320 	orr.w	r3, r3, #32
   12e7e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   12e80:	2600      	movs	r6, #0
   12e82:	e7c6      	b.n	12e12 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12e84:	2a04      	cmp	r2, #4
   12e86:	d10d      	bne.n	12ea4 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12e88:	f023 0307 	bic.w	r3, r3, #7
   12e8c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   12e8e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12e90:	4620      	mov	r0, r4
   12e92:	f00f ff65 	bl	22d60 <process_recheck>
   12e96:	4605      	mov	r5, r0
   12e98:	b180      	cbz	r0, 12ebc <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12e9a:	f042 0220 	orr.w	r2, r2, #32
   12e9e:	83a2      	strh	r2, [r4, #28]
   12ea0:	2500      	movs	r5, #0
   12ea2:	e7ed      	b.n	12e80 <process_event+0xf4>
		__ASSERT_NO_MSG(false);
   12ea4:	f240 1219 	movw	r2, #281	; 0x119
   12ea8:	4639      	mov	r1, r7
   12eaa:	4640      	mov	r0, r8
   12eac:	f00f ff3e 	bl	22d2c <printk>
   12eb0:	f240 1119 	movw	r1, #281	; 0x119
   12eb4:	4638      	mov	r0, r7
   12eb6:	f010 f99c 	bl	231f2 <assert_post_action>
   12eba:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   12ebc:	462e      	mov	r6, r5
   12ebe:	e7a8      	b.n	12e12 <process_event+0x86>
		} else if (evt == EVT_START) {
   12ec0:	2803      	cmp	r0, #3
   12ec2:	d131      	bne.n	12f28 <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   12ec4:	f1ba 0f00 	cmp.w	sl, #0
   12ec8:	d00a      	beq.n	12ee0 <process_event+0x154>
   12eca:	4639      	mov	r1, r7
   12ecc:	4640      	mov	r0, r8
   12ece:	f44f 72aa 	mov.w	r2, #340	; 0x154
   12ed2:	f00f ff2b 	bl	22d2c <printk>
   12ed6:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12eda:	4638      	mov	r0, r7
   12edc:	f010 f989 	bl	231f2 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   12ee0:	6823      	ldr	r3, [r4, #0]
   12ee2:	b953      	cbnz	r3, 12efa <process_event+0x16e>
   12ee4:	4639      	mov	r1, r7
   12ee6:	4640      	mov	r0, r8
   12ee8:	f240 1255 	movw	r2, #341	; 0x155
   12eec:	f00f ff1e 	bl	22d2c <printk>
   12ef0:	f240 1155 	movw	r1, #341	; 0x155
   12ef4:	4638      	mov	r0, r7
   12ef6:	f010 f97c 	bl	231f2 <assert_post_action>
			transit = mgr->transitions->start;
   12efa:	6923      	ldr	r3, [r4, #16]
   12efc:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12efe:	b956      	cbnz	r6, 12f16 <process_event+0x18a>
   12f00:	4639      	mov	r1, r7
   12f02:	4640      	mov	r0, r8
   12f04:	f44f 72ac 	mov.w	r2, #344	; 0x158
   12f08:	f00f ff10 	bl	22d2c <printk>
   12f0c:	f44f 71ac 	mov.w	r1, #344	; 0x158
   12f10:	4638      	mov	r0, r7
   12f12:	f010 f96e 	bl	231f2 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12f16:	8ba3      	ldrh	r3, [r4, #28]
   12f18:	f023 0307 	bic.w	r3, r3, #7
   12f1c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12f20:	83a3      	strh	r3, [r4, #28]
}
   12f22:	2500      	movs	r5, #0
		res = 0;
   12f24:	46a9      	mov	r9, r5
}
   12f26:	e774      	b.n	12e12 <process_event+0x86>
		} else if (evt == EVT_STOP) {
   12f28:	2804      	cmp	r0, #4
   12f2a:	d12e      	bne.n	12f8a <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12f2c:	f1ba 0f02 	cmp.w	sl, #2
   12f30:	d00a      	beq.n	12f48 <process_event+0x1bc>
   12f32:	4639      	mov	r1, r7
   12f34:	4640      	mov	r0, r8
   12f36:	f240 125b 	movw	r2, #347	; 0x15b
   12f3a:	f00f fef7 	bl	22d2c <printk>
   12f3e:	f240 115b 	movw	r1, #347	; 0x15b
   12f42:	4638      	mov	r0, r7
   12f44:	f010 f955 	bl	231f2 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   12f48:	8be3      	ldrh	r3, [r4, #30]
   12f4a:	b153      	cbz	r3, 12f62 <process_event+0x1d6>
   12f4c:	4639      	mov	r1, r7
   12f4e:	4640      	mov	r0, r8
   12f50:	f44f 72ae 	mov.w	r2, #348	; 0x15c
   12f54:	f00f feea 	bl	22d2c <printk>
   12f58:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   12f5c:	4638      	mov	r0, r7
   12f5e:	f010 f948 	bl	231f2 <assert_post_action>
			transit = mgr->transitions->stop;
   12f62:	6923      	ldr	r3, [r4, #16]
   12f64:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   12f66:	b956      	cbnz	r6, 12f7e <process_event+0x1f2>
   12f68:	4639      	mov	r1, r7
   12f6a:	4640      	mov	r0, r8
   12f6c:	f240 125f 	movw	r2, #351	; 0x15f
   12f70:	f00f fedc 	bl	22d2c <printk>
   12f74:	f240 115f 	movw	r1, #351	; 0x15f
   12f78:	4638      	mov	r0, r7
   12f7a:	f010 f93a 	bl	231f2 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12f7e:	8ba3      	ldrh	r3, [r4, #28]
   12f80:	f023 0307 	bic.w	r3, r3, #7
   12f84:	f043 0304 	orr.w	r3, r3, #4
   12f88:	e7ca      	b.n	12f20 <process_event+0x194>
		} else if (evt == EVT_RESET) {
   12f8a:	2805      	cmp	r0, #5
   12f8c:	d12e      	bne.n	12fec <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   12f8e:	f1ba 0f01 	cmp.w	sl, #1
   12f92:	d00a      	beq.n	12faa <process_event+0x21e>
   12f94:	4639      	mov	r1, r7
   12f96:	4640      	mov	r0, r8
   12f98:	f44f 72b1 	mov.w	r2, #354	; 0x162
   12f9c:	f00f fec6 	bl	22d2c <printk>
   12fa0:	f44f 71b1 	mov.w	r1, #354	; 0x162
   12fa4:	4638      	mov	r0, r7
   12fa6:	f010 f924 	bl	231f2 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   12faa:	6823      	ldr	r3, [r4, #0]
   12fac:	b953      	cbnz	r3, 12fc4 <process_event+0x238>
   12fae:	4639      	mov	r1, r7
   12fb0:	4640      	mov	r0, r8
   12fb2:	f240 1263 	movw	r2, #355	; 0x163
   12fb6:	f00f feb9 	bl	22d2c <printk>
   12fba:	f240 1163 	movw	r1, #355	; 0x163
   12fbe:	4638      	mov	r0, r7
   12fc0:	f010 f917 	bl	231f2 <assert_post_action>
			transit = mgr->transitions->reset;
   12fc4:	6923      	ldr	r3, [r4, #16]
   12fc6:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   12fc8:	b956      	cbnz	r6, 12fe0 <process_event+0x254>
   12fca:	4639      	mov	r1, r7
   12fcc:	4640      	mov	r0, r8
   12fce:	f44f 72b3 	mov.w	r2, #358	; 0x166
   12fd2:	f00f feab 	bl	22d2c <printk>
   12fd6:	f44f 71b3 	mov.w	r1, #358	; 0x166
   12fda:	4638      	mov	r0, r7
   12fdc:	f010 f909 	bl	231f2 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12fe0:	8ba3      	ldrh	r3, [r4, #28]
   12fe2:	f023 0307 	bic.w	r3, r3, #7
   12fe6:	f043 0305 	orr.w	r3, r3, #5
   12fea:	e799      	b.n	12f20 <process_event+0x194>
			__ASSERT_NO_MSG(false);
   12fec:	f240 1269 	movw	r2, #361	; 0x169
   12ff0:	4639      	mov	r1, r7
   12ff2:	4640      	mov	r0, r8
   12ff4:	f00f fe9a 	bl	22d2c <printk>
   12ff8:	2500      	movs	r5, #0
   12ffa:	f240 1169 	movw	r1, #361	; 0x169
   12ffe:	4638      	mov	r0, r7
   13000:	f010 f8f7 	bl	231f2 <assert_post_action>
		onoff_transition_fn transit = NULL;
   13004:	462e      	mov	r6, r5
   13006:	e78d      	b.n	12f24 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
   13008:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1300c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   13010:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   13012:	f104 0314 	add.w	r3, r4, #20
   13016:	4618      	mov	r0, r3
   13018:	9301      	str	r3, [sp, #4]
   1301a:	f00e feed 	bl	21df8 <z_spin_unlock_valid>
   1301e:	b940      	cbnz	r0, 13032 <process_event+0x2a6>
   13020:	4920      	ldr	r1, [pc, #128]	; (130a4 <process_event+0x318>)
   13022:	4640      	mov	r0, r8
   13024:	22a3      	movs	r2, #163	; 0xa3
   13026:	f00f fe81 	bl	22d2c <printk>
   1302a:	481e      	ldr	r0, [pc, #120]	; (130a4 <process_event+0x318>)
   1302c:	21a3      	movs	r1, #163	; 0xa3
   1302e:	f010 f8e0 	bl	231f2 <assert_post_action>
   13032:	f38b 8811 	msr	BASEPRI, fp
   13036:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1303a:	f1ba 0f00 	cmp.w	sl, #0
   1303e:	d139      	bne.n	130b4 <process_event+0x328>
	while (!sys_slist_is_empty(list)) {
   13040:	2d00      	cmp	r5, #0
   13042:	d14c      	bne.n	130de <process_event+0x352>
			if (transit != NULL) {
   13044:	b116      	cbz	r6, 1304c <process_event+0x2c0>
				transit(mgr, transition_complete);
   13046:	491a      	ldr	r1, [pc, #104]	; (130b0 <process_event+0x324>)
   13048:	4620      	mov	r0, r4
   1304a:	47b0      	blx	r6
	__asm__ volatile(
   1304c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13050:	f3ef 8b11 	mrs	fp, BASEPRI
   13054:	f383 8811 	msr	BASEPRI, r3
   13058:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1305c:	9801      	ldr	r0, [sp, #4]
   1305e:	f00e febd 	bl	21ddc <z_spin_lock_valid>
   13062:	b940      	cbnz	r0, 13076 <process_event+0x2ea>
   13064:	490f      	ldr	r1, [pc, #60]	; (130a4 <process_event+0x318>)
   13066:	4640      	mov	r0, r8
   13068:	2278      	movs	r2, #120	; 0x78
   1306a:	f00f fe5f 	bl	22d2c <printk>
   1306e:	480d      	ldr	r0, [pc, #52]	; (130a4 <process_event+0x318>)
   13070:	2178      	movs	r1, #120	; 0x78
   13072:	f010 f8be 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   13076:	9801      	ldr	r0, [sp, #4]
   13078:	f00e fece 	bl	21e18 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1307c:	8ba3      	ldrh	r3, [r4, #28]
   1307e:	f023 0308 	bic.w	r3, r3, #8
   13082:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13084:	8ba3      	ldrh	r3, [r4, #28]
   13086:	06da      	lsls	r2, r3, #27
   13088:	d531      	bpl.n	130ee <process_event+0x362>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1308a:	f023 0310 	bic.w	r3, r3, #16
   1308e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   13090:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   13092:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   13096:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   1309a:	2900      	cmp	r1, #0
   1309c:	f47f aea1 	bne.w	12de2 <process_event+0x56>
out:
   130a0:	e685      	b.n	12dae <process_event+0x22>
   130a2:	bf00      	nop
   130a4:	00027cd4 	.word	0x00027cd4
   130a8:	00027c9a 	.word	0x00027c9a
   130ac:	00027cb2 	.word	0x00027cb2
   130b0:	00013101 	.word	0x00013101
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   130b4:	68a1      	ldr	r1, [r4, #8]
   130b6:	2900      	cmp	r1, #0
   130b8:	d0c2      	beq.n	13040 <process_event+0x2b4>
	return node->next;
   130ba:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   130bc:	f8d1 b004 	ldr.w	fp, [r1, #4]
   130c0:	9a00      	ldr	r2, [sp, #0]
   130c2:	2b00      	cmp	r3, #0
   130c4:	bf38      	it	cc
   130c6:	2300      	movcc	r3, #0
   130c8:	469a      	mov	sl, r3
   130ca:	4620      	mov	r0, r4
   130cc:	464b      	mov	r3, r9
   130ce:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   130d0:	f1ba 0f00 	cmp.w	sl, #0
   130d4:	d0b4      	beq.n	13040 <process_event+0x2b4>
   130d6:	f8da 3000 	ldr.w	r3, [sl]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   130da:	4651      	mov	r1, sl
   130dc:	e7ee      	b.n	130bc <process_event+0x330>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   130de:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   130e0:	9a00      	ldr	r2, [sp, #0]
   130e2:	682d      	ldr	r5, [r5, #0]
   130e4:	464b      	mov	r3, r9
   130e6:	4620      	mov	r0, r4
   130e8:	f00f fe56 	bl	22d98 <notify_one>
   130ec:	e7a8      	b.n	13040 <process_event+0x2b4>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   130ee:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   130f2:	bf1e      	ittt	ne
   130f4:	f023 0320 	bicne.w	r3, r3, #32
   130f8:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   130fa:	2102      	movne	r1, #2
   130fc:	e7c9      	b.n	13092 <process_event+0x306>
   130fe:	bf00      	nop

00013100 <transition_complete>:
{
   13100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13102:	4604      	mov	r4, r0
   13104:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13106:	f100 0614 	add.w	r6, r0, #20
   1310a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1310e:	f3ef 8711 	mrs	r7, BASEPRI
   13112:	f383 8811 	msr	BASEPRI, r3
   13116:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1311a:	4630      	mov	r0, r6
   1311c:	f00e fe5e 	bl	21ddc <z_spin_lock_valid>
   13120:	b940      	cbnz	r0, 13134 <transition_complete+0x34>
   13122:	490a      	ldr	r1, [pc, #40]	; (1314c <transition_complete+0x4c>)
   13124:	480a      	ldr	r0, [pc, #40]	; (13150 <transition_complete+0x50>)
   13126:	2278      	movs	r2, #120	; 0x78
   13128:	f00f fe00 	bl	22d2c <printk>
   1312c:	4807      	ldr	r0, [pc, #28]	; (1314c <transition_complete+0x4c>)
   1312e:	2178      	movs	r1, #120	; 0x78
   13130:	f010 f85f 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   13134:	4630      	mov	r0, r6
   13136:	f00e fe6f 	bl	21e18 <z_spin_lock_set_owner>
	mgr->last_res = res;
   1313a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1313c:	463a      	mov	r2, r7
   1313e:	4620      	mov	r0, r4
   13140:	2101      	movs	r1, #1
}
   13142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   13146:	f7ff be21 	b.w	12d8c <process_event>
   1314a:	bf00      	nop
   1314c:	00027cd4 	.word	0x00027cd4
   13150:	00027c9a 	.word	0x00027c9a

00013154 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   13154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13158:	4604      	mov	r4, r0
   1315a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1315c:	f00f fe32 	bl	22dc4 <validate_args>

	if (rv < 0) {
   13160:	1e05      	subs	r5, r0, #0
   13162:	db54      	blt.n	1320e <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13164:	f104 0914 	add.w	r9, r4, #20
   13168:	f04f 0340 	mov.w	r3, #64	; 0x40
   1316c:	f3ef 8a11 	mrs	sl, BASEPRI
   13170:	f383 8811 	msr	BASEPRI, r3
   13174:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13178:	4648      	mov	r0, r9
   1317a:	f00e fe2f 	bl	21ddc <z_spin_lock_valid>
   1317e:	b940      	cbnz	r0, 13192 <onoff_request+0x3e>
   13180:	4933      	ldr	r1, [pc, #204]	; (13250 <onoff_request+0xfc>)
   13182:	4834      	ldr	r0, [pc, #208]	; (13254 <onoff_request+0x100>)
   13184:	2278      	movs	r2, #120	; 0x78
   13186:	f00f fdd1 	bl	22d2c <printk>
   1318a:	4831      	ldr	r0, [pc, #196]	; (13250 <onoff_request+0xfc>)
   1318c:	2178      	movs	r1, #120	; 0x78
   1318e:	f010 f830 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   13192:	4648      	mov	r0, r9
   13194:	f00e fe40 	bl	21e18 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   13198:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1319a:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1319c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   131a0:	428b      	cmp	r3, r1
   131a2:	f002 0607 	and.w	r6, r2, #7
   131a6:	d04a      	beq.n	1323e <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   131a8:	2e02      	cmp	r6, #2
   131aa:	d11f      	bne.n	131ec <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   131ac:	3301      	adds	r3, #1
   131ae:	83e3      	strh	r3, [r4, #30]
	rv = state;
   131b0:	4635      	mov	r5, r6
		notify = true;
   131b2:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   131b6:	4648      	mov	r0, r9
   131b8:	f00e fe1e 	bl	21df8 <z_spin_unlock_valid>
   131bc:	b940      	cbnz	r0, 131d0 <onoff_request+0x7c>
   131be:	4924      	ldr	r1, [pc, #144]	; (13250 <onoff_request+0xfc>)
   131c0:	4824      	ldr	r0, [pc, #144]	; (13254 <onoff_request+0x100>)
   131c2:	22a3      	movs	r2, #163	; 0xa3
   131c4:	f00f fdb2 	bl	22d2c <printk>
   131c8:	4821      	ldr	r0, [pc, #132]	; (13250 <onoff_request+0xfc>)
   131ca:	21a3      	movs	r1, #163	; 0xa3
   131cc:	f010 f811 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   131d0:	f38a 8811 	msr	BASEPRI, sl
   131d4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   131d8:	f1b8 0f00 	cmp.w	r8, #0
   131dc:	d017      	beq.n	1320e <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   131de:	2300      	movs	r3, #0
   131e0:	4632      	mov	r2, r6
   131e2:	4639      	mov	r1, r7
   131e4:	4620      	mov	r0, r4
   131e6:	f00f fdd7 	bl	22d98 <notify_one>
   131ea:	e010      	b.n	1320e <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   131ec:	0793      	lsls	r3, r2, #30
   131ee:	d001      	beq.n	131f4 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   131f0:	2e06      	cmp	r6, #6
   131f2:	d10f      	bne.n	13214 <onoff_request+0xc0>
	parent->next = child;
   131f4:	2300      	movs	r3, #0
   131f6:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   131f8:	6863      	ldr	r3, [r4, #4]
   131fa:	b9eb      	cbnz	r3, 13238 <onoff_request+0xe4>
	list->head = node;
   131fc:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   13200:	4635      	mov	r5, r6
   13202:	b9f6      	cbnz	r6, 13242 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   13204:	4652      	mov	r2, sl
   13206:	2102      	movs	r1, #2
   13208:	4620      	mov	r0, r4
   1320a:	f7ff fdbf 	bl	12d8c <process_event>
		}
	}

	return rv;
}
   1320e:	4628      	mov	r0, r5
   13210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   13214:	2e05      	cmp	r6, #5
   13216:	d017      	beq.n	13248 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   13218:	2e01      	cmp	r6, #1
   1321a:	d00a      	beq.n	13232 <onoff_request+0xde>
   1321c:	490e      	ldr	r1, [pc, #56]	; (13258 <onoff_request+0x104>)
   1321e:	480d      	ldr	r0, [pc, #52]	; (13254 <onoff_request+0x100>)
   13220:	f240 12c5 	movw	r2, #453	; 0x1c5
   13224:	f00f fd82 	bl	22d2c <printk>
   13228:	480b      	ldr	r0, [pc, #44]	; (13258 <onoff_request+0x104>)
   1322a:	f240 11c5 	movw	r1, #453	; 0x1c5
   1322e:	f00f ffe0 	bl	231f2 <assert_post_action>
		rv = -EIO;
   13232:	f06f 0504 	mvn.w	r5, #4
   13236:	e004      	b.n	13242 <onoff_request+0xee>
	parent->next = child;
   13238:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1323a:	6067      	str	r7, [r4, #4]
}
   1323c:	e7e0      	b.n	13200 <onoff_request+0xac>
		rv = -EAGAIN;
   1323e:	f06f 050a 	mvn.w	r5, #10
   13242:	f04f 0800 	mov.w	r8, #0
   13246:	e7b6      	b.n	131b6 <onoff_request+0x62>
		rv = -ENOTSUP;
   13248:	f06f 0522 	mvn.w	r5, #34	; 0x22
   1324c:	e7f9      	b.n	13242 <onoff_request+0xee>
   1324e:	bf00      	nop
   13250:	00027cd4 	.word	0x00027cd4
   13254:	00027c9a 	.word	0x00027c9a
   13258:	00027cb2 	.word	0x00027cb2

0001325c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   13260:	4e16      	ldr	r6, [pc, #88]	; (132bc <z_work_q_main+0x60>)
   13262:	f8df 805c 	ldr.w	r8, [pc, #92]	; 132c0 <z_work_q_main+0x64>
{
   13266:	4605      	mov	r5, r0
	return z_impl_k_queue_get(queue, timeout);
   13268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1326c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13270:	4628      	mov	r0, r5
   13272:	f00d fb3b 	bl	208ec <z_impl_k_queue_get>
		if (work == NULL) {
   13276:	4604      	mov	r4, r0
   13278:	2800      	cmp	r0, #0
   1327a:	d0f5      	beq.n	13268 <z_work_q_main+0xc>
		handler = work->handler;
   1327c:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   1327e:	b947      	cbnz	r7, 13292 <z_work_q_main+0x36>
   13280:	4631      	mov	r1, r6
   13282:	4640      	mov	r0, r8
   13284:	221c      	movs	r2, #28
   13286:	f00f fd51 	bl	22d2c <printk>
   1328a:	211c      	movs	r1, #28
   1328c:	4630      	mov	r0, r6
   1328e:	f00f ffb0 	bl	231f2 <assert_post_action>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13292:	f3bf 8f5b 	dmb	ish
   13296:	f104 0308 	add.w	r3, r4, #8
   1329a:	e853 2f00 	ldrex	r2, [r3]
   1329e:	f022 0101 	bic.w	r1, r2, #1
   132a2:	e843 1000 	strex	r0, r1, [r3]
   132a6:	2800      	cmp	r0, #0
   132a8:	d1f7      	bne.n	1329a <z_work_q_main+0x3e>
   132aa:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   132ae:	07d3      	lsls	r3, r2, #31
   132b0:	d501      	bpl.n	132b6 <z_work_q_main+0x5a>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   132b2:	4620      	mov	r0, r4
   132b4:	47b8      	blx	r7
	z_impl_k_yield();
   132b6:	f00e fa5b 	bl	21770 <z_impl_k_yield>
   132ba:	e7d5      	b.n	13268 <z_work_q_main+0xc>
   132bc:	00027cfa 	.word	0x00027cfa
   132c0:	00027c9a 	.word	0x00027c9a

000132c4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   132c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   132c6:	2900      	cmp	r1, #0
   132c8:	d074      	beq.n	133b4 <sys_heap_free+0xf0>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   132ca:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   132cc:	68ab      	ldr	r3, [r5, #8]
   132ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   132d2:	bf2c      	ite	cs
   132d4:	2408      	movcs	r4, #8
   132d6:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   132d8:	1b0c      	subs	r4, r1, r4
   132da:	1b64      	subs	r4, r4, r5
   132dc:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   132de:	2201      	movs	r2, #1
   132e0:	4621      	mov	r1, r4
   132e2:	4628      	mov	r0, r5
   132e4:	f00f fd9a 	bl	22e1c <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   132e8:	07c2      	lsls	r2, r0, #31
   132ea:	d408      	bmi.n	132fe <sys_heap_free+0x3a>
   132ec:	4932      	ldr	r1, [pc, #200]	; (133b8 <sys_heap_free+0xf4>)
   132ee:	4833      	ldr	r0, [pc, #204]	; (133bc <sys_heap_free+0xf8>)
   132f0:	2299      	movs	r2, #153	; 0x99
   132f2:	f00f fd1b 	bl	22d2c <printk>
   132f6:	4830      	ldr	r0, [pc, #192]	; (133b8 <sys_heap_free+0xf4>)
   132f8:	2199      	movs	r1, #153	; 0x99
   132fa:	f00f ff7a 	bl	231f2 <assert_post_action>
	return c + chunk_size(h, c);
   132fe:	4621      	mov	r1, r4
   13300:	4628      	mov	r0, r5
   13302:	f00f fda1 	bl	22e48 <chunk_size>
   13306:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   13308:	4631      	mov	r1, r6
   1330a:	2200      	movs	r2, #0
   1330c:	4628      	mov	r0, r5
   1330e:	f00f fd85 	bl	22e1c <chunk_field>
   13312:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   13314:	42b4      	cmp	r4, r6
   13316:	d008      	beq.n	1332a <sys_heap_free+0x66>
   13318:	4927      	ldr	r1, [pc, #156]	; (133b8 <sys_heap_free+0xf4>)
   1331a:	4828      	ldr	r0, [pc, #160]	; (133bc <sys_heap_free+0xf8>)
   1331c:	22a1      	movs	r2, #161	; 0xa1
   1331e:	f00f fd05 	bl	22d2c <printk>
   13322:	4825      	ldr	r0, [pc, #148]	; (133b8 <sys_heap_free+0xf4>)
   13324:	21a1      	movs	r1, #161	; 0xa1
   13326:	f00f ff64 	bl	231f2 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   1332a:	2200      	movs	r2, #0
   1332c:	4621      	mov	r1, r4
   1332e:	4628      	mov	r0, r5
   13330:	f00f fd90 	bl	22e54 <set_chunk_used>
	return c + chunk_size(h, c);
   13334:	4621      	mov	r1, r4
   13336:	f00f fd87 	bl	22e48 <chunk_size>
   1333a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1333c:	2201      	movs	r2, #1
   1333e:	4631      	mov	r1, r6
   13340:	4628      	mov	r0, r5
   13342:	f00f fd6b 	bl	22e1c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   13346:	07c3      	lsls	r3, r0, #31
   13348:	d40c      	bmi.n	13364 <sys_heap_free+0xa0>
		free_list_remove(h, right_chunk(h, c));
   1334a:	4631      	mov	r1, r6
   1334c:	4628      	mov	r0, r5
   1334e:	f00f fe1e 	bl	22f8e <free_list_remove>
	return c + chunk_size(h, c);
   13352:	4621      	mov	r1, r4
   13354:	4628      	mov	r0, r5
   13356:	f00f fd77 	bl	22e48 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1335a:	4621      	mov	r1, r4
   1335c:	1822      	adds	r2, r4, r0
   1335e:	4628      	mov	r0, r5
   13360:	f00f fda1 	bl	22ea6 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   13364:	2200      	movs	r2, #0
   13366:	4621      	mov	r1, r4
   13368:	4628      	mov	r0, r5
   1336a:	f00f fd57 	bl	22e1c <chunk_field>
   1336e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   13370:	2201      	movs	r2, #1
   13372:	4639      	mov	r1, r7
   13374:	4628      	mov	r0, r5
   13376:	f00f fd51 	bl	22e1c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1337a:	f010 0601 	ands.w	r6, r0, #1
   1337e:	d113      	bne.n	133a8 <sys_heap_free+0xe4>
		free_list_remove(h, left_chunk(h, c));
   13380:	4639      	mov	r1, r7
   13382:	4628      	mov	r0, r5
   13384:	f00f fe03 	bl	22f8e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   13388:	4621      	mov	r1, r4
   1338a:	4632      	mov	r2, r6
   1338c:	4628      	mov	r0, r5
   1338e:	f00f fd45 	bl	22e1c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   13392:	4622      	mov	r2, r4
   13394:	1a21      	subs	r1, r4, r0
   13396:	4628      	mov	r0, r5
   13398:	f00f fd85 	bl	22ea6 <merge_chunks>
   1339c:	4621      	mov	r1, r4
   1339e:	4632      	mov	r2, r6
   133a0:	4628      	mov	r0, r5
   133a2:	f00f fd3b 	bl	22e1c <chunk_field>
   133a6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   133a8:	4621      	mov	r1, r4
   133aa:	4628      	mov	r0, r5
	free_chunk(h, c);
}
   133ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   133b0:	f00f be45 	b.w	2303e <free_list_add>
}
   133b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   133b6:	bf00      	nop
   133b8:	00027d1d 	.word	0x00027d1d
   133bc:	00027c9a 	.word	0x00027c9a

000133c0 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   133c0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   133c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133c6:	4607      	mov	r7, r0
   133c8:	460d      	mov	r5, r1
   133ca:	4616      	mov	r6, r2
   133cc:	d20e      	bcs.n	133ec <sys_heap_init+0x2c>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   133ce:	2a04      	cmp	r2, #4
   133d0:	d80a      	bhi.n	133e8 <sys_heap_init+0x28>
   133d2:	493e      	ldr	r1, [pc, #248]	; (134cc <sys_heap_init+0x10c>)
   133d4:	483e      	ldr	r0, [pc, #248]	; (134d0 <sys_heap_init+0x110>)
   133d6:	f44f 7297 	mov.w	r2, #302	; 0x12e
   133da:	f00f fca7 	bl	22d2c <printk>
   133de:	483b      	ldr	r0, [pc, #236]	; (134cc <sys_heap_init+0x10c>)
   133e0:	f44f 7197 	mov.w	r1, #302	; 0x12e
   133e4:	f00f ff05 	bl	231f2 <assert_post_action>
   133e8:	2204      	movs	r2, #4
   133ea:	e000      	b.n	133ee <sys_heap_init+0x2e>
   133ec:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   133ee:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   133f0:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   133f2:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   133f4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   133f8:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   133fc:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   133fe:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   13400:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   13404:	d80a      	bhi.n	1341c <sys_heap_init+0x5c>
   13406:	4931      	ldr	r1, [pc, #196]	; (134cc <sys_heap_init+0x10c>)
   13408:	4831      	ldr	r0, [pc, #196]	; (134d0 <sys_heap_init+0x110>)
   1340a:	f240 1237 	movw	r2, #311	; 0x137
   1340e:	f00f fc8d 	bl	22d2c <printk>
   13412:	482e      	ldr	r0, [pc, #184]	; (134cc <sys_heap_init+0x10c>)
   13414:	f240 1137 	movw	r1, #311	; 0x137
   13418:	f00f feeb 	bl	231f2 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1341c:	2200      	movs	r2, #0
   1341e:	2300      	movs	r3, #0
	heap->heap = h;
   13420:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   13422:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   13426:	2300      	movs	r3, #0
   13428:	60e3      	str	r3, [r4, #12]
	h->len = buf_sz;
   1342a:	60a6      	str	r6, [r4, #8]

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1342c:	4631      	mov	r1, r6
   1342e:	4620      	mov	r0, r4
   13430:	f00f fd2c 	bl	22e8c <bucket_idx>
   13434:	1c47      	adds	r7, r0, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   13436:	0080      	lsls	r0, r0, #2
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   13438:	301b      	adds	r0, #27
   1343a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1343e:	bf2c      	ite	cs
   13440:	2302      	movcs	r3, #2
   13442:	2301      	movcc	r3, #1
   13444:	08c5      	lsrs	r5, r0, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   13446:	eb03 00d0 	add.w	r0, r3, r0, lsr #3
   1344a:	42b0      	cmp	r0, r6
   1344c:	d30a      	bcc.n	13464 <sys_heap_init+0xa4>
   1344e:	491f      	ldr	r1, [pc, #124]	; (134cc <sys_heap_init+0x10c>)
   13450:	481f      	ldr	r0, [pc, #124]	; (134d0 <sys_heap_init+0x110>)
   13452:	f240 1243 	movw	r2, #323	; 0x143
   13456:	f00f fc69 	bl	22d2c <printk>
   1345a:	481c      	ldr	r0, [pc, #112]	; (134cc <sys_heap_init+0x10c>)
   1345c:	f240 1143 	movw	r1, #323	; 0x143
   13460:	f00f fec7 	bl	231f2 <assert_post_action>
	return big_heap(h) ? 8 : 4;
   13464:	2300      	movs	r3, #0
   13466:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1346a:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
   1346c:	42bb      	cmp	r3, r7
   1346e:	db29      	blt.n	134c4 <sys_heap_init+0x104>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   13470:	462a      	mov	r2, r5
   13472:	4620      	mov	r0, r4
   13474:	2100      	movs	r1, #0
   13476:	f00f fd05 	bl	22e84 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1347a:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   1347c:	4620      	mov	r0, r4
   1347e:	2201      	movs	r2, #1
   13480:	2100      	movs	r1, #0
   13482:	f00f fce7 	bl	22e54 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   13486:	463a      	mov	r2, r7
   13488:	4629      	mov	r1, r5
   1348a:	f00f fcfb 	bl	22e84 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1348e:	462b      	mov	r3, r5
   13490:	4629      	mov	r1, r5
   13492:	4620      	mov	r0, r4
   13494:	2200      	movs	r2, #0
   13496:	f00f fccc 	bl	22e32 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1349a:	4631      	mov	r1, r6
   1349c:	4620      	mov	r0, r4
   1349e:	2200      	movs	r2, #0
   134a0:	f00f fcf0 	bl	22e84 <set_chunk_size>
   134a4:	463b      	mov	r3, r7
   134a6:	4631      	mov	r1, r6
   134a8:	4620      	mov	r0, r4
   134aa:	2200      	movs	r2, #0
   134ac:	f00f fcc1 	bl	22e32 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   134b0:	4631      	mov	r1, r6
   134b2:	4620      	mov	r0, r4
   134b4:	2201      	movs	r2, #1
   134b6:	f00f fccd 	bl	22e54 <set_chunk_used>

	free_list_add(h, chunk0_size);
   134ba:	4629      	mov	r1, r5
}
   134bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   134c0:	f00f bdbd 	b.w	2303e <free_list_add>
		h->buckets[i].next = 0;
   134c4:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   134c8:	3301      	adds	r3, #1
   134ca:	e7cf      	b.n	1346c <sys_heap_init+0xac>
   134cc:	00027d1d 	.word	0x00027d1d
   134d0:	00027c9a 	.word	0x00027c9a

000134d4 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
   134d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
   134d6:	2200      	movs	r2, #0
   134d8:	e9c0 2200 	strd	r2, r2, [r0]
   134dc:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   134de:	784a      	ldrb	r2, [r1, #1]
   134e0:	2a25      	cmp	r2, #37	; 0x25
{
   134e2:	4603      	mov	r3, r0
	if (*sp == '%') {
   134e4:	d033      	beq.n	1354e <extract_conversion+0x7a>
	++sp;
   134e6:	3101      	adds	r1, #1
   134e8:	460c      	mov	r4, r1
		switch (*sp) {
   134ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   134ee:	2a2b      	cmp	r2, #43	; 0x2b
   134f0:	d03d      	beq.n	1356e <extract_conversion+0x9a>
   134f2:	d82f      	bhi.n	13554 <extract_conversion+0x80>
   134f4:	2a20      	cmp	r2, #32
   134f6:	d03e      	beq.n	13576 <extract_conversion+0xa2>
   134f8:	2a23      	cmp	r2, #35	; 0x23
   134fa:	d040      	beq.n	1357e <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
   134fc:	781a      	ldrb	r2, [r3, #0]
   134fe:	f002 0144 	and.w	r1, r2, #68	; 0x44
   13502:	2944      	cmp	r1, #68	; 0x44
   13504:	d102      	bne.n	1350c <extract_conversion+0x38>
		conv->flag_zero = false;
   13506:	f36f 1286 	bfc	r2, #6, #1
   1350a:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
   1350c:	7822      	ldrb	r2, [r4, #0]
   1350e:	2a2a      	cmp	r2, #42	; 0x2a
   13510:	d14c      	bne.n	135ac <extract_conversion+0xd8>
		conv->width_present = true;
   13512:	881a      	ldrh	r2, [r3, #0]
   13514:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
   13518:	1c60      	adds	r0, r4, #1
   1351a:	801a      	strh	r2, [r3, #0]
	if (*sp != '.') {
   1351c:	7802      	ldrb	r2, [r0, #0]
   1351e:	2a2e      	cmp	r2, #46	; 0x2e
   13520:	d14f      	bne.n	135c2 <extract_conversion+0xee>
	if (*sp == '*') {
   13522:	7842      	ldrb	r2, [r0, #1]
   13524:	2a2a      	cmp	r2, #42	; 0x2a
   13526:	d045      	beq.n	135b4 <extract_conversion+0xe0>
   13528:	3001      	adds	r0, #1
	const char *sp = *str;
   1352a:	4605      	mov	r5, r0
	size_t val = 0;
   1352c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1352e:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   13530:	4601      	mov	r1, r0
   13532:	f811 4b01 	ldrb.w	r4, [r1], #1
   13536:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1353a:	2e09      	cmp	r6, #9
   1353c:	d953      	bls.n	135e6 <extract_conversion+0x112>
	if (sp != wp) {
   1353e:	42a8      	cmp	r0, r5
		conv->prec_present = true;
   13540:	bf1f      	itttt	ne
   13542:	7859      	ldrbne	r1, [r3, #1]
		conv->prec_value = prec;
   13544:	609a      	strne	r2, [r3, #8]
		conv->prec_present = true;
   13546:	f041 0102 	orrne.w	r1, r1, #2
   1354a:	7059      	strbne	r1, [r3, #1]
		if (prec != conv->prec_value) {
   1354c:	e039      	b.n	135c2 <extract_conversion+0xee>
		conv->specifier = *sp++;
   1354e:	1c88      	adds	r0, r1, #2
   13550:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   13552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
   13554:	2a2d      	cmp	r2, #45	; 0x2d
   13556:	d005      	beq.n	13564 <extract_conversion+0x90>
   13558:	2a30      	cmp	r2, #48	; 0x30
   1355a:	d1cf      	bne.n	134fc <extract_conversion+0x28>
			conv->flag_zero = true;
   1355c:	781a      	ldrb	r2, [r3, #0]
   1355e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13562:	e002      	b.n	1356a <extract_conversion+0x96>
			conv->flag_dash = true;
   13564:	781a      	ldrb	r2, [r3, #0]
   13566:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
   1356a:	701a      	strb	r2, [r3, #0]
			break;
   1356c:	e7bc      	b.n	134e8 <extract_conversion+0x14>
			conv->flag_plus = true;
   1356e:	781a      	ldrb	r2, [r3, #0]
   13570:	f042 0208 	orr.w	r2, r2, #8
   13574:	e7f9      	b.n	1356a <extract_conversion+0x96>
			conv->flag_space = true;
   13576:	781a      	ldrb	r2, [r3, #0]
   13578:	f042 0210 	orr.w	r2, r2, #16
   1357c:	e7f5      	b.n	1356a <extract_conversion+0x96>
			conv->flag_hash = true;
   1357e:	781a      	ldrb	r2, [r3, #0]
   13580:	f042 0220 	orr.w	r2, r2, #32
   13584:	e7f1      	b.n	1356a <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
   13586:	fb07 5202 	mla	r2, r7, r2, r5
   1358a:	3a30      	subs	r2, #48	; 0x30
   1358c:	4608      	mov	r0, r1
   1358e:	4601      	mov	r1, r0
   13590:	f811 5b01 	ldrb.w	r5, [r1], #1
   13594:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   13598:	2e09      	cmp	r6, #9
   1359a:	d9f4      	bls.n	13586 <extract_conversion+0xb2>
	if (sp != wp) {
   1359c:	4284      	cmp	r4, r0
		conv->width_present = true;
   1359e:	bf1f      	itttt	ne
   135a0:	7819      	ldrbne	r1, [r3, #0]
		conv->width_value = width;
   135a2:	605a      	strne	r2, [r3, #4]
		conv->width_present = true;
   135a4:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
   135a8:	7019      	strbne	r1, [r3, #0]
		if (width != conv->width_value) {
   135aa:	e7b7      	b.n	1351c <extract_conversion+0x48>
   135ac:	4620      	mov	r0, r4
	size_t val = 0;
   135ae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   135b0:	270a      	movs	r7, #10
   135b2:	e7ec      	b.n	1358e <extract_conversion+0xba>
		conv->prec_present = true;
   135b4:	785a      	ldrb	r2, [r3, #1]
   135b6:	f022 0206 	bic.w	r2, r2, #6
   135ba:	f042 0206 	orr.w	r2, r2, #6
   135be:	705a      	strb	r2, [r3, #1]
		return ++sp;
   135c0:	3002      	adds	r0, #2
	switch (*sp) {
   135c2:	4601      	mov	r1, r0
   135c4:	f811 4b01 	ldrb.w	r4, [r1], #1
   135c8:	2c6c      	cmp	r4, #108	; 0x6c
   135ca:	d03c      	beq.n	13646 <extract_conversion+0x172>
   135cc:	d810      	bhi.n	135f0 <extract_conversion+0x11c>
   135ce:	2c68      	cmp	r4, #104	; 0x68
   135d0:	d015      	beq.n	135fe <extract_conversion+0x12a>
   135d2:	2c6a      	cmp	r4, #106	; 0x6a
   135d4:	d03f      	beq.n	13656 <extract_conversion+0x182>
   135d6:	2c4c      	cmp	r4, #76	; 0x4c
   135d8:	d042      	beq.n	13660 <extract_conversion+0x18c>
		conv->length_mod = LENGTH_NONE;
   135da:	785a      	ldrb	r2, [r3, #1]
   135dc:	f36f 02c6 	bfc	r2, #3, #4
   135e0:	705a      	strb	r2, [r3, #1]
		break;
   135e2:	4601      	mov	r1, r0
   135e4:	e014      	b.n	13610 <extract_conversion+0x13c>
		val = 10U * val + *sp++ - '0';
   135e6:	fb07 4202 	mla	r2, r7, r2, r4
   135ea:	3a30      	subs	r2, #48	; 0x30
   135ec:	4608      	mov	r0, r1
   135ee:	e79f      	b.n	13530 <extract_conversion+0x5c>
	switch (*sp) {
   135f0:	2c74      	cmp	r4, #116	; 0x74
   135f2:	785a      	ldrb	r2, [r3, #1]
   135f4:	d032      	beq.n	1365c <extract_conversion+0x188>
   135f6:	2c7a      	cmp	r4, #122	; 0x7a
   135f8:	d1ef      	bne.n	135da <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
   135fa:	2006      	movs	r0, #6
   135fc:	e01f      	b.n	1363e <extract_conversion+0x16a>
		if (*++sp == 'h') {
   135fe:	7842      	ldrb	r2, [r0, #1]
   13600:	2a68      	cmp	r2, #104	; 0x68
   13602:	785a      	ldrb	r2, [r3, #1]
   13604:	d11a      	bne.n	1363c <extract_conversion+0x168>
			conv->length_mod = LENGTH_HH;
   13606:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   13608:	f361 02c6 	bfi	r2, r1, #3, #4
   1360c:	705a      	strb	r2, [r3, #1]
			++sp;
   1360e:	1c81      	adds	r1, r0, #2
	conv->specifier = *sp++;
   13610:	4608      	mov	r0, r1
   13612:	f810 4b01 	ldrb.w	r4, [r0], #1
   13616:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
   13618:	2c78      	cmp	r4, #120	; 0x78
   1361a:	f200 80ac 	bhi.w	13776 <extract_conversion+0x2a2>
   1361e:	2c57      	cmp	r4, #87	; 0x57
   13620:	d829      	bhi.n	13676 <extract_conversion+0x1a2>
   13622:	2c41      	cmp	r4, #65	; 0x41
   13624:	d003      	beq.n	1362e <extract_conversion+0x15a>
   13626:	3c45      	subs	r4, #69	; 0x45
   13628:	2c02      	cmp	r4, #2
   1362a:	f200 80a4 	bhi.w	13776 <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
   1362e:	789a      	ldrb	r2, [r3, #2]
   13630:	2104      	movs	r1, #4
   13632:	f361 0202 	bfi	r2, r1, #0, #3
   13636:	709a      	strb	r2, [r3, #2]
			unsupported = true;
   13638:	2201      	movs	r2, #1
			break;
   1363a:	e078      	b.n	1372e <extract_conversion+0x25a>
			conv->length_mod = LENGTH_H;
   1363c:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
   1363e:	f360 02c6 	bfi	r2, r0, #3, #4
   13642:	705a      	strb	r2, [r3, #1]
   13644:	e7e4      	b.n	13610 <extract_conversion+0x13c>
		if (*++sp == 'l') {
   13646:	7842      	ldrb	r2, [r0, #1]
   13648:	2a6c      	cmp	r2, #108	; 0x6c
   1364a:	785a      	ldrb	r2, [r3, #1]
   1364c:	d101      	bne.n	13652 <extract_conversion+0x17e>
			conv->length_mod = LENGTH_LL;
   1364e:	2104      	movs	r1, #4
   13650:	e7da      	b.n	13608 <extract_conversion+0x134>
			conv->length_mod = LENGTH_L;
   13652:	2003      	movs	r0, #3
   13654:	e7f3      	b.n	1363e <extract_conversion+0x16a>
		conv->length_mod = LENGTH_J;
   13656:	785a      	ldrb	r2, [r3, #1]
   13658:	2005      	movs	r0, #5
   1365a:	e7f0      	b.n	1363e <extract_conversion+0x16a>
		conv->length_mod = LENGTH_T;
   1365c:	2007      	movs	r0, #7
   1365e:	e7ee      	b.n	1363e <extract_conversion+0x16a>
		conv->unsupported = true;
   13660:	881a      	ldrh	r2, [r3, #0]
   13662:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   13666:	f022 0202 	bic.w	r2, r2, #2
   1366a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1366e:	f042 0202 	orr.w	r2, r2, #2
   13672:	801a      	strh	r2, [r3, #0]
		break;
   13674:	e7cc      	b.n	13610 <extract_conversion+0x13c>
   13676:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
   1367a:	2a20      	cmp	r2, #32
   1367c:	d87b      	bhi.n	13776 <extract_conversion+0x2a2>
   1367e:	a101      	add	r1, pc, #4	; (adr r1, 13684 <extract_conversion+0x1b0>)
   13680:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   13684:	0001373f 	.word	0x0001373f
   13688:	00013777 	.word	0x00013777
   1368c:	00013777 	.word	0x00013777
   13690:	00013777 	.word	0x00013777
   13694:	00013777 	.word	0x00013777
   13698:	00013777 	.word	0x00013777
   1369c:	00013777 	.word	0x00013777
   136a0:	00013777 	.word	0x00013777
   136a4:	00013777 	.word	0x00013777
   136a8:	0001362f 	.word	0x0001362f
   136ac:	00013777 	.word	0x00013777
   136b0:	0001373f 	.word	0x0001373f
   136b4:	00013709 	.word	0x00013709
   136b8:	0001362f 	.word	0x0001362f
   136bc:	0001362f 	.word	0x0001362f
   136c0:	0001362f 	.word	0x0001362f
   136c4:	00013777 	.word	0x00013777
   136c8:	00013709 	.word	0x00013709
   136cc:	00013777 	.word	0x00013777
   136d0:	00013777 	.word	0x00013777
   136d4:	00013777 	.word	0x00013777
   136d8:	00013777 	.word	0x00013777
   136dc:	00013745 	.word	0x00013745
   136e0:	0001373f 	.word	0x0001373f
   136e4:	0001375f 	.word	0x0001375f
   136e8:	00013777 	.word	0x00013777
   136ec:	00013777 	.word	0x00013777
   136f0:	0001375f 	.word	0x0001375f
   136f4:	00013777 	.word	0x00013777
   136f8:	0001373f 	.word	0x0001373f
   136fc:	00013777 	.word	0x00013777
   13700:	00013777 	.word	0x00013777
   13704:	0001373f 	.word	0x0001373f
		conv->specifier_cat = SPECIFIER_SINT;
   13708:	789a      	ldrb	r2, [r3, #2]
   1370a:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   1370c:	f361 0202 	bfi	r2, r1, #0, #3
   13710:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   13712:	785a      	ldrb	r2, [r3, #1]
   13714:	f002 0278 	and.w	r2, r2, #120	; 0x78
   13718:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
   1371a:	bf02      	ittt	eq
   1371c:	7819      	ldrbeq	r1, [r3, #0]
   1371e:	f041 0101 	orreq.w	r1, r1, #1
   13722:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
   13724:	2c63      	cmp	r4, #99	; 0x63
   13726:	d12a      	bne.n	1377e <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
   13728:	3a00      	subs	r2, #0
   1372a:	bf18      	it	ne
   1372c:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
   1372e:	7819      	ldrb	r1, [r3, #0]
   13730:	f3c1 0440 	ubfx	r4, r1, #1, #1
   13734:	4322      	orrs	r2, r4
   13736:	f362 0141 	bfi	r1, r2, #1, #1
   1373a:	7019      	strb	r1, [r3, #0]
	return sp;
   1373c:	e709      	b.n	13552 <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
   1373e:	789a      	ldrb	r2, [r3, #2]
   13740:	2102      	movs	r1, #2
   13742:	e7e3      	b.n	1370c <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
   13744:	789a      	ldrb	r2, [r3, #2]
   13746:	2103      	movs	r1, #3
   13748:	f361 0202 	bfi	r2, r1, #0, #3
   1374c:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1374e:	785a      	ldrb	r2, [r3, #1]
   13750:	f002 0278 	and.w	r2, r2, #120	; 0x78
   13754:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
   13758:	424a      	negs	r2, r1
   1375a:	414a      	adcs	r2, r1
   1375c:	e7e7      	b.n	1372e <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
   1375e:	789a      	ldrb	r2, [r3, #2]
   13760:	2103      	movs	r1, #3
   13762:	f361 0202 	bfi	r2, r1, #0, #3
   13766:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
   13768:	785a      	ldrb	r2, [r3, #1]
   1376a:	f012 0f78 	tst.w	r2, #120	; 0x78
   1376e:	bf14      	ite	ne
   13770:	2201      	movne	r2, #1
   13772:	2200      	moveq	r2, #0
   13774:	e7db      	b.n	1372e <extract_conversion+0x25a>
		conv->invalid = true;
   13776:	781a      	ldrb	r2, [r3, #0]
   13778:	f042 0201 	orr.w	r2, r2, #1
   1377c:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
   1377e:	2200      	movs	r2, #0
   13780:	e7d5      	b.n	1372e <extract_conversion+0x25a>
   13782:	bf00      	nop

00013784 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   13784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13788:	4680      	mov	r8, r0
   1378a:	b08f      	sub	sp, #60	; 0x3c
   1378c:	4689      	mov	r9, r1
   1378e:	4692      	mov	sl, r2
   13790:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   13792:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13794:	f89a 0000 	ldrb.w	r0, [sl]
   13798:	b908      	cbnz	r0, 1379e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1379a:	4628      	mov	r0, r5
   1379c:	e10b      	b.n	139b6 <cbvprintf+0x232>
		if (*fp != '%') {
   1379e:	2825      	cmp	r0, #37	; 0x25
   137a0:	d009      	beq.n	137b6 <cbvprintf+0x32>
			OUTC(*fp++);
   137a2:	4649      	mov	r1, r9
   137a4:	47c0      	blx	r8
   137a6:	2800      	cmp	r0, #0
   137a8:	f2c0 8105 	blt.w	139b6 <cbvprintf+0x232>
   137ac:	f10a 0301 	add.w	r3, sl, #1
   137b0:	9302      	str	r3, [sp, #8]
			OUTC('%');
   137b2:	3501      	adds	r5, #1
			break;
   137b4:	e059      	b.n	1386a <cbvprintf+0xe6>
		fp = extract_conversion(&conv, sp);
   137b6:	4651      	mov	r1, sl
   137b8:	a805      	add	r0, sp, #20
   137ba:	f7ff fe8b 	bl	134d4 <extract_conversion>
		if (conv.width_star) {
   137be:	f89d 3015 	ldrb.w	r3, [sp, #21]
		fp = extract_conversion(&conv, sp);
   137c2:	9002      	str	r0, [sp, #8]
		if (conv.width_star) {
   137c4:	07d9      	lsls	r1, r3, #31
   137c6:	d51a      	bpl.n	137fe <cbvprintf+0x7a>
			width = va_arg(ap, int);
   137c8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (width < 0) {
   137cc:	2f00      	cmp	r7, #0
   137ce:	da06      	bge.n	137de <cbvprintf+0x5a>
				conv.flag_dash = true;
   137d0:	f89d 2014 	ldrb.w	r2, [sp, #20]
   137d4:	f042 0204 	orr.w	r2, r2, #4
   137d8:	f88d 2014 	strb.w	r2, [sp, #20]
				width = -width;
   137dc:	427f      	negs	r7, r7
		if (conv.prec_star) {
   137de:	075a      	lsls	r2, r3, #29
   137e0:	d515      	bpl.n	1380e <cbvprintf+0x8a>
			int arg = va_arg(ap, int);
   137e2:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   137e6:	f1bb 0f00 	cmp.w	fp, #0
   137ea:	da14      	bge.n	13816 <cbvprintf+0x92>
				conv.prec_present = false;
   137ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
   137f0:	f36f 0341 	bfc	r3, #1, #1
   137f4:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
   137f8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   137fc:	e00b      	b.n	13816 <cbvprintf+0x92>
		} else if (conv.width_present) {
   137fe:	f99d 2014 	ldrsb.w	r2, [sp, #20]
   13802:	2a00      	cmp	r2, #0
			width = conv.width_value;
   13804:	bfb4      	ite	lt
   13806:	9f06      	ldrlt	r7, [sp, #24]
		int width = -1;
   13808:	f04f 37ff 	movge.w	r7, #4294967295	; 0xffffffff
   1380c:	e7e7      	b.n	137de <cbvprintf+0x5a>
		} else if (conv.prec_present) {
   1380e:	079b      	lsls	r3, r3, #30
   13810:	d5f2      	bpl.n	137f8 <cbvprintf+0x74>
			precision = conv.prec_value;
   13812:	f8dd b01c 	ldr.w	fp, [sp, #28]
			= (enum specifier_cat_enum)conv.specifier_cat;
   13816:	f89d 3016 	ldrb.w	r3, [sp, #22]
			= (enum length_mod_enum)conv.length_mod;
   1381a:	f89d c015 	ldrb.w	ip, [sp, #21]
		enum specifier_cat_enum specifier_cat
   1381e:	f003 0307 	and.w	r3, r3, #7
		conv.pad0_value = 0;
   13822:	2100      	movs	r1, #0
		if (specifier_cat == SPECIFIER_SINT) {
   13824:	2b01      	cmp	r3, #1
		conv.pad0_pre_exp = 0;
   13826:	e9cd 1106 	strd	r1, r1, [sp, #24]
			= (enum length_mod_enum)conv.length_mod;
   1382a:	f3cc 0cc3 	ubfx	ip, ip, #3, #4
		union argument_value value = (union argument_value){
   1382e:	468e      	mov	lr, r1
		if (specifier_cat == SPECIFIER_SINT) {
   13830:	d130      	bne.n	13894 <cbvprintf+0x110>
			switch (length_mod) {
   13832:	f1ac 0303 	sub.w	r3, ip, #3
   13836:	2b04      	cmp	r3, #4
   13838:	d81a      	bhi.n	13870 <cbvprintf+0xec>
   1383a:	e8df f003 	tbb	[pc, r3]
   1383e:	3b03      	.short	0x3b03
   13840:	193b      	.short	0x193b
   13842:	19          	.byte	0x19
   13843:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   13844:	f854 1b04 	ldr.w	r1, [r4], #4
   13848:	17cb      	asrs	r3, r1, #31
				value.sint = (short)value.sint;
   1384a:	469e      	mov	lr, r3
		if (conv.invalid || conv.unsupported) {
   1384c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13850:	f013 0603 	ands.w	r6, r3, #3
   13854:	d050      	beq.n	138f8 <cbvprintf+0x174>
			OUTS(sp, fp);
   13856:	9b02      	ldr	r3, [sp, #8]
   13858:	4652      	mov	r2, sl
   1385a:	4649      	mov	r1, r9
   1385c:	4640      	mov	r0, r8
   1385e:	f00f fcb2 	bl	231c6 <outs>
   13862:	2800      	cmp	r0, #0
   13864:	f2c0 80a7 	blt.w	139b6 <cbvprintf+0x232>
   13868:	4405      	add	r5, r0
			OUTS(bps, bpe);
   1386a:	f8dd a008 	ldr.w	sl, [sp, #8]
   1386e:	e791      	b.n	13794 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13870:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
   13874:	f1bc 0f01 	cmp.w	ip, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13878:	ea4f 73e1 	mov.w	r3, r1, asr #31
				value.sint =
   1387c:	469e      	mov	lr, r3
			if (length_mod == LENGTH_HH) {
   1387e:	d102      	bne.n	13886 <cbvprintf+0x102>
				value.uint = (unsigned char)value.uint;
   13880:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   13884:	e013      	b.n	138ae <cbvprintf+0x12a>
			} else if (length_mod == LENGTH_H) {
   13886:	f1bc 0f02 	cmp.w	ip, #2
   1388a:	d1df      	bne.n	1384c <cbvprintf+0xc8>
				value.sint = (short)value.sint;
   1388c:	b20a      	sxth	r2, r1
   1388e:	17d3      	asrs	r3, r2, #31
   13890:	4611      	mov	r1, r2
   13892:	e7da      	b.n	1384a <cbvprintf+0xc6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   13894:	2b02      	cmp	r3, #2
   13896:	d122      	bne.n	138de <cbvprintf+0x15a>
			switch (length_mod) {
   13898:	f1ac 0303 	sub.w	r3, ip, #3
   1389c:	2b04      	cmp	r3, #4
   1389e:	d812      	bhi.n	138c6 <cbvprintf+0x142>
   138a0:	e8df f003 	tbb	[pc, r3]
   138a4:	11080803 	.word	0x11080803
   138a8:	11          	.byte	0x11
   138a9:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   138aa:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint = (unsigned short)value.uint;
   138ae:	f04f 0e00 	mov.w	lr, #0
   138b2:	e7cb      	b.n	1384c <cbvprintf+0xc8>
					(uint_value_type)va_arg(ap,
   138b4:	1de3      	adds	r3, r4, #7
   138b6:	f023 0307 	bic.w	r3, r3, #7
   138ba:	461c      	mov	r4, r3
				value.uint =
   138bc:	f8d3 e004 	ldr.w	lr, [r3, #4]
   138c0:	f854 1b08 	ldr.w	r1, [r4], #8
				break;
   138c4:	e7c2      	b.n	1384c <cbvprintf+0xc8>
			if (length_mod == LENGTH_HH) {
   138c6:	f1bc 0f01 	cmp.w	ip, #1
					(uint_value_type)va_arg(ap, size_t);
   138ca:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint =
   138ce:	f04f 0e00 	mov.w	lr, #0
			if (length_mod == LENGTH_HH) {
   138d2:	d0d5      	beq.n	13880 <cbvprintf+0xfc>
			} else if (length_mod == LENGTH_H) {
   138d4:	f1bc 0f02 	cmp.w	ip, #2
   138d8:	d1b8      	bne.n	1384c <cbvprintf+0xc8>
				value.uint = (unsigned short)value.uint;
   138da:	b289      	uxth	r1, r1
   138dc:	e7e7      	b.n	138ae <cbvprintf+0x12a>
		} else if (specifier_cat == SPECIFIER_FP) {
   138de:	2b04      	cmp	r3, #4
   138e0:	d105      	bne.n	138ee <cbvprintf+0x16a>
			if (length_mod == LENGTH_UPPER_L) {
   138e2:	3407      	adds	r4, #7
   138e4:	f024 0407 	bic.w	r4, r4, #7
   138e8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   138ec:	e7d0      	b.n	13890 <cbvprintf+0x10c>
		} else if (specifier_cat == SPECIFIER_PTR) {
   138ee:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   138f0:	bf08      	it	eq
   138f2:	f854 1b04 	ldreq.w	r1, [r4], #4
   138f6:	e7a9      	b.n	1384c <cbvprintf+0xc8>
		switch (conv.specifier) {
   138f8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   138fc:	2878      	cmp	r0, #120	; 0x78
   138fe:	d8b4      	bhi.n	1386a <cbvprintf+0xe6>
   13900:	2862      	cmp	r0, #98	; 0x62
   13902:	d821      	bhi.n	13948 <cbvprintf+0x1c4>
   13904:	2825      	cmp	r0, #37	; 0x25
   13906:	d051      	beq.n	139ac <cbvprintf+0x228>
   13908:	2858      	cmp	r0, #88	; 0x58
   1390a:	d1ae      	bne.n	1386a <cbvprintf+0xe6>
			bps = encode_uint(value.uint, &conv, buf, bpe);
   1390c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13910:	9300      	str	r3, [sp, #0]
   13912:	4608      	mov	r0, r1
   13914:	ab08      	add	r3, sp, #32
   13916:	aa05      	add	r2, sp, #20
   13918:	4671      	mov	r1, lr
   1391a:	f00f fc09 	bl	23130 <encode_uint>
   1391e:	4682      	mov	sl, r0
			if (precision >= 0) {
   13920:	f1bb 0f00 	cmp.w	fp, #0
   13924:	f10d 0136 	add.w	r1, sp, #54	; 0x36
   13928:	db0c      	blt.n	13944 <cbvprintf+0x1c0>
				conv.flag_zero = false;
   1392a:	f89d 2014 	ldrb.w	r2, [sp, #20]
				size_t len = bpe - bps;
   1392e:	eba1 030a 	sub.w	r3, r1, sl
				conv.flag_zero = false;
   13932:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   13936:	459b      	cmp	fp, r3
				conv.flag_zero = false;
   13938:	f88d 2014 	strb.w	r2, [sp, #20]
				if (len < (size_t)precision) {
   1393c:	d902      	bls.n	13944 <cbvprintf+0x1c0>
					conv.pad0_value = precision - (int)len;
   1393e:	ebab 0303 	sub.w	r3, fp, r3
   13942:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
   13944:	468b      	mov	fp, r1
   13946:	e048      	b.n	139da <cbvprintf+0x256>
   13948:	3863      	subs	r0, #99	; 0x63
   1394a:	2815      	cmp	r0, #21
   1394c:	d88d      	bhi.n	1386a <cbvprintf+0xe6>
   1394e:	a201      	add	r2, pc, #4	; (adr r2, 13954 <cbvprintf+0x1d0>)
   13950:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   13954:	000139e3 	.word	0x000139e3
   13958:	00013a41 	.word	0x00013a41
   1395c:	0001386b 	.word	0x0001386b
   13960:	0001386b 	.word	0x0001386b
   13964:	0001386b 	.word	0x0001386b
   13968:	0001386b 	.word	0x0001386b
   1396c:	00013a41 	.word	0x00013a41
   13970:	0001386b 	.word	0x0001386b
   13974:	0001386b 	.word	0x0001386b
   13978:	0001386b 	.word	0x0001386b
   1397c:	0001386b 	.word	0x0001386b
   13980:	00013a9b 	.word	0x00013a9b
   13984:	00013a69 	.word	0x00013a69
   13988:	00013a6d 	.word	0x00013a6d
   1398c:	0001386b 	.word	0x0001386b
   13990:	0001386b 	.word	0x0001386b
   13994:	000139bd 	.word	0x000139bd
   13998:	0001386b 	.word	0x0001386b
   1399c:	00013a69 	.word	0x00013a69
   139a0:	0001386b 	.word	0x0001386b
   139a4:	0001386b 	.word	0x0001386b
   139a8:	00013a69 	.word	0x00013a69
			OUTC('%');
   139ac:	4649      	mov	r1, r9
   139ae:	47c0      	blx	r8
   139b0:	2800      	cmp	r0, #0
   139b2:	f6bf aefe 	bge.w	137b2 <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   139b6:	b00f      	add	sp, #60	; 0x3c
   139b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = strlen(bps);
   139bc:	4608      	mov	r0, r1
			bps = (const char *)value.ptr;
   139be:	468a      	mov	sl, r1
			size_t len = strlen(bps);
   139c0:	9103      	str	r1, [sp, #12]
   139c2:	f011 f84d 	bl	24a60 <strlen>
			if ((precision >= 0)
   139c6:	f1bb 0f00 	cmp.w	fp, #0
   139ca:	9903      	ldr	r1, [sp, #12]
   139cc:	db02      	blt.n	139d4 <cbvprintf+0x250>
   139ce:	4558      	cmp	r0, fp
   139d0:	bf28      	it	cs
   139d2:	4658      	movcs	r0, fp
			bpe = bps + len;
   139d4:	eb01 0b00 	add.w	fp, r1, r0
		char sign = 0;
   139d8:	2600      	movs	r6, #0
		if (bps == NULL) {
   139da:	f1ba 0f00 	cmp.w	sl, #0
   139de:	d107      	bne.n	139f0 <cbvprintf+0x26c>
   139e0:	e743      	b.n	1386a <cbvprintf+0xe6>
			buf[0] = value.uint;
   139e2:	f88d 1020 	strb.w	r1, [sp, #32]
			break;
   139e6:	2600      	movs	r6, #0
			bpe = buf + 1;
   139e8:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
   139ec:	f10d 0a20 	add.w	sl, sp, #32
		size_t nj_len = (bpe - bps);
   139f0:	ebab 030a 	sub.w	r3, fp, sl
		if (sign != 0) {
   139f4:	b106      	cbz	r6, 139f8 <cbvprintf+0x274>
			nj_len += 1U;
   139f6:	3301      	adds	r3, #1
		if (conv.altform_0c) {
   139f8:	f89d 2016 	ldrb.w	r2, [sp, #22]
   139fc:	06d0      	lsls	r0, r2, #27
   139fe:	d567      	bpl.n	13ad0 <cbvprintf+0x34c>
			nj_len += 2U;
   13a00:	3302      	adds	r3, #2
		if (conv.pad_fp) {
   13a02:	0652      	lsls	r2, r2, #25
		nj_len += conv.pad0_value;
   13a04:	9906      	ldr	r1, [sp, #24]
			nj_len += conv.pad0_pre_exp;
   13a06:	bf48      	it	mi
   13a08:	9a07      	ldrmi	r2, [sp, #28]
		nj_len += conv.pad0_value;
   13a0a:	440b      	add	r3, r1
			nj_len += conv.pad0_pre_exp;
   13a0c:	bf48      	it	mi
   13a0e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   13a10:	2f00      	cmp	r7, #0
   13a12:	dd70      	ble.n	13af6 <cbvprintf+0x372>
			if (!conv.flag_dash) {
   13a14:	f89d 2014 	ldrb.w	r2, [sp, #20]
			width -= (int)nj_len;
   13a18:	1aff      	subs	r7, r7, r3
			if (!conv.flag_dash) {
   13a1a:	f3c2 0380 	ubfx	r3, r2, #2, #1
   13a1e:	9303      	str	r3, [sp, #12]
   13a20:	0753      	lsls	r3, r2, #29
   13a22:	d468      	bmi.n	13af6 <cbvprintf+0x372>
				if (conv.flag_zero) {
   13a24:	0650      	lsls	r0, r2, #25
   13a26:	f140 80a3 	bpl.w	13b70 <cbvprintf+0x3ec>
					if (sign != 0) {
   13a2a:	b13e      	cbz	r6, 13a3c <cbvprintf+0x2b8>
						OUTC(sign);
   13a2c:	4649      	mov	r1, r9
   13a2e:	4630      	mov	r0, r6
   13a30:	47c0      	blx	r8
   13a32:	2800      	cmp	r0, #0
   13a34:	dbbf      	blt.n	139b6 <cbvprintf+0x232>
						sign = 0;
   13a36:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   13a38:	3501      	adds	r5, #1
						sign = 0;
   13a3a:	461e      	mov	r6, r3
					pad = '0';
   13a3c:	2330      	movs	r3, #48	; 0x30
   13a3e:	e098      	b.n	13b72 <cbvprintf+0x3ee>
			if (conv.flag_plus) {
   13a40:	071e      	lsls	r6, r3, #28
   13a42:	d40f      	bmi.n	13a64 <cbvprintf+0x2e0>
				sign = ' ';
   13a44:	f013 0610 	ands.w	r6, r3, #16
   13a48:	bf18      	it	ne
   13a4a:	2620      	movne	r6, #32
			if (value.sint < 0) {
   13a4c:	2900      	cmp	r1, #0
   13a4e:	f17e 0000 	sbcs.w	r0, lr, #0
   13a52:	f6bf af5b 	bge.w	1390c <cbvprintf+0x188>
				value.uint = -value.sint;
   13a56:	424a      	negs	r2, r1
   13a58:	eb6e 034e 	sbc.w	r3, lr, lr, lsl #1
   13a5c:	4611      	mov	r1, r2
   13a5e:	469e      	mov	lr, r3
				sign = '-';
   13a60:	262d      	movs	r6, #45	; 0x2d
   13a62:	e753      	b.n	1390c <cbvprintf+0x188>
				sign = '+';
   13a64:	262b      	movs	r6, #43	; 0x2b
   13a66:	e7f1      	b.n	13a4c <cbvprintf+0x2c8>
		switch (conv.specifier) {
   13a68:	2600      	movs	r6, #0
   13a6a:	e74f      	b.n	1390c <cbvprintf+0x188>
			if (value.ptr != NULL) {
   13a6c:	b351      	cbz	r1, 13ac4 <cbvprintf+0x340>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   13a6e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13a72:	9300      	str	r3, [sp, #0]
   13a74:	4608      	mov	r0, r1
   13a76:	ab08      	add	r3, sp, #32
   13a78:	aa05      	add	r2, sp, #20
   13a7a:	2100      	movs	r1, #0
   13a7c:	f00f fb58 	bl	23130 <encode_uint>
				conv.altform_0c = true;
   13a80:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13a84:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   13a88:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   13a8c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   13a90:	4682      	mov	sl, r0
				conv.altform_0c = true;
   13a92:	f8ad 3016 	strh.w	r3, [sp, #22]
		char sign = 0;
   13a96:	2600      	movs	r6, #0
				goto prec_int_pad0;
   13a98:	e742      	b.n	13920 <cbvprintf+0x19c>
	switch ((enum length_mod_enum)conv->length_mod) {
   13a9a:	f1bc 0f07 	cmp.w	ip, #7
   13a9e:	f63f aee4 	bhi.w	1386a <cbvprintf+0xe6>
   13aa2:	e8df f00c 	tbb	[pc, ip]
   13aa6:	040d      	.short	0x040d
   13aa8:	08080d06 	.word	0x08080d06
   13aac:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   13aae:	700d      	strb	r5, [r1, #0]
		break;
   13ab0:	e6db      	b.n	1386a <cbvprintf+0xe6>
		*(short *)dp = (short)count;
   13ab2:	800d      	strh	r5, [r1, #0]
		break;
   13ab4:	e6d9      	b.n	1386a <cbvprintf+0xe6>
		*(intmax_t *)dp = (intmax_t)count;
   13ab6:	462a      	mov	r2, r5
   13ab8:	17eb      	asrs	r3, r5, #31
   13aba:	e9c1 2300 	strd	r2, r3, [r1]
		break;
   13abe:	e6d4      	b.n	1386a <cbvprintf+0xe6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13ac0:	600d      	str	r5, [r1, #0]
		break;
   13ac2:	e6d2      	b.n	1386a <cbvprintf+0xe6>
			bpe = bps + 5;
   13ac4:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 13b88 <cbvprintf+0x404>
   13ac8:	460e      	mov	r6, r1
			bps = "(nil)";
   13aca:	f1ab 0a05 	sub.w	sl, fp, #5
   13ace:	e78f      	b.n	139f0 <cbvprintf+0x26c>
		} else if (conv.altform_0) {
   13ad0:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   13ad2:	bf48      	it	mi
   13ad4:	3301      	addmi	r3, #1
   13ad6:	e794      	b.n	13a02 <cbvprintf+0x27e>
					OUTC(pad);
   13ad8:	4618      	mov	r0, r3
   13ada:	4649      	mov	r1, r9
   13adc:	9303      	str	r3, [sp, #12]
   13ade:	47c0      	blx	r8
   13ae0:	2800      	cmp	r0, #0
   13ae2:	9b03      	ldr	r3, [sp, #12]
   13ae4:	f6ff af67 	blt.w	139b6 <cbvprintf+0x232>
				while (width-- > 0) {
   13ae8:	2f00      	cmp	r7, #0
   13aea:	eba5 0107 	sub.w	r1, r5, r7
   13aee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   13af2:	dcf1      	bgt.n	13ad8 <cbvprintf+0x354>
   13af4:	460d      	mov	r5, r1
		if (sign != 0) {
   13af6:	b136      	cbz	r6, 13b06 <cbvprintf+0x382>
			OUTC(sign);
   13af8:	4649      	mov	r1, r9
   13afa:	4630      	mov	r0, r6
   13afc:	47c0      	blx	r8
   13afe:	2800      	cmp	r0, #0
   13b00:	f6ff af59 	blt.w	139b6 <cbvprintf+0x232>
   13b04:	3501      	adds	r5, #1
			if (conv.altform_0c | conv.altform_0) {
   13b06:	f89d 3016 	ldrb.w	r3, [sp, #22]
   13b0a:	06d9      	lsls	r1, r3, #27
   13b0c:	d401      	bmi.n	13b12 <cbvprintf+0x38e>
   13b0e:	071a      	lsls	r2, r3, #28
   13b10:	d506      	bpl.n	13b20 <cbvprintf+0x39c>
				OUTC('0');
   13b12:	4649      	mov	r1, r9
   13b14:	2030      	movs	r0, #48	; 0x30
   13b16:	47c0      	blx	r8
   13b18:	2800      	cmp	r0, #0
   13b1a:	f6ff af4c 	blt.w	139b6 <cbvprintf+0x232>
   13b1e:	3501      	adds	r5, #1
			if (conv.altform_0c) {
   13b20:	f89d 3016 	ldrb.w	r3, [sp, #22]
   13b24:	06db      	lsls	r3, r3, #27
   13b26:	d507      	bpl.n	13b38 <cbvprintf+0x3b4>
				OUTC(conv.specifier);
   13b28:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13b2c:	4649      	mov	r1, r9
   13b2e:	47c0      	blx	r8
   13b30:	2800      	cmp	r0, #0
   13b32:	f6ff af40 	blt.w	139b6 <cbvprintf+0x232>
   13b36:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13b38:	9e06      	ldr	r6, [sp, #24]
   13b3a:	442e      	add	r6, r5
   13b3c:	1b73      	subs	r3, r6, r5
   13b3e:	2b00      	cmp	r3, #0
   13b40:	dc19      	bgt.n	13b76 <cbvprintf+0x3f2>
			OUTS(bps, bpe);
   13b42:	465b      	mov	r3, fp
   13b44:	4652      	mov	r2, sl
   13b46:	4649      	mov	r1, r9
   13b48:	4640      	mov	r0, r8
   13b4a:	f00f fb3c 	bl	231c6 <outs>
   13b4e:	2800      	cmp	r0, #0
   13b50:	f6ff af31 	blt.w	139b6 <cbvprintf+0x232>
   13b54:	4405      	add	r5, r0
		while (width > 0) {
   13b56:	442f      	add	r7, r5
   13b58:	1b7b      	subs	r3, r7, r5
   13b5a:	2b00      	cmp	r3, #0
   13b5c:	f77f ae85 	ble.w	1386a <cbvprintf+0xe6>
			OUTC(' ');
   13b60:	4649      	mov	r1, r9
   13b62:	2020      	movs	r0, #32
   13b64:	47c0      	blx	r8
   13b66:	2800      	cmp	r0, #0
   13b68:	f6ff af25 	blt.w	139b6 <cbvprintf+0x232>
   13b6c:	3501      	adds	r5, #1
			--width;
   13b6e:	e7f3      	b.n	13b58 <cbvprintf+0x3d4>
				char pad = ' ';
   13b70:	2320      	movs	r3, #32
   13b72:	443d      	add	r5, r7
   13b74:	e7b8      	b.n	13ae8 <cbvprintf+0x364>
				OUTC('0');
   13b76:	4649      	mov	r1, r9
   13b78:	2030      	movs	r0, #48	; 0x30
   13b7a:	47c0      	blx	r8
   13b7c:	2800      	cmp	r0, #0
   13b7e:	f6ff af1a 	blt.w	139b6 <cbvprintf+0x232>
   13b82:	3501      	adds	r5, #1
   13b84:	e7da      	b.n	13b3c <cbvprintf+0x3b8>
   13b86:	bf00      	nop
   13b88:	00027d43 	.word	0x00027d43

00013b8c <log_minimal_hexdump_print>:
	}
	printk("\n");
}

void log_minimal_hexdump_print(int level, const void *_data, size_t size)
{
   13b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b90:	e9cd 0100 	strd	r0, r1, [sp]
	const char *data = (const char *)_data;
	while (size > 0) {
		printk("%c: ", z_log_minimal_level_to_char(level));
   13b94:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13c3c <log_minimal_hexdump_print+0xb0>
			printk("   ");
   13b98:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 13c40 <log_minimal_hexdump_print+0xb4>
{
   13b9c:	4616      	mov	r6, r2
	while (size > 0) {
   13b9e:	4614      	mov	r4, r2
   13ba0:	9b01      	ldr	r3, [sp, #4]
   13ba2:	199d      	adds	r5, r3, r6
   13ba4:	1b2d      	subs	r5, r5, r4
   13ba6:	b914      	cbnz	r4, 13bae <log_minimal_hexdump_print+0x22>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data += HEXDUMP_BYTES_IN_LINE;
	}
}
   13ba8:	b003      	add	sp, #12
   13baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			##__VA_ARGS__);					     \
	} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   13bae:	9b00      	ldr	r3, [sp, #0]
			printk("%02x ", data[i] & 0xFF);
   13bb0:	4f1e      	ldr	r7, [pc, #120]	; (13c2c <log_minimal_hexdump_print+0xa0>)
   13bb2:	3b01      	subs	r3, #1
   13bb4:	2b03      	cmp	r3, #3
   13bb6:	bf96      	itet	ls
   13bb8:	4a1d      	ldrls	r2, [pc, #116]	; (13c30 <log_minimal_hexdump_print+0xa4>)
   13bba:	213f      	movhi	r1, #63	; 0x3f
   13bbc:	5cd1      	ldrbls	r1, [r2, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   13bbe:	4640      	mov	r0, r8
   13bc0:	f00f f8b4 	bl	22d2c <printk>
	for (size_t i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13bc4:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   13bc8:	455c      	cmp	r4, fp
   13bca:	d926      	bls.n	13c1a <log_minimal_hexdump_print+0x8e>
			printk("%02x ", data[i] & 0xFF);
   13bcc:	f815 100b 	ldrb.w	r1, [r5, fp]
   13bd0:	4638      	mov	r0, r7
   13bd2:	f00f f8ab 	bl	22d2c <printk>
	for (size_t i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13bd6:	f10b 0b01 	add.w	fp, fp, #1
   13bda:	f1bb 0f08 	cmp.w	fp, #8
   13bde:	d1f3      	bne.n	13bc8 <log_minimal_hexdump_print+0x3c>
	printk("|");
   13be0:	4814      	ldr	r0, [pc, #80]	; (13c34 <log_minimal_hexdump_print+0xa8>)
			printk(" ");
   13be2:	f8df a060 	ldr.w	sl, [pc, #96]	; 13c44 <log_minimal_hexdump_print+0xb8>
			printk("%c", isprint((int)c) ? c : '.');
   13be6:	f8df b060 	ldr.w	fp, [pc, #96]	; 13c48 <log_minimal_hexdump_print+0xbc>
	printk("|");
   13bea:	f00f f89f 	bl	22d2c <printk>
	for (size_t i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13bee:	2700      	movs	r7, #0
		if (i < length) {
   13bf0:	42bc      	cmp	r4, r7
   13bf2:	d916      	bls.n	13c22 <log_minimal_hexdump_print+0x96>
			char c = data[i];
   13bf4:	5de9      	ldrb	r1, [r5, r7]
	return (int)((((unsigned)c) >= ' ') &&
   13bf6:	f1a1 0220 	sub.w	r2, r1, #32
   13bfa:	2a5f      	cmp	r2, #95	; 0x5f
			printk("%c", isprint((int)c) ? c : '.');
   13bfc:	bf28      	it	cs
   13bfe:	212e      	movcs	r1, #46	; 0x2e
   13c00:	4658      	mov	r0, fp
   13c02:	f00f f893 	bl	22d2c <printk>
	for (size_t i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c06:	3701      	adds	r7, #1
   13c08:	2f08      	cmp	r7, #8
   13c0a:	d1f1      	bne.n	13bf0 <log_minimal_hexdump_print+0x64>
	printk("\n");
   13c0c:	480a      	ldr	r0, [pc, #40]	; (13c38 <log_minimal_hexdump_print+0xac>)
   13c0e:	f00f f88d 	bl	22d2c <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   13c12:	2c07      	cmp	r4, #7
   13c14:	d9c8      	bls.n	13ba8 <log_minimal_hexdump_print+0x1c>
		size -= HEXDUMP_BYTES_IN_LINE;
   13c16:	3c08      	subs	r4, #8
		data += HEXDUMP_BYTES_IN_LINE;
   13c18:	e7c2      	b.n	13ba0 <log_minimal_hexdump_print+0x14>
			printk("   ");
   13c1a:	4648      	mov	r0, r9
   13c1c:	f00f f886 	bl	22d2c <printk>
   13c20:	e7d9      	b.n	13bd6 <log_minimal_hexdump_print+0x4a>
			printk(" ");
   13c22:	4650      	mov	r0, sl
   13c24:	f00f f882 	bl	22d2c <printk>
   13c28:	e7ed      	b.n	13c06 <log_minimal_hexdump_print+0x7a>
   13c2a:	bf00      	nop
   13c2c:	00027d49 	.word	0x00027d49
   13c30:	00027d58 	.word	0x00027d58
   13c34:	00027d53 	.word	0x00027d53
   13c38:	0002a4fd 	.word	0x0002a4fd
   13c3c:	00027d44 	.word	0x00027d44
   13c40:	00027d4f 	.word	0x00027d4f
   13c44:	00027d51 	.word	0x00027d51
   13c48:	00027d55 	.word	0x00027d55

00013c4c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   13c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13c50:	460e      	mov	r6, r1
   13c52:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13c54:	2108      	movs	r1, #8
   13c56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13c58:	f00f fb48 	bl	232ec <nvs_al_size.isra.0>

	*addr -= ate_size;
   13c5c:	6834      	ldr	r4, [r6, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   13c5e:	4b12      	ldr	r3, [pc, #72]	; (13ca8 <nvs_recover_last_ate+0x5c>)
	*addr -= ate_size;
   13c60:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13c62:	4607      	mov	r7, r0
	*addr -= ate_size;
   13c64:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   13c66:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (!nvs_ate_crc8_check(&end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   13c6a:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   13c6c:	42ac      	cmp	r4, r5
   13c6e:	d803      	bhi.n	13c78 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   13c70:	2000      	movs	r0, #0
}
   13c72:	b003      	add	sp, #12
   13c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13c78:	2308      	movs	r3, #8
   13c7a:	466a      	mov	r2, sp
   13c7c:	4621      	mov	r1, r4
   13c7e:	4640      	mov	r0, r8
   13c80:	f00f fac2 	bl	23208 <nvs_flash_rd>
		if (rc) {
   13c84:	2800      	cmp	r0, #0
   13c86:	d1f4      	bne.n	13c72 <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
   13c88:	4668      	mov	r0, sp
   13c8a:	f00f fb1a 	bl	232c2 <nvs_ate_crc8_check>
   13c8e:	b940      	cbnz	r0, 13ca2 <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
   13c90:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   13c94:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   13c98:	6034      	str	r4, [r6, #0]
			data_end_addr &= ADDR_SECT_MASK;
   13c9a:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   13c9e:	4413      	add	r3, r2
   13ca0:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   13ca2:	1be4      	subs	r4, r4, r7
   13ca4:	e7e2      	b.n	13c6c <nvs_recover_last_ate+0x20>
   13ca6:	bf00      	nop
   13ca8:	ffff0000 	.word	0xffff0000

00013cac <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   13cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cb0:	4605      	mov	r5, r0
   13cb2:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13cb4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13cb6:	2108      	movs	r1, #8
   13cb8:	f00f fb18 	bl	232ec <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   13cbc:	686b      	ldr	r3, [r5, #4]
   13cbe:	0c1b      	lsrs	r3, r3, #16
   13cc0:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13cc2:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
   13cc4:	a903      	add	r1, sp, #12
   13cc6:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   13cc8:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   13cca:	f00f fb19 	bl	23300 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   13cce:	9b03      	ldr	r3, [sp, #12]
   13cd0:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13cd2:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   13cd4:	4419      	add	r1, r3
   13cd6:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13cda:	2308      	movs	r3, #8
   13cdc:	4632      	mov	r2, r6
   13cde:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
   13ce0:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13ce2:	f00f fa91 	bl	23208 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   13ce6:	1e04      	subs	r4, r0, #0
   13ce8:	f2c0 8099 	blt.w	13e1e <nvs_gc+0x172>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   13cec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   13cee:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   13cf0:	2300      	movs	r3, #0
		if (data8[i] != value) {
   13cf2:	5cf1      	ldrb	r1, [r6, r3]
   13cf4:	4291      	cmp	r1, r2
   13cf6:	f040 8081 	bne.w	13dfc <nvs_gc+0x150>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   13cfa:	3301      	adds	r3, #1
   13cfc:	2b08      	cmp	r3, #8
   13cfe:	d1f8      	bne.n	13cf2 <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
   13d00:	9903      	ldr	r1, [sp, #12]
   13d02:	4628      	mov	r0, r5
   13d04:	f00f fb07 	bl	23316 <nvs_flash_erase_sector>
   13d08:	4604      	mov	r4, r0
		if (rc) {
   13d0a:	e088      	b.n	13e1e <nvs_gc+0x172>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
   13d0c:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   13d0e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   13d12:	0c1b      	lsrs	r3, r3, #16
   13d14:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   13d16:	4413      	add	r3, r2
   13d18:	9304      	str	r3, [sp, #16]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   13d1a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 13e28 <nvs_gc+0x17c>
		gc_prev_addr = gc_addr;
   13d1e:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   13d22:	aa08      	add	r2, sp, #32
   13d24:	a904      	add	r1, sp, #16
   13d26:	4628      	mov	r0, r5
   13d28:	f00f fb1d 	bl	23366 <nvs_prev_ate>
		if (rc) {
   13d2c:	4604      	mov	r4, r0
   13d2e:	2800      	cmp	r0, #0
   13d30:	d175      	bne.n	13e1e <nvs_gc+0x172>
		if (nvs_ate_crc8_check(&gc_ate)) {
   13d32:	a808      	add	r0, sp, #32
   13d34:	f00f fac5 	bl	232c2 <nvs_ate_crc8_check>
   13d38:	2800      	cmp	r0, #0
   13d3a:	d136      	bne.n	13daa <nvs_gc+0xfe>
		wlk_addr = fs->ate_wra;
   13d3c:	686b      	ldr	r3, [r5, #4]
   13d3e:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13d40:	aa0a      	add	r2, sp, #40	; 0x28
   13d42:	a905      	add	r1, sp, #20
   13d44:	4628      	mov	r0, r5
			wlk_prev_addr = wlk_addr;
   13d46:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13d48:	f00f fb0d 	bl	23366 <nvs_prev_ate>
			if (rc) {
   13d4c:	4604      	mov	r4, r0
   13d4e:	2800      	cmp	r0, #0
   13d50:	d165      	bne.n	13e1e <nvs_gc+0x172>
			if ((wlk_ate.id == gc_ate.id) &&
   13d52:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   13d56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13d5a:	429a      	cmp	r2, r3
   13d5c:	d028      	beq.n	13db0 <nvs_gc+0x104>
		} while (wlk_addr != fs->ate_wra);
   13d5e:	686a      	ldr	r2, [r5, #4]
   13d60:	9b05      	ldr	r3, [sp, #20]
   13d62:	429a      	cmp	r2, r3
   13d64:	d1ec      	bne.n	13d40 <nvs_gc+0x94>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   13d66:	4556      	cmp	r6, sl
   13d68:	d11f      	bne.n	13daa <nvs_gc+0xfe>
   13d6a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   13d6e:	b1e3      	cbz	r3, 13daa <nvs_gc+0xfe>
			data_addr += gc_ate.offset;
   13d70:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   13d74:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   13d78:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
   13d7a:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13d7c:	68ab      	ldr	r3, [r5, #8]
   13d7e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   13d82:	f00f faaa 	bl	232da <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   13d86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   13d88:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   13d8c:	681e      	ldr	r6, [r3, #0]
   13d8e:	4276      	negs	r6, r6
	block_size =
   13d90:	f006 0320 	and.w	r3, r6, #32
   13d94:	9301      	str	r3, [sp, #4]
	while (len) {
   13d96:	f1b9 0f00 	cmp.w	r9, #0
   13d9a:	d10f      	bne.n	13dbc <nvs_gc+0x110>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   13d9c:	a908      	add	r1, sp, #32
   13d9e:	4628      	mov	r0, r5
   13da0:	f00f fb79 	bl	23496 <nvs_flash_ate_wrt>
			if (rc) {
   13da4:	4604      	mov	r4, r0
   13da6:	2800      	cmp	r0, #0
   13da8:	d139      	bne.n	13e1e <nvs_gc+0x172>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
   13daa:	45c2      	cmp	sl, r8
   13dac:	d1b7      	bne.n	13d1e <nvs_gc+0x72>
   13dae:	e7a7      	b.n	13d00 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
   13db0:	a80a      	add	r0, sp, #40	; 0x28
   13db2:	f00f fa86 	bl	232c2 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
   13db6:	2800      	cmp	r0, #0
   13db8:	d1d1      	bne.n	13d5e <nvs_gc+0xb2>
   13dba:	e7d4      	b.n	13d66 <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   13dbc:	9b01      	ldr	r3, [sp, #4]
   13dbe:	454b      	cmp	r3, r9
   13dc0:	bf28      	it	cs
   13dc2:	464b      	movcs	r3, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   13dc4:	aa0c      	add	r2, sp, #48	; 0x30
   13dc6:	4639      	mov	r1, r7
   13dc8:	4628      	mov	r0, r5
		bytes_to_copy = MIN(block_size, len);
   13dca:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   13dcc:	f00f fa1c 	bl	23208 <nvs_flash_rd>
		if (rc) {
   13dd0:	4604      	mov	r4, r0
   13dd2:	bb20      	cbnz	r0, 13e1e <nvs_gc+0x172>
	if (!len) {
   13dd4:	b136      	cbz	r6, 13de4 <nvs_gc+0x138>
   13dd6:	68a9      	ldr	r1, [r5, #8]
   13dd8:	4633      	mov	r3, r6
   13dda:	aa0c      	add	r2, sp, #48	; 0x30
   13ddc:	4628      	mov	r0, r5
   13dde:	f00f fb12 	bl	23406 <nvs_flash_al_wrt.part.0>
   13de2:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
   13de4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   13de6:	4631      	mov	r1, r6
   13de8:	f00f fa80 	bl	232ec <nvs_al_size.isra.0>
   13dec:	68aa      	ldr	r2, [r5, #8]
   13dee:	4402      	add	r2, r0
   13df0:	60aa      	str	r2, [r5, #8]
		if (rc) {
   13df2:	b9a4      	cbnz	r4, 13e1e <nvs_gc+0x172>
		len -= bytes_to_copy;
   13df4:	eba9 0906 	sub.w	r9, r9, r6
		addr += bytes_to_copy;
   13df8:	4437      	add	r7, r6
   13dfa:	e7cc      	b.n	13d96 <nvs_gc+0xea>
	stop_addr = gc_addr - ate_size;
   13dfc:	9804      	ldr	r0, [sp, #16]
   13dfe:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
   13e02:	4630      	mov	r0, r6
   13e04:	f00f fa5d 	bl	232c2 <nvs_ate_crc8_check>
   13e08:	2800      	cmp	r0, #0
   13e0a:	f43f af7f 	beq.w	13d0c <nvs_gc+0x60>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   13e0e:	a904      	add	r1, sp, #16
   13e10:	4628      	mov	r0, r5
   13e12:	f7ff ff1b 	bl	13c4c <nvs_recover_last_ate>
		if (rc) {
   13e16:	4604      	mov	r4, r0
   13e18:	2800      	cmp	r0, #0
   13e1a:	f43f af7e 	beq.w	13d1a <nvs_gc+0x6e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
   13e1e:	4620      	mov	r0, r4
   13e20:	b015      	add	sp, #84	; 0x54
   13e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e26:	bf00      	nop
   13e28:	ffff0000 	.word	0xffff0000

00013e2c <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   13e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e30:	4604      	mov	r4, r0
   13e32:	b086      	sub	sp, #24
   13e34:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   13e36:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
   13e3a:	4630      	mov	r0, r6
   13e3c:	f012 fe42 	bl	26ac4 <z_impl_k_mutex_init>
   13e40:	4628      	mov	r0, r5
   13e42:	f00b ffa3 	bl	1fd8c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   13e46:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   13e48:	b948      	cbnz	r0, 13e5e <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
   13e4a:	4889      	ldr	r0, [pc, #548]	; (14070 <nvs_init+0x244>)
   13e4c:	2145      	movs	r1, #69	; 0x45
   13e4e:	f00e ff6d 	bl	22d2c <printk>
		return -ENXIO;
   13e52:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   13e56:	4628      	mov	r0, r5
   13e58:	b006      	add	sp, #24
   13e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   13e5e:	6883      	ldr	r3, [r0, #8]
   13e60:	691b      	ldr	r3, [r3, #16]
   13e62:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   13e64:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   13e66:	b930      	cbnz	r0, 13e76 <nvs_init+0x4a>
		LOG_ERR("Could not obtain flash parameters");
   13e68:	4882      	ldr	r0, [pc, #520]	; (14074 <nvs_init+0x248>)
   13e6a:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Configuration error - sector count");
   13e6c:	f00e ff5e 	bl	22d2c <printk>
		return -EINVAL;
   13e70:	f06f 0515 	mvn.w	r5, #21
   13e74:	e7ef      	b.n	13e56 <nvs_init+0x2a>
	write_block_size = flash_get_write_block_size(fs->flash_device);
   13e76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   13e78:	6883      	ldr	r3, [r0, #8]
   13e7a:	691b      	ldr	r3, [r3, #16]
   13e7c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   13e7e:	6803      	ldr	r3, [r0, #0]
   13e80:	3b01      	subs	r3, #1
   13e82:	2b1f      	cmp	r3, #31
   13e84:	d902      	bls.n	13e8c <nvs_init+0x60>
		LOG_ERR("Unsupported write block size");
   13e86:	487c      	ldr	r0, [pc, #496]	; (14078 <nvs_init+0x24c>)
   13e88:	2145      	movs	r1, #69	; 0x45
   13e8a:	e7ef      	b.n	13e6c <nvs_init+0x40>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   13e8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   13e8e:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   13e90:	aa03      	add	r2, sp, #12
   13e92:	f012 fc64 	bl	2675e <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   13e96:	b110      	cbz	r0, 13e9e <nvs_init+0x72>
		LOG_ERR("Unable to get page info");
   13e98:	4878      	ldr	r0, [pc, #480]	; (1407c <nvs_init+0x250>)
   13e9a:	2145      	movs	r1, #69	; 0x45
   13e9c:	e7e6      	b.n	13e6c <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
   13e9e:	89a3      	ldrh	r3, [r4, #12]
   13ea0:	b12b      	cbz	r3, 13eae <nvs_init+0x82>
   13ea2:	9a04      	ldr	r2, [sp, #16]
   13ea4:	fbb3 f5f2 	udiv	r5, r3, r2
   13ea8:	fb02 3515 	mls	r5, r2, r5, r3
   13eac:	b115      	cbz	r5, 13eb4 <nvs_init+0x88>
		LOG_ERR("Invalid sector size");
   13eae:	4874      	ldr	r0, [pc, #464]	; (14080 <nvs_init+0x254>)
   13eb0:	2145      	movs	r1, #69	; 0x45
   13eb2:	e7db      	b.n	13e6c <nvs_init+0x40>
	if (fs->sector_count < 2) {
   13eb4:	89e3      	ldrh	r3, [r4, #14]
   13eb6:	2b01      	cmp	r3, #1
   13eb8:	d802      	bhi.n	13ec0 <nvs_init+0x94>
		LOG_ERR("Configuration error - sector count");
   13eba:	4872      	ldr	r0, [pc, #456]	; (14084 <nvs_init+0x258>)
   13ebc:	2145      	movs	r1, #69	; 0x45
   13ebe:	e7d5      	b.n	13e6c <nvs_init+0x40>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   13ec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   13ec2:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   13ec4:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ed0:	4630      	mov	r0, r6
   13ed2:	f00c fab9 	bl	20448 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13ed6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13ed8:	2108      	movs	r1, #8
   13eda:	f00f fa07 	bl	232ec <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   13ede:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13ee0:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
   13ee2:	89e3      	ldrh	r3, [r4, #14]
   13ee4:	fa1f fa85 	uxth.w	sl, r5
   13ee8:	4553      	cmp	r3, sl
   13eea:	d865      	bhi.n	13fb8 <nvs_init+0x18c>
	if (closed_sectors == fs->sector_count) {
   13eec:	89e3      	ldrh	r3, [r4, #14]
   13eee:	42bb      	cmp	r3, r7
   13ef0:	f000 80a1 	beq.w	14036 <nvs_init+0x20a>
	if (i == fs->sector_count) {
   13ef4:	4553      	cmp	r3, sl
   13ef6:	d10c      	bne.n	13f12 <nvs_init+0xe6>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   13ef8:	9900      	ldr	r1, [sp, #0]
   13efa:	2308      	movs	r3, #8
   13efc:	464a      	mov	r2, r9
   13efe:	eba1 0108 	sub.w	r1, r1, r8
   13f02:	4620      	mov	r0, r4
   13f04:	f00f f9b8 	bl	23278 <nvs_flash_cmp_const>
		if (!rc) {
   13f08:	b918      	cbnz	r0, 13f12 <nvs_init+0xe6>
			nvs_sector_advance(fs, &addr);
   13f0a:	89e0      	ldrh	r0, [r4, #14]
   13f0c:	4669      	mov	r1, sp
   13f0e:	f00f f9f7 	bl	23300 <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
   13f12:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   13f14:	4f5c      	ldr	r7, [pc, #368]	; (14088 <nvs_init+0x25c>)
	fs->ate_wra = addr - ate_size;
   13f16:	eba3 0208 	sub.w	r2, r3, r8
	fs->data_wra = addr & ADDR_SECT_MASK;
   13f1a:	403b      	ands	r3, r7
	fs->ate_wra = addr - ate_size;
   13f1c:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   13f1e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   13f20:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   13f24:	4299      	cmp	r1, r3
   13f26:	d30e      	bcc.n	13f46 <nvs_init+0x11a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13f28:	2308      	movs	r3, #8
   13f2a:	aa01      	add	r2, sp, #4
   13f2c:	4620      	mov	r0, r4
   13f2e:	f00f f96b 	bl	23208 <nvs_flash_rd>
		if (rc) {
   13f32:	4605      	mov	r5, r0
   13f34:	bb18      	cbnz	r0, 13f7e <nvs_init+0x152>
   13f36:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   13f38:	f813 2b01 	ldrb.w	r2, [r3], #1
   13f3c:	4591      	cmp	r9, r2
   13f3e:	d17d      	bne.n	1403c <nvs_init+0x210>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   13f40:	3501      	adds	r5, #1
   13f42:	2d08      	cmp	r5, #8
   13f44:	d1f8      	bne.n	13f38 <nvs_init+0x10c>
	while (fs->ate_wra > fs->data_wra) {
   13f46:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   13f4a:	428b      	cmp	r3, r1
   13f4c:	d907      	bls.n	13f5e <nvs_init+0x132>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   13f4e:	1a5b      	subs	r3, r3, r1
   13f50:	464a      	mov	r2, r9
   13f52:	4620      	mov	r0, r4
   13f54:	f00f f990 	bl	23278 <nvs_flash_cmp_const>
		if (rc < 0) {
   13f58:	1e05      	subs	r5, r0, #0
   13f5a:	db10      	blt.n	13f7e <nvs_init+0x152>
		if (!rc) {
   13f5c:	d14f      	bne.n	13ffe <nvs_init+0x1d2>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13f5e:	6863      	ldr	r3, [r4, #4]
   13f60:	4f49      	ldr	r7, [pc, #292]	; (14088 <nvs_init+0x25c>)
	nvs_sector_advance(fs, &addr);
   13f62:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13f64:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
   13f66:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13f68:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   13f6a:	f00f f9c9 	bl	23300 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   13f6e:	89a3      	ldrh	r3, [r4, #12]
   13f70:	9900      	ldr	r1, [sp, #0]
   13f72:	464a      	mov	r2, r9
   13f74:	4620      	mov	r0, r4
   13f76:	f00f f97f 	bl	23278 <nvs_flash_cmp_const>
	if (rc < 0) {
   13f7a:	1e05      	subs	r5, r0, #0
   13f7c:	da45      	bge.n	1400a <nvs_init+0x1de>
	return z_impl_k_mutex_unlock(mutex);
   13f7e:	4630      	mov	r0, r6
   13f80:	f00c fb34 	bl	205ec <z_impl_k_mutex_unlock>
	if (rc) {
   13f84:	2d00      	cmp	r5, #0
   13f86:	f47f af66 	bne.w	13e56 <nvs_init+0x2a>
	fs->ready = true;
   13f8a:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13f8c:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
   13f8e:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13f90:	483e      	ldr	r0, [pc, #248]	; (1408c <nvs_init+0x260>)
   13f92:	89a3      	ldrh	r3, [r4, #12]
   13f94:	2149      	movs	r1, #73	; 0x49
   13f96:	f00e fec9 	bl	22d2c <printk>
	LOG_INF("alloc wra: %d, %x",
   13f9a:	6862      	ldr	r2, [r4, #4]
   13f9c:	483c      	ldr	r0, [pc, #240]	; (14090 <nvs_init+0x264>)
   13f9e:	b293      	uxth	r3, r2
   13fa0:	2149      	movs	r1, #73	; 0x49
   13fa2:	0c12      	lsrs	r2, r2, #16
   13fa4:	f00e fec2 	bl	22d2c <printk>
	LOG_INF("data wra: %d, %x",
   13fa8:	68a2      	ldr	r2, [r4, #8]
   13faa:	483a      	ldr	r0, [pc, #232]	; (14094 <nvs_init+0x268>)
   13fac:	b293      	uxth	r3, r2
   13fae:	2149      	movs	r1, #73	; 0x49
   13fb0:	0c12      	lsrs	r2, r2, #16
   13fb2:	f00e febb 	bl	22d2c <printk>
	return 0;
   13fb6:	e74e      	b.n	13e56 <nvs_init+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
   13fb8:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   13fba:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   13fbc:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
   13fc0:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13fc4:	464a      	mov	r2, r9
   13fc6:	2308      	movs	r3, #8
   13fc8:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   13fca:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13fcc:	f00f f954 	bl	23278 <nvs_flash_cmp_const>
		if (rc) {
   13fd0:	b170      	cbz	r0, 13ff0 <nvs_init+0x1c4>
			nvs_sector_advance(fs, &addr);
   13fd2:	89e0      	ldrh	r0, [r4, #14]
   13fd4:	4669      	mov	r1, sp
   13fd6:	f00f f993 	bl	23300 <nvs_sector_advance.isra.0>
			closed_sectors++;
   13fda:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13fdc:	9900      	ldr	r1, [sp, #0]
   13fde:	2308      	movs	r3, #8
   13fe0:	464a      	mov	r2, r9
   13fe2:	4620      	mov	r0, r4
			closed_sectors++;
   13fe4:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13fe6:	f00f f947 	bl	23278 <nvs_flash_cmp_const>
			if (!rc) {
   13fea:	2800      	cmp	r0, #0
   13fec:	f43f af7e 	beq.w	13eec <nvs_init+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
   13ff0:	3501      	adds	r5, #1
   13ff2:	e776      	b.n	13ee2 <nvs_init+0xb6>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13ff4:	2d00      	cmp	r5, #0
   13ff6:	d036      	beq.n	14066 <nvs_init+0x23a>
				rc = -ESPIPE;
   13ff8:	f06f 051c 	mvn.w	r5, #28
   13ffc:	e7bf      	b.n	13f7e <nvs_init+0x152>
		fs->data_wra += fs->flash_parameters->write_block_size;
   13ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   14000:	68a3      	ldr	r3, [r4, #8]
   14002:	6812      	ldr	r2, [r2, #0]
   14004:	4413      	add	r3, r2
   14006:	60a3      	str	r3, [r4, #8]
   14008:	e79d      	b.n	13f46 <nvs_init+0x11a>
	if (rc) {
   1400a:	d0b8      	beq.n	13f7e <nvs_init+0x152>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1400c:	6861      	ldr	r1, [r4, #4]
   1400e:	4620      	mov	r0, r4
   14010:	f00f f981 	bl	23316 <nvs_flash_erase_sector>
		if (rc) {
   14014:	4605      	mov	r5, r0
   14016:	2800      	cmp	r0, #0
   14018:	d1b1      	bne.n	13f7e <nvs_init+0x152>
		fs->ate_wra &= ADDR_SECT_MASK;
   1401a:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   1401c:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   1401e:	403b      	ands	r3, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   14020:	4403      	add	r3, r0
   14022:	eba3 0048 	sub.w	r0, r3, r8, lsl #1
   14026:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   14028:	4038      	ands	r0, r7
   1402a:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
   1402c:	4620      	mov	r0, r4
   1402e:	f7ff fe3d 	bl	13cac <nvs_gc>
   14032:	4605      	mov	r5, r0
end:
   14034:	e7a3      	b.n	13f7e <nvs_init+0x152>
		rc = -EDEADLK;
   14036:	f06f 0520 	mvn.w	r5, #32
   1403a:	e7a0      	b.n	13f7e <nvs_init+0x152>
		if (!nvs_ate_crc8_check(&last_ate)) {
   1403c:	a801      	add	r0, sp, #4
   1403e:	f00f f940 	bl	232c2 <nvs_ate_crc8_check>
   14042:	6862      	ldr	r2, [r4, #4]
   14044:	b978      	cbnz	r0, 14066 <nvs_init+0x23a>
			fs->data_wra = addr & ADDR_SECT_MASK;
   14046:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += last_ate.offset;
   14048:	f8bd 0006 	ldrh.w	r0, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
   1404c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   14050:	403b      	ands	r3, r7
			fs->data_wra += last_ate.offset;
   14052:	4403      	add	r3, r0
   14054:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
   14056:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   14058:	4629      	mov	r1, r5
   1405a:	f00f f947 	bl	232ec <nvs_al_size.isra.0>
   1405e:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   14060:	4293      	cmp	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.len);
   14062:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   14064:	d0c6      	beq.n	13ff4 <nvs_init+0x1c8>
		fs->ate_wra -= ate_size;
   14066:	eba2 0208 	sub.w	r2, r2, r8
   1406a:	6062      	str	r2, [r4, #4]
   1406c:	e758      	b.n	13f20 <nvs_init+0xf4>
   1406e:	bf00      	nop
   14070:	00027d75 	.word	0x00027d75
   14074:	00027d96 	.word	0x00027d96
   14078:	00027dbd 	.word	0x00027dbd
   1407c:	00027ddf 	.word	0x00027ddf
   14080:	00027dfc 	.word	0x00027dfc
   14084:	00027e15 	.word	0x00027e15
   14088:	ffff0000 	.word	0xffff0000
   1408c:	00027e3d 	.word	0x00027e3d
   14090:	00027e59 	.word	0x00027e59
   14094:	00027e70 	.word	0x00027e70

00014098 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   14098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1409c:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1409e:	7c03      	ldrb	r3, [r0, #16]
{
   140a0:	b089      	sub	sp, #36	; 0x24
   140a2:	4604      	mov	r4, r0
   140a4:	4689      	mov	r9, r1
   140a6:	4690      	mov	r8, r2
	if (!fs->ready) {
   140a8:	b94b      	cbnz	r3, 140be <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   140aa:	4866      	ldr	r0, [pc, #408]	; (14244 <nvs_write+0x1ac>)
   140ac:	2145      	movs	r1, #69	; 0x45
   140ae:	f00e fe3d 	bl	22d2c <printk>
		return -EACCES;
   140b2:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   140b6:	4628      	mov	r0, r5
   140b8:	b009      	add	sp, #36	; 0x24
   140ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   140be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   140c0:	2108      	movs	r1, #8
   140c2:	4618      	mov	r0, r3
   140c4:	f00f f912 	bl	232ec <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   140c8:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   140ca:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   140cc:	4618      	mov	r0, r3
   140ce:	f00f f90d 	bl	232ec <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   140d2:	89a3      	ldrh	r3, [r4, #12]
   140d4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   140d8:	1a9b      	subs	r3, r3, r2
   140da:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
   140dc:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   140de:	f0c0 80ab 	bcc.w	14238 <nvs_write+0x1a0>
   140e2:	b11e      	cbz	r6, 140ec <nvs_write+0x54>
	    ((len > 0) && (data == NULL))) {
   140e4:	f1b8 0f00 	cmp.w	r8, #0
   140e8:	f000 80a6 	beq.w	14238 <nvs_write+0x1a0>
	wlk_addr = fs->ate_wra;
   140ec:	6863      	ldr	r3, [r4, #4]
   140ee:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   140f0:	aa04      	add	r2, sp, #16
   140f2:	a903      	add	r1, sp, #12
   140f4:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   140f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   140fa:	f00f f934 	bl	23366 <nvs_prev_ate>
		if (rc) {
   140fe:	4605      	mov	r5, r0
   14100:	2800      	cmp	r0, #0
   14102:	d1d8      	bne.n	140b6 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
   14104:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14108:	454b      	cmp	r3, r9
   1410a:	d005      	beq.n	14118 <nvs_write+0x80>
		if (wlk_addr == fs->ate_wra) {
   1410c:	6862      	ldr	r2, [r4, #4]
   1410e:	9b03      	ldr	r3, [sp, #12]
   14110:	429a      	cmp	r2, r3
   14112:	d1ed      	bne.n	140f0 <nvs_write+0x58>
		if (len == 0) {
   14114:	b9de      	cbnz	r6, 1414e <nvs_write+0xb6>
   14116:	e7ce      	b.n	140b6 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
   14118:	a804      	add	r0, sp, #16
   1411a:	f00f f8d2 	bl	232c2 <nvs_ate_crc8_check>
   1411e:	2800      	cmp	r0, #0
   14120:	d1f4      	bne.n	1410c <nvs_write+0x74>
		if (len == 0) {
   14122:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   14126:	b186      	cbz	r6, 1414a <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   14128:	42b3      	cmp	r3, r6
   1412a:	d110      	bne.n	1414e <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
   1412c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   14130:	ea4f 411b 	mov.w	r1, fp, lsr #16
   14134:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   14136:	4401      	add	r1, r0
   14138:	4633      	mov	r3, r6
   1413a:	4642      	mov	r2, r8
   1413c:	4620      	mov	r0, r4
   1413e:	f00f f871 	bl	23224 <nvs_flash_block_cmp>
			if (rc <= 0) {
   14142:	2800      	cmp	r0, #0
   14144:	dc03      	bgt.n	1414e <nvs_write+0xb6>
   14146:	4605      	mov	r5, r0
   14148:	e7b5      	b.n	140b6 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   1414a:	2b00      	cmp	r3, #0
   1414c:	d0b3      	beq.n	140b6 <nvs_write+0x1e>
	if (data_size) {
   1414e:	2f00      	cmp	r7, #0
   14150:	d13f      	bne.n	141d2 <nvs_write+0x13a>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   14152:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   14156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1415a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1415e:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   14160:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 14248 <nvs_write+0x1b0>
   14164:	f00c f970 	bl	20448 <z_impl_k_mutex_lock>
	gc_count = 0;
   14168:	2200      	movs	r2, #0
		if (gc_count == fs->sector_count) {
   1416a:	89e3      	ldrh	r3, [r4, #14]
   1416c:	429a      	cmp	r2, r3
   1416e:	d060      	beq.n	14232 <nvs_write+0x19a>
		if (fs->ate_wra >= fs->data_wra + required_space) {
   14170:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   14174:	1878      	adds	r0, r7, r1
   14176:	4283      	cmp	r3, r0
   14178:	d32e      	bcc.n	141d8 <nvs_write+0x140>
	entry.part = 0xff;
   1417a:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   1417c:	a806      	add	r0, sp, #24
	entry.id = id;
   1417e:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   14182:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   14186:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   1418a:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   1418e:	f00f f8a4 	bl	232da <nvs_ate_crc8_update>
	if (!len) {
   14192:	b136      	cbz	r6, 141a2 <nvs_write+0x10a>
   14194:	68a1      	ldr	r1, [r4, #8]
   14196:	4633      	mov	r3, r6
   14198:	4642      	mov	r2, r8
   1419a:	4620      	mov	r0, r4
   1419c:	f00f f933 	bl	23406 <nvs_flash_al_wrt.part.0>
   141a0:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   141a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   141a4:	4631      	mov	r1, r6
   141a6:	f00f f8a1 	bl	232ec <nvs_al_size.isra.0>
   141aa:	68a3      	ldr	r3, [r4, #8]
   141ac:	4403      	add	r3, r0
   141ae:	60a3      	str	r3, [r4, #8]
	if (rc) {
   141b0:	2d00      	cmp	r5, #0
   141b2:	d144      	bne.n	1423e <nvs_write+0x1a6>
	rc = nvs_flash_ate_wrt(fs, &entry);
   141b4:	a906      	add	r1, sp, #24
   141b6:	4620      	mov	r0, r4
   141b8:	f00f f96d 	bl	23496 <nvs_flash_ate_wrt>
	if (rc) {
   141bc:	4605      	mov	r5, r0
   141be:	2800      	cmp	r0, #0
   141c0:	d13d      	bne.n	1423e <nvs_write+0x1a6>
	rc = len;
   141c2:	4633      	mov	r3, r6
   141c4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   141c6:	4650      	mov	r0, sl
   141c8:	f00c fa10 	bl	205ec <z_impl_k_mutex_unlock>
	return rc;
   141cc:	9b01      	ldr	r3, [sp, #4]
   141ce:	461d      	mov	r5, r3
   141d0:	e771      	b.n	140b6 <nvs_write+0x1e>
		required_space = data_size + ate_size;
   141d2:	4457      	add	r7, sl
   141d4:	b2bf      	uxth	r7, r7
   141d6:	e7bc      	b.n	14152 <nvs_write+0xba>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   141d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   141da:	9201      	str	r2, [sp, #4]
   141dc:	2108      	movs	r1, #8
   141de:	f00f f885 	bl	232ec <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   141e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   141e6:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   141ea:	2100      	movs	r1, #0
   141ec:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   141f0:	1819      	adds	r1, r3, r0
   141f2:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   141f6:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   141f8:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   141fc:	440b      	add	r3, r1
   141fe:	1a18      	subs	r0, r3, r0
   14200:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   14202:	a806      	add	r0, sp, #24
   14204:	f00f f869 	bl	232da <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   14208:	a906      	add	r1, sp, #24
   1420a:	4620      	mov	r0, r4
   1420c:	f00f f943 	bl	23496 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   14210:	89e0      	ldrh	r0, [r4, #14]
   14212:	1d21      	adds	r1, r4, #4
   14214:	f00f f874 	bl	23300 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   14218:	6863      	ldr	r3, [r4, #4]
   1421a:	ea03 030b 	and.w	r3, r3, fp
   1421e:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   14220:	4620      	mov	r0, r4
   14222:	f7ff fd43 	bl	13cac <nvs_gc>
		if (rc) {
   14226:	4603      	mov	r3, r0
   14228:	2800      	cmp	r0, #0
   1422a:	d1cb      	bne.n	141c4 <nvs_write+0x12c>
		gc_count++;
   1422c:	9a01      	ldr	r2, [sp, #4]
   1422e:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   14230:	e79b      	b.n	1416a <nvs_write+0xd2>
			rc = -ENOSPC;
   14232:	f06f 031b 	mvn.w	r3, #27
   14236:	e7c5      	b.n	141c4 <nvs_write+0x12c>
		return -EINVAL;
   14238:	f06f 0515 	mvn.w	r5, #21
   1423c:	e73b      	b.n	140b6 <nvs_write+0x1e>
			if (rc) {
   1423e:	462b      	mov	r3, r5
   14240:	e7c0      	b.n	141c4 <nvs_write+0x12c>
   14242:	bf00      	nop
   14244:	00027d5c 	.word	0x00027d5c
   14248:	ffff0000 	.word	0xffff0000

0001424c <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   1424c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14250:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   14252:	7c03      	ldrb	r3, [r0, #16]
{
   14254:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   14258:	4604      	mov	r4, r0
   1425a:	460f      	mov	r7, r1
   1425c:	4690      	mov	r8, r2
	if (!fs->ready) {
   1425e:	b943      	cbnz	r3, 14272 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   14260:	4828      	ldr	r0, [pc, #160]	; (14304 <nvs_read_hist+0xb8>)
   14262:	2145      	movs	r1, #69	; 0x45
   14264:	f00e fd62 	bl	22d2c <printk>
		return -EACCES;
   14268:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   1426c:	b004      	add	sp, #16
   1426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   14272:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   14274:	2108      	movs	r1, #8
   14276:	f00f f839 	bl	232ec <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   1427a:	89a3      	ldrh	r3, [r4, #12]
   1427c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   14280:	42b3      	cmp	r3, r6
   14282:	d33b      	bcc.n	142fc <nvs_read_hist+0xb0>
	wlk_addr = fs->ate_wra;
   14284:	6863      	ldr	r3, [r4, #4]
   14286:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   14288:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1428c:	aa02      	add	r2, sp, #8
   1428e:	a901      	add	r1, sp, #4
   14290:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   14292:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   14294:	f00f f867 	bl	23366 <nvs_prev_ate>
		if (rc) {
   14298:	2800      	cmp	r0, #0
   1429a:	d1e7      	bne.n	1426c <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
   1429c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   142a0:	42bb      	cmp	r3, r7
   142a2:	d107      	bne.n	142b4 <nvs_read_hist+0x68>
   142a4:	a802      	add	r0, sp, #8
   142a6:	f00f f80c 	bl	232c2 <nvs_ate_crc8_check>
   142aa:	b918      	cbnz	r0, 142b4 <nvs_read_hist+0x68>
			cnt_his++;
   142ac:	f10a 0a01 	add.w	sl, sl, #1
   142b0:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   142b4:	6862      	ldr	r2, [r4, #4]
   142b6:	9b01      	ldr	r3, [sp, #4]
   142b8:	429a      	cmp	r2, r3
   142ba:	d018      	beq.n	142ee <nvs_read_hist+0xa2>
	while (cnt_his <= cnt) {
   142bc:	45ca      	cmp	sl, r9
   142be:	d9e5      	bls.n	1428c <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   142c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   142c4:	b1bb      	cbz	r3, 142f6 <nvs_read_hist+0xaa>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   142c6:	45ca      	cmp	sl, r9
   142c8:	d315      	bcc.n	142f6 <nvs_read_hist+0xaa>
	rd_addr += wlk_ate.offset;
   142ca:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   142ce:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   142d0:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   142d2:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   142d6:	bf28      	it	cs
   142d8:	4633      	movcs	r3, r6
   142da:	4642      	mov	r2, r8
   142dc:	4429      	add	r1, r5
   142de:	4620      	mov	r0, r4
   142e0:	f00e ff92 	bl	23208 <nvs_flash_rd>
	if (rc) {
   142e4:	2800      	cmp	r0, #0
   142e6:	d1c1      	bne.n	1426c <nvs_read_hist+0x20>
	return wlk_ate.len;
   142e8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   142ec:	e7be      	b.n	1426c <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   142ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   142f2:	42bb      	cmp	r3, r7
   142f4:	d0e4      	beq.n	142c0 <nvs_read_hist+0x74>
		return -ENOENT;
   142f6:	f06f 0001 	mvn.w	r0, #1
   142fa:	e7b7      	b.n	1426c <nvs_read_hist+0x20>
		return -EINVAL;
   142fc:	f06f 0015 	mvn.w	r0, #21
   14300:	e7b4      	b.n	1426c <nvs_read_hist+0x20>
   14302:	bf00      	nop
   14304:	00027d5c 	.word	0x00027d5c

00014308 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   14308:	4b09      	ldr	r3, [pc, #36]	; (14330 <get_flash_area_from_id+0x28>)
{
   1430a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   1430c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   1430e:	4b09      	ldr	r3, [pc, #36]	; (14334 <get_flash_area_from_id+0x2c>)
{
   14310:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
   14312:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   14314:	2300      	movs	r3, #0
   14316:	429d      	cmp	r5, r3
   14318:	dc01      	bgt.n	1431e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   1431a:	2000      	movs	r0, #0
}
   1431c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   1431e:	0119      	lsls	r1, r3, #4
   14320:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   14324:	5c61      	ldrb	r1, [r4, r1]
   14326:	4291      	cmp	r1, r2
   14328:	d0f8      	beq.n	1431c <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
   1432a:	3301      	adds	r3, #1
   1432c:	e7f3      	b.n	14316 <get_flash_area_from_id+0xe>
   1432e:	bf00      	nop
   14330:	00027310 	.word	0x00027310
   14334:	20000590 	.word	0x20000590

00014338 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   14338:	4b08      	ldr	r3, [pc, #32]	; (1435c <flash_area_open+0x24>)
   1433a:	681b      	ldr	r3, [r3, #0]
{
   1433c:	b510      	push	{r4, lr}
   1433e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   14340:	b12b      	cbz	r3, 1434e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   14342:	f7ff ffe1 	bl	14308 <get_flash_area_from_id>
	if (area == NULL) {
   14346:	b128      	cbz	r0, 14354 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   14348:	6020      	str	r0, [r4, #0]
	return 0;
   1434a:	2000      	movs	r0, #0
}
   1434c:	bd10      	pop	{r4, pc}
		return -EACCES;
   1434e:	f06f 000c 	mvn.w	r0, #12
   14352:	e7fb      	b.n	1434c <flash_area_open+0x14>
		return -ENOENT;
   14354:	f06f 0001 	mvn.w	r0, #1
   14358:	e7f8      	b.n	1434c <flash_area_open+0x14>
   1435a:	bf00      	nop
   1435c:	20000590 	.word	0x20000590

00014360 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   14360:	b530      	push	{r4, r5, lr}
   14362:	b089      	sub	sp, #36	; 0x24
   14364:	460c      	mov	r4, r1
   14366:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   14368:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   1436a:	f7ff ffcd 	bl	14308 <get_flash_area_from_id>
	if (fa == NULL) {
   1436e:	b1b8      	cbz	r0, 143a0 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   14370:	6843      	ldr	r3, [r0, #4]
   14372:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   14374:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   14376:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   14378:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   1437a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   1437e:	2300      	movs	r3, #0
	cb_data->status = 0;
   14380:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   14384:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
   14386:	f00f f8a2 	bl	234ce <device_get_binding>
	if (flash_dev == NULL) {
   1438a:	b160      	cbz	r0, 143a6 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   1438c:	4907      	ldr	r1, [pc, #28]	; (143ac <flash_area_get_sectors+0x4c>)
   1438e:	aa01      	add	r2, sp, #4
   14390:	f012 f9e9 	bl	26766 <flash_page_foreach>
	if (cb_data->status == 0) {
   14394:	9807      	ldr	r0, [sp, #28]
   14396:	b908      	cbnz	r0, 1439c <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   14398:	9b05      	ldr	r3, [sp, #20]
   1439a:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1439c:	b009      	add	sp, #36	; 0x24
   1439e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   143a0:	f06f 0015 	mvn.w	r0, #21
   143a4:	e7fa      	b.n	1439c <flash_area_get_sectors+0x3c>
		return -ENODEV;
   143a6:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   143aa:	e7f7      	b.n	1439c <flash_area_get_sectors+0x3c>
   143ac:	000234d3 	.word	0x000234d3

000143b0 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   143b0:	4b10      	ldr	r3, [pc, #64]	; (143f4 <settings_save_one+0x44>)
{
   143b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   143b6:	681c      	ldr	r4, [r3, #0]
{
   143b8:	4605      	mov	r5, r0
   143ba:	460e      	mov	r6, r1
   143bc:	4617      	mov	r7, r2
	if (!cs) {
   143be:	b1ac      	cbz	r4, 143ec <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   143c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   143c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143c8:	480b      	ldr	r0, [pc, #44]	; (143f8 <settings_save_one+0x48>)
   143ca:	f00c f83d 	bl	20448 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   143ce:	6863      	ldr	r3, [r4, #4]
   143d0:	4632      	mov	r2, r6
   143d2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   143d6:	4629      	mov	r1, r5
   143d8:	463b      	mov	r3, r7
   143da:	4620      	mov	r0, r4
   143dc:	47c0      	blx	r8
   143de:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   143e0:	4805      	ldr	r0, [pc, #20]	; (143f8 <settings_save_one+0x48>)
   143e2:	f00c f903 	bl	205ec <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   143e6:	4620      	mov	r0, r4
   143e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   143ec:	f06f 0401 	mvn.w	r4, #1
   143f0:	e7f9      	b.n	143e6 <settings_save_one+0x36>
   143f2:	bf00      	nop
   143f4:	2000279c 	.word	0x2000279c
   143f8:	20000864 	.word	0x20000864

000143fc <settings_src_register>:
	parent->next = child;
   143fc:	2300      	movs	r3, #0
   143fe:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   14400:	4b04      	ldr	r3, [pc, #16]	; (14414 <settings_src_register+0x18>)
   14402:	685a      	ldr	r2, [r3, #4]
   14404:	b912      	cbnz	r2, 1440c <settings_src_register+0x10>
	list->head = node;
   14406:	e9c3 0000 	strd	r0, r0, [r3]
}
   1440a:	4770      	bx	lr
	parent->next = child;
   1440c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1440e:	6058      	str	r0, [r3, #4]
}
   14410:	4770      	bx	lr
   14412:	bf00      	nop
   14414:	20002794 	.word	0x20002794

00014418 <settings_dst_register>:
	settings_save_dst = cs;
   14418:	4b01      	ldr	r3, [pc, #4]	; (14420 <settings_dst_register+0x8>)
   1441a:	6018      	str	r0, [r3, #0]
}
   1441c:	4770      	bx	lr
   1441e:	bf00      	nop
   14420:	2000279c 	.word	0x2000279c

00014424 <settings_load_subtree>:
{
   14424:	b530      	push	{r4, r5, lr}
   14426:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   14428:	2300      	movs	r3, #0
{
   1442a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   1442c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14430:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   14432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14436:	480e      	ldr	r0, [pc, #56]	; (14470 <settings_load_subtree+0x4c>)
   14438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1443c:	f00c f804 	bl	20448 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14440:	4b0c      	ldr	r3, [pc, #48]	; (14474 <settings_load_subtree+0x50>)
   14442:	681c      	ldr	r4, [r3, #0]
   14444:	2c00      	cmp	r4, #0
   14446:	bf38      	it	cc
   14448:	2400      	movcc	r4, #0
   1444a:	b13c      	cbz	r4, 1445c <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   1444c:	6863      	ldr	r3, [r4, #4]
   1444e:	4620      	mov	r0, r4
   14450:	681b      	ldr	r3, [r3, #0]
   14452:	a901      	add	r1, sp, #4
   14454:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14456:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14458:	2c00      	cmp	r4, #0
   1445a:	d1f6      	bne.n	1444a <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   1445c:	4628      	mov	r0, r5
   1445e:	f000 f8d9 	bl	14614 <settings_commit_subtree>
   14462:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14464:	4802      	ldr	r0, [pc, #8]	; (14470 <settings_load_subtree+0x4c>)
   14466:	f00c f8c1 	bl	205ec <z_impl_k_mutex_unlock>
}
   1446a:	4620      	mov	r0, r4
   1446c:	b005      	add	sp, #20
   1446e:	bd30      	pop	{r4, r5, pc}
   14470:	20000864 	.word	0x20000864
   14474:	20002794 	.word	0x20002794

00014478 <settings_load_subtree_direct>:
{
   14478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   1447a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1447e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   14480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14484:	480c      	ldr	r0, [pc, #48]	; (144b8 <settings_load_subtree_direct+0x40>)
   14486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1448a:	f00b ffdd 	bl	20448 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1448e:	4b0b      	ldr	r3, [pc, #44]	; (144bc <settings_load_subtree_direct+0x44>)
   14490:	681c      	ldr	r4, [r3, #0]
   14492:	2c00      	cmp	r4, #0
   14494:	bf38      	it	cc
   14496:	2400      	movcc	r4, #0
   14498:	b13c      	cbz	r4, 144aa <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   1449a:	6863      	ldr	r3, [r4, #4]
   1449c:	4620      	mov	r0, r4
   1449e:	681b      	ldr	r3, [r3, #0]
   144a0:	a901      	add	r1, sp, #4
   144a2:	4798      	blx	r3
   144a4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   144a6:	2c00      	cmp	r4, #0
   144a8:	d1f6      	bne.n	14498 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   144aa:	4803      	ldr	r0, [pc, #12]	; (144b8 <settings_load_subtree_direct+0x40>)
   144ac:	f00c f89e 	bl	205ec <z_impl_k_mutex_unlock>
}
   144b0:	2000      	movs	r0, #0
   144b2:	b004      	add	sp, #16
   144b4:	bd10      	pop	{r4, pc}
   144b6:	bf00      	nop
   144b8:	20000864 	.word	0x20000864
   144bc:	20002794 	.word	0x20002794

000144c0 <settings_store_init>:
	list->head = NULL;
   144c0:	4b02      	ldr	r3, [pc, #8]	; (144cc <settings_store_init+0xc>)
   144c2:	2200      	movs	r2, #0
	list->tail = NULL;
   144c4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   144c8:	4770      	bx	lr
   144ca:	bf00      	nop
   144cc:	20002794 	.word	0x20002794

000144d0 <settings_init>:
	list->head = NULL;
   144d0:	4b02      	ldr	r3, [pc, #8]	; (144dc <settings_init+0xc>)
   144d2:	2200      	movs	r2, #0
	list->tail = NULL;
   144d4:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   144d8:	f7ff bff2 	b.w	144c0 <settings_store_init>
   144dc:	200027a0 	.word	0x200027a0

000144e0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   144e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   144e4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   144e6:	460e      	mov	r6, r1
   144e8:	b109      	cbz	r1, 144ee <settings_parse_and_lookup+0xe>
		*next = NULL;
   144ea:	2300      	movs	r3, #0
   144ec:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   144ee:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 14590 <settings_parse_and_lookup+0xb0>
   144f2:	4c24      	ldr	r4, [pc, #144]	; (14584 <settings_parse_and_lookup+0xa4>)
   144f4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 14594 <settings_parse_and_lookup+0xb4>
   144f8:	2500      	movs	r5, #0
   144fa:	46c2      	mov	sl, r8
   144fc:	4544      	cmp	r4, r8
   144fe:	d908      	bls.n	14512 <settings_parse_and_lookup+0x32>
   14500:	4821      	ldr	r0, [pc, #132]	; (14588 <settings_parse_and_lookup+0xa8>)
   14502:	4649      	mov	r1, r9
   14504:	2294      	movs	r2, #148	; 0x94
   14506:	f00e fc11 	bl	22d2c <printk>
   1450a:	2194      	movs	r1, #148	; 0x94
   1450c:	4648      	mov	r0, r9
   1450e:	f00e fe70 	bl	231f2 <assert_post_action>
   14512:	4554      	cmp	r4, sl
   14514:	d308      	bcc.n	14528 <settings_parse_and_lookup+0x48>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14516:	4b1d      	ldr	r3, [pc, #116]	; (1458c <settings_parse_and_lookup+0xac>)
   14518:	681c      	ldr	r4, [r3, #0]
   1451a:	b10c      	cbz	r4, 14520 <settings_parse_and_lookup+0x40>
   1451c:	3c14      	subs	r4, #20
   1451e:	b9c4      	cbnz	r4, 14552 <settings_parse_and_lookup+0x72>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   14520:	4628      	mov	r0, r5
   14522:	b002      	add	sp, #8
   14524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14528:	6821      	ldr	r1, [r4, #0]
   1452a:	aa01      	add	r2, sp, #4
   1452c:	4638      	mov	r0, r7
   1452e:	f00e fff5 	bl	2351c <settings_name_steq>
   14532:	b160      	cbz	r0, 1454e <settings_parse_and_lookup+0x6e>
		if (!bestmatch) {
   14534:	b925      	cbnz	r5, 14540 <settings_parse_and_lookup+0x60>
			if (next) {
   14536:	b10e      	cbz	r6, 1453c <settings_parse_and_lookup+0x5c>
				*next = tmpnext;
   14538:	9b01      	ldr	r3, [sp, #4]
   1453a:	6033      	str	r3, [r6, #0]
   1453c:	4625      	mov	r5, r4
   1453e:	e006      	b.n	1454e <settings_parse_and_lookup+0x6e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   14540:	6829      	ldr	r1, [r5, #0]
   14542:	6820      	ldr	r0, [r4, #0]
   14544:	2200      	movs	r2, #0
   14546:	f00e ffe9 	bl	2351c <settings_name_steq>
   1454a:	2800      	cmp	r0, #0
   1454c:	d1f3      	bne.n	14536 <settings_parse_and_lookup+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1454e:	3414      	adds	r4, #20
   14550:	e7d4      	b.n	144fc <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14552:	6821      	ldr	r1, [r4, #0]
   14554:	aa01      	add	r2, sp, #4
   14556:	4638      	mov	r0, r7
   14558:	f00e ffe0 	bl	2351c <settings_name_steq>
   1455c:	b160      	cbz	r0, 14578 <settings_parse_and_lookup+0x98>
		if (!bestmatch) {
   1455e:	b925      	cbnz	r5, 1456a <settings_parse_and_lookup+0x8a>
			if (next) {
   14560:	b10e      	cbz	r6, 14566 <settings_parse_and_lookup+0x86>
				*next = tmpnext;
   14562:	9b01      	ldr	r3, [sp, #4]
   14564:	6033      	str	r3, [r6, #0]
   14566:	4625      	mov	r5, r4
   14568:	e006      	b.n	14578 <settings_parse_and_lookup+0x98>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1456a:	6829      	ldr	r1, [r5, #0]
   1456c:	6820      	ldr	r0, [r4, #0]
   1456e:	2200      	movs	r2, #0
   14570:	f00e ffd4 	bl	2351c <settings_name_steq>
   14574:	2800      	cmp	r0, #0
   14576:	d1f3      	bne.n	14560 <settings_parse_and_lookup+0x80>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14578:	f114 0f14 	cmn.w	r4, #20
   1457c:	d0d0      	beq.n	14520 <settings_parse_and_lookup+0x40>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1457e:	6964      	ldr	r4, [r4, #20]
   14580:	e7cb      	b.n	1451a <settings_parse_and_lookup+0x3a>
   14582:	bf00      	nop
   14584:	00027024 	.word	0x00027024
   14588:	00027c9a 	.word	0x00027c9a
   1458c:	200027a0 	.word	0x200027a0
   14590:	0002709c 	.word	0x0002709c
   14594:	00027ea0 	.word	0x00027ea0

00014598 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   14598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1459c:	b085      	sub	sp, #20
   1459e:	4604      	mov	r4, r0
   145a0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   145a4:	9003      	str	r0, [sp, #12]
{
   145a6:	460d      	mov	r5, r1
   145a8:	4616      	mov	r6, r2
   145aa:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   145ac:	f1b8 0f00 	cmp.w	r8, #0
   145b0:	d018      	beq.n	145e4 <settings_call_set_handler+0x4c>
   145b2:	f8d8 1000 	ldr.w	r1, [r8]
   145b6:	b181      	cbz	r1, 145da <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   145b8:	aa03      	add	r2, sp, #12
   145ba:	f00e ffaf 	bl	2351c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   145be:	b960      	cbnz	r0, 145da <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   145c0:	2000      	movs	r0, #0
   145c2:	e007      	b.n	145d4 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   145c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   145c8:	9300      	str	r3, [sp, #0]
   145ca:	9803      	ldr	r0, [sp, #12]
   145cc:	463b      	mov	r3, r7
   145ce:	4632      	mov	r2, r6
   145d0:	4629      	mov	r1, r5
   145d2:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   145d4:	b005      	add	sp, #20
   145d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   145da:	f8d8 9004 	ldr.w	r9, [r8, #4]
   145de:	f1b9 0f00 	cmp.w	r9, #0
   145e2:	d1ef      	bne.n	145c4 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   145e4:	a903      	add	r1, sp, #12
   145e6:	4620      	mov	r0, r4
   145e8:	f7ff ff7a 	bl	144e0 <settings_parse_and_lookup>
		if (!ch) {
   145ec:	2800      	cmp	r0, #0
   145ee:	d0e7      	beq.n	145c0 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   145f0:	f8d0 8008 	ldr.w	r8, [r0, #8]
   145f4:	9803      	ldr	r0, [sp, #12]
   145f6:	463b      	mov	r3, r7
   145f8:	4632      	mov	r2, r6
   145fa:	4629      	mov	r1, r5
   145fc:	47c0      	blx	r8
		if (rc != 0) {
   145fe:	4603      	mov	r3, r0
   14600:	2800      	cmp	r0, #0
   14602:	d0dd      	beq.n	145c0 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
   14604:	4802      	ldr	r0, [pc, #8]	; (14610 <settings_call_set_handler+0x78>)
   14606:	4622      	mov	r2, r4
   14608:	2145      	movs	r1, #69	; 0x45
   1460a:	f00e fb8f 	bl	22d2c <printk>
   1460e:	e7d7      	b.n	145c0 <settings_call_set_handler+0x28>
   14610:	00027ed2 	.word	0x00027ed2

00014614 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   14614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14618:	4f21      	ldr	r7, [pc, #132]	; (146a0 <settings_commit_subtree+0x8c>)
   1461a:	4c22      	ldr	r4, [pc, #136]	; (146a4 <settings_commit_subtree+0x90>)
   1461c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 146b0 <settings_commit_subtree+0x9c>
{
   14620:	4606      	mov	r6, r0
	rc = 0;
   14622:	2500      	movs	r5, #0
   14624:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14626:	42bc      	cmp	r4, r7
   14628:	d908      	bls.n	1463c <settings_commit_subtree+0x28>
   1462a:	481f      	ldr	r0, [pc, #124]	; (146a8 <settings_commit_subtree+0x94>)
   1462c:	4641      	mov	r1, r8
   1462e:	22f4      	movs	r2, #244	; 0xf4
   14630:	f00e fb7c 	bl	22d2c <printk>
   14634:	21f4      	movs	r1, #244	; 0xf4
   14636:	4640      	mov	r0, r8
   14638:	f00e fddb 	bl	231f2 <assert_post_action>
   1463c:	454c      	cmp	r4, r9
   1463e:	d307      	bcc.n	14650 <settings_commit_subtree+0x3c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14640:	4b1a      	ldr	r3, [pc, #104]	; (146ac <settings_commit_subtree+0x98>)
   14642:	681c      	ldr	r4, [r3, #0]
   14644:	b10c      	cbz	r4, 1464a <settings_commit_subtree+0x36>
   14646:	3c14      	subs	r4, #20
   14648:	b9a4      	cbnz	r4, 14674 <settings_commit_subtree+0x60>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1464a:	4628      	mov	r0, r5
   1464c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14650:	b91e      	cbnz	r6, 1465a <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   14652:	68e3      	ldr	r3, [r4, #12]
   14654:	b94b      	cbnz	r3, 1466a <settings_commit_subtree+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14656:	3414      	adds	r4, #20
   14658:	e7e5      	b.n	14626 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1465a:	6820      	ldr	r0, [r4, #0]
   1465c:	2200      	movs	r2, #0
   1465e:	4631      	mov	r1, r6
   14660:	f00e ff5c 	bl	2351c <settings_name_steq>
   14664:	2800      	cmp	r0, #0
   14666:	d1f4      	bne.n	14652 <settings_commit_subtree+0x3e>
   14668:	e7f5      	b.n	14656 <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   1466a:	4798      	blx	r3
				rc = rc2;
   1466c:	2d00      	cmp	r5, #0
   1466e:	bf08      	it	eq
   14670:	4605      	moveq	r5, r0
   14672:	e7f0      	b.n	14656 <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14674:	b936      	cbnz	r6, 14684 <settings_commit_subtree+0x70>
		if (ch->h_commit) {
   14676:	68e3      	ldr	r3, [r4, #12]
   14678:	b963      	cbnz	r3, 14694 <settings_commit_subtree+0x80>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1467a:	f114 0f14 	cmn.w	r4, #20
   1467e:	d0e4      	beq.n	1464a <settings_commit_subtree+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14680:	6964      	ldr	r4, [r4, #20]
   14682:	e7df      	b.n	14644 <settings_commit_subtree+0x30>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14684:	6820      	ldr	r0, [r4, #0]
   14686:	2200      	movs	r2, #0
   14688:	4631      	mov	r1, r6
   1468a:	f00e ff47 	bl	2351c <settings_name_steq>
   1468e:	2800      	cmp	r0, #0
   14690:	d1f1      	bne.n	14676 <settings_commit_subtree+0x62>
   14692:	e7f2      	b.n	1467a <settings_commit_subtree+0x66>
			rc2 = ch->h_commit();
   14694:	4798      	blx	r3
				rc = rc2;
   14696:	2d00      	cmp	r5, #0
   14698:	bf08      	it	eq
   1469a:	4605      	moveq	r5, r0
   1469c:	e7ed      	b.n	1467a <settings_commit_subtree+0x66>
   1469e:	bf00      	nop
   146a0:	0002709c 	.word	0x0002709c
   146a4:	00027024 	.word	0x00027024
   146a8:	00027c9a 	.word	0x00027c9a
   146ac:	200027a0 	.word	0x200027a0
   146b0:	00027ea0 	.word	0x00027ea0

000146b4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   146b4:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   146b6:	4c06      	ldr	r4, [pc, #24]	; (146d0 <settings_subsys_init+0x1c>)
   146b8:	7823      	ldrb	r3, [r4, #0]
   146ba:	b93b      	cbnz	r3, 146cc <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   146bc:	f7ff ff08 	bl	144d0 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   146c0:	f000 f864 	bl	1478c <settings_backend_init>

	if (!err) {
   146c4:	b908      	cbnz	r0, 146ca <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   146c6:	2301      	movs	r3, #1
   146c8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   146ca:	bd10      	pop	{r4, pc}
		return 0;
   146cc:	2000      	movs	r0, #0
   146ce:	e7fc      	b.n	146ca <settings_subsys_init+0x16>
   146d0:	20002b9c 	.word	0x20002b9c

000146d4 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   146d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   146d8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   146da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 14788 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   146de:	3401      	adds	r4, #1
{
   146e0:	b098      	sub	sp, #96	; 0x60
   146e2:	4680      	mov	r8, r0
   146e4:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   146e6:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   146e8:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   146ec:	1e65      	subs	r5, r4, #1
   146ee:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   146f0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   146f4:	d045      	beq.n	14782 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   146f6:	234a      	movs	r3, #74	; 0x4a
   146f8:	aa05      	add	r2, sp, #20
   146fa:	4629      	mov	r1, r5
   146fc:	4630      	mov	r0, r6
   146fe:	f00e fedf 	bl	234c0 <nvs_read>
   14702:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   14706:	343f      	adds	r4, #63	; 0x3f
   14708:	b2a4      	uxth	r4, r4
   1470a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1470c:	4621      	mov	r1, r4
   1470e:	2301      	movs	r3, #1
   14710:	f10d 020b 	add.w	r2, sp, #11
   14714:	4630      	mov	r0, r6
   14716:	f00e fed3 	bl	234c0 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1471a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1471c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1471e:	dc03      	bgt.n	14728 <settings_nvs_load+0x54>
   14720:	2800      	cmp	r0, #0
   14722:	dc03      	bgt.n	1472c <settings_nvs_load+0x58>
{
   14724:	462c      	mov	r4, r5
   14726:	e7e1      	b.n	146ec <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   14728:	2800      	cmp	r0, #0
   1472a:	dc16      	bgt.n	1475a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   1472c:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   14730:	42ab      	cmp	r3, r5
   14732:	d109      	bne.n	14748 <settings_nvs_load+0x74>
				cf->last_name_id--;
   14734:	4642      	mov	r2, r8
   14736:	1e6b      	subs	r3, r5, #1
   14738:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1473c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   14740:	2302      	movs	r3, #2
   14742:	4630      	mov	r0, r6
   14744:	f7ff fca8 	bl	14098 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   14748:	4629      	mov	r1, r5
   1474a:	4630      	mov	r0, r6
   1474c:	f00e feb4 	bl	234b8 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   14750:	4621      	mov	r1, r4
   14752:	4630      	mov	r0, r6
   14754:	f00e feb0 	bl	234b8 <nvs_delete>
			continue;
   14758:	e7e4      	b.n	14724 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   1475a:	ab18      	add	r3, sp, #96	; 0x60
   1475c:	441f      	add	r7, r3
   1475e:	2300      	movs	r3, #0
   14760:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   14764:	4652      	mov	r2, sl
   14766:	f8cd 9000 	str.w	r9, [sp]
   1476a:	ab03      	add	r3, sp, #12
   1476c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   1476e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   14770:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   14774:	f7ff ff10 	bl	14598 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   14778:	2800      	cmp	r0, #0
   1477a:	d0d3      	beq.n	14724 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   1477c:	b018      	add	sp, #96	; 0x60
   1477e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14782:	2000      	movs	r0, #0
	return ret;
   14784:	e7fa      	b.n	1477c <settings_nvs_load+0xa8>
   14786:	bf00      	nop
   14788:	0002358f 	.word	0x0002358f

0001478c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   1478c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   1478e:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   14790:	4669      	mov	r1, sp
   14792:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   14794:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   14796:	f7ff fdcf 	bl	14338 <flash_area_open>
	if (rc) {
   1479a:	4604      	mov	r4, r0
   1479c:	2800      	cmp	r0, #0
   1479e:	d136      	bne.n	1480e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   147a0:	aa02      	add	r2, sp, #8
   147a2:	a901      	add	r1, sp, #4
   147a4:	2004      	movs	r0, #4
   147a6:	f7ff fddb 	bl	14360 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   147aa:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   147ae:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   147b0:	d02d      	beq.n	1480e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   147b2:	b138      	cbz	r0, 147c4 <settings_backend_init+0x38>
   147b4:	340c      	adds	r4, #12
   147b6:	d005      	beq.n	147c4 <settings_backend_init+0x38>
		k_panic();
   147b8:	4040      	eors	r0, r0
   147ba:	f380 8811 	msr	BASEPRI, r0
   147be:	f04f 0004 	mov.w	r0, #4
   147c2:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   147c4:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   147c6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   147ca:	d223      	bcs.n	14814 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   147cc:	9a00      	ldr	r2, [sp, #0]
   147ce:	2300      	movs	r3, #0
   147d0:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   147d2:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   147d4:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   147d6:	4285      	cmp	r5, r0
   147d8:	b29c      	uxth	r4, r3
   147da:	d303      	bcc.n	147e4 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   147dc:	3301      	adds	r3, #1
   147de:	2b08      	cmp	r3, #8
   147e0:	d1f8      	bne.n	147d4 <settings_backend_init+0x48>
   147e2:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   147e4:	4d0d      	ldr	r5, [pc, #52]	; (1481c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   147e6:	6853      	ldr	r3, [r2, #4]
   147e8:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   147ea:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   147ec:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   147ee:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   147f0:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   147f2:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   147f4:	f00e ff60 	bl	236b8 <settings_nvs_backend_init>
	if (rc) {
   147f8:	4604      	mov	r4, r0
   147fa:	b940      	cbnz	r0, 1480e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   147fc:	4e08      	ldr	r6, [pc, #32]	; (14820 <settings_backend_init+0x94>)
   147fe:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   14800:	4628      	mov	r0, r5
   14802:	f7ff fdfb 	bl	143fc <settings_src_register>
	settings_dst_register(&cf->cf_store);
   14806:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   14808:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1480a:	f7ff fe05 	bl	14418 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   1480e:	4620      	mov	r0, r4
   14810:	b004      	add	sp, #16
   14812:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   14814:	f06f 0424 	mvn.w	r4, #36	; 0x24
   14818:	e7f9      	b.n	1480e <settings_backend_init+0x82>
   1481a:	bf00      	nop
   1481c:	200027a8 	.word	0x200027a8
   14820:	20000594 	.word	0x20000594

00014824 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   14824:	b510      	push	{r4, lr}
   14826:	4807      	ldr	r0, [pc, #28]	; (14844 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   14828:	4c07      	ldr	r4, [pc, #28]	; (14848 <uart_console_init+0x24>)
   1482a:	f00b faaf 	bl	1fd8c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1482e:	4b07      	ldr	r3, [pc, #28]	; (1484c <uart_console_init+0x28>)
   14830:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   14832:	4620      	mov	r0, r4
   14834:	f001 fa04 	bl	15c40 <__stdout_hook_install>
	__printk_hook_install(console_out);
   14838:	4620      	mov	r0, r4
   1483a:	f7fe fa7f 	bl	12d3c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   1483e:	2000      	movs	r0, #0
   14840:	bd10      	pop	{r4, pc}
   14842:	bf00      	nop
   14844:	00027f02 	.word	0x00027f02
   14848:	00014851 	.word	0x00014851
   1484c:	200027e8 	.word	0x200027e8

00014850 <console_out>:
	if ('\n' == c) {
   14850:	280a      	cmp	r0, #10
{
   14852:	b538      	push	{r3, r4, r5, lr}
   14854:	4d07      	ldr	r5, [pc, #28]	; (14874 <console_out+0x24>)
   14856:	4604      	mov	r4, r0
	if ('\n' == c) {
   14858:	d104      	bne.n	14864 <console_out+0x14>
   1485a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1485c:	6883      	ldr	r3, [r0, #8]
   1485e:	210d      	movs	r1, #13
   14860:	685b      	ldr	r3, [r3, #4]
   14862:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   14864:	6828      	ldr	r0, [r5, #0]
   14866:	6883      	ldr	r3, [r0, #8]
   14868:	b2e1      	uxtb	r1, r4
   1486a:	685b      	ldr	r3, [r3, #4]
   1486c:	4798      	blx	r3
}
   1486e:	4620      	mov	r0, r4
   14870:	bd38      	pop	{r3, r4, r5, pc}
   14872:	bf00      	nop
   14874:	200027e8 	.word	0x200027e8

00014878 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1487c:	4c0e      	ldr	r4, [pc, #56]	; (148b8 <onoff_start+0x40>)
   1487e:	1b05      	subs	r5, r0, r4
   14880:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   14884:	250c      	movs	r5, #12
   14886:	435d      	muls	r5, r3
{
   14888:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   1488a:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   1488e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   14890:	4420      	add	r0, r4
   14892:	2140      	movs	r1, #64	; 0x40
   14894:	f00e ff2c 	bl	236f0 <set_starting_state>
	if (err < 0) {
   14898:	1e01      	subs	r1, r0, #0
   1489a:	db08      	blt.n	148ae <onoff_start+0x36>
	subdata->cb = cb;
   1489c:	4b07      	ldr	r3, [pc, #28]	; (148bc <onoff_start+0x44>)
   1489e:	442c      	add	r4, r5
	subdata->user_data = user_data;
   148a0:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   148a4:	4b06      	ldr	r3, [pc, #24]	; (148c0 <onoff_start+0x48>)
   148a6:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   148a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   148ac:	4718      	bx	r3
		notify(mgr, err);
   148ae:	4638      	mov	r0, r7
   148b0:	4633      	mov	r3, r6
}
   148b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   148b6:	4718      	bx	r3
   148b8:	200027fc 	.word	0x200027fc
   148bc:	00023753 	.word	0x00023753
   148c0:	00027328 	.word	0x00027328

000148c4 <get_status>:
{
   148c4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   148c6:	b2cc      	uxtb	r4, r1
   148c8:	2c01      	cmp	r4, #1
{
   148ca:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   148cc:	d908      	bls.n	148e0 <get_status+0x1c>
   148ce:	4908      	ldr	r1, [pc, #32]	; (148f0 <get_status+0x2c>)
   148d0:	4808      	ldr	r0, [pc, #32]	; (148f4 <get_status+0x30>)
   148d2:	227d      	movs	r2, #125	; 0x7d
   148d4:	f00e fa2a 	bl	22d2c <printk>
   148d8:	4805      	ldr	r0, [pc, #20]	; (148f0 <get_status+0x2c>)
   148da:	217d      	movs	r1, #125	; 0x7d
   148dc:	f00e fc89 	bl	231f2 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   148e0:	68eb      	ldr	r3, [r5, #12]
   148e2:	210c      	movs	r1, #12
   148e4:	fb04 3401 	mla	r4, r4, r1, r3
   148e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   148ea:	f000 0007 	and.w	r0, r0, #7
   148ee:	bd38      	pop	{r3, r4, r5, pc}
   148f0:	00027f09 	.word	0x00027f09
   148f4:	00027c9a 	.word	0x00027c9a

000148f8 <stop>:
{
   148f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   148fa:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   148fc:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   148fe:	68c7      	ldr	r7, [r0, #12]
{
   14900:	4605      	mov	r5, r0
   14902:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   14904:	d90a      	bls.n	1491c <stop+0x24>
   14906:	4918      	ldr	r1, [pc, #96]	; (14968 <stop+0x70>)
   14908:	4818      	ldr	r0, [pc, #96]	; (1496c <stop+0x74>)
   1490a:	f240 1245 	movw	r2, #325	; 0x145
   1490e:	f00e fa0d 	bl	22d2c <printk>
   14912:	4815      	ldr	r0, [pc, #84]	; (14968 <stop+0x70>)
   14914:	f240 1145 	movw	r1, #325	; 0x145
   14918:	f00e fc6b 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   1491c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14920:	f3ef 8211 	mrs	r2, BASEPRI
   14924:	f383 8811 	msr	BASEPRI, r3
   14928:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1492c:	230c      	movs	r3, #12
   1492e:	fb03 7104 	mla	r1, r3, r4, r7
   14932:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   14934:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   14938:	d001      	beq.n	1493e <stop+0x46>
   1493a:	428e      	cmp	r6, r1
   1493c:	d111      	bne.n	14962 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1493e:	fb03 7304 	mla	r3, r3, r4, r7
   14942:	2101      	movs	r1, #1
   14944:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   14946:	2000      	movs	r0, #0
	__asm__ volatile(
   14948:	f382 8811 	msr	BASEPRI, r2
   1494c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   14950:	b930      	cbnz	r0, 14960 <stop+0x68>
	get_sub_config(dev, type)->stop();
   14952:	6869      	ldr	r1, [r5, #4]
   14954:	230c      	movs	r3, #12
   14956:	fb03 1404 	mla	r4, r3, r4, r1
   1495a:	6863      	ldr	r3, [r4, #4]
   1495c:	4798      	blx	r3
	return 0;
   1495e:	2000      	movs	r0, #0
}
   14960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   14962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14966:	e7ef      	b.n	14948 <stop+0x50>
   14968:	00027f09 	.word	0x00027f09
   1496c:	00027c9a 	.word	0x00027c9a

00014970 <onoff_stop>:
{
   14970:	b570      	push	{r4, r5, r6, lr}
   14972:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   14974:	4906      	ldr	r1, [pc, #24]	; (14990 <onoff_stop+0x20>)
   14976:	1a41      	subs	r1, r0, r1
{
   14978:	4604      	mov	r4, r0
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   1497a:	1149      	asrs	r1, r1, #5
   1497c:	4805      	ldr	r0, [pc, #20]	; (14994 <onoff_stop+0x24>)
   1497e:	2240      	movs	r2, #64	; 0x40
   14980:	f7ff ffba 	bl	148f8 <stop>
	notify(mgr, res);
   14984:	462b      	mov	r3, r5
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   14986:	4601      	mov	r1, r0
	notify(mgr, res);
   14988:	4620      	mov	r0, r4
}
   1498a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1498e:	4718      	bx	r3
   14990:	200027fc 	.word	0x200027fc
   14994:	2000079c 	.word	0x2000079c

00014998 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14998:	2200      	movs	r2, #0
{
   1499a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1499c:	2101      	movs	r1, #1
{
   1499e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   149a0:	4610      	mov	r0, r2
   149a2:	f000 fc85 	bl	152b0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   149a6:	2000      	movs	r0, #0
   149a8:	f000 fc72 	bl	15290 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   149ac:	480f      	ldr	r0, [pc, #60]	; (149ec <clk_init+0x54>)
   149ae:	f00a fe03 	bl	1f5b8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   149b2:	4b0f      	ldr	r3, [pc, #60]	; (149f0 <clk_init+0x58>)
   149b4:	4298      	cmp	r0, r3
   149b6:	d115      	bne.n	149e4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   149b8:	f012 f826 	bl	26a08 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   149bc:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   149be:	490d      	ldr	r1, [pc, #52]	; (149f4 <clk_init+0x5c>)
   149c0:	4630      	mov	r0, r6
   149c2:	f00e fa0e 	bl	22de2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   149c6:	2800      	cmp	r0, #0
   149c8:	db0b      	blt.n	149e2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   149ca:	2501      	movs	r5, #1
   149cc:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   149ce:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   149d0:	4908      	ldr	r1, [pc, #32]	; (149f4 <clk_init+0x5c>)
   149d2:	f104 0020 	add.w	r0, r4, #32
   149d6:	f00e fa04 	bl	22de2 <onoff_manager_init>
		if (err < 0) {
   149da:	2800      	cmp	r0, #0
   149dc:	db01      	blt.n	149e2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   149de:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   149e0:	2000      	movs	r0, #0
}
   149e2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   149e4:	f06f 0004 	mvn.w	r0, #4
   149e8:	e7fb      	b.n	149e2 <clk_init+0x4a>
   149ea:	bf00      	nop
   149ec:	00014a2d 	.word	0x00014a2d
   149f0:	0bad0000 	.word	0x0bad0000
   149f4:	00027340 	.word	0x00027340

000149f8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   149f8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   149fa:	230c      	movs	r3, #12
   149fc:	4809      	ldr	r0, [pc, #36]	; (14a24 <clkstarted_handle.constprop.0+0x2c>)
   149fe:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   14a00:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   14a02:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   14a04:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   14a08:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   14a0a:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   14a0c:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   14a0e:	4418      	add	r0, r3
   14a10:	f00e fe8c 	bl	2372c <set_on_state>
	if (callback) {
   14a14:	b12d      	cbz	r5, 14a22 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14a16:	4632      	mov	r2, r6
   14a18:	462b      	mov	r3, r5
   14a1a:	4803      	ldr	r0, [pc, #12]	; (14a28 <clkstarted_handle.constprop.0+0x30>)
}
   14a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   14a20:	4718      	bx	r3
}
   14a22:	bd70      	pop	{r4, r5, r6, pc}
   14a24:	200027fc 	.word	0x200027fc
   14a28:	2000079c 	.word	0x2000079c

00014a2c <clock_event_handler>:
	switch (event) {
   14a2c:	2801      	cmp	r0, #1
{
   14a2e:	b508      	push	{r3, lr}
	switch (event) {
   14a30:	d006      	beq.n	14a40 <clock_event_handler+0x14>
   14a32:	2803      	cmp	r0, #3
   14a34:	d008      	beq.n	14a48 <clock_event_handler+0x1c>
   14a36:	b9a0      	cbnz	r0, 14a62 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   14a38:	4b0f      	ldr	r3, [pc, #60]	; (14a78 <clock_event_handler+0x4c>)
   14a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14a3c:	075b      	lsls	r3, r3, #29
   14a3e:	d119      	bne.n	14a74 <clock_event_handler+0x48>
}
   14a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14a44:	f7ff bfd8 	b.w	149f8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   14a48:	490c      	ldr	r1, [pc, #48]	; (14a7c <clock_event_handler+0x50>)
   14a4a:	480d      	ldr	r0, [pc, #52]	; (14a80 <clock_event_handler+0x54>)
   14a4c:	f240 2252 	movw	r2, #594	; 0x252
   14a50:	f00e f96c 	bl	22d2c <printk>
   14a54:	f240 2152 	movw	r1, #594	; 0x252
}
   14a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   14a5c:	4807      	ldr	r0, [pc, #28]	; (14a7c <clock_event_handler+0x50>)
   14a5e:	f00e bbc8 	b.w	231f2 <assert_post_action>
   14a62:	4906      	ldr	r1, [pc, #24]	; (14a7c <clock_event_handler+0x50>)
   14a64:	4806      	ldr	r0, [pc, #24]	; (14a80 <clock_event_handler+0x54>)
   14a66:	f240 2256 	movw	r2, #598	; 0x256
   14a6a:	f00e f95f 	bl	22d2c <printk>
   14a6e:	f240 2156 	movw	r1, #598	; 0x256
   14a72:	e7f1      	b.n	14a58 <clock_event_handler+0x2c>
}
   14a74:	bd08      	pop	{r3, pc}
   14a76:	bf00      	nop
   14a78:	200027fc 	.word	0x200027fc
   14a7c:	00027f09 	.word	0x00027f09
   14a80:	00027c9a 	.word	0x00027c9a

00014a84 <generic_hfclk_start>:
{
   14a84:	b508      	push	{r3, lr}
	__asm__ volatile(
   14a86:	f04f 0340 	mov.w	r3, #64	; 0x40
   14a8a:	f3ef 8111 	mrs	r1, BASEPRI
   14a8e:	f383 8811 	msr	BASEPRI, r3
   14a92:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14a96:	4a12      	ldr	r2, [pc, #72]	; (14ae0 <generic_hfclk_start+0x5c>)
   14a98:	6813      	ldr	r3, [r2, #0]
   14a9a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   14a9e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   14aa2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14aa4:	d00c      	beq.n	14ac0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14aaa:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14aae:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   14ab2:	f013 0301 	ands.w	r3, r3, #1
   14ab6:	d003      	beq.n	14ac0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   14ab8:	480a      	ldr	r0, [pc, #40]	; (14ae4 <generic_hfclk_start+0x60>)
   14aba:	f00e fe37 	bl	2372c <set_on_state>
			already_started = true;
   14abe:	2301      	movs	r3, #1
	__asm__ volatile(
   14ac0:	f381 8811 	msr	BASEPRI, r1
   14ac4:	f3bf 8f6f 	isb	sy
	if (already_started) {
   14ac8:	b123      	cbz	r3, 14ad4 <generic_hfclk_start+0x50>
}
   14aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   14ace:	2000      	movs	r0, #0
   14ad0:	f7ff bf92 	b.w	149f8 <clkstarted_handle.constprop.0>
}
   14ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14ad8:	2001      	movs	r0, #1
   14ada:	f00a bd33 	b.w	1f544 <nrfx_clock_start>
   14ade:	bf00      	nop
   14ae0:	20002854 	.word	0x20002854
   14ae4:	20002844 	.word	0x20002844

00014ae8 <lfclk_start>:
{
   14ae8:	b510      	push	{r4, lr}
	if (!once) {
   14aea:	4c07      	ldr	r4, [pc, #28]	; (14b08 <lfclk_start+0x20>)
   14aec:	7823      	ldrb	r3, [r4, #0]
   14aee:	b92b      	cbnz	r3, 14afc <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   14af0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   14af4:	f012 f879 	bl	26bea <z_impl_k_busy_wait>
		once = true;
   14af8:	2301      	movs	r3, #1
   14afa:	7023      	strb	r3, [r4, #0]
}
   14afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14b00:	2000      	movs	r0, #0
   14b02:	f00a bd1f 	b.w	1f544 <nrfx_clock_start>
   14b06:	bf00      	nop
   14b08:	20002b9d 	.word	0x20002b9d

00014b0c <generic_hfclk_stop>:
   14b0c:	4b09      	ldr	r3, [pc, #36]	; (14b34 <generic_hfclk_stop+0x28>)
   14b0e:	f3bf 8f5b 	dmb	ish
   14b12:	e853 2f00 	ldrex	r2, [r3]
   14b16:	f022 0102 	bic.w	r1, r2, #2
   14b1a:	e843 1000 	strex	r0, r1, [r3]
   14b1e:	2800      	cmp	r0, #0
   14b20:	d1f7      	bne.n	14b12 <generic_hfclk_stop+0x6>
   14b22:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   14b26:	07d3      	lsls	r3, r2, #31
   14b28:	d402      	bmi.n	14b30 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14b2a:	2001      	movs	r0, #1
   14b2c:	f00a bd2c 	b.w	1f588 <nrfx_clock_stop>
}
   14b30:	4770      	bx	lr
   14b32:	bf00      	nop
   14b34:	20002854 	.word	0x20002854

00014b38 <api_blocking_start>:
{
   14b38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14b3a:	2200      	movs	r2, #0
   14b3c:	2301      	movs	r3, #1
   14b3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14b42:	ab04      	add	r3, sp, #16
   14b44:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14b48:	4a09      	ldr	r2, [pc, #36]	; (14b70 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14b4a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14b4e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14b50:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14b54:	f00e fe0c 	bl	23770 <api_start>
	if (err < 0) {
   14b58:	2800      	cmp	r0, #0
   14b5a:	db05      	blt.n	14b68 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   14b5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14b60:	2300      	movs	r3, #0
   14b62:	4668      	mov	r0, sp
   14b64:	f00c ff80 	bl	21a68 <z_impl_k_sem_take>
}
   14b68:	b007      	add	sp, #28
   14b6a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b6e:	bf00      	nop
   14b70:	00023765 	.word	0x00023765

00014b74 <z_nrf_clock_control_lf_on>:
{
   14b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14b78:	4948      	ldr	r1, [pc, #288]	; (14c9c <z_nrf_clock_control_lf_on+0x128>)
   14b7a:	f3bf 8f5b 	dmb	ish
   14b7e:	4605      	mov	r5, r0
   14b80:	2201      	movs	r2, #1
   14b82:	e851 3f00 	ldrex	r3, [r1]
   14b86:	e841 2000 	strex	r0, r2, [r1]
   14b8a:	2800      	cmp	r0, #0
   14b8c:	d1f9      	bne.n	14b82 <z_nrf_clock_control_lf_on+0xe>
   14b8e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   14b92:	b99b      	cbnz	r3, 14bbc <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   14b94:	4942      	ldr	r1, [pc, #264]	; (14ca0 <z_nrf_clock_control_lf_on+0x12c>)
		err = onoff_request(mgr, &cli);
   14b96:	4843      	ldr	r0, [pc, #268]	; (14ca4 <z_nrf_clock_control_lf_on+0x130>)
   14b98:	604b      	str	r3, [r1, #4]
   14b9a:	60cb      	str	r3, [r1, #12]
   14b9c:	608a      	str	r2, [r1, #8]
   14b9e:	f7fe fad9 	bl	13154 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   14ba2:	2800      	cmp	r0, #0
   14ba4:	da0a      	bge.n	14bbc <z_nrf_clock_control_lf_on+0x48>
   14ba6:	4940      	ldr	r1, [pc, #256]	; (14ca8 <z_nrf_clock_control_lf_on+0x134>)
   14ba8:	4840      	ldr	r0, [pc, #256]	; (14cac <z_nrf_clock_control_lf_on+0x138>)
   14baa:	f44f 7206 	mov.w	r2, #536	; 0x218
   14bae:	f00e f8bd 	bl	22d2c <printk>
   14bb2:	483d      	ldr	r0, [pc, #244]	; (14ca8 <z_nrf_clock_control_lf_on+0x134>)
   14bb4:	f44f 7106 	mov.w	r1, #536	; 0x218
   14bb8:	f00e fb1b 	bl	231f2 <assert_post_action>
	switch (start_mode) {
   14bbc:	b3ad      	cbz	r5, 14c2a <z_nrf_clock_control_lf_on+0xb6>
   14bbe:	1e6b      	subs	r3, r5, #1
   14bc0:	2b01      	cmp	r3, #1
   14bc2:	d856      	bhi.n	14c72 <z_nrf_clock_control_lf_on+0xfe>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   14bc4:	2d01      	cmp	r5, #1
   14bc6:	d107      	bne.n	14bd8 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14bcc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   14bd0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14bd4:	2b01      	cmp	r3, #1
   14bd6:	d028      	beq.n	14c2a <z_nrf_clock_control_lf_on+0xb6>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14bd8:	f012 f801 	bl	26bde <k_is_in_isr>
   14bdc:	4604      	mov	r4, r0
   14bde:	b918      	cbnz	r0, 14be8 <z_nrf_clock_control_lf_on+0x74>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   14be0:	4b33      	ldr	r3, [pc, #204]	; (14cb0 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   14be2:	781b      	ldrb	r3, [r3, #0]
   14be4:	2b00      	cmp	r3, #0
   14be6:	d151      	bne.n	14c8c <z_nrf_clock_control_lf_on+0x118>
	__asm__ volatile(
   14be8:	f04f 0340 	mov.w	r3, #64	; 0x40
   14bec:	f3ef 8611 	mrs	r6, BASEPRI
   14bf0:	f383 8811 	msr	BASEPRI, r3
   14bf4:	f3bf 8f6f 	isb	sy
   14bf8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14bfa:	4f2e      	ldr	r7, [pc, #184]	; (14cb4 <z_nrf_clock_control_lf_on+0x140>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14bfc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 14cb8 <z_nrf_clock_control_lf_on+0x144>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c00:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 14cbc <z_nrf_clock_control_lf_on+0x148>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14c08:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14c0c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   14c10:	03d2      	lsls	r2, r2, #15
   14c12:	d50c      	bpl.n	14c2e <z_nrf_clock_control_lf_on+0xba>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   14c14:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   14c18:	2b01      	cmp	r3, #1
   14c1a:	d001      	beq.n	14c20 <z_nrf_clock_control_lf_on+0xac>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14c1c:	2d01      	cmp	r5, #1
   14c1e:	d106      	bne.n	14c2e <z_nrf_clock_control_lf_on+0xba>
	if (isr_mode) {
   14c20:	b30c      	cbz	r4, 14c66 <z_nrf_clock_control_lf_on+0xf2>
	__asm__ volatile(
   14c22:	f386 8811 	msr	BASEPRI, r6
   14c26:	f3bf 8f6f 	isb	sy
}
   14c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   14c2e:	b1ac      	cbz	r4, 14c5c <z_nrf_clock_control_lf_on+0xe8>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14c30:	4630      	mov	r0, r6
   14c32:	f000 fc67 	bl	15504 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14c3a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14c3e:	2b00      	cmp	r3, #0
   14c40:	d1e0      	bne.n	14c04 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14c42:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   14c44:	2900      	cmp	r1, #0
   14c46:	d0dd      	beq.n	14c04 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c48:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   14c4a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   14c4c:	2301      	movs	r3, #1
   14c4e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   14c52:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c56:	f8c9 3000 	str.w	r3, [r9]
}
   14c5a:	e7d3      	b.n	14c04 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
   14c5c:	2100      	movs	r1, #0
   14c5e:	2021      	movs	r0, #33	; 0x21
   14c60:	f00c fe92 	bl	21988 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14c64:	e7e7      	b.n	14c36 <z_nrf_clock_control_lf_on+0xc2>
    p_reg->INTENSET = mask;
   14c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14c6a:	2202      	movs	r2, #2
   14c6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14c70:	e7db      	b.n	14c2a <z_nrf_clock_control_lf_on+0xb6>
		__ASSERT_NO_MSG(false);
   14c72:	490d      	ldr	r1, [pc, #52]	; (14ca8 <z_nrf_clock_control_lf_on+0x134>)
   14c74:	480d      	ldr	r0, [pc, #52]	; (14cac <z_nrf_clock_control_lf_on+0x138>)
   14c76:	f240 222a 	movw	r2, #554	; 0x22a
   14c7a:	f00e f857 	bl	22d2c <printk>
}
   14c7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   14c82:	4809      	ldr	r0, [pc, #36]	; (14ca8 <z_nrf_clock_control_lf_on+0x134>)
   14c84:	f240 212a 	movw	r1, #554	; 0x22a
   14c88:	f00e bab3 	b.w	231f2 <assert_post_action>
    p_reg->INTENCLR = mask;
   14c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14c90:	2202      	movs	r2, #2
   14c92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   14c96:	4606      	mov	r6, r0
}
   14c98:	e7af      	b.n	14bfa <z_nrf_clock_control_lf_on+0x86>
   14c9a:	bf00      	nop
   14c9c:	20002858 	.word	0x20002858
   14ca0:	200027ec 	.word	0x200027ec
   14ca4:	2000281c 	.word	0x2000281c
   14ca8:	00027f09 	.word	0x00027f09
   14cac:	00027c9a 	.word	0x00027c9a
   14cb0:	20003570 	.word	0x20003570
   14cb4:	40000104 	.word	0x40000104
   14cb8:	e000e100 	.word	0xe000e100
   14cbc:	40000008 	.word	0x40000008

00014cc0 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   14cc0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   14cc2:	4c06      	ldr	r4, [pc, #24]	; (14cdc <z_clock_isr+0x1c>)
   14cc4:	4806      	ldr	r0, [pc, #24]	; (14ce0 <z_clock_isr+0x20>)
   14cc6:	4621      	mov	r1, r4
   14cc8:	2217      	movs	r2, #23
   14cca:	f00e f82f 	bl	22d2c <printk>
   14cce:	4620      	mov	r0, r4
   14cd0:	2117      	movs	r1, #23
}
   14cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   14cd6:	f00e ba8c 	b.w	231f2 <assert_post_action>
   14cda:	bf00      	nop
   14cdc:	00027f66 	.word	0x00027f66
   14ce0:	00027c9a 	.word	0x00027c9a

00014ce4 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   14ce4:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   14ce6:	4b08      	ldr	r3, [pc, #32]	; (14d08 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14ce8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14cec:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   14cf0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   14cf4:	4290      	cmp	r0, r2
   14cf6:	d100      	bne.n	14cfa <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   14cf8:	4770      	bx	lr
   14cfa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   14cfe:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14d00:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14d04:	e7f2      	b.n	14cec <handle_next_cycle_case+0x8>
   14d06:	bf00      	nop
   14d08:	40011000 	.word	0x40011000

00014d0c <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14d0c:	4b07      	ldr	r3, [pc, #28]	; (14d2c <rtc_nrf_isr+0x20>)
   14d0e:	2200      	movs	r2, #0
   14d10:	601a      	str	r2, [r3, #0]
   14d12:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   14d14:	4a06      	ldr	r2, [pc, #24]	; (14d30 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   14d16:	4b07      	ldr	r3, [pc, #28]	; (14d34 <rtc_nrf_isr+0x28>)
   14d18:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   14d1c:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   14d1e:	1ac0      	subs	r0, r0, r3
   14d20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   14d24:	4403      	add	r3, r0
   14d26:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   14d28:	f00d bb38 	b.w	2239c <z_clock_announce>
   14d2c:	40011140 	.word	0x40011140
   14d30:	2000285c 	.word	0x2000285c
   14d34:	40011000 	.word	0x40011000

00014d38 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   14d38:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   14d3a:	4d10      	ldr	r5, [pc, #64]	; (14d7c <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14d3c:	4b10      	ldr	r3, [pc, #64]	; (14d80 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   14d3e:	2400      	movs	r4, #0
   14d40:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14d44:	601c      	str	r4, [r3, #0]
   14d46:	681b      	ldr	r3, [r3, #0]
   14d48:	4b0e      	ldr	r3, [pc, #56]	; (14d84 <z_clock_driver_init+0x4c>)
   14d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   14d4e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   14d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14d56:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   14d5a:	4622      	mov	r2, r4
   14d5c:	2101      	movs	r1, #1
   14d5e:	2011      	movs	r0, #17
   14d60:	f000 faa6 	bl	152b0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   14d64:	2011      	movs	r0, #17
   14d66:	f000 fa93 	bl	15290 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14d6a:	4a07      	ldr	r2, [pc, #28]	; (14d88 <z_clock_driver_init+0x50>)
   14d6c:	2301      	movs	r3, #1
   14d6e:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   14d70:	2002      	movs	r0, #2
   14d72:	602b      	str	r3, [r5, #0]
   14d74:	f7ff fefe 	bl	14b74 <z_nrf_clock_control_lf_on>

	return 0;
}
   14d78:	4620      	mov	r0, r4
   14d7a:	bd38      	pop	{r3, r4, r5, pc}
   14d7c:	40011000 	.word	0x40011000
   14d80:	40011140 	.word	0x40011140
   14d84:	e000e100 	.word	0xe000e100
   14d88:	40011008 	.word	0x40011008

00014d8c <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   14d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14d8e:	4b2d      	ldr	r3, [pc, #180]	; (14e44 <z_clock_set_timeout+0xb8>)
   14d90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14d94:	bf08      	it	eq
   14d96:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   14d98:	3801      	subs	r0, #1
   14d9a:	2800      	cmp	r0, #0
   14d9c:	dd40      	ble.n	14e20 <z_clock_set_timeout+0x94>
   14d9e:	4298      	cmp	r0, r3
   14da0:	bfa8      	it	ge
   14da2:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   14da4:	4c28      	ldr	r4, [pc, #160]	; (14e48 <z_clock_set_timeout+0xbc>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   14da6:	4a29      	ldr	r2, [pc, #164]	; (14e4c <z_clock_set_timeout+0xc0>)
   14da8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   14dac:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14dae:	4e28      	ldr	r6, [pc, #160]	; (14e50 <z_clock_set_timeout+0xc4>)
	return (a - b) & COUNTER_MAX;
   14db0:	1a9b      	subs	r3, r3, r2
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   14db2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   14db6:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
		ticks = 0;
   14dba:	bf18      	it	ne
   14dbc:	2000      	movne	r0, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   14dbe:	3501      	adds	r5, #1
   14dc0:	4428      	add	r0, r5
    p_reg->INTENCLR = mask;
   14dc2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   14dc6:	4d1f      	ldr	r5, [pc, #124]	; (14e44 <z_clock_set_timeout+0xb8>)
   14dc8:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
   14dcc:	42a8      	cmp	r0, r5
   14dce:	bf94      	ite	ls
   14dd0:	1815      	addls	r5, r2, r0
   14dd2:	1955      	addhi	r5, r2, r5
     return p_reg->COUNTER;
   14dd4:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
   14dd8:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14ddc:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
   14dde:	1a9b      	subs	r3, r3, r2
   14de0:	6037      	str	r7, [r6, #0]
   14de2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14de6:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
   14de8:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14dea:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14dee:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14df2:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   14df6:	d104      	bne.n	14e02 <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   14df8:	200f      	movs	r0, #15
   14dfa:	f011 fef6 	bl	26bea <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14dfe:	6037      	str	r7, [r6, #0]
   14e00:	6833      	ldr	r3, [r6, #0]
   14e02:	4b14      	ldr	r3, [pc, #80]	; (14e54 <z_clock_set_timeout+0xc8>)
   14e04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   14e08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   14e0c:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14e10:	1a2b      	subs	r3, r5, r0
   14e12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   14e16:	2b01      	cmp	r3, #1
   14e18:	d104      	bne.n	14e24 <z_clock_set_timeout+0x98>
		handle_next_cycle_case(t);
   14e1a:	f7ff ff63 	bl	14ce4 <handle_next_cycle_case>
   14e1e:	e00b      	b.n	14e38 <z_clock_set_timeout+0xac>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   14e20:	2000      	movs	r0, #0
   14e22:	e7bf      	b.n	14da4 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14e24:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14e28:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   14e2c:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14e30:	1a2d      	subs	r5, r5, r0
   14e32:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
   14e34:	022b      	lsls	r3, r5, #8
   14e36:	d4f0      	bmi.n	14e1a <z_clock_set_timeout+0x8e>
    p_reg->INTENSET = mask;
   14e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14e3c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   14e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e42:	bf00      	nop
   14e44:	007fffff 	.word	0x007fffff
   14e48:	40011000 	.word	0x40011000
   14e4c:	2000285c 	.word	0x2000285c
   14e50:	40011140 	.word	0x40011140
   14e54:	e000e100 	.word	0xe000e100

00014e58 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
   14e58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14e5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   14e5e:	f3ef 8511 	mrs	r5, BASEPRI
   14e62:	f383 8811 	msr	BASEPRI, r3
   14e66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14e6a:	4815      	ldr	r0, [pc, #84]	; (14ec0 <z_clock_elapsed+0x68>)
   14e6c:	f00c ffb6 	bl	21ddc <z_spin_lock_valid>
   14e70:	b940      	cbnz	r0, 14e84 <z_clock_elapsed+0x2c>
   14e72:	4914      	ldr	r1, [pc, #80]	; (14ec4 <z_clock_elapsed+0x6c>)
   14e74:	4814      	ldr	r0, [pc, #80]	; (14ec8 <z_clock_elapsed+0x70>)
   14e76:	2278      	movs	r2, #120	; 0x78
   14e78:	f00d ff58 	bl	22d2c <printk>
   14e7c:	4811      	ldr	r0, [pc, #68]	; (14ec4 <z_clock_elapsed+0x6c>)
   14e7e:	2178      	movs	r1, #120	; 0x78
   14e80:	f00e f9b7 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   14e84:	480e      	ldr	r0, [pc, #56]	; (14ec0 <z_clock_elapsed+0x68>)
   14e86:	f00c ffc7 	bl	21e18 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   14e8a:	4b10      	ldr	r3, [pc, #64]	; (14ecc <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14e8c:	480c      	ldr	r0, [pc, #48]	; (14ec0 <z_clock_elapsed+0x68>)
   14e8e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   14e92:	4b0f      	ldr	r3, [pc, #60]	; (14ed0 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
   14e94:	681b      	ldr	r3, [r3, #0]
   14e96:	1ae4      	subs	r4, r4, r3
   14e98:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   14e9c:	f00c ffac 	bl	21df8 <z_spin_unlock_valid>
   14ea0:	b940      	cbnz	r0, 14eb4 <z_clock_elapsed+0x5c>
   14ea2:	4908      	ldr	r1, [pc, #32]	; (14ec4 <z_clock_elapsed+0x6c>)
   14ea4:	4808      	ldr	r0, [pc, #32]	; (14ec8 <z_clock_elapsed+0x70>)
   14ea6:	22a3      	movs	r2, #163	; 0xa3
   14ea8:	f00d ff40 	bl	22d2c <printk>
   14eac:	4805      	ldr	r0, [pc, #20]	; (14ec4 <z_clock_elapsed+0x6c>)
   14eae:	21a3      	movs	r1, #163	; 0xa3
   14eb0:	f00e f99f 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   14eb4:	f385 8811 	msr	BASEPRI, r5
   14eb8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   14ebc:	4620      	mov	r0, r4
   14ebe:	bd38      	pop	{r3, r4, r5, pc}
   14ec0:	20002860 	.word	0x20002860
   14ec4:	00027cd4 	.word	0x00027cd4
   14ec8:	00027c9a 	.word	0x00027c9a
   14ecc:	40011000 	.word	0x40011000
   14ed0:	2000285c 	.word	0x2000285c

00014ed4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
   14ed4:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   14ed6:	4c11      	ldr	r4, [pc, #68]	; (14f1c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   14ed8:	4a11      	ldr	r2, [pc, #68]	; (14f20 <_DoInit+0x4c>)
   14eda:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   14edc:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   14ede:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   14ee2:	4b10      	ldr	r3, [pc, #64]	; (14f24 <_DoInit+0x50>)
   14ee4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   14ee6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   14ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
   14eec:	4a0e      	ldr	r2, [pc, #56]	; (14f28 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   14eee:	490f      	ldr	r1, [pc, #60]	; (14f2c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   14ef0:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   14ef2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   14ef4:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   14ef6:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
   14ef8:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   14efa:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   14efc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   14efe:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   14f00:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   14f02:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   14f04:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   14f06:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   14f08:	f00f fda0 	bl	24a4c <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   14f0c:	4908      	ldr	r1, [pc, #32]	; (14f30 <_DoInit+0x5c>)
   14f0e:	4620      	mov	r0, r4
   14f10:	f00f fd9c 	bl	24a4c <strcpy>
  p->acID[6] = ' ';
   14f14:	2320      	movs	r3, #32
   14f16:	71a3      	strb	r3, [r4, #6]
}
   14f18:	bd10      	pop	{r4, pc}
   14f1a:	bf00      	nop
   14f1c:	20002864 	.word	0x20002864
   14f20:	00027fa2 	.word	0x00027fa2
   14f24:	20002bae 	.word	0x20002bae
   14f28:	20002b9e 	.word	0x20002b9e
   14f2c:	00027fab 	.word	0x00027fab
   14f30:	00027faf 	.word	0x00027faf

00014f34 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   14f34:	4b01      	ldr	r3, [pc, #4]	; (14f3c <uECC_get_rng+0x8>)
   14f36:	6818      	ldr	r0, [r3, #0]
   14f38:	4770      	bx	lr
   14f3a:	bf00      	nop
   14f3c:	200005a4 	.word	0x200005a4

00014f40 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   14f40:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   14f42:	2208      	movs	r2, #8
{
   14f44:	b089      	sub	sp, #36	; 0x24
   14f46:	460c      	mov	r4, r1
   14f48:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   14f4a:	f00e fdf5 	bl	23b38 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   14f4e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   14f50:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   14f52:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   14f54:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   14f56:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   14f58:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   14f5a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   14f5c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   14f5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   14f60:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   14f62:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14f64:	2308      	movs	r3, #8
   14f66:	466a      	mov	r2, sp
   14f68:	4669      	mov	r1, sp
   14f6a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   14f6c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   14f70:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14f72:	f00e fce3 	bl	2393c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14f76:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14f78:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14f7a:	466a      	mov	r2, sp
   14f7c:	4631      	mov	r1, r6
   14f7e:	4630      	mov	r0, r6
   14f80:	f00e fcdc 	bl	2393c <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   14f84:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f86:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   14f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14f8a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   14f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14f8e:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   14f90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14f92:	4405      	add	r5, r0
	tmp[7] = 0;
   14f94:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14f98:	466a      	mov	r2, sp
   14f9a:	2308      	movs	r3, #8
   14f9c:	4669      	mov	r1, sp
   14f9e:	4668      	mov	r0, sp
   14fa0:	f00e fccc 	bl	2393c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14fa4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   14fa6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14fa8:	2308      	movs	r3, #8
   14faa:	466a      	mov	r2, sp
   14fac:	4630      	mov	r0, r6
   14fae:	f00e fcc5 	bl	2393c <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   14fb2:	6a23      	ldr	r3, [r4, #32]
   14fb4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   14fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14fb8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   14fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14fbc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   14fbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14fc0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   14fc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14fc4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14fc6:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14fc8:	2308      	movs	r3, #8
   14fca:	466a      	mov	r2, sp
   14fcc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   14fce:	e9cd 7704 	strd	r7, r7, [sp, #16]
   14fd2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14fd4:	f00e fcb2 	bl	2393c <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   14fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14fda:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   14fdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   14fde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   14fe0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   14fe2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14fe4:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   14fe6:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   14fe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   14fea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   14fec:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   14fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   14ff2:	6a23      	ldr	r3, [r4, #32]
   14ff4:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14ff6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14ff8:	2308      	movs	r3, #8
   14ffa:	466a      	mov	r2, sp
   14ffc:	4630      	mov	r0, r6
   14ffe:	f00e fc9d 	bl	2393c <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   15002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15004:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   15006:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15008:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   1500a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1500c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   1500e:	6a23      	ldr	r3, [r4, #32]
   15010:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   15012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15014:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   15016:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   15018:	2308      	movs	r3, #8
   1501a:	466a      	mov	r2, sp
   1501c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   1501e:	e9cd 7704 	strd	r7, r7, [sp, #16]
   15022:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   15024:	f00e fdbe 	bl	23ba4 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   15028:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1502a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   1502c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1502e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   15030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15032:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   15034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15036:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   15038:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1503a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   1503c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1503e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   15040:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   15042:	2308      	movs	r3, #8
   15044:	466a      	mov	r2, sp
   15046:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   15048:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1504c:	f00e fdaa 	bl	23ba4 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   15050:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15052:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   15054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15056:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   15058:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1505a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   1505c:	6a23      	ldr	r3, [r4, #32]
   1505e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   15060:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15062:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   15064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   15066:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   1506a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1506c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1506e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   15070:	2308      	movs	r3, #8
   15072:	466a      	mov	r2, sp
   15074:	4630      	mov	r0, r6
   15076:	f00e fd95 	bl	23ba4 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   1507a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1507c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   1507e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   15080:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   15084:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15086:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   15088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1508a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   1508c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   1508e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   15092:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15094:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   15096:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   15098:	2308      	movs	r3, #8
   1509a:	466a      	mov	r2, sp
   1509c:	4630      	mov	r0, r6
   1509e:	f00e fd81 	bl	23ba4 <uECC_vli_sub>

	if (carry < 0) {
   150a2:	1a2d      	subs	r5, r5, r0
   150a4:	d410      	bmi.n	150c8 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   150a6:	4c0d      	ldr	r4, [pc, #52]	; (150dc <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   150a8:	b935      	cbnz	r5, 150b8 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   150aa:	2208      	movs	r2, #8
   150ac:	4631      	mov	r1, r6
   150ae:	4620      	mov	r0, r4
   150b0:	f00e fd4e 	bl	23b50 <uECC_vli_cmp_unsafe>
		while (carry || 
   150b4:	2801      	cmp	r0, #1
   150b6:	d00f      	beq.n	150d8 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   150b8:	2308      	movs	r3, #8
   150ba:	4622      	mov	r2, r4
   150bc:	4631      	mov	r1, r6
   150be:	4630      	mov	r0, r6
   150c0:	f00e fd70 	bl	23ba4 <uECC_vli_sub>
   150c4:	1a2d      	subs	r5, r5, r0
   150c6:	e7ef      	b.n	150a8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   150c8:	4a04      	ldr	r2, [pc, #16]	; (150dc <vli_mmod_fast_secp256r1+0x19c>)
   150ca:	2308      	movs	r3, #8
   150cc:	4631      	mov	r1, r6
   150ce:	4630      	mov	r0, r6
   150d0:	f00e fc34 	bl	2393c <uECC_vli_add>
		while (carry < 0);
   150d4:	182d      	adds	r5, r5, r0
   150d6:	d4f8      	bmi.n	150ca <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   150d8:	b009      	add	sp, #36	; 0x24
   150da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   150dc:	00027350 	.word	0x00027350

000150e0 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   150e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   150e2:	4e26      	ldr	r6, [pc, #152]	; (1517c <tc_aes128_set_encrypt_key+0x9c>)
{
   150e4:	4607      	mov	r7, r0
   150e6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   150e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   150ea:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   150ec:	ad01      	add	r5, sp, #4
   150ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   150f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   150f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   150f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   150f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   150fc:	4638      	mov	r0, r7
   150fe:	2f00      	cmp	r7, #0
   15100:	d038      	beq.n	15174 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   15102:	2c00      	cmp	r4, #0
   15104:	d038      	beq.n	15178 <tc_aes128_set_encrypt_key+0x98>
   15106:	1f38      	subs	r0, r7, #4
   15108:	4621      	mov	r1, r4
   1510a:	4602      	mov	r2, r0
   1510c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1510e:	784b      	ldrb	r3, [r1, #1]
   15110:	780d      	ldrb	r5, [r1, #0]
   15112:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15114:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   15118:	78cd      	ldrb	r5, [r1, #3]
   1511a:	432b      	orrs	r3, r5
   1511c:	788d      	ldrb	r5, [r1, #2]
   1511e:	3104      	adds	r1, #4
   15120:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   15124:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15126:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1512a:	d1f0      	bne.n	1510e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1512c:	4c14      	ldr	r4, [pc, #80]	; (15180 <tc_aes128_set_encrypt_key+0xa0>)
   1512e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   15130:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   15132:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   15134:	d116      	bne.n	15164 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15136:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1513a:	5ca5      	ldrb	r5, [r4, r2]
   1513c:	0e1a      	lsrs	r2, r3, #24
   1513e:	5ca2      	ldrb	r2, [r4, r2]
   15140:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   15144:	f3c3 2507 	ubfx	r5, r3, #8, #8
   15148:	b2db      	uxtb	r3, r3
   1514a:	5d65      	ldrb	r5, [r4, r5]
   1514c:	5ce3      	ldrb	r3, [r4, r3]
   1514e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   15152:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   15156:	ad0c      	add	r5, sp, #48	; 0x30
   15158:	f021 0303 	bic.w	r3, r1, #3
   1515c:	442b      	add	r3, r5
   1515e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   15162:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   15164:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   15168:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1516a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   1516c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1516e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   15170:	d1de      	bne.n	15130 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   15172:	2001      	movs	r0, #1
}
   15174:	b00d      	add	sp, #52	; 0x34
   15176:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   15178:	4620      	mov	r0, r4
   1517a:	e7fb      	b.n	15174 <tc_aes128_set_encrypt_key+0x94>
   1517c:	00027184 	.word	0x00027184
   15180:	00027fb6 	.word	0x00027fb6

00015184 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   15184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15188:	4615      	mov	r5, r2
   1518a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1518c:	4606      	mov	r6, r0
   1518e:	2800      	cmp	r0, #0
   15190:	d058      	beq.n	15244 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   15192:	2900      	cmp	r1, #0
   15194:	d059      	beq.n	1524a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   15196:	2a00      	cmp	r2, #0
   15198:	d059      	beq.n	1524e <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1519a:	2310      	movs	r3, #16
   1519c:	460a      	mov	r2, r1
   1519e:	4668      	mov	r0, sp
   151a0:	4619      	mov	r1, r3
   151a2:	f00e fb07 	bl	237b4 <_copy>
	add_round_key(state, s->words);
   151a6:	4629      	mov	r1, r5
   151a8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   151aa:	4c2a      	ldr	r4, [pc, #168]	; (15254 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   151ac:	f00f fa0c 	bl	245c8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   151b0:	f105 0710 	add.w	r7, r5, #16
   151b4:	46a1      	mov	r9, r4
   151b6:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   151b8:	46e8      	mov	r8, sp
{
   151ba:	466a      	mov	r2, sp
   151bc:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   151be:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   151c0:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   151c2:	5c61      	ldrb	r1, [r4, r1]
   151c4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   151c8:	d1f9      	bne.n	151be <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   151ca:	4668      	mov	r0, sp
   151cc:	f00f fa41 	bl	24652 <shift_rows>
	mult_row_column(t, s);
   151d0:	4669      	mov	r1, sp
   151d2:	a804      	add	r0, sp, #16
   151d4:	f00f fa76 	bl	246c4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   151d8:	a901      	add	r1, sp, #4
   151da:	a805      	add	r0, sp, #20
   151dc:	f00f fa72 	bl	246c4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   151e0:	a902      	add	r1, sp, #8
   151e2:	a806      	add	r0, sp, #24
   151e4:	f00f fa6e 	bl	246c4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   151e8:	a903      	add	r1, sp, #12
   151ea:	a807      	add	r0, sp, #28
   151ec:	f00f fa6a 	bl	246c4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   151f0:	2310      	movs	r3, #16
   151f2:	4619      	mov	r1, r3
   151f4:	eb0d 0203 	add.w	r2, sp, r3
   151f8:	4668      	mov	r0, sp
   151fa:	f00e fadb 	bl	237b4 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   151fe:	4639      	mov	r1, r7
   15200:	4668      	mov	r0, sp
   15202:	3710      	adds	r7, #16
   15204:	f00f f9e0 	bl	245c8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   15208:	42af      	cmp	r7, r5
   1520a:	d1d5      	bne.n	151b8 <tc_aes_encrypt+0x34>
   1520c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1520e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   15212:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   15214:	f819 3003 	ldrb.w	r3, [r9, r3]
   15218:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   1521c:	d1f7      	bne.n	1520e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1521e:	4668      	mov	r0, sp
   15220:	f00f fa17 	bl	24652 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   15224:	4629      	mov	r1, r5
   15226:	4668      	mov	r0, sp
   15228:	f00f f9ce 	bl	245c8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1522c:	2310      	movs	r3, #16
   1522e:	4619      	mov	r1, r3
   15230:	466a      	mov	r2, sp
   15232:	4630      	mov	r0, r6
   15234:	f00e fabe 	bl	237b4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   15238:	4668      	mov	r0, sp
   1523a:	2210      	movs	r2, #16
   1523c:	4621      	mov	r1, r4
   1523e:	f00e fac6 	bl	237ce <_set>

	return TC_CRYPTO_SUCCESS;
   15242:	2001      	movs	r0, #1
}
   15244:	b009      	add	sp, #36	; 0x24
   15246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1524a:	4608      	mov	r0, r1
   1524c:	e7fa      	b.n	15244 <tc_aes_encrypt+0xc0>
   1524e:	4610      	mov	r0, r2
   15250:	e7f8      	b.n	15244 <tc_aes_encrypt+0xc0>
   15252:	bf00      	nop
   15254:	00027fb6 	.word	0x00027fb6

00015258 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   15258:	4a0a      	ldr	r2, [pc, #40]	; (15284 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1525a:	490b      	ldr	r1, [pc, #44]	; (15288 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1525c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1525e:	6809      	ldr	r1, [r1, #0]
   15260:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15264:	4909      	ldr	r1, [pc, #36]	; (1528c <arch_swap+0x34>)
	_current->arch.basepri = key;
   15266:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1526a:	684b      	ldr	r3, [r1, #4]
   1526c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15270:	604b      	str	r3, [r1, #4]
   15272:	2300      	movs	r3, #0
   15274:	f383 8811 	msr	BASEPRI, r3
   15278:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1527c:	6893      	ldr	r3, [r2, #8]
}
   1527e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   15282:	4770      	bx	lr
   15284:	20002b28 	.word	0x20002b28
   15288:	0002798c 	.word	0x0002798c
   1528c:	e000ed00 	.word	0xe000ed00

00015290 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   15290:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   15292:	2b00      	cmp	r3, #0
   15294:	db08      	blt.n	152a8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15296:	2201      	movs	r2, #1
   15298:	f000 001f 	and.w	r0, r0, #31
   1529c:	fa02 f000 	lsl.w	r0, r2, r0
   152a0:	095b      	lsrs	r3, r3, #5
   152a2:	4a02      	ldr	r2, [pc, #8]	; (152ac <arch_irq_enable+0x1c>)
   152a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   152a8:	4770      	bx	lr
   152aa:	bf00      	nop
   152ac:	e000e100 	.word	0xe000e100

000152b0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   152b0:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (flags & IRQ_ZERO_LATENCY) {
   152b2:	07d3      	lsls	r3, r2, #31
{
   152b4:	4605      	mov	r5, r0
	if (flags & IRQ_ZERO_LATENCY) {
   152b6:	d41e      	bmi.n	152f6 <z_arm_irq_priority_set+0x46>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   152b8:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   152ba:	2c07      	cmp	r4, #7
   152bc:	d908      	bls.n	152d0 <z_arm_irq_priority_set+0x20>
   152be:	490f      	ldr	r1, [pc, #60]	; (152fc <z_arm_irq_priority_set+0x4c>)
   152c0:	480f      	ldr	r0, [pc, #60]	; (15300 <z_arm_irq_priority_set+0x50>)
   152c2:	225b      	movs	r2, #91	; 0x5b
   152c4:	f00d fd32 	bl	22d2c <printk>
   152c8:	480c      	ldr	r0, [pc, #48]	; (152fc <z_arm_irq_priority_set+0x4c>)
   152ca:	215b      	movs	r1, #91	; 0x5b
   152cc:	f00d ff91 	bl	231f2 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   152d0:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   152d2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   152d4:	bfac      	ite	ge
   152d6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   152da:	4b0a      	ldrlt	r3, [pc, #40]	; (15304 <z_arm_irq_priority_set+0x54>)
   152dc:	ea4f 1444 	mov.w	r4, r4, lsl #5
   152e0:	bfb8      	it	lt
   152e2:	f005 050f 	andlt.w	r5, r5, #15
   152e6:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   152e8:	bfaa      	itet	ge
   152ea:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   152ee:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   152f0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   152f4:	bd38      	pop	{r3, r4, r5, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   152f6:	2400      	movs	r4, #0
   152f8:	e7ea      	b.n	152d0 <z_arm_irq_priority_set+0x20>
   152fa:	bf00      	nop
   152fc:	000280b6 	.word	0x000280b6
   15300:	00027c9a 	.word	0x00027c9a
   15304:	e000ed14 	.word	0xe000ed14

00015308 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   15308:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1530a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1530c:	4b04      	ldr	r3, [pc, #16]	; (15320 <_arch_isr_direct_pm+0x18>)
   1530e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   15310:	b118      	cbz	r0, 1531a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   15312:	2200      	movs	r2, #0
   15314:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
   15316:	f011 fbae 	bl	26a76 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1531a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1531c:	bd08      	pop	{r3, pc}
   1531e:	bf00      	nop
   15320:	20002b28 	.word	0x20002b28

00015324 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   15324:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15328:	9b00      	ldr	r3, [sp, #0]
   1532a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1532e:	490a      	ldr	r1, [pc, #40]	; (15358 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   15330:	9b01      	ldr	r3, [sp, #4]
   15332:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15336:	9b02      	ldr	r3, [sp, #8]
   15338:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   1533c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15344:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   15348:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1534c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1534e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   15350:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
   15352:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15356:	4770      	bx	lr
   15358:	00022e09 	.word	0x00022e09

0001535c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1535c:	4a0b      	ldr	r2, [pc, #44]	; (1538c <z_check_thread_stack_fail+0x30>)
{
   1535e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   15360:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
   15362:	b190      	cbz	r0, 1538a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15364:	f113 0f16 	cmn.w	r3, #22
   15368:	6f40      	ldr	r0, [r0, #116]	; 0x74
   1536a:	d005      	beq.n	15378 <z_check_thread_stack_fail+0x1c>
   1536c:	f1a0 0220 	sub.w	r2, r0, #32
   15370:	429a      	cmp	r2, r3
   15372:	d806      	bhi.n	15382 <z_check_thread_stack_fail+0x26>
   15374:	4283      	cmp	r3, r0
   15376:	d204      	bcs.n	15382 <z_check_thread_stack_fail+0x26>
   15378:	4281      	cmp	r1, r0
   1537a:	bf2c      	ite	cs
   1537c:	2100      	movcs	r1, #0
   1537e:	2101      	movcc	r1, #1
   15380:	e000      	b.n	15384 <z_check_thread_stack_fail+0x28>
   15382:	2100      	movs	r1, #0
   15384:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   15386:	bf08      	it	eq
   15388:	2000      	moveq	r0, #0
}
   1538a:	4770      	bx	lr
   1538c:	20002b28 	.word	0x20002b28

00015390 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15390:	b508      	push	{r3, lr}
   15392:	4604      	mov	r4, r0
   15394:	460e      	mov	r6, r1
   15396:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
   15398:	f000 fb2e 	bl	159f8 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1539c:	4b08      	ldr	r3, [pc, #32]	; (153c0 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1539e:	4620      	mov	r0, r4
	_current = main_thread;
   153a0:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
   153a2:	f000 fb45 	bl	15a30 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   153a6:	4628      	mov	r0, r5
   153a8:	f386 8809 	msr	PSP, r6
   153ac:	2100      	movs	r1, #0
   153ae:	b663      	cpsie	if
   153b0:	f381 8811 	msr	BASEPRI, r1
   153b4:	f3bf 8f6f 	isb	sy
   153b8:	2200      	movs	r2, #0
   153ba:	2300      	movs	r3, #0
   153bc:	f00d fd24 	bl	22e08 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   153c0:	20002b28 	.word	0x20002b28

000153c4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   153c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   153c6:	4605      	mov	r5, r0

	if (esf != NULL) {
   153c8:	460c      	mov	r4, r1
   153ca:	b1c9      	cbz	r1, 15400 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   153cc:	688b      	ldr	r3, [r1, #8]
   153ce:	9300      	str	r3, [sp, #0]
   153d0:	e9d1 2300 	ldrd	r2, r3, [r1]
   153d4:	480e      	ldr	r0, [pc, #56]	; (15410 <z_arm_fatal_error+0x4c>)
   153d6:	2145      	movs	r1, #69	; 0x45
   153d8:	f00d fca8 	bl	22d2c <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   153dc:	6963      	ldr	r3, [r4, #20]
   153de:	9300      	str	r3, [sp, #0]
   153e0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   153e4:	480b      	ldr	r0, [pc, #44]	; (15414 <z_arm_fatal_error+0x50>)
   153e6:	2145      	movs	r1, #69	; 0x45
   153e8:	f00d fca0 	bl	22d2c <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   153ec:	69e2      	ldr	r2, [r4, #28]
   153ee:	480a      	ldr	r0, [pc, #40]	; (15418 <z_arm_fatal_error+0x54>)
   153f0:	2145      	movs	r1, #69	; 0x45
   153f2:	f00d fc9b 	bl	22d2c <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   153f6:	69a2      	ldr	r2, [r4, #24]
   153f8:	4808      	ldr	r0, [pc, #32]	; (1541c <z_arm_fatal_error+0x58>)
   153fa:	2145      	movs	r1, #69	; 0x45
   153fc:	f00d fc96 	bl	22d2c <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   15400:	4621      	mov	r1, r4
   15402:	4628      	mov	r0, r5
}
   15404:	b003      	add	sp, #12
   15406:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   1540a:	f00a bced 	b.w	1fde8 <z_fatal_error>
   1540e:	bf00      	nop
   15410:	000280ec 	.word	0x000280ec
   15414:	00028120 	.word	0x00028120
   15418:	00028154 	.word	0x00028154
   1541c:	00028168 	.word	0x00028168

00015420 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15420:	4a0e      	ldr	r2, [pc, #56]	; (1545c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   15422:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15424:	4b0e      	ldr	r3, [pc, #56]	; (15460 <z_arm_prep_c+0x40>)
   15426:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1542a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1542c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15430:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   15434:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   15438:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1543c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15440:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   15444:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   15448:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1544c:	f00a fd64 	bl	1ff18 <z_bss_zero>
	z_data_copy();
   15450:	f00a fd6c 	bl	1ff2c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   15454:	f000 faa2 	bl	1599c <z_arm_interrupt_init>
	z_cstart();
   15458:	f00a fda6 	bl	1ffa8 <z_cstart>
   1545c:	00000000 	.word	0x00000000
   15460:	e000ed00 	.word	0xe000ed00

00015464 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15464:	4913      	ldr	r1, [pc, #76]	; (154b4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15466:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   15468:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
   1546c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1546e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15472:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15476:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15478:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1547c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15480:	4f0d      	ldr	r7, [pc, #52]	; (154b8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15482:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15486:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   15488:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1548a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1548c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
   15490:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   15492:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15496:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1549a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1549c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1549e:	f000 fac7 	bl	15a30 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   154a2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   154a6:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
   154aa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   154ae:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   154b2:	4770      	bx	lr
    ldr r1, =_kernel
   154b4:	20002b28 	.word	0x20002b28
    ldr v4, =_SCS_ICSR
   154b8:	e000ed04 	.word	0xe000ed04

000154bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   154bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   154c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   154c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   154c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   154ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   154cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   154d0:	2902      	cmp	r1, #2
    beq _oops
   154d2:	d0ff      	beq.n	154d4 <_oops>

000154d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   154d4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   154d6:	f00f fa38 	bl	2494a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   154da:	bd01      	pop	{r0, pc}

000154dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   154dc:	4901      	ldr	r1, [pc, #4]	; (154e4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   154de:	2210      	movs	r2, #16
	str	r2, [r1]
   154e0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   154e2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   154e4:	e000ed10 	.word	0xe000ed10

000154e8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   154e8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   154ea:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   154ec:	f380 8811 	msr	BASEPRI, r0
	isb
   154f0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   154f4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   154f8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   154fa:	b662      	cpsie	i
	isb
   154fc:	f3bf 8f6f 	isb	sy

	bx	lr
   15500:	4770      	bx	lr
   15502:	bf00      	nop

00015504 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15504:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   15506:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   15508:	f381 8811 	msr	BASEPRI, r1

	wfe
   1550c:	bf20      	wfe

	msr	BASEPRI, r0
   1550e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   15512:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   15514:	4770      	bx	lr
   15516:	bf00      	nop

00015518 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   15518:	bf30      	wfi
    b z_SysNmiOnReset
   1551a:	f7ff bffd 	b.w	15518 <z_SysNmiOnReset>
   1551e:	bf00      	nop

00015520 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   15520:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   15522:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   15524:	4a0b      	ldr	r2, [pc, #44]	; (15554 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   15526:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   15528:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1552a:	bf1e      	ittt	ne
	movne	r1, #0
   1552c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1552e:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   15530:	f011 faa1 	blne	26a76 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15534:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   15536:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1553a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1553e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15542:	4905      	ldr	r1, [pc, #20]	; (15558 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15544:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   15546:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   15548:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1554a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1554e:	4903      	ldr	r1, [pc, #12]	; (1555c <_isr_wrapper+0x3c>)
	bx r1
   15550:	4708      	bx	r1
   15552:	0000      	.short	0x0000
	ldr r2, =_kernel
   15554:	20002b28 	.word	0x20002b28
	ldr r1, =_sw_isr_table
   15558:	00026eb0 	.word	0x00026eb0
	ldr r1, =z_arm_int_exit
   1555c:	000155a5 	.word	0x000155a5

00015560 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   15560:	f00f fb01 	bl	24b66 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15564:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15566:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1556a:	4808      	ldr	r0, [pc, #32]	; (1558c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1556c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   15570:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15572:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15576:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1557a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1557c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1557e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15582:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15586:	f7ff ff4b 	bl	15420 <z_arm_prep_c>
   1558a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1558c:	200056a0 	.word	0x200056a0

00015590 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15590:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15594:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15598:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1559a:	4672      	mov	r2, lr
	bl z_arm_fault
   1559c:	f000 f934 	bl	15808 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   155a0:	bd01      	pop	{r0, pc}
   155a2:	bf00      	nop

000155a4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   155a4:	4b04      	ldr	r3, [pc, #16]	; (155b8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   155a6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   155a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   155aa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   155ac:	d003      	beq.n	155b6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   155ae:	4903      	ldr	r1, [pc, #12]	; (155bc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   155b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   155b4:	600a      	str	r2, [r1, #0]

000155b6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   155b6:	4770      	bx	lr
	ldr r3, =_kernel
   155b8:	20002b28 	.word	0x20002b28
	ldr r1, =_SCS_ICSR
   155bc:	e000ed04 	.word	0xe000ed04

000155c0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   155c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   155c4:	4c33      	ldr	r4, [pc, #204]	; (15694 <mem_manage_fault+0xd4>)
{
   155c6:	4607      	mov	r7, r0
   155c8:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   155ca:	4833      	ldr	r0, [pc, #204]	; (15698 <mem_manage_fault+0xd8>)
   155cc:	2145      	movs	r1, #69	; 0x45
{
   155ce:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   155d0:	f00d fbac 	bl	22d2c <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   155d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   155d6:	06d6      	lsls	r6, r2, #27
   155d8:	d503      	bpl.n	155e2 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   155da:	4830      	ldr	r0, [pc, #192]	; (1569c <mem_manage_fault+0xdc>)
   155dc:	2145      	movs	r1, #69	; 0x45
   155de:	f00d fba5 	bl	22d2c <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   155e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   155e4:	071c      	lsls	r4, r3, #28
   155e6:	d503      	bpl.n	155f0 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   155e8:	482d      	ldr	r0, [pc, #180]	; (156a0 <mem_manage_fault+0xe0>)
   155ea:	2145      	movs	r1, #69	; 0x45
   155ec:	f00d fb9e 	bl	22d2c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   155f0:	4c28      	ldr	r4, [pc, #160]	; (15694 <mem_manage_fault+0xd4>)
   155f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   155f4:	0798      	lsls	r0, r3, #30
   155f6:	d53e      	bpl.n	15676 <mem_manage_fault+0xb6>
		PR_FAULT_INFO("  Data Access Violation");
   155f8:	2145      	movs	r1, #69	; 0x45
   155fa:	482a      	ldr	r0, [pc, #168]	; (156a4 <mem_manage_fault+0xe4>)
   155fc:	f00d fb96 	bl	22d2c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   15600:	6b66      	ldr	r6, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15604:	0619      	lsls	r1, r3, #24
   15606:	d50b      	bpl.n	15620 <mem_manage_fault+0x60>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15608:	4827      	ldr	r0, [pc, #156]	; (156a8 <mem_manage_fault+0xe8>)
   1560a:	4632      	mov	r2, r6
   1560c:	2145      	movs	r1, #69	; 0x45
   1560e:	f00d fb8d 	bl	22d2c <printk>
			if (from_hard_fault) {
   15612:	f1b8 0f00 	cmp.w	r8, #0
   15616:	d003      	beq.n	15620 <mem_manage_fault+0x60>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1561a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1561e:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   15620:	4c1c      	ldr	r4, [pc, #112]	; (15694 <mem_manage_fault+0xd4>)
   15622:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   15624:	07d2      	lsls	r2, r2, #31
   15626:	d503      	bpl.n	15630 <mem_manage_fault+0x70>
		PR_FAULT_INFO("  Instruction Access Violation");
   15628:	4820      	ldr	r0, [pc, #128]	; (156ac <mem_manage_fault+0xec>)
   1562a:	2145      	movs	r1, #69	; 0x45
   1562c:	f00d fb7e 	bl	22d2c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15632:	069b      	lsls	r3, r3, #26
   15634:	d503      	bpl.n	1563e <mem_manage_fault+0x7e>
		PR_FAULT_INFO(
   15636:	481e      	ldr	r0, [pc, #120]	; (156b0 <mem_manage_fault+0xf0>)
   15638:	2145      	movs	r1, #69	; 0x45
   1563a:	f00d fb77 	bl	22d2c <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   1563e:	4b15      	ldr	r3, [pc, #84]	; (15694 <mem_manage_fault+0xd4>)
   15640:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   15642:	f014 0410 	ands.w	r4, r4, #16
   15646:	d00c      	beq.n	15662 <mem_manage_fault+0xa2>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   15648:	685c      	ldr	r4, [r3, #4]
   1564a:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   1564e:	d008      	beq.n	15662 <mem_manage_fault+0xa2>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   15650:	4639      	mov	r1, r7
   15652:	4630      	mov	r0, r6
   15654:	f7ff fe82 	bl	1535c <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   15658:	4604      	mov	r4, r0
   1565a:	b178      	cbz	r0, 1567c <mem_manage_fault+0xbc>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1565c:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   15660:	2402      	movs	r4, #2
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15662:	4a0c      	ldr	r2, [pc, #48]	; (15694 <mem_manage_fault+0xd4>)
   15664:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15666:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1566a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   1566c:	2300      	movs	r3, #0
   1566e:	702b      	strb	r3, [r5, #0]

	return reason;
}
   15670:	4620      	mov	r0, r4
   15672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t mmfar = -EINVAL;
   15676:	f06f 0615 	mvn.w	r6, #21
   1567a:	e7d1      	b.n	15620 <mem_manage_fault+0x60>
				__ASSERT(0,
   1567c:	490d      	ldr	r1, [pc, #52]	; (156b4 <mem_manage_fault+0xf4>)
   1567e:	480e      	ldr	r0, [pc, #56]	; (156b8 <mem_manage_fault+0xf8>)
   15680:	f44f 729c 	mov.w	r2, #312	; 0x138
   15684:	f00d fb52 	bl	22d2c <printk>
   15688:	480a      	ldr	r0, [pc, #40]	; (156b4 <mem_manage_fault+0xf4>)
   1568a:	f44f 719c 	mov.w	r1, #312	; 0x138
   1568e:	f00d fdb0 	bl	231f2 <assert_post_action>
   15692:	e7e6      	b.n	15662 <mem_manage_fault+0xa2>
   15694:	e000ed00 	.word	0xe000ed00
   15698:	0002819b 	.word	0x0002819b
   1569c:	000281b6 	.word	0x000281b6
   156a0:	000281ee 	.word	0x000281ee
   156a4:	00028206 	.word	0x00028206
   156a8:	00028223 	.word	0x00028223
   156ac:	0002823e 	.word	0x0002823e
   156b0:	00028262 	.word	0x00028262
   156b4:	00028296 	.word	0x00028296
   156b8:	00027c9a 	.word	0x00027c9a

000156bc <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   156bc:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   156be:	4c23      	ldr	r4, [pc, #140]	; (1574c <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   156c0:	4606      	mov	r6, r0
   156c2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   156c4:	4822      	ldr	r0, [pc, #136]	; (15750 <bus_fault.isra.0+0x94>)
   156c6:	2145      	movs	r1, #69	; 0x45
   156c8:	f00d fb30 	bl	22d2c <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   156cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   156ce:	04d1      	lsls	r1, r2, #19
   156d0:	d503      	bpl.n	156da <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   156d2:	4820      	ldr	r0, [pc, #128]	; (15754 <bus_fault.isra.0+0x98>)
   156d4:	2145      	movs	r1, #69	; 0x45
   156d6:	f00d fb29 	bl	22d2c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   156da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   156dc:	051a      	lsls	r2, r3, #20
   156de:	d503      	bpl.n	156e8 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   156e0:	481d      	ldr	r0, [pc, #116]	; (15758 <bus_fault.isra.0+0x9c>)
   156e2:	2145      	movs	r1, #69	; 0x45
   156e4:	f00d fb22 	bl	22d2c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   156e8:	4c18      	ldr	r4, [pc, #96]	; (1574c <bus_fault.isra.0+0x90>)
   156ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   156ec:	059b      	lsls	r3, r3, #22
   156ee:	d510      	bpl.n	15712 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   156f0:	481a      	ldr	r0, [pc, #104]	; (1575c <bus_fault.isra.0+0xa0>)
   156f2:	2145      	movs	r1, #69	; 0x45
   156f4:	f00d fb1a 	bl	22d2c <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   156f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   156fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   156fc:	0418      	lsls	r0, r3, #16
   156fe:	d508      	bpl.n	15712 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15700:	4817      	ldr	r0, [pc, #92]	; (15760 <bus_fault.isra.0+0xa4>)
   15702:	2145      	movs	r1, #69	; 0x45
   15704:	f00d fb12 	bl	22d2c <printk>
			if (from_hard_fault) {
   15708:	b11e      	cbz	r6, 15712 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1570a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1570c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15710:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15712:	4c0e      	ldr	r4, [pc, #56]	; (1574c <bus_fault.isra.0+0x90>)
   15714:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15716:	0559      	lsls	r1, r3, #21
   15718:	d503      	bpl.n	15722 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   1571a:	4812      	ldr	r0, [pc, #72]	; (15764 <bus_fault.isra.0+0xa8>)
   1571c:	2145      	movs	r1, #69	; 0x45
   1571e:	f00d fb05 	bl	22d2c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15722:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15724:	05da      	lsls	r2, r3, #23
   15726:	d50b      	bpl.n	15740 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   15728:	480f      	ldr	r0, [pc, #60]	; (15768 <bus_fault.isra.0+0xac>)
   1572a:	2145      	movs	r1, #69	; 0x45
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1572c:	f00d fafe 	bl	22d2c <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15730:	4a06      	ldr	r2, [pc, #24]	; (1574c <bus_fault.isra.0+0x90>)
   15732:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
   15734:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15736:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1573a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1573c:	7028      	strb	r0, [r5, #0]

	return reason;
}
   1573e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15742:	049b      	lsls	r3, r3, #18
   15744:	d5f4      	bpl.n	15730 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15746:	4809      	ldr	r0, [pc, #36]	; (1576c <bus_fault.isra.0+0xb0>)
   15748:	2145      	movs	r1, #69	; 0x45
   1574a:	e7ef      	b.n	1572c <bus_fault.isra.0+0x70>
   1574c:	e000ed00 	.word	0xe000ed00
   15750:	000282d0 	.word	0x000282d0
   15754:	000282eb 	.word	0x000282eb
   15758:	000281ee 	.word	0x000281ee
   1575c:	00028301 	.word	0x00028301
   15760:	0002831f 	.word	0x0002831f
   15764:	00028339 	.word	0x00028339
   15768:	00028359 	.word	0x00028359
   1576c:	00028262 	.word	0x00028262

00015770 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   15770:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15772:	4c1d      	ldr	r4, [pc, #116]	; (157e8 <usage_fault.isra.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   15774:	481d      	ldr	r0, [pc, #116]	; (157ec <usage_fault.isra.0+0x7c>)
   15776:	2145      	movs	r1, #69	; 0x45
   15778:	f00d fad8 	bl	22d2c <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1577c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1577e:	0193      	lsls	r3, r2, #6
   15780:	d503      	bpl.n	1578a <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   15782:	481b      	ldr	r0, [pc, #108]	; (157f0 <usage_fault.isra.0+0x80>)
   15784:	2145      	movs	r1, #69	; 0x45
   15786:	f00d fad1 	bl	22d2c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1578a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1578c:	01dc      	lsls	r4, r3, #7
   1578e:	d503      	bpl.n	15798 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   15790:	4818      	ldr	r0, [pc, #96]	; (157f4 <usage_fault.isra.0+0x84>)
   15792:	2145      	movs	r1, #69	; 0x45
   15794:	f00d faca 	bl	22d2c <printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15798:	4c13      	ldr	r4, [pc, #76]	; (157e8 <usage_fault.isra.0+0x78>)
   1579a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1579c:	0310      	lsls	r0, r2, #12
   1579e:	d503      	bpl.n	157a8 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   157a0:	4815      	ldr	r0, [pc, #84]	; (157f8 <usage_fault.isra.0+0x88>)
   157a2:	2145      	movs	r1, #69	; 0x45
   157a4:	f00d fac2 	bl	22d2c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   157a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   157aa:	0359      	lsls	r1, r3, #13
   157ac:	d503      	bpl.n	157b6 <usage_fault.isra.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   157ae:	4813      	ldr	r0, [pc, #76]	; (157fc <usage_fault.isra.0+0x8c>)
   157b0:	2145      	movs	r1, #69	; 0x45
   157b2:	f00d fabb 	bl	22d2c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   157b6:	4c0c      	ldr	r4, [pc, #48]	; (157e8 <usage_fault.isra.0+0x78>)
   157b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   157ba:	0392      	lsls	r2, r2, #14
   157bc:	d503      	bpl.n	157c6 <usage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   157be:	4810      	ldr	r0, [pc, #64]	; (15800 <usage_fault.isra.0+0x90>)
   157c0:	2145      	movs	r1, #69	; 0x45
   157c2:	f00d fab3 	bl	22d2c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   157c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   157c8:	03db      	lsls	r3, r3, #15
   157ca:	d503      	bpl.n	157d4 <usage_fault.isra.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   157cc:	480d      	ldr	r0, [pc, #52]	; (15804 <usage_fault.isra.0+0x94>)
   157ce:	2145      	movs	r1, #69	; 0x45
   157d0:	f00d faac 	bl	22d2c <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   157d4:	4a04      	ldr	r2, [pc, #16]	; (157e8 <usage_fault.isra.0+0x78>)
   157d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   157d8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   157dc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   157e0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   157e2:	2000      	movs	r0, #0
   157e4:	bd10      	pop	{r4, pc}
   157e6:	bf00      	nop
   157e8:	e000ed00 	.word	0xe000ed00
   157ec:	00028376 	.word	0x00028376
   157f0:	00028393 	.word	0x00028393
   157f4:	000283ab 	.word	0x000283ab
   157f8:	000283ca 	.word	0x000283ca
   157fc:	000283ed 	.word	0x000283ed
   15800:	00028417 	.word	0x00028417
   15804:	00028436 	.word	0x00028436

00015808 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1580c:	4b51      	ldr	r3, [pc, #324]	; (15954 <z_arm_fault+0x14c>)
   1580e:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   15812:	b08a      	sub	sp, #40	; 0x28
   15814:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15816:	f3c8 0708 	ubfx	r7, r8, #0, #9
   1581a:	2600      	movs	r6, #0
   1581c:	f386 8811 	msr	BASEPRI, r6
   15820:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15824:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15828:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1582c:	d107      	bne.n	1583e <z_arm_fault+0x36>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1582e:	f002 030c 	and.w	r3, r2, #12
   15832:	2b08      	cmp	r3, #8
   15834:	d110      	bne.n	15858 <z_arm_fault+0x50>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15836:	4848      	ldr	r0, [pc, #288]	; (15958 <z_arm_fault+0x150>)
   15838:	2145      	movs	r1, #69	; 0x45
   1583a:	f00d fa77 	bl	22d2c <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1583e:	4947      	ldr	r1, [pc, #284]	; (1595c <z_arm_fault+0x154>)
   15840:	4847      	ldr	r0, [pc, #284]	; (15960 <z_arm_fault+0x158>)
   15842:	f240 32bb 	movw	r2, #955	; 0x3bb
   15846:	f00d fa71 	bl	22d2c <printk>
   1584a:	4844      	ldr	r0, [pc, #272]	; (1595c <z_arm_fault+0x154>)
   1584c:	f240 31bb 	movw	r1, #955	; 0x3bb
   15850:	f00d fccf 	bl	231f2 <assert_post_action>
   15854:	2500      	movs	r5, #0
   15856:	e005      	b.n	15864 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15858:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   1585a:	bf5c      	itt	pl
   1585c:	4605      	movpl	r5, r0
			*nested_exc = true;
   1585e:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   15860:	2d00      	cmp	r5, #0
   15862:	d0ec      	beq.n	1583e <z_arm_fault+0x36>
	*recoverable = false;
   15864:	2300      	movs	r3, #0
   15866:	1efa      	subs	r2, r7, #3
   15868:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1586c:	461c      	mov	r4, r3
   1586e:	4613      	mov	r3, r2
   15870:	2b09      	cmp	r3, #9
   15872:	d85c      	bhi.n	1592e <z_arm_fault+0x126>
   15874:	e8df f003 	tbb	[pc, r3]
   15878:	34545005 	.word	0x34545005
   1587c:	5b5b5b5b 	.word	0x5b5b5b5b
   15880:	585b      	.short	0x585b
	PR_FAULT_INFO("***** HARD FAULT *****");
   15882:	4838      	ldr	r0, [pc, #224]	; (15964 <z_arm_fault+0x15c>)
   15884:	2145      	movs	r1, #69	; 0x45
   15886:	f00d fa51 	bl	22d2c <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1588a:	4b32      	ldr	r3, [pc, #200]	; (15954 <z_arm_fault+0x14c>)
	*recoverable = false;
   1588c:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15890:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15892:	f014 0402 	ands.w	r4, r4, #2
   15896:	d005      	beq.n	158a4 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
   15898:	4833      	ldr	r0, [pc, #204]	; (15968 <z_arm_fault+0x160>)
   1589a:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   1589c:	f00d fa46 	bl	22d2c <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   158a0:	2400      	movs	r4, #0
}
   158a2:	e020      	b.n	158e6 <z_arm_fault+0xde>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   158a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   158a6:	005b      	lsls	r3, r3, #1
   158a8:	d51d      	bpl.n	158e6 <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
   158aa:	4830      	ldr	r0, [pc, #192]	; (1596c <z_arm_fault+0x164>)
   158ac:	2145      	movs	r1, #69	; 0x45
   158ae:	f00d fa3d 	bl	22d2c <printk>
		if (SCB_MMFSR != 0) {
   158b2:	4b2f      	ldr	r3, [pc, #188]	; (15970 <z_arm_fault+0x168>)
   158b4:	781b      	ldrb	r3, [r3, #0]
   158b6:	b133      	cbz	r3, 158c6 <z_arm_fault+0xbe>
			reason = mem_manage_fault(esf, 1, recoverable);
   158b8:	f10d 0207 	add.w	r2, sp, #7
   158bc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   158be:	4628      	mov	r0, r5
   158c0:	f7ff fe7e 	bl	155c0 <mem_manage_fault>
   158c4:	e00e      	b.n	158e4 <z_arm_fault+0xdc>
		} else if (SCB_BFSR != 0) {
   158c6:	4b2b      	ldr	r3, [pc, #172]	; (15974 <z_arm_fault+0x16c>)
   158c8:	781b      	ldrb	r3, [r3, #0]
   158ca:	b12b      	cbz	r3, 158d8 <z_arm_fault+0xd0>
			reason = bus_fault(esf, 1, recoverable);
   158cc:	f10d 0107 	add.w	r1, sp, #7
   158d0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   158d2:	f7ff fef3 	bl	156bc <bus_fault.isra.0>
   158d6:	e005      	b.n	158e4 <z_arm_fault+0xdc>
		} else if (SCB_UFSR != 0) {
   158d8:	4b27      	ldr	r3, [pc, #156]	; (15978 <z_arm_fault+0x170>)
   158da:	881b      	ldrh	r3, [r3, #0]
   158dc:	b29b      	uxth	r3, r3
   158de:	b113      	cbz	r3, 158e6 <z_arm_fault+0xde>
			reason = usage_fault(esf);
   158e0:	f7ff ff46 	bl	15770 <usage_fault.isra.0>
   158e4:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   158e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   158ea:	b993      	cbnz	r3, 15912 <z_arm_fault+0x10a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   158ec:	2220      	movs	r2, #32
   158ee:	4629      	mov	r1, r5
   158f0:	a802      	add	r0, sp, #8
   158f2:	f00f f8e7 	bl	24ac4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   158f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   158f8:	b336      	cbz	r6, 15948 <z_arm_fault+0x140>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   158fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
   158fe:	b922      	cbnz	r2, 1590a <z_arm_fault+0x102>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15900:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15904:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15908:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1590a:	a902      	add	r1, sp, #8
   1590c:	4620      	mov	r0, r4
   1590e:	f7ff fd59 	bl	153c4 <z_arm_fatal_error>
}
   15912:	b00a      	add	sp, #40	; 0x28
   15914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   15918:	f10d 0207 	add.w	r2, sp, #7
   1591c:	2100      	movs	r1, #0
   1591e:	e7ce      	b.n	158be <z_arm_fault+0xb6>
		reason = bus_fault(esf, 0, recoverable);
   15920:	f10d 0107 	add.w	r1, sp, #7
   15924:	2000      	movs	r0, #0
   15926:	e7d4      	b.n	158d2 <z_arm_fault+0xca>
	PR_FAULT_INFO(
   15928:	4814      	ldr	r0, [pc, #80]	; (1597c <z_arm_fault+0x174>)
   1592a:	2145      	movs	r1, #69	; 0x45
   1592c:	e7b6      	b.n	1589c <z_arm_fault+0x94>
	PR_FAULT_INFO("***** %s %d) *****",
   1592e:	4914      	ldr	r1, [pc, #80]	; (15980 <z_arm_fault+0x178>)
   15930:	4a14      	ldr	r2, [pc, #80]	; (15984 <z_arm_fault+0x17c>)
   15932:	4815      	ldr	r0, [pc, #84]	; (15988 <z_arm_fault+0x180>)
   15934:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   15938:	bf08      	it	eq
   1593a:	460a      	moveq	r2, r1
   1593c:	f1a7 0310 	sub.w	r3, r7, #16
   15940:	2145      	movs	r1, #69	; 0x45
   15942:	f00d f9f3 	bl	22d2c <printk>
   15946:	e7ab      	b.n	158a0 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15948:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1594c:	f023 0301 	bic.w	r3, r3, #1
   15950:	e7da      	b.n	15908 <z_arm_fault+0x100>
   15952:	bf00      	nop
   15954:	e000ed00 	.word	0xe000ed00
   15958:	00028494 	.word	0x00028494
   1595c:	00028296 	.word	0x00028296
   15960:	00027c9a 	.word	0x00027c9a
   15964:	000284c4 	.word	0x000284c4
   15968:	000284e0 	.word	0x000284e0
   1596c:	00028506 	.word	0x00028506
   15970:	e000ed28 	.word	0xe000ed28
   15974:	e000ed29 	.word	0xe000ed29
   15978:	e000ed2a 	.word	0xe000ed2a
   1597c:	0002852a 	.word	0x0002852a
   15980:	00028466 	.word	0x00028466
   15984:	0002847b 	.word	0x0002847b
   15988:	00028565 	.word	0x00028565

0001598c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1598c:	4a02      	ldr	r2, [pc, #8]	; (15998 <z_arm_fault_init+0xc>)
   1598e:	6953      	ldr	r3, [r2, #20]
   15990:	f043 0310 	orr.w	r3, r3, #16
   15994:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   15996:	4770      	bx	lr
   15998:	e000ed00 	.word	0xe000ed00

0001599c <z_arm_interrupt_init>:
   1599c:	4804      	ldr	r0, [pc, #16]	; (159b0 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1599e:	2300      	movs	r3, #0
   159a0:	2140      	movs	r1, #64	; 0x40
   159a2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   159a4:	3301      	adds	r3, #1
   159a6:	2b27      	cmp	r3, #39	; 0x27
   159a8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   159ac:	d1f9      	bne.n	159a2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   159ae:	4770      	bx	lr
   159b0:	e000e100 	.word	0xe000e100

000159b4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   159b4:	b508      	push	{r3, lr}
	if (_current == thread) {
   159b6:	4b0e      	ldr	r3, [pc, #56]	; (159f0 <z_impl_k_thread_abort+0x3c>)
   159b8:	689b      	ldr	r3, [r3, #8]
   159ba:	4283      	cmp	r3, r0
   159bc:	d107      	bne.n	159ce <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   159be:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   159c2:	b193      	cbz	r3, 159ea <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   159c4:	4a0b      	ldr	r2, [pc, #44]	; (159f4 <z_impl_k_thread_abort+0x40>)
   159c6:	6853      	ldr	r3, [r2, #4]
   159c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   159cc:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   159ce:	f00b fc05 	bl	211dc <z_thread_single_abort>
	__asm__ volatile(
   159d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   159d6:	f3ef 8011 	mrs	r0, BASEPRI
   159da:	f383 8811 	msr	BASEPRI, r3
   159de:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   159e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   159e6:	f011 b8ab 	b.w	26b40 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   159ea:	f00c fa1d 	bl	21e28 <z_self_abort>
   159ee:	bf00      	nop
   159f0:	20002b28 	.word	0x20002b28
   159f4:	e000ed00 	.word	0xe000ed00

000159f8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   159f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   159fa:	4b08      	ldr	r3, [pc, #32]	; (15a1c <z_arm_configure_static_mpu_regions+0x24>)
   159fc:	9301      	str	r3, [sp, #4]
   159fe:	4b08      	ldr	r3, [pc, #32]	; (15a20 <z_arm_configure_static_mpu_regions+0x28>)
   15a00:	9302      	str	r3, [sp, #8]
   15a02:	4b08      	ldr	r3, [pc, #32]	; (15a24 <z_arm_configure_static_mpu_regions+0x2c>)
   15a04:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
   15a06:	ab01      	add	r3, sp, #4
   15a08:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15a0a:	4a07      	ldr	r2, [pc, #28]	; (15a28 <z_arm_configure_static_mpu_regions+0x30>)
   15a0c:	4b07      	ldr	r3, [pc, #28]	; (15a2c <z_arm_configure_static_mpu_regions+0x34>)
   15a0e:	2101      	movs	r1, #1
   15a10:	4668      	mov	r0, sp
   15a12:	f000 f8cf 	bl	15bb4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   15a16:	b005      	add	sp, #20
   15a18:	f85d fb04 	ldr.w	pc, [sp], #4
   15a1c:	20000000 	.word	0x20000000
   15a20:	00000000 	.word	0x00000000
   15a24:	060b0000 	.word	0x060b0000
   15a28:	20000000 	.word	0x20000000
   15a2c:	20010000 	.word	0x20010000

00015a30 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   15a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
   15a32:	6f43      	ldr	r3, [r0, #116]	; 0x74
   15a34:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
   15a36:	9301      	str	r3, [sp, #4]
   15a38:	4b06      	ldr	r3, [pc, #24]	; (15a54 <z_arm_configure_dynamic_mpu_regions+0x24>)
   15a3a:	2220      	movs	r2, #32
   15a3c:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   15a40:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
   15a42:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
   15a44:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
   15a46:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
   15a48:	f000 f8d2 	bl	15bf0 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   15a4c:	b005      	add	sp, #20
   15a4e:	f85d fb04 	ldr.w	pc, [sp], #4
   15a52:	bf00      	nop
   15a54:	150b0000 	.word	0x150b0000

00015a58 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   15a58:	f8df c098 	ldr.w	ip, [pc, #152]	; 15af4 <mpu_configure_regions+0x9c>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a5e:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   15a60:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
   15a62:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
   15a64:	428f      	cmp	r7, r1
   15a66:	da0f      	bge.n	15a88 <mpu_configure_regions+0x30>
		if (regions[i]->size == 0U) {
   15a68:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
   15a6c:	f8de 4004 	ldr.w	r4, [lr, #4]
   15a70:	b3d4      	cbz	r4, 15ae8 <mpu_configure_regions+0x90>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15a72:	b183      	cbz	r3, 15a96 <mpu_configure_regions+0x3e>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15a74:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15a76:	422c      	tst	r4, r5
   15a78:	d007      	beq.n	15a8a <mpu_configure_regions+0x32>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15a7a:	481c      	ldr	r0, [pc, #112]	; (15aec <mpu_configure_regions+0x94>)
   15a7c:	463a      	mov	r2, r7
   15a7e:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15a80:	f00d f954 	bl	22d2c <printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
   15a84:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   15a8a:	2c1f      	cmp	r4, #31
   15a8c:	d9f5      	bls.n	15a7a <mpu_configure_regions+0x22>
		((part->start & (part->size - 1U)) == 0U);
   15a8e:	f8de 2000 	ldr.w	r2, [lr]
		&&
   15a92:	4215      	tst	r5, r2
   15a94:	d1f1      	bne.n	15a7a <mpu_configure_regions+0x22>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15a96:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
   15a98:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
   15a9a:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   15a9e:	f8de 0008 	ldr.w	r0, [lr, #8]
   15aa2:	d90f      	bls.n	15ac4 <mpu_configure_regions+0x6c>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   15aa4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15aa8:	d80e      	bhi.n	15ac8 <mpu_configure_regions+0x70>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15aaa:	3c01      	subs	r4, #1
   15aac:	fab4 f484 	clz	r4, r4
   15ab0:	f1c4 041f 	rsb	r4, r4, #31
   15ab4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   15ab6:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15ab8:	ea44 0400 	orr.w	r4, r4, r0
   15abc:	d906      	bls.n	15acc <mpu_configure_regions+0x74>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15abe:	480c      	ldr	r0, [pc, #48]	; (15af0 <mpu_configure_regions+0x98>)
   15ac0:	2145      	movs	r1, #69	; 0x45
   15ac2:	e7dd      	b.n	15a80 <mpu_configure_regions+0x28>
		return REGION_32B;
   15ac4:	2408      	movs	r4, #8
   15ac6:	e7f6      	b.n	15ab6 <mpu_configure_regions+0x5e>
		return REGION_4G;
   15ac8:	243e      	movs	r4, #62	; 0x3e
   15aca:	e7f4      	b.n	15ab6 <mpu_configure_regions+0x5e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15acc:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   15ad0:	4315      	orrs	r5, r2
   15ad2:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15ad6:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   15ada:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
   15ade:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15ae0:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15ae4:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
   15ae8:	3701      	adds	r7, #1
   15aea:	e7bb      	b.n	15a64 <mpu_configure_regions+0xc>
   15aec:	00028581 	.word	0x00028581
   15af0:	000285a9 	.word	0x000285a9
   15af4:	e000ed90 	.word	0xe000ed90

00015af8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15af8:	4b03      	ldr	r3, [pc, #12]	; (15b08 <arm_core_mpu_enable+0x10>)
   15afa:	2205      	movs	r2, #5
   15afc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   15afe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15b02:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15b06:	4770      	bx	lr
   15b08:	e000ed90 	.word	0xe000ed90

00015b0c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   15b0c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15b10:	4b01      	ldr	r3, [pc, #4]	; (15b18 <arm_core_mpu_disable+0xc>)
   15b12:	2200      	movs	r2, #0
   15b14:	605a      	str	r2, [r3, #4]
}
   15b16:	4770      	bx	lr
   15b18:	e000ed90 	.word	0xe000ed90

00015b1c <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15b1c:	4920      	ldr	r1, [pc, #128]	; (15ba0 <arm_mpu_init+0x84>)
{
   15b1e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15b20:	680c      	ldr	r4, [r1, #0]
   15b22:	2c08      	cmp	r4, #8
   15b24:	d90d      	bls.n	15b42 <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   15b26:	491f      	ldr	r1, [pc, #124]	; (15ba4 <arm_mpu_init+0x88>)
   15b28:	481f      	ldr	r0, [pc, #124]	; (15ba8 <arm_mpu_init+0x8c>)
   15b2a:	f44f 729d 	mov.w	r2, #314	; 0x13a
   15b2e:	f00d f8fd 	bl	22d2c <printk>
   15b32:	481c      	ldr	r0, [pc, #112]	; (15ba4 <arm_mpu_init+0x88>)
   15b34:	f44f 719d 	mov.w	r1, #314	; 0x13a
   15b38:	f00d fb5b 	bl	231f2 <assert_post_action>
   15b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   15b40:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   15b42:	f7ff ffe3 	bl	15b0c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15b46:	6848      	ldr	r0, [r1, #4]
   15b48:	4918      	ldr	r1, [pc, #96]	; (15bac <arm_mpu_init+0x90>)
   15b4a:	2200      	movs	r2, #0
   15b4c:	4294      	cmp	r4, r2
   15b4e:	f100 000c 	add.w	r0, r0, #12
   15b52:	d115      	bne.n	15b80 <arm_mpu_init+0x64>
	static_regions_num = mpu_config.num_regions;
   15b54:	4b16      	ldr	r3, [pc, #88]	; (15bb0 <arm_mpu_init+0x94>)
   15b56:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   15b58:	f7ff ffce 	bl	15af8 <arm_core_mpu_enable>
	__ASSERT(
   15b5c:	680b      	ldr	r3, [r1, #0]
   15b5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15b62:	2b08      	cmp	r3, #8
   15b64:	d00a      	beq.n	15b7c <arm_mpu_init+0x60>
   15b66:	490f      	ldr	r1, [pc, #60]	; (15ba4 <arm_mpu_init+0x88>)
   15b68:	480f      	ldr	r0, [pc, #60]	; (15ba8 <arm_mpu_init+0x8c>)
   15b6a:	f240 1261 	movw	r2, #353	; 0x161
   15b6e:	f00d f8dd 	bl	22d2c <printk>
   15b72:	480c      	ldr	r0, [pc, #48]	; (15ba4 <arm_mpu_init+0x88>)
   15b74:	f240 1161 	movw	r1, #353	; 0x161
   15b78:	f00d fb3b 	bl	231f2 <assert_post_action>
	return 0;
   15b7c:	2000      	movs	r0, #0
   15b7e:	e7df      	b.n	15b40 <arm_mpu_init+0x24>
	MPU->RNR = index;
   15b80:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15b82:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   15b86:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15b8a:	4313      	orrs	r3, r2
   15b8c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15b90:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15b92:	f850 3c04 	ldr.w	r3, [r0, #-4]
   15b96:	f043 0301 	orr.w	r3, r3, #1
   15b9a:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15b9c:	3201      	adds	r2, #1
   15b9e:	e7d5      	b.n	15b4c <arm_mpu_init+0x30>
   15ba0:	000273fc 	.word	0x000273fc
   15ba4:	000285d4 	.word	0x000285d4
   15ba8:	00027c9a 	.word	0x00027c9a
   15bac:	e000ed90 	.word	0xe000ed90
   15bb0:	20002fae 	.word	0x20002fae

00015bb4 <arm_core_mpu_configure_static_mpu_regions>:
{
   15bb4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15bb6:	4c0b      	ldr	r4, [pc, #44]	; (15be4 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15bb8:	2301      	movs	r3, #1
   15bba:	7822      	ldrb	r2, [r4, #0]
   15bbc:	f7ff ff4c 	bl	15a58 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15bc0:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   15bc2:	3016      	adds	r0, #22
   15bc4:	d10c      	bne.n	15be0 <arm_core_mpu_configure_static_mpu_regions+0x2c>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15bc6:	4908      	ldr	r1, [pc, #32]	; (15be8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   15bc8:	4808      	ldr	r0, [pc, #32]	; (15bec <arm_core_mpu_configure_static_mpu_regions+0x38>)
   15bca:	f240 1203 	movw	r2, #259	; 0x103
   15bce:	f00d f8ad 	bl	22d2c <printk>
}
   15bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15bd6:	4804      	ldr	r0, [pc, #16]	; (15be8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   15bd8:	f240 1103 	movw	r1, #259	; 0x103
   15bdc:	f00d bb09 	b.w	231f2 <assert_post_action>
}
   15be0:	bd10      	pop	{r4, pc}
   15be2:	bf00      	nop
   15be4:	20002fae 	.word	0x20002fae
   15be8:	000285d4 	.word	0x000285d4
   15bec:	00027c9a 	.word	0x00027c9a

00015bf0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   15bf0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15bf2:	4a0f      	ldr	r2, [pc, #60]	; (15c30 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   15bf4:	2300      	movs	r3, #0
   15bf6:	7812      	ldrb	r2, [r2, #0]
   15bf8:	f7ff ff2e 	bl	15a58 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15bfc:	f110 0f16 	cmn.w	r0, #22
   15c00:	d008      	beq.n	15c14 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   15c02:	4b0c      	ldr	r3, [pc, #48]	; (15c34 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
   15c04:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15c06:	2807      	cmp	r0, #7
   15c08:	dd00      	ble.n	15c0c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
   15c0a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   15c0c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   15c0e:	611a      	str	r2, [r3, #16]
   15c10:	3001      	adds	r0, #1
   15c12:	e7f8      	b.n	15c06 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15c14:	4908      	ldr	r1, [pc, #32]	; (15c38 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   15c16:	4809      	ldr	r0, [pc, #36]	; (15c3c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   15c18:	f44f 7291 	mov.w	r2, #290	; 0x122
   15c1c:	f00d f886 	bl	22d2c <printk>
}
   15c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15c24:	4804      	ldr	r0, [pc, #16]	; (15c38 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   15c26:	f44f 7191 	mov.w	r1, #290	; 0x122
   15c2a:	f00d bae2 	b.w	231f2 <assert_post_action>
   15c2e:	bf00      	nop
   15c30:	20002fae 	.word	0x20002fae
   15c34:	e000ed90 	.word	0xe000ed90
   15c38:	000285d4 	.word	0x000285d4
   15c3c:	00027c9a 	.word	0x00027c9a

00015c40 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   15c40:	4b01      	ldr	r3, [pc, #4]	; (15c48 <__stdout_hook_install+0x8>)
   15c42:	6018      	str	r0, [r3, #0]
}
   15c44:	4770      	bx	lr
   15c46:	bf00      	nop
   15c48:	200005a8 	.word	0x200005a8

00015c4c <nordicsemi_nrf52_init>:
   15c4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   15c50:	f3ef 8211 	mrs	r2, BASEPRI
   15c54:	f383 8811 	msr	BASEPRI, r3
   15c58:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15c5c:	4906      	ldr	r1, [pc, #24]	; (15c78 <nordicsemi_nrf52_init+0x2c>)
   15c5e:	2301      	movs	r3, #1
   15c60:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15c64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15c68:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   15c6c:	f382 8811 	msr	BASEPRI, r2
   15c70:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15c74:	2000      	movs	r0, #0
   15c76:	4770      	bx	lr
   15c78:	4001e000 	.word	0x4001e000

00015c7c <sys_arch_reboot>:
    *p_gpregret = val;
   15c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15c80:	b2c0      	uxtb	r0, r0
   15c82:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   15c86:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15c8a:	4905      	ldr	r1, [pc, #20]	; (15ca0 <sys_arch_reboot+0x24>)
   15c8c:	4b05      	ldr	r3, [pc, #20]	; (15ca4 <sys_arch_reboot+0x28>)
   15c8e:	68ca      	ldr	r2, [r1, #12]
   15c90:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15c94:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15c96:	60cb      	str	r3, [r1, #12]
   15c98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15c9c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15c9e:	e7fd      	b.n	15c9c <sys_arch_reboot+0x20>
   15ca0:	e000ed00 	.word	0xe000ed00
   15ca4:	05fa0004 	.word	0x05fa0004

00015ca8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15ca8:	b120      	cbz	r0, 15cb4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   15caa:	4b03      	ldr	r3, [pc, #12]	; (15cb8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   15cac:	0180      	lsls	r0, r0, #6
   15cae:	f043 0301 	orr.w	r3, r3, #1
   15cb2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15cb4:	4770      	bx	lr
   15cb6:	bf00      	nop
   15cb8:	00027200 	.word	0x00027200

00015cbc <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15cbc:	4b0e      	ldr	r3, [pc, #56]	; (15cf8 <bt_hex_real+0x3c>)
   15cbe:	2940      	cmp	r1, #64	; 0x40
{
   15cc0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   15cc2:	bf28      	it	cs
   15cc4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   15cc6:	4c0d      	ldr	r4, [pc, #52]	; (15cfc <bt_hex_real+0x40>)
   15cc8:	1846      	adds	r6, r0, r1
   15cca:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15ccc:	42b0      	cmp	r0, r6
   15cce:	f103 0302 	add.w	r3, r3, #2
   15cd2:	d104      	bne.n	15cde <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15cd4:	2300      	movs	r3, #0
   15cd6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15cda:	4807      	ldr	r0, [pc, #28]	; (15cf8 <bt_hex_real+0x3c>)
   15cdc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   15cde:	7802      	ldrb	r2, [r0, #0]
   15ce0:	0912      	lsrs	r2, r2, #4
   15ce2:	5ca2      	ldrb	r2, [r4, r2]
   15ce4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
   15cec:	f002 020f 	and.w	r2, r2, #15
   15cf0:	5ca2      	ldrb	r2, [r4, r2]
   15cf2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   15cf6:	e7e9      	b.n	15ccc <bt_hex_real+0x10>
   15cf8:	20002faf 	.word	0x20002faf
   15cfc:	00028627 	.word	0x00028627

00015d00 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   15d00:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15d02:	7803      	ldrb	r3, [r0, #0]
   15d04:	b08b      	sub	sp, #44	; 0x2c
   15d06:	4604      	mov	r4, r0
   15d08:	ad07      	add	r5, sp, #28
   15d0a:	2b03      	cmp	r3, #3
   15d0c:	d821      	bhi.n	15d52 <bt_addr_le_str_real+0x52>
   15d0e:	e8df f003 	tbb	[pc, r3]
   15d12:	1a02      	.short	0x1a02
   15d14:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   15d16:	4912      	ldr	r1, [pc, #72]	; (15d60 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   15d18:	4628      	mov	r0, r5
   15d1a:	f00e fe97 	bl	24a4c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15d1e:	7863      	ldrb	r3, [r4, #1]
   15d20:	9304      	str	r3, [sp, #16]
   15d22:	78a3      	ldrb	r3, [r4, #2]
   15d24:	9303      	str	r3, [sp, #12]
   15d26:	78e3      	ldrb	r3, [r4, #3]
   15d28:	9302      	str	r3, [sp, #8]
   15d2a:	7923      	ldrb	r3, [r4, #4]
   15d2c:	9301      	str	r3, [sp, #4]
   15d2e:	7963      	ldrb	r3, [r4, #5]
   15d30:	9300      	str	r3, [sp, #0]
   15d32:	4a0c      	ldr	r2, [pc, #48]	; (15d64 <bt_addr_le_str_real+0x64>)
   15d34:	79a3      	ldrb	r3, [r4, #6]
   15d36:	9505      	str	r5, [sp, #20]
   15d38:	211e      	movs	r1, #30
   15d3a:	480b      	ldr	r0, [pc, #44]	; (15d68 <bt_addr_le_str_real+0x68>)
   15d3c:	f00d f803 	bl	22d46 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15d40:	4809      	ldr	r0, [pc, #36]	; (15d68 <bt_addr_le_str_real+0x68>)
   15d42:	b00b      	add	sp, #44	; 0x2c
   15d44:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15d46:	4909      	ldr	r1, [pc, #36]	; (15d6c <bt_addr_le_str_real+0x6c>)
   15d48:	e7e6      	b.n	15d18 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   15d4a:	4909      	ldr	r1, [pc, #36]	; (15d70 <bt_addr_le_str_real+0x70>)
   15d4c:	e7e4      	b.n	15d18 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   15d4e:	4909      	ldr	r1, [pc, #36]	; (15d74 <bt_addr_le_str_real+0x74>)
   15d50:	e7e2      	b.n	15d18 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   15d52:	4a09      	ldr	r2, [pc, #36]	; (15d78 <bt_addr_le_str_real+0x78>)
   15d54:	210a      	movs	r1, #10
   15d56:	4628      	mov	r0, r5
   15d58:	f00c fff5 	bl	22d46 <snprintk>
		break;
   15d5c:	e7df      	b.n	15d1e <bt_addr_le_str_real+0x1e>
   15d5e:	bf00      	nop
   15d60:	000279e5 	.word	0x000279e5
   15d64:	00027a0e 	.word	0x00027a0e
   15d68:	20003030 	.word	0x20003030
   15d6c:	000279ec 	.word	0x000279ec
   15d70:	000279f3 	.word	0x000279f3
   15d74:	000279fd 	.word	0x000279fd
   15d78:	00027a07 	.word	0x00027a07

00015d7c <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   15d7c:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   15d7e:	b570      	push	{r4, r5, r6, lr}
   15d80:	4604      	mov	r4, r0
   15d82:	460d      	mov	r5, r1
   15d84:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   15d88:	d915      	bls.n	15db6 <sys_memcpy_swap.constprop.0+0x3a>
   15d8a:	42b0      	cmp	r0, r6
   15d8c:	d20a      	bcs.n	15da4 <sys_memcpy_swap.constprop.0+0x28>
   15d8e:	490c      	ldr	r1, [pc, #48]	; (15dc0 <sys_memcpy_swap.constprop.0+0x44>)
   15d90:	480c      	ldr	r0, [pc, #48]	; (15dc4 <sys_memcpy_swap.constprop.0+0x48>)
   15d92:	f240 2217 	movw	r2, #535	; 0x217
   15d96:	f00c ffc9 	bl	22d2c <printk>
   15d9a:	4809      	ldr	r0, [pc, #36]	; (15dc0 <sys_memcpy_swap.constprop.0+0x44>)
   15d9c:	f240 2117 	movw	r1, #535	; 0x217
   15da0:	f00d fa27 	bl	231f2 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   15da4:	4633      	mov	r3, r6
   15da6:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   15da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   15dac:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   15db0:	42ab      	cmp	r3, r5
   15db2:	d1f9      	bne.n	15da8 <sys_memcpy_swap.constprop.0+0x2c>
	}
}
   15db4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   15db6:	d0ea      	beq.n	15d8e <sys_memcpy_swap.constprop.0+0x12>
   15db8:	f100 0320 	add.w	r3, r0, #32
   15dbc:	4299      	cmp	r1, r3
   15dbe:	e7e5      	b.n	15d8c <sys_memcpy_swap.constprop.0+0x10>
   15dc0:	0002863f 	.word	0x0002863f
   15dc4:	00027c9a 	.word	0x00027c9a

00015dc8 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   15dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15dcc:	4f64      	ldr	r7, [pc, #400]	; (15f60 <ecc_thread+0x198>)
	return z_impl_k_sem_take(sem, timeout);
   15dce:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 15f88 <ecc_thread+0x1c0>
   15dd2:	463d      	mov	r5, r7
   15dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15ddc:	4640      	mov	r0, r8
   15dde:	f00b fe43 	bl	21a68 <z_impl_k_sem_take>
   15de2:	f3bf 8f5b 	dmb	ish
   15de6:	683c      	ldr	r4, [r7, #0]
   15de8:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   15dec:	f014 0401 	ands.w	r4, r4, #1
   15df0:	d058      	beq.n	15ea4 <ecc_thread+0xdc>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
   15df2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 15f78 <ecc_thread+0x1b0>
   15df6:	4c5b      	ldr	r4, [pc, #364]	; (15f64 <ecc_thread+0x19c>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
   15df8:	4e5b      	ldr	r6, [pc, #364]	; (15f68 <ecc_thread+0x1a0>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
   15dfa:	485c      	ldr	r0, [pc, #368]	; (15f6c <ecc_thread+0x1a4>)
   15dfc:	464a      	mov	r2, r9
   15dfe:	4621      	mov	r1, r4
   15e00:	f00d fcf0 	bl	237e4 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   15e04:	bbd8      	cbnz	r0, 15e7e <ecc_thread+0xb6>
			BT_ERR("Failed to create ECC public/private pair");
   15e06:	485a      	ldr	r0, [pc, #360]	; (15f70 <ecc_thread+0x1a8>)
   15e08:	2145      	movs	r1, #69	; 0x45
   15e0a:	f00c ff8f 	bl	22d2c <printk>
			return BT_HCI_ERR_UNSPECIFIED;
   15e0e:	f04f 091f 	mov.w	r9, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15e1a:	2001      	movs	r0, #1
   15e1c:	f002 f96e 	bl	180fc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   15e20:	f100 0608 	add.w	r6, r0, #8
   15e24:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15e26:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   15e28:	4630      	mov	r0, r6
   15e2a:	f007 fb2f 	bl	1d48c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   15e2e:	233e      	movs	r3, #62	; 0x3e
   15e30:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   15e32:	2342      	movs	r3, #66	; 0x42
   15e34:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
   15e36:	2101      	movs	r1, #1
   15e38:	4630      	mov	r0, r6
   15e3a:	f007 fb27 	bl	1d48c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   15e3e:	2308      	movs	r3, #8
   15e40:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
   15e42:	2141      	movs	r1, #65	; 0x41
   15e44:	4630      	mov	r0, r6
   15e46:	f007 fb21 	bl	1d48c <net_buf_simple_add>
   15e4a:	4606      	mov	r6, r0
	evt->status = status;
   15e4c:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
   15e50:	f1b9 0f00 	cmp.w	r9, #0
   15e54:	d01d      	beq.n	15e92 <ecc_thread+0xca>
		(void)memset(evt->key, 0, sizeof(evt->key));
   15e56:	2240      	movs	r2, #64	; 0x40
   15e58:	2100      	movs	r1, #0
   15e5a:	f00e fe5e 	bl	24b1a <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15e5e:	f3bf 8f5b 	dmb	ish
   15e62:	e855 3f00 	ldrex	r3, [r5]
   15e66:	f023 0301 	bic.w	r3, r3, #1
   15e6a:	e845 3200 	strex	r2, r3, [r5]
   15e6e:	2a00      	cmp	r2, #0
   15e70:	d1f7      	bne.n	15e62 <ecc_thread+0x9a>
   15e72:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   15e76:	4620      	mov	r0, r4
	bt_recv(buf);
   15e78:	f001 fd04 	bl	17884 <bt_recv>
}
   15e7c:	e7aa      	b.n	15dd4 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
   15e7e:	2220      	movs	r2, #32
   15e80:	4631      	mov	r1, r6
   15e82:	4620      	mov	r0, r4
   15e84:	f00e fe0e 	bl	24aa4 <memcmp>
   15e88:	2800      	cmp	r0, #0
   15e8a:	d0b6      	beq.n	15dfa <ecc_thread+0x32>
	return 0;
   15e8c:	f04f 0900 	mov.w	r9, #0
   15e90:	e7bf      	b.n	15e12 <ecc_thread+0x4a>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
   15e92:	4936      	ldr	r1, [pc, #216]	; (15f6c <ecc_thread+0x1a4>)
   15e94:	f7ff ff72 	bl	15d7c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
   15e98:	4936      	ldr	r1, [pc, #216]	; (15f74 <ecc_thread+0x1ac>)
   15e9a:	f106 0021 	add.w	r0, r6, #33	; 0x21
   15e9e:	f7ff ff6d 	bl	15d7c <sys_memcpy_swap.constprop.0>
   15ea2:	e7dc      	b.n	15e5e <ecc_thread+0x96>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ea4:	f3bf 8f5b 	dmb	ish
   15ea8:	683b      	ldr	r3, [r7, #0]
   15eaa:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   15eae:	079b      	lsls	r3, r3, #30
   15eb0:	d54b      	bpl.n	15f4a <ecc_thread+0x182>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
   15eb2:	4931      	ldr	r1, [pc, #196]	; (15f78 <ecc_thread+0x1b0>)
   15eb4:	482d      	ldr	r0, [pc, #180]	; (15f6c <ecc_thread+0x1a4>)
   15eb6:	f00e fb64 	bl	24582 <uECC_valid_public_key>
	if (ret < 0) {
   15eba:	1e02      	subs	r2, r0, #0
   15ebc:	da36      	bge.n	15f2c <ecc_thread+0x164>
		BT_ERR("public key is not valid (ret %d)", ret);
   15ebe:	482f      	ldr	r0, [pc, #188]	; (15f7c <ecc_thread+0x1b4>)
   15ec0:	2145      	movs	r1, #69	; 0x45
   15ec2:	f00c ff33 	bl	22d2c <printk>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15ece:	2001      	movs	r0, #1
   15ed0:	f002 f914 	bl	180fc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   15ed4:	f100 0908 	add.w	r9, r0, #8
   15ed8:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15eda:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   15edc:	4648      	mov	r0, r9
   15ede:	f007 fad5 	bl	1d48c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   15ee2:	233e      	movs	r3, #62	; 0x3e
   15ee4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   15ee6:	2322      	movs	r3, #34	; 0x22
   15ee8:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
   15eea:	2101      	movs	r1, #1
   15eec:	4648      	mov	r0, r9
   15eee:	f007 facd 	bl	1d48c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   15ef2:	2309      	movs	r3, #9
   15ef4:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
   15ef6:	2121      	movs	r1, #33	; 0x21
   15ef8:	4648      	mov	r0, r9
   15efa:	f007 fac7 	bl	1d48c <net_buf_simple_add>
   15efe:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   15f00:	3001      	adds	r0, #1
   15f02:	b9e4      	cbnz	r4, 15f3e <ecc_thread+0x176>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   15f04:	221f      	movs	r2, #31
   15f06:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   15f08:	21ff      	movs	r1, #255	; 0xff
   15f0a:	2220      	movs	r2, #32
   15f0c:	f00e fe05 	bl	24b1a <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15f10:	f3bf 8f5b 	dmb	ish
   15f14:	e855 3f00 	ldrex	r3, [r5]
   15f18:	f023 0302 	bic.w	r3, r3, #2
   15f1c:	e845 3200 	strex	r2, r3, [r5]
   15f20:	2a00      	cmp	r2, #0
   15f22:	d1f7      	bne.n	15f14 <ecc_thread+0x14c>
   15f24:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   15f28:	4630      	mov	r0, r6
   15f2a:	e7a5      	b.n	15e78 <ecc_thread+0xb0>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
   15f2c:	4a0f      	ldr	r2, [pc, #60]	; (15f6c <ecc_thread+0x1a4>)
   15f2e:	4b12      	ldr	r3, [pc, #72]	; (15f78 <ecc_thread+0x1b0>)
   15f30:	f1a2 0120 	sub.w	r1, r2, #32
   15f34:	4610      	mov	r0, r2
   15f36:	f00d fca4 	bl	23882 <uECC_shared_secret>
   15f3a:	4604      	mov	r4, r0
   15f3c:	e7c3      	b.n	15ec6 <ecc_thread+0xfe>
		evt->status = 0U;
   15f3e:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
   15f40:	490a      	ldr	r1, [pc, #40]	; (15f6c <ecc_thread+0x1a4>)
		evt->status = 0U;
   15f42:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
   15f44:	f7ff ff1a 	bl	15d7c <sys_memcpy_swap.constprop.0>
   15f48:	e7e2      	b.n	15f10 <ecc_thread+0x148>
			emulate_le_generate_dhkey();
		} else {
			__ASSERT(0, "Unhandled ECC command");
   15f4a:	490d      	ldr	r1, [pc, #52]	; (15f80 <ecc_thread+0x1b8>)
   15f4c:	480d      	ldr	r0, [pc, #52]	; (15f84 <ecc_thread+0x1bc>)
   15f4e:	22dd      	movs	r2, #221	; 0xdd
   15f50:	f00c feec 	bl	22d2c <printk>
   15f54:	480a      	ldr	r0, [pc, #40]	; (15f80 <ecc_thread+0x1b8>)
   15f56:	21dd      	movs	r1, #221	; 0xdd
   15f58:	f00d f94b 	bl	231f2 <assert_post_action>
	while (true) {
   15f5c:	e73a      	b.n	15dd4 <ecc_thread+0xc>
   15f5e:	bf00      	nop
   15f60:	2000290c 	.word	0x2000290c
   15f64:	2000304e 	.word	0x2000304e
   15f68:	000274cc 	.word	0x000274cc
   15f6c:	2000306e 	.word	0x2000306e
   15f70:	0002866a 	.word	0x0002866a
   15f74:	2000308e 	.word	0x2000308e
   15f78:	0002741c 	.word	0x0002741c
   15f7c:	00028698 	.word	0x00028698
   15f80:	000286be 	.word	0x000286be
   15f84:	00027c9a 	.word	0x00027c9a
   15f88:	20000878 	.word	0x20000878

00015f8c <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   15f8c:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   15f8e:	7d05      	ldrb	r5, [r0, #20]
   15f90:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   15f92:	b9ad      	cbnz	r5, 15fc0 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   15f94:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   15f96:	881a      	ldrh	r2, [r3, #0]
   15f98:	f242 0125 	movw	r1, #8229	; 0x2025
   15f9c:	428a      	cmp	r2, r1
   15f9e:	d017      	beq.n	15fd0 <bt_hci_ecc_send+0x44>
   15fa0:	f242 0126 	movw	r1, #8230	; 0x2026
   15fa4:	428a      	cmp	r2, r1
   15fa6:	d03c      	beq.n	16022 <bt_hci_ecc_send+0x96>
   15fa8:	f242 0101 	movw	r1, #8193	; 0x2001
   15fac:	428a      	cmp	r2, r1
   15fae:	d107      	bne.n	15fc0 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   15fb0:	78da      	ldrb	r2, [r3, #3]
   15fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15fb6:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   15fb8:	791a      	ldrb	r2, [r3, #4]
   15fba:	f022 0201 	bic.w	r2, r2, #1
   15fbe:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   15fc0:	4b32      	ldr	r3, [pc, #200]	; (1608c <bt_hci_ecc_send+0x100>)
   15fc2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   15fc6:	4620      	mov	r0, r4
   15fc8:	691b      	ldr	r3, [r3, #16]
}
   15fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   15fce:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
   15fd0:	2103      	movs	r1, #3
   15fd2:	3008      	adds	r0, #8
   15fd4:	f007 fa20 	bl	1d418 <net_buf_simple_pull>
	net_buf_unref(buf);
   15fd8:	4620      	mov	r0, r4
   15fda:	f007 f941 	bl	1d260 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15fde:	f3bf 8f5b 	dmb	ish
   15fe2:	4b2b      	ldr	r3, [pc, #172]	; (16090 <bt_hci_ecc_send+0x104>)
   15fe4:	681a      	ldr	r2, [r3, #0]
   15fe6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   15fea:	0790      	lsls	r0, r2, #30
   15fec:	d507      	bpl.n	15ffe <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   15fee:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   15ff0:	4629      	mov	r1, r5
   15ff2:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   15ff6:	f00e fde8 	bl	24bca <send_cmd_status>
}
   15ffa:	2000      	movs	r0, #0
   15ffc:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15ffe:	f3bf 8f5b 	dmb	ish
   16002:	e853 2f00 	ldrex	r2, [r3]
   16006:	f042 0101 	orr.w	r1, r2, #1
   1600a:	e843 1000 	strex	r0, r1, [r3]
   1600e:	2800      	cmp	r0, #0
   16010:	d1f7      	bne.n	16002 <bt_hci_ecc_send+0x76>
   16012:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   16016:	07d1      	lsls	r1, r2, #31
   16018:	d4e9      	bmi.n	15fee <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
   1601a:	481e      	ldr	r0, [pc, #120]	; (16094 <bt_hci_ecc_send+0x108>)
   1601c:	f00b fce8 	bl	219f0 <z_impl_k_sem_give>
}
   16020:	e7e6      	b.n	15ff0 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
   16022:	2103      	movs	r1, #3
   16024:	3008      	adds	r0, #8
   16026:	f007 f9f7 	bl	1d418 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1602a:	f3bf 8f5b 	dmb	ish
   1602e:	4b18      	ldr	r3, [pc, #96]	; (16090 <bt_hci_ecc_send+0x104>)
   16030:	681a      	ldr	r2, [r3, #0]
   16032:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   16036:	07d2      	lsls	r2, r2, #31
   16038:	d507      	bpl.n	1604a <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   1603a:	250c      	movs	r5, #12
	net_buf_unref(buf);
   1603c:	4620      	mov	r0, r4
   1603e:	f007 f90f 	bl	1d260 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   16042:	4629      	mov	r1, r5
   16044:	f242 0026 	movw	r0, #8230	; 0x2026
   16048:	e7d5      	b.n	15ff6 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
   1604a:	89a2      	ldrh	r2, [r4, #12]
   1604c:	2a3f      	cmp	r2, #63	; 0x3f
   1604e:	d91b      	bls.n	16088 <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16050:	f3bf 8f5b 	dmb	ish
   16054:	e853 2f00 	ldrex	r2, [r3]
   16058:	f042 0102 	orr.w	r1, r2, #2
   1605c:	e843 1000 	strex	r0, r1, [r3]
   16060:	2800      	cmp	r0, #0
   16062:	d1f7      	bne.n	16054 <bt_hci_ecc_send+0xc8>
   16064:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   16068:	0793      	lsls	r3, r2, #30
   1606a:	d4e6      	bmi.n	1603a <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
   1606c:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
   1606e:	480a      	ldr	r0, [pc, #40]	; (16098 <bt_hci_ecc_send+0x10c>)
   16070:	4631      	mov	r1, r6
   16072:	f7ff fe83 	bl	15d7c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
   16076:	4809      	ldr	r0, [pc, #36]	; (1609c <bt_hci_ecc_send+0x110>)
   16078:	f106 0120 	add.w	r1, r6, #32
   1607c:	f7ff fe7e 	bl	15d7c <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
   16080:	4804      	ldr	r0, [pc, #16]	; (16094 <bt_hci_ecc_send+0x108>)
   16082:	f00b fcb5 	bl	219f0 <z_impl_k_sem_give>
}
   16086:	e7d9      	b.n	1603c <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
   16088:	2512      	movs	r5, #18
   1608a:	e7d7      	b.n	1603c <bt_hci_ecc_send+0xb0>
   1608c:	200003c8 	.word	0x200003c8
   16090:	2000290c 	.word	0x2000290c
   16094:	20000878 	.word	0x20000878
   16098:	2000306e 	.word	0x2000306e
   1609c:	2000308e 	.word	0x2000308e

000160a0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   160a0:	b510      	push	{r4, lr}
   160a2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   160a4:	4c0c      	ldr	r4, [pc, #48]	; (160d8 <bt_hci_ecc_init+0x38>)
   160a6:	490d      	ldr	r1, [pc, #52]	; (160dc <bt_hci_ecc_init+0x3c>)
   160a8:	2200      	movs	r2, #0
   160aa:	2300      	movs	r3, #0
   160ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
   160b0:	2300      	movs	r3, #0
   160b2:	220a      	movs	r2, #10
   160b4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   160b8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   160bc:	9300      	str	r3, [sp, #0]
   160be:	f44f 628a 	mov.w	r2, #1104	; 0x450
   160c2:	4b07      	ldr	r3, [pc, #28]	; (160e0 <bt_hci_ecc_init+0x40>)
   160c4:	4620      	mov	r0, r4
   160c6:	f00b fdc3 	bl	21c50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   160ca:	4906      	ldr	r1, [pc, #24]	; (160e4 <bt_hci_ecc_init+0x44>)
   160cc:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   160ce:	b008      	add	sp, #32
   160d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   160d4:	f010 bd8d 	b.w	26bf2 <z_impl_k_thread_name_set>
   160d8:	20001ec0 	.word	0x20001ec0
   160dc:	20003580 	.word	0x20003580
   160e0:	00015dc9 	.word	0x00015dc9
   160e4:	000286f1 	.word	0x000286f1

000160e8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   160e8:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   160ea:	480a      	ldr	r0, [pc, #40]	; (16114 <save_id+0x2c>)
   160ec:	2149      	movs	r1, #73	; 0x49
   160ee:	f00c fe1d 	bl	22d2c <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   160f2:	4909      	ldr	r1, [pc, #36]	; (16118 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   160f4:	4809      	ldr	r0, [pc, #36]	; (1611c <save_id+0x34>)
   160f6:	79ca      	ldrb	r2, [r1, #7]
   160f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   160fc:	f7fe f958 	bl	143b0 <settings_save_one>
	if (err) {
   16100:	4602      	mov	r2, r0
   16102:	b128      	cbz	r0, 16110 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   16104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   16108:	4805      	ldr	r0, [pc, #20]	; (16120 <save_id+0x38>)
   1610a:	2145      	movs	r1, #69	; 0x45
   1610c:	f00c be0e 	b.w	22d2c <printk>
}
   16110:	bd08      	pop	{r3, pc}
   16112:	bf00      	nop
   16114:	00028703 	.word	0x00028703
   16118:	200003c8 	.word	0x200003c8
   1611c:	00028712 	.word	0x00028712
   16120:	00028718 	.word	0x00028718

00016124 <set>:
{
   16124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16126:	4616      	mov	r6, r2
   16128:	461f      	mov	r7, r3
	if (!name) {
   1612a:	4604      	mov	r4, r0
   1612c:	b930      	cbnz	r0, 1613c <set+0x18>
		BT_ERR("Insufficient number of arguments");
   1612e:	481c      	ldr	r0, [pc, #112]	; (161a0 <set+0x7c>)
   16130:	2145      	movs	r1, #69	; 0x45
   16132:	f00c fdfb 	bl	22d2c <printk>
	return -ENOENT;
   16136:	f06f 0401 	mvn.w	r4, #1
   1613a:	e016      	b.n	1616a <set+0x46>
	len = settings_name_next(name, &next);
   1613c:	a901      	add	r1, sp, #4
   1613e:	f00d fa10 	bl	23562 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   16142:	4918      	ldr	r1, [pc, #96]	; (161a4 <set+0x80>)
	len = settings_name_next(name, &next);
   16144:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   16146:	4620      	mov	r0, r4
   16148:	f00e fc9d 	bl	24a86 <strncmp>
   1614c:	4604      	mov	r4, r0
   1614e:	2800      	cmp	r0, #0
   16150:	d1f1      	bne.n	16136 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16152:	f3bf 8f5b 	dmb	ish
   16156:	4d14      	ldr	r5, [pc, #80]	; (161a8 <set+0x84>)
   16158:	682b      	ldr	r3, [r5, #0]
   1615a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   1615e:	075b      	lsls	r3, r3, #29
   16160:	d506      	bpl.n	16170 <set+0x4c>
			BT_WARN("Ignoring identities stored in flash");
   16162:	4812      	ldr	r0, [pc, #72]	; (161ac <set+0x88>)
   16164:	2157      	movs	r1, #87	; 0x57
   16166:	f00c fde1 	bl	22d2c <printk>
}
   1616a:	4620      	mov	r0, r4
   1616c:	b003      	add	sp, #12
   1616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   16170:	3d98      	subs	r5, #152	; 0x98
   16172:	2207      	movs	r2, #7
   16174:	4629      	mov	r1, r5
   16176:	4638      	mov	r0, r7
   16178:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   1617a:	2806      	cmp	r0, #6
   1617c:	d80a      	bhi.n	16194 <set+0x70>
				BT_ERR("Invalid length ID address in storage");
   1617e:	480c      	ldr	r0, [pc, #48]	; (161b0 <set+0x8c>)
   16180:	2145      	movs	r1, #69	; 0x45
   16182:	f00c fdd3 	bl	22d2c <printk>
			(void)memset(bt_dev.id_addr, 0,
   16186:	2207      	movs	r2, #7
   16188:	4621      	mov	r1, r4
   1618a:	4628      	mov	r0, r5
   1618c:	f00e fcc5 	bl	24b1a <memset>
			bt_dev.id_count = 0U;
   16190:	71ec      	strb	r4, [r5, #7]
   16192:	e7ea      	b.n	1616a <set+0x46>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   16194:	2307      	movs	r3, #7
   16196:	fbb0 f0f3 	udiv	r0, r0, r3
   1619a:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   1619c:	e7e5      	b.n	1616a <set+0x46>
   1619e:	bf00      	nop
   161a0:	00028738 	.word	0x00028738
   161a4:	000279fa 	.word	0x000279fa
   161a8:	20000460 	.word	0x20000460
   161ac:	0002875e 	.word	0x0002875e
   161b0:	00028787 	.word	0x00028787

000161b4 <bt_settings_encode_key>:
{
   161b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161b8:	b088      	sub	sp, #32
   161ba:	799c      	ldrb	r4, [r3, #6]
   161bc:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   161c0:	795d      	ldrb	r5, [r3, #5]
   161c2:	791e      	ldrb	r6, [r3, #4]
   161c4:	78df      	ldrb	r7, [r3, #3]
   161c6:	f893 c002 	ldrb.w	ip, [r3, #2]
   161ca:	f893 e001 	ldrb.w	lr, [r3, #1]
   161ce:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   161d0:	f1b8 0f00 	cmp.w	r8, #0
   161d4:	d00e      	beq.n	161f4 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   161d6:	e9cd 3806 	strd	r3, r8, [sp, #24]
   161da:	e9cd ce04 	strd	ip, lr, [sp, #16]
   161de:	4613      	mov	r3, r2
   161e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   161e4:	e9cd 4500 	strd	r4, r5, [sp]
   161e8:	4a08      	ldr	r2, [pc, #32]	; (1620c <bt_settings_encode_key+0x58>)
   161ea:	f00c fdac 	bl	22d46 <snprintk>
}
   161ee:	b008      	add	sp, #32
   161f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   161f4:	e9cd e305 	strd	lr, r3, [sp, #20]
   161f8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   161fc:	4613      	mov	r3, r2
   161fe:	e9cd 5601 	strd	r5, r6, [sp, #4]
   16202:	4a03      	ldr	r2, [pc, #12]	; (16210 <bt_settings_encode_key+0x5c>)
   16204:	9400      	str	r4, [sp, #0]
   16206:	f00c fd9e 	bl	22d46 <snprintk>
}
   1620a:	e7f0      	b.n	161ee <bt_settings_encode_key+0x3a>
   1620c:	000287b1 	.word	0x000287b1
   16210:	000287d5 	.word	0x000287d5

00016214 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16214:	4909      	ldr	r1, [pc, #36]	; (1623c <bt_settings_save_id+0x28>)
   16216:	f3bf 8f5b 	dmb	ish
   1621a:	e851 3f00 	ldrex	r3, [r1]
   1621e:	f043 0201 	orr.w	r2, r3, #1
   16222:	e841 2000 	strex	r0, r2, [r1]
   16226:	2800      	cmp	r0, #0
   16228:	d1f7      	bne.n	1621a <bt_settings_save_id+0x6>
   1622a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1622e:	07db      	lsls	r3, r3, #31
   16230:	d403      	bmi.n	1623a <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
   16232:	4803      	ldr	r0, [pc, #12]	; (16240 <bt_settings_save_id+0x2c>)
   16234:	3908      	subs	r1, #8
   16236:	f010 bc65 	b.w	26b04 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
   1623a:	4770      	bx	lr
   1623c:	200005b4 	.word	0x200005b4
   16240:	200026c8 	.word	0x200026c8

00016244 <commit>:

static int commit(void)
{
   16244:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   16246:	4c17      	ldr	r4, [pc, #92]	; (162a4 <commit+0x60>)
   16248:	79e3      	ldrb	r3, [r4, #7]
   1624a:	b96b      	cbnz	r3, 16268 <commit+0x24>
		bt_setup_public_id_addr();
   1624c:	f001 fc32 	bl	17ab4 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
   16250:	79e3      	ldrb	r3, [r4, #7]
   16252:	b94b      	cbnz	r3, 16268 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
   16254:	f001 fcba 	bl	17bcc <bt_setup_random_id_addr>
		if (err) {
   16258:	4604      	mov	r4, r0
   1625a:	b128      	cbz	r0, 16268 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
   1625c:	4812      	ldr	r0, [pc, #72]	; (162a8 <commit+0x64>)
   1625e:	2145      	movs	r1, #69	; 0x45
   16260:	f00c fd64 	bl	22d2c <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   16264:	4620      	mov	r0, r4
   16266:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16268:	4d10      	ldr	r5, [pc, #64]	; (162ac <commit+0x68>)
   1626a:	f3bf 8f5b 	dmb	ish
   1626e:	682b      	ldr	r3, [r5, #0]
   16270:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16274:	079b      	lsls	r3, r3, #30
   16276:	d401      	bmi.n	1627c <commit+0x38>
		bt_finalize_init();
   16278:	f001 fb42 	bl	17900 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1627c:	f3bf 8f5b 	dmb	ish
   16280:	e855 4f00 	ldrex	r4, [r5]
   16284:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
   16288:	e845 3200 	strex	r2, r3, [r5]
   1628c:	2a00      	cmp	r2, #0
   1628e:	d1f7      	bne.n	16280 <commit+0x3c>
   16290:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   16294:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
   16298:	d0e4      	beq.n	16264 <commit+0x20>
		bt_settings_save_id();
   1629a:	f7ff ffbb 	bl	16214 <bt_settings_save_id>
	return 0;
   1629e:	2400      	movs	r4, #0
   162a0:	e7e0      	b.n	16264 <commit+0x20>
   162a2:	bf00      	nop
   162a4:	200003c8 	.word	0x200003c8
   162a8:	000287f6 	.word	0x000287f6
   162ac:	20000460 	.word	0x20000460

000162b0 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   162b0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   162b2:	f7fe f9ff 	bl	146b4 <settings_subsys_init>
	if (err) {
   162b6:	4604      	mov	r4, r0
   162b8:	b120      	cbz	r0, 162c4 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
   162ba:	4602      	mov	r2, r0
   162bc:	2145      	movs	r1, #69	; 0x45
   162be:	4802      	ldr	r0, [pc, #8]	; (162c8 <bt_settings_init+0x18>)
   162c0:	f00c fd34 	bl	22d2c <printk>
		return err;
	}

	return 0;
}
   162c4:	4620      	mov	r0, r4
   162c6:	bd10      	pop	{r4, pc}
   162c8:	0002881f 	.word	0x0002881f

000162cc <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   162cc:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   162ce:	7802      	ldrb	r2, [r0, #0]
   162d0:	2a01      	cmp	r2, #1
{
   162d2:	4604      	mov	r4, r0
   162d4:	460b      	mov	r3, r1
	switch (src->type) {
   162d6:	d016      	beq.n	16306 <uuid_to_uuid128+0x3a>
   162d8:	2a02      	cmp	r2, #2
   162da:	d02c      	beq.n	16336 <uuid_to_uuid128+0x6a>
   162dc:	b98a      	cbnz	r2, 16302 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   162de:	4a19      	ldr	r2, [pc, #100]	; (16344 <uuid_to_uuid128+0x78>)
   162e0:	460d      	mov	r5, r1
   162e2:	f102 0710 	add.w	r7, r2, #16
   162e6:	6810      	ldr	r0, [r2, #0]
   162e8:	6851      	ldr	r1, [r2, #4]
   162ea:	462e      	mov	r6, r5
   162ec:	c603      	stmia	r6!, {r0, r1}
   162ee:	3208      	adds	r2, #8
   162f0:	42ba      	cmp	r2, r7
   162f2:	4635      	mov	r5, r6
   162f4:	d1f7      	bne.n	162e6 <uuid_to_uuid128+0x1a>
   162f6:	7812      	ldrb	r2, [r2, #0]
   162f8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   162fa:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   162fc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   162fe:	0a12      	lsrs	r2, r2, #8
   16300:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   16302:	bcf0      	pop	{r4, r5, r6, r7}
   16304:	4770      	bx	lr
		*dst = uuid128_base;
   16306:	4a0f      	ldr	r2, [pc, #60]	; (16344 <uuid_to_uuid128+0x78>)
   16308:	460d      	mov	r5, r1
   1630a:	f102 0710 	add.w	r7, r2, #16
   1630e:	6810      	ldr	r0, [r2, #0]
   16310:	6851      	ldr	r1, [r2, #4]
   16312:	462e      	mov	r6, r5
   16314:	c603      	stmia	r6!, {r0, r1}
   16316:	3208      	adds	r2, #8
   16318:	42ba      	cmp	r2, r7
   1631a:	4635      	mov	r5, r6
   1631c:	d1f7      	bne.n	1630e <uuid_to_uuid128+0x42>
   1631e:	7812      	ldrb	r2, [r2, #0]
   16320:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   16322:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   16324:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   16326:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1632a:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   1632c:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   1632e:	0a12      	lsrs	r2, r2, #8
   16330:	7399      	strb	r1, [r3, #14]
   16332:	741a      	strb	r2, [r3, #16]
}
   16334:	e7e5      	b.n	16302 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   16336:	4601      	mov	r1, r0
}
   16338:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1633a:	2211      	movs	r2, #17
   1633c:	4618      	mov	r0, r3
   1633e:	f00e bbc1 	b.w	24ac4 <memcpy>
   16342:	bf00      	nop
   16344:	00028858 	.word	0x00028858

00016348 <le_dhkey_complete>:
{
   16348:	b510      	push	{r4, lr}
	if (dh_key_cb) {
   1634a:	4c06      	ldr	r4, [pc, #24]	; (16364 <le_dhkey_complete+0x1c>)
   1634c:	6822      	ldr	r2, [r4, #0]
   1634e:	b132      	cbz	r2, 1635e <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   16350:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
   16352:	7803      	ldrb	r3, [r0, #0]
   16354:	b923      	cbnz	r3, 16360 <le_dhkey_complete+0x18>
   16356:	3001      	adds	r0, #1
   16358:	4790      	blx	r2
		dh_key_cb = NULL;
   1635a:	2300      	movs	r3, #0
   1635c:	6023      	str	r3, [r4, #0]
}
   1635e:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
   16360:	2000      	movs	r0, #0
   16362:	e7f9      	b.n	16358 <le_dhkey_complete+0x10>
   16364:	20002928 	.word	0x20002928

00016368 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16368:	6883      	ldr	r3, [r0, #8]
   1636a:	4802      	ldr	r0, [pc, #8]	; (16374 <hci_data_buf_overflow+0xc>)
   1636c:	781a      	ldrb	r2, [r3, #0]
   1636e:	2157      	movs	r1, #87	; 0x57
   16370:	f00c bcdc 	b.w	22d2c <printk>
   16374:	00028869 	.word	0x00028869

00016378 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
   16378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1637a:	4f0a      	ldr	r7, [pc, #40]	; (163a4 <id_find+0x2c>)
{
   1637c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1637e:	2500      	movs	r5, #0
   16380:	79fb      	ldrb	r3, [r7, #7]
   16382:	b2ec      	uxtb	r4, r5
   16384:	42a3      	cmp	r3, r4
   16386:	d802      	bhi.n	1638e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16388:	f06f 0401 	mvn.w	r4, #1
   1638c:	e008      	b.n	163a0 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1638e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   16392:	4439      	add	r1, r7
   16394:	4630      	mov	r0, r6
   16396:	f00e fcf2 	bl	24d7e <bt_addr_le_cmp>
   1639a:	3501      	adds	r5, #1
   1639c:	2800      	cmp	r0, #0
   1639e:	d1ef      	bne.n	16380 <id_find+0x8>
}
   163a0:	4620      	mov	r0, r4
   163a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   163a4:	200003c8 	.word	0x200003c8

000163a8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   163a8:	6843      	ldr	r3, [r0, #4]
{
   163aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   163ac:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   163ae:	0558      	lsls	r0, r3, #21
   163b0:	d502      	bpl.n	163b8 <valid_adv_param+0x10>
		return false;
   163b2:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   163b4:	b003      	add	sp, #12
   163b6:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   163b8:	6922      	ldr	r2, [r4, #16]
   163ba:	b10a      	cbz	r2, 163c0 <valid_adv_param+0x18>
   163bc:	07d9      	lsls	r1, r3, #31
   163be:	d5f8      	bpl.n	163b2 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   163c0:	4d17      	ldr	r5, [pc, #92]	; (16420 <valid_adv_param+0x78>)
   163c2:	7820      	ldrb	r0, [r4, #0]
   163c4:	79eb      	ldrb	r3, [r5, #7]
   163c6:	4283      	cmp	r3, r0
   163c8:	d9f3      	bls.n	163b2 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   163ca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   163ce:	2300      	movs	r3, #0
   163d0:	4669      	mov	r1, sp
   163d2:	4428      	add	r0, r5
   163d4:	9300      	str	r3, [sp, #0]
   163d6:	f8cd 3003 	str.w	r3, [sp, #3]
   163da:	f00e fcd0 	bl	24d7e <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
   163de:	2800      	cmp	r0, #0
   163e0:	d0e7      	beq.n	163b2 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   163e2:	6860      	ldr	r0, [r4, #4]
   163e4:	07c2      	lsls	r2, r0, #31
   163e6:	d406      	bmi.n	163f6 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   163e8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   163ec:	2b08      	cmp	r3, #8
   163ee:	d802      	bhi.n	163f6 <valid_adv_param+0x4e>
   163f0:	68a3      	ldr	r3, [r4, #8]
   163f2:	2b9f      	cmp	r3, #159	; 0x9f
   163f4:	d9dd      	bls.n	163b2 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   163f6:	06c3      	lsls	r3, r0, #27
   163f8:	d401      	bmi.n	163fe <valid_adv_param+0x56>
   163fa:	6923      	ldr	r3, [r4, #16]
   163fc:	b943      	cbnz	r3, 16410 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
   163fe:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   16402:	429a      	cmp	r2, r3
   16404:	d8d5      	bhi.n	163b2 <valid_adv_param+0xa>
   16406:	2a1f      	cmp	r2, #31
   16408:	d9d3      	bls.n	163b2 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1640a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1640e:	d8d0      	bhi.n	163b2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   16410:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   16414:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   16418:	bf18      	it	ne
   1641a:	2001      	movne	r0, #1
   1641c:	e7ca      	b.n	163b4 <valid_adv_param+0xc>
   1641e:	bf00      	nop
   16420:	200003c8 	.word	0x200003c8

00016424 <le_pkey_complete>:
{
   16424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   16426:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16428:	480f      	ldr	r0, [pc, #60]	; (16468 <le_pkey_complete+0x44>)
   1642a:	f06f 0110 	mvn.w	r1, #16
   1642e:	f00e fca9 	bl	24d84 <atomic_and>
	if (!evt->status) {
   16432:	7833      	ldrb	r3, [r6, #0]
   16434:	b943      	cbnz	r3, 16448 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
   16436:	1c71      	adds	r1, r6, #1
   16438:	480c      	ldr	r0, [pc, #48]	; (1646c <le_pkey_complete+0x48>)
   1643a:	2240      	movs	r2, #64	; 0x40
   1643c:	f00e fb42 	bl	24ac4 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16440:	4809      	ldr	r0, [pc, #36]	; (16468 <le_pkey_complete+0x44>)
   16442:	2108      	movs	r1, #8
   16444:	f00e fc8c 	bl	24d60 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   16448:	4d09      	ldr	r5, [pc, #36]	; (16470 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
   1644a:	4f08      	ldr	r7, [pc, #32]	; (1646c <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   1644c:	682c      	ldr	r4, [r5, #0]
   1644e:	b90c      	cbnz	r4, 16454 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
   16450:	602c      	str	r4, [r5, #0]
}
   16452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
   16454:	7832      	ldrb	r2, [r6, #0]
   16456:	6823      	ldr	r3, [r4, #0]
   16458:	2a00      	cmp	r2, #0
   1645a:	bf0c      	ite	eq
   1645c:	4638      	moveq	r0, r7
   1645e:	2000      	movne	r0, #0
   16460:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
   16462:	6864      	ldr	r4, [r4, #4]
   16464:	e7f3      	b.n	1644e <le_pkey_complete+0x2a>
   16466:	bf00      	nop
   16468:	20000460 	.word	0x20000460
   1646c:	200030ae 	.word	0x200030ae
   16470:	2000292c 	.word	0x2000292c

00016474 <hci_hardware_error>:
{
   16474:	b508      	push	{r3, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   16476:	2101      	movs	r1, #1
   16478:	3008      	adds	r0, #8
   1647a:	f006 ffe9 	bl	1d450 <net_buf_simple_pull_mem>
}
   1647e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16482:	7802      	ldrb	r2, [r0, #0]
   16484:	4801      	ldr	r0, [pc, #4]	; (1648c <hci_hardware_error+0x18>)
   16486:	2145      	movs	r1, #69	; 0x45
   16488:	f00c bc50 	b.w	22d2c <printk>
   1648c:	00028896 	.word	0x00028896

00016490 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16490:	6883      	ldr	r3, [r0, #8]
{
   16492:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16494:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   16496:	4620      	mov	r0, r4
   16498:	f002 f9ec 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   1649c:	b930      	cbnz	r0, 164ac <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1649e:	4622      	mov	r2, r4
   164a0:	4804      	ldr	r0, [pc, #16]	; (164b4 <le_data_len_change+0x24>)
}
   164a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   164a6:	2145      	movs	r1, #69	; 0x45
   164a8:	f00c bc40 	b.w	22d2c <printk>
}
   164ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   164b0:	f00e bece 	b.w	25250 <bt_conn_unref>
   164b4:	000288bd 	.word	0x000288bd

000164b8 <hci_disconn_complete_prio>:
{
   164b8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   164ba:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   164bc:	781a      	ldrb	r2, [r3, #0]
   164be:	b9aa      	cbnz	r2, 164ec <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   164c0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   164c4:	4628      	mov	r0, r5
   164c6:	f002 f9d5 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   164ca:	4604      	mov	r4, r0
   164cc:	b930      	cbnz	r0, 164dc <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   164ce:	462a      	mov	r2, r5
   164d0:	4807      	ldr	r0, [pc, #28]	; (164f0 <hci_disconn_complete_prio+0x38>)
}
   164d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   164d6:	2145      	movs	r1, #69	; 0x45
   164d8:	f00c bc28 	b.w	22d2c <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   164dc:	2101      	movs	r1, #1
   164de:	f002 fa33 	bl	18948 <bt_conn_set_state>
	bt_conn_unref(conn);
   164e2:	4620      	mov	r0, r4
}
   164e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   164e8:	f00e beb2 	b.w	25250 <bt_conn_unref>
}
   164ec:	bd38      	pop	{r3, r4, r5, pc}
   164ee:	bf00      	nop
   164f0:	000288e6 	.word	0x000288e6

000164f4 <hci_disconn_complete>:
{
   164f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   164f6:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   164f8:	7835      	ldrb	r5, [r6, #0]
   164fa:	b9c5      	cbnz	r5, 1652e <hci_disconn_complete+0x3a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   164fc:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   16500:	4638      	mov	r0, r7
   16502:	f002 f9b7 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   16506:	4604      	mov	r4, r0
   16508:	b930      	cbnz	r0, 16518 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1650a:	463a      	mov	r2, r7
   1650c:	4808      	ldr	r0, [pc, #32]	; (16530 <hci_disconn_complete+0x3c>)
}
   1650e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   16512:	2145      	movs	r1, #69	; 0x45
   16514:	f00c bc0a 	b.w	22d2c <printk>
	conn->err = evt->reason;
   16518:	78f3      	ldrb	r3, [r6, #3]
   1651a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1651c:	4629      	mov	r1, r5
   1651e:	f002 fa13 	bl	18948 <bt_conn_set_state>
	conn->handle = 0U;
   16522:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   16524:	4620      	mov	r0, r4
}
   16526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1652a:	f00e be91 	b.w	25250 <bt_conn_unref>
}
   1652e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16530:	000288e6 	.word	0x000288e6

00016534 <hci_vendor_event>:
{
   16534:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   16536:	8981      	ldrh	r1, [r0, #12]
   16538:	6880      	ldr	r0, [r0, #8]
   1653a:	f7ff fbbf 	bl	15cbc <bt_hex_real>
}
   1653e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   16542:	4602      	mov	r2, r0
   16544:	2157      	movs	r1, #87	; 0x57
   16546:	4801      	ldr	r0, [pc, #4]	; (1654c <hci_vendor_event+0x18>)
   16548:	f00c bbf0 	b.w	22d2c <printk>
   1654c:	00028911 	.word	0x00028911

00016550 <le_conn_update_complete>:
{
   16550:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16552:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16554:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16558:	4630      	mov	r0, r6
   1655a:	f002 f98b 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   1655e:	4604      	mov	r4, r0
   16560:	b930      	cbnz	r0, 16570 <le_conn_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16562:	481c      	ldr	r0, [pc, #112]	; (165d4 <le_conn_update_complete+0x84>)
   16564:	4632      	mov	r2, r6
   16566:	2145      	movs	r1, #69	; 0x45
   16568:	f00c fbe0 	bl	22d2c <printk>
}
   1656c:	b002      	add	sp, #8
   1656e:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   16570:	782b      	ldrb	r3, [r5, #0]
   16572:	b9bb      	cbnz	r3, 165a4 <le_conn_update_complete+0x54>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   16574:	792a      	ldrb	r2, [r5, #4]
   16576:	78eb      	ldrb	r3, [r5, #3]
   16578:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1657c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   16580:	79aa      	ldrb	r2, [r5, #6]
   16582:	796b      	ldrb	r3, [r5, #5]
   16584:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16588:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1658c:	79eb      	ldrb	r3, [r5, #7]
   1658e:	7a2a      	ldrb	r2, [r5, #8]
   16590:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16594:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   16598:	f001 ff7c 	bl	18494 <notify_le_param_updated>
	bt_conn_unref(conn);
   1659c:	4620      	mov	r0, r4
   1659e:	f00e fe57 	bl	25250 <bt_conn_unref>
   165a2:	e7e3      	b.n	1656c <le_conn_update_complete+0x1c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   165a4:	2b1a      	cmp	r3, #26
   165a6:	d1f9      	bne.n	1659c <le_conn_update_complete+0x4c>
   165a8:	78c3      	ldrb	r3, [r0, #3]
   165aa:	2b01      	cmp	r3, #1
   165ac:	d1f6      	bne.n	1659c <le_conn_update_complete+0x4c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   165ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
   165b2:	3004      	adds	r0, #4
   165b4:	f00e fbd4 	bl	24d60 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   165b8:	0543      	lsls	r3, r0, #21
   165ba:	d4ef      	bmi.n	1659c <le_conn_update_complete+0x4c>
		param.interval_min = conn->le.interval_min;
   165bc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   165c0:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   165c2:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   165c4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   165c8:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   165ca:	4620      	mov	r0, r4
   165cc:	f002 fda8 	bl	19120 <bt_l2cap_update_conn_param>
   165d0:	e7e4      	b.n	1659c <le_conn_update_complete+0x4c>
   165d2:	bf00      	nop
   165d4:	000288bd 	.word	0x000288bd

000165d8 <update_sec_level>:
{
   165d8:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
   165da:	7ac3      	ldrb	r3, [r0, #11]
{
   165dc:	4604      	mov	r4, r0
	if (!conn->encrypt) {
   165de:	b913      	cbnz	r3, 165e6 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
   165e0:	2301      	movs	r3, #1
   165e2:	7243      	strb	r3, [r0, #9]
}
   165e4:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   165e6:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   165ea:	b1cb      	cbz	r3, 16620 <update_sec_level+0x48>
   165ec:	7b5a      	ldrb	r2, [r3, #13]
   165ee:	07d1      	lsls	r1, r2, #31
   165f0:	d516      	bpl.n	16620 <update_sec_level+0x48>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   165f2:	06d2      	lsls	r2, r2, #27
   165f4:	d512      	bpl.n	1661c <update_sec_level+0x44>
   165f6:	7b1b      	ldrb	r3, [r3, #12]
   165f8:	2b10      	cmp	r3, #16
   165fa:	d10f      	bne.n	1661c <update_sec_level+0x44>
			conn->sec_level = BT_SECURITY_L4;
   165fc:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   165fe:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
   16600:	7aa2      	ldrb	r2, [r4, #10]
   16602:	7a63      	ldrb	r3, [r4, #9]
   16604:	429a      	cmp	r2, r3
   16606:	d9ed      	bls.n	165e4 <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
   16608:	4806      	ldr	r0, [pc, #24]	; (16624 <update_sec_level+0x4c>)
   1660a:	2145      	movs	r1, #69	; 0x45
   1660c:	f00c fb8e 	bl	22d2c <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
   16610:	4620      	mov	r0, r4
   16612:	2105      	movs	r1, #5
}
   16614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
   16618:	f002 ba6c 	b.w	18af4 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
   1661c:	2303      	movs	r3, #3
   1661e:	e7ee      	b.n	165fe <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
   16620:	2302      	movs	r3, #2
   16622:	e7ec      	b.n	165fe <update_sec_level+0x26>
   16624:	0002893a 	.word	0x0002893a

00016628 <hci_encrypt_key_refresh_complete>:
{
   16628:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1662a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1662c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16630:	4630      	mov	r0, r6
   16632:	f002 f91f 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   16636:	4604      	mov	r4, r0
   16638:	b930      	cbnz	r0, 16648 <hci_encrypt_key_refresh_complete+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1663a:	4632      	mov	r2, r6
   1663c:	480f      	ldr	r0, [pc, #60]	; (1667c <hci_encrypt_key_refresh_complete+0x54>)
}
   1663e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   16642:	2145      	movs	r1, #69	; 0x45
   16644:	f00c bb72 	b.w	22d2c <printk>
	if (evt->status) {
   16648:	7829      	ldrb	r1, [r5, #0]
   1664a:	b161      	cbz	r1, 16666 <hci_encrypt_key_refresh_complete+0x3e>
	switch (hci_err) {
   1664c:	2929      	cmp	r1, #41	; 0x29
   1664e:	bf9a      	itte	ls
   16650:	4b0b      	ldrls	r3, [pc, #44]	; (16680 <hci_encrypt_key_refresh_complete+0x58>)
   16652:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
   16654:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   16656:	4620      	mov	r0, r4
   16658:	f001 ff8a 	bl	18570 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1665c:	4620      	mov	r0, r4
}
   1665e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   16662:	f00e bdf5 	b.w	25250 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   16666:	7883      	ldrb	r3, [r0, #2]
   16668:	2b01      	cmp	r3, #1
   1666a:	d104      	bne.n	16676 <hci_encrypt_key_refresh_complete+0x4e>
		bt_smp_update_keys(conn);
   1666c:	f006 fa7e 	bl	1cb6c <bt_smp_update_keys>
		update_sec_level(conn);
   16670:	4620      	mov	r0, r4
   16672:	f7ff ffb1 	bl	165d8 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   16676:	7829      	ldrb	r1, [r5, #0]
   16678:	2200      	movs	r2, #0
   1667a:	e7ec      	b.n	16656 <hci_encrypt_key_refresh_complete+0x2e>
   1667c:	000288e6 	.word	0x000288e6
   16680:	0002909d 	.word	0x0002909d

00016684 <hci_encrypt_change>:
{
   16684:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   16686:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16688:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1668c:	4630      	mov	r0, r6
   1668e:	f002 f8f1 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   16692:	4604      	mov	r4, r0
   16694:	b930      	cbnz	r0, 166a4 <hci_encrypt_change+0x20>
		BT_ERR("Unable to look up conn with handle %u", handle);
   16696:	4632      	mov	r2, r6
   16698:	4811      	ldr	r0, [pc, #68]	; (166e0 <hci_encrypt_change+0x5c>)
}
   1669a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1669e:	2145      	movs	r1, #69	; 0x45
   166a0:	f00c bb44 	b.w	22d2c <printk>
	if (evt->status) {
   166a4:	7829      	ldrb	r1, [r5, #0]
   166a6:	b161      	cbz	r1, 166c2 <hci_encrypt_change+0x3e>
	switch (hci_err) {
   166a8:	2929      	cmp	r1, #41	; 0x29
   166aa:	bf9a      	itte	ls
   166ac:	4b0d      	ldrls	r3, [pc, #52]	; (166e4 <hci_encrypt_change+0x60>)
   166ae:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
   166b0:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   166b2:	4620      	mov	r0, r4
   166b4:	f001 ff5c 	bl	18570 <bt_conn_security_changed>
	bt_conn_unref(conn);
   166b8:	4620      	mov	r0, r4
}
   166ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   166be:	f00e bdc7 	b.w	25250 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   166c2:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   166c4:	78eb      	ldrb	r3, [r5, #3]
   166c6:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   166c8:	2a01      	cmp	r2, #1
   166ca:	d105      	bne.n	166d8 <hci_encrypt_change+0x54>
		if (conn->encrypt) {
   166cc:	b10b      	cbz	r3, 166d2 <hci_encrypt_change+0x4e>
			bt_smp_update_keys(conn);
   166ce:	f006 fa4d 	bl	1cb6c <bt_smp_update_keys>
		update_sec_level(conn);
   166d2:	4620      	mov	r0, r4
   166d4:	f7ff ff80 	bl	165d8 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
   166d8:	7829      	ldrb	r1, [r5, #0]
   166da:	2200      	movs	r2, #0
   166dc:	e7e9      	b.n	166b2 <hci_encrypt_change+0x2e>
   166de:	bf00      	nop
   166e0:	000288e6 	.word	0x000288e6
   166e4:	0002909d 	.word	0x0002909d

000166e8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   166e8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   166ea:	4c0c      	ldr	r4, [pc, #48]	; (1671c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   166ec:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   166ee:	2205      	movs	r2, #5
   166f0:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   166f4:	f002 f8e6 	bl	188c4 <bt_conn_lookup_state_le>
		if (!conn) {
   166f8:	b970      	cbnz	r0, 16718 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   166fa:	4b09      	ldr	r3, [pc, #36]	; (16720 <find_pending_connect.part.0+0x38>)
   166fc:	6818      	ldr	r0, [r3, #0]
   166fe:	889a      	ldrh	r2, [r3, #4]
   16700:	9000      	str	r0, [sp, #0]
   16702:	799b      	ldrb	r3, [r3, #6]
   16704:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16708:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
   1670c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16710:	2204      	movs	r2, #4
   16712:	4669      	mov	r1, sp
   16714:	f002 f8d6 	bl	188c4 <bt_conn_lookup_state_le>
}
   16718:	b002      	add	sp, #8
   1671a:	bd10      	pop	{r4, pc}
   1671c:	200003c8 	.word	0x200003c8
   16720:	000271b8 	.word	0x000271b8

00016724 <hci_cmd_done>:
{
   16724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16728:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1672a:	7990      	ldrb	r0, [r2, #6]
   1672c:	4d2c      	ldr	r5, [pc, #176]	; (167e0 <hci_cmd_done+0xbc>)
{
   1672e:	460f      	mov	r7, r1
   16730:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16732:	f006 fc17 	bl	1cf64 <net_buf_pool_get>
   16736:	4285      	cmp	r5, r0
   16738:	d00e      	beq.n	16758 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1673a:	79a4      	ldrb	r4, [r4, #6]
   1673c:	4620      	mov	r0, r4
   1673e:	f006 fc11 	bl	1cf64 <net_buf_pool_get>
   16742:	4623      	mov	r3, r4
   16744:	e9cd 0500 	strd	r0, r5, [sp]
   16748:	4632      	mov	r2, r6
   1674a:	4826      	ldr	r0, [pc, #152]	; (167e4 <hci_cmd_done+0xc0>)
   1674c:	2157      	movs	r1, #87	; 0x57
   1674e:	f00c faed 	bl	22d2c <printk>
}
   16752:	b002      	add	sp, #8
   16754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   16758:	4620      	mov	r0, r4
   1675a:	f006 fc0b 	bl	1cf74 <net_buf_id>
   1675e:	4d22      	ldr	r5, [pc, #136]	; (167e8 <hci_cmd_done+0xc4>)
   16760:	f04f 080c 	mov.w	r8, #12
   16764:	fb08 5300 	mla	r3, r8, r0, r5
   16768:	885b      	ldrh	r3, [r3, #2]
   1676a:	42b3      	cmp	r3, r6
   1676c:	d00a      	beq.n	16784 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1676e:	4620      	mov	r0, r4
   16770:	f006 fc00 	bl	1cf74 <net_buf_id>
   16774:	fb08 5000 	mla	r0, r8, r0, r5
   16778:	4632      	mov	r2, r6
   1677a:	8843      	ldrh	r3, [r0, #2]
   1677c:	481b      	ldr	r0, [pc, #108]	; (167ec <hci_cmd_done+0xc8>)
   1677e:	2157      	movs	r1, #87	; 0x57
   16780:	f00c fad4 	bl	22d2c <printk>
	if (cmd(buf)->state && !status) {
   16784:	4620      	mov	r0, r4
   16786:	f006 fbf5 	bl	1cf74 <net_buf_id>
   1678a:	260c      	movs	r6, #12
   1678c:	fb06 5000 	mla	r0, r6, r0, r5
   16790:	6843      	ldr	r3, [r0, #4]
   16792:	b15b      	cbz	r3, 167ac <hci_cmd_done+0x88>
   16794:	b957      	cbnz	r7, 167ac <hci_cmd_done+0x88>
		struct cmd_state_set *update = cmd(buf)->state;
   16796:	4620      	mov	r0, r4
   16798:	f006 fbec 	bl	1cf74 <net_buf_id>
   1679c:	fb06 5000 	mla	r0, r6, r0, r5
   167a0:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   167a2:	e9d3 0100 	ldrd	r0, r1, [r3]
   167a6:	7a1a      	ldrb	r2, [r3, #8]
   167a8:	f00e fafb 	bl	24da2 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
   167ac:	4620      	mov	r0, r4
   167ae:	f006 fbe1 	bl	1cf74 <net_buf_id>
   167b2:	260c      	movs	r6, #12
   167b4:	fb06 5000 	mla	r0, r6, r0, r5
   167b8:	6883      	ldr	r3, [r0, #8]
   167ba:	2b00      	cmp	r3, #0
   167bc:	d0c9      	beq.n	16752 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   167be:	4620      	mov	r0, r4
   167c0:	f006 fbd8 	bl	1cf74 <net_buf_id>
   167c4:	4370      	muls	r0, r6
   167c6:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   167c8:	4620      	mov	r0, r4
   167ca:	f006 fbd3 	bl	1cf74 <net_buf_id>
   167ce:	fb06 5500 	mla	r5, r6, r0, r5
   167d2:	68a8      	ldr	r0, [r5, #8]
}
   167d4:	b002      	add	sp, #8
   167d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   167da:	f00b b909 	b.w	219f0 <z_impl_k_sem_give>
   167de:	bf00      	nop
   167e0:	20000990 	.word	0x20000990
   167e4:	00028965 	.word	0x00028965
   167e8:	20002910 	.word	0x20002910
   167ec:	0002899f 	.word	0x0002899f

000167f0 <handle_event>:
{
   167f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   167f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   167f6:	4605      	mov	r5, r0
   167f8:	4614      	mov	r4, r2
   167fa:	4608      	mov	r0, r1
		if (handler->event != event) {
   167fc:	7822      	ldrb	r2, [r4, #0]
   167fe:	42aa      	cmp	r2, r5
   16800:	d010      	beq.n	16824 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
   16802:	3408      	adds	r4, #8
   16804:	429c      	cmp	r4, r3
   16806:	d1f9      	bne.n	167fc <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   16808:	8984      	ldrh	r4, [r0, #12]
   1680a:	6880      	ldr	r0, [r0, #8]
   1680c:	4621      	mov	r1, r4
   1680e:	f7ff fa55 	bl	15cbc <bt_hex_real>
   16812:	4623      	mov	r3, r4
   16814:	9000      	str	r0, [sp, #0]
   16816:	462a      	mov	r2, r5
   16818:	480b      	ldr	r0, [pc, #44]	; (16848 <handle_event+0x58>)
   1681a:	2157      	movs	r1, #87	; 0x57
   1681c:	f00c fa86 	bl	22d2c <printk>
}
   16820:	b003      	add	sp, #12
   16822:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
   16824:	8982      	ldrh	r2, [r0, #12]
   16826:	7863      	ldrb	r3, [r4, #1]
   16828:	4293      	cmp	r3, r2
   1682a:	d907      	bls.n	1683c <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1682c:	4807      	ldr	r0, [pc, #28]	; (1684c <handle_event+0x5c>)
   1682e:	462b      	mov	r3, r5
   16830:	2145      	movs	r1, #69	; 0x45
}
   16832:	b003      	add	sp, #12
   16834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16838:	f00c ba78 	b.w	22d2c <printk>
		handler->handler(buf);
   1683c:	6863      	ldr	r3, [r4, #4]
}
   1683e:	b003      	add	sp, #12
   16840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   16844:	4718      	bx	r3
   16846:	bf00      	nop
   16848:	000289fe 	.word	0x000289fe
   1684c:	000289d7 	.word	0x000289d7

00016850 <hci_le_meta_event>:
{
   16850:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   16852:	2101      	movs	r1, #1
{
   16854:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   16856:	3008      	adds	r0, #8
   16858:	f006 fdfa 	bl	1d450 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1685c:	4621      	mov	r1, r4
   1685e:	4a03      	ldr	r2, [pc, #12]	; (1686c <hci_le_meta_event+0x1c>)
   16860:	7800      	ldrb	r0, [r0, #0]
}
   16862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16866:	230a      	movs	r3, #10
   16868:	f7ff bfc2 	b.w	167f0 <handle_event>
   1686c:	000274ec 	.word	0x000274ec

00016870 <hci_rx_thread>:
{
   16870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   16874:	4f40      	ldr	r7, [pc, #256]	; (16978 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16876:	f8df 8118 	ldr.w	r8, [pc, #280]	; 16990 <hci_rx_thread+0x120>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1687a:	4e40      	ldr	r6, [pc, #256]	; (1697c <hci_rx_thread+0x10c>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1687c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16884:	4638      	mov	r0, r7
   16886:	f006 fc69 	bl	1d15c <net_buf_get>
   1688a:	7d02      	ldrb	r2, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   1688c:	2a01      	cmp	r2, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1688e:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   16890:	d041      	beq.n	16916 <hci_rx_thread+0xa6>
   16892:	2a03      	cmp	r2, #3
   16894:	d16c      	bne.n	16970 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16896:	8983      	ldrh	r3, [r0, #12]
   16898:	2b03      	cmp	r3, #3
   1689a:	d80b      	bhi.n	168b4 <hci_rx_thread+0x44>
   1689c:	4838      	ldr	r0, [pc, #224]	; (16980 <hci_rx_thread+0x110>)
   1689e:	f240 520a 	movw	r2, #1290	; 0x50a
   168a2:	4631      	mov	r1, r6
   168a4:	f00c fa42 	bl	22d2c <printk>
   168a8:	4040      	eors	r0, r0
   168aa:	f380 8811 	msr	BASEPRI, r0
   168ae:	f04f 0003 	mov.w	r0, #3
   168b2:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   168b4:	2104      	movs	r1, #4
   168b6:	f104 0008 	add.w	r0, r4, #8
   168ba:	f006 fdc9 	bl	1d450 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   168be:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   168c0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   168c2:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   168c6:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   168c8:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   168ca:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   168ce:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   168d0:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   168d2:	d007      	beq.n	168e4 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   168d4:	482b      	ldr	r0, [pc, #172]	; (16984 <hci_rx_thread+0x114>)
   168d6:	2145      	movs	r1, #69	; 0x45
   168d8:	f00c fa28 	bl	22d2c <printk>
			net_buf_unref(buf);
   168dc:	4620      	mov	r0, r4
   168de:	f006 fcbf 	bl	1d260 <net_buf_unref>
			break;
   168e2:	e015      	b.n	16910 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   168e4:	f001 ffc6 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   168e8:	4605      	mov	r5, r0
   168ea:	b928      	cbnz	r0, 168f8 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   168ec:	8ae2      	ldrh	r2, [r4, #22]
   168ee:	4826      	ldr	r0, [pc, #152]	; (16988 <hci_rx_thread+0x118>)
   168f0:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   168f2:	f00c fa1b 	bl	22d2c <printk>
   168f6:	e7f1      	b.n	168dc <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
   168f8:	f002 faa6 	bl	18e48 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   168fc:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   16900:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   16902:	4621      	mov	r1, r4
   16904:	4628      	mov	r0, r5
   16906:	f001 fe91 	bl	1862c <bt_conn_recv>
	bt_conn_unref(conn);
   1690a:	4628      	mov	r0, r5
   1690c:	f00e fca0 	bl	25250 <bt_conn_unref>
	z_impl_k_yield();
   16910:	f00a ff2e 	bl	21770 <z_impl_k_yield>
	while (1) {
   16914:	e7b2      	b.n	1687c <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16916:	8983      	ldrh	r3, [r0, #12]
   16918:	2b01      	cmp	r3, #1
   1691a:	d80b      	bhi.n	16934 <hci_rx_thread+0xc4>
   1691c:	4818      	ldr	r0, [pc, #96]	; (16980 <hci_rx_thread+0x110>)
   1691e:	f241 4259 	movw	r2, #5209	; 0x1459
   16922:	4631      	mov	r1, r6
   16924:	f00c fa02 	bl	22d2c <printk>
   16928:	4040      	eors	r0, r0
   1692a:	f380 8811 	msr	BASEPRI, r0
   1692e:	f04f 0003 	mov.w	r0, #3
   16932:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   16934:	2102      	movs	r1, #2
   16936:	f104 0008 	add.w	r0, r4, #8
   1693a:	f006 fd89 	bl	1d450 <net_buf_simple_pull_mem>
   1693e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16940:	7800      	ldrb	r0, [r0, #0]
   16942:	f00e f9e3 	bl	24d0c <bt_hci_evt_get_flags>
   16946:	0783      	lsls	r3, r0, #30
   16948:	d40b      	bmi.n	16962 <hci_rx_thread+0xf2>
   1694a:	480d      	ldr	r0, [pc, #52]	; (16980 <hci_rx_thread+0x110>)
   1694c:	f241 425d 	movw	r2, #5213	; 0x145d
   16950:	4631      	mov	r1, r6
   16952:	f00c f9eb 	bl	22d2c <printk>
   16956:	4040      	eors	r0, r0
   16958:	f380 8811 	msr	BASEPRI, r0
   1695c:	f04f 0003 	mov.w	r0, #3
   16960:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16962:	7828      	ldrb	r0, [r5, #0]
   16964:	2306      	movs	r3, #6
   16966:	4642      	mov	r2, r8
   16968:	4621      	mov	r1, r4
   1696a:	f7ff ff41 	bl	167f0 <handle_event>
	net_buf_unref(buf);
   1696e:	e7b5      	b.n	168dc <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16970:	4806      	ldr	r0, [pc, #24]	; (1698c <hci_rx_thread+0x11c>)
   16972:	2145      	movs	r1, #69	; 0x45
   16974:	e7bd      	b.n	168f2 <hci_rx_thread+0x82>
   16976:	bf00      	nop
   16978:	200004d4 	.word	0x200004d4
   1697c:	00028a25 	.word	0x00028a25
   16980:	00027c9a 	.word	0x00027c9a
   16984:	00028a59 	.word	0x00028a59
   16988:	00028a82 	.word	0x00028a82
   1698c:	00028aa9 	.word	0x00028aa9
   16990:	0002757c 	.word	0x0002757c

00016994 <hci_tx_thread>:
{
   16994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16998:	f8df 8128 	ldr.w	r8, [pc, #296]	; 16ac4 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
   1699c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 16ae8 <hci_tx_thread+0x154>
			ev_count += bt_conn_prepare_events(&events[1]);
   169a0:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   169a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   169a8:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   169aa:	f36f 3310 	bfc	r3, #12, #5
   169ae:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   169b2:	f001 fef7 	bl	187a4 <bt_conn_prepare_events>
   169b6:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   169b8:	4842      	ldr	r0, [pc, #264]	; (16ac4 <hci_tx_thread+0x130>)
   169ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   169be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   169c2:	4631      	mov	r1, r6
   169c4:	f00b ffde 	bl	22984 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   169c8:	b158      	cbz	r0, 169e2 <hci_tx_thread+0x4e>
   169ca:	483f      	ldr	r0, [pc, #252]	; (16ac8 <hci_tx_thread+0x134>)
   169cc:	f241 42cf 	movw	r2, #5327	; 0x14cf
   169d0:	4649      	mov	r1, r9
   169d2:	f00c f9ab 	bl	22d2c <printk>
   169d6:	4040      	eors	r0, r0
   169d8:	f380 8811 	msr	BASEPRI, r0
   169dc:	f04f 0003 	mov.w	r0, #3
   169e0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   169e2:	4d3a      	ldr	r5, [pc, #232]	; (16acc <hci_tx_thread+0x138>)
{
   169e4:	4f37      	ldr	r7, [pc, #220]	; (16ac4 <hci_tx_thread+0x130>)
   169e6:	f105 0bf0 	add.w	fp, r5, #240	; 0xf0
	for (; count; ev++, count--) {
   169ea:	b916      	cbnz	r6, 169f2 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   169ec:	f00a fec0 	bl	21770 <z_impl_k_yield>
	while (1) {
   169f0:	e7d8      	b.n	169a4 <hci_tx_thread+0x10>
		switch (ev->state) {
   169f2:	68fa      	ldr	r2, [r7, #12]
   169f4:	f3c2 3204 	ubfx	r2, r2, #12, #5
   169f8:	2a01      	cmp	r2, #1
   169fa:	d953      	bls.n	16aa4 <hci_tx_thread+0x110>
   169fc:	2a04      	cmp	r2, #4
   169fe:	d15b      	bne.n	16ab8 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16a00:	7b3b      	ldrb	r3, [r7, #12]
   16a02:	2b00      	cmp	r3, #0
   16a04:	d151      	bne.n	16aaa <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   16a06:	4832      	ldr	r0, [pc, #200]	; (16ad0 <hci_tx_thread+0x13c>)
   16a08:	2200      	movs	r2, #0
   16a0a:	2300      	movs	r3, #0
   16a0c:	f006 fba6 	bl	1d15c <net_buf_get>
	BT_ASSERT(buf);
   16a10:	4604      	mov	r4, r0
   16a12:	b958      	cbnz	r0, 16a2c <hci_tx_thread+0x98>
   16a14:	482c      	ldr	r0, [pc, #176]	; (16ac8 <hci_tx_thread+0x134>)
   16a16:	f241 426c 	movw	r2, #5228	; 0x146c
   16a1a:	4649      	mov	r1, r9
   16a1c:	f00c f986 	bl	22d2c <printk>
   16a20:	4040      	eors	r0, r0
   16a22:	f380 8811 	msr	BASEPRI, r0
   16a26:	f04f 0003 	mov.w	r0, #3
   16a2a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   16a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16a34:	4658      	mov	r0, fp
   16a36:	f00b f817 	bl	21a68 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   16a3a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   16a3e:	b153      	cbz	r3, 16a56 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
   16a40:	4824      	ldr	r0, [pc, #144]	; (16ad4 <hci_tx_thread+0x140>)
   16a42:	2145      	movs	r1, #69	; 0x45
   16a44:	f00c f972 	bl	22d2c <printk>
		net_buf_unref(bt_dev.sent_cmd);
   16a48:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   16a4c:	f006 fc08 	bl	1d260 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16a50:	2300      	movs	r3, #0
   16a52:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   16a56:	4620      	mov	r0, r4
   16a58:	f006 fc46 	bl	1d2e8 <net_buf_ref>
   16a5c:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
		return bt_hci_ecc_send(buf);
   16a60:	4620      	mov	r0, r4
   16a62:	f7ff fa93 	bl	15f8c <bt_hci_ecc_send>
	if (err) {
   16a66:	4602      	mov	r2, r0
   16a68:	b1e0      	cbz	r0, 16aa4 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
   16a6a:	481b      	ldr	r0, [pc, #108]	; (16ad8 <hci_tx_thread+0x144>)
   16a6c:	2145      	movs	r1, #69	; 0x45
   16a6e:	f00c f95d 	bl	22d2c <printk>
	z_impl_k_sem_give(sem);
   16a72:	481a      	ldr	r0, [pc, #104]	; (16adc <hci_tx_thread+0x148>)
   16a74:	f00a ffbc 	bl	219f0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16a78:	4620      	mov	r0, r4
   16a7a:	f006 fa7b 	bl	1cf74 <net_buf_id>
   16a7e:	4b18      	ldr	r3, [pc, #96]	; (16ae0 <hci_tx_thread+0x14c>)
   16a80:	220c      	movs	r2, #12
   16a82:	fb02 3000 	mla	r0, r2, r0, r3
   16a86:	211f      	movs	r1, #31
   16a88:	8840      	ldrh	r0, [r0, #2]
   16a8a:	4622      	mov	r2, r4
   16a8c:	f7ff fe4a 	bl	16724 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   16a90:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   16a94:	f006 fbe4 	bl	1d260 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16a98:	2300      	movs	r3, #0
		net_buf_unref(buf);
   16a9a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   16a9c:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
		net_buf_unref(buf);
   16aa0:	f006 fbde 	bl	1d260 <net_buf_unref>
	for (; count; ev++, count--) {
   16aa4:	3714      	adds	r7, #20
   16aa6:	3e01      	subs	r6, #1
   16aa8:	e79f      	b.n	169ea <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16aaa:	2b01      	cmp	r3, #1
   16aac:	d1fa      	bne.n	16aa4 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
   16aae:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   16ab0:	3834      	subs	r0, #52	; 0x34
   16ab2:	f002 f939 	bl	18d28 <bt_conn_process_tx>
   16ab6:	e7f5      	b.n	16aa4 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   16ab8:	480a      	ldr	r0, [pc, #40]	; (16ae4 <hci_tx_thread+0x150>)
   16aba:	2157      	movs	r1, #87	; 0x57
   16abc:	f00c f936 	bl	22d2c <printk>
   16ac0:	e7f0      	b.n	16aa4 <hci_tx_thread+0x110>
   16ac2:	bf00      	nop
   16ac4:	200005b8 	.word	0x200005b8
   16ac8:	00027c9a 	.word	0x00027c9a
   16acc:	200003c8 	.word	0x200003c8
   16ad0:	200004f0 	.word	0x200004f0
   16ad4:	00028ac2 	.word	0x00028ac2
   16ad8:	00028ae2 	.word	0x00028ae2
   16adc:	200004b8 	.word	0x200004b8
   16ae0:	20002910 	.word	0x20002910
   16ae4:	00028b09 	.word	0x00028b09
   16ae8:	00028a25 	.word	0x00028a25

00016aec <hci_num_completed_packets>:
{
   16aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   16af0:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16af2:	6887      	ldr	r7, [r0, #8]
   16af4:	f8df 9104 	ldr.w	r9, [pc, #260]	; 16bfc <hci_num_completed_packets+0x110>
			tx->pending_no_cb = 0U;
   16af8:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   16afa:	783b      	ldrb	r3, [r7, #0]
   16afc:	429d      	cmp	r5, r3
   16afe:	db01      	blt.n	16b04 <hci_num_completed_packets+0x18>
}
   16b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16b04:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   16b08:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16b0c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
   16b10:	f04f 0340 	mov.w	r3, #64	; 0x40
   16b14:	f3ef 8a11 	mrs	sl, BASEPRI
   16b18:	f383 8811 	msr	BASEPRI, r3
   16b1c:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
   16b20:	4658      	mov	r0, fp
   16b22:	f001 fea7 	bl	18874 <bt_conn_lookup_handle>
		if (!conn) {
   16b26:	4604      	mov	r4, r0
   16b28:	b950      	cbnz	r0, 16b40 <hci_num_completed_packets+0x54>
	__asm__ volatile(
   16b2a:	f38a 8811 	msr	BASEPRI, sl
   16b2e:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
   16b32:	4830      	ldr	r0, [pc, #192]	; (16bf4 <hci_num_completed_packets+0x108>)
   16b34:	465a      	mov	r2, fp
   16b36:	2145      	movs	r1, #69	; 0x45
   16b38:	f00c f8f8 	bl	22d2c <printk>
	for (i = 0; i < evt->num_handles; i++) {
   16b3c:	3501      	adds	r5, #1
   16b3e:	e7dc      	b.n	16afa <hci_num_completed_packets+0xe>
   16b40:	f38a 8811 	msr	BASEPRI, sl
   16b44:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   16b48:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   16b4c:	b346      	cbz	r6, 16ba0 <hci_num_completed_packets+0xb4>
	__asm__ volatile(
   16b4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   16b52:	f3ef 8211 	mrs	r2, BASEPRI
   16b56:	f383 8811 	msr	BASEPRI, r3
   16b5a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16b5e:	69e3      	ldr	r3, [r4, #28]
   16b60:	b16b      	cbz	r3, 16b7e <hci_num_completed_packets+0x92>
				conn->pending_no_cb--;
   16b62:	3b01      	subs	r3, #1
   16b64:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   16b66:	f382 8811 	msr	BASEPRI, r2
   16b6a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16b6e:	4620      	mov	r0, r4
   16b70:	f001 fc8c 	bl	1848c <bt_conn_get_pkts>
   16b74:	3e01      	subs	r6, #1
   16b76:	f00a ff3b 	bl	219f0 <z_impl_k_sem_give>
   16b7a:	b2b6      	uxth	r6, r6
   16b7c:	e7e6      	b.n	16b4c <hci_num_completed_packets+0x60>
Z_GENLIST_IS_EMPTY(slist)
   16b7e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16b80:	b12b      	cbz	r3, 16b8e <hci_num_completed_packets+0xa2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16b82:	69a1      	ldr	r1, [r4, #24]
   16b84:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16b86:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16b88:	428b      	cmp	r3, r1
	list->tail = node;
   16b8a:	bf08      	it	eq
   16b8c:	61a0      	streq	r0, [r4, #24]
   16b8e:	f382 8811 	msr	BASEPRI, r2
   16b92:	f3bf 8f6f 	isb	sy
			if (!node) {
   16b96:	b93b      	cbnz	r3, 16ba8 <hci_num_completed_packets+0xbc>
				BT_ERR("packets count mismatch");
   16b98:	4817      	ldr	r0, [pc, #92]	; (16bf8 <hci_num_completed_packets+0x10c>)
   16b9a:	2145      	movs	r1, #69	; 0x45
   16b9c:	f00c f8c6 	bl	22d2c <printk>
		bt_conn_unref(conn);
   16ba0:	4620      	mov	r0, r4
   16ba2:	f00e fb55 	bl	25250 <bt_conn_unref>
   16ba6:	e7c9      	b.n	16b3c <hci_num_completed_packets+0x50>
	__asm__ volatile(
   16ba8:	f04f 0240 	mov.w	r2, #64	; 0x40
   16bac:	f3ef 8111 	mrs	r1, BASEPRI
   16bb0:	f382 8811 	msr	BASEPRI, r2
   16bb4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16bb8:	68da      	ldr	r2, [r3, #12]
   16bba:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   16bbc:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   16bc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   16bc2:	f8c3 800c 	str.w	r8, [r3, #12]
   16bc6:	b98a      	cbnz	r2, 16bec <hci_num_completed_packets+0x100>
	list->head = node;
   16bc8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   16bcc:	f381 8811 	msr	BASEPRI, r1
   16bd0:	f3bf 8f6f 	isb	sy
   16bd4:	2101      	movs	r1, #1
   16bd6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16bda:	f00e f8c1 	bl	24d60 <atomic_or>
   16bde:	07c3      	lsls	r3, r0, #31
   16be0:	d4c5      	bmi.n	16b6e <hci_num_completed_packets+0x82>
		k_queue_append(&work_q->queue, work);
   16be2:	4651      	mov	r1, sl
   16be4:	4648      	mov	r0, r9
   16be6:	f00f ff8d 	bl	26b04 <k_queue_append>
   16bea:	e7c0      	b.n	16b6e <hci_num_completed_packets+0x82>
	parent->next = child;
   16bec:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16bee:	6263      	str	r3, [r4, #36]	; 0x24
}
   16bf0:	e7ec      	b.n	16bcc <hci_num_completed_packets+0xe0>
   16bf2:	bf00      	nop
   16bf4:	00028b2f 	.word	0x00028b2f
   16bf8:	00028b50 	.word	0x00028b50
   16bfc:	200026c8 	.word	0x200026c8

00016c00 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16c00:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16c02:	4b28      	ldr	r3, [pc, #160]	; (16ca4 <le_adv_start_add_conn+0xa4>)
   16c04:	b085      	sub	sp, #20
   16c06:	4605      	mov	r5, r0
   16c08:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
   16c0a:	7801      	ldrb	r1, [r0, #0]
   16c0c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   16c10:	f00e f89d 	bl	24d4e <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   16c14:	f010 0f40 	tst.w	r0, #64	; 0x40
   16c18:	461a      	mov	r2, r3
   16c1a:	d008      	beq.n	16c2e <le_adv_start_add_conn+0x2e>
   16c1c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   16c20:	f00e f895 	bl	24d4e <atomic_get>
   16c24:	05c0      	lsls	r0, r0, #23
   16c26:	d502      	bpl.n	16c2e <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   16c28:	7e1b      	ldrb	r3, [r3, #24]
   16c2a:	428b      	cmp	r3, r1
   16c2c:	d131      	bne.n	16c92 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
   16c2e:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16c30:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
   16c32:	f816 3b0b 	ldrb.w	r3, [r6], #11
   16c36:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16c3a:	4630      	mov	r0, r6
   16c3c:	2300      	movs	r3, #0
   16c3e:	9300      	str	r3, [sp, #0]
   16c40:	f8cd 3003 	str.w	r3, [sp, #3]
   16c44:	f00e f89b 	bl	24d7e <bt_addr_le_cmp>
   16c48:	4604      	mov	r4, r0
   16c4a:	7828      	ldrb	r0, [r5, #0]
   16c4c:	b164      	cbz	r4, 16c68 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   16c4e:	4631      	mov	r1, r6
   16c50:	f001 fe5e 	bl	18910 <bt_conn_exists_le>
   16c54:	4604      	mov	r4, r0
   16c56:	b9f8      	cbnz	r0, 16c98 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   16c58:	7828      	ldrb	r0, [r5, #0]
   16c5a:	4631      	mov	r1, r6
   16c5c:	f001 fde0 	bl	18820 <bt_conn_add_le>
	if (!conn) {
   16c60:	4605      	mov	r5, r0
   16c62:	b1e0      	cbz	r0, 16c9e <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   16c64:	2105      	movs	r1, #5
   16c66:	e00e      	b.n	16c86 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   16c68:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   16c6c:	9302      	str	r3, [sp, #8]
   16c6e:	a902      	add	r1, sp, #8
   16c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16c74:	f8ad 300c 	strh.w	r3, [sp, #12]
   16c78:	f88d 300e 	strb.w	r3, [sp, #14]
   16c7c:	f001 fdd0 	bl	18820 <bt_conn_add_le>
		if (!conn) {
   16c80:	4605      	mov	r5, r0
   16c82:	b160      	cbz	r0, 16c9e <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   16c84:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   16c86:	f001 fe5f 	bl	18948 <bt_conn_set_state>
	*out_conn = conn;
   16c8a:	603d      	str	r5, [r7, #0]
	return 0;
}
   16c8c:	4620      	mov	r0, r4
   16c8e:	b005      	add	sp, #20
   16c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
   16c92:	f06f 0422 	mvn.w	r4, #34	; 0x22
   16c96:	e7f9      	b.n	16c8c <le_adv_start_add_conn+0x8c>
		return -EINVAL;
   16c98:	f06f 0415 	mvn.w	r4, #21
   16c9c:	e7f6      	b.n	16c8c <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
   16c9e:	f06f 040b 	mvn.w	r4, #11
   16ca2:	e7f3      	b.n	16c8c <le_adv_start_add_conn+0x8c>
   16ca4:	200003c8 	.word	0x200003c8

00016ca8 <hci_cmd_status>:
{
   16ca8:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   16caa:	2104      	movs	r1, #4
{
   16cac:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   16cae:	3008      	adds	r0, #8
   16cb0:	f006 fbce 	bl	1d450 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16cb4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16cb6:	7801      	ldrb	r1, [r0, #0]
   16cb8:	8840      	ldrh	r0, [r0, #2]
   16cba:	4622      	mov	r2, r4
   16cbc:	f7ff fd32 	bl	16724 <hci_cmd_done>
	if (ncmd) {
   16cc0:	b125      	cbz	r5, 16ccc <hci_cmd_status+0x24>
   16cc2:	4803      	ldr	r0, [pc, #12]	; (16cd0 <hci_cmd_status+0x28>)
}
   16cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16cc8:	f00a be92 	b.w	219f0 <z_impl_k_sem_give>
   16ccc:	bd38      	pop	{r3, r4, r5, pc}
   16cce:	bf00      	nop
   16cd0:	200004b8 	.word	0x200004b8

00016cd4 <hci_cmd_complete>:
{
   16cd4:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   16cd6:	2103      	movs	r1, #3
{
   16cd8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   16cda:	3008      	adds	r0, #8
   16cdc:	f006 fbb8 	bl	1d450 <net_buf_simple_pull_mem>
	status = buf->data[0];
   16ce0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   16ce2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16ce4:	7819      	ldrb	r1, [r3, #0]
   16ce6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   16cea:	4622      	mov	r2, r4
   16cec:	f7ff fd1a 	bl	16724 <hci_cmd_done>
	if (ncmd) {
   16cf0:	b125      	cbz	r5, 16cfc <hci_cmd_complete+0x28>
   16cf2:	4803      	ldr	r0, [pc, #12]	; (16d00 <hci_cmd_complete+0x2c>)
}
   16cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16cf8:	f00a be7a 	b.w	219f0 <z_impl_k_sem_give>
   16cfc:	bd38      	pop	{r3, r4, r5, pc}
   16cfe:	bf00      	nop
   16d00:	200004b8 	.word	0x200004b8

00016d04 <bt_hci_cmd_create>:
{
   16d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   16d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   16d0c:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   16d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d12:	481c      	ldr	r0, [pc, #112]	; (16d84 <bt_hci_cmd_create+0x80>)
{
   16d14:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   16d16:	f00f fc67 	bl	265e8 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   16d1a:	4604      	mov	r4, r0
   16d1c:	b950      	cbnz	r0, 16d34 <bt_hci_cmd_create+0x30>
   16d1e:	491a      	ldr	r1, [pc, #104]	; (16d88 <bt_hci_cmd_create+0x84>)
   16d20:	481a      	ldr	r0, [pc, #104]	; (16d8c <bt_hci_cmd_create+0x88>)
   16d22:	f240 122b 	movw	r2, #299	; 0x12b
   16d26:	f00c f801 	bl	22d2c <printk>
   16d2a:	4817      	ldr	r0, [pc, #92]	; (16d88 <bt_hci_cmd_create+0x84>)
   16d2c:	f240 112b 	movw	r1, #299	; 0x12b
   16d30:	f00c fa5f 	bl	231f2 <assert_post_action>
	net_buf_reserve(buf, BT_BUF_RESERVE);
   16d34:	f104 0b08 	add.w	fp, r4, #8
   16d38:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
   16d3a:	2700      	movs	r7, #0
   16d3c:	4658      	mov	r0, fp
   16d3e:	f006 fa3d 	bl	1d1bc <net_buf_simple_reserve>
   16d42:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   16d44:	4620      	mov	r0, r4
   16d46:	f006 f915 	bl	1cf74 <net_buf_id>
   16d4a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 16d90 <bt_hci_cmd_create+0x8c>
   16d4e:	f04f 0a0c 	mov.w	sl, #12
   16d52:	fb0a 8000 	mla	r0, sl, r0, r8
   16d56:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   16d58:	4620      	mov	r0, r4
   16d5a:	f006 f90b 	bl	1cf74 <net_buf_id>
   16d5e:	fb0a 8000 	mla	r0, sl, r0, r8
   16d62:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   16d64:	4620      	mov	r0, r4
   16d66:	f006 f905 	bl	1cf74 <net_buf_id>
   16d6a:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
   16d6e:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
   16d70:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
   16d72:	4658      	mov	r0, fp
   16d74:	f006 fb8a 	bl	1d48c <net_buf_simple_add>
	hdr->param_len = param_len;
   16d78:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   16d7a:	8005      	strh	r5, [r0, #0]
}
   16d7c:	4620      	mov	r0, r4
   16d7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d82:	bf00      	nop
   16d84:	20000990 	.word	0x20000990
   16d88:	00028a25 	.word	0x00028a25
   16d8c:	00027c9a 	.word	0x00027c9a
   16d90:	20002910 	.word	0x20002910

00016d94 <bt_hci_cmd_send>:
{
   16d94:	b538      	push	{r3, r4, r5, lr}
   16d96:	4605      	mov	r5, r0
	if (!buf) {
   16d98:	460c      	mov	r4, r1
   16d9a:	b919      	cbnz	r1, 16da4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   16d9c:	f7ff ffb2 	bl	16d04 <bt_hci_cmd_create>
		if (!buf) {
   16da0:	4604      	mov	r4, r0
   16da2:	b1c0      	cbz	r0, 16dd6 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16da4:	f640 4335 	movw	r3, #3125	; 0xc35
   16da8:	429d      	cmp	r5, r3
   16daa:	d10e      	bne.n	16dca <bt_hci_cmd_send+0x36>
		return bt_hci_ecc_send(buf);
   16dac:	4620      	mov	r0, r4
   16dae:	f7ff f8ed 	bl	15f8c <bt_hci_ecc_send>
		if (err) {
   16db2:	4605      	mov	r5, r0
   16db4:	b138      	cbz	r0, 16dc6 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
   16db6:	4602      	mov	r2, r0
   16db8:	2145      	movs	r1, #69	; 0x45
   16dba:	4808      	ldr	r0, [pc, #32]	; (16ddc <bt_hci_cmd_send+0x48>)
   16dbc:	f00b ffb6 	bl	22d2c <printk>
			net_buf_unref(buf);
   16dc0:	4620      	mov	r0, r4
   16dc2:	f006 fa4d 	bl	1d260 <net_buf_unref>
}
   16dc6:	4628      	mov	r0, r5
   16dc8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16dca:	4805      	ldr	r0, [pc, #20]	; (16de0 <bt_hci_cmd_send+0x4c>)
   16dcc:	4621      	mov	r1, r4
   16dce:	f006 fa19 	bl	1d204 <net_buf_put>
	return 0;
   16dd2:	2500      	movs	r5, #0
   16dd4:	e7f7      	b.n	16dc6 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   16dd6:	f06f 0536 	mvn.w	r5, #54	; 0x36
   16dda:	e7f4      	b.n	16dc6 <bt_hci_cmd_send+0x32>
   16ddc:	00028ae2 	.word	0x00028ae2
   16de0:	200004f0 	.word	0x200004f0

00016de4 <le_ltk_request>:
{
   16de4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   16de6:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16de8:	8826      	ldrh	r6, [r4, #0]
   16dea:	b2b7      	uxth	r7, r6
{
   16dec:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   16dee:	4638      	mov	r0, r7
   16df0:	f001 fd40 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   16df4:	4605      	mov	r5, r0
   16df6:	b930      	cbnz	r0, 16e06 <le_ltk_request+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16df8:	4820      	ldr	r0, [pc, #128]	; (16e7c <le_ltk_request+0x98>)
   16dfa:	463a      	mov	r2, r7
   16dfc:	2145      	movs	r1, #69	; 0x45
   16dfe:	f00b ff95 	bl	22d2c <printk>
}
   16e02:	b007      	add	sp, #28
   16e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16e06:	af02      	add	r7, sp, #8
   16e08:	f8d4 2002 	ldr.w	r2, [r4, #2]
   16e0c:	f8d4 3006 	ldr.w	r3, [r4, #6]
   16e10:	9701      	str	r7, [sp, #4]
   16e12:	8961      	ldrh	r1, [r4, #10]
   16e14:	9100      	str	r1, [sp, #0]
   16e16:	f00f faf7 	bl	26408 <bt_smp_request_ltk>
   16e1a:	b1f0      	cbz	r0, 16e5a <le_ltk_request+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   16e1c:	2112      	movs	r1, #18
   16e1e:	f242 001a 	movw	r0, #8218	; 0x201a
   16e22:	f7ff ff6f 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   16e26:	4604      	mov	r4, r0
   16e28:	b938      	cbnz	r0, 16e3a <le_ltk_request+0x56>
		BT_ERR("Out of command buffers");
   16e2a:	4815      	ldr	r0, [pc, #84]	; (16e80 <le_ltk_request+0x9c>)
   16e2c:	2145      	movs	r1, #69	; 0x45
   16e2e:	f00b ff7d 	bl	22d2c <printk>
	bt_conn_unref(conn);
   16e32:	4628      	mov	r0, r5
   16e34:	f00e fa0c 	bl	25250 <bt_conn_unref>
   16e38:	e7e3      	b.n	16e02 <le_ltk_request+0x1e>
	cp = net_buf_add(buf, sizeof(*cp));
   16e3a:	2112      	movs	r1, #18
   16e3c:	3008      	adds	r0, #8
   16e3e:	f006 fb25 	bl	1d48c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16e42:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   16e44:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16e48:	2210      	movs	r2, #16
   16e4a:	f00d fe3b 	bl	24ac4 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   16e4e:	4621      	mov	r1, r4
   16e50:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16e54:	f7ff ff9e 	bl	16d94 <bt_hci_cmd_send>
   16e58:	e7eb      	b.n	16e32 <le_ltk_request+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   16e5a:	2102      	movs	r1, #2
   16e5c:	f242 001b 	movw	r0, #8219	; 0x201b
   16e60:	f7ff ff50 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   16e64:	4604      	mov	r4, r0
   16e66:	2800      	cmp	r0, #0
   16e68:	d0df      	beq.n	16e2a <le_ltk_request+0x46>
	cp = net_buf_add(buf, sizeof(*cp));
   16e6a:	2102      	movs	r1, #2
   16e6c:	3008      	adds	r0, #8
   16e6e:	f006 fb0d 	bl	1d48c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16e72:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   16e74:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16e76:	f242 001b 	movw	r0, #8219	; 0x201b
   16e7a:	e7eb      	b.n	16e54 <le_ltk_request+0x70>
   16e7c:	000288bd 	.word	0x000288bd
   16e80:	00028b6c 	.word	0x00028b6c

00016e84 <le_conn_param_neg_reply>:
{
   16e84:	b570      	push	{r4, r5, r6, lr}
   16e86:	4606      	mov	r6, r0
   16e88:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   16e8a:	f242 0021 	movw	r0, #8225	; 0x2021
   16e8e:	2103      	movs	r1, #3
   16e90:	f7ff ff38 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   16e94:	4604      	mov	r4, r0
   16e96:	b928      	cbnz	r0, 16ea4 <le_conn_param_neg_reply+0x20>
}
   16e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   16e9c:	4808      	ldr	r0, [pc, #32]	; (16ec0 <le_conn_param_neg_reply+0x3c>)
   16e9e:	2145      	movs	r1, #69	; 0x45
   16ea0:	f00b bf44 	b.w	22d2c <printk>
	cp = net_buf_add(buf, sizeof(*cp));
   16ea4:	2103      	movs	r1, #3
   16ea6:	3008      	adds	r0, #8
   16ea8:	f006 faf0 	bl	1d48c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   16eac:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   16eae:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16eb0:	4621      	mov	r1, r4
   16eb2:	f242 0021 	movw	r0, #8225	; 0x2021
}
   16eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16eba:	f7ff bf6b 	b.w	16d94 <bt_hci_cmd_send>
   16ebe:	bf00      	nop
   16ec0:	00028b88 	.word	0x00028b88

00016ec4 <le_conn_param_req>:
{
   16ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16ec6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16ec8:	78d9      	ldrb	r1, [r3, #3]
   16eca:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16ecc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16ece:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16ed2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16ed6:	7959      	ldrb	r1, [r3, #5]
   16ed8:	791a      	ldrb	r2, [r3, #4]
   16eda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16ede:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16ee2:	799a      	ldrb	r2, [r3, #6]
   16ee4:	79d9      	ldrb	r1, [r3, #7]
   16ee6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16eea:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16eee:	7a1a      	ldrb	r2, [r3, #8]
   16ef0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16ef2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16ef4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16ef8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16efa:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   16efe:	f001 fcb9 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   16f02:	4606      	mov	r6, r0
   16f04:	b950      	cbnz	r0, 16f1c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16f06:	481d      	ldr	r0, [pc, #116]	; (16f7c <le_conn_param_req+0xb8>)
   16f08:	2145      	movs	r1, #69	; 0x45
   16f0a:	4622      	mov	r2, r4
   16f0c:	f00b ff0e 	bl	22d2c <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16f10:	2102      	movs	r1, #2
   16f12:	4620      	mov	r0, r4
   16f14:	f7ff ffb6 	bl	16e84 <le_conn_param_neg_reply>
}
   16f18:	b003      	add	sp, #12
   16f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   16f1c:	4669      	mov	r1, sp
   16f1e:	f001 faed 	bl	184fc <le_param_req>
   16f22:	b938      	cbnz	r0, 16f34 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16f24:	211e      	movs	r1, #30
   16f26:	4620      	mov	r0, r4
   16f28:	f7ff ffac 	bl	16e84 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16f2c:	4630      	mov	r0, r6
   16f2e:	f00e f98f 	bl	25250 <bt_conn_unref>
   16f32:	e7f1      	b.n	16f18 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16f34:	210e      	movs	r1, #14
   16f36:	f242 0020 	movw	r0, #8224	; 0x2020
   16f3a:	f7ff fee3 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   16f3e:	4605      	mov	r5, r0
   16f40:	2800      	cmp	r0, #0
   16f42:	d0f3      	beq.n	16f2c <le_conn_param_req+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
   16f44:	210e      	movs	r1, #14
   16f46:	3008      	adds	r0, #8
   16f48:	f006 faa0 	bl	1d48c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   16f4c:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
   16f4e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   16f50:	2100      	movs	r1, #0
   16f52:	f00d fde2 	bl	24b1a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16f56:	f8bd 3000 	ldrh.w	r3, [sp]
   16f5a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16f5c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16f60:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16f62:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   16f66:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16f68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   16f6c:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16f6e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16f70:	4629      	mov	r1, r5
   16f72:	f242 0020 	movw	r0, #8224	; 0x2020
   16f76:	f7ff ff0d 	bl	16d94 <bt_hci_cmd_send>
   16f7a:	e7d7      	b.n	16f2c <le_conn_param_req+0x68>
   16f7c:	000288bd 	.word	0x000288bd

00016f80 <bt_hci_cmd_send_sync>:
{
   16f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f82:	4607      	mov	r7, r0
   16f84:	b087      	sub	sp, #28
   16f86:	4615      	mov	r5, r2
	if (!buf) {
   16f88:	460c      	mov	r4, r1
   16f8a:	b921      	cbnz	r1, 16f96 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   16f8c:	f7ff feba 	bl	16d04 <bt_hci_cmd_create>
		if (!buf) {
   16f90:	4604      	mov	r4, r0
   16f92:	2800      	cmp	r0, #0
   16f94:	d048      	beq.n	17028 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16f96:	2201      	movs	r2, #1
   16f98:	2100      	movs	r1, #0
   16f9a:	4668      	mov	r0, sp
   16f9c:	f00f fe0f 	bl	26bbe <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16fa0:	4620      	mov	r0, r4
   16fa2:	f005 ffe7 	bl	1cf74 <net_buf_id>
   16fa6:	4e22      	ldr	r6, [pc, #136]	; (17030 <bt_hci_cmd_send_sync+0xb0>)
   16fa8:	230c      	movs	r3, #12
   16faa:	fb03 6000 	mla	r0, r3, r0, r6
   16fae:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   16fb2:	4620      	mov	r0, r4
   16fb4:	f006 f998 	bl	1d2e8 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16fb8:	481e      	ldr	r0, [pc, #120]	; (17034 <bt_hci_cmd_send_sync+0xb4>)
   16fba:	4621      	mov	r1, r4
   16fbc:	f006 f922 	bl	1d204 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16fc0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16fc4:	2300      	movs	r3, #0
   16fc6:	4668      	mov	r0, sp
   16fc8:	f00a fd4e 	bl	21a68 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16fcc:	b158      	cbz	r0, 16fe6 <bt_hci_cmd_send_sync+0x66>
   16fce:	491a      	ldr	r1, [pc, #104]	; (17038 <bt_hci_cmd_send_sync+0xb8>)
   16fd0:	481a      	ldr	r0, [pc, #104]	; (1703c <bt_hci_cmd_send_sync+0xbc>)
   16fd2:	f44f 72bb 	mov.w	r2, #374	; 0x176
   16fd6:	f00b fea9 	bl	22d2c <printk>
   16fda:	4040      	eors	r0, r0
   16fdc:	f380 8811 	msr	BASEPRI, r0
   16fe0:	f04f 0003 	mov.w	r0, #3
   16fe4:	df02      	svc	2
	status = cmd(buf)->status;
   16fe6:	4620      	mov	r0, r4
   16fe8:	f005 ffc4 	bl	1cf74 <net_buf_id>
   16fec:	230c      	movs	r3, #12
   16fee:	4343      	muls	r3, r0
   16ff0:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   16ff2:	b186      	cbz	r6, 17016 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   16ff4:	4812      	ldr	r0, [pc, #72]	; (17040 <bt_hci_cmd_send_sync+0xc0>)
   16ff6:	4633      	mov	r3, r6
   16ff8:	463a      	mov	r2, r7
   16ffa:	2157      	movs	r1, #87	; 0x57
   16ffc:	f00b fe96 	bl	22d2c <printk>
		net_buf_unref(buf);
   17000:	4620      	mov	r0, r4
   17002:	f006 f92d 	bl	1d260 <net_buf_unref>
			return -EIO;
   17006:	2e09      	cmp	r6, #9
   17008:	bf0c      	ite	eq
   1700a:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
   1700e:	f06f 0004 	mvnne.w	r0, #4
}
   17012:	b007      	add	sp, #28
   17014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   17016:	b115      	cbz	r5, 1701e <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   17018:	602c      	str	r4, [r5, #0]
	return 0;
   1701a:	4630      	mov	r0, r6
   1701c:	e7f9      	b.n	17012 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   1701e:	4620      	mov	r0, r4
   17020:	f006 f91e 	bl	1d260 <net_buf_unref>
	return 0;
   17024:	4628      	mov	r0, r5
   17026:	e7f4      	b.n	17012 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
   17028:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1702c:	e7f1      	b.n	17012 <bt_hci_cmd_send_sync+0x92>
   1702e:	bf00      	nop
   17030:	20002910 	.word	0x20002910
   17034:	200004f0 	.word	0x200004f0
   17038:	00028a25 	.word	0x00028a25
   1703c:	00027c9a 	.word	0x00027c9a
   17040:	00028ba7 	.word	0x00028ba7

00017044 <hci_le_read_max_data_len>:
{
   17044:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17046:	4606      	mov	r6, r0
   17048:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1704a:	aa01      	add	r2, sp, #4
   1704c:	2100      	movs	r1, #0
   1704e:	f242 002f 	movw	r0, #8239	; 0x202f
   17052:	f7ff ff95 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   17056:	4604      	mov	r4, r0
   17058:	b130      	cbz	r0, 17068 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   1705a:	4809      	ldr	r0, [pc, #36]	; (17080 <hci_le_read_max_data_len+0x3c>)
   1705c:	2145      	movs	r1, #69	; 0x45
   1705e:	f00b fe65 	bl	22d2c <printk>
}
   17062:	4620      	mov	r0, r4
   17064:	b002      	add	sp, #8
   17066:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17068:	9801      	ldr	r0, [sp, #4]
   1706a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1706c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17070:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17072:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17076:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   17078:	f006 f8f2 	bl	1d260 <net_buf_unref>
	return 0;
   1707c:	e7f1      	b.n	17062 <hci_le_read_max_data_len+0x1e>
   1707e:	bf00      	nop
   17080:	00028bc8 	.word	0x00028bc8

00017084 <set_le_adv_enable_legacy>:
{
   17084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   17086:	4606      	mov	r6, r0
   17088:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1708a:	f242 000a 	movw	r0, #8202	; 0x200a
   1708e:	2101      	movs	r1, #1
   17090:	f7ff fe38 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   17094:	4604      	mov	r4, r0
   17096:	b1e8      	cbz	r0, 170d4 <set_le_adv_enable_legacy+0x50>
	if (enable) {
   17098:	3008      	adds	r0, #8
   1709a:	b1cd      	cbz	r5, 170d0 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
   1709c:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   1709e:	f00f fac8 	bl	26632 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
   170a2:	3614      	adds	r6, #20
	state->bit = bit;
   170a4:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
   170a6:	4620      	mov	r0, r4
	state->bit = bit;
   170a8:	9302      	str	r3, [sp, #8]
	state->target = target;
   170aa:	9601      	str	r6, [sp, #4]
	state->val = val;
   170ac:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
   170b0:	f005 ff60 	bl	1cf74 <net_buf_id>
   170b4:	4b09      	ldr	r3, [pc, #36]	; (170dc <set_le_adv_enable_legacy+0x58>)
   170b6:	220c      	movs	r2, #12
   170b8:	fb02 3000 	mla	r0, r2, r0, r3
   170bc:	ab01      	add	r3, sp, #4
   170be:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   170c0:	2200      	movs	r2, #0
   170c2:	4621      	mov	r1, r4
   170c4:	f242 000a 	movw	r0, #8202	; 0x200a
   170c8:	f7ff ff5a 	bl	16f80 <bt_hci_cmd_send_sync>
}
   170cc:	b004      	add	sp, #16
   170ce:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
   170d0:	4629      	mov	r1, r5
   170d2:	e7e4      	b.n	1709e <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
   170d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   170d8:	e7f8      	b.n	170cc <set_le_adv_enable_legacy+0x48>
   170da:	bf00      	nop
   170dc:	20002910 	.word	0x20002910

000170e0 <hci_set_ad>:
{
   170e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170e4:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   170e6:	2120      	movs	r1, #32
{
   170e8:	4682      	mov	sl, r0
   170ea:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   170ec:	f7ff fe0a 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   170f0:	4606      	mov	r6, r0
   170f2:	2800      	cmp	r0, #0
   170f4:	d056      	beq.n	171a4 <hci_set_ad+0xc4>
	set_data = net_buf_add(buf, sizeof(*set_data));
   170f6:	2120      	movs	r1, #32
   170f8:	3008      	adds	r0, #8
   170fa:	f006 f9c7 	bl	1d48c <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   170fe:	2220      	movs	r2, #32
   17100:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
   17102:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   17104:	f00d fd09 	bl	24b1a <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   17108:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1710c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   17110:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   17112:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   17114:	f8d4 8000 	ldr.w	r8, [r4]
   17118:	2300      	movs	r3, #0
   1711a:	6862      	ldr	r2, [r4, #4]
   1711c:	4293      	cmp	r3, r2
   1711e:	d30d      	bcc.n	1713c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   17120:	9b00      	ldr	r3, [sp, #0]
   17122:	3408      	adds	r4, #8
   17124:	429c      	cmp	r4, r3
   17126:	d1f5      	bne.n	17114 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17128:	2200      	movs	r2, #0
   1712a:	4631      	mov	r1, r6
   1712c:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1712e:	f889 5000 	strb.w	r5, [r9]
}
   17132:	b003      	add	sp, #12
   17134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17138:	f7ff bf22 	b.w	16f80 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1713c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   17140:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   17144:	1ca8      	adds	r0, r5, #2
   17146:	1881      	adds	r1, r0, r2
   17148:	291f      	cmp	r1, #31
   1714a:	d914      	bls.n	17176 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1714c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   17150:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17154:	d101      	bne.n	1715a <hci_set_ad+0x7a>
   17156:	2a00      	cmp	r2, #0
   17158:	dc0b      	bgt.n	17172 <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
   1715a:	4814      	ldr	r0, [pc, #80]	; (171ac <hci_set_ad+0xcc>)
   1715c:	2145      	movs	r1, #69	; 0x45
   1715e:	f00b fde5 	bl	22d2c <printk>
		net_buf_unref(buf);
   17162:	4630      	mov	r0, r6
   17164:	f006 f87c 	bl	1d260 <net_buf_unref>
					return -EINVAL;
   17168:	f06f 0015 	mvn.w	r0, #21
}
   1716c:	b003      	add	sp, #12
   1716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   17172:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   17176:	b2d7      	uxtb	r7, r2
   17178:	1c79      	adds	r1, r7, #1
   1717a:	f80b 1005 	strb.w	r1, [fp, r5]
   1717e:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   17180:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   17182:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   17186:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1718a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1718e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   17190:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   17192:	f00d fc97 	bl	24ac4 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   17196:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   17198:	443d      	add	r5, r7
   1719a:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1719c:	3301      	adds	r3, #1
   1719e:	f108 0808 	add.w	r8, r8, #8
   171a2:	e7ba      	b.n	1711a <hci_set_ad+0x3a>
		return -ENOBUFS;
   171a4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   171a8:	e7e0      	b.n	1716c <hci_set_ad+0x8c>
   171aa:	bf00      	nop
   171ac:	00028bed 	.word	0x00028bed

000171b0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   171b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171b4:	b087      	sub	sp, #28
   171b6:	4606      	mov	r6, r0
   171b8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   171bc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   171c0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   171c4:	460c      	mov	r4, r1
   171c6:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   171c8:	2100      	movs	r1, #0
   171ca:	2210      	movs	r2, #16
   171cc:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   171ce:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
   171d0:	f00d fca3 	bl	24b1a <memset>
	if (use_name) {
   171d4:	f1b8 0f00 	cmp.w	r8, #0
   171d8:	d00e      	beq.n	171f8 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
   171da:	bbb4      	cbnz	r4, 1724a <le_adv_update.constprop.0+0x9a>
   171dc:	2d00      	cmp	r5, #0
   171de:	d13f      	bne.n	17260 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
   171e0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 17294 <le_adv_update.constprop.0+0xe4>
   171e4:	4658      	mov	r0, fp
   171e6:	f00d fc3b 	bl	24a60 <strlen>
   171ea:	2309      	movs	r3, #9
   171ec:	f88d 3000 	strb.w	r3, [sp]
   171f0:	f88d 0001 	strb.w	r0, [sp, #1]
   171f4:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   171f8:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   171fc:	f1b8 0f00 	cmp.w	r8, #0
   17200:	d030      	beq.n	17264 <le_adv_update.constprop.0+0xb4>
   17202:	f1ba 0f00 	cmp.w	sl, #0
   17206:	d12d      	bne.n	17264 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
   17208:	2301      	movs	r3, #1
			d[1].data = &data;
   1720a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1720e:	9305      	str	r3, [sp, #20]
			d_len = 2;
   17210:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   17212:	a902      	add	r1, sp, #8
   17214:	f242 0008 	movw	r0, #8200	; 0x2008
   17218:	f7ff ff62 	bl	170e0 <hci_set_ad>
		if (err) {
   1721c:	4604      	mov	r4, r0
   1721e:	b938      	cbnz	r0, 17230 <le_adv_update.constprop.0+0x80>
	if (scannable) {
   17220:	f1ba 0f00 	cmp.w	sl, #0
   17224:	d120      	bne.n	17268 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17226:	2104      	movs	r1, #4
   17228:	f106 0014 	add.w	r0, r6, #20
   1722c:	f00d fd98 	bl	24d60 <atomic_or>
}
   17230:	4620      	mov	r0, r4
   17232:	b007      	add	sp, #28
   17234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   17238:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1723c:	3a08      	subs	r2, #8
   1723e:	2a01      	cmp	r2, #1
   17240:	d925      	bls.n	1728e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   17242:	3301      	adds	r3, #1
   17244:	429f      	cmp	r7, r3
   17246:	d1f7      	bne.n	17238 <le_adv_update.constprop.0+0x88>
   17248:	e7c8      	b.n	171dc <le_adv_update.constprop.0+0x2c>
   1724a:	2300      	movs	r3, #0
   1724c:	e7fa      	b.n	17244 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1724e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   17252:	3a08      	subs	r2, #8
   17254:	2a01      	cmp	r2, #1
   17256:	d91a      	bls.n	1728e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   17258:	3301      	adds	r3, #1
   1725a:	4599      	cmp	r9, r3
   1725c:	d1f7      	bne.n	1724e <le_adv_update.constprop.0+0x9e>
   1725e:	e7bf      	b.n	171e0 <le_adv_update.constprop.0+0x30>
   17260:	2300      	movs	r3, #0
   17262:	e7fa      	b.n	1725a <le_adv_update.constprop.0+0xaa>
		d_len = 1;
   17264:	2201      	movs	r2, #1
   17266:	e7d4      	b.n	17212 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
   17268:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
   1726c:	2201      	movs	r2, #1
   1726e:	f1b8 0f00 	cmp.w	r8, #0
   17272:	d003      	beq.n	1727c <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
   17274:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   17276:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   1727a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1727c:	a902      	add	r1, sp, #8
   1727e:	f242 0009 	movw	r0, #8201	; 0x2009
   17282:	f7ff ff2d 	bl	170e0 <hci_set_ad>
		if (err) {
   17286:	2800      	cmp	r0, #0
   17288:	d0cd      	beq.n	17226 <le_adv_update.constprop.0+0x76>
   1728a:	4604      	mov	r4, r0
   1728c:	e7d0      	b.n	17230 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
   1728e:	f06f 0415 	mvn.w	r4, #21
   17292:	e7cd      	b.n	17230 <le_adv_update.constprop.0+0x80>
   17294:	00027c52 	.word	0x00027c52

00017298 <set_random_address>:
{
   17298:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
   1729a:	4e15      	ldr	r6, [pc, #84]	; (172f0 <set_random_address+0x58>)
   1729c:	2206      	movs	r2, #6
   1729e:	f106 0131 	add.w	r1, r6, #49	; 0x31
   172a2:	4605      	mov	r5, r0
   172a4:	f00d fbfe 	bl	24aa4 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   172a8:	4604      	mov	r4, r0
   172aa:	b1e0      	cbz	r0, 172e6 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   172ac:	2106      	movs	r1, #6
   172ae:	f242 0005 	movw	r0, #8197	; 0x2005
   172b2:	f7ff fd27 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   172b6:	4604      	mov	r4, r0
   172b8:	b1b8      	cbz	r0, 172ea <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
   172ba:	2206      	movs	r2, #6
   172bc:	4629      	mov	r1, r5
   172be:	3008      	adds	r0, #8
   172c0:	f00f f9ab 	bl	2661a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   172c4:	4621      	mov	r1, r4
   172c6:	2200      	movs	r2, #0
   172c8:	f242 0005 	movw	r0, #8197	; 0x2005
   172cc:	f7ff fe58 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   172d0:	4604      	mov	r4, r0
   172d2:	b940      	cbnz	r0, 172e6 <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   172d4:	2206      	movs	r2, #6
   172d6:	4629      	mov	r1, r5
   172d8:	f106 0031 	add.w	r0, r6, #49	; 0x31
   172dc:	f00d fbf2 	bl	24ac4 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   172e0:	2301      	movs	r3, #1
   172e2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   172e6:	4620      	mov	r0, r4
   172e8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   172ea:	f06f 0436 	mvn.w	r4, #54	; 0x36
   172ee:	e7fa      	b.n	172e6 <set_random_address+0x4e>
   172f0:	200003c8 	.word	0x200003c8

000172f4 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   172f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   172f8:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   172fa:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
   172fe:	460e      	mov	r6, r1
   17300:	4690      	mov	r8, r2
   17302:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17304:	d027      	beq.n	17356 <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17306:	4f27      	ldr	r7, [pc, #156]	; (173a4 <le_adv_set_random_addr.isra.0+0xb0>)
   17308:	b12a      	cbz	r2, 17316 <le_adv_set_random_addr.isra.0+0x22>
   1730a:	0688      	lsls	r0, r1, #26
   1730c:	d503      	bpl.n	17316 <le_adv_set_random_addr.isra.0+0x22>
   1730e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
   17312:	0659      	lsls	r1, r3, #25
   17314:	d542      	bpl.n	1739c <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17316:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1731a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   1731e:	5cfb      	ldrb	r3, [r7, r3]
   17320:	2b01      	cmp	r3, #1
   17322:	d008      	beq.n	17336 <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
   17324:	eba9 0404 	sub.w	r4, r9, r4
   17328:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1732a:	f1b8 0f00 	cmp.w	r8, #0
   1732e:	d10d      	bne.n	1734c <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   17330:	702b      	strb	r3, [r5, #0]
	return 0;
   17332:	2000      	movs	r0, #0
   17334:	e007      	b.n	17346 <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
   17336:	2007      	movs	r0, #7
   17338:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   1733c:	4438      	add	r0, r7
   1733e:	f7ff ffab 	bl	17298 <set_random_address>
				if (err) {
   17342:	2800      	cmp	r0, #0
   17344:	d0ee      	beq.n	17324 <le_adv_set_random_addr.isra.0+0x30>
}
   17346:	b003      	add	sp, #12
   17348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1734c:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1734e:	bf48      	it	mi
   17350:	f043 0302 	orrmi.w	r3, r3, #2
   17354:	e7ec      	b.n	17330 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   17356:	074b      	lsls	r3, r1, #29
   17358:	d510      	bpl.n	1737c <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1735a:	4e12      	ldr	r6, [pc, #72]	; (173a4 <le_adv_set_random_addr.isra.0+0xb0>)
   1735c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17360:	00e7      	lsls	r7, r4, #3
   17362:	5cf3      	ldrb	r3, [r6, r3]
   17364:	2b01      	cmp	r3, #1
   17366:	d105      	bne.n	17374 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
   17368:	2007      	movs	r0, #7
   1736a:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   1736e:	4430      	add	r0, r6
   17370:	f7ff ff92 	bl	17298 <set_random_address>
			*own_addr_type = id_addr->type;
   17374:	1b3c      	subs	r4, r7, r4
   17376:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   17378:	702b      	strb	r3, [r5, #0]
		if (err) {
   1737a:	e7e4      	b.n	17346 <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1737c:	2106      	movs	r1, #6
   1737e:	4668      	mov	r0, sp
   17380:	f008 f81e 	bl	1f3c0 <bt_rand>
	if (err) {
   17384:	b940      	cbnz	r0, 17398 <le_adv_set_random_addr.isra.0+0xa4>
	nrpa.val[5] &= 0x3f;
   17386:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1738a:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   1738c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17390:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   17394:	f7ff ff80 	bl	17298 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   17398:	2301      	movs	r3, #1
   1739a:	e7ed      	b.n	17378 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
   1739c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   173a0:	e7d1      	b.n	17346 <le_adv_set_random_addr.isra.0+0x52>
   173a2:	bf00      	nop
   173a4:	200003c8 	.word	0x200003c8

000173a8 <conn_auto_initiate>:
{
   173a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   173aa:	7b43      	ldrb	r3, [r0, #13]
   173ac:	2b07      	cmp	r3, #7
{
   173ae:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   173b0:	d11e      	bne.n	173f0 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   173b2:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   173b4:	4630      	mov	r0, r6
   173b6:	f00d fcca 	bl	24d4e <atomic_get>
   173ba:	0483      	lsls	r3, r0, #18
   173bc:	d41a      	bmi.n	173f4 <conn_auto_initiate+0x4c>
   173be:	78e3      	ldrb	r3, [r4, #3]
   173c0:	b123      	cbz	r3, 173cc <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   173c2:	4b2b      	ldr	r3, [pc, #172]	; (17470 <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   173c4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   173c8:	071d      	lsls	r5, r3, #28
   173ca:	d513      	bpl.n	173f4 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   173cc:	2102      	movs	r1, #2
   173ce:	f242 0016 	movw	r0, #8214	; 0x2016
   173d2:	f7ff fc97 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   173d6:	4605      	mov	r5, r0
   173d8:	b160      	cbz	r0, 173f4 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
   173da:	2102      	movs	r1, #2
   173dc:	3008      	adds	r0, #8
   173de:	f006 f855 	bl	1d48c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   173e2:	8823      	ldrh	r3, [r4, #0]
   173e4:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   173e6:	4629      	mov	r1, r5
   173e8:	f242 0016 	movw	r0, #8214	; 0x2016
   173ec:	f7ff fcd2 	bl	16d94 <bt_hci_cmd_send>
}
   173f0:	b004      	add	sp, #16
   173f2:	bd70      	pop	{r4, r5, r6, pc}
   173f4:	4630      	mov	r0, r6
   173f6:	f00d fcaa 	bl	24d4e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   173fa:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   173fe:	4d1c      	ldr	r5, [pc, #112]	; (17470 <conn_auto_initiate+0xc8>)
   17400:	f3c0 3100 	ubfx	r1, r0, #12, #1
   17404:	d114      	bne.n	17430 <conn_auto_initiate+0x88>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   17406:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   1740a:	07d8      	lsls	r0, r3, #31
   1740c:	d510      	bpl.n	17430 <conn_auto_initiate+0x88>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1740e:	2302      	movs	r3, #2
   17410:	461a      	mov	r2, r3
   17412:	9100      	str	r1, [sp, #0]
   17414:	4620      	mov	r0, r4
   17416:	f00d fd92 	bl	24f3e <bt_le_set_phy>
		if (!err) {
   1741a:	4602      	mov	r2, r0
   1741c:	b920      	cbnz	r0, 17428 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1741e:	2180      	movs	r1, #128	; 0x80
   17420:	4630      	mov	r0, r6
   17422:	f00d fc9d 	bl	24d60 <atomic_or>
			return;
   17426:	e7e3      	b.n	173f0 <conn_auto_initiate+0x48>
		BT_ERR("Failed to set LE PHY (%d)", err);
   17428:	4812      	ldr	r0, [pc, #72]	; (17474 <conn_auto_initiate+0xcc>)
   1742a:	2145      	movs	r1, #69	; 0x45
   1742c:	f00b fc7e 	bl	22d2c <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   17430:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   17434:	069a      	lsls	r2, r3, #26
   17436:	d5db      	bpl.n	173f0 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   17438:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1743c:	689b      	ldr	r3, [r3, #8]
   1743e:	079b      	lsls	r3, r3, #30
   17440:	d5d6      	bpl.n	173f0 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17442:	f10d 010e 	add.w	r1, sp, #14
   17446:	a803      	add	r0, sp, #12
   17448:	f7ff fdfc 	bl	17044 <hci_le_read_max_data_len>
			if (!err) {
   1744c:	2800      	cmp	r0, #0
   1744e:	d1cf      	bne.n	173f0 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
   17450:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   17454:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   17458:	4620      	mov	r0, r4
   1745a:	f00d fd53 	bl	24f04 <bt_le_set_data_len>
				if (err) {
   1745e:	4602      	mov	r2, r0
   17460:	2800      	cmp	r0, #0
   17462:	d0c5      	beq.n	173f0 <conn_auto_initiate+0x48>
					BT_ERR("Failed to set data len (%d)", err);
   17464:	4804      	ldr	r0, [pc, #16]	; (17478 <conn_auto_initiate+0xd0>)
   17466:	2145      	movs	r1, #69	; 0x45
   17468:	f00b fc60 	bl	22d2c <printk>
		}
   1746c:	e7c0      	b.n	173f0 <conn_auto_initiate+0x48>
   1746e:	bf00      	nop
   17470:	200003c8 	.word	0x200003c8
   17474:	00028c0b 	.word	0x00028c0b
   17478:	00028c2a 	.word	0x00028c2a

0001747c <le_phy_update_complete>:
{
   1747c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1747e:	6883      	ldr	r3, [r0, #8]
   17480:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   17484:	4628      	mov	r0, r5
   17486:	f001 f9f5 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   1748a:	4604      	mov	r4, r0
   1748c:	b930      	cbnz	r0, 1749c <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1748e:	462a      	mov	r2, r5
   17490:	480d      	ldr	r0, [pc, #52]	; (174c8 <le_phy_update_complete+0x4c>)
}
   17492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17496:	2145      	movs	r1, #69	; 0x45
   17498:	f00b bc48 	b.w	22d2c <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1749c:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1749e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   174a2:	4628      	mov	r0, r5
   174a4:	f00d fc6e 	bl	24d84 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   174a8:	0603      	lsls	r3, r0, #24
   174aa:	d507      	bpl.n	174bc <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   174ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   174b0:	4628      	mov	r0, r5
   174b2:	f00d fc55 	bl	24d60 <atomic_or>
		conn_auto_initiate(conn);
   174b6:	4620      	mov	r0, r4
   174b8:	f7ff ff76 	bl	173a8 <conn_auto_initiate>
	bt_conn_unref(conn);
   174bc:	4620      	mov	r0, r4
}
   174be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   174c2:	f00d bec5 	b.w	25250 <bt_conn_unref>
   174c6:	bf00      	nop
   174c8:	000288bd 	.word	0x000288bd

000174cc <le_remote_feat_complete>:
{
   174cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   174ce:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   174d0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   174d4:	4630      	mov	r0, r6
   174d6:	f001 f9cd 	bl	18874 <bt_conn_lookup_handle>
	if (!conn) {
   174da:	4604      	mov	r4, r0
   174dc:	b930      	cbnz	r0, 174ec <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   174de:	4632      	mov	r2, r6
   174e0:	480c      	ldr	r0, [pc, #48]	; (17514 <le_remote_feat_complete+0x48>)
}
   174e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   174e6:	2145      	movs	r1, #69	; 0x45
   174e8:	f00b bc20 	b.w	22d2c <printk>
	if (!evt->status) {
   174ec:	782b      	ldrb	r3, [r5, #0]
   174ee:	b923      	cbnz	r3, 174fa <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   174f0:	2208      	movs	r2, #8
   174f2:	1ce9      	adds	r1, r5, #3
   174f4:	30b4      	adds	r0, #180	; 0xb4
   174f6:	f00d fae5 	bl	24ac4 <memcpy>
   174fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   174fe:	1d20      	adds	r0, r4, #4
   17500:	f00d fc2e 	bl	24d60 <atomic_or>
	conn_auto_initiate(conn);
   17504:	4620      	mov	r0, r4
   17506:	f7ff ff4f 	bl	173a8 <conn_auto_initiate>
	bt_conn_unref(conn);
   1750a:	4620      	mov	r0, r4
}
   1750c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   17510:	f00d be9e 	b.w	25250 <bt_conn_unref>
   17514:	000288bd 	.word	0x000288bd

00017518 <bt_id_add>:
{
   17518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1751a:	4f4c      	ldr	r7, [pc, #304]	; (1764c <bt_id_add+0x134>)
   1751c:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   17520:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   17524:	4604      	mov	r4, r0
   17526:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17528:	b10a      	cbz	r2, 1752e <bt_id_add+0x16>
   1752a:	4293      	cmp	r3, r2
   1752c:	d908      	bls.n	17540 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   1752e:	3301      	adds	r3, #1
   17530:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   17534:	7a23      	ldrb	r3, [r4, #8]
   17536:	f043 0304 	orr.w	r3, r3, #4
   1753a:	7223      	strb	r3, [r4, #8]
}
   1753c:	b003      	add	sp, #12
   1753e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   17540:	2100      	movs	r1, #0
   17542:	2206      	movs	r2, #6
   17544:	4608      	mov	r0, r1
   17546:	f001 f9bd 	bl	188c4 <bt_conn_lookup_state_le>
	if (conn) {
   1754a:	4606      	mov	r6, r0
   1754c:	b168      	cbz	r0, 1756a <bt_id_add+0x52>
   1754e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   17552:	f107 0098 	add.w	r0, r7, #152	; 0x98
   17556:	f00d fc03 	bl	24d60 <atomic_or>
	keys->state |= flag;
   1755a:	7a23      	ldrb	r3, [r4, #8]
   1755c:	f043 0301 	orr.w	r3, r3, #1
   17560:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17562:	4630      	mov	r0, r6
   17564:	f00d fe74 	bl	25250 <bt_conn_unref>
		return;
   17568:	e7e8      	b.n	1753c <bt_id_add+0x24>
	func(&bt_dev.adv, data);
   1756a:	4601      	mov	r1, r0
   1756c:	f107 0018 	add.w	r0, r7, #24
   17570:	f00d fc38 	bl	24de4 <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
   17574:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
   17578:	b143      	cbz	r3, 1758c <bt_id_add+0x74>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1757a:	4630      	mov	r0, r6
   1757c:	f00d fc88 	bl	24e90 <addr_res_enable>
		if (err) {
   17580:	b120      	cbz	r0, 1758c <bt_id_add+0x74>
			BT_WARN("Failed to disable address resolution");
   17582:	4833      	ldr	r0, [pc, #204]	; (17650 <bt_id_add+0x138>)
   17584:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Set privacy mode command is not supported");
   17586:	f00b fbd1 	bl	22d2c <printk>
	if (err) {
   1758a:	e01c      	b.n	175c6 <bt_id_add+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1758c:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   17590:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   17594:	429a      	cmp	r2, r3
   17596:	d11e      	bne.n	175d6 <bt_id_add+0xbe>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   17598:	482e      	ldr	r0, [pc, #184]	; (17654 <bt_id_add+0x13c>)
   1759a:	2157      	movs	r1, #87	; 0x57
   1759c:	f00b fbc6 	bl	22d2c <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   175a0:	2200      	movs	r2, #0
   175a2:	4611      	mov	r1, r2
   175a4:	f242 0029 	movw	r0, #8233	; 0x2029
   175a8:	f7ff fcea 	bl	16f80 <bt_hci_cmd_send_sync>
		if (err) {
   175ac:	b110      	cbz	r0, 175b4 <bt_id_add+0x9c>
			BT_ERR("Failed to clear resolution list");
   175ae:	482a      	ldr	r0, [pc, #168]	; (17658 <bt_id_add+0x140>)
   175b0:	2145      	movs	r1, #69	; 0x45
   175b2:	e7e8      	b.n	17586 <bt_id_add+0x6e>
		bt_dev.le.rl_entries++;
   175b4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   175b8:	3301      	adds	r3, #1
   175ba:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   175be:	7a23      	ldrb	r3, [r4, #8]
   175c0:	f043 0304 	orr.w	r3, r3, #4
   175c4:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   175c6:	2001      	movs	r0, #1
   175c8:	f00d fc62 	bl	24e90 <addr_res_enable>
	func(&bt_dev.adv, data);
   175cc:	4823      	ldr	r0, [pc, #140]	; (1765c <bt_id_add+0x144>)
   175ce:	2100      	movs	r1, #0
   175d0:	f00d fc1d 	bl	24e0e <adv_unpause_enabled>
}
   175d4:	e7b2      	b.n	1753c <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   175d6:	1c67      	adds	r7, r4, #1
   175d8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   175dc:	4638      	mov	r0, r7
   175de:	f00d fc26 	bl	24e2e <hci_id_add.isra.0>
	if (err) {
   175e2:	4606      	mov	r6, r0
   175e4:	b110      	cbz	r0, 175ec <bt_id_add+0xd4>
		BT_ERR("Failed to add IRK to controller");
   175e6:	481e      	ldr	r0, [pc, #120]	; (17660 <bt_id_add+0x148>)
   175e8:	2145      	movs	r1, #69	; 0x45
   175ea:	e7cc      	b.n	17586 <bt_id_add+0x6e>
	bt_dev.le.rl_entries++;
   175ec:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   175f0:	3301      	adds	r3, #1
   175f2:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   175f6:	7a23      	ldrb	r3, [r4, #8]
   175f8:	f043 0304 	orr.w	r3, r3, #4
   175fc:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   175fe:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
   17602:	075b      	lsls	r3, r3, #29
   17604:	d402      	bmi.n	1760c <bt_id_add+0xf4>
		BT_WARN("Set privacy mode command is not supported");
   17606:	4817      	ldr	r0, [pc, #92]	; (17664 <bt_id_add+0x14c>)
   17608:	2157      	movs	r1, #87	; 0x57
   1760a:	e7bc      	b.n	17586 <bt_id_add+0x6e>
	bt_addr_le_copy(&cp.id_addr, addr);
   1760c:	4639      	mov	r1, r7
   1760e:	4668      	mov	r0, sp
   17610:	f00d fba3 	bl	24d5a <bt_addr_le_copy>
	cp.mode = mode;
   17614:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17616:	2108      	movs	r1, #8
   17618:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1761c:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17620:	f7ff fb70 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   17624:	4604      	mov	r4, r0
   17626:	b910      	cbnz	r0, 1762e <bt_id_add+0x116>
		BT_ERR("Failed to set privacy mode");
   17628:	480f      	ldr	r0, [pc, #60]	; (17668 <bt_id_add+0x150>)
   1762a:	2145      	movs	r1, #69	; 0x45
   1762c:	e7ab      	b.n	17586 <bt_id_add+0x6e>
	net_buf_add_mem(buf, &cp, sizeof(cp));
   1762e:	2208      	movs	r2, #8
   17630:	4669      	mov	r1, sp
   17632:	4410      	add	r0, r2
   17634:	f00e fff1 	bl	2661a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   17638:	4632      	mov	r2, r6
   1763a:	4621      	mov	r1, r4
   1763c:	f242 004e 	movw	r0, #8270	; 0x204e
   17640:	f7ff fc9e 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   17644:	2800      	cmp	r0, #0
   17646:	d0be      	beq.n	175c6 <bt_id_add+0xae>
   17648:	e7ee      	b.n	17628 <bt_id_add+0x110>
   1764a:	bf00      	nop
   1764c:	200003c8 	.word	0x200003c8
   17650:	00028c4b 	.word	0x00028c4b
   17654:	00028c75 	.word	0x00028c75
   17658:	00028cab 	.word	0x00028cab
   1765c:	200003e0 	.word	0x200003e0
   17660:	00028cd0 	.word	0x00028cd0
   17664:	00028cf5 	.word	0x00028cf5
   17668:	00028d24 	.word	0x00028d24

0001766c <bt_id_del>:
{
   1766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   17670:	4f3f      	ldr	r7, [pc, #252]	; (17770 <bt_id_del+0x104>)
   17672:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   17676:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
   1767a:	4604      	mov	r4, r0
   1767c:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
   1767e:	b112      	cbz	r2, 17686 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17680:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   17682:	4293      	cmp	r3, r2
   17684:	dd08      	ble.n	17698 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   17686:	3b01      	subs	r3, #1
   17688:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   1768c:	7a23      	ldrb	r3, [r4, #8]
   1768e:	f023 0304 	bic.w	r3, r3, #4
   17692:	7223      	strb	r3, [r4, #8]
}
   17694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   17698:	2100      	movs	r1, #0
   1769a:	2206      	movs	r2, #6
   1769c:	4608      	mov	r0, r1
   1769e:	f001 f911 	bl	188c4 <bt_conn_lookup_state_le>
	if (conn) {
   176a2:	4606      	mov	r6, r0
   176a4:	b170      	cbz	r0, 176c4 <bt_id_del+0x58>
   176a6:	f107 0098 	add.w	r0, r7, #152	; 0x98
   176aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   176ae:	f00d fb57 	bl	24d60 <atomic_or>
	keys->state |= flag;
   176b2:	7a23      	ldrb	r3, [r4, #8]
   176b4:	f043 0302 	orr.w	r3, r3, #2
   176b8:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   176ba:	4630      	mov	r0, r6
}
   176bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   176c0:	f00d bdc6 	b.w	25250 <bt_conn_unref>
	func(&bt_dev.adv, data);
   176c4:	4601      	mov	r1, r0
   176c6:	f107 0018 	add.w	r0, r7, #24
   176ca:	f00d fb8b 	bl	24de4 <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   176ce:	4630      	mov	r0, r6
   176d0:	f00d fbde 	bl	24e90 <addr_res_enable>
	if (err) {
   176d4:	4606      	mov	r6, r0
   176d6:	b180      	cbz	r0, 176fa <bt_id_del+0x8e>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   176d8:	4602      	mov	r2, r0
   176da:	2145      	movs	r1, #69	; 0x45
   176dc:	4825      	ldr	r0, [pc, #148]	; (17774 <bt_id_del+0x108>)
   176de:	f00b fb25 	bl	22d2c <printk>
	if (bt_dev.le.rl_entries) {
   176e2:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   176e6:	b113      	cbz	r3, 176ee <bt_id_del+0x82>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   176e8:	2001      	movs	r0, #1
   176ea:	f00d fbd1 	bl	24e90 <addr_res_enable>
}
   176ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
   176f2:	4821      	ldr	r0, [pc, #132]	; (17778 <bt_id_del+0x10c>)
   176f4:	2100      	movs	r1, #0
   176f6:	f00d bb8a 	b.w	24e0e <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   176fa:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
   176fe:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
   17702:	429a      	cmp	r2, r3
   17704:	d20c      	bcs.n	17720 <bt_id_del+0xb4>
		bt_dev.le.rl_entries--;
   17706:	3b01      	subs	r3, #1
   17708:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   1770c:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1770e:	491b      	ldr	r1, [pc, #108]	; (1777c <bt_id_del+0x110>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   17710:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   17714:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   17716:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   17718:	2002      	movs	r0, #2
   1771a:	f005 fae7 	bl	1ccec <bt_keys_foreach>
		goto done;
   1771e:	e7e0      	b.n	176e2 <bt_id_del+0x76>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   17720:	2107      	movs	r1, #7
   17722:	f242 0028 	movw	r0, #8232	; 0x2028
   17726:	f7ff faed 	bl	16d04 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1772a:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   1772e:	4607      	mov	r7, r0
   17730:	b920      	cbnz	r0, 1773c <bt_id_del+0xd0>
		BT_ERR("Failed to remove IRK from controller");
   17732:	4813      	ldr	r0, [pc, #76]	; (17780 <bt_id_del+0x114>)
   17734:	2145      	movs	r1, #69	; 0x45
   17736:	f00b faf9 	bl	22d2c <printk>
		goto done;
   1773a:	e7d2      	b.n	176e2 <bt_id_del+0x76>
	cp = net_buf_add(buf, sizeof(*cp));
   1773c:	2107      	movs	r1, #7
   1773e:	3008      	adds	r0, #8
   17740:	f005 fea4 	bl	1d48c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17744:	4641      	mov	r1, r8
   17746:	f00d fb08 	bl	24d5a <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1774a:	4632      	mov	r2, r6
   1774c:	4639      	mov	r1, r7
   1774e:	f242 0028 	movw	r0, #8232	; 0x2028
   17752:	f7ff fc15 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   17756:	2800      	cmp	r0, #0
   17758:	d1eb      	bne.n	17732 <bt_id_del+0xc6>
	bt_dev.le.rl_entries--;
   1775a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1775e:	3b01      	subs	r3, #1
   17760:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   17764:	7a23      	ldrb	r3, [r4, #8]
   17766:	f023 0304 	bic.w	r3, r3, #4
   1776a:	7223      	strb	r3, [r4, #8]
   1776c:	e7b9      	b.n	176e2 <bt_id_del+0x76>
   1776e:	bf00      	nop
   17770:	200003c8 	.word	0x200003c8
   17774:	00028d44 	.word	0x00028d44
   17778:	200003e0 	.word	0x200003e0
   1777c:	00024e7f 	.word	0x00024e7f
   17780:	00028d76 	.word	0x00028d76

00017784 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   17784:	b530      	push	{r4, r5, lr}
   17786:	4d17      	ldr	r5, [pc, #92]	; (177e4 <id_create.isra.0+0x60>)
   17788:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1778c:	b085      	sub	sp, #20
   1778e:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   17790:	460c      	mov	r4, r1
   17792:	b1a9      	cbz	r1, 177c0 <id_create.isra.0+0x3c>
   17794:	2300      	movs	r3, #0
   17796:	a902      	add	r1, sp, #8
   17798:	4620      	mov	r0, r4
   1779a:	9302      	str	r3, [sp, #8]
   1779c:	f8cd 300b 	str.w	r3, [sp, #11]
   177a0:	f00d faed 	bl	24d7e <bt_addr_le_cmp>
   177a4:	b160      	cbz	r0, 177c0 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   177a6:	4621      	mov	r1, r4
   177a8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   177aa:	f00d fad6 	bl	24d5a <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   177ae:	480e      	ldr	r0, [pc, #56]	; (177e8 <id_create.isra.0+0x64>)
   177b0:	f00d facd 	bl	24d4e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   177b4:	0783      	lsls	r3, r0, #30
   177b6:	d501      	bpl.n	177bc <id_create.isra.0+0x38>
		bt_settings_save_id();
   177b8:	f7fe fd2c 	bl	16214 <bt_settings_save_id>
}
   177bc:	b005      	add	sp, #20
   177be:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   177c0:	4668      	mov	r0, sp
   177c2:	f00d fc12 	bl	24fea <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   177c6:	4668      	mov	r0, sp
   177c8:	f7fe fdd6 	bl	16378 <id_find>
   177cc:	2800      	cmp	r0, #0
   177ce:	daf7      	bge.n	177c0 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   177d0:	4669      	mov	r1, sp
   177d2:	4628      	mov	r0, r5
   177d4:	f00d fac1 	bl	24d5a <bt_addr_le_copy>
		if (addr) {
   177d8:	2c00      	cmp	r4, #0
   177da:	d0e8      	beq.n	177ae <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   177dc:	4629      	mov	r1, r5
   177de:	4620      	mov	r0, r4
   177e0:	e7e3      	b.n	177aa <id_create.isra.0+0x26>
   177e2:	bf00      	nop
   177e4:	200003c8 	.word	0x200003c8
   177e8:	20000460 	.word	0x20000460

000177ec <hci_event_prio>:
{
   177ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177f0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   177f2:	f100 0608 	add.w	r6, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   177f6:	4630      	mov	r0, r6
   177f8:	f00e ff03 	bl	26602 <net_buf_simple_headroom>
	state->len = buf->len;
   177fc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17800:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   17804:	4605      	mov	r5, r0
   17806:	d80b      	bhi.n	17820 <hci_event_prio+0x34>
   17808:	491b      	ldr	r1, [pc, #108]	; (17878 <hci_event_prio+0x8c>)
   1780a:	481c      	ldr	r0, [pc, #112]	; (1787c <hci_event_prio+0x90>)
   1780c:	f641 1226 	movw	r2, #6438	; 0x1926
   17810:	f00b fa8c 	bl	22d2c <printk>
   17814:	4040      	eors	r0, r0
   17816:	f380 8811 	msr	BASEPRI, r0
   1781a:	f04f 0003 	mov.w	r0, #3
   1781e:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   17820:	2102      	movs	r1, #2
   17822:	4630      	mov	r0, r6
   17824:	f005 fe14 	bl	1d450 <net_buf_simple_pull_mem>
   17828:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1782a:	7800      	ldrb	r0, [r0, #0]
   1782c:	f00d fa6e 	bl	24d0c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17830:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17832:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17834:	d40b      	bmi.n	1784e <hci_event_prio+0x62>
   17836:	4910      	ldr	r1, [pc, #64]	; (17878 <hci_event_prio+0x8c>)
   17838:	4810      	ldr	r0, [pc, #64]	; (1787c <hci_event_prio+0x90>)
   1783a:	f641 122a 	movw	r2, #6442	; 0x192a
   1783e:	f00b fa75 	bl	22d2c <printk>
   17842:	4040      	eors	r0, r0
   17844:	f380 8811 	msr	BASEPRI, r0
   17848:	f04f 0003 	mov.w	r0, #3
   1784c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1784e:	2305      	movs	r3, #5
   17850:	4a0b      	ldr	r2, [pc, #44]	; (17880 <hci_event_prio+0x94>)
   17852:	7838      	ldrb	r0, [r7, #0]
   17854:	4621      	mov	r1, r4
   17856:	f7fe ffcb 	bl	167f0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1785a:	07b3      	lsls	r3, r6, #30
   1785c:	d507      	bpl.n	1786e <hci_event_prio+0x82>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   1785e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   17860:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   17864:	fa10 f585 	uxtah	r5, r0, r5
   17868:	60a5      	str	r5, [r4, #8]
}
   1786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1786e:	4620      	mov	r0, r4
}
   17870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   17874:	f005 bcf4 	b.w	1d260 <net_buf_unref>
   17878:	00028a25 	.word	0x00028a25
   1787c:	00027c9a 	.word	0x00027c9a
   17880:	000275ac 	.word	0x000275ac

00017884 <bt_recv>:
{
   17884:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   17886:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   17888:	2a01      	cmp	r2, #1
{
   1788a:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1788c:	d007      	beq.n	1789e <bt_recv+0x1a>
   1788e:	2a03      	cmp	r2, #3
   17890:	d113      	bne.n	178ba <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   17892:	480f      	ldr	r0, [pc, #60]	; (178d0 <bt_recv+0x4c>)
   17894:	4629      	mov	r1, r5
   17896:	f005 fcb5 	bl	1d204 <net_buf_put>
		return 0;
   1789a:	2000      	movs	r0, #0
   1789c:	e00c      	b.n	178b8 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1789e:	6883      	ldr	r3, [r0, #8]
   178a0:	7818      	ldrb	r0, [r3, #0]
   178a2:	f00d fa33 	bl	24d0c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   178a6:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   178a8:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   178aa:	d502      	bpl.n	178b2 <bt_recv+0x2e>
			hci_event_prio(buf);
   178ac:	4628      	mov	r0, r5
   178ae:	f7ff ff9d 	bl	177ec <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   178b2:	f014 0002 	ands.w	r0, r4, #2
   178b6:	d1ec      	bne.n	17892 <bt_recv+0xe>
}
   178b8:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   178ba:	4806      	ldr	r0, [pc, #24]	; (178d4 <bt_recv+0x50>)
   178bc:	2145      	movs	r1, #69	; 0x45
   178be:	f00b fa35 	bl	22d2c <printk>
		net_buf_unref(buf);
   178c2:	4628      	mov	r0, r5
   178c4:	f005 fccc 	bl	1d260 <net_buf_unref>
		return -EINVAL;
   178c8:	f06f 0015 	mvn.w	r0, #21
   178cc:	e7f4      	b.n	178b8 <bt_recv+0x34>
   178ce:	bf00      	nop
   178d0:	200004d4 	.word	0x200004d4
   178d4:	00028da0 	.word	0x00028da0

000178d8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   178d8:	4a08      	ldr	r2, [pc, #32]	; (178fc <bt_hci_driver_register+0x24>)
{
   178da:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   178dc:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
   178e0:	b930      	cbnz	r0, 178f0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   178e2:	68d9      	ldr	r1, [r3, #12]
   178e4:	b139      	cbz	r1, 178f6 <bt_hci_driver_register+0x1e>
   178e6:	6919      	ldr	r1, [r3, #16]
   178e8:	b129      	cbz	r1, 178f6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   178ea:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	return 0;
   178ee:	4770      	bx	lr
		return -EALREADY;
   178f0:	f06f 0044 	mvn.w	r0, #68	; 0x44
   178f4:	4770      	bx	lr
		return -EINVAL;
   178f6:	f06f 0015 	mvn.w	r0, #21
}
   178fa:	4770      	bx	lr
   178fc:	200003c8 	.word	0x200003c8

00017900 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17900:	4801      	ldr	r0, [pc, #4]	; (17908 <bt_finalize_init+0x8>)
   17902:	2102      	movs	r1, #2
   17904:	f00d ba2c 	b.w	24d60 <atomic_or>
   17908:	20000460 	.word	0x20000460

0001790c <init_work>:
{
   1790c:	b510      	push	{r4, lr}
	err = bt_init();
   1790e:	f7fa fd9b 	bl	12448 <bt_init>
	if (ready_cb) {
   17912:	4b03      	ldr	r3, [pc, #12]	; (17920 <init_work+0x14>)
   17914:	681b      	ldr	r3, [r3, #0]
   17916:	b113      	cbz	r3, 1791e <init_work+0x12>
}
   17918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1791c:	4718      	bx	r3
}
   1791e:	bd10      	pop	{r4, pc}
   17920:	20002930 	.word	0x20002930

00017924 <bt_enable>:
{
   17924:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   17928:	4d36      	ldr	r5, [pc, #216]	; (17a04 <bt_enable+0xe0>)
   1792a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
{
   1792e:	b088      	sub	sp, #32
   17930:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   17932:	b94b      	cbnz	r3, 17948 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   17934:	4834      	ldr	r0, [pc, #208]	; (17a08 <bt_enable+0xe4>)
   17936:	2145      	movs	r1, #69	; 0x45
   17938:	f00b f9f8 	bl	22d2c <printk>
		return -ENODEV;
   1793c:	f06f 0412 	mvn.w	r4, #18
}
   17940:	4620      	mov	r0, r4
   17942:	b008      	add	sp, #32
   17944:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17948:	2101      	movs	r1, #1
   1794a:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1794e:	f00d fa07 	bl	24d60 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17952:	07c2      	lsls	r2, r0, #31
   17954:	d453      	bmi.n	179fe <bt_enable+0xda>
		err = bt_settings_init();
   17956:	f7fe fcab 	bl	162b0 <bt_settings_init>
		if (err) {
   1795a:	4604      	mov	r4, r0
   1795c:	2800      	cmp	r0, #0
   1795e:	d1ef      	bne.n	17940 <bt_enable+0x1c>
	ready_cb = cb;
   17960:	4b2a      	ldr	r3, [pc, #168]	; (17a0c <bt_enable+0xe8>)
   17962:	f04f 0800 	mov.w	r8, #0
   17966:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   17968:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1796c:	f06f 0308 	mvn.w	r3, #8
   17970:	e9cd 0302 	strd	r0, r3, [sp, #8]
   17974:	e9cd 0000 	strd	r0, r0, [sp]
   17978:	9004      	str	r0, [sp, #16]
   1797a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1797e:	4b24      	ldr	r3, [pc, #144]	; (17a10 <bt_enable+0xec>)
   17980:	4924      	ldr	r1, [pc, #144]	; (17a14 <bt_enable+0xf0>)
   17982:	4825      	ldr	r0, [pc, #148]	; (17a18 <bt_enable+0xf4>)
   17984:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   17988:	f00a f962 	bl	21c50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1798c:	4923      	ldr	r1, [pc, #140]	; (17a1c <bt_enable+0xf8>)
   1798e:	4822      	ldr	r0, [pc, #136]	; (17a18 <bt_enable+0xf4>)
   17990:	f00f f92f 	bl	26bf2 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17994:	f06f 0307 	mvn.w	r3, #7
   17998:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1799c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   179a0:	e9cd 4400 	strd	r4, r4, [sp]
   179a4:	4b1e      	ldr	r3, [pc, #120]	; (17a20 <bt_enable+0xfc>)
   179a6:	491f      	ldr	r1, [pc, #124]	; (17a24 <bt_enable+0x100>)
   179a8:	9404      	str	r4, [sp, #16]
   179aa:	f640 0298 	movw	r2, #2200	; 0x898
   179ae:	481e      	ldr	r0, [pc, #120]	; (17a28 <bt_enable+0x104>)
   179b0:	f00a f94e 	bl	21c50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   179b4:	491d      	ldr	r1, [pc, #116]	; (17a2c <bt_enable+0x108>)
   179b6:	481c      	ldr	r0, [pc, #112]	; (17a28 <bt_enable+0x104>)
   179b8:	f00f f91b 	bl	26bf2 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   179bc:	f7fe fb70 	bl	160a0 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   179c0:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   179c4:	68db      	ldr	r3, [r3, #12]
   179c6:	4798      	blx	r3
	if (err) {
   179c8:	4604      	mov	r4, r0
   179ca:	b128      	cbz	r0, 179d8 <bt_enable+0xb4>
		BT_ERR("HCI driver open failed (%d)", err);
   179cc:	4602      	mov	r2, r0
   179ce:	2145      	movs	r1, #69	; 0x45
   179d0:	4817      	ldr	r0, [pc, #92]	; (17a30 <bt_enable+0x10c>)
   179d2:	f00b f9ab 	bl	22d2c <printk>
		return err;
   179d6:	e7b3      	b.n	17940 <bt_enable+0x1c>
	if (!cb) {
   179d8:	b926      	cbnz	r6, 179e4 <bt_enable+0xc0>
}
   179da:	b008      	add	sp, #32
   179dc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   179e0:	f7fa bd32 	b.w	12448 <bt_init>
   179e4:	2101      	movs	r1, #1
   179e6:	f105 0094 	add.w	r0, r5, #148	; 0x94
   179ea:	f00d f9b9 	bl	24d60 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   179ee:	07c3      	lsls	r3, r0, #31
   179f0:	d4a6      	bmi.n	17940 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   179f2:	4810      	ldr	r0, [pc, #64]	; (17a34 <bt_enable+0x110>)
   179f4:	f105 018c 	add.w	r1, r5, #140	; 0x8c
   179f8:	f00f f884 	bl	26b04 <k_queue_append>
   179fc:	e7a0      	b.n	17940 <bt_enable+0x1c>
		return -EALREADY;
   179fe:	f06f 0444 	mvn.w	r4, #68	; 0x44
   17a02:	e79d      	b.n	17940 <bt_enable+0x1c>
   17a04:	200003c8 	.word	0x200003c8
   17a08:	00028e99 	.word	0x00028e99
   17a0c:	20002930 	.word	0x20002930
   17a10:	00016995 	.word	0x00016995
   17a14:	200042c0 	.word	0x200042c0
   17a18:	20001fe0 	.word	0x20001fe0
   17a1c:	00028eb7 	.word	0x00028eb7
   17a20:	00016871 	.word	0x00016871
   17a24:	20003a00 	.word	0x20003a00
   17a28:	20001f50 	.word	0x20001f50
   17a2c:	00028ebd 	.word	0x00028ebd
   17a30:	00028ec3 	.word	0x00028ec3
   17a34:	200026c8 	.word	0x200026c8

00017a38 <bt_get_name>:
}
   17a38:	4800      	ldr	r0, [pc, #0]	; (17a3c <bt_get_name+0x4>)
   17a3a:	4770      	bx	lr
   17a3c:	00027c52 	.word	0x00027c52

00017a40 <bt_id_create>:
{
   17a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17a42:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   17a44:	4605      	mov	r5, r0
   17a46:	b918      	cbnz	r0, 17a50 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   17a48:	b314      	cbz	r4, 17a90 <bt_id_create+0x50>
		return -EINVAL;
   17a4a:	f06f 0415 	mvn.w	r4, #21
   17a4e:	e01c      	b.n	17a8a <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   17a50:	2300      	movs	r3, #0
   17a52:	4669      	mov	r1, sp
   17a54:	9300      	str	r3, [sp, #0]
   17a56:	f8cd 3003 	str.w	r3, [sp, #3]
   17a5a:	f00d f990 	bl	24d7e <bt_addr_le_cmp>
   17a5e:	2800      	cmp	r0, #0
   17a60:	d0f2      	beq.n	17a48 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17a62:	782b      	ldrb	r3, [r5, #0]
   17a64:	2b01      	cmp	r3, #1
   17a66:	d104      	bne.n	17a72 <bt_id_create+0x32>
   17a68:	79ab      	ldrb	r3, [r5, #6]
   17a6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17a6e:	2bc0      	cmp	r3, #192	; 0xc0
   17a70:	d004      	beq.n	17a7c <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   17a72:	480e      	ldr	r0, [pc, #56]	; (17aac <bt_id_create+0x6c>)
   17a74:	2145      	movs	r1, #69	; 0x45
   17a76:	f00b f959 	bl	22d2c <printk>
			return -EINVAL;
   17a7a:	e7e6      	b.n	17a4a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   17a7c:	4628      	mov	r0, r5
   17a7e:	f7fe fc7b 	bl	16378 <id_find>
   17a82:	2800      	cmp	r0, #0
   17a84:	dbe0      	blt.n	17a48 <bt_id_create+0x8>
			return -EALREADY;
   17a86:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   17a8a:	4620      	mov	r0, r4
   17a8c:	b003      	add	sp, #12
   17a8e:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17a90:	4b07      	ldr	r3, [pc, #28]	; (17ab0 <bt_id_create+0x70>)
   17a92:	79dc      	ldrb	r4, [r3, #7]
   17a94:	2c01      	cmp	r4, #1
   17a96:	d006      	beq.n	17aa6 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   17a98:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   17a9a:	4629      	mov	r1, r5
   17a9c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   17a9e:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   17aa0:	f7ff fe70 	bl	17784 <id_create.isra.0>
	return new_id;
   17aa4:	e7f1      	b.n	17a8a <bt_id_create+0x4a>
		return -ENOMEM;
   17aa6:	f06f 040b 	mvn.w	r4, #11
   17aaa:	e7ee      	b.n	17a8a <bt_id_create+0x4a>
   17aac:	00028ee4 	.word	0x00028ee4
   17ab0:	200003c8 	.word	0x200003c8

00017ab4 <bt_setup_public_id_addr>:
{
   17ab4:	b570      	push	{r4, r5, r6, lr}
   17ab6:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   17ab8:	aa01      	add	r2, sp, #4
   17aba:	2100      	movs	r1, #0
   17abc:	f241 0009 	movw	r0, #4105	; 0x1009
   17ac0:	f7ff fa5e 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   17ac4:	4e1c      	ldr	r6, [pc, #112]	; (17b38 <bt_setup_public_id_addr+0x84>)
   17ac6:	4604      	mov	r4, r0
   17ac8:	b138      	cbz	r0, 17ada <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   17aca:	481c      	ldr	r0, [pc, #112]	; (17b3c <bt_setup_public_id_addr+0x88>)
   17acc:	2157      	movs	r1, #87	; 0x57
   17ace:	f00b f92d 	bl	22d2c <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   17ad2:	2300      	movs	r3, #0
   17ad4:	71f3      	strb	r3, [r6, #7]
}
   17ad6:	b006      	add	sp, #24
   17ad8:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17ada:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17adc:	689d      	ldr	r5, [r3, #8]
   17ade:	9004      	str	r0, [sp, #16]
   17ae0:	3501      	adds	r5, #1
   17ae2:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
   17ae6:	2206      	movs	r2, #6
   17ae8:	a904      	add	r1, sp, #16
   17aea:	4628      	mov	r0, r5
   17aec:	f00c ffda 	bl	24aa4 <memcmp>
   17af0:	b918      	cbnz	r0, 17afa <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   17af2:	9801      	ldr	r0, [sp, #4]
   17af4:	f005 fbb4 	bl	1d260 <net_buf_unref>
   17af8:	e7eb      	b.n	17ad2 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   17afa:	4b11      	ldr	r3, [pc, #68]	; (17b40 <bt_setup_public_id_addr+0x8c>)
   17afc:	6818      	ldr	r0, [r3, #0]
   17afe:	9002      	str	r0, [sp, #8]
   17b00:	889b      	ldrh	r3, [r3, #4]
   17b02:	f8ad 300c 	strh.w	r3, [sp, #12]
   17b06:	2206      	movs	r2, #6
   17b08:	a902      	add	r1, sp, #8
   17b0a:	4628      	mov	r0, r5
   17b0c:	f00c ffca 	bl	24aa4 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17b10:	2800      	cmp	r0, #0
   17b12:	d0ee      	beq.n	17af2 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   17b14:	4629      	mov	r1, r5
   17b16:	2206      	movs	r2, #6
   17b18:	f10d 0011 	add.w	r0, sp, #17
   17b1c:	f00c ffd2 	bl	24ac4 <memcpy>
	net_buf_unref(rsp);
   17b20:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17b22:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   17b26:	f005 fb9b 	bl	1d260 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   17b2a:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   17b2c:	a904      	add	r1, sp, #16
   17b2e:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
   17b30:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   17b32:	f7ff fe27 	bl	17784 <id_create.isra.0>
   17b36:	e7ce      	b.n	17ad6 <bt_setup_public_id_addr+0x22>
   17b38:	200003c8 	.word	0x200003c8
   17b3c:	00028f17 	.word	0x00028f17
   17b40:	000271bf 	.word	0x000271bf

00017b44 <bt_read_static_addr>:
{
   17b44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17b48:	4b1c      	ldr	r3, [pc, #112]	; (17bbc <bt_read_static_addr+0x78>)
   17b4a:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
   17b4e:	f014 0401 	ands.w	r4, r4, #1
{
   17b52:	4607      	mov	r7, r0
   17b54:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17b56:	d104      	bne.n	17b62 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   17b58:	4819      	ldr	r0, [pc, #100]	; (17bc0 <bt_read_static_addr+0x7c>)
   17b5a:	2157      	movs	r1, #87	; 0x57
		BT_WARN("No static addresses stored in controller");
   17b5c:	f00b f8e6 	bl	22d2c <printk>
   17b60:	e00c      	b.n	17b7c <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   17b62:	aa01      	add	r2, sp, #4
   17b64:	2100      	movs	r1, #0
   17b66:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17b6a:	f7ff fa09 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   17b6e:	4605      	mov	r5, r0
   17b70:	b140      	cbz	r0, 17b84 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   17b72:	4814      	ldr	r0, [pc, #80]	; (17bc4 <bt_read_static_addr+0x80>)
   17b74:	2157      	movs	r1, #87	; 0x57
   17b76:	f00b f8d9 	bl	22d2c <printk>
   17b7a:	2400      	movs	r4, #0
}
   17b7c:	4620      	mov	r0, r4
   17b7e:	b002      	add	sp, #8
   17b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   17b84:	9b01      	ldr	r3, [sp, #4]
   17b86:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   17b88:	785c      	ldrb	r4, [r3, #1]
   17b8a:	42b4      	cmp	r4, r6
   17b8c:	bf28      	it	cs
   17b8e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   17b90:	f04f 0816 	mov.w	r8, #22
   17b94:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   17b96:	42ac      	cmp	r4, r5
   17b98:	dc07      	bgt.n	17baa <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   17b9a:	9801      	ldr	r0, [sp, #4]
   17b9c:	f005 fb60 	bl	1d260 <net_buf_unref>
	if (!cnt) {
   17ba0:	2c00      	cmp	r4, #0
   17ba2:	d1eb      	bne.n	17b7c <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   17ba4:	4808      	ldr	r0, [pc, #32]	; (17bc8 <bt_read_static_addr+0x84>)
   17ba6:	2157      	movs	r1, #87	; 0x57
   17ba8:	e7d8      	b.n	17b5c <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   17baa:	fb08 7005 	mla	r0, r8, r5, r7
   17bae:	2216      	movs	r2, #22
   17bb0:	4631      	mov	r1, r6
   17bb2:	f00c ff87 	bl	24ac4 <memcpy>
	for (i = 0; i < cnt; i++) {
   17bb6:	3501      	adds	r5, #1
   17bb8:	e7ed      	b.n	17b96 <bt_read_static_addr+0x52>
   17bba:	bf00      	nop
   17bbc:	200003c8 	.word	0x200003c8
   17bc0:	00028f3a 	.word	0x00028f3a
   17bc4:	00028f6b 	.word	0x00028f6b
   17bc8:	00028f90 	.word	0x00028f90

00017bcc <bt_setup_random_id_addr>:
{
   17bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   17bce:	4d14      	ldr	r5, [pc, #80]	; (17c20 <bt_setup_random_id_addr+0x54>)
   17bd0:	79ec      	ldrb	r4, [r5, #7]
{
   17bd2:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   17bd4:	b9f4      	cbnz	r4, 17c14 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   17bd6:	2101      	movs	r1, #1
   17bd8:	a802      	add	r0, sp, #8
   17bda:	f7ff ffb3 	bl	17b44 <bt_read_static_addr>
   17bde:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   17be0:	b1c0      	cbz	r0, 17c14 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   17be2:	2716      	movs	r7, #22
   17be4:	e00f      	b.n	17c06 <bt_setup_random_id_addr+0x3a>
   17be6:	ab02      	add	r3, sp, #8
   17be8:	fb07 3106 	mla	r1, r7, r6, r3
   17bec:	2206      	movs	r2, #6
   17bee:	f10d 0001 	add.w	r0, sp, #1
   17bf2:	f00c ff67 	bl	24ac4 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   17bf6:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   17bf8:	4669      	mov	r1, sp
   17bfa:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   17bfc:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   17c00:	f7ff fdc0 	bl	17784 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17c04:	3401      	adds	r4, #1
   17c06:	79eb      	ldrb	r3, [r5, #7]
   17c08:	b2e6      	uxtb	r6, r4
   17c0a:	42b3      	cmp	r3, r6
   17c0c:	d8eb      	bhi.n	17be6 <bt_setup_random_id_addr+0x1a>
			return 0;
   17c0e:	2000      	movs	r0, #0
}
   17c10:	b009      	add	sp, #36	; 0x24
   17c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   17c14:	2100      	movs	r1, #0
   17c16:	4608      	mov	r0, r1
   17c18:	f7ff ff12 	bl	17a40 <bt_id_create>
   17c1c:	e7f8      	b.n	17c10 <bt_setup_random_id_addr+0x44>
   17c1e:	bf00      	nop
   17c20:	200003c8 	.word	0x200003c8

00017c24 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   17c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   17c28:	690d      	ldr	r5, [r1, #16]
{
   17c2a:	b08f      	sub	sp, #60	; 0x3c
   17c2c:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   17c2e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   17c30:	ebb5 0b03 	subs.w	fp, r5, r3
{
   17c34:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17c36:	4880      	ldr	r0, [pc, #512]	; (17e38 <bt_le_adv_start_legacy+0x214>)
	struct bt_conn *conn = NULL;
   17c38:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   17c3a:	bf18      	it	ne
   17c3c:	f04f 0b01 	movne.w	fp, #1
{
   17c40:	460c      	mov	r4, r1
   17c42:	4691      	mov	r9, r2
   17c44:	f00d f883 	bl	24d4e <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17c48:	0787      	lsls	r7, r0, #30
   17c4a:	f140 80e7 	bpl.w	17e1c <bt_le_adv_start_legacy+0x1f8>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   17c4e:	4608      	mov	r0, r1
   17c50:	f7fe fbaa 	bl	163a8 <valid_adv_param>
   17c54:	4607      	mov	r7, r0
   17c56:	2800      	cmp	r0, #0
   17c58:	f000 80e3 	beq.w	17e22 <bt_le_adv_start_legacy+0x1fe>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17c5c:	f106 0814 	add.w	r8, r6, #20
   17c60:	4640      	mov	r0, r8
   17c62:	f00d f874 	bl	24d4e <atomic_get>
   17c66:	f3c0 1180 	ubfx	r1, r0, #6, #1
   17c6a:	0640      	lsls	r0, r0, #25
   17c6c:	f100 80dc 	bmi.w	17e28 <bt_le_adv_start_legacy+0x204>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   17c70:	220f      	movs	r2, #15
   17c72:	a80a      	add	r0, sp, #40	; 0x28
   17c74:	9105      	str	r1, [sp, #20]
   17c76:	f00c ff50 	bl	24b1a <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   17c7a:	68a3      	ldr	r3, [r4, #8]
   17c7c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   17c80:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17c82:	68e3      	ldr	r3, [r4, #12]
   17c84:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   17c88:	f00d f852 	bl	24d30 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   17c8c:	7832      	ldrb	r2, [r6, #0]
   17c8e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   17c90:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17c92:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   17c96:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   17c98:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   17c9c:	d004      	beq.n	17ca8 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17c9e:	4866      	ldr	r0, [pc, #408]	; (17e38 <bt_le_adv_start_legacy+0x214>)
   17ca0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17ca4:	f00d f86e 	bl	24d84 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
   17ca8:	4b64      	ldr	r3, [pc, #400]	; (17e3c <bt_le_adv_start_legacy+0x218>)
	adv->id = param->id;
   17caa:	7820      	ldrb	r0, [r4, #0]
   17cac:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   17cae:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   17cb2:	465a      	mov	r2, fp
   17cb4:	6861      	ldr	r1, [r4, #4]
   17cb6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   17cba:	f7ff fb1b 	bl	172f4 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   17cbe:	4683      	mov	fp, r0
   17cc0:	2800      	cmp	r0, #0
   17cc2:	d169      	bne.n	17d98 <bt_le_adv_start_legacy+0x174>
		return err;
	}

	if (dir_adv) {
   17cc4:	f106 000b 	add.w	r0, r6, #11
   17cc8:	2d00      	cmp	r5, #0
   17cca:	d042      	beq.n	17d52 <bt_le_adv_start_legacy+0x12e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   17ccc:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   17cce:	f00d f844 	bl	24d5a <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17cd2:	6860      	ldr	r0, [r4, #4]
   17cd4:	07c1      	lsls	r1, r0, #31
   17cd6:	d544      	bpl.n	17d62 <bt_le_adv_start_legacy+0x13e>
		scannable = true;

		if (dir_adv) {
   17cd8:	2d00      	cmp	r5, #0
   17cda:	d03f      	beq.n	17d5c <bt_le_adv_start_legacy+0x138>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   17cdc:	f010 0f10 	tst.w	r0, #16
   17ce0:	bf14      	ite	ne
   17ce2:	2304      	movne	r3, #4
   17ce4:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   17ce6:	6921      	ldr	r1, [r4, #16]
   17ce8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17cec:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   17cf0:	f00d f833 	bl	24d5a <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   17cf4:	210f      	movs	r1, #15
   17cf6:	f242 0006 	movw	r0, #8198	; 0x2006
   17cfa:	f7ff f803 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   17cfe:	4683      	mov	fp, r0
   17d00:	2800      	cmp	r0, #0
   17d02:	f000 8094 	beq.w	17e2e <bt_le_adv_start_legacy+0x20a>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
   17d06:	220f      	movs	r2, #15
   17d08:	a90a      	add	r1, sp, #40	; 0x28
   17d0a:	3008      	adds	r0, #8
   17d0c:	f00e fc85 	bl	2661a <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   17d10:	2200      	movs	r2, #0
   17d12:	4659      	mov	r1, fp
   17d14:	f242 0006 	movw	r0, #8198	; 0x2006
   17d18:	f7ff f932 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   17d1c:	2800      	cmp	r0, #0
   17d1e:	f040 8089 	bne.w	17e34 <bt_le_adv_start_legacy+0x210>
		return err;
	}

	if (!dir_adv) {
   17d22:	b34d      	cbz	r5, 17d78 <bt_le_adv_start_legacy+0x154>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17d24:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17d26:	07da      	lsls	r2, r3, #31
   17d28:	d43a      	bmi.n	17da0 <bt_le_adv_start_legacy+0x17c>
	return set_le_adv_enable_legacy(adv, enable);
   17d2a:	2101      	movs	r1, #1
   17d2c:	4630      	mov	r0, r6
   17d2e:	f7ff f9a9 	bl	17084 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   17d32:	4683      	mov	fp, r0
   17d34:	2800      	cmp	r0, #0
   17d36:	d06a      	beq.n	17e0e <bt_le_adv_start_legacy+0x1ea>
		BT_ERR("Failed to start advertiser");
   17d38:	4841      	ldr	r0, [pc, #260]	; (17e40 <bt_le_adv_start_legacy+0x21c>)
   17d3a:	2145      	movs	r1, #69	; 0x45
   17d3c:	f00a fff6 	bl	22d2c <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17d40:	9807      	ldr	r0, [sp, #28]
   17d42:	b348      	cbz	r0, 17d98 <bt_le_adv_start_legacy+0x174>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17d44:	2100      	movs	r1, #0
   17d46:	f000 fdff 	bl	18948 <bt_conn_set_state>
			bt_conn_unref(conn);
   17d4a:	9807      	ldr	r0, [sp, #28]
   17d4c:	f00d fa80 	bl	25250 <bt_conn_unref>
   17d50:	e022      	b.n	17d98 <bt_le_adv_start_legacy+0x174>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   17d52:	9508      	str	r5, [sp, #32]
   17d54:	a908      	add	r1, sp, #32
   17d56:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   17d5a:	e7b8      	b.n	17cce <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
   17d5c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   17d60:	e7c8      	b.n	17cf4 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   17d62:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17d64:	b933      	cbnz	r3, 17d74 <bt_le_adv_start_legacy+0x150>
   17d66:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   17d6a:	f1c7 0303 	rsb	r3, r7, #3
   17d6e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17d72:	e7bf      	b.n	17cf4 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   17d74:	2701      	movs	r7, #1
   17d76:	e7f8      	b.n	17d6a <bt_le_adv_start_legacy+0x146>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17d78:	6863      	ldr	r3, [r4, #4]
   17d7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   17d7e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   17d82:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17d84:	9300      	str	r3, [sp, #0]
   17d86:	4652      	mov	r2, sl
   17d88:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17d8a:	4649      	mov	r1, r9
   17d8c:	4630      	mov	r0, r6
   17d8e:	f7ff fa0f 	bl	171b0 <le_adv_update.constprop.0>
		if (err) {
   17d92:	4683      	mov	fp, r0
   17d94:	2800      	cmp	r0, #0
   17d96:	d0c5      	beq.n	17d24 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   17d98:	4658      	mov	r0, fp
   17d9a:	b00f      	add	sp, #60	; 0x3c
   17d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   17da0:	a907      	add	r1, sp, #28
   17da2:	4630      	mov	r0, r6
   17da4:	f7fe ff2c 	bl	16c00 <le_adv_start_add_conn>
		if (err) {
   17da8:	4683      	mov	fp, r0
   17daa:	2800      	cmp	r0, #0
   17dac:	d0bd      	beq.n	17d2a <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
   17dae:	f110 0f0c 	cmn.w	r0, #12
   17db2:	d1f1      	bne.n	17d98 <bt_le_adv_start_legacy+0x174>
   17db4:	2d00      	cmp	r5, #0
   17db6:	d1ef      	bne.n	17d98 <bt_le_adv_start_legacy+0x174>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   17db8:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   17dba:	079b      	lsls	r3, r3, #30
   17dbc:	d4ec      	bmi.n	17d98 <bt_le_adv_start_legacy+0x174>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17dbe:	6860      	ldr	r0, [r4, #4]
   17dc0:	f080 0002 	eor.w	r0, r0, #2
   17dc4:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   17dc8:	f00b 0201 	and.w	r2, fp, #1
   17dcc:	210c      	movs	r1, #12
   17dce:	4640      	mov	r0, r8
   17dd0:	f00c ffe7 	bl	24da2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   17dd4:	6862      	ldr	r2, [r4, #4]
   17dd6:	2107      	movs	r1, #7
   17dd8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   17ddc:	4640      	mov	r0, r8
   17dde:	f00c ffe0 	bl	24da2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   17de2:	6862      	ldr	r2, [r4, #4]
   17de4:	2108      	movs	r1, #8
   17de6:	f002 0201 	and.w	r2, r2, #1
   17dea:	4640      	mov	r0, r8
   17dec:	f00c ffd9 	bl	24da2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   17df0:	463a      	mov	r2, r7
   17df2:	2109      	movs	r1, #9
   17df4:	4640      	mov	r0, r8
   17df6:	f00c ffd4 	bl	24da2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   17dfa:	6862      	ldr	r2, [r4, #4]
   17dfc:	210b      	movs	r1, #11
   17dfe:	f3c2 0280 	ubfx	r2, r2, #2, #1
   17e02:	4640      	mov	r0, r8
   17e04:	f00c ffcd 	bl	24da2 <atomic_set_bit_to>
	return 0;
   17e08:	f04f 0b00 	mov.w	fp, #0
   17e0c:	e7c4      	b.n	17d98 <bt_le_adv_start_legacy+0x174>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17e0e:	9807      	ldr	r0, [sp, #28]
   17e10:	b108      	cbz	r0, 17e16 <bt_le_adv_start_legacy+0x1f2>
		bt_conn_unref(conn);
   17e12:	f00d fa1d 	bl	25250 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17e16:	2d00      	cmp	r5, #0
   17e18:	d1d6      	bne.n	17dc8 <bt_le_adv_start_legacy+0x1a4>
   17e1a:	e7d0      	b.n	17dbe <bt_le_adv_start_legacy+0x19a>
		return -EAGAIN;
   17e1c:	f06f 0b0a 	mvn.w	fp, #10
   17e20:	e7ba      	b.n	17d98 <bt_le_adv_start_legacy+0x174>
		return -EINVAL;
   17e22:	f06f 0b15 	mvn.w	fp, #21
   17e26:	e7b7      	b.n	17d98 <bt_le_adv_start_legacy+0x174>
		return -EALREADY;
   17e28:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   17e2c:	e7b4      	b.n	17d98 <bt_le_adv_start_legacy+0x174>
		return -ENOBUFS;
   17e2e:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   17e32:	e7b1      	b.n	17d98 <bt_le_adv_start_legacy+0x174>
   17e34:	4683      	mov	fp, r0
   17e36:	e7af      	b.n	17d98 <bt_le_adv_start_legacy+0x174>
   17e38:	20000460 	.word	0x20000460
   17e3c:	200003c8 	.word	0x200003c8
   17e40:	00028fbe 	.word	0x00028fbe

00017e44 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   17e44:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17e46:	9c04      	ldr	r4, [sp, #16]
   17e48:	e9cd 3400 	strd	r3, r4, [sp]
   17e4c:	4613      	mov	r3, r2
   17e4e:	460a      	mov	r2, r1
   17e50:	4601      	mov	r1, r0
   17e52:	4802      	ldr	r0, [pc, #8]	; (17e5c <bt_le_adv_start+0x18>)
   17e54:	f7ff fee6 	bl	17c24 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   17e58:	b002      	add	sp, #8
   17e5a:	bd10      	pop	{r4, pc}
   17e5c:	200003e0 	.word	0x200003e0

00017e60 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   17e60:	b530      	push	{r4, r5, lr}
   17e62:	4c22      	ldr	r4, [pc, #136]	; (17eec <bt_le_adv_stop+0x8c>)
   17e64:	b085      	sub	sp, #20
   17e66:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17e6a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   17e6e:	f00c ff89 	bl	24d84 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17e72:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   17e76:	f00c ff6a 	bl	24d4e <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17e7a:	0642      	lsls	r2, r0, #25
   17e7c:	f3c0 1380 	ubfx	r3, r0, #6, #1
   17e80:	d531      	bpl.n	17ee6 <bt_le_adv_stop+0x86>
   17e82:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   17e86:	f00c ff62 	bl	24d4e <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17e8a:	05c3      	lsls	r3, r0, #23
   17e8c:	d521      	bpl.n	17ed2 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17e8e:	2300      	movs	r3, #0
   17e90:	4669      	mov	r1, sp
   17e92:	f104 0023 	add.w	r0, r4, #35	; 0x23
   17e96:	9300      	str	r3, [sp, #0]
   17e98:	f8cd 3003 	str.w	r3, [sp, #3]
   17e9c:	f00c ff6f 	bl	24d7e <bt_addr_le_cmp>
   17ea0:	7e25      	ldrb	r5, [r4, #24]
   17ea2:	b9e0      	cbnz	r0, 17ede <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   17ea4:	4b12      	ldr	r3, [pc, #72]	; (17ef0 <bt_le_adv_stop+0x90>)
   17ea6:	889a      	ldrh	r2, [r3, #4]
   17ea8:	6818      	ldr	r0, [r3, #0]
   17eaa:	799b      	ldrb	r3, [r3, #6]
   17eac:	f8ad 200c 	strh.w	r2, [sp, #12]
   17eb0:	9002      	str	r0, [sp, #8]
   17eb2:	f88d 300e 	strb.w	r3, [sp, #14]
   17eb6:	2204      	movs	r2, #4
   17eb8:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   17eba:	4628      	mov	r0, r5
   17ebc:	f000 fd02 	bl	188c4 <bt_conn_lookup_state_le>
   17ec0:	4604      	mov	r4, r0
	if (conn) {
   17ec2:	b130      	cbz	r0, 17ed2 <bt_le_adv_stop+0x72>
		conn->err = status;
   17ec4:	2100      	movs	r1, #0
   17ec6:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17ec8:	f000 fd3e 	bl	18948 <bt_conn_set_state>
		bt_conn_unref(conn);
   17ecc:	4620      	mov	r0, r4
   17ece:	f00d f9bf 	bl	25250 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
   17ed2:	4808      	ldr	r0, [pc, #32]	; (17ef4 <bt_le_adv_stop+0x94>)
   17ed4:	2100      	movs	r1, #0
   17ed6:	f7ff f8d5 	bl	17084 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   17eda:	b005      	add	sp, #20
   17edc:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   17ede:	2205      	movs	r2, #5
   17ee0:	f104 0123 	add.w	r1, r4, #35	; 0x23
   17ee4:	e7e9      	b.n	17eba <bt_le_adv_stop+0x5a>
		return 0;
   17ee6:	4618      	mov	r0, r3
   17ee8:	e7f7      	b.n	17eda <bt_le_adv_stop+0x7a>
   17eea:	bf00      	nop
   17eec:	200003c8 	.word	0x200003c8
   17ef0:	000271b8 	.word	0x000271b8
   17ef4:	200003e0 	.word	0x200003e0

00017ef8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   17ef8:	b513      	push	{r0, r1, r4, lr}
   17efa:	4818      	ldr	r0, [pc, #96]	; (17f5c <bt_le_adv_resume+0x64>)
   17efc:	f00c ff27 	bl	24d4e <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   17f00:	04c1      	lsls	r1, r0, #19
   17f02:	d529      	bpl.n	17f58 <bt_le_adv_resume+0x60>
   17f04:	4815      	ldr	r0, [pc, #84]	; (17f5c <bt_le_adv_resume+0x64>)
   17f06:	f00c ff22 	bl	24d4e <atomic_get>
   17f0a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17f0c:	f3c0 1480 	ubfx	r4, r0, #6, #1
   17f10:	d422      	bmi.n	17f58 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17f12:	4812      	ldr	r0, [pc, #72]	; (17f5c <bt_le_adv_resume+0x64>)
   17f14:	f00c ff1b 	bl	24d4e <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17f18:	05c3      	lsls	r3, r0, #23
   17f1a:	d51d      	bpl.n	17f58 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   17f1c:	4810      	ldr	r0, [pc, #64]	; (17f60 <bt_le_adv_resume+0x68>)
   17f1e:	a901      	add	r1, sp, #4
   17f20:	f7fe fe6e 	bl	16c00 <le_adv_start_add_conn>
	if (err) {
   17f24:	b9c0      	cbnz	r0, 17f58 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   17f26:	480e      	ldr	r0, [pc, #56]	; (17f60 <bt_le_adv_resume+0x68>)
   17f28:	2101      	movs	r1, #1
   17f2a:	f7ff f8ab 	bl	17084 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   17f2e:	b150      	cbz	r0, 17f46 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17f30:	4621      	mov	r1, r4
   17f32:	9801      	ldr	r0, [sp, #4]
   17f34:	f000 fd08 	bl	18948 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17f38:	4808      	ldr	r0, [pc, #32]	; (17f5c <bt_le_adv_resume+0x64>)
   17f3a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17f3e:	f00c ff21 	bl	24d84 <atomic_and>
	return (old & mask) != 0;
   17f42:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   17f46:	9801      	ldr	r0, [sp, #4]
   17f48:	f00d f982 	bl	25250 <bt_conn_unref>
	if (persist_paused) {
   17f4c:	b124      	cbz	r4, 17f58 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17f4e:	4803      	ldr	r0, [pc, #12]	; (17f5c <bt_le_adv_resume+0x64>)
   17f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17f54:	f00c ff04 	bl	24d60 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   17f58:	b002      	add	sp, #8
   17f5a:	bd10      	pop	{r4, pc}
   17f5c:	200003f4 	.word	0x200003f4
   17f60:	200003e0 	.word	0x200003e0

00017f64 <enh_conn_complete>:
{
   17f64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17f68:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
   17f6c:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17f6e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   17f72:	485b      	ldr	r0, [pc, #364]	; (180e0 <enh_conn_complete+0x17c>)
   17f74:	f00c ff06 	bl	24d84 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   17f78:	0443      	lsls	r3, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17f7a:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   17f7e:	d504      	bpl.n	17f8a <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   17f80:	4958      	ldr	r1, [pc, #352]	; (180e4 <enh_conn_complete+0x180>)
   17f82:	2200      	movs	r2, #0
   17f84:	2002      	movs	r0, #2
   17f86:	f004 feb1 	bl	1ccec <bt_keys_foreach>
	if (evt->status) {
   17f8a:	7825      	ldrb	r5, [r4, #0]
   17f8c:	b305      	cbz	r5, 17fd0 <enh_conn_complete+0x6c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17f8e:	2d3c      	cmp	r5, #60	; 0x3c
   17f90:	d118      	bne.n	17fc4 <enh_conn_complete+0x60>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17f92:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17f96:	4854      	ldr	r0, [pc, #336]	; (180e8 <enh_conn_complete+0x184>)
   17f98:	f00c fef4 	bl	24d84 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   17f9c:	2000      	movs	r0, #0
   17f9e:	f7fe fba3 	bl	166e8 <find_pending_connect.part.0>
		if (!conn) {
   17fa2:	4604      	mov	r4, r0
   17fa4:	b930      	cbnz	r0, 17fb4 <enh_conn_complete+0x50>
			BT_ERR("No pending slave connection");
   17fa6:	4851      	ldr	r0, [pc, #324]	; (180ec <enh_conn_complete+0x188>)
   17fa8:	2145      	movs	r1, #69	; 0x45
   17faa:	f00a febf 	bl	22d2c <printk>
}
   17fae:	b004      	add	sp, #16
   17fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   17fb4:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17fb6:	2100      	movs	r1, #0
   17fb8:	f000 fcc6 	bl	18948 <bt_conn_set_state>
		bt_conn_unref(conn);
   17fbc:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   17fbe:	f00d f947 	bl	25250 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17fc2:	e7f4      	b.n	17fae <enh_conn_complete+0x4a>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   17fc4:	484a      	ldr	r0, [pc, #296]	; (180f0 <enh_conn_complete+0x18c>)
   17fc6:	462a      	mov	r2, r5
   17fc8:	2157      	movs	r1, #87	; 0x57
   17fca:	f00a feaf 	bl	22d2c <printk>
		return;
   17fce:	e7ee      	b.n	17fae <enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17fd0:	7923      	ldrb	r3, [r4, #4]
   17fd2:	3b02      	subs	r3, #2
   17fd4:	2b01      	cmp	r3, #1
   17fd6:	f104 0604 	add.w	r6, r4, #4
   17fda:	d82f      	bhi.n	1803c <enh_conn_complete+0xd8>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   17fdc:	4631      	mov	r1, r6
   17fde:	a802      	add	r0, sp, #8
   17fe0:	f00c febb 	bl	24d5a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17fe4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17fe8:	2206      	movs	r2, #6
   17fea:	3b02      	subs	r3, #2
   17fec:	f104 0111 	add.w	r1, r4, #17
   17ff0:	f10d 0001 	add.w	r0, sp, #1
   17ff4:	f88d 3008 	strb.w	r3, [sp, #8]
   17ff8:	f00c fd64 	bl	24ac4 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   17ffc:	2301      	movs	r3, #1
   17ffe:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   18002:	78e3      	ldrb	r3, [r4, #3]
   18004:	2b01      	cmp	r3, #1
   18006:	d10c      	bne.n	18022 <enh_conn_complete+0xbe>
   18008:	a802      	add	r0, sp, #8
   1800a:	f7fe fb6d 	bl	166e8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1800e:	78e3      	ldrb	r3, [r4, #3]
   18010:	2b01      	cmp	r3, #1
   18012:	4605      	mov	r5, r0
   18014:	d104      	bne.n	18020 <enh_conn_complete+0xbc>
   18016:	4834      	ldr	r0, [pc, #208]	; (180e8 <enh_conn_complete+0x184>)
   18018:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1801c:	f00c feb2 	bl	24d84 <atomic_and>
	if (!conn) {
   18020:	b9fd      	cbnz	r5, 18062 <enh_conn_complete+0xfe>
		BT_ERR("No pending conn for peer %s",
   18022:	4630      	mov	r0, r6
   18024:	f7fd fe6c 	bl	15d00 <bt_addr_le_str_real>
   18028:	2145      	movs	r1, #69	; 0x45
   1802a:	4602      	mov	r2, r0
   1802c:	4831      	ldr	r0, [pc, #196]	; (180f4 <enh_conn_complete+0x190>)
   1802e:	f00a fe7d 	bl	22d2c <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18032:	211f      	movs	r1, #31
   18034:	4640      	mov	r0, r8
   18036:	f00c ff4b 	bl	24ed0 <bt_hci_disconnect>
		return;
   1803a:	e7b8      	b.n	17fae <enh_conn_complete+0x4a>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   1803c:	78e3      	ldrb	r3, [r4, #3]
   1803e:	2b01      	cmp	r3, #1
   18040:	bf04      	itt	eq
   18042:	4b2d      	ldreq	r3, [pc, #180]	; (180f8 <enh_conn_complete+0x194>)
   18044:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
   18048:	4631      	mov	r1, r6
   1804a:	4628      	mov	r0, r5
   1804c:	f00c ff38 	bl	24ec0 <bt_lookup_id_addr>
   18050:	4601      	mov	r1, r0
   18052:	a802      	add	r0, sp, #8
   18054:	f00c fe81 	bl	24d5a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   18058:	4631      	mov	r1, r6
   1805a:	4668      	mov	r0, sp
   1805c:	f00c fe7d 	bl	24d5a <bt_addr_le_copy>
   18060:	e7cf      	b.n	18002 <enh_conn_complete+0x9e>
	conn->handle = handle;
   18062:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18064:	a902      	add	r1, sp, #8
	conn->handle = handle;
   18066:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1806a:	f00c fe76 	bl	24d5a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1806e:	7e22      	ldrb	r2, [r4, #24]
   18070:	7de3      	ldrb	r3, [r4, #23]
   18072:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18076:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1807a:	7ea2      	ldrb	r2, [r4, #26]
   1807c:	7e63      	ldrb	r3, [r4, #25]
   1807e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18082:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18086:	7ee3      	ldrb	r3, [r4, #27]
   18088:	7f22      	ldrb	r2, [r4, #28]
   1808a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1808e:	f8a5 30ae 	strh.w	r3, [r5, #174]	; 0xae
	conn->role = evt->role;
   18092:	78e3      	ldrb	r3, [r4, #3]
   18094:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   18096:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18098:	2b01      	cmp	r3, #1
	conn->err = 0U;
   1809a:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1809c:	d116      	bne.n	180cc <enh_conn_complete+0x168>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   1809e:	4669      	mov	r1, sp
   180a0:	f105 0097 	add.w	r0, r5, #151	; 0x97
   180a4:	f00c fe59 	bl	24d5a <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   180a8:	7a29      	ldrb	r1, [r5, #8]
   180aa:	4e13      	ldr	r6, [pc, #76]	; (180f8 <enh_conn_complete+0x194>)
   180ac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   180b0:	4431      	add	r1, r6
   180b2:	f105 009e 	add.w	r0, r5, #158	; 0x9e
   180b6:	f00c fe50 	bl	24d5a <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   180ba:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
   180be:	4622      	mov	r2, r4
   180c0:	f001 0340 	and.w	r3, r1, #64	; 0x40
   180c4:	4313      	orrs	r3, r2
   180c6:	d001      	beq.n	180cc <enh_conn_complete+0x168>
			bt_le_adv_resume();
   180c8:	f7ff ff16 	bl	17ef8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   180cc:	2107      	movs	r1, #7
   180ce:	4628      	mov	r0, r5
   180d0:	f000 fc3a 	bl	18948 <bt_conn_set_state>
	conn_auto_initiate(conn);
   180d4:	4628      	mov	r0, r5
   180d6:	f7ff f967 	bl	173a8 <conn_auto_initiate>
	bt_conn_unref(conn);
   180da:	4628      	mov	r0, r5
   180dc:	e76f      	b.n	17fbe <enh_conn_complete+0x5a>
   180de:	bf00      	nop
   180e0:	20000460 	.word	0x20000460
   180e4:	00024fcb 	.word	0x00024fcb
   180e8:	200003f4 	.word	0x200003f4
   180ec:	00028fde 	.word	0x00028fde
   180f0:	00028fff 	.word	0x00028fff
   180f4:	0002901d 	.word	0x0002901d
   180f8:	200003c8 	.word	0x200003c8

000180fc <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   180fc:	b570      	push	{r4, r5, r6, lr}
   180fe:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   18100:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   18104:	2b01      	cmp	r3, #1
{
   18106:	4605      	mov	r5, r0
   18108:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1810a:	d00c      	beq.n	18126 <bt_buf_get_rx+0x2a>
   1810c:	2805      	cmp	r0, #5
   1810e:	d00a      	beq.n	18126 <bt_buf_get_rx+0x2a>
   18110:	490c      	ldr	r1, [pc, #48]	; (18144 <bt_buf_get_rx+0x48>)
   18112:	480d      	ldr	r0, [pc, #52]	; (18148 <bt_buf_get_rx+0x4c>)
   18114:	f242 4202 	movw	r2, #9218	; 0x2402
   18118:	f00a fe08 	bl	22d2c <printk>
   1811c:	4809      	ldr	r0, [pc, #36]	; (18144 <bt_buf_get_rx+0x48>)
   1811e:	f242 4102 	movw	r1, #9218	; 0x2402
   18122:	f00b f866 	bl	231f2 <assert_post_action>
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
   18126:	4623      	mov	r3, r4
   18128:	4808      	ldr	r0, [pc, #32]	; (1814c <bt_buf_get_rx+0x50>)
   1812a:	4632      	mov	r2, r6
   1812c:	f00e fa5c 	bl	265e8 <net_buf_alloc_fixed>
#endif

	if (buf) {
   18130:	4604      	mov	r4, r0
   18132:	b120      	cbz	r0, 1813e <bt_buf_get_rx+0x42>
		net_buf_reserve(buf, BT_BUF_RESERVE);
   18134:	2100      	movs	r1, #0
   18136:	3008      	adds	r0, #8
   18138:	f005 f840 	bl	1d1bc <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
   1813c:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1813e:	4620      	mov	r0, r4
   18140:	bd70      	pop	{r4, r5, r6, pc}
   18142:	bf00      	nop
   18144:	00028a25 	.word	0x00028a25
   18148:	00027c9a 	.word	0x00027c9a
   1814c:	200009bc 	.word	0x200009bc

00018150 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   18150:	b570      	push	{r4, r5, r6, lr}
   18152:	4602      	mov	r2, r0
   18154:	460b      	mov	r3, r1
	__asm__ volatile(
   18156:	f04f 0140 	mov.w	r1, #64	; 0x40
   1815a:	f3ef 8511 	mrs	r5, BASEPRI
   1815e:	f381 8811 	msr	BASEPRI, r1
   18162:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   18166:	480c      	ldr	r0, [pc, #48]	; (18198 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   18168:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   1816a:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   1816e:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
   18172:	f385 8811 	msr	BASEPRI, r5
   18176:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   1817a:	b924      	cbnz	r4, 18186 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1817c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   18180:	2001      	movs	r0, #1
   18182:	f7ff bfbb 	b.w	180fc <bt_buf_get_rx>
   18186:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
   18188:	f104 0008 	add.w	r0, r4, #8
   1818c:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   1818e:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
   18190:	f005 f814 	bl	1d1bc <net_buf_simple_reserve>
}
   18194:	4620      	mov	r0, r4
   18196:	bd70      	pop	{r4, r5, r6, pc}
   18198:	200003c8 	.word	0x200003c8

0001819c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
   1819c:	b570      	push	{r4, r5, r6, lr}
   1819e:	4604      	mov	r4, r0
	switch (evt) {
   181a0:	2c0f      	cmp	r4, #15
{
   181a2:	460d      	mov	r5, r1
   181a4:	4610      	mov	r0, r2
   181a6:	4619      	mov	r1, r3
	switch (evt) {
   181a8:	d805      	bhi.n	181b6 <bt_buf_get_evt+0x1a>
   181aa:	2c0d      	cmp	r4, #13
   181ac:	d912      	bls.n	181d4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   181ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   181b2:	f7ff bfcd 	b.w	18150 <bt_buf_get_cmd_complete>
	switch (evt) {
   181b6:	2c13      	cmp	r4, #19
   181b8:	d10c      	bne.n	181d4 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
   181ba:	480b      	ldr	r0, [pc, #44]	; (181e8 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
   181bc:	f00e fa14 	bl	265e8 <net_buf_alloc_fixed>
			if (buf) {
   181c0:	4604      	mov	r4, r0
   181c2:	b128      	cbz	r0, 181d0 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
   181c4:	2100      	movs	r1, #0
   181c6:	3008      	adds	r0, #8
   181c8:	f004 fff8 	bl	1d1bc <net_buf_simple_reserve>
   181cc:	2301      	movs	r3, #1
   181ce:	7523      	strb	r3, [r4, #20]
}
   181d0:	4620      	mov	r0, r4
   181d2:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
   181d4:	4602      	mov	r2, r0
   181d6:	460b      	mov	r3, r1
		if (discardable) {
   181d8:	b10d      	cbz	r5, 181de <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
   181da:	4804      	ldr	r0, [pc, #16]	; (181ec <bt_buf_get_evt+0x50>)
   181dc:	e7ee      	b.n	181bc <bt_buf_get_evt+0x20>
}
   181de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   181e2:	2001      	movs	r0, #1
   181e4:	f7ff bf8a 	b.w	180fc <bt_buf_get_rx>
   181e8:	200009e8 	.word	0x200009e8
   181ec:	20000938 	.word	0x20000938

000181f0 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   181f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   181f2:	4e1c      	ldr	r6, [pc, #112]	; (18264 <bt_pub_key_gen+0x74>)
   181f4:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
   181f8:	f003 0306 	and.w	r3, r3, #6
   181fc:	2b06      	cmp	r3, #6
   181fe:	d007      	beq.n	18210 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   18200:	4819      	ldr	r0, [pc, #100]	; (18268 <bt_pub_key_gen+0x78>)
   18202:	2157      	movs	r1, #87	; 0x57
   18204:	f00a fd92 	bl	22d2c <printk>
		return -ENOTSUP;
   18208:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
   1820c:	4620      	mov	r0, r4
   1820e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
   18210:	4f16      	ldr	r7, [pc, #88]	; (1826c <bt_pub_key_gen+0x7c>)
   18212:	683b      	ldr	r3, [r7, #0]
   18214:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
   18216:	6038      	str	r0, [r7, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   18218:	2110      	movs	r1, #16
   1821a:	f106 0098 	add.w	r0, r6, #152	; 0x98
   1821e:	f00c fd9f 	bl	24d60 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18222:	f010 0510 	ands.w	r5, r0, #16
   18226:	d11a      	bne.n	1825e <bt_pub_key_gen+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18228:	f06f 0108 	mvn.w	r1, #8
   1822c:	f106 0098 	add.w	r0, r6, #152	; 0x98
   18230:	f00c fda8 	bl	24d84 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   18234:	462a      	mov	r2, r5
   18236:	4629      	mov	r1, r5
   18238:	f242 0025 	movw	r0, #8229	; 0x2025
   1823c:	f7fe fea0 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   18240:	4604      	mov	r4, r0
   18242:	2800      	cmp	r0, #0
   18244:	d0e2      	beq.n	1820c <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
   18246:	480a      	ldr	r0, [pc, #40]	; (18270 <bt_pub_key_gen+0x80>)
   18248:	2145      	movs	r1, #69	; 0x45
   1824a:	f00a fd6f 	bl	22d2c <printk>
   1824e:	f06f 0110 	mvn.w	r1, #16
   18252:	f106 0098 	add.w	r0, r6, #152	; 0x98
   18256:	f00c fd95 	bl	24d84 <atomic_and>
		pub_key_cb = NULL;
   1825a:	603d      	str	r5, [r7, #0]
		return err;
   1825c:	e7d6      	b.n	1820c <bt_pub_key_gen+0x1c>
		return 0;
   1825e:	2400      	movs	r4, #0
   18260:	e7d4      	b.n	1820c <bt_pub_key_gen+0x1c>
   18262:	bf00      	nop
   18264:	200003c8 	.word	0x200003c8
   18268:	0002903e 	.word	0x0002903e
   1826c:	2000292c 	.word	0x2000292c
   18270:	00029062 	.word	0x00029062

00018274 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
   18274:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18276:	4804      	ldr	r0, [pc, #16]	; (18288 <bt_pub_key_get+0x14>)
   18278:	f00c fd69 	bl	24d4e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1827c:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
   18280:	4802      	ldr	r0, [pc, #8]	; (1828c <bt_pub_key_get+0x18>)
   18282:	bf08      	it	eq
   18284:	2000      	moveq	r0, #0
   18286:	bd08      	pop	{r3, pc}
   18288:	20000460 	.word	0x20000460
   1828c:	200030ae 	.word	0x200030ae

00018290 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   18290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18292:	4d1a      	ldr	r5, [pc, #104]	; (182fc <bt_dh_key_gen+0x6c>)
   18294:	682b      	ldr	r3, [r5, #0]
{
   18296:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18298:	b113      	cbz	r3, 182a0 <bt_dh_key_gen+0x10>
		return -EBUSY;
   1829a:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
   1829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   182a0:	4817      	ldr	r0, [pc, #92]	; (18300 <bt_dh_key_gen+0x70>)
   182a2:	f00c fd54 	bl	24d4e <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   182a6:	06c2      	lsls	r2, r0, #27
   182a8:	f3c0 1700 	ubfx	r7, r0, #4, #1
   182ac:	d4f5      	bmi.n	1829a <bt_dh_key_gen+0xa>
   182ae:	4814      	ldr	r0, [pc, #80]	; (18300 <bt_dh_key_gen+0x70>)
   182b0:	f00c fd4d 	bl	24d4e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   182b4:	0703      	lsls	r3, r0, #28
   182b6:	d51d      	bpl.n	182f4 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
   182b8:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   182ba:	f242 0026 	movw	r0, #8230	; 0x2026
   182be:	2140      	movs	r1, #64	; 0x40
   182c0:	f7fe fd20 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   182c4:	4604      	mov	r4, r0
   182c6:	b918      	cbnz	r0, 182d0 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
   182c8:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
   182ca:	f06f 0036 	mvn.w	r0, #54	; 0x36
   182ce:	e7e6      	b.n	1829e <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
   182d0:	2140      	movs	r1, #64	; 0x40
   182d2:	3008      	adds	r0, #8
   182d4:	f005 f8da 	bl	1d48c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   182d8:	2240      	movs	r2, #64	; 0x40
   182da:	4631      	mov	r1, r6
   182dc:	f00c fbf2 	bl	24ac4 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   182e0:	463a      	mov	r2, r7
   182e2:	4621      	mov	r1, r4
   182e4:	f242 0026 	movw	r0, #8230	; 0x2026
   182e8:	f7fe fe4a 	bl	16f80 <bt_hci_cmd_send_sync>
	if (err) {
   182ec:	2800      	cmp	r0, #0
   182ee:	d0d6      	beq.n	1829e <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
   182f0:	602f      	str	r7, [r5, #0]
		return err;
   182f2:	e7d4      	b.n	1829e <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
   182f4:	f06f 0030 	mvn.w	r0, #48	; 0x30
   182f8:	e7d1      	b.n	1829e <bt_dh_key_gen+0xe>
   182fa:	bf00      	nop
   182fc:	20002928 	.word	0x20002928
   18300:	20000460 	.word	0x20000460

00018304 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   18304:	2300      	movs	r3, #0
	tx->user_data = NULL;
   18306:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1830a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   1830c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1830e:	4801      	ldr	r0, [pc, #4]	; (18314 <tx_free+0x10>)
   18310:	f00e bbf8 	b.w	26b04 <k_queue_append>
   18314:	200008f0 	.word	0x200008f0

00018318 <notify_connected>:
{
   18318:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   1831a:	4b09      	ldr	r3, [pc, #36]	; (18340 <notify_connected+0x28>)
   1831c:	681d      	ldr	r5, [r3, #0]
{
   1831e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18320:	7b21      	ldrb	r1, [r4, #12]
   18322:	b92d      	cbnz	r5, 18330 <notify_connected+0x18>
	if (!conn->err) {
   18324:	b951      	cbnz	r1, 1833c <notify_connected+0x24>
		bt_gatt_connected(conn);
   18326:	4620      	mov	r0, r4
}
   18328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   1832c:	f003 b900 	b.w	1b530 <bt_gatt_connected>
		if (cb->connected) {
   18330:	682b      	ldr	r3, [r5, #0]
   18332:	b10b      	cbz	r3, 18338 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   18334:	4620      	mov	r0, r4
   18336:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18338:	69ad      	ldr	r5, [r5, #24]
   1833a:	e7f1      	b.n	18320 <notify_connected+0x8>
}
   1833c:	bd38      	pop	{r3, r4, r5, pc}
   1833e:	bf00      	nop
   18340:	20002938 	.word	0x20002938

00018344 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   18344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18348:	694d      	ldr	r5, [r1, #20]
{
   1834a:	4604      	mov	r4, r0
   1834c:	460e      	mov	r6, r1
   1834e:	4691      	mov	r9, r2
   18350:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   18352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18356:	4849      	ldr	r0, [pc, #292]	; (1847c <send_frag+0x138>)
   18358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1835c:	f009 fb84 	bl	21a68 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   18360:	7b63      	ldrb	r3, [r4, #13]
   18362:	2b07      	cmp	r3, #7
   18364:	d14b      	bne.n	183fe <send_frag+0xba>
	__asm__ volatile(
   18366:	f04f 0340 	mov.w	r3, #64	; 0x40
   1836a:	f3ef 8211 	mrs	r2, BASEPRI
   1836e:	f383 8811 	msr	BASEPRI, r3
   18372:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   18376:	2d00      	cmp	r5, #0
   18378:	d053      	beq.n	18422 <send_frag+0xde>
	parent->next = child;
   1837a:	2300      	movs	r3, #0
   1837c:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1837e:	69a3      	ldr	r3, [r4, #24]
   18380:	2b00      	cmp	r3, #0
   18382:	d14b      	bne.n	1841c <send_frag+0xd8>
	list->head = node;
   18384:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   18388:	f382 8811 	msr	BASEPRI, r2
   1838c:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
   18390:	2104      	movs	r1, #4
   18392:	f106 0008 	add.w	r0, r6, #8
   18396:	f005 f821 	bl	1d3dc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1839a:	8823      	ldrh	r3, [r4, #0]
   1839c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   183a0:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   183a4:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   183a6:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   183aa:	3b04      	subs	r3, #4
   183ac:	8043      	strh	r3, [r0, #2]
   183ae:	2302      	movs	r3, #2
   183b0:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   183b2:	4630      	mov	r0, r6
   183b4:	f00c fe27 	bl	25006 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   183b8:	4602      	mov	r2, r0
   183ba:	2800      	cmp	r0, #0
   183bc:	d05b      	beq.n	18476 <send_frag+0x132>
		BT_ERR("Unable to send to driver (err %d)", err);
   183be:	4830      	ldr	r0, [pc, #192]	; (18480 <send_frag+0x13c>)
   183c0:	2145      	movs	r1, #69	; 0x45
   183c2:	f00a fcb3 	bl	22d2c <printk>
	__asm__ volatile(
   183c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   183ca:	f3ef 8911 	mrs	r9, BASEPRI
   183ce:	f383 8811 	msr	BASEPRI, r3
   183d2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   183d6:	2d00      	cmp	r5, #0
   183d8:	d039      	beq.n	1844e <send_frag+0x10a>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   183da:	6963      	ldr	r3, [r4, #20]
   183dc:	2200      	movs	r2, #0
   183de:	b153      	cbz	r3, 183f6 <send_frag+0xb2>
   183e0:	429d      	cmp	r5, r3
   183e2:	d131      	bne.n	18448 <send_frag+0x104>
Z_GENLIST_REMOVE(slist, snode)
   183e4:	682b      	ldr	r3, [r5, #0]
   183e6:	bb4a      	cbnz	r2, 1843c <send_frag+0xf8>
   183e8:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   183ea:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   183ec:	4295      	cmp	r5, r2
   183ee:	d100      	bne.n	183f2 <send_frag+0xae>
	list->tail = node;
   183f0:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   183f2:	2300      	movs	r3, #0
   183f4:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   183f6:	f389 8811 	msr	BASEPRI, r9
   183fa:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   183fe:	481f      	ldr	r0, [pc, #124]	; (1847c <send_frag+0x138>)
   18400:	f009 faf6 	bl	219f0 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   18404:	b115      	cbz	r5, 1840c <send_frag+0xc8>
		tx_free(tx);
   18406:	4628      	mov	r0, r5
   18408:	f7ff ff7c 	bl	18304 <tx_free>
	}

	if (always_consume) {
   1840c:	b11f      	cbz	r7, 18416 <send_frag+0xd2>
		net_buf_unref(buf);
   1840e:	4630      	mov	r0, r6
   18410:	f004 ff26 	bl	1d260 <net_buf_unref>
	}
	return false;
   18414:	2700      	movs	r7, #0
}
   18416:	4638      	mov	r0, r7
   18418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1841c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1841e:	61a5      	str	r5, [r4, #24]
}
   18420:	e7b2      	b.n	18388 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   18422:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   18424:	b133      	cbz	r3, 18434 <send_frag+0xf0>
			pending_no_cb = &tail_tx->pending_no_cb;
   18426:	f103 080c 	add.w	r8, r3, #12
   1842a:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1842c:	3301      	adds	r3, #1
   1842e:	f8c8 3000 	str.w	r3, [r8]
   18432:	e7a9      	b.n	18388 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   18434:	69e3      	ldr	r3, [r4, #28]
   18436:	f104 081c 	add.w	r8, r4, #28
   1843a:	e7f7      	b.n	1842c <send_frag+0xe8>
	parent->next = child;
   1843c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1843e:	69a3      	ldr	r3, [r4, #24]
   18440:	429d      	cmp	r5, r3
	list->tail = node;
   18442:	bf08      	it	eq
   18444:	61a2      	streq	r2, [r4, #24]
}
   18446:	e7d4      	b.n	183f2 <send_frag+0xae>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18448:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1844a:	681b      	ldr	r3, [r3, #0]
   1844c:	e7c7      	b.n	183de <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1844e:	f8d8 3000 	ldr.w	r3, [r8]
   18452:	b953      	cbnz	r3, 1846a <send_frag+0x126>
   18454:	490b      	ldr	r1, [pc, #44]	; (18484 <send_frag+0x140>)
   18456:	480c      	ldr	r0, [pc, #48]	; (18488 <send_frag+0x144>)
   18458:	f44f 6291 	mov.w	r2, #1160	; 0x488
   1845c:	f00a fc66 	bl	22d2c <printk>
   18460:	4808      	ldr	r0, [pc, #32]	; (18484 <send_frag+0x140>)
   18462:	f44f 6191 	mov.w	r1, #1160	; 0x488
   18466:	f00a fec4 	bl	231f2 <assert_post_action>
			(*pending_no_cb)--;
   1846a:	f8d8 3000 	ldr.w	r3, [r8]
   1846e:	3b01      	subs	r3, #1
   18470:	f8c8 3000 	str.w	r3, [r8]
   18474:	e7bf      	b.n	183f6 <send_frag+0xb2>
	return true;
   18476:	2701      	movs	r7, #1
   18478:	e7cd      	b.n	18416 <send_frag+0xd2>
   1847a:	bf00      	nop
   1847c:	20000498 	.word	0x20000498
   18480:	00028ae2 	.word	0x00028ae2
   18484:	000290c7 	.word	0x000290c7
   18488:	00027c9a 	.word	0x00027c9a

0001848c <bt_conn_get_pkts>:
}
   1848c:	4800      	ldr	r0, [pc, #0]	; (18490 <bt_conn_get_pkts+0x4>)
   1848e:	4770      	bx	lr
   18490:	20000498 	.word	0x20000498

00018494 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   18494:	1d03      	adds	r3, r0, #4
{
   18496:	b570      	push	{r4, r5, r6, lr}
   18498:	4604      	mov	r4, r0
   1849a:	4618      	mov	r0, r3
   1849c:	f00c fdf9 	bl	25092 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   184a0:	0582      	lsls	r2, r0, #22
   184a2:	d519      	bpl.n	184d8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   184a4:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   184a8:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   184ac:	4291      	cmp	r1, r2
   184ae:	d813      	bhi.n	184d8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   184b0:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   184b4:	4291      	cmp	r1, r2
   184b6:	d30f      	bcc.n	184d8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
   184b8:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   184bc:	4291      	cmp	r1, r2
   184be:	d10b      	bne.n	184d8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   184c0:	f3bf 8f5b 	dmb	ish
   184c4:	e853 2f00 	ldrex	r2, [r3]
   184c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   184cc:	e843 2100 	strex	r1, r2, [r3]
   184d0:	2900      	cmp	r1, #0
   184d2:	d1f7      	bne.n	184c4 <notify_le_param_updated+0x30>
   184d4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   184d8:	4b07      	ldr	r3, [pc, #28]	; (184f8 <notify_le_param_updated+0x64>)
   184da:	681d      	ldr	r5, [r3, #0]
   184dc:	b905      	cbnz	r5, 184e0 <notify_le_param_updated+0x4c>
}
   184de:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   184e0:	68ee      	ldr	r6, [r5, #12]
   184e2:	b13e      	cbz	r6, 184f4 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
   184e4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   184e8:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   184ec:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   184f0:	4620      	mov	r0, r4
   184f2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   184f4:	69ad      	ldr	r5, [r5, #24]
   184f6:	e7f1      	b.n	184dc <notify_le_param_updated+0x48>
   184f8:	20002938 	.word	0x20002938

000184fc <le_param_req>:
{
   184fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184fe:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   18500:	4608      	mov	r0, r1
{
   18502:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18504:	f00c fd41 	bl	24f8a <bt_le_conn_params_valid>
   18508:	4604      	mov	r4, r0
   1850a:	b910      	cbnz	r0, 18512 <le_param_req+0x16>
		return false;
   1850c:	2400      	movs	r4, #0
}
   1850e:	4620      	mov	r0, r4
   18510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   18512:	4b09      	ldr	r3, [pc, #36]	; (18538 <le_param_req+0x3c>)
   18514:	681e      	ldr	r6, [r3, #0]
   18516:	2e00      	cmp	r6, #0
   18518:	d0f9      	beq.n	1850e <le_param_req+0x12>
		if (!cb->le_param_req) {
   1851a:	68b3      	ldr	r3, [r6, #8]
   1851c:	b90b      	cbnz	r3, 18522 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1851e:	69b6      	ldr	r6, [r6, #24]
   18520:	e7f9      	b.n	18516 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   18522:	4629      	mov	r1, r5
   18524:	4638      	mov	r0, r7
   18526:	4798      	blx	r3
   18528:	2800      	cmp	r0, #0
   1852a:	d0ef      	beq.n	1850c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   1852c:	4628      	mov	r0, r5
   1852e:	f00c fd2c 	bl	24f8a <bt_le_conn_params_valid>
   18532:	2800      	cmp	r0, #0
   18534:	d1f3      	bne.n	1851e <le_param_req+0x22>
   18536:	e7e9      	b.n	1850c <le_param_req+0x10>
   18538:	20002938 	.word	0x20002938

0001853c <bt_conn_identity_resolved>:
{
   1853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1853e:	78c3      	ldrb	r3, [r0, #3]
{
   18540:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   18542:	b93b      	cbnz	r3, 18554 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   18544:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	for (cb = callback_list; cb; cb = cb->_next) {
   18548:	4b08      	ldr	r3, [pc, #32]	; (1856c <bt_conn_identity_resolved+0x30>)
   1854a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1854c:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   18550:	b91d      	cbnz	r5, 1855a <bt_conn_identity_resolved+0x1e>
}
   18552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   18554:	f100 0697 	add.w	r6, r0, #151	; 0x97
   18558:	e7f6      	b.n	18548 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   1855a:	692b      	ldr	r3, [r5, #16]
   1855c:	b11b      	cbz	r3, 18566 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1855e:	463a      	mov	r2, r7
   18560:	4631      	mov	r1, r6
   18562:	4620      	mov	r0, r4
   18564:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18566:	69ad      	ldr	r5, [r5, #24]
   18568:	e7f2      	b.n	18550 <bt_conn_identity_resolved+0x14>
   1856a:	bf00      	nop
   1856c:	20002938 	.word	0x20002938

00018570 <bt_conn_security_changed>:
{
   18570:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   18572:	7a43      	ldrb	r3, [r0, #9]
   18574:	7283      	strb	r3, [r0, #10]
{
   18576:	4604      	mov	r4, r0
   18578:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   1857a:	f00c fef7 	bl	2536c <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   1857e:	4b06      	ldr	r3, [pc, #24]	; (18598 <bt_conn_security_changed+0x28>)
   18580:	681d      	ldr	r5, [r3, #0]
   18582:	b905      	cbnz	r5, 18586 <bt_conn_security_changed+0x16>
}
   18584:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   18586:	696b      	ldr	r3, [r5, #20]
   18588:	b11b      	cbz	r3, 18592 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   1858a:	7a61      	ldrb	r1, [r4, #9]
   1858c:	4632      	mov	r2, r6
   1858e:	4620      	mov	r0, r4
   18590:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18592:	69ad      	ldr	r5, [r5, #24]
   18594:	e7f5      	b.n	18582 <bt_conn_security_changed+0x12>
   18596:	bf00      	nop
   18598:	20002938 	.word	0x20002938

0001859c <bt_conn_cb_register>:
	cb->_next = callback_list;
   1859c:	4b02      	ldr	r3, [pc, #8]	; (185a8 <bt_conn_cb_register+0xc>)
   1859e:	681a      	ldr	r2, [r3, #0]
   185a0:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   185a2:	6018      	str	r0, [r3, #0]
}
   185a4:	4770      	bx	lr
   185a6:	bf00      	nop
   185a8:	20002938 	.word	0x20002938

000185ac <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   185ac:	b570      	push	{r4, r5, r6, lr}
   185ae:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   185b0:	f100 0634 	add.w	r6, r0, #52	; 0x34
   185b4:	2200      	movs	r2, #0
   185b6:	2300      	movs	r3, #0
   185b8:	4630      	mov	r0, r6
   185ba:	f004 fdcf 	bl	1d15c <net_buf_get>
   185be:	4605      	mov	r5, r0
   185c0:	bb28      	cbnz	r0, 1860e <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   185c2:	6963      	ldr	r3, [r4, #20]
   185c4:	b153      	cbz	r3, 185dc <conn_cleanup+0x30>
   185c6:	4916      	ldr	r1, [pc, #88]	; (18620 <conn_cleanup+0x74>)
   185c8:	4816      	ldr	r0, [pc, #88]	; (18624 <conn_cleanup+0x78>)
   185ca:	f240 5202 	movw	r2, #1282	; 0x502
   185ce:	f00a fbad 	bl	22d2c <printk>
   185d2:	4813      	ldr	r0, [pc, #76]	; (18620 <conn_cleanup+0x74>)
   185d4:	f240 5102 	movw	r1, #1282	; 0x502
   185d8:	f00a fe0b 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   185dc:	69e3      	ldr	r3, [r4, #28]
   185de:	b153      	cbz	r3, 185f6 <conn_cleanup+0x4a>
   185e0:	490f      	ldr	r1, [pc, #60]	; (18620 <conn_cleanup+0x74>)
   185e2:	4810      	ldr	r0, [pc, #64]	; (18624 <conn_cleanup+0x78>)
   185e4:	f240 5203 	movw	r2, #1283	; 0x503
   185e8:	f00a fba0 	bl	22d2c <printk>
   185ec:	480c      	ldr	r0, [pc, #48]	; (18620 <conn_cleanup+0x74>)
   185ee:	f240 5103 	movw	r1, #1283	; 0x503
   185f2:	f00a fdfe 	bl	231f2 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   185f6:	4620      	mov	r0, r4
   185f8:	f00c fde0 	bl	251bc <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   185fc:	f104 0160 	add.w	r1, r4, #96	; 0x60
   18600:	4809      	ldr	r0, [pc, #36]	; (18628 <conn_cleanup+0x7c>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   18602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18606:	2200      	movs	r2, #0
   18608:	2300      	movs	r3, #0
   1860a:	f009 bc5f 	b.w	21ecc <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   1860e:	6968      	ldr	r0, [r5, #20]
   18610:	b108      	cbz	r0, 18616 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   18612:	f7ff fe77 	bl	18304 <tx_free>
		net_buf_unref(buf);
   18616:	4628      	mov	r0, r5
   18618:	f004 fe22 	bl	1d260 <net_buf_unref>
   1861c:	e7ca      	b.n	185b4 <conn_cleanup+0x8>
   1861e:	bf00      	nop
   18620:	000290c7 	.word	0x000290c7
   18624:	00027c9a 	.word	0x00027c9a
   18628:	200026c8 	.word	0x200026c8

0001862c <bt_conn_recv>:
{
   1862c:	b570      	push	{r4, r5, r6, lr}
   1862e:	4616      	mov	r6, r2
   18630:	4604      	mov	r4, r0
   18632:	460d      	mov	r5, r1
	tx_notify(conn);
   18634:	f00c fd40 	bl	250b8 <tx_notify>
	switch (flags) {
   18638:	2e01      	cmp	r6, #1
   1863a:	d022      	beq.n	18682 <bt_conn_recv+0x56>
   1863c:	2e02      	cmp	r6, #2
   1863e:	d143      	bne.n	186c8 <bt_conn_recv+0x9c>
		if (conn->rx) {
   18640:	6923      	ldr	r3, [r4, #16]
   18642:	b133      	cbz	r3, 18652 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   18644:	4827      	ldr	r0, [pc, #156]	; (186e4 <bt_conn_recv+0xb8>)
   18646:	2145      	movs	r1, #69	; 0x45
   18648:	f00a fb70 	bl	22d2c <printk>
			bt_conn_reset_rx_state(conn);
   1864c:	4620      	mov	r0, r4
   1864e:	f00c fdb5 	bl	251bc <bt_conn_reset_rx_state>
		conn->rx = buf;
   18652:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   18654:	6921      	ldr	r1, [r4, #16]
   18656:	898a      	ldrh	r2, [r1, #12]
   18658:	2a01      	cmp	r2, #1
   1865a:	d942      	bls.n	186e2 <bt_conn_recv+0xb6>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1865c:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1865e:	7845      	ldrb	r5, [r0, #1]
   18660:	7803      	ldrb	r3, [r0, #0]
   18662:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   18666:	3304      	adds	r3, #4
   18668:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1866a:	429a      	cmp	r2, r3
   1866c:	d339      	bcc.n	186e2 <bt_conn_recv+0xb6>
	if (conn->rx->len > acl_total_len) {
   1866e:	d931      	bls.n	186d4 <bt_conn_recv+0xa8>
		BT_ERR("ACL len mismatch (%u > %u)",
   18670:	481d      	ldr	r0, [pc, #116]	; (186e8 <bt_conn_recv+0xbc>)
   18672:	2145      	movs	r1, #69	; 0x45
   18674:	f00a fb5a 	bl	22d2c <printk>
		bt_conn_reset_rx_state(conn);
   18678:	4620      	mov	r0, r4
}
   1867a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1867e:	f00c bd9d 	b.w	251bc <bt_conn_reset_rx_state>
		if (!conn->rx) {
   18682:	6920      	ldr	r0, [r4, #16]
   18684:	b938      	cbnz	r0, 18696 <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
   18686:	4819      	ldr	r0, [pc, #100]	; (186ec <bt_conn_recv+0xc0>)
   18688:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Not enough buffer space for L2CAP data");
   1868a:	f00a fb4f 	bl	22d2c <printk>
			bt_conn_reset_rx_state(conn);
   1868e:	4620      	mov	r0, r4
   18690:	f00c fd94 	bl	251bc <bt_conn_reset_rx_state>
   18694:	e001      	b.n	1869a <bt_conn_recv+0x6e>
		if (!buf->len) {
   18696:	89ae      	ldrh	r6, [r5, #12]
   18698:	b926      	cbnz	r6, 186a4 <bt_conn_recv+0x78>
			net_buf_unref(buf);
   1869a:	4628      	mov	r0, r5
}
   1869c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   186a0:	f004 bdde 	b.w	1d260 <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   186a4:	3008      	adds	r0, #8
   186a6:	f00d ffb0 	bl	2660a <net_buf_simple_tailroom>
   186aa:	4286      	cmp	r6, r0
   186ac:	d902      	bls.n	186b4 <bt_conn_recv+0x88>
			BT_ERR("Not enough buffer space for L2CAP data");
   186ae:	4810      	ldr	r0, [pc, #64]	; (186f0 <bt_conn_recv+0xc4>)
   186b0:	2145      	movs	r1, #69	; 0x45
   186b2:	e7ea      	b.n	1868a <bt_conn_recv+0x5e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   186b4:	6920      	ldr	r0, [r4, #16]
   186b6:	89aa      	ldrh	r2, [r5, #12]
   186b8:	68a9      	ldr	r1, [r5, #8]
   186ba:	3008      	adds	r0, #8
   186bc:	f00d ffad 	bl	2661a <net_buf_simple_add_mem>
		net_buf_unref(buf);
   186c0:	4628      	mov	r0, r5
   186c2:	f004 fdcd 	bl	1d260 <net_buf_unref>
		break;
   186c6:	e7c5      	b.n	18654 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   186c8:	480a      	ldr	r0, [pc, #40]	; (186f4 <bt_conn_recv+0xc8>)
   186ca:	4632      	mov	r2, r6
   186cc:	2145      	movs	r1, #69	; 0x45
   186ce:	f00a fb2d 	bl	22d2c <printk>
		bt_conn_reset_rx_state(conn);
   186d2:	e7dc      	b.n	1868e <bt_conn_recv+0x62>
	conn->rx = NULL;
   186d4:	2300      	movs	r3, #0
   186d6:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   186d8:	4620      	mov	r0, r4
}
   186da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   186de:	f000 bcf7 	b.w	190d0 <bt_l2cap_recv>
}
   186e2:	bd70      	pop	{r4, r5, r6, pc}
   186e4:	000290f7 	.word	0x000290f7
   186e8:	0002918b 	.word	0x0002918b
   186ec:	00029119 	.word	0x00029119
   186f0:	0002913c 	.word	0x0002913c
   186f4:	00029168 	.word	0x00029168

000186f8 <bt_conn_send_cb>:
{
   186f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186fc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   186fe:	7b43      	ldrb	r3, [r0, #13]
   18700:	2b07      	cmp	r3, #7
{
   18702:	4606      	mov	r6, r0
   18704:	460d      	mov	r5, r1
   18706:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   18708:	d009      	beq.n	1871e <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   1870a:	4821      	ldr	r0, [pc, #132]	; (18790 <bt_conn_send_cb+0x98>)
   1870c:	2145      	movs	r1, #69	; 0x45
   1870e:	f00a fb0d 	bl	22d2c <printk>
		net_buf_unref(buf);
   18712:	4628      	mov	r0, r5
   18714:	f004 fda4 	bl	1d260 <net_buf_unref>
			return -ENOTCONN;
   18718:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1871c:	e01a      	b.n	18754 <bt_conn_send_cb+0x5c>
	if (cb) {
   1871e:	2a00      	cmp	r2, #0
   18720:	d034      	beq.n	1878c <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   18722:	f009 f95f 	bl	219e4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18726:	4b1b      	ldr	r3, [pc, #108]	; (18794 <bt_conn_send_cb+0x9c>)
   18728:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1872a:	481b      	ldr	r0, [pc, #108]	; (18798 <bt_conn_send_cb+0xa0>)
   1872c:	bf07      	ittee	eq
   1872e:	2200      	moveq	r2, #0
   18730:	2300      	moveq	r3, #0
   18732:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   18736:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1873a:	f008 f8d7 	bl	208ec <z_impl_k_queue_get>
   1873e:	4604      	mov	r4, r0
		if (!tx) {
   18740:	b950      	cbnz	r0, 18758 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   18742:	4816      	ldr	r0, [pc, #88]	; (1879c <bt_conn_send_cb+0xa4>)
   18744:	2145      	movs	r1, #69	; 0x45
   18746:	f00a faf1 	bl	22d2c <printk>
			net_buf_unref(buf);
   1874a:	4628      	mov	r0, r5
   1874c:	f004 fd88 	bl	1d260 <net_buf_unref>
			return -ENOBUFS;
   18750:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   18754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   18758:	7b73      	ldrb	r3, [r6, #13]
   1875a:	2b07      	cmp	r3, #7
   1875c:	d00a      	beq.n	18774 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   1875e:	2157      	movs	r1, #87	; 0x57
   18760:	480f      	ldr	r0, [pc, #60]	; (187a0 <bt_conn_send_cb+0xa8>)
   18762:	f00a fae3 	bl	22d2c <printk>
			net_buf_unref(buf);
   18766:	4628      	mov	r0, r5
   18768:	f004 fd7a 	bl	1d260 <net_buf_unref>
			tx_free(tx);
   1876c:	4620      	mov	r0, r4
   1876e:	f7ff fdc9 	bl	18304 <tx_free>
   18772:	e7d1      	b.n	18718 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   18774:	2300      	movs	r3, #0
		tx->user_data = user_data;
   18776:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1877a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1877c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1877e:	f106 0034 	add.w	r0, r6, #52	; 0x34
   18782:	4629      	mov	r1, r5
   18784:	f004 fd3e 	bl	1d204 <net_buf_put>
	return 0;
   18788:	2000      	movs	r0, #0
   1878a:	e7e3      	b.n	18754 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   1878c:	614a      	str	r2, [r1, #20]
   1878e:	e7f6      	b.n	1877e <bt_conn_send_cb+0x86>
   18790:	000291ab 	.word	0x000291ab
   18794:	200026e8 	.word	0x200026e8
   18798:	200008f0 	.word	0x200008f0
   1879c:	000291bf 	.word	0x000291bf
   187a0:	000291e2 	.word	0x000291e2

000187a4 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   187a4:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   187a6:	4b1b      	ldr	r3, [pc, #108]	; (18814 <bt_conn_prepare_events+0x70>)
   187a8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   187aa:	2101      	movs	r1, #1
{
   187ac:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   187ae:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   187b0:	f00a f8b2 	bl	22918 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   187b4:	4b18      	ldr	r3, [pc, #96]	; (18818 <bt_conn_prepare_events+0x74>)
   187b6:	f103 0058 	add.w	r0, r3, #88	; 0x58
   187ba:	f00c fc6a 	bl	25092 <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   187be:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   187c2:	4619      	mov	r1, r3
   187c4:	b908      	cbnz	r0, 187ca <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   187c6:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   187c8:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   187ca:	7b5a      	ldrb	r2, [r3, #13]
   187cc:	b99a      	cbnz	r2, 187f6 <bt_conn_prepare_events+0x52>
   187ce:	f3bf 8f5b 	dmb	ish
   187d2:	1d1a      	adds	r2, r3, #4
   187d4:	e852 0f00 	ldrex	r0, [r2]
   187d8:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   187dc:	e842 ce00 	strex	lr, ip, [r2]
   187e0:	f1be 0f00 	cmp.w	lr, #0
   187e4:	d1f6      	bne.n	187d4 <bt_conn_prepare_events+0x30>
   187e6:	f3bf 8f5b 	dmb	ish
   187ea:	0642      	lsls	r2, r0, #25
   187ec:	d503      	bpl.n	187f6 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   187ee:	4618      	mov	r0, r3
   187f0:	f7ff fedc 	bl	185ac <conn_cleanup>
   187f4:	e7e7      	b.n	187c6 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   187f6:	7b4b      	ldrb	r3, [r1, #13]
   187f8:	2b07      	cmp	r3, #7
   187fa:	d1e4      	bne.n	187c6 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   187fc:	4b07      	ldr	r3, [pc, #28]	; (1881c <bt_conn_prepare_events+0x78>)
   187fe:	4628      	mov	r0, r5
   18800:	2200      	movs	r2, #0
   18802:	2104      	movs	r1, #4
   18804:	f00a f888 	bl	22918 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   18808:	2301      	movs	r3, #1
   1880a:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1880e:	2002      	movs	r0, #2
	return ev_count;
   18810:	e7da      	b.n	187c8 <bt_conn_prepare_events+0x24>
   18812:	bf00      	nop
   18814:	200005f4 	.word	0x200005f4
   18818:	20002070 	.word	0x20002070
   1881c:	200020a4 	.word	0x200020a4

00018820 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   18820:	b570      	push	{r4, r5, r6, lr}
   18822:	4606      	mov	r6, r0
   18824:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18826:	480f      	ldr	r0, [pc, #60]	; (18864 <bt_conn_add_le+0x44>)
   18828:	2101      	movs	r1, #1
   1882a:	f00c fc6b 	bl	25104 <bt_conn_new>
	if (!conn) {
   1882e:	4604      	mov	r4, r0
   18830:	b1b0      	cbz	r0, 18860 <bt_conn_add_le+0x40>
	k_delayed_work_init(&conn->deferred_work, deferred_work);
   18832:	490d      	ldr	r1, [pc, #52]	; (18868 <bt_conn_add_le+0x48>)
   18834:	3060      	adds	r0, #96	; 0x60
   18836:	f00e fa44 	bl	26cc2 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1883a:	4a0c      	ldr	r2, [pc, #48]	; (1886c <bt_conn_add_le+0x4c>)

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   1883c:	7226      	strb	r6, [r4, #8]
   1883e:	2300      	movs	r3, #0
   18840:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   18844:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   18846:	2207      	movs	r2, #7
   18848:	4629      	mov	r1, r5
   1884a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1884e:	f00c f939 	bl	24ac4 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   18852:	2301      	movs	r3, #1
   18854:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   18856:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18858:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1885a:	4b05      	ldr	r3, [pc, #20]	; (18870 <bt_conn_add_le+0x50>)
   1885c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18860:	4620      	mov	r0, r4
   18862:	bd70      	pop	{r4, r5, r6, pc}
   18864:	20002070 	.word	0x20002070
   18868:	00018bb5 	.word	0x00018bb5
   1886c:	000250ff 	.word	0x000250ff
   18870:	00280018 	.word	0x00280018

00018874 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   18874:	4602      	mov	r2, r0
   18876:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   18878:	2101      	movs	r1, #1
   1887a:	4803      	ldr	r0, [pc, #12]	; (18888 <bt_conn_lookup_handle+0x14>)
   1887c:	f00c fca7 	bl	251ce <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
   18880:	2800      	cmp	r0, #0
   18882:	bf38      	it	cc
   18884:	2000      	movcc	r0, #0
   18886:	bd08      	pop	{r3, pc}
   18888:	20002070 	.word	0x20002070

0001888c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1888c:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		if (!atomic_get(&acl_conns[i].ref)) {
   1888e:	4c0c      	ldr	r4, [pc, #48]	; (188c0 <bt_conn_lookup_addr_le+0x34>)
{
   18890:	4603      	mov	r3, r0
		if (!atomic_get(&acl_conns[i].ref)) {
   18892:	f104 0058 	add.w	r0, r4, #88	; 0x58
{
   18896:	460a      	mov	r2, r1
		if (!atomic_get(&acl_conns[i].ref)) {
   18898:	f00c fbfb 	bl	25092 <atomic_get>
   1889c:	b908      	cbnz	r0, 188a2 <bt_conn_lookup_addr_le+0x16>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
   1889e:	2000      	movs	r0, #0
}
   188a0:	bd10      	pop	{r4, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
   188a2:	78a1      	ldrb	r1, [r4, #2]
   188a4:	2901      	cmp	r1, #1
   188a6:	d1fa      	bne.n	1889e <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   188a8:	4619      	mov	r1, r3
   188aa:	4620      	mov	r0, r4
   188ac:	f00c fcb0 	bl	25210 <bt_conn_is_peer_addr_le>
   188b0:	2800      	cmp	r0, #0
   188b2:	d0f4      	beq.n	1889e <bt_conn_lookup_addr_le+0x12>
#endif /* defined(CONFIG_BT_ISO) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
   188b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   188b8:	f00c fbf1 	bl	2509e <atomic_inc>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   188bc:	4620      	mov	r0, r4
			return bt_conn_ref(&acl_conns[i]);
   188be:	e7ef      	b.n	188a0 <bt_conn_lookup_addr_le+0x14>
   188c0:	20002070 	.word	0x20002070

000188c4 <bt_conn_lookup_state_le>:
{
   188c4:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
   188c6:	4c10      	ldr	r4, [pc, #64]	; (18908 <bt_conn_lookup_state_le+0x44>)
{
   188c8:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
   188ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
{
   188ce:	4616      	mov	r6, r2
		if (!atomic_get(&acl_conns[i].ref)) {
   188d0:	f00c fbdf 	bl	25092 <atomic_get>
   188d4:	b908      	cbnz	r0, 188da <bt_conn_lookup_state_le+0x16>
	return NULL;
   188d6:	2000      	movs	r0, #0
}
   188d8:	bd70      	pop	{r4, r5, r6, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
   188da:	78a3      	ldrb	r3, [r4, #2]
   188dc:	2b01      	cmp	r3, #1
   188de:	d1fa      	bne.n	188d6 <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   188e0:	b951      	cbnz	r1, 188f8 <bt_conn_lookup_state_le+0x34>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
   188e2:	7b63      	ldrb	r3, [r4, #13]
   188e4:	42b3      	cmp	r3, r6
   188e6:	d1f6      	bne.n	188d6 <bt_conn_lookup_state_le+0x12>
   188e8:	7a23      	ldrb	r3, [r4, #8]
   188ea:	42ab      	cmp	r3, r5
   188ec:	d1f3      	bne.n	188d6 <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
   188ee:	4807      	ldr	r0, [pc, #28]	; (1890c <bt_conn_lookup_state_le+0x48>)
   188f0:	f00c fbd5 	bl	2509e <atomic_inc>
			return bt_conn_ref(&acl_conns[i]);
   188f4:	4804      	ldr	r0, [pc, #16]	; (18908 <bt_conn_lookup_state_le+0x44>)
   188f6:	e7ef      	b.n	188d8 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
   188f8:	460a      	mov	r2, r1
   188fa:	4620      	mov	r0, r4
   188fc:	4629      	mov	r1, r5
   188fe:	f00c fc87 	bl	25210 <bt_conn_is_peer_addr_le>
   18902:	2800      	cmp	r0, #0
   18904:	d1ed      	bne.n	188e2 <bt_conn_lookup_state_le+0x1e>
   18906:	e7e6      	b.n	188d6 <bt_conn_lookup_state_le+0x12>
   18908:	20002070 	.word	0x20002070
   1890c:	200020c8 	.word	0x200020c8

00018910 <bt_conn_exists_le>:
{
   18910:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   18912:	f7ff ffbb 	bl	1888c <bt_conn_lookup_addr_le>
	if (conn) {
   18916:	4604      	mov	r4, r0
   18918:	b170      	cbz	r0, 18938 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   1891a:	7b43      	ldrb	r3, [r0, #13]
   1891c:	4807      	ldr	r0, [pc, #28]	; (1893c <bt_conn_exists_le+0x2c>)
   1891e:	2b08      	cmp	r3, #8
   18920:	bf96      	itet	ls
   18922:	4a07      	ldrls	r2, [pc, #28]	; (18940 <bt_conn_exists_le+0x30>)
   18924:	4a07      	ldrhi	r2, [pc, #28]	; (18944 <bt_conn_exists_le+0x34>)
   18926:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1892a:	2157      	movs	r1, #87	; 0x57
   1892c:	f00a f9fe 	bl	22d2c <printk>
		bt_conn_unref(conn);
   18930:	4620      	mov	r0, r4
   18932:	f00c fc8d 	bl	25250 <bt_conn_unref>
		return true;
   18936:	2001      	movs	r0, #1
}
   18938:	bd10      	pop	{r4, pc}
   1893a:	bf00      	nop
   1893c:	00029217 	.word	0x00029217
   18940:	000275d4 	.word	0x000275d4
   18944:	0002920d 	.word	0x0002920d

00018948 <bt_conn_set_state>:
{
   18948:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   1894a:	7b46      	ldrb	r6, [r0, #13]
   1894c:	428e      	cmp	r6, r1
{
   1894e:	4604      	mov	r4, r0
   18950:	460d      	mov	r5, r1
	if (conn->state == state) {
   18952:	d10b      	bne.n	1896c <bt_conn_set_state+0x24>
	switch (state) {
   18954:	2e08      	cmp	r6, #8
   18956:	bf96      	itet	ls
   18958:	4b5e      	ldrls	r3, [pc, #376]	; (18ad4 <bt_conn_set_state+0x18c>)
	if (conn->state == state) {
   1895a:	4a5f      	ldrhi	r2, [pc, #380]	; (18ad8 <bt_conn_set_state+0x190>)
   1895c:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   18960:	485e      	ldr	r0, [pc, #376]	; (18adc <bt_conn_set_state+0x194>)
   18962:	2157      	movs	r1, #87	; 0x57
}
   18964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   18968:	f00a b9e0 	b.w	22d2c <printk>
	conn->state = state;
   1896c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1896e:	b916      	cbnz	r6, 18976 <bt_conn_set_state+0x2e>
	atomic_val_t old = atomic_inc(&conn->ref);
   18970:	3058      	adds	r0, #88	; 0x58
   18972:	f00c fb94 	bl	2509e <atomic_inc>
	switch (conn->state) {
   18976:	7b63      	ldrb	r3, [r4, #13]
   18978:	2b08      	cmp	r3, #8
   1897a:	f200 80a6 	bhi.w	18aca <bt_conn_set_state+0x182>
   1897e:	e8df f003 	tbb	[pc, r3]
   18982:	053e      	.short	0x053e
   18984:	a8a8a8a8 	.word	0xa8a8a8a8
   18988:	1ca8      	.short	0x1ca8
   1898a:	a8          	.byte	0xa8
   1898b:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   1898c:	4d54      	ldr	r5, [pc, #336]	; (18ae0 <bt_conn_set_state+0x198>)
		tx->pending_no_cb = 0U;
   1898e:	2600      	movs	r6, #0
	__asm__ volatile(
   18990:	f04f 0340 	mov.w	r3, #64	; 0x40
   18994:	f3ef 8211 	mrs	r2, BASEPRI
   18998:	f383 8811 	msr	BASEPRI, r3
   1899c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   189a0:	69e3      	ldr	r3, [r4, #28]
   189a2:	2b00      	cmp	r3, #0
   189a4:	d072      	beq.n	18a8c <bt_conn_set_state+0x144>
			conn->pending_no_cb--;
   189a6:	3b01      	subs	r3, #1
   189a8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   189aa:	f382 8811 	msr	BASEPRI, r2
   189ae:	f3bf 8f6f 	isb	sy
   189b2:	4628      	mov	r0, r5
   189b4:	f009 f81c 	bl	219f0 <z_impl_k_sem_give>
}
   189b8:	e7ea      	b.n	18990 <bt_conn_set_state+0x48>
		if (conn->type == BT_CONN_TYPE_SCO) {
   189ba:	78a3      	ldrb	r3, [r4, #2]
   189bc:	2b04      	cmp	r3, #4
   189be:	f000 8088 	beq.w	18ad2 <bt_conn_set_state+0x18a>
	z_impl_k_queue_init(queue);
   189c2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   189c6:	f00e f890 	bl	26aea <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   189ca:	2100      	movs	r1, #0
   189cc:	4845      	ldr	r0, [pc, #276]	; (18ae4 <bt_conn_set_state+0x19c>)
   189ce:	f00a f8af 	bl	22b30 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   189d2:	2300      	movs	r3, #0
	list->tail = NULL;
   189d4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
   189d8:	4620      	mov	r0, r4
   189da:	f000 fabb 	bl	18f54 <bt_l2cap_connected>
		notify_connected(conn);
   189de:	4620      	mov	r0, r4
   189e0:	f7ff fc9a 	bl	18318 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   189e4:	78e3      	ldrb	r3, [r4, #3]
   189e6:	2b01      	cmp	r3, #1
   189e8:	d173      	bne.n	18ad2 <bt_conn_set_state+0x18a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   189ea:	f104 0160 	add.w	r1, r4, #96	; 0x60
   189ee:	483e      	ldr	r0, [pc, #248]	; (18ae8 <bt_conn_set_state+0x1a0>)
}
   189f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   189f4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   189f8:	2300      	movs	r3, #0
   189fa:	f009 ba67 	b.w	21ecc <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   189fe:	78a3      	ldrb	r3, [r4, #2]
   18a00:	2b04      	cmp	r3, #4
   18a02:	d104      	bne.n	18a0e <bt_conn_set_state+0xc6>
			bt_conn_unref(conn);
   18a04:	4620      	mov	r0, r4
}
   18a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   18a0a:	f00c bc21 	b.w	25250 <bt_conn_unref>
		switch (old_state) {
   18a0e:	2e08      	cmp	r6, #8
   18a10:	d85f      	bhi.n	18ad2 <bt_conn_set_state+0x18a>
   18a12:	a301      	add	r3, pc, #4	; (adr r3, 18a18 <bt_conn_set_state+0xd0>)
   18a14:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18a18:	00018a85 	.word	0x00018a85
   18a1c:	00018a3d 	.word	0x00018a3d
   18a20:	00018a77 	.word	0x00018a77
   18a24:	00018a05 	.word	0x00018a05
   18a28:	00018a05 	.word	0x00018a05
   18a2c:	00018a77 	.word	0x00018a77
   18a30:	00018a77 	.word	0x00018a77
   18a34:	00018a85 	.word	0x00018a85
   18a38:	00018a85 	.word	0x00018a85
			tx_notify(conn);
   18a3c:	4620      	mov	r0, r4
   18a3e:	f00c fb3b 	bl	250b8 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   18a42:	78a3      	ldrb	r3, [r4, #2]
   18a44:	2b01      	cmp	r3, #1
   18a46:	d103      	bne.n	18a50 <bt_conn_set_state+0x108>
				k_delayed_work_cancel(&conn->deferred_work);
   18a48:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18a4c:	f009 fab0 	bl	21fb0 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18a50:	f3bf 8f5b 	dmb	ish
   18a54:	3404      	adds	r4, #4
   18a56:	e854 3f00 	ldrex	r3, [r4]
   18a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18a5e:	e844 3200 	strex	r2, r3, [r4]
   18a62:	2a00      	cmp	r2, #0
   18a64:	d1f7      	bne.n	18a56 <bt_conn_set_state+0x10e>
   18a66:	f3bf 8f5b 	dmb	ish
   18a6a:	481e      	ldr	r0, [pc, #120]	; (18ae4 <bt_conn_set_state+0x19c>)
}
   18a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18a70:	2100      	movs	r1, #0
   18a72:	f00a b85d 	b.w	22b30 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   18a76:	7b23      	ldrb	r3, [r4, #12]
   18a78:	2b00      	cmp	r3, #0
   18a7a:	d0c3      	beq.n	18a04 <bt_conn_set_state+0xbc>
				notify_connected(conn);
   18a7c:	4620      	mov	r0, r4
   18a7e:	f7ff fc4b 	bl	18318 <notify_connected>
   18a82:	e7bf      	b.n	18a04 <bt_conn_set_state+0xbc>
			BT_WARN("Invalid (%u) old state", state);
   18a84:	4819      	ldr	r0, [pc, #100]	; (18aec <bt_conn_set_state+0x1a4>)
   18a86:	462a      	mov	r2, r5
   18a88:	2157      	movs	r1, #87	; 0x57
   18a8a:	e76b      	b.n	18964 <bt_conn_set_state+0x1c>
Z_GENLIST_IS_EMPTY(slist)
   18a8c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   18a8e:	b128      	cbz	r0, 18a9c <bt_conn_set_state+0x154>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18a90:	69a1      	ldr	r1, [r4, #24]
   18a92:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   18a94:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18a96:	4288      	cmp	r0, r1
	list->tail = node;
   18a98:	bf08      	it	eq
   18a9a:	61a3      	streq	r3, [r4, #24]
   18a9c:	f382 8811 	msr	BASEPRI, r2
   18aa0:	f3bf 8f6f 	isb	sy
		if (!node) {
   18aa4:	b1a8      	cbz	r0, 18ad2 <bt_conn_set_state+0x18a>
	__asm__ volatile(
   18aa6:	f04f 0240 	mov.w	r2, #64	; 0x40
   18aaa:	f3ef 8311 	mrs	r3, BASEPRI
   18aae:	f382 8811 	msr	BASEPRI, r2
   18ab2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   18ab6:	68c2      	ldr	r2, [r0, #12]
   18ab8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   18aba:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   18abc:	f383 8811 	msr	BASEPRI, r3
   18ac0:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   18ac4:	f7ff fc1e 	bl	18304 <tx_free>
   18ac8:	e773      	b.n	189b2 <bt_conn_set_state+0x6a>
		BT_WARN("no valid (%u) state was set", state);
   18aca:	4809      	ldr	r0, [pc, #36]	; (18af0 <bt_conn_set_state+0x1a8>)
   18acc:	462a      	mov	r2, r5
   18ace:	2157      	movs	r1, #87	; 0x57
   18ad0:	e748      	b.n	18964 <bt_conn_set_state+0x1c>
}
   18ad2:	bd70      	pop	{r4, r5, r6, pc}
   18ad4:	000275d4 	.word	0x000275d4
   18ad8:	0002920d 	.word	0x0002920d
   18adc:	0002923f 	.word	0x0002923f
   18ae0:	20000498 	.word	0x20000498
   18ae4:	200005f4 	.word	0x200005f4
   18ae8:	200026c8 	.word	0x200026c8
   18aec:	00029255 	.word	0x00029255
   18af0:	00029271 	.word	0x00029271

00018af4 <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
   18af4:	b538      	push	{r3, r4, r5, lr}
   18af6:	7b43      	ldrb	r3, [r0, #13]
   18af8:	3b02      	subs	r3, #2
   18afa:	4604      	mov	r4, r0
   18afc:	460d      	mov	r5, r1
   18afe:	2b06      	cmp	r3, #6
   18b00:	d805      	bhi.n	18b0e <bt_conn_disconnect+0x1a>
   18b02:	e8df f003 	tbb	[pc, r3]
   18b06:	0408      	.short	0x0408
   18b08:	1b0c0e04 	.word	0x1b0c0e04
   18b0c:	0c          	.byte	0x0c
   18b0d:	00          	.byte	0x00
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
   18b0e:	f06f 0538 	mvn.w	r5, #56	; 0x38
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
   18b12:	4628      	mov	r0, r5
   18b14:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   18b16:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18b18:	2100      	movs	r1, #0
   18b1a:	f7ff ff15 	bl	18948 <bt_conn_set_state>
		return 0;
   18b1e:	2500      	movs	r5, #0
   18b20:	e7f7      	b.n	18b12 <bt_conn_disconnect+0x1e>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   18b22:	480c      	ldr	r0, [pc, #48]	; (18b54 <bt_conn_disconnect+0x60>)
   18b24:	2157      	movs	r1, #87	; 0x57
   18b26:	f00a f901 	bl	22d2c <printk>
		conn->err = reason;
   18b2a:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18b2c:	4620      	mov	r0, r4
   18b2e:	2100      	movs	r1, #0
   18b30:	f7ff ff0a 	bl	18948 <bt_conn_set_state>
}
   18b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   18b38:	f7ff b992 	b.w	17e60 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
   18b3c:	8800      	ldrh	r0, [r0, #0]
   18b3e:	f00c f9c7 	bl	24ed0 <bt_hci_disconnect>
	if (err) {
   18b42:	4605      	mov	r5, r0
   18b44:	2800      	cmp	r0, #0
   18b46:	d1e4      	bne.n	18b12 <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   18b48:	2108      	movs	r1, #8
   18b4a:	4620      	mov	r0, r4
   18b4c:	f7ff fefc 	bl	18948 <bt_conn_set_state>
	return 0;
   18b50:	e7df      	b.n	18b12 <bt_conn_disconnect+0x1e>
   18b52:	bf00      	nop
   18b54:	00029292 	.word	0x00029292

00018b58 <send_conn_le_param_update>:
{
   18b58:	b538      	push	{r3, r4, r5, lr}
   18b5a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   18b5c:	4608      	mov	r0, r1
{
   18b5e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18b60:	f00c fa13 	bl	24f8a <bt_le_conn_params_valid>
   18b64:	b308      	cbz	r0, 18baa <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18b66:	4b12      	ldr	r3, [pc, #72]	; (18bb0 <send_conn_le_param_update+0x58>)
   18b68:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   18b6c:	0799      	lsls	r1, r3, #30
   18b6e:	d407      	bmi.n	18b80 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   18b70:	78e3      	ldrb	r3, [r4, #3]
   18b72:	b173      	cbz	r3, 18b92 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   18b74:	4629      	mov	r1, r5
   18b76:	4620      	mov	r0, r4
}
   18b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18b7c:	f000 bad0 	b.w	19120 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18b80:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   18b84:	079a      	lsls	r2, r3, #30
   18b86:	d5f3      	bpl.n	18b70 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18b88:	1d20      	adds	r0, r4, #4
   18b8a:	f00c fa82 	bl	25092 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18b8e:	0543      	lsls	r3, r0, #21
   18b90:	d4ee      	bmi.n	18b70 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   18b92:	4629      	mov	r1, r5
   18b94:	4620      	mov	r0, r4
   18b96:	f00c fb72 	bl	2527e <bt_conn_le_conn_update>
		if (rc == 0) {
   18b9a:	b928      	cbnz	r0, 18ba8 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   18b9c:	88ab      	ldrh	r3, [r5, #4]
   18b9e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   18ba2:	88eb      	ldrh	r3, [r5, #6]
   18ba4:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   18ba8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18baa:	f06f 0015 	mvn.w	r0, #21
   18bae:	e7fb      	b.n	18ba8 <send_conn_le_param_update+0x50>
   18bb0:	200003c8 	.word	0x200003c8

00018bb4 <deferred_work>:
{
   18bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   18bb6:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   18bba:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   18bbc:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   18bc0:	b993      	cbnz	r3, 18be8 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   18bc2:	4630      	mov	r0, r6
   18bc4:	f00c fbbc 	bl	25340 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   18bc8:	4b1f      	ldr	r3, [pc, #124]	; (18c48 <deferred_work+0x94>)
   18bca:	681d      	ldr	r5, [r3, #0]
   18bcc:	b925      	cbnz	r5, 18bd8 <deferred_work+0x24>
		bt_conn_unref(conn);
   18bce:	4630      	mov	r0, r6
   18bd0:	f00c fb3e 	bl	25250 <bt_conn_unref>
}
   18bd4:	b002      	add	sp, #8
   18bd6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   18bd8:	686b      	ldr	r3, [r5, #4]
   18bda:	b11b      	cbz	r3, 18be4 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   18bdc:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   18be0:	4630      	mov	r0, r6
   18be2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18be4:	69ad      	ldr	r5, [r5, #24]
   18be6:	e7f1      	b.n	18bcc <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   18be8:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   18bec:	2b01      	cmp	r3, #1
   18bee:	d1f1      	bne.n	18bd4 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18bf0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   18bf4:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   18bf8:	e855 3f00 	ldrex	r3, [r5]
   18bfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   18c00:	e845 2100 	strex	r1, r2, [r5]
   18c04:	2900      	cmp	r1, #0
   18c06:	d1f7      	bne.n	18bf8 <deferred_work+0x44>
   18c08:	f3bf 8f5b 	dmb	ish
   18c0c:	059b      	lsls	r3, r3, #22
   18c0e:	d514      	bpl.n	18c3a <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18c10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18c12:	9300      	str	r3, [sp, #0]
   18c14:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18c16:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   18c18:	4669      	mov	r1, sp
   18c1a:	4630      	mov	r0, r6
   18c1c:	f7ff ff9c 	bl	18b58 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18c20:	f3bf 8f5b 	dmb	ish
   18c24:	e855 3f00 	ldrex	r3, [r5]
   18c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18c2c:	e845 3200 	strex	r2, r3, [r5]
   18c30:	2a00      	cmp	r2, #0
   18c32:	d1f7      	bne.n	18c24 <deferred_work+0x70>
   18c34:	f3bf 8f5b 	dmb	ish
   18c38:	e7cc      	b.n	18bd4 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
   18c3a:	4a04      	ldr	r2, [pc, #16]	; (18c4c <deferred_work+0x98>)
   18c3c:	6810      	ldr	r0, [r2, #0]
   18c3e:	6851      	ldr	r1, [r2, #4]
   18c40:	466b      	mov	r3, sp
   18c42:	c303      	stmia	r3!, {r0, r1}
   18c44:	e7e8      	b.n	18c18 <deferred_work+0x64>
   18c46:	bf00      	nop
   18c48:	20002938 	.word	0x20002938
   18c4c:	000271b0 	.word	0x000271b0

00018c50 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   18c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c52:	4604      	mov	r4, r0
   18c54:	460d      	mov	r5, r1
   18c56:	4617      	mov	r7, r2
   18c58:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   18c5a:	f00d ffc0 	bl	26bde <k_is_in_isr>
   18c5e:	b150      	cbz	r0, 18c76 <bt_conn_create_pdu_timeout+0x26>
   18c60:	490f      	ldr	r1, [pc, #60]	; (18ca0 <bt_conn_create_pdu_timeout+0x50>)
   18c62:	4810      	ldr	r0, [pc, #64]	; (18ca4 <bt_conn_create_pdu_timeout+0x54>)
   18c64:	f640 127f 	movw	r2, #2431	; 0x97f
   18c68:	f00a f860 	bl	22d2c <printk>
   18c6c:	480c      	ldr	r0, [pc, #48]	; (18ca0 <bt_conn_create_pdu_timeout+0x50>)
   18c6e:	f640 117f 	movw	r1, #2431	; 0x97f
   18c72:	f00a fabe 	bl	231f2 <assert_post_action>
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
   18c76:	480c      	ldr	r0, [pc, #48]	; (18ca8 <bt_conn_create_pdu_timeout+0x58>)
   18c78:	463a      	mov	r2, r7
   18c7a:	2c00      	cmp	r4, #0
   18c7c:	bf18      	it	ne
   18c7e:	4620      	movne	r0, r4
   18c80:	4633      	mov	r3, r6
   18c82:	f00d fcb1 	bl	265e8 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
   18c86:	4604      	mov	r4, r0
   18c88:	b928      	cbnz	r0, 18c96 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   18c8a:	4808      	ldr	r0, [pc, #32]	; (18cac <bt_conn_create_pdu_timeout+0x5c>)
   18c8c:	2157      	movs	r1, #87	; 0x57
   18c8e:	f00a f84d 	bl	22d2c <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   18c92:	4620      	mov	r0, r4
   18c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_reserve(buf, reserve);
   18c96:	1d29      	adds	r1, r5, #4
   18c98:	3008      	adds	r0, #8
   18c9a:	f004 fa8f 	bl	1d1bc <net_buf_simple_reserve>
	return buf;
   18c9e:	e7f8      	b.n	18c92 <bt_conn_create_pdu_timeout+0x42>
   18ca0:	000290c7 	.word	0x000290c7
   18ca4:	00027c9a 	.word	0x00027c9a
   18ca8:	2000090c 	.word	0x2000090c
   18cac:	000292be 	.word	0x000292be

00018cb0 <bt_conn_create_frag_timeout>:
{
   18cb0:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   18cb2:	4801      	ldr	r0, [pc, #4]	; (18cb8 <bt_conn_create_frag_timeout+0x8>)
   18cb4:	f7ff bfcc 	b.w	18c50 <bt_conn_create_pdu_timeout>
   18cb8:	20000964 	.word	0x20000964

00018cbc <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   18cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cc0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   18cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18cca:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   18ccc:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   18cce:	f7ff ffef 	bl	18cb0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   18cd2:	7833      	ldrb	r3, [r6, #0]
   18cd4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   18cd6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18cd8:	f04f 0600 	mov.w	r6, #0
   18cdc:	d005      	beq.n	18cea <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   18cde:	f004 fabf 	bl	1d260 <net_buf_unref>
		return NULL;
   18ce2:	4635      	mov	r5, r6
}
   18ce4:	4628      	mov	r0, r5
   18ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   18cea:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18cec:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   18cf0:	4e0c      	ldr	r6, [pc, #48]	; (18d24 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18cf2:	4638      	mov	r0, r7
   18cf4:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   18cf8:	f00d fc87 	bl	2660a <net_buf_simple_tailroom>
   18cfc:	4580      	cmp	r8, r0
   18cfe:	d20c      	bcs.n	18d1a <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   18d00:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	net_buf_add_mem(frag, buf->data, frag_len);
   18d04:	f854 1f08 	ldr.w	r1, [r4, #8]!
   18d08:	4632      	mov	r2, r6
   18d0a:	4638      	mov	r0, r7
   18d0c:	f00d fc85 	bl	2661a <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
   18d10:	4631      	mov	r1, r6
   18d12:	4620      	mov	r0, r4
   18d14:	f004 fb80 	bl	1d418 <net_buf_simple_pull>
	return frag;
   18d18:	e7e4      	b.n	18ce4 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18d1a:	4638      	mov	r0, r7
   18d1c:	f00d fc75 	bl	2660a <net_buf_simple_tailroom>
   18d20:	b286      	uxth	r6, r0
   18d22:	e7ef      	b.n	18d04 <create_frag.isra.0+0x48>
   18d24:	200003c8 	.word	0x200003c8

00018d28 <bt_conn_process_tx>:
{
   18d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18d2a:	7b43      	ldrb	r3, [r0, #13]
{
   18d2c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   18d2e:	b993      	cbnz	r3, 18d56 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18d30:	f3bf 8f5b 	dmb	ish
   18d34:	1d03      	adds	r3, r0, #4
   18d36:	e853 2f00 	ldrex	r2, [r3]
   18d3a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   18d3e:	e843 1400 	strex	r4, r1, [r3]
   18d42:	2c00      	cmp	r4, #0
   18d44:	d1f7      	bne.n	18d36 <bt_conn_process_tx+0xe>
   18d46:	f3bf 8f5b 	dmb	ish
   18d4a:	0653      	lsls	r3, r2, #25
   18d4c:	d503      	bpl.n	18d56 <bt_conn_process_tx+0x2e>
}
   18d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   18d52:	f7ff bc2b 	b.w	185ac <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18d56:	2200      	movs	r2, #0
   18d58:	2300      	movs	r3, #0
   18d5a:	f105 0034 	add.w	r0, r5, #52	; 0x34
   18d5e:	f004 f9fd 	bl	1d15c <net_buf_get>
	BT_ASSERT(buf);
   18d62:	4604      	mov	r4, r0
   18d64:	b958      	cbnz	r0, 18d7e <bt_conn_process_tx+0x56>
   18d66:	4920      	ldr	r1, [pc, #128]	; (18de8 <bt_conn_process_tx+0xc0>)
   18d68:	4820      	ldr	r0, [pc, #128]	; (18dec <bt_conn_process_tx+0xc4>)
   18d6a:	f240 5255 	movw	r2, #1365	; 0x555
   18d6e:	f009 ffdd 	bl	22d2c <printk>
   18d72:	4040      	eors	r0, r0
   18d74:	f380 8811 	msr	BASEPRI, r0
   18d78:	f04f 0003 	mov.w	r0, #3
   18d7c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   18d7e:	4f1c      	ldr	r7, [pc, #112]	; (18df0 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   18d80:	89a1      	ldrh	r1, [r4, #12]
   18d82:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   18d86:	4291      	cmp	r1, r2
   18d88:	d807      	bhi.n	18d9a <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   18d8a:	2300      	movs	r3, #0
   18d8c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   18d8e:	4621      	mov	r1, r4
   18d90:	4628      	mov	r0, r5
   18d92:	f7ff fad7 	bl	18344 <send_frag>
	if (!send_buf(conn, buf)) {
   18d96:	b140      	cbz	r0, 18daa <bt_conn_process_tx+0x82>
}
   18d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   18d9a:	f105 060d 	add.w	r6, r5, #13
   18d9e:	4621      	mov	r1, r4
   18da0:	4630      	mov	r0, r6
   18da2:	f7ff ff8b 	bl	18cbc <create_frag.isra.0>
	if (!frag) {
   18da6:	4601      	mov	r1, r0
   18da8:	b920      	cbnz	r0, 18db4 <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
   18daa:	4620      	mov	r0, r4
}
   18dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   18db0:	f004 ba56 	b.w	1d260 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   18db4:	2301      	movs	r3, #1
   18db6:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18db8:	4628      	mov	r0, r5
   18dba:	f7ff fac3 	bl	18344 <send_frag>
   18dbe:	2800      	cmp	r0, #0
   18dc0:	d0f3      	beq.n	18daa <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
   18dc2:	89a2      	ldrh	r2, [r4, #12]
   18dc4:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   18dc8:	429a      	cmp	r2, r3
   18dca:	d802      	bhi.n	18dd2 <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, FRAG_END, false);
   18dcc:	2300      	movs	r3, #0
   18dce:	2203      	movs	r2, #3
   18dd0:	e7dd      	b.n	18d8e <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
   18dd2:	4621      	mov	r1, r4
   18dd4:	4630      	mov	r0, r6
   18dd6:	f7ff ff71 	bl	18cbc <create_frag.isra.0>
		if (!frag) {
   18dda:	4601      	mov	r1, r0
   18ddc:	2800      	cmp	r0, #0
   18dde:	d0e4      	beq.n	18daa <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18de0:	2301      	movs	r3, #1
   18de2:	461a      	mov	r2, r3
   18de4:	e7e8      	b.n	18db8 <bt_conn_process_tx+0x90>
   18de6:	bf00      	nop
   18de8:	000290c7 	.word	0x000290c7
   18dec:	00027c9a 	.word	0x00027c9a
   18df0:	200003c8 	.word	0x200003c8

00018df4 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   18df4:	4b0c      	ldr	r3, [pc, #48]	; (18e28 <bt_conn_auth_cb_register+0x34>)
   18df6:	b908      	cbnz	r0, 18dfc <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   18df8:	6018      	str	r0, [r3, #0]
		return 0;
   18dfa:	4770      	bx	lr
	}

	if (bt_auth) {
   18dfc:	681a      	ldr	r2, [r3, #0]
   18dfe:	b962      	cbnz	r2, 18e1a <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   18e00:	6902      	ldr	r2, [r0, #16]
   18e02:	b93a      	cbnz	r2, 18e14 <bt_conn_auth_cb_register+0x20>
   18e04:	6802      	ldr	r2, [r0, #0]
   18e06:	b95a      	cbnz	r2, 18e20 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   18e08:	6842      	ldr	r2, [r0, #4]
   18e0a:	b94a      	cbnz	r2, 18e20 <bt_conn_auth_cb_register+0x2c>
   18e0c:	6882      	ldr	r2, [r0, #8]
   18e0e:	b93a      	cbnz	r2, 18e20 <bt_conn_auth_cb_register+0x2c>
   18e10:	6942      	ldr	r2, [r0, #20]
   18e12:	b92a      	cbnz	r2, 18e20 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   18e14:	6018      	str	r0, [r3, #0]
	return 0;
   18e16:	2000      	movs	r0, #0
   18e18:	4770      	bx	lr
		return -EALREADY;
   18e1a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   18e1e:	4770      	bx	lr
		return -EINVAL;
   18e20:	f06f 0015 	mvn.w	r0, #21
}
   18e24:	4770      	bx	lr
   18e26:	bf00      	nop
   18e28:	20002934 	.word	0x20002934

00018e2c <bt_conn_auth_pairing_confirm>:
	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   18e2c:	4a05      	ldr	r2, [pc, #20]	; (18e44 <bt_conn_auth_pairing_confirm+0x18>)
   18e2e:	6812      	ldr	r2, [r2, #0]
   18e30:	b122      	cbz	r2, 18e3c <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
   18e32:	7883      	ldrb	r3, [r0, #2]
   18e34:	2b01      	cmp	r3, #1
   18e36:	d101      	bne.n	18e3c <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
   18e38:	f00d bb94 	b.w	26564 <bt_smp_auth_pairing_confirm>
		return bt_ssp_auth_pairing_confirm(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
   18e3c:	f06f 0015 	mvn.w	r0, #21
   18e40:	4770      	bx	lr
   18e42:	bf00      	nop
   18e44:	20002934 	.word	0x20002934

00018e48 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   18e48:	4b0a      	ldr	r3, [pc, #40]	; (18e74 <bt_conn_index+0x2c>)
   18e4a:	1ac0      	subs	r0, r0, r3
   18e4c:	1183      	asrs	r3, r0, #6
   18e4e:	480a      	ldr	r0, [pc, #40]	; (18e78 <bt_conn_index+0x30>)
   18e50:	4358      	muls	r0, r3
{
   18e52:	b510      	push	{r4, lr}
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
   18e54:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
   18e58:	d00a      	beq.n	18e70 <bt_conn_index+0x28>
   18e5a:	4908      	ldr	r1, [pc, #32]	; (18e7c <bt_conn_index+0x34>)
   18e5c:	4808      	ldr	r0, [pc, #32]	; (18e80 <bt_conn_index+0x38>)
   18e5e:	f640 2226 	movw	r2, #2598	; 0xa26
   18e62:	f009 ff63 	bl	22d2c <printk>
   18e66:	4805      	ldr	r0, [pc, #20]	; (18e7c <bt_conn_index+0x34>)
   18e68:	f640 2126 	movw	r1, #2598	; 0xa26
   18e6c:	f00a f9c1 	bl	231f2 <assert_post_action>
		break;
	}

	return index;
}
   18e70:	4620      	mov	r0, r4
   18e72:	bd10      	pop	{r4, pc}
   18e74:	20002070 	.word	0x20002070
   18e78:	aaaaaaab 	.word	0xaaaaaaab
   18e7c:	000290c7 	.word	0x000290c7
   18e80:	00027c9a 	.word	0x00027c9a

00018e84 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
   18e84:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   18e86:	490b      	ldr	r1, [pc, #44]	; (18eb4 <bt_conn_init+0x30>)
   18e88:	480b      	ldr	r0, [pc, #44]	; (18eb8 <bt_conn_init+0x34>)
   18e8a:	f00d fe3b 	bl	26b04 <k_queue_append>
   18e8e:	490b      	ldr	r1, [pc, #44]	; (18ebc <bt_conn_init+0x38>)
   18e90:	4809      	ldr	r0, [pc, #36]	; (18eb8 <bt_conn_init+0x34>)
   18e92:	f00d fe37 	bl	26b04 <k_queue_append>
   18e96:	490a      	ldr	r1, [pc, #40]	; (18ec0 <bt_conn_init+0x3c>)
   18e98:	4807      	ldr	r0, [pc, #28]	; (18eb8 <bt_conn_init+0x34>)
   18e9a:	f00d fe33 	bl	26b04 <k_queue_append>
	}

	bt_att_init();
   18e9e:	f00c fd77 	bl	25990 <bt_att_init>

	err = bt_smp_init();
   18ea2:	f003 fee5 	bl	1cc70 <bt_smp_init>
	if (err) {
   18ea6:	4604      	mov	r4, r0
   18ea8:	b908      	cbnz	r0, 18eae <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   18eaa:	f00c fab5 	bl	25418 <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
   18eae:	4620      	mov	r0, r4
   18eb0:	bd10      	pop	{r4, pc}
   18eb2:	bf00      	nop
   18eb4:	2000293c 	.word	0x2000293c
   18eb8:	200008f0 	.word	0x200008f0
   18ebc:	2000294c 	.word	0x2000294c
   18ec0:	2000295c 	.word	0x2000295c

00018ec4 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18ec4:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   18ec6:	4b07      	ldr	r3, [pc, #28]	; (18ee4 <l2cap_accept+0x20>)
{
   18ec8:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   18eca:	6818      	ldr	r0, [r3, #0]
   18ecc:	b918      	cbnz	r0, 18ed6 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   18ece:	4a06      	ldr	r2, [pc, #24]	; (18ee8 <l2cap_accept+0x24>)
   18ed0:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   18ed2:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   18ed4:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   18ed6:	4805      	ldr	r0, [pc, #20]	; (18eec <l2cap_accept+0x28>)
   18ed8:	2145      	movs	r1, #69	; 0x45
   18eda:	f009 ff27 	bl	22d2c <printk>
   18ede:	f06f 000b 	mvn.w	r0, #11
   18ee2:	e7f7      	b.n	18ed4 <l2cap_accept+0x10>
   18ee4:	20002130 	.word	0x20002130
   18ee8:	00027618 	.word	0x00027618
   18eec:	00029356 	.word	0x00029356

00018ef0 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ef2:	4605      	mov	r5, r0
   18ef4:	460f      	mov	r7, r1
   18ef6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   18ef8:	2300      	movs	r3, #0
   18efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18efe:	2104      	movs	r1, #4
   18f00:	2000      	movs	r0, #0
   18f02:	f7ff fea5 	bl	18c50 <bt_conn_create_pdu_timeout>
	if (!buf) {
   18f06:	4604      	mov	r4, r0
   18f08:	b930      	cbnz	r0, 18f18 <l2cap_create_le_sig_pdu.isra.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   18f0a:	4807      	ldr	r0, [pc, #28]	; (18f28 <l2cap_create_le_sig_pdu.isra.0+0x38>)
   18f0c:	462a      	mov	r2, r5
   18f0e:	2145      	movs	r1, #69	; 0x45
   18f10:	f009 ff0c 	bl	22d2c <printk>
}
   18f14:	4620      	mov	r0, r4
   18f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
   18f18:	2104      	movs	r1, #4
   18f1a:	3008      	adds	r0, #8
   18f1c:	f004 fab6 	bl	1d48c <net_buf_simple_add>
	hdr->code = code;
   18f20:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   18f22:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18f24:	8046      	strh	r6, [r0, #2]
	return buf;
   18f26:	e7f5      	b.n	18f14 <l2cap_create_le_sig_pdu.isra.0+0x24>
   18f28:	00029382 	.word	0x00029382

00018f2c <l2cap_rtx_timeout>:
{
   18f2c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   18f2e:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
   18f30:	2145      	movs	r1, #69	; 0x45
	struct bt_conn *conn = chan->chan.conn;
   18f32:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   18f36:	4806      	ldr	r0, [pc, #24]	; (18f50 <l2cap_rtx_timeout+0x24>)
   18f38:	4622      	mov	r2, r4
   18f3a:	f009 fef7 	bl	22d2c <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   18f3e:	4628      	mov	r0, r5
   18f40:	4621      	mov	r1, r4
   18f42:	f00c f9c6 	bl	252d2 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   18f46:	4620      	mov	r0, r4
}
   18f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   18f4c:	f00c b9e3 	b.w	25316 <bt_l2cap_chan_del>
   18f50:	000293af 	.word	0x000293af

00018f54 <bt_l2cap_connected>:
{
   18f54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18f58:	4f30      	ldr	r7, [pc, #192]	; (1901c <bt_l2cap_connected+0xc8>)
   18f5a:	4e31      	ldr	r6, [pc, #196]	; (19020 <bt_l2cap_connected+0xcc>)
   18f5c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1902c <bt_l2cap_connected+0xd8>
{
   18f60:	4604      	mov	r4, r0
   18f62:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18f64:	42be      	cmp	r6, r7
   18f66:	d90a      	bls.n	18f7e <bt_l2cap_connected+0x2a>
   18f68:	482e      	ldr	r0, [pc, #184]	; (19024 <bt_l2cap_connected+0xd0>)
   18f6a:	4641      	mov	r1, r8
   18f6c:	f44f 72b3 	mov.w	r2, #358	; 0x166
   18f70:	f009 fedc 	bl	22d2c <printk>
   18f74:	f44f 71b3 	mov.w	r1, #358	; 0x166
   18f78:	4640      	mov	r0, r8
   18f7a:	f00a f93a 	bl	231f2 <assert_post_action>
   18f7e:	454e      	cmp	r6, r9
   18f80:	d302      	bcc.n	18f88 <bt_l2cap_connected+0x34>
}
   18f82:	b002      	add	sp, #8
   18f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   18f88:	6873      	ldr	r3, [r6, #4]
   18f8a:	a901      	add	r1, sp, #4
   18f8c:	4620      	mov	r0, r4
   18f8e:	4798      	blx	r3
   18f90:	2800      	cmp	r0, #0
   18f92:	db3d      	blt.n	19010 <bt_l2cap_connected+0xbc>
		ch = BT_L2CAP_LE_CHAN(chan);
   18f94:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   18f96:	8833      	ldrh	r3, [r6, #0]
   18f98:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   18f9c:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   18fa0:	4921      	ldr	r1, [pc, #132]	; (19028 <bt_l2cap_connected+0xd4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18fa2:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
   18fa6:	f105 0010 	add.w	r0, r5, #16
   18faa:	f00d fe8a 	bl	26cc2 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18fae:	f3bf 8f5b 	dmb	ish
   18fb2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   18fb6:	2200      	movs	r2, #0
   18fb8:	e853 1f00 	ldrex	r1, [r3]
   18fbc:	e843 2000 	strex	r0, r2, [r3]
   18fc0:	2800      	cmp	r0, #0
   18fc2:	d1f9      	bne.n	18fb8 <bt_l2cap_connected+0x64>
   18fc4:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   18fc8:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   18fca:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   18fcc:	f105 0308 	add.w	r3, r5, #8
   18fd0:	bb02      	cbnz	r2, 19014 <bt_l2cap_connected+0xc0>
	list->head = node;
   18fd2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   18fd6:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   18fd8:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   18fda:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   18fdc:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   18fe0:	681b      	ldr	r3, [r3, #0]
   18fe2:	b103      	cbz	r3, 18fe6 <bt_l2cap_connected+0x92>
			chan->ops->connected(chan);
   18fe4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18fe6:	9b01      	ldr	r3, [sp, #4]
   18fe8:	f3bf 8f5b 	dmb	ish
   18fec:	3340      	adds	r3, #64	; 0x40
   18fee:	e853 2f00 	ldrex	r2, [r3]
   18ff2:	f042 0201 	orr.w	r2, r2, #1
   18ff6:	e843 2100 	strex	r1, r2, [r3]
   18ffa:	2900      	cmp	r1, #0
   18ffc:	d1f7      	bne.n	18fee <bt_l2cap_connected+0x9a>
   18ffe:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   19002:	9801      	ldr	r0, [sp, #4]
   19004:	6843      	ldr	r3, [r0, #4]
   19006:	699b      	ldr	r3, [r3, #24]
   19008:	b113      	cbz	r3, 19010 <bt_l2cap_connected+0xbc>
			chan->ops->status(chan, chan->status);
   1900a:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1900e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19010:	360c      	adds	r6, #12
   19012:	e7a7      	b.n	18f64 <bt_l2cap_connected+0x10>
	parent->next = child;
   19014:	6013      	str	r3, [r2, #0]
	list->tail = node;
   19016:	6563      	str	r3, [r4, #84]	; 0x54
}
   19018:	e7dd      	b.n	18fd6 <bt_l2cap_connected+0x82>
   1901a:	bf00      	nop
   1901c:	0002700c 	.word	0x0002700c
   19020:	00026fe8 	.word	0x00026fe8
   19024:	00027c9a 	.word	0x00027c9a
   19028:	00018f2d 	.word	0x00018f2d
   1902c:	000293c4 	.word	0x000293c4

00019030 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   19030:	898b      	ldrh	r3, [r1, #12]
   19032:	2b03      	cmp	r3, #3
{
   19034:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19036:	4606      	mov	r6, r0
   19038:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1903a:	d804      	bhi.n	19046 <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
   1903c:	481f      	ldr	r0, [pc, #124]	; (190bc <l2cap_recv+0x8c>)
   1903e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   19040:	f009 fe74 	bl	22d2c <printk>
		return 0;
   19044:	e00d      	b.n	19062 <l2cap_recv+0x32>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   19046:	2104      	movs	r1, #4
   19048:	f105 0008 	add.w	r0, r5, #8
   1904c:	f004 fa00 	bl	1d450 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   19050:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   19052:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   19054:	4293      	cmp	r3, r2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   19056:	4604      	mov	r4, r0
	if (buf->len != len) {
   19058:	d006      	beq.n	19068 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1905a:	4819      	ldr	r0, [pc, #100]	; (190c0 <l2cap_recv+0x90>)
   1905c:	2145      	movs	r1, #69	; 0x45
   1905e:	f009 fe65 	bl	22d2c <printk>
}
   19062:	2000      	movs	r0, #0
   19064:	b002      	add	sp, #8
   19066:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   19068:	7842      	ldrb	r2, [r0, #1]
   1906a:	b912      	cbnz	r2, 19072 <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1906c:	4815      	ldr	r0, [pc, #84]	; (190c4 <l2cap_recv+0x94>)
   1906e:	2145      	movs	r1, #69	; 0x45
   19070:	e7e6      	b.n	19040 <l2cap_recv+0x10>
	switch (hdr->code) {
   19072:	7802      	ldrb	r2, [r0, #0]
   19074:	2a01      	cmp	r2, #1
   19076:	d0f4      	beq.n	19062 <l2cap_recv+0x32>
   19078:	2a13      	cmp	r2, #19
   1907a:	d104      	bne.n	19086 <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   1907c:	2b01      	cmp	r3, #1
   1907e:	d8f0      	bhi.n	19062 <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
   19080:	4811      	ldr	r0, [pc, #68]	; (190c8 <l2cap_recv+0x98>)
   19082:	2145      	movs	r1, #69	; 0x45
   19084:	e7dc      	b.n	19040 <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   19086:	4811      	ldr	r0, [pc, #68]	; (190cc <l2cap_recv+0x9c>)
   19088:	2157      	movs	r1, #87	; 0x57
   1908a:	f009 fe4f 	bl	22d2c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1908e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   19090:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19092:	2202      	movs	r2, #2
   19094:	2001      	movs	r0, #1
   19096:	f7ff ff2b 	bl	18ef0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1909a:	4604      	mov	r4, r0
   1909c:	2800      	cmp	r0, #0
   1909e:	d0e0      	beq.n	19062 <l2cap_recv+0x32>
	rej = net_buf_add(buf, sizeof(*rej));
   190a0:	2102      	movs	r1, #2
   190a2:	3008      	adds	r0, #8
   190a4:	f004 f9f2 	bl	1d48c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   190a8:	2300      	movs	r3, #0
   190aa:	7003      	strb	r3, [r0, #0]
   190ac:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   190ae:	4622      	mov	r2, r4
   190b0:	9300      	str	r3, [sp, #0]
   190b2:	2105      	movs	r1, #5
   190b4:	4628      	mov	r0, r5
   190b6:	f00c f976 	bl	253a6 <bt_l2cap_send_cb>
}
   190ba:	e7d2      	b.n	19062 <l2cap_recv+0x32>
   190bc:	000293f5 	.word	0x000293f5
   190c0:	00029418 	.word	0x00029418
   190c4:	0002943e 	.word	0x0002943e
   190c8:	00029464 	.word	0x00029464
   190cc:	00029485 	.word	0x00029485

000190d0 <bt_l2cap_recv>:
{
   190d0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   190d2:	898b      	ldrh	r3, [r1, #12]
   190d4:	2b03      	cmp	r3, #3
{
   190d6:	4605      	mov	r5, r0
   190d8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   190da:	d808      	bhi.n	190ee <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   190dc:	480e      	ldr	r0, [pc, #56]	; (19118 <bt_l2cap_recv+0x48>)
   190de:	2145      	movs	r1, #69	; 0x45
   190e0:	f009 fe24 	bl	22d2c <printk>
	net_buf_unref(buf);
   190e4:	4620      	mov	r0, r4
}
   190e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   190ea:	f004 b8b9 	b.w	1d260 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   190ee:	2104      	movs	r1, #4
   190f0:	f104 0008 	add.w	r0, r4, #8
   190f4:	f004 f9ac 	bl	1d450 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   190f8:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   190fa:	4628      	mov	r0, r5
   190fc:	4611      	mov	r1, r2
   190fe:	f00c f97b 	bl	253f8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19102:	b920      	cbnz	r0, 1910e <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   19104:	4805      	ldr	r0, [pc, #20]	; (1911c <bt_l2cap_recv+0x4c>)
   19106:	2157      	movs	r1, #87	; 0x57
   19108:	f009 fe10 	bl	22d2c <printk>
		net_buf_unref(buf);
   1910c:	e7ea      	b.n	190e4 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   1910e:	6843      	ldr	r3, [r0, #4]
   19110:	4621      	mov	r1, r4
   19112:	691b      	ldr	r3, [r3, #16]
   19114:	4798      	blx	r3
   19116:	e7e5      	b.n	190e4 <bt_l2cap_recv+0x14>
   19118:	000294a8 	.word	0x000294a8
   1911c:	000294ca 	.word	0x000294ca

00019120 <bt_l2cap_update_conn_param>:
{
   19120:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   19122:	4b15      	ldr	r3, [pc, #84]	; (19178 <bt_l2cap_update_conn_param+0x58>)
   19124:	781a      	ldrb	r2, [r3, #0]
   19126:	3201      	adds	r2, #1
	if (!ident) {
   19128:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   1912c:	bf08      	it	eq
   1912e:	2201      	moveq	r2, #1
   19130:	701a      	strb	r2, [r3, #0]
{
   19132:	4605      	mov	r5, r0
   19134:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19136:	2208      	movs	r2, #8
   19138:	7819      	ldrb	r1, [r3, #0]
   1913a:	2012      	movs	r0, #18
   1913c:	f7ff fed8 	bl	18ef0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   19140:	4606      	mov	r6, r0
   19142:	b1b0      	cbz	r0, 19172 <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
   19144:	2108      	movs	r1, #8
   19146:	4408      	add	r0, r1
   19148:	f004 f9a0 	bl	1d48c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1914c:	8822      	ldrh	r2, [r4, #0]
   1914e:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   19150:	8862      	ldrh	r2, [r4, #2]
   19152:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   19154:	88a2      	ldrh	r2, [r4, #4]
   19156:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   19158:	88e2      	ldrh	r2, [r4, #6]
   1915a:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1915c:	2400      	movs	r4, #0
   1915e:	9400      	str	r4, [sp, #0]
   19160:	4623      	mov	r3, r4
   19162:	4632      	mov	r2, r6
   19164:	2105      	movs	r1, #5
   19166:	4628      	mov	r0, r5
   19168:	f00c f91d 	bl	253a6 <bt_l2cap_send_cb>
	return 0;
   1916c:	4620      	mov	r0, r4
}
   1916e:	b002      	add	sp, #8
   19170:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   19172:	f06f 000b 	mvn.w	r0, #11
   19176:	e7fa      	b.n	1916e <bt_l2cap_update_conn_param+0x4e>
   19178:	200030ee 	.word	0x200030ee

0001917c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1917c:	4b02      	ldr	r3, [pc, #8]	; (19188 <att_cfm_sent+0xc>)
   1917e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   19182:	f00c b977 	b.w	25474 <att_sent>
   19186:	bf00      	nop
   19188:	000256e7 	.word	0x000256e7

0001918c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1918c:	4b02      	ldr	r3, [pc, #8]	; (19198 <att_rsp_sent+0xc>)
   1918e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   19192:	f00c b96f 	b.w	25474 <att_sent>
   19196:	bf00      	nop
   19198:	00025703 	.word	0x00025703

0001919c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1919c:	4b02      	ldr	r3, [pc, #8]	; (191a8 <att_req_sent+0xc>)
   1919e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   191a2:	f00c b967 	b.w	25474 <att_sent>
   191a6:	bf00      	nop
   191a8:	000194b1 	.word	0x000194b1

000191ac <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   191ac:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   191ae:	3808      	subs	r0, #8
   191b0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   191b2:	a901      	add	r1, sp, #4
   191b4:	4802      	ldr	r0, [pc, #8]	; (191c0 <bt_att_released+0x14>)
   191b6:	f007 f8fb 	bl	203b0 <k_mem_slab_free>
}
   191ba:	b003      	add	sp, #12
   191bc:	f85d fb04 	ldr.w	pc, [sp], #4
   191c0:	2000082c 	.word	0x2000082c

000191c4 <read_group_cb>:
{
   191c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   191c8:	4606      	mov	r6, r0
   191ca:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   191cc:	f04f 0800 	mov.w	r8, #0
   191d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   191d4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   191d6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   191d8:	f88d 8008 	strb.w	r8, [sp, #8]
   191dc:	a902      	add	r1, sp, #8
{
   191de:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   191e0:	f8ad 300a 	strh.w	r3, [sp, #10]
   191e4:	f00b fd40 	bl	24c68 <bt_uuid_cmp>
   191e8:	b1a0      	cbz	r0, 19214 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   191ea:	f642 0301 	movw	r3, #10241	; 0x2801
   191ee:	6830      	ldr	r0, [r6, #0]
   191f0:	f88d 800c 	strb.w	r8, [sp, #12]
   191f4:	a903      	add	r1, sp, #12
   191f6:	f8ad 300e 	strh.w	r3, [sp, #14]
   191fa:	f00b fd35 	bl	24c68 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   191fe:	b148      	cbz	r0, 19214 <read_group_cb+0x50>
		if (data->group &&
   19200:	6923      	ldr	r3, [r4, #16]
   19202:	b11b      	cbz	r3, 1920c <read_group_cb+0x48>
   19204:	885a      	ldrh	r2, [r3, #2]
   19206:	42aa      	cmp	r2, r5
   19208:	d200      	bcs.n	1920c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1920a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1920c:	2001      	movs	r0, #1
}
   1920e:	b004      	add	sp, #16
   19210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19214:	6861      	ldr	r1, [r4, #4]
   19216:	6830      	ldr	r0, [r6, #0]
   19218:	f00b fd26 	bl	24c68 <bt_uuid_cmp>
   1921c:	b110      	cbz	r0, 19224 <read_group_cb+0x60>
		data->group = NULL;
   1921e:	2300      	movs	r3, #0
   19220:	6123      	str	r3, [r4, #16]
   19222:	e7f3      	b.n	1920c <read_group_cb+0x48>
	if (data->rsp->len &&
   19224:	68e3      	ldr	r3, [r4, #12]
   19226:	68a0      	ldr	r0, [r4, #8]
   19228:	781a      	ldrb	r2, [r3, #0]
   1922a:	b13a      	cbz	r2, 1923c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1922c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   19230:	8981      	ldrh	r1, [r0, #12]
   19232:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   19234:	4293      	cmp	r3, r2
   19236:	da01      	bge.n	1923c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   19238:	2000      	movs	r0, #0
   1923a:	e7e8      	b.n	1920e <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1923c:	2104      	movs	r1, #4
   1923e:	3008      	adds	r0, #8
   19240:	f004 f924 	bl	1d48c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19244:	4b09      	ldr	r3, [pc, #36]	; (1926c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   19246:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19248:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1924a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1924c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1924e:	4631      	mov	r1, r6
   19250:	9300      	str	r3, [sp, #0]
   19252:	9401      	str	r4, [sp, #4]
   19254:	2300      	movs	r3, #0
   19256:	4638      	mov	r0, r7
   19258:	f00c f95c 	bl	25514 <att_chan_read>
	if (read < 0) {
   1925c:	2800      	cmp	r0, #0
   1925e:	dbeb      	blt.n	19238 <read_group_cb+0x74>
	if (!data->group) {
   19260:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   19262:	3800      	subs	r0, #0
   19264:	bf18      	it	ne
   19266:	2001      	movne	r0, #1
   19268:	e7d1      	b.n	1920e <read_group_cb+0x4a>
   1926a:	bf00      	nop
   1926c:	000256c3 	.word	0x000256c3

00019270 <read_type_cb>:
{
   19270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   19274:	f8d2 8000 	ldr.w	r8, [r2]
{
   19278:	4606      	mov	r6, r0
   1927a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1927c:	6800      	ldr	r0, [r0, #0]
   1927e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   19280:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   19284:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19286:	f00b fcef 	bl	24c68 <bt_uuid_cmp>
   1928a:	4607      	mov	r7, r0
   1928c:	2800      	cmp	r0, #0
   1928e:	d13e      	bne.n	1930e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   19290:	4628      	mov	r0, r5
   19292:	2215      	movs	r2, #21
   19294:	4631      	mov	r1, r6
   19296:	f00c fdc9 	bl	25e2c <bt_gatt_check_perm>
   1929a:	4605      	mov	r5, r0
   1929c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1929e:	b148      	cbz	r0, 192b4 <read_type_cb+0x44>
		if (data->rsp->len) {
   192a0:	68e3      	ldr	r3, [r4, #12]
   192a2:	781b      	ldrb	r3, [r3, #0]
   192a4:	b923      	cbnz	r3, 192b0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   192a6:	2500      	movs	r5, #0
}
   192a8:	4628      	mov	r0, r5
   192aa:	b003      	add	sp, #12
   192ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   192b0:	7527      	strb	r7, [r4, #20]
   192b2:	e7f8      	b.n	192a6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   192b4:	68a0      	ldr	r0, [r4, #8]
   192b6:	f004 f82f 	bl	1d318 <net_buf_frag_last>
   192ba:	2102      	movs	r1, #2
   192bc:	3008      	adds	r0, #8
   192be:	f004 f8e5 	bl	1d48c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   192c2:	4b14      	ldr	r3, [pc, #80]	; (19314 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   192c4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   192c6:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   192c8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   192cc:	4631      	mov	r1, r6
   192ce:	9300      	str	r3, [sp, #0]
   192d0:	9401      	str	r4, [sp, #4]
   192d2:	462b      	mov	r3, r5
   192d4:	4640      	mov	r0, r8
   192d6:	f00c f91d 	bl	25514 <att_chan_read>
	if (read < 0) {
   192da:	2800      	cmp	r0, #0
   192dc:	da07      	bge.n	192ee <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   192de:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   192e2:	bf26      	itte	cs
   192e4:	4240      	negcs	r0, r0
   192e6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   192e8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   192ea:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   192ec:	e7dc      	b.n	192a8 <read_type_cb+0x38>
	if (!data->item) {
   192ee:	6923      	ldr	r3, [r4, #16]
   192f0:	2b00      	cmp	r3, #0
   192f2:	d0d8      	beq.n	192a6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   192f4:	68a0      	ldr	r0, [r4, #8]
   192f6:	f00c f8b5 	bl	25464 <net_buf_frags_len>
   192fa:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   192fe:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19300:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19302:	7818      	ldrb	r0, [r3, #0]
   19304:	4285      	cmp	r5, r0
   19306:	bf94      	ite	ls
   19308:	2500      	movls	r5, #0
   1930a:	2501      	movhi	r5, #1
   1930c:	e7cc      	b.n	192a8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1930e:	2501      	movs	r5, #1
   19310:	e7ca      	b.n	192a8 <read_type_cb+0x38>
   19312:	bf00      	nop
   19314:	00025481 	.word	0x00025481

00019318 <find_type_cb>:
{
   19318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1931c:	f8d2 9000 	ldr.w	r9, [r2]
{
   19320:	b091      	sub	sp, #68	; 0x44
   19322:	4607      	mov	r7, r0
   19324:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19326:	2400      	movs	r4, #0
   19328:	f642 0301 	movw	r3, #10241	; 0x2801
   1932c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1932e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19332:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   19336:	a90b      	add	r1, sp, #44	; 0x2c
{
   19338:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1933a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1933e:	f00b fc93 	bl	24c68 <bt_uuid_cmp>
   19342:	2800      	cmp	r0, #0
   19344:	d064      	beq.n	19410 <find_type_cb+0xf8>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   19346:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1934a:	6838      	ldr	r0, [r7, #0]
   1934c:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   19350:	a90b      	add	r1, sp, #44	; 0x2c
   19352:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   19356:	f00b fc87 	bl	24c68 <bt_uuid_cmp>
   1935a:	4604      	mov	r4, r0
   1935c:	b148      	cbz	r0, 19372 <find_type_cb+0x5a>
		if (data->group &&
   1935e:	68ab      	ldr	r3, [r5, #8]
   19360:	b11b      	cbz	r3, 1936a <find_type_cb+0x52>
   19362:	885a      	ldrh	r2, [r3, #2]
   19364:	42b2      	cmp	r2, r6
   19366:	d200      	bcs.n	1936a <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
   19368:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1936a:	2001      	movs	r0, #1
}
   1936c:	b011      	add	sp, #68	; 0x44
   1936e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   19372:	6869      	ldr	r1, [r5, #4]
   19374:	4608      	mov	r0, r1
   19376:	f00c f875 	bl	25464 <net_buf_frags_len>
   1937a:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1937e:	1a1b      	subs	r3, r3, r0
   19380:	2b03      	cmp	r3, #3
   19382:	d922      	bls.n	193ca <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
   19384:	4608      	mov	r0, r1
   19386:	f003 ffc7 	bl	1d318 <net_buf_frag_last>
   1938a:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1938c:	6868      	ldr	r0, [r5, #4]
   1938e:	f00c f869 	bl	25464 <net_buf_frags_len>
   19392:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
   19396:	f104 0b08 	add.w	fp, r4, #8
   1939a:	ebaa 0a00 	sub.w	sl, sl, r0
   1939e:	4658      	mov	r0, fp
   193a0:	f00d f933 	bl	2660a <net_buf_simple_tailroom>
   193a4:	4582      	cmp	sl, r0
   193a6:	d212      	bcs.n	193ce <find_type_cb+0xb6>
   193a8:	6868      	ldr	r0, [r5, #4]
   193aa:	f00c f85b 	bl	25464 <net_buf_frags_len>
   193ae:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   193b2:	1a18      	subs	r0, r3, r0
	if (!len) {
   193b4:	b998      	cbnz	r0, 193de <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   193b6:	686b      	ldr	r3, [r5, #4]
   193b8:	7998      	ldrb	r0, [r3, #6]
   193ba:	f003 fdd3 	bl	1cf64 <net_buf_pool_get>
   193be:	2200      	movs	r2, #0
   193c0:	2300      	movs	r3, #0
   193c2:	f00d f911 	bl	265e8 <net_buf_alloc_fixed>
		if (!frag) {
   193c6:	4604      	mov	r4, r0
   193c8:	b928      	cbnz	r0, 193d6 <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
   193ca:	4620      	mov	r0, r4
   193cc:	e7ce      	b.n	1936c <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   193ce:	4658      	mov	r0, fp
   193d0:	f00d f91b 	bl	2660a <net_buf_simple_tailroom>
   193d4:	e7ee      	b.n	193b4 <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
   193d6:	4601      	mov	r1, r0
   193d8:	6868      	ldr	r0, [r5, #4]
   193da:	f003 ffdd 	bl	1d398 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   193de:	2300      	movs	r3, #0
   193e0:	9300      	str	r3, [sp, #0]
   193e2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   193e6:	4639      	mov	r1, r7
   193e8:	2310      	movs	r3, #16
   193ea:	aa02      	add	r2, sp, #8
   193ec:	4640      	mov	r0, r8
   193ee:	47c8      	blx	r9
	if (read < 0) {
   193f0:	1e07      	subs	r7, r0, #0
   193f2:	db0d      	blt.n	19410 <find_type_cb+0xf8>
	if (read != data->value_len) {
   193f4:	7c2a      	ldrb	r2, [r5, #16]
   193f6:	68e8      	ldr	r0, [r5, #12]
   193f8:	42ba      	cmp	r2, r7
   193fa:	d027      	beq.n	1944c <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   193fc:	4601      	mov	r1, r0
   193fe:	a80b      	add	r0, sp, #44	; 0x2c
   19400:	f00b fc5c 	bl	24cbc <bt_uuid_create>
   19404:	b938      	cbnz	r0, 19416 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   19406:	7c2a      	ldrb	r2, [r5, #16]
   19408:	4812      	ldr	r0, [pc, #72]	; (19454 <find_type_cb+0x13c>)
   1940a:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   1940c:	f009 fc8e 	bl	22d2c <printk>
	data->group = NULL;
   19410:	2300      	movs	r3, #0
   19412:	60ab      	str	r3, [r5, #8]
   19414:	e7a9      	b.n	1936a <find_type_cb+0x52>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   19416:	b2fa      	uxtb	r2, r7
   19418:	a902      	add	r1, sp, #8
   1941a:	a806      	add	r0, sp, #24
   1941c:	f00b fc4e 	bl	24cbc <bt_uuid_create>
   19420:	b918      	cbnz	r0, 1942a <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   19422:	480d      	ldr	r0, [pc, #52]	; (19458 <find_type_cb+0x140>)
   19424:	463a      	mov	r2, r7
   19426:	2157      	movs	r1, #87	; 0x57
   19428:	e7f0      	b.n	1940c <find_type_cb+0xf4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1942a:	a906      	add	r1, sp, #24
   1942c:	a80b      	add	r0, sp, #44	; 0x2c
   1942e:	f00b fc1b 	bl	24c68 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   19432:	2800      	cmp	r0, #0
   19434:	d1ec      	bne.n	19410 <find_type_cb+0xf8>
	data->err = 0x00;
   19436:	2300      	movs	r3, #0
   19438:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
   1943a:	2104      	movs	r1, #4
   1943c:	f104 0008 	add.w	r0, r4, #8
   19440:	f004 f824 	bl	1d48c <net_buf_simple_add>
   19444:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19446:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19448:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1944a:	e78e      	b.n	1936a <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
   1944c:	a902      	add	r1, sp, #8
   1944e:	f00b fb29 	bl	24aa4 <memcmp>
   19452:	e7ee      	b.n	19432 <find_type_cb+0x11a>
   19454:	00029504 	.word	0x00029504
   19458:	00029528 	.word	0x00029528

0001945c <att_get>:
{
   1945c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1945e:	7b43      	ldrb	r3, [r0, #13]
   19460:	2b07      	cmp	r3, #7
   19462:	d005      	beq.n	19470 <att_get+0x14>
		BT_WARN("Not connected");
   19464:	480f      	ldr	r0, [pc, #60]	; (194a4 <att_get+0x48>)
   19466:	2157      	movs	r1, #87	; 0x57
		BT_WARN("ATT channel flagged as disconnected");
   19468:	f009 fc60 	bl	22d2c <printk>
		return NULL;
   1946c:	2400      	movs	r4, #0
   1946e:	e008      	b.n	19482 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19470:	2104      	movs	r1, #4
   19472:	f00b ffc1 	bl	253f8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19476:	4604      	mov	r4, r0
   19478:	b928      	cbnz	r0, 19486 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1947a:	480b      	ldr	r0, [pc, #44]	; (194a8 <att_get+0x4c>)
   1947c:	2145      	movs	r1, #69	; 0x45
   1947e:	f009 fc55 	bl	22d2c <printk>
}
   19482:	4620      	mov	r0, r4
   19484:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19486:	f3bf 8f5b 	dmb	ish
   1948a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1948e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   19492:	075b      	lsls	r3, r3, #29
   19494:	d502      	bpl.n	1949c <att_get+0x40>
		BT_WARN("ATT channel flagged as disconnected");
   19496:	4805      	ldr	r0, [pc, #20]	; (194ac <att_get+0x50>)
   19498:	2157      	movs	r1, #87	; 0x57
   1949a:	e7e5      	b.n	19468 <att_get+0xc>
	return att_chan->att;
   1949c:	f850 4c08 	ldr.w	r4, [r0, #-8]
   194a0:	e7ef      	b.n	19482 <att_get+0x26>
   194a2:	bf00      	nop
   194a4:	0002954c 	.word	0x0002954c
   194a8:	0002955f 	.word	0x0002955f
   194ac:	0002957f 	.word	0x0002957f

000194b0 <chan_req_sent>:
	if (chan->req) {
   194b0:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   194b4:	b13b      	cbz	r3, 194c6 <chan_req_sent+0x16>
   194b6:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   194ba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   194be:	4802      	ldr	r0, [pc, #8]	; (194c8 <chan_req_sent+0x18>)
   194c0:	2300      	movs	r3, #0
   194c2:	f008 bd03 	b.w	21ecc <k_delayed_work_submit_to_queue>
}
   194c6:	4770      	bx	lr
   194c8:	200026c8 	.word	0x200026c8

000194cc <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   194cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   194ce:	2300      	movs	r3, #0
{
   194d0:	4606      	mov	r6, r0
   194d2:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   194d4:	4826      	ldr	r0, [pc, #152]	; (19570 <bt_att_accept+0xa4>)
   194d6:	2200      	movs	r2, #0
   194d8:	4669      	mov	r1, sp
   194da:	f006 ff0f 	bl	202fc <k_mem_slab_alloc>
   194de:	4604      	mov	r4, r0
   194e0:	b148      	cbz	r0, 194f6 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   194e2:	4824      	ldr	r0, [pc, #144]	; (19574 <bt_att_accept+0xa8>)
   194e4:	4632      	mov	r2, r6
   194e6:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No available ATT channel for conn %p", att->conn);
   194e8:	f009 fc20 	bl	22d2c <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   194ec:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   194f0:	4620      	mov	r0, r4
   194f2:	b003      	add	sp, #12
   194f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   194f6:	4601      	mov	r1, r0
   194f8:	2230      	movs	r2, #48	; 0x30
   194fa:	9800      	ldr	r0, [sp, #0]
   194fc:	f00b fb0d 	bl	24b1a <memset>
	att->conn = conn;
   19500:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19502:	481d      	ldr	r0, [pc, #116]	; (19578 <bt_att_accept+0xac>)
	list->tail = NULL;
   19504:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   19506:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1950a:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   1950e:	2200      	movs	r2, #0
   19510:	2300      	movs	r3, #0
   19512:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19514:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19516:	f006 fef1 	bl	202fc <k_mem_slab_alloc>
   1951a:	4604      	mov	r4, r0
   1951c:	b118      	cbz	r0, 19526 <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1951e:	682a      	ldr	r2, [r5, #0]
   19520:	4816      	ldr	r0, [pc, #88]	; (1957c <bt_att_accept+0xb0>)
   19522:	2145      	movs	r1, #69	; 0x45
   19524:	e7e0      	b.n	194e8 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   19526:	4601      	mov	r1, r0
   19528:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1952c:	9801      	ldr	r0, [sp, #4]
   1952e:	f00b faf4 	bl	24b1a <memset>
	chan->chan.chan.ops = &ops;
   19532:	9801      	ldr	r0, [sp, #4]
   19534:	4b12      	ldr	r3, [pc, #72]	; (19580 <bt_att_accept+0xb4>)
   19536:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   19538:	30d0      	adds	r0, #208	; 0xd0
   1953a:	f00d fad6 	bl	26aea <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   1953e:	9801      	ldr	r0, [sp, #4]
   19540:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   19544:	2203      	movs	r2, #3
   19546:	4611      	mov	r1, r2
   19548:	f00d fb39 	bl	26bbe <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1954c:	9b01      	ldr	r3, [sp, #4]
   1954e:	f3bf 8f5b 	dmb	ish
   19552:	33c8      	adds	r3, #200	; 0xc8
   19554:	e853 2f00 	ldrex	r2, [r3]
   19558:	e843 4100 	strex	r1, r4, [r3]
   1955c:	2900      	cmp	r1, #0
   1955e:	d1f9      	bne.n	19554 <bt_att_accept+0x88>
   19560:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19564:	9b01      	ldr	r3, [sp, #4]
   19566:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1956a:	603b      	str	r3, [r7, #0]
	return 0;
   1956c:	e7c0      	b.n	194f0 <bt_att_accept+0x24>
   1956e:	bf00      	nop
   19570:	20000810 	.word	0x20000810
   19574:	000295a8 	.word	0x000295a8
   19578:	2000082c 	.word	0x2000082c
   1957c:	000295d2 	.word	0x000295d2
   19580:	20000604 	.word	0x20000604

00019584 <bt_att_connected>:
{
   19584:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   19586:	2104      	movs	r1, #4
{
   19588:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1958a:	6800      	ldr	r0, [r0, #0]
   1958c:	f00b ff24 	bl	253d8 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   19590:	4605      	mov	r5, r0
   19592:	b950      	cbnz	r0, 195aa <bt_att_connected+0x26>
   19594:	4917      	ldr	r1, [pc, #92]	; (195f4 <bt_att_connected+0x70>)
   19596:	4818      	ldr	r0, [pc, #96]	; (195f8 <bt_att_connected+0x74>)
   19598:	f640 223d 	movw	r2, #2621	; 0xa3d
   1959c:	f009 fbc6 	bl	22d2c <printk>
   195a0:	4814      	ldr	r0, [pc, #80]	; (195f4 <bt_att_connected+0x70>)
   195a2:	f640 213d 	movw	r1, #2621	; 0xa3d
   195a6:	f009 fe24 	bl	231f2 <assert_post_action>
	struct bt_att *att = att_chan->att;
   195aa:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   195ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   195b0:	b91b      	cbnz	r3, 195ba <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   195b2:	f105 000c 	add.w	r0, r5, #12
   195b6:	f00d fa98 	bl	26aea <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   195ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   195bc:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   195c0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   195c2:	f504 739a 	add.w	r3, r4, #308	; 0x134
	list->head = node;
   195c6:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   195c8:	b902      	cbnz	r2, 195cc <bt_att_connected+0x48>
	list->tail = node;
   195ca:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   195cc:	f3bf 8f5b 	dmb	ish
   195d0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   195d4:	4909      	ldr	r1, [pc, #36]	; (195fc <bt_att_connected+0x78>)
   195d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   195da:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   195dc:	bf5e      	ittt	pl
   195de:	2317      	movpl	r3, #23
   195e0:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   195e4:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   195e8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
}
   195ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
   195f0:	f00d bb67 	b.w	26cc2 <k_delayed_work_init>
   195f4:	000295fc 	.word	0x000295fc
   195f8:	00027c9a 	.word	0x00027c9a
   195fc:	0001a17d 	.word	0x0001a17d

00019600 <chan_send>:
{
   19600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   19604:	688b      	ldr	r3, [r1, #8]
   19606:	781b      	ldrb	r3, [r3, #0]
   19608:	2bd2      	cmp	r3, #210	; 0xd2
{
   1960a:	4605      	mov	r5, r0
   1960c:	460c      	mov	r4, r1
   1960e:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   19610:	d110      	bne.n	19634 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   19612:	6803      	ldr	r3, [r0, #0]
   19614:	6818      	ldr	r0, [r3, #0]
   19616:	f00c ffa2 	bl	2655e <bt_smp_sign>
		if (err) {
   1961a:	4606      	mov	r6, r0
   1961c:	b150      	cbz	r0, 19634 <chan_send+0x34>
			BT_ERR("Error signing data");
   1961e:	4825      	ldr	r0, [pc, #148]	; (196b4 <chan_send+0xb4>)
   19620:	2145      	movs	r1, #69	; 0x45
   19622:	f009 fb83 	bl	22d2c <printk>
		net_buf_unref(buf);
   19626:	4620      	mov	r0, r4
   19628:	f003 fe1a 	bl	1d260 <net_buf_unref>
}
   1962c:	4630      	mov	r0, r6
   1962e:	b003      	add	sp, #12
   19630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   19634:	f104 0008 	add.w	r0, r4, #8
   19638:	f00c ffe3 	bl	26602 <net_buf_simple_headroom>
	state->len = buf->len;
   1963c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19640:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   19642:	f1b9 0f00 	cmp.w	r9, #0
   19646:	d10a      	bne.n	1965e <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   19648:	68a3      	ldr	r3, [r4, #8]
   1964a:	7818      	ldrb	r0, [r3, #0]
   1964c:	f00b ff2a 	bl	254a4 <att_op_get_type>
   19650:	1e43      	subs	r3, r0, #1
   19652:	b2db      	uxtb	r3, r3
   19654:	2b04      	cmp	r3, #4
   19656:	bf9c      	itt	ls
   19658:	4a17      	ldrls	r2, [pc, #92]	; (196b8 <chan_send+0xb8>)
   1965a:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1965e:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   19660:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19664:	4620      	mov	r0, r4
   19666:	681e      	ldr	r6, [r3, #0]
   19668:	f003 fe3e 	bl	1d2e8 <net_buf_ref>
   1966c:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   19670:	4b12      	ldr	r3, [pc, #72]	; (196bc <chan_send+0xbc>)
   19672:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19674:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   19676:	d019      	beq.n	196ac <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   19678:	4b11      	ldr	r3, [pc, #68]	; (196c0 <chan_send+0xc0>)
   1967a:	4299      	cmp	r1, r3
   1967c:	d018      	beq.n	196b0 <chan_send+0xb0>
		return att_sent;
   1967e:	f8df c054 	ldr.w	ip, [pc, #84]	; 196d4 <chan_send+0xd4>
   19682:	4b10      	ldr	r3, [pc, #64]	; (196c4 <chan_send+0xc4>)
   19684:	4810      	ldr	r0, [pc, #64]	; (196c8 <chan_send+0xc8>)
   19686:	4561      	cmp	r1, ip
   19688:	bf18      	it	ne
   1968a:	4603      	movne	r3, r0
				&chan->chan.chan);
   1968c:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1968e:	4630      	mov	r0, r6
   19690:	9500      	str	r5, [sp, #0]
   19692:	2104      	movs	r1, #4
   19694:	f00b fe87 	bl	253a6 <bt_l2cap_send_cb>
	if (!err) {
   19698:	4606      	mov	r6, r0
   1969a:	2800      	cmp	r0, #0
   1969c:	d0c3      	beq.n	19626 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   1969e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   196a0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   196a4:	fa10 f787 	uxtah	r7, r0, r7
   196a8:	60a7      	str	r7, [r4, #8]
}
   196aa:	e7bf      	b.n	1962c <chan_send+0x2c>
		return att_rsp_sent;
   196ac:	4b07      	ldr	r3, [pc, #28]	; (196cc <chan_send+0xcc>)
   196ae:	e7ed      	b.n	1968c <chan_send+0x8c>
		return att_cfm_sent;
   196b0:	4b07      	ldr	r3, [pc, #28]	; (196d0 <chan_send+0xd0>)
   196b2:	e7eb      	b.n	1968c <chan_send+0x8c>
   196b4:	0002962b 	.word	0x0002962b
   196b8:	00027638 	.word	0x00027638
   196bc:	00025703 	.word	0x00025703
   196c0:	000256e7 	.word	0x000256e7
   196c4:	0001919d 	.word	0x0001919d
   196c8:	00025475 	.word	0x00025475
   196cc:	0001918d 	.word	0x0001918d
   196d0:	0001917d 	.word	0x0001917d
   196d4:	000194b1 	.word	0x000194b1

000196d8 <bt_att_chan_req_send>:
{
   196d8:	b570      	push	{r4, r5, r6, lr}
   196da:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   196dc:	4604      	mov	r4, r0
   196de:	b950      	cbnz	r0, 196f6 <bt_att_chan_req_send+0x1e>
   196e0:	4924      	ldr	r1, [pc, #144]	; (19774 <bt_att_chan_req_send+0x9c>)
   196e2:	4825      	ldr	r0, [pc, #148]	; (19778 <bt_att_chan_req_send+0xa0>)
   196e4:	f240 2231 	movw	r2, #561	; 0x231
   196e8:	f009 fb20 	bl	22d2c <printk>
   196ec:	4821      	ldr	r0, [pc, #132]	; (19774 <bt_att_chan_req_send+0x9c>)
   196ee:	f240 2131 	movw	r1, #561	; 0x231
   196f2:	f009 fd7e 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(req);
   196f6:	b955      	cbnz	r5, 1970e <bt_att_chan_req_send+0x36>
   196f8:	491e      	ldr	r1, [pc, #120]	; (19774 <bt_att_chan_req_send+0x9c>)
   196fa:	481f      	ldr	r0, [pc, #124]	; (19778 <bt_att_chan_req_send+0xa0>)
   196fc:	f240 2232 	movw	r2, #562	; 0x232
   19700:	f009 fb14 	bl	22d2c <printk>
   19704:	481b      	ldr	r0, [pc, #108]	; (19774 <bt_att_chan_req_send+0x9c>)
   19706:	f240 2132 	movw	r1, #562	; 0x232
   1970a:	f009 fd72 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1970e:	686b      	ldr	r3, [r5, #4]
   19710:	b953      	cbnz	r3, 19728 <bt_att_chan_req_send+0x50>
   19712:	4918      	ldr	r1, [pc, #96]	; (19774 <bt_att_chan_req_send+0x9c>)
   19714:	4818      	ldr	r0, [pc, #96]	; (19778 <bt_att_chan_req_send+0xa0>)
   19716:	f240 2233 	movw	r2, #563	; 0x233
   1971a:	f009 fb07 	bl	22d2c <printk>
   1971e:	4815      	ldr	r0, [pc, #84]	; (19774 <bt_att_chan_req_send+0x9c>)
   19720:	f240 2133 	movw	r1, #563	; 0x233
   19724:	f009 fd65 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   19728:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1972c:	b153      	cbz	r3, 19744 <bt_att_chan_req_send+0x6c>
   1972e:	4911      	ldr	r1, [pc, #68]	; (19774 <bt_att_chan_req_send+0x9c>)
   19730:	4811      	ldr	r0, [pc, #68]	; (19778 <bt_att_chan_req_send+0xa0>)
   19732:	f44f 720d 	mov.w	r2, #564	; 0x234
   19736:	f009 faf9 	bl	22d2c <printk>
   1973a:	480e      	ldr	r0, [pc, #56]	; (19774 <bt_att_chan_req_send+0x9c>)
   1973c:	f44f 710d 	mov.w	r1, #564	; 0x234
   19740:	f009 fd57 	bl	231f2 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   19744:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   19748:	2200      	movs	r2, #0
   1974a:	2300      	movs	r3, #0
   1974c:	4630      	mov	r0, r6
   1974e:	f008 f98b 	bl	21a68 <z_impl_k_sem_take>
   19752:	2800      	cmp	r0, #0
   19754:	db0a      	blt.n	1976c <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   19756:	4620      	mov	r0, r4
   19758:	4629      	mov	r1, r5
   1975a:	f00c f838 	bl	257ce <chan_req_send>
	if (err < 0) {
   1975e:	1e04      	subs	r4, r0, #0
   19760:	da02      	bge.n	19768 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   19762:	4630      	mov	r0, r6
   19764:	f008 f944 	bl	219f0 <z_impl_k_sem_give>
}
   19768:	4620      	mov	r0, r4
   1976a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1976c:	f06f 040a 	mvn.w	r4, #10
   19770:	e7fa      	b.n	19768 <bt_att_chan_req_send+0x90>
   19772:	bf00      	nop
   19774:	000295fc 	.word	0x000295fc
   19778:	00027c9a 	.word	0x00027c9a

0001977c <att_write_cmd>:
{
   1977c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1977e:	4604      	mov	r4, r0
   19780:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
   19782:	f101 0008 	add.w	r0, r1, #8
{
   19786:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
   19788:	f00c ff33 	bl	265f2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1978c:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1978e:	68af      	ldr	r7, [r5, #8]
   19790:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
   19792:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19794:	2100      	movs	r1, #0
   19796:	6818      	ldr	r0, [r3, #0]
   19798:	f00c fb73 	bl	25e82 <bt_gatt_change_aware>
   1979c:	b328      	cbz	r0, 197ea <att_write_cmd+0x6e>
	if (!handle) {
   1979e:	b336      	cbz	r6, 197ee <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   197a0:	2218      	movs	r2, #24
   197a2:	2100      	movs	r1, #0
   197a4:	4668      	mov	r0, sp
   197a6:	f00b f9b8 	bl	24b1a <memset>
	data.conn = chan->att->conn;
   197aa:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   197ac:	4a11      	ldr	r2, [pc, #68]	; (197f4 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   197ae:	681b      	ldr	r3, [r3, #0]
   197b0:	9300      	str	r3, [sp, #0]
	data.req = req;
   197b2:	2300      	movs	r3, #0
   197b4:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   197b8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   197bc:	2301      	movs	r3, #1
   197be:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   197c2:	4631      	mov	r1, r6
   197c4:	466b      	mov	r3, sp
   197c6:	4630      	mov	r0, r6
	data.value = value;
   197c8:	9703      	str	r7, [sp, #12]
	data.len = len;
   197ca:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   197ce:	f00b fe96 	bl	254fe <bt_gatt_foreach_attr>
	if (data.err) {
   197d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   197d6:	b92b      	cbnz	r3, 197e4 <att_write_cmd+0x68>
	if (data.buf) {
   197d8:	9901      	ldr	r1, [sp, #4]
   197da:	b119      	cbz	r1, 197e4 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   197dc:	4a06      	ldr	r2, [pc, #24]	; (197f8 <att_write_cmd+0x7c>)
   197de:	4620      	mov	r0, r4
   197e0:	f00c f855 	bl	2588e <bt_att_chan_send_rsp>
   197e4:	2000      	movs	r0, #0
}
   197e6:	b007      	add	sp, #28
   197e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   197ea:	2012      	movs	r0, #18
   197ec:	e7fb      	b.n	197e6 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   197ee:	2001      	movs	r0, #1
   197f0:	e7f9      	b.n	197e6 <att_write_cmd+0x6a>
   197f2:	bf00      	nop
   197f4:	0002571f 	.word	0x0002571f
   197f8:	00025703 	.word	0x00025703

000197fc <bt_att_chan_create_pdu>:
{
   197fc:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   197fe:	1c53      	adds	r3, r2, #1
   19800:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
   19804:	4293      	cmp	r3, r2
{
   19806:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19808:	d906      	bls.n	19818 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1980a:	4814      	ldr	r0, [pc, #80]	; (1985c <bt_att_chan_create_pdu+0x60>)
   1980c:	2157      	movs	r1, #87	; 0x57
   1980e:	f009 fa8d 	bl	22d2c <printk>
		return NULL;
   19812:	2400      	movs	r4, #0
}
   19814:	4620      	mov	r0, r4
   19816:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   19818:	4608      	mov	r0, r1
   1981a:	f00b fe43 	bl	254a4 <att_op_get_type>
   1981e:	2802      	cmp	r0, #2
   19820:	d001      	beq.n	19826 <bt_att_chan_create_pdu+0x2a>
   19822:	2804      	cmp	r0, #4
   19824:	d10e      	bne.n	19844 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   19826:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1982a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1982c:	2100      	movs	r1, #0
   1982e:	4608      	mov	r0, r1
   19830:	f00b fdb6 	bl	253a0 <bt_l2cap_create_pdu_timeout>
   19834:	4604      	mov	r4, r0
	if (!buf) {
   19836:	b950      	cbnz	r0, 1984e <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   19838:	4809      	ldr	r0, [pc, #36]	; (19860 <bt_att_chan_create_pdu+0x64>)
   1983a:	462a      	mov	r2, r5
   1983c:	2145      	movs	r1, #69	; 0x45
   1983e:	f009 fa75 	bl	22d2c <printk>
		return NULL;
   19842:	e7e7      	b.n	19814 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   19844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1984c:	e7ee      	b.n	1982c <bt_att_chan_create_pdu+0x30>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1984e:	2101      	movs	r1, #1
   19850:	3008      	adds	r0, #8
   19852:	f003 fe1b 	bl	1d48c <net_buf_simple_add>
	hdr->code = op;
   19856:	7005      	strb	r5, [r0, #0]
	return buf;
   19858:	e7dc      	b.n	19814 <bt_att_chan_create_pdu+0x18>
   1985a:	bf00      	nop
   1985c:	00029643 	.word	0x00029643
   19860:	00029382 	.word	0x00029382

00019864 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   19864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19868:	4688      	mov	r8, r1
   1986a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1986c:	2101      	movs	r1, #1
   1986e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   19870:	4605      	mov	r5, r0
   19872:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   19874:	f7ff ffc2 	bl	197fc <bt_att_chan_create_pdu>
	if (!buf) {
   19878:	4604      	mov	r4, r0
   1987a:	b178      	cbz	r0, 1989c <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
   1987c:	2104      	movs	r1, #4
   1987e:	3008      	adds	r0, #8
   19880:	f003 fe04 	bl	1d48c <net_buf_simple_add>
	rsp->request = req;
   19884:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   19888:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1988a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1988e:	4621      	mov	r1, r4
   19890:	4628      	mov	r0, r5
   19892:	4a03      	ldr	r2, [pc, #12]	; (198a0 <send_err_rsp.part.0+0x3c>)
}
   19894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   19898:	f00b bff9 	b.w	2588e <bt_att_chan_send_rsp>
}
   1989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198a0:	00025703 	.word	0x00025703

000198a4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   198a4:	898b      	ldrh	r3, [r1, #12]
{
   198a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198aa:	4604      	mov	r4, r0
   198ac:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   198ae:	b933      	cbnz	r3, 198be <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   198b0:	483c      	ldr	r0, [pc, #240]	; (199a4 <bt_att_recv+0x100>)
   198b2:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
   198b4:	f009 fa3a 	bl	22d2c <printk>
}
   198b8:	2000      	movs	r0, #0
   198ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   198be:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   198c0:	f1a0 0708 	sub.w	r7, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   198c4:	f106 0008 	add.w	r0, r6, #8
   198c8:	f003 fdc2 	bl	1d450 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
   198cc:	4936      	ldr	r1, [pc, #216]	; (199a8 <bt_att_recv+0x104>)
   198ce:	7802      	ldrb	r2, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   198d0:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   198d2:	2300      	movs	r3, #0
   198d4:	468c      	mov	ip, r1
		if (hdr->code == handlers[i].op) {
   198d6:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   198da:	4290      	cmp	r0, r2
   198dc:	d119      	bne.n	19912 <bt_att_recv+0x6e>
		if (handler->type == ATT_REQUEST &&
   198de:	00d8      	lsls	r0, r3, #3
   198e0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   198e4:	f893 8002 	ldrb.w	r8, [r3, #2]
   198e8:	f1b8 0f01 	cmp.w	r8, #1
   198ec:	d126      	bne.n	1993c <bt_att_recv+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   198ee:	f3bf 8f5b 	dmb	ish
   198f2:	34c0      	adds	r4, #192	; 0xc0
   198f4:	e854 3f00 	ldrex	r3, [r4]
   198f8:	f043 0201 	orr.w	r2, r3, #1
   198fc:	e844 2100 	strex	r1, r2, [r4]
   19900:	2900      	cmp	r1, #0
   19902:	d1f7      	bne.n	198f4 <bt_att_recv+0x50>
   19904:	f3bf 8f5b 	dmb	ish
   19908:	07da      	lsls	r2, r3, #31
   1990a:	d52c      	bpl.n	19966 <bt_att_recv+0xc2>
			BT_WARN("Ignoring unexpected request");
   1990c:	4827      	ldr	r0, [pc, #156]	; (199ac <bt_att_recv+0x108>)
   1990e:	2157      	movs	r1, #87	; 0x57
   19910:	e7d0      	b.n	198b4 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19912:	3301      	adds	r3, #1
   19914:	2b0d      	cmp	r3, #13
   19916:	d1de      	bne.n	198d6 <bt_att_recv+0x32>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   19918:	4825      	ldr	r0, [pc, #148]	; (199b0 <bt_att_recv+0x10c>)
   1991a:	2157      	movs	r1, #87	; 0x57
   1991c:	f009 fa06 	bl	22d2c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   19920:	7829      	ldrb	r1, [r5, #0]
   19922:	4608      	mov	r0, r1
   19924:	f00b fdbe 	bl	254a4 <att_op_get_type>
   19928:	2800      	cmp	r0, #0
   1992a:	d0c5      	beq.n	198b8 <bt_att_recv+0x14>
	if (!req) {
   1992c:	2900      	cmp	r1, #0
   1992e:	d0c3      	beq.n	198b8 <bt_att_recv+0x14>
   19930:	2306      	movs	r3, #6
   19932:	2200      	movs	r2, #0
   19934:	4638      	mov	r0, r7
   19936:	f7ff ff95 	bl	19864 <send_err_rsp.part.0>
   1993a:	e7bd      	b.n	198b8 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   1993c:	f1b8 0f05 	cmp.w	r8, #5
   19940:	d111      	bne.n	19966 <bt_att_recv+0xc2>
   19942:	f3bf 8f5b 	dmb	ish
   19946:	34c0      	adds	r4, #192	; 0xc0
   19948:	e854 3f00 	ldrex	r3, [r4]
   1994c:	f043 0202 	orr.w	r2, r3, #2
   19950:	e844 2100 	strex	r1, r2, [r4]
   19954:	2900      	cmp	r1, #0
   19956:	d1f7      	bne.n	19948 <bt_att_recv+0xa4>
   19958:	f3bf 8f5b 	dmb	ish
   1995c:	079b      	lsls	r3, r3, #30
   1995e:	d502      	bpl.n	19966 <bt_att_recv+0xc2>
			BT_WARN("Ignoring unexpected indication");
   19960:	4814      	ldr	r0, [pc, #80]	; (199b4 <bt_att_recv+0x110>)
   19962:	2157      	movs	r1, #87	; 0x57
   19964:	e7a6      	b.n	198b4 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   19966:	eb0c 0300 	add.w	r3, ip, r0
   1996a:	89b2      	ldrh	r2, [r6, #12]
   1996c:	7859      	ldrb	r1, [r3, #1]
   1996e:	4291      	cmp	r1, r2
   19970:	d909      	bls.n	19986 <bt_att_recv+0xe2>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19972:	782b      	ldrb	r3, [r5, #0]
   19974:	4810      	ldr	r0, [pc, #64]	; (199b8 <bt_att_recv+0x114>)
   19976:	2145      	movs	r1, #69	; 0x45
   19978:	f009 f9d8 	bl	22d2c <printk>
	if (handler->type == ATT_REQUEST && err) {
   1997c:	f1b8 0f01 	cmp.w	r8, #1
   19980:	d19a      	bne.n	198b8 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   19982:	2304      	movs	r3, #4
   19984:	e009      	b.n	1999a <bt_att_recv+0xf6>
		err = handler->func(att_chan, buf);
   19986:	685b      	ldr	r3, [r3, #4]
   19988:	4631      	mov	r1, r6
   1998a:	4638      	mov	r0, r7
   1998c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1998e:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   19992:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   19994:	d190      	bne.n	198b8 <bt_att_recv+0x14>
   19996:	2800      	cmp	r0, #0
   19998:	d08e      	beq.n	198b8 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1999a:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1999c:	2900      	cmp	r1, #0
   1999e:	d08b      	beq.n	198b8 <bt_att_recv+0x14>
   199a0:	e7c7      	b.n	19932 <bt_att_recv+0x8e>
   199a2:	bf00      	nop
   199a4:	0002966d 	.word	0x0002966d
   199a8:	0002764c 	.word	0x0002764c
   199ac:	0002968d 	.word	0x0002968d
   199b0:	000296f6 	.word	0x000296f6
   199b4:	000296ae 	.word	0x000296ae
   199b8:	000296d2 	.word	0x000296d2

000199bc <att_write_req>:
{
   199bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   199c0:	4604      	mov	r4, r0
   199c2:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
   199c4:	f101 0008 	add.w	r0, r1, #8
{
   199c8:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
   199ca:	f00c fe12 	bl	265f2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   199ce:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   199d0:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   199d4:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
   199d6:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   199d8:	2101      	movs	r1, #1
   199da:	6818      	ldr	r0, [r3, #0]
   199dc:	f00c fa51 	bl	25e82 <bt_gatt_change_aware>
   199e0:	2800      	cmp	r0, #0
   199e2:	d040      	beq.n	19a66 <att_write_req+0xaa>
	if (!handle) {
   199e4:	2e00      	cmp	r6, #0
   199e6:	d040      	beq.n	19a6a <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   199e8:	2218      	movs	r2, #24
   199ea:	2100      	movs	r1, #0
   199ec:	4668      	mov	r0, sp
   199ee:	f00b f894 	bl	24b1a <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   199f2:	2200      	movs	r2, #0
   199f4:	2113      	movs	r1, #19
   199f6:	4620      	mov	r0, r4
   199f8:	f7ff ff00 	bl	197fc <bt_att_chan_create_pdu>
   199fc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   199fe:	b380      	cbz	r0, 19a62 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   19a00:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19a02:	4a1b      	ldr	r2, [pc, #108]	; (19a70 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   19a04:	681b      	ldr	r3, [r3, #0]
   19a06:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19a08:	2301      	movs	r3, #1
   19a0a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   19a0e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   19a12:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19a14:	466b      	mov	r3, sp
   19a16:	4631      	mov	r1, r6
   19a18:	4630      	mov	r0, r6
	data.len = len;
   19a1a:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   19a1e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   19a22:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   19a26:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19a2a:	f00b fd68 	bl	254fe <bt_gatt_foreach_attr>
	if (data.err) {
   19a2e:	f89d 5014 	ldrb.w	r5, [sp, #20]
   19a32:	b175      	cbz	r5, 19a52 <att_write_req+0x96>
			net_buf_unref(data.buf);
   19a34:	9801      	ldr	r0, [sp, #4]
   19a36:	f003 fc13 	bl	1d260 <net_buf_unref>
	if (!req) {
   19a3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   19a3e:	4632      	mov	r2, r6
   19a40:	4641      	mov	r1, r8
   19a42:	4620      	mov	r0, r4
   19a44:	f7ff ff0e 	bl	19864 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   19a48:	463d      	mov	r5, r7
}
   19a4a:	4628      	mov	r0, r5
   19a4c:	b007      	add	sp, #28
   19a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   19a52:	9901      	ldr	r1, [sp, #4]
   19a54:	2900      	cmp	r1, #0
   19a56:	d0f8      	beq.n	19a4a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19a58:	4a06      	ldr	r2, [pc, #24]	; (19a74 <att_write_req+0xb8>)
   19a5a:	4620      	mov	r0, r4
   19a5c:	f00b ff17 	bl	2588e <bt_att_chan_send_rsp>
   19a60:	e7f3      	b.n	19a4a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   19a62:	250e      	movs	r5, #14
   19a64:	e7f1      	b.n	19a4a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19a66:	2512      	movs	r5, #18
   19a68:	e7ef      	b.n	19a4a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   19a6a:	2501      	movs	r5, #1
   19a6c:	e7ed      	b.n	19a4a <att_write_req+0x8e>
   19a6e:	bf00      	nop
   19a70:	0002571f 	.word	0x0002571f
   19a74:	00025703 	.word	0x00025703

00019a78 <bt_att_create_pdu>:
{
   19a78:	b570      	push	{r4, r5, r6, lr}
   19a7a:	460e      	mov	r6, r1
   19a7c:	4615      	mov	r5, r2
	att = att_get(conn);
   19a7e:	f7ff fced 	bl	1945c <att_get>
	if (!att) {
   19a82:	b190      	cbz	r0, 19aaa <bt_att_create_pdu+0x32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19a84:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
   19a86:	1c6a      	adds	r2, r5, #1
   19a88:	b15b      	cbz	r3, 19aa2 <bt_att_create_pdu+0x2a>
   19a8a:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   19a8e:	d008      	beq.n	19aa2 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19a90:	681b      	ldr	r3, [r3, #0]
   19a92:	b10b      	cbz	r3, 19a98 <bt_att_create_pdu+0x20>
   19a94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19a98:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   19a9c:	428a      	cmp	r2, r1
   19a9e:	d906      	bls.n	19aae <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19aa0:	b95b      	cbnz	r3, 19aba <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   19aa2:	480b      	ldr	r0, [pc, #44]	; (19ad0 <bt_att_create_pdu+0x58>)
   19aa4:	2157      	movs	r1, #87	; 0x57
   19aa6:	f009 f941 	bl	22d2c <printk>
}
   19aaa:	2000      	movs	r0, #0
   19aac:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   19aae:	462a      	mov	r2, r5
   19ab0:	4631      	mov	r1, r6
}
   19ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   19ab6:	f7ff bea1 	b.w	197fc <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19aba:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   19abe:	d004      	beq.n	19aca <bt_att_create_pdu+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19ac0:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19ac4:	b10c      	cbz	r4, 19aca <bt_att_create_pdu+0x52>
   19ac6:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   19aca:	4618      	mov	r0, r3
   19acc:	4623      	mov	r3, r4
   19ace:	e7e3      	b.n	19a98 <bt_att_create_pdu+0x20>
   19ad0:	00029715 	.word	0x00029715

00019ad4 <att_read_group_req>:
{
   19ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19ad8:	7b0c      	ldrb	r4, [r1, #12]
   19ada:	3c04      	subs	r4, #4
   19adc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19ade:	2c02      	cmp	r4, #2
{
   19ae0:	4605      	mov	r5, r0
   19ae2:	b08c      	sub	sp, #48	; 0x30
   19ae4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19ae6:	d001      	beq.n	19aec <att_read_group_req+0x18>
   19ae8:	2c10      	cmp	r4, #16
   19aea:	d16f      	bne.n	19bcc <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
   19aec:	2104      	movs	r1, #4
   19aee:	3008      	adds	r0, #8
   19af0:	f003 fcae 	bl	1d450 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19af4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19af8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19afa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19afc:	1d01      	adds	r1, r0, #4
   19afe:	4622      	mov	r2, r4
   19b00:	4640      	mov	r0, r8
   19b02:	f00b f8db 	bl	24cbc <bt_uuid_create>
   19b06:	2800      	cmp	r0, #0
   19b08:	d062      	beq.n	19bd0 <att_read_group_req+0xfc>
	if (!start || !end) {
   19b0a:	2e00      	cmp	r6, #0
   19b0c:	d03a      	beq.n	19b84 <att_read_group_req+0xb0>
   19b0e:	2400      	movs	r4, #0
   19b10:	2f00      	cmp	r7, #0
   19b12:	d036      	beq.n	19b82 <att_read_group_req+0xae>
	if (start > end) {
   19b14:	42be      	cmp	r6, r7
   19b16:	d835      	bhi.n	19b84 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19b18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19b1c:	a901      	add	r1, sp, #4
   19b1e:	4640      	mov	r0, r8
   19b20:	f88d 4004 	strb.w	r4, [sp, #4]
   19b24:	f8ad 3006 	strh.w	r3, [sp, #6]
   19b28:	f00b f89e 	bl	24c68 <bt_uuid_cmp>
   19b2c:	2800      	cmp	r0, #0
   19b2e:	d134      	bne.n	19b9a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   19b30:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19b32:	2214      	movs	r2, #20
   19b34:	2100      	movs	r1, #0
   19b36:	a807      	add	r0, sp, #28
   19b38:	f00a ffef 	bl	24b1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19b3c:	2201      	movs	r2, #1
   19b3e:	2111      	movs	r1, #17
   19b40:	4620      	mov	r0, r4
   19b42:	f7ff ff99 	bl	19a78 <bt_att_create_pdu>
   19b46:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   19b48:	2800      	cmp	r0, #0
   19b4a:	d041      	beq.n	19bd0 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19b4c:	2101      	movs	r1, #1
   19b4e:	3008      	adds	r0, #8
	data.uuid = uuid;
   19b50:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19b54:	f003 fc9a 	bl	1d48c <net_buf_simple_add>
	data.rsp->len = 0U;
   19b58:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19b5c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19b5e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   19b60:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19b64:	4a1b      	ldr	r2, [pc, #108]	; (19bd4 <att_read_group_req+0x100>)
	data.group = NULL;
   19b66:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19b6a:	4639      	mov	r1, r7
   19b6c:	4630      	mov	r0, r6
   19b6e:	f00b fcc6 	bl	254fe <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   19b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19b74:	781c      	ldrb	r4, [r3, #0]
   19b76:	bb1c      	cbnz	r4, 19bc0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   19b78:	9809      	ldr	r0, [sp, #36]	; 0x24
   19b7a:	f003 fb71 	bl	1d260 <net_buf_unref>
	if (!req) {
   19b7e:	230a      	movs	r3, #10
   19b80:	e018      	b.n	19bb4 <att_read_group_req+0xe0>
			*err = 0U;
   19b82:	463e      	mov	r6, r7
	if (!req) {
   19b84:	2301      	movs	r3, #1
   19b86:	4632      	mov	r2, r6
   19b88:	2110      	movs	r1, #16
   19b8a:	4628      	mov	r0, r5
   19b8c:	f7ff fe6a 	bl	19864 <send_err_rsp.part.0>
		return 0;
   19b90:	2400      	movs	r4, #0
}
   19b92:	4620      	mov	r0, r4
   19b94:	b00c      	add	sp, #48	; 0x30
   19b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   19b9a:	f642 0301 	movw	r3, #10241	; 0x2801
   19b9e:	a907      	add	r1, sp, #28
   19ba0:	4640      	mov	r0, r8
   19ba2:	f88d 401c 	strb.w	r4, [sp, #28]
   19ba6:	f8ad 301e 	strh.w	r3, [sp, #30]
   19baa:	f00b f85d 	bl	24c68 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19bae:	2800      	cmp	r0, #0
   19bb0:	d0be      	beq.n	19b30 <att_read_group_req+0x5c>
	if (!req) {
   19bb2:	2310      	movs	r3, #16
   19bb4:	4632      	mov	r2, r6
   19bb6:	2110      	movs	r1, #16
   19bb8:	4628      	mov	r0, r5
   19bba:	f7ff fe53 	bl	19864 <send_err_rsp.part.0>
		return 0;
   19bbe:	e7e8      	b.n	19b92 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19bc0:	4a05      	ldr	r2, [pc, #20]	; (19bd8 <att_read_group_req+0x104>)
   19bc2:	9909      	ldr	r1, [sp, #36]	; 0x24
   19bc4:	4628      	mov	r0, r5
   19bc6:	f00b fe62 	bl	2588e <bt_att_chan_send_rsp>
	return 0;
   19bca:	e7e1      	b.n	19b90 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   19bcc:	2404      	movs	r4, #4
   19bce:	e7e0      	b.n	19b92 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   19bd0:	240e      	movs	r4, #14
   19bd2:	e7de      	b.n	19b92 <att_read_group_req+0xbe>
   19bd4:	000191c5 	.word	0x000191c5
   19bd8:	00025703 	.word	0x00025703

00019bdc <att_read_mult_req>:
{
   19bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19be0:	6886      	ldr	r6, [r0, #8]
{
   19be2:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   19be4:	2210      	movs	r2, #16
{
   19be6:	4604      	mov	r4, r0
   19be8:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   19bea:	4668      	mov	r0, sp
   19bec:	2100      	movs	r1, #0
   19bee:	f00a ff94 	bl	24b1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19bf2:	2200      	movs	r2, #0
   19bf4:	210f      	movs	r1, #15
   19bf6:	4630      	mov	r0, r6
   19bf8:	f7ff ff3e 	bl	19a78 <bt_att_create_pdu>
   19bfc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19bfe:	b360      	cbz	r0, 19c5a <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19c00:	f8df 9060 	ldr.w	r9, [pc, #96]	; 19c64 <att_read_mult_req+0x88>
	data.chan = chan;
   19c04:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
   19c06:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19c0a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19c0e:	89ab      	ldrh	r3, [r5, #12]
   19c10:	2b01      	cmp	r3, #1
   19c12:	d805      	bhi.n	19c20 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19c14:	4a12      	ldr	r2, [pc, #72]	; (19c60 <att_read_mult_req+0x84>)
   19c16:	9902      	ldr	r1, [sp, #8]
   19c18:	4620      	mov	r0, r4
   19c1a:	f00b fe38 	bl	2588e <bt_att_chan_send_rsp>
   19c1e:	e018      	b.n	19c52 <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
   19c20:	4638      	mov	r0, r7
   19c22:	f00c fce6 	bl	265f2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19c26:	466b      	mov	r3, sp
   19c28:	464a      	mov	r2, r9
   19c2a:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
   19c2c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19c2e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19c32:	f00b fc64 	bl	254fe <bt_gatt_foreach_attr>
		if (data.err) {
   19c36:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19c3a:	2b00      	cmp	r3, #0
   19c3c:	d0e7      	beq.n	19c0e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   19c3e:	9802      	ldr	r0, [sp, #8]
   19c40:	f003 fb0e 	bl	1d260 <net_buf_unref>
	if (!req) {
   19c44:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19c48:	4632      	mov	r2, r6
   19c4a:	210e      	movs	r1, #14
   19c4c:	4620      	mov	r0, r4
   19c4e:	f7ff fe09 	bl	19864 <send_err_rsp.part.0>
	return 0;
   19c52:	2000      	movs	r0, #0
}
   19c54:	b005      	add	sp, #20
   19c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   19c5a:	200e      	movs	r0, #14
   19c5c:	e7fa      	b.n	19c54 <att_read_mult_req+0x78>
   19c5e:	bf00      	nop
   19c60:	00025703 	.word	0x00025703
   19c64:	0002577b 	.word	0x0002577b

00019c68 <att_read_rsp>:
{
   19c68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19c6c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   19c70:	4605      	mov	r5, r0
   19c72:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19c74:	4640      	mov	r0, r8
   19c76:	2101      	movs	r1, #1
{
   19c78:	4614      	mov	r4, r2
   19c7a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19c7c:	f00c f901 	bl	25e82 <bt_gatt_change_aware>
   19c80:	b390      	cbz	r0, 19ce8 <att_read_rsp+0x80>
	if (!handle) {
   19c82:	b39e      	cbz	r6, 19cec <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   19c84:	2210      	movs	r2, #16
   19c86:	2100      	movs	r1, #0
   19c88:	4668      	mov	r0, sp
   19c8a:	f00a ff46 	bl	24b1a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   19c8e:	2200      	movs	r2, #0
   19c90:	4621      	mov	r1, r4
   19c92:	4640      	mov	r0, r8
   19c94:	f7ff fef0 	bl	19a78 <bt_att_create_pdu>
   19c98:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19c9a:	b348      	cbz	r0, 19cf0 <att_read_rsp+0x88>
	data.offset = offset;
   19c9c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19ca0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19ca4:	2301      	movs	r3, #1
   19ca6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19caa:	4a12      	ldr	r2, [pc, #72]	; (19cf4 <att_read_rsp+0x8c>)
	data.chan = chan;
   19cac:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19cae:	466b      	mov	r3, sp
   19cb0:	4631      	mov	r1, r6
   19cb2:	4630      	mov	r0, r6
   19cb4:	f00b fc23 	bl	254fe <bt_gatt_foreach_attr>
	if (data.err) {
   19cb8:	f89d 400c 	ldrb.w	r4, [sp, #12]
   19cbc:	b174      	cbz	r4, 19cdc <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   19cbe:	9802      	ldr	r0, [sp, #8]
   19cc0:	f003 face 	bl	1d260 <net_buf_unref>
	if (!req) {
   19cc4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19cc8:	4632      	mov	r2, r6
   19cca:	4639      	mov	r1, r7
   19ccc:	4628      	mov	r0, r5
   19cce:	f7ff fdc9 	bl	19864 <send_err_rsp.part.0>
		return 0;
   19cd2:	2400      	movs	r4, #0
}
   19cd4:	4620      	mov	r0, r4
   19cd6:	b004      	add	sp, #16
   19cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19cdc:	4a06      	ldr	r2, [pc, #24]	; (19cf8 <att_read_rsp+0x90>)
   19cde:	9902      	ldr	r1, [sp, #8]
   19ce0:	4628      	mov	r0, r5
   19ce2:	f00b fdd4 	bl	2588e <bt_att_chan_send_rsp>
	return 0;
   19ce6:	e7f5      	b.n	19cd4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19ce8:	2412      	movs	r4, #18
   19cea:	e7f3      	b.n	19cd4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19cec:	2401      	movs	r4, #1
   19cee:	e7f1      	b.n	19cd4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19cf0:	240e      	movs	r4, #14
   19cf2:	e7ef      	b.n	19cd4 <att_read_rsp+0x6c>
   19cf4:	0002577b 	.word	0x0002577b
   19cf8:	00025703 	.word	0x00025703

00019cfc <att_read_type_req>:
{
   19cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19d00:	7b0c      	ldrb	r4, [r1, #12]
   19d02:	3c04      	subs	r4, #4
   19d04:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19d06:	2c02      	cmp	r4, #2
{
   19d08:	4605      	mov	r5, r0
   19d0a:	b08c      	sub	sp, #48	; 0x30
   19d0c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19d0e:	d001      	beq.n	19d14 <att_read_type_req+0x18>
   19d10:	2c10      	cmp	r4, #16
   19d12:	d150      	bne.n	19db6 <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
   19d14:	2104      	movs	r1, #4
   19d16:	3008      	adds	r0, #8
   19d18:	f003 fb9a 	bl	1d450 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19d1c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19d20:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19d22:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19d24:	1d01      	adds	r1, r0, #4
   19d26:	4622      	mov	r2, r4
   19d28:	4640      	mov	r0, r8
   19d2a:	f00a ffc7 	bl	24cbc <bt_uuid_create>
   19d2e:	b188      	cbz	r0, 19d54 <att_read_type_req+0x58>
	if (!start || !end) {
   19d30:	b19e      	cbz	r6, 19d5a <att_read_type_req+0x5e>
   19d32:	b18f      	cbz	r7, 19d58 <att_read_type_req+0x5c>
	if (start > end) {
   19d34:	42b7      	cmp	r7, r6
   19d36:	d310      	bcc.n	19d5a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   19d38:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   19d3a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19d3c:	2100      	movs	r1, #0
   19d3e:	eb0d 0002 	add.w	r0, sp, r2
   19d42:	f00a feea 	bl	24b1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   19d46:	2201      	movs	r2, #1
   19d48:	2109      	movs	r1, #9
   19d4a:	4620      	mov	r0, r4
   19d4c:	f7ff fe94 	bl	19a78 <bt_att_create_pdu>
   19d50:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   19d52:	b968      	cbnz	r0, 19d70 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   19d54:	240e      	movs	r4, #14
   19d56:	e007      	b.n	19d68 <att_read_type_req+0x6c>
			*err = 0U;
   19d58:	463e      	mov	r6, r7
	if (!req) {
   19d5a:	2301      	movs	r3, #1
   19d5c:	4632      	mov	r2, r6
   19d5e:	2108      	movs	r1, #8
   19d60:	4628      	mov	r0, r5
   19d62:	f7ff fd7f 	bl	19864 <send_err_rsp.part.0>
		return 0;
   19d66:	2400      	movs	r4, #0
}
   19d68:	4620      	mov	r0, r4
   19d6a:	b00c      	add	sp, #48	; 0x30
   19d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19d70:	2101      	movs	r1, #1
   19d72:	3008      	adds	r0, #8
	data.uuid = uuid;
   19d74:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19d78:	f003 fb88 	bl	1d48c <net_buf_simple_add>
	data.rsp->len = 0U;
   19d7c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19d80:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19d82:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19d84:	4a0d      	ldr	r2, [pc, #52]	; (19dbc <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   19d86:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19d8a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19d8c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19d90:	4630      	mov	r0, r6
   19d92:	ab06      	add	r3, sp, #24
   19d94:	f00b fbb3 	bl	254fe <bt_gatt_foreach_attr>
	if (data.err) {
   19d98:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   19d9c:	b12c      	cbz	r4, 19daa <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   19d9e:	9808      	ldr	r0, [sp, #32]
   19da0:	f003 fa5e 	bl	1d260 <net_buf_unref>
	if (!req) {
   19da4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19da8:	e7d8      	b.n	19d5c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19daa:	4a05      	ldr	r2, [pc, #20]	; (19dc0 <att_read_type_req+0xc4>)
   19dac:	9908      	ldr	r1, [sp, #32]
   19dae:	4628      	mov	r0, r5
   19db0:	f00b fd6d 	bl	2588e <bt_att_chan_send_rsp>
	return 0;
   19db4:	e7d8      	b.n	19d68 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   19db6:	2404      	movs	r4, #4
   19db8:	e7d6      	b.n	19d68 <att_read_type_req+0x6c>
   19dba:	bf00      	nop
   19dbc:	00019271 	.word	0x00019271
   19dc0:	00025703 	.word	0x00025703

00019dc4 <att_find_type_req>:
{
   19dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19dc8:	4688      	mov	r8, r1
   19dca:	b086      	sub	sp, #24
   19dcc:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
   19dce:	2106      	movs	r1, #6
   19dd0:	f108 0008 	add.w	r0, r8, #8
   19dd4:	f003 fb3c 	bl	1d450 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   19dd8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   19dda:	b317      	cbz	r7, 19e22 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19ddc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   19de0:	f1b9 0f00 	cmp.w	r9, #0
   19de4:	d01c      	beq.n	19e20 <att_find_type_req+0x5c>
	if (start > end) {
   19de6:	454f      	cmp	r7, r9
   19de8:	d81b      	bhi.n	19e22 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   19dea:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19dec:	f8ad 3002 	strh.w	r3, [sp, #2]
   19df0:	2400      	movs	r4, #0
   19df2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19df6:	a901      	add	r1, sp, #4
   19df8:	4668      	mov	r0, sp
	value = buf->data;
   19dfa:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19dfe:	f88d 4000 	strb.w	r4, [sp]
   19e02:	f88d 4004 	strb.w	r4, [sp, #4]
   19e06:	f8ad 3006 	strh.w	r3, [sp, #6]
   19e0a:	f00a ff2d 	bl	24c68 <bt_uuid_cmp>
   19e0e:	4606      	mov	r6, r0
   19e10:	b190      	cbz	r0, 19e38 <att_find_type_req+0x74>
	if (!req) {
   19e12:	230a      	movs	r3, #10
   19e14:	463a      	mov	r2, r7
   19e16:	2106      	movs	r1, #6
   19e18:	4628      	mov	r0, r5
   19e1a:	f7ff fd23 	bl	19864 <send_err_rsp.part.0>
		return 0;
   19e1e:	e007      	b.n	19e30 <att_find_type_req+0x6c>
			*err = 0U;
   19e20:	464f      	mov	r7, r9
	if (!req) {
   19e22:	2301      	movs	r3, #1
   19e24:	463a      	mov	r2, r7
   19e26:	2106      	movs	r1, #6
   19e28:	4628      	mov	r0, r5
   19e2a:	f7ff fd1b 	bl	19864 <send_err_rsp.part.0>
		return 0;
   19e2e:	2400      	movs	r4, #0
}
   19e30:	4620      	mov	r0, r4
   19e32:	b006      	add	sp, #24
   19e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19e38:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   19e3c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19e40:	4601      	mov	r1, r0
   19e42:	2214      	movs	r2, #20
   19e44:	a801      	add	r0, sp, #4
   19e46:	f00a fe68 	bl	24b1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   19e4a:	4632      	mov	r2, r6
   19e4c:	2107      	movs	r1, #7
   19e4e:	4640      	mov	r0, r8
   19e50:	f7ff fe12 	bl	19a78 <bt_att_create_pdu>
   19e54:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19e56:	b1e0      	cbz	r0, 19e92 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19e58:	230a      	movs	r3, #10
   19e5a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19e5e:	4a0e      	ldr	r2, [pc, #56]	; (19e98 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   19e60:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19e64:	ab01      	add	r3, sp, #4
   19e66:	4649      	mov	r1, r9
   19e68:	4638      	mov	r0, r7
	data.value = value;
   19e6a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   19e6e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19e70:	f00b fb45 	bl	254fe <bt_gatt_foreach_attr>
	if (data.err) {
   19e74:	f89d 4015 	ldrb.w	r4, [sp, #21]
   19e78:	b12c      	cbz	r4, 19e86 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   19e7a:	9802      	ldr	r0, [sp, #8]
   19e7c:	f003 f9f0 	bl	1d260 <net_buf_unref>
	if (!req) {
   19e80:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19e84:	e7ce      	b.n	19e24 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19e86:	4a05      	ldr	r2, [pc, #20]	; (19e9c <att_find_type_req+0xd8>)
   19e88:	9902      	ldr	r1, [sp, #8]
   19e8a:	4628      	mov	r0, r5
   19e8c:	f00b fcff 	bl	2588e <bt_att_chan_send_rsp>
	return 0;
   19e90:	e7ce      	b.n	19e30 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19e92:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19e94:	e7cc      	b.n	19e30 <att_find_type_req+0x6c>
   19e96:	bf00      	nop
   19e98:	00019319 	.word	0x00019319
   19e9c:	00025703 	.word	0x00025703

00019ea0 <att_find_info_req>:
{
   19ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   19ea2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   19ea4:	881e      	ldrh	r6, [r3, #0]
{
   19ea6:	b085      	sub	sp, #20
   19ea8:	4605      	mov	r5, r0
	if (!start || !end) {
   19eaa:	b19e      	cbz	r6, 19ed4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19eac:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   19eae:	b184      	cbz	r4, 19ed2 <att_find_info_req+0x32>
	if (start > end) {
   19eb0:	42b4      	cmp	r4, r6
   19eb2:	d30f      	bcc.n	19ed4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   19eb4:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   19eb6:	2210      	movs	r2, #16
   19eb8:	2100      	movs	r1, #0
   19eba:	4668      	mov	r0, sp
   19ebc:	f00a fe2d 	bl	24b1a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19ec0:	2200      	movs	r2, #0
   19ec2:	2105      	movs	r1, #5
   19ec4:	4638      	mov	r0, r7
   19ec6:	f7ff fdd7 	bl	19a78 <bt_att_create_pdu>
   19eca:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19ecc:	b958      	cbnz	r0, 19ee6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19ece:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19ed0:	e007      	b.n	19ee2 <att_find_info_req+0x42>
			*err = 0U;
   19ed2:	4626      	mov	r6, r4
	if (!req) {
   19ed4:	2301      	movs	r3, #1
   19ed6:	4632      	mov	r2, r6
   19ed8:	2104      	movs	r1, #4
   19eda:	4628      	mov	r0, r5
   19edc:	f7ff fcc2 	bl	19864 <send_err_rsp.part.0>
	return 0;
   19ee0:	2000      	movs	r0, #0
}
   19ee2:	b005      	add	sp, #20
   19ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19ee6:	4621      	mov	r1, r4
   19ee8:	4a09      	ldr	r2, [pc, #36]	; (19f10 <att_find_info_req+0x70>)
	data.chan = chan;
   19eea:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19eec:	466b      	mov	r3, sp
   19eee:	4630      	mov	r0, r6
   19ef0:	f00b fb05 	bl	254fe <bt_gatt_foreach_attr>
	if (!data.rsp) {
   19ef4:	9c02      	ldr	r4, [sp, #8]
   19ef6:	b924      	cbnz	r4, 19f02 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   19ef8:	9801      	ldr	r0, [sp, #4]
   19efa:	f003 f9b1 	bl	1d260 <net_buf_unref>
	if (!req) {
   19efe:	230a      	movs	r3, #10
   19f00:	e7e9      	b.n	19ed6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19f02:	4a04      	ldr	r2, [pc, #16]	; (19f14 <att_find_info_req+0x74>)
   19f04:	9901      	ldr	r1, [sp, #4]
   19f06:	4628      	mov	r0, r5
   19f08:	f00b fcc1 	bl	2588e <bt_att_chan_send_rsp>
   19f0c:	e7e8      	b.n	19ee0 <att_find_info_req+0x40>
   19f0e:	bf00      	nop
   19f10:	0002562b 	.word	0x0002562b
   19f14:	00025703 	.word	0x00025703

00019f18 <att_mtu_req>:
{
   19f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   19f1a:	6803      	ldr	r3, [r0, #0]
{
   19f1c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   19f1e:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19f20:	f3bf 8f5b 	dmb	ish
   19f24:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   19f28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   19f2c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   19f30:	071b      	lsls	r3, r3, #28
   19f32:	d41e      	bmi.n	19f72 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   19f34:	688b      	ldr	r3, [r1, #8]
   19f36:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   19f38:	2e16      	cmp	r6, #22
   19f3a:	d91c      	bls.n	19f76 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   19f3c:	2202      	movs	r2, #2
   19f3e:	2103      	movs	r1, #3
   19f40:	f7ff fd9a 	bl	19a78 <bt_att_create_pdu>
	if (!pdu) {
   19f44:	4607      	mov	r7, r0
   19f46:	b1c0      	cbz	r0, 19f7a <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
   19f48:	2102      	movs	r1, #2
   19f4a:	3008      	adds	r0, #8
   19f4c:	f003 fa9e 	bl	1d48c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   19f50:	2341      	movs	r3, #65	; 0x41
   19f52:	7003      	strb	r3, [r0, #0]
   19f54:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   19f56:	4a0a      	ldr	r2, [pc, #40]	; (19f80 <att_mtu_req+0x68>)
   19f58:	4628      	mov	r0, r5
   19f5a:	4639      	mov	r1, r7
   19f5c:	f00b fc97 	bl	2588e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   19f60:	2e41      	cmp	r6, #65	; 0x41
   19f62:	bf28      	it	cs
   19f64:	2641      	movcs	r6, #65	; 0x41
   19f66:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   19f6a:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   19f6e:	4620      	mov	r0, r4
}
   19f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   19f72:	2006      	movs	r0, #6
   19f74:	e7fc      	b.n	19f70 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   19f76:	2004      	movs	r0, #4
   19f78:	e7fa      	b.n	19f70 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   19f7a:	200e      	movs	r0, #14
   19f7c:	e7f8      	b.n	19f70 <att_mtu_req+0x58>
   19f7e:	bf00      	nop
   19f80:	00025703 	.word	0x00025703

00019f84 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19f84:	b513      	push	{r0, r1, r4, lr}
   19f86:	4602      	mov	r2, r0
   19f88:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19f8a:	4808      	ldr	r0, [pc, #32]	; (19fac <bt_att_req_alloc+0x28>)
   19f8c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   19f8e:	2400      	movs	r4, #0
   19f90:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19f92:	f006 f9b3 	bl	202fc <k_mem_slab_alloc>
   19f96:	4601      	mov	r1, r0
   19f98:	b930      	cbnz	r0, 19fa8 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19f9a:	9801      	ldr	r0, [sp, #4]
   19f9c:	221c      	movs	r2, #28
   19f9e:	f00a fdbc 	bl	24b1a <memset>

	return req;
   19fa2:	9801      	ldr	r0, [sp, #4]
}
   19fa4:	b002      	add	sp, #8
   19fa6:	bd10      	pop	{r4, pc}
		return NULL;
   19fa8:	4620      	mov	r0, r4
   19faa:	e7fb      	b.n	19fa4 <bt_att_req_alloc+0x20>
   19fac:	20000848 	.word	0x20000848

00019fb0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19fb0:	b507      	push	{r0, r1, r2, lr}
   19fb2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   19fb4:	a901      	add	r1, sp, #4
   19fb6:	4803      	ldr	r0, [pc, #12]	; (19fc4 <bt_att_req_free+0x14>)
   19fb8:	f006 f9fa 	bl	203b0 <k_mem_slab_free>
}
   19fbc:	b003      	add	sp, #12
   19fbe:	f85d fb04 	ldr.w	pc, [sp], #4
   19fc2:	bf00      	nop
   19fc4:	20000848 	.word	0x20000848

00019fc8 <att_handle_rsp>:
{
   19fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fcc:	4604      	mov	r4, r0
   19fce:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
   19fd0:	30f0      	adds	r0, #240	; 0xf0
{
   19fd2:	4689      	mov	r9, r1
   19fd4:	4692      	mov	sl, r2
   19fd6:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
   19fd8:	f007 ffea 	bl	21fb0 <k_delayed_work_cancel>
	if (!chan->req) {
   19fdc:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   19fe0:	2600      	movs	r6, #0
   19fe2:	bb3d      	cbnz	r5, 1a034 <att_handle_rsp+0x6c>
		BT_WARN("No pending ATT request");
   19fe4:	482e      	ldr	r0, [pc, #184]	; (1a0a0 <att_handle_rsp+0xd8>)
   19fe6:	2157      	movs	r1, #87	; 0x57
   19fe8:	f008 fea0 	bl	22d2c <printk>
	bt_att_func_t func = NULL;
   19fec:	462e      	mov	r6, r5
	att_process(chan->att);
   19fee:	f8d4 b000 	ldr.w	fp, [r4]
	node = sys_slist_get(&att->reqs);
   19ff2:	f10b 0004 	add.w	r0, fp, #4
   19ff6:	f00b fa10 	bl	2541a <sys_slist_get>
	if (!node) {
   19ffa:	4607      	mov	r7, r0
   19ffc:	2800      	cmp	r0, #0
   19ffe:	d037      	beq.n	1a070 <att_handle_rsp+0xa8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a000:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
   1a004:	b15a      	cbz	r2, 1a01e <att_handle_rsp+0x56>
   1a006:	f5b2 709e 	subs.w	r0, r2, #316	; 0x13c
   1a00a:	d008      	beq.n	1a01e <att_handle_rsp+0x56>
   1a00c:	6815      	ldr	r5, [r2, #0]
   1a00e:	b10d      	cbz	r5, 1a014 <att_handle_rsp+0x4c>
   1a010:	f5a5 759e 	sub.w	r5, r5, #316	; 0x13c
		if (!chan->req) {
   1a014:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
   1a018:	b32a      	cbz	r2, 1a066 <att_handle_rsp+0x9e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a01a:	2d00      	cmp	r5, #0
   1a01c:	d135      	bne.n	1a08a <att_handle_rsp+0xc2>
Z_GENLIST_PREPEND(slist, snode)
   1a01e:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
   1a022:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   1a024:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
   1a028:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a02c:	bb02      	cbnz	r2, 1a070 <att_handle_rsp+0xa8>
	list->tail = node;
   1a02e:	f8cb 7008 	str.w	r7, [fp, #8]
}
   1a032:	e01d      	b.n	1a070 <att_handle_rsp+0xa8>
	if (chan->req == &cancel) {
   1a034:	4b1b      	ldr	r3, [pc, #108]	; (1a0a4 <att_handle_rsp+0xdc>)
   1a036:	429d      	cmp	r5, r3
   1a038:	d102      	bne.n	1a040 <att_handle_rsp+0x78>
		chan->req = NULL;
   1a03a:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
		goto process;
   1a03e:	e7d6      	b.n	19fee <att_handle_rsp+0x26>
	if (chan->req->buf) {
   1a040:	6928      	ldr	r0, [r5, #16]
   1a042:	b120      	cbz	r0, 1a04e <att_handle_rsp+0x86>
		net_buf_unref(chan->req->buf);
   1a044:	f003 f90c 	bl	1d260 <net_buf_unref>
		chan->req->buf = NULL;
   1a048:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1a04c:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
   1a04e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	chan->req->func = NULL;
   1a052:	2500      	movs	r5, #0
	func = chan->req->func;
   1a054:	6846      	ldr	r6, [r0, #4]
	params = chan->req->user_data;
   1a056:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
   1a058:	6045      	str	r5, [r0, #4]
	params = chan->req->user_data;
   1a05a:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
   1a05c:	f00b fc9a 	bl	25994 <att_req_destroy>
	chan->req = NULL;
   1a060:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   1a064:	e7c3      	b.n	19fee <att_handle_rsp+0x26>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1a066:	4639      	mov	r1, r7
   1a068:	f7ff fb36 	bl	196d8 <bt_att_chan_req_send>
   1a06c:	2800      	cmp	r0, #0
   1a06e:	dbd4      	blt.n	1a01a <att_handle_rsp+0x52>
	if (func) {
   1a070:	b13e      	cbz	r6, 1a082 <att_handle_rsp+0xba>
		func(chan->att->conn, err, pdu, len, params);
   1a072:	9b03      	ldr	r3, [sp, #12]
   1a074:	6820      	ldr	r0, [r4, #0]
   1a076:	9300      	str	r3, [sp, #0]
   1a078:	6800      	ldr	r0, [r0, #0]
   1a07a:	4653      	mov	r3, sl
   1a07c:	464a      	mov	r2, r9
   1a07e:	4641      	mov	r1, r8
   1a080:	47b0      	blx	r6
}
   1a082:	2000      	movs	r0, #0
   1a084:	b005      	add	sp, #20
   1a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a08a:	f515 729e 	adds.w	r2, r5, #316	; 0x13c
   1a08e:	d004      	beq.n	1a09a <att_handle_rsp+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a090:	f8d5 213c 	ldr.w	r2, [r5, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a094:	b10a      	cbz	r2, 1a09a <att_handle_rsp+0xd2>
   1a096:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
	bt_att_func_t func = NULL;
   1a09a:	4628      	mov	r0, r5
   1a09c:	4615      	mov	r5, r2
   1a09e:	e7b9      	b.n	1a014 <att_handle_rsp+0x4c>
   1a0a0:	00029735 	.word	0x00029735
   1a0a4:	2000296c 	.word	0x2000296c

0001a0a8 <bt_att_encrypt_change>:
{
   1a0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0ac:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1a0ae:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
   1a0b2:	460d      	mov	r5, r1
   1a0b4:	b161      	cbz	r1, 1a0d0 <bt_att_encrypt_change+0x28>
		if (att_chan->req && att_chan->req->retrying) {
   1a0b6:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1a0ba:	b34b      	cbz	r3, 1a110 <bt_att_encrypt_change+0x68>
   1a0bc:	7d1b      	ldrb	r3, [r3, #20]
   1a0be:	b33b      	cbz	r3, 1a110 <bt_att_encrypt_change+0x68>
			att_handle_rsp(att_chan, NULL, 0,
   1a0c0:	2200      	movs	r2, #0
   1a0c2:	4630      	mov	r0, r6
   1a0c4:	2305      	movs	r3, #5
}
   1a0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
   1a0ca:	4611      	mov	r1, r2
   1a0cc:	f7ff bf7c 	b.w	19fc8 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   1a0d0:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1a0d2:	4638      	mov	r0, r7
   1a0d4:	f001 fa68 	bl	1b5a8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1a0d8:	7a7b      	ldrb	r3, [r7, #9]
   1a0da:	2b01      	cmp	r3, #1
   1a0dc:	d018      	beq.n	1a110 <bt_att_encrypt_change+0x68>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1a0de:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1a0e2:	b1ab      	cbz	r3, 1a110 <bt_att_encrypt_change+0x68>
   1a0e4:	7d1a      	ldrb	r2, [r3, #20]
   1a0e6:	b19a      	cbz	r2, 1a110 <bt_att_encrypt_change+0x68>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   1a0e8:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
   1a0ea:	688b      	ldr	r3, [r1, #8]
   1a0ec:	7818      	ldrb	r0, [r3, #0]
   1a0ee:	f00b f9d9 	bl	254a4 <att_op_get_type>
   1a0f2:	3801      	subs	r0, #1
   1a0f4:	b2c0      	uxtb	r0, r0
   1a0f6:	2804      	cmp	r0, #4
   1a0f8:	bf96      	itet	ls
   1a0fa:	4b06      	ldrls	r3, [pc, #24]	; (1a114 <bt_att_encrypt_change+0x6c>)
   1a0fc:	462a      	movhi	r2, r5
   1a0fe:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
   1a102:	4630      	mov	r0, r6
   1a104:	f00b fbc3 	bl	2588e <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
   1a108:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1a10c:	2200      	movs	r2, #0
   1a10e:	611a      	str	r2, [r3, #16]
}
   1a110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a114:	00027638 	.word	0x00027638

0001a118 <att_reset>:
{
   1a118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a11a:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1a11c:	9803      	ldr	r0, [sp, #12]
   1a11e:	2200      	movs	r2, #0
   1a120:	2300      	movs	r3, #0
   1a122:	300c      	adds	r0, #12
   1a124:	f003 f81a 	bl	1d15c <net_buf_get>
   1a128:	b948      	cbnz	r0, 1a13e <att_reset+0x26>
	att->conn = NULL;
   1a12a:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1a12c:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
   1a12e:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1a130:	b945      	cbnz	r5, 1a144 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   1a132:	4811      	ldr	r0, [pc, #68]	; (1a178 <att_reset+0x60>)
   1a134:	a903      	add	r1, sp, #12
   1a136:	f006 f93b 	bl	203b0 <k_mem_slab_free>
}
   1a13a:	b004      	add	sp, #16
   1a13c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   1a13e:	f003 f88f 	bl	1d260 <net_buf_unref>
   1a142:	e7eb      	b.n	1a11c <att_reset+0x4>
	return node->next;
   1a144:	682c      	ldr	r4, [r5, #0]
   1a146:	2c00      	cmp	r4, #0
   1a148:	bf38      	it	cc
   1a14a:	2400      	movcc	r4, #0
		if (req->func) {
   1a14c:	686e      	ldr	r6, [r5, #4]
   1a14e:	b136      	cbz	r6, 1a15e <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1a150:	69ab      	ldr	r3, [r5, #24]
   1a152:	9300      	str	r3, [sp, #0]
   1a154:	2300      	movs	r3, #0
   1a156:	461a      	mov	r2, r3
   1a158:	210e      	movs	r1, #14
   1a15a:	4618      	mov	r0, r3
   1a15c:	47b0      	blx	r6
		att_req_destroy(req);
   1a15e:	4628      	mov	r0, r5
   1a160:	f00b fc18 	bl	25994 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1a164:	2c00      	cmp	r4, #0
   1a166:	d0e4      	beq.n	1a132 <att_reset+0x1a>
   1a168:	6823      	ldr	r3, [r4, #0]
   1a16a:	2b00      	cmp	r3, #0
   1a16c:	bf38      	it	cc
   1a16e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a170:	4625      	mov	r5, r4
   1a172:	461c      	mov	r4, r3
   1a174:	e7ea      	b.n	1a14c <att_reset+0x34>
   1a176:	bf00      	nop
   1a178:	20000810 	.word	0x20000810

0001a17c <att_timeout>:
{
   1a17c:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   1a17e:	4605      	mov	r5, r0
	BT_ERR("ATT Timeout");
   1a180:	2145      	movs	r1, #69	; 0x45
	struct bt_att *att = chan->att;
   1a182:	f855 6df0 	ldr.w	r6, [r5, #-240]!
{
   1a186:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1a188:	4808      	ldr	r0, [pc, #32]	; (1a1ac <att_timeout+0x30>)
   1a18a:	f008 fdcf 	bl	22d2c <printk>
	att_chan_detach(chan);
   1a18e:	4628      	mov	r0, r5
   1a190:	f00b fc14 	bl	259bc <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1a194:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   1a196:	b945      	cbnz	r5, 1a1aa <att_timeout+0x2e>
	att_reset(att);
   1a198:	4630      	mov	r0, r6
   1a19a:	f7ff ffbd 	bl	1a118 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1a19e:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   1a1a2:	f001 fa73 	bl	1b68c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1a1a6:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   1a1aa:	bd70      	pop	{r4, r5, r6, pc}
   1a1ac:	00029751 	.word	0x00029751

0001a1b0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1a1b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a1b4:	460e      	mov	r6, r1
   1a1b6:	4617      	mov	r7, r2
   1a1b8:	461d      	mov	r5, r3
	struct bt_att_chan *chan, *tmp;
	struct bt_att *att;
	int ret;

	__ASSERT_NO_MSG(conn);
   1a1ba:	4604      	mov	r4, r0
   1a1bc:	b950      	cbnz	r0, 1a1d4 <bt_att_send+0x24>
   1a1be:	492d      	ldr	r1, [pc, #180]	; (1a274 <bt_att_send+0xc4>)
   1a1c0:	482d      	ldr	r0, [pc, #180]	; (1a278 <bt_att_send+0xc8>)
   1a1c2:	f640 32a3 	movw	r2, #2979	; 0xba3
   1a1c6:	f008 fdb1 	bl	22d2c <printk>
   1a1ca:	482a      	ldr	r0, [pc, #168]	; (1a274 <bt_att_send+0xc4>)
   1a1cc:	f640 31a3 	movw	r1, #2979	; 0xba3
   1a1d0:	f009 f80f 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1a1d4:	b956      	cbnz	r6, 1a1ec <bt_att_send+0x3c>
   1a1d6:	4927      	ldr	r1, [pc, #156]	; (1a274 <bt_att_send+0xc4>)
   1a1d8:	4827      	ldr	r0, [pc, #156]	; (1a278 <bt_att_send+0xc8>)
   1a1da:	f640 32a4 	movw	r2, #2980	; 0xba4
   1a1de:	f008 fda5 	bl	22d2c <printk>
   1a1e2:	4824      	ldr	r0, [pc, #144]	; (1a274 <bt_att_send+0xc4>)
   1a1e4:	f640 31a4 	movw	r1, #2980	; 0xba4
   1a1e8:	f009 f803 	bl	231f2 <assert_post_action>

	att = att_get(conn);
   1a1ec:	4620      	mov	r0, r4
   1a1ee:	f7ff f935 	bl	1945c <att_get>
	if (!att) {
   1a1f2:	4680      	mov	r8, r0
   1a1f4:	b938      	cbnz	r0, 1a206 <bt_att_send+0x56>
		net_buf_unref(buf);
   1a1f6:	4630      	mov	r0, r6
   1a1f8:	f003 f832 	bl	1d260 <net_buf_unref>
		return -ENOTCONN;
   1a1fc:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   1a200:	b002      	add	sp, #8
   1a202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1a206:	b13f      	cbz	r7, 1a218 <bt_att_send+0x68>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1a208:	9500      	str	r5, [sp, #0]
   1a20a:	463b      	mov	r3, r7
   1a20c:	4632      	mov	r2, r6
   1a20e:	2104      	movs	r1, #4
   1a210:	4620      	mov	r0, r4
   1a212:	f00b f8c8 	bl	253a6 <bt_l2cap_send_cb>
   1a216:	e7f3      	b.n	1a200 <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a218:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1a21a:	b184      	cbz	r4, 1a23e <bt_att_send+0x8e>
   1a21c:	f5b4 759e 	subs.w	r5, r4, #316	; 0x13c
   1a220:	d00f      	beq.n	1a242 <bt_att_send+0x92>
   1a222:	6824      	ldr	r4, [r4, #0]
   1a224:	b10c      	cbz	r4, 1a22a <bt_att_send+0x7a>
   1a226:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
   1a22a:	2000      	movs	r0, #0
   1a22c:	b95d      	cbnz	r5, 1a246 <bt_att_send+0x96>
	if (ret < 0) {
   1a22e:	b188      	cbz	r0, 1a254 <bt_att_send+0xa4>
		net_buf_put(&att->tx_queue, buf);
   1a230:	f108 000c 	add.w	r0, r8, #12
   1a234:	4631      	mov	r1, r6
   1a236:	f002 ffe5 	bl	1d204 <net_buf_put>
	return 0;
   1a23a:	4628      	mov	r0, r5
   1a23c:	e7e0      	b.n	1a200 <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a23e:	463d      	mov	r5, r7
   1a240:	e7f3      	b.n	1a22a <bt_att_send+0x7a>
   1a242:	463c      	mov	r4, r7
   1a244:	e7f1      	b.n	1a22a <bt_att_send+0x7a>
		ret = bt_att_chan_send(chan, buf, NULL);
   1a246:	2200      	movs	r2, #0
   1a248:	4631      	mov	r1, r6
   1a24a:	4628      	mov	r0, r5
   1a24c:	f00b fb08 	bl	25860 <bt_att_chan_send>
		if (ret >= 0) {
   1a250:	2800      	cmp	r0, #0
   1a252:	db01      	blt.n	1a258 <bt_att_send+0xa8>
	return 0;
   1a254:	2000      	movs	r0, #0
   1a256:	e7d3      	b.n	1a200 <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a258:	b154      	cbz	r4, 1a270 <bt_att_send+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a25a:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1a25e:	d004      	beq.n	1a26a <bt_att_send+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a260:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1a264:	b10b      	cbz	r3, 1a26a <bt_att_send+0xba>
   1a266:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
   1a26a:	4625      	mov	r5, r4
   1a26c:	461c      	mov	r4, r3
   1a26e:	e7dd      	b.n	1a22c <bt_att_send+0x7c>
   1a270:	4623      	mov	r3, r4
   1a272:	e7fa      	b.n	1a26a <bt_att_send+0xba>
   1a274:	000295fc 	.word	0x000295fc
   1a278:	00027c9a 	.word	0x00027c9a

0001a27c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1a27c:	b570      	push	{r4, r5, r6, lr}
   1a27e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1a280:	4605      	mov	r5, r0
   1a282:	b950      	cbnz	r0, 1a29a <bt_att_req_send+0x1e>
   1a284:	4925      	ldr	r1, [pc, #148]	; (1a31c <bt_att_req_send+0xa0>)
   1a286:	4826      	ldr	r0, [pc, #152]	; (1a320 <bt_att_req_send+0xa4>)
   1a288:	f640 32cd 	movw	r2, #3021	; 0xbcd
   1a28c:	f008 fd4e 	bl	22d2c <printk>
   1a290:	4822      	ldr	r0, [pc, #136]	; (1a31c <bt_att_req_send+0xa0>)
   1a292:	f640 31cd 	movw	r1, #3021	; 0xbcd
   1a296:	f008 ffac 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1a29a:	b954      	cbnz	r4, 1a2b2 <bt_att_req_send+0x36>
   1a29c:	491f      	ldr	r1, [pc, #124]	; (1a31c <bt_att_req_send+0xa0>)
   1a29e:	4820      	ldr	r0, [pc, #128]	; (1a320 <bt_att_req_send+0xa4>)
   1a2a0:	f640 32ce 	movw	r2, #3022	; 0xbce
   1a2a4:	f008 fd42 	bl	22d2c <printk>
   1a2a8:	481c      	ldr	r0, [pc, #112]	; (1a31c <bt_att_req_send+0xa0>)
   1a2aa:	f640 31ce 	movw	r1, #3022	; 0xbce
   1a2ae:	f008 ffa0 	bl	231f2 <assert_post_action>

	att = att_get(conn);
   1a2b2:	4628      	mov	r0, r5
   1a2b4:	f7ff f8d2 	bl	1945c <att_get>
	if (!att) {
   1a2b8:	4605      	mov	r5, r0
   1a2ba:	b930      	cbnz	r0, 1a2ca <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   1a2bc:	6920      	ldr	r0, [r4, #16]
   1a2be:	f002 ffcf 	bl	1d260 <net_buf_unref>
		req->buf = NULL;
   1a2c2:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   1a2c4:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   1a2c8:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a2ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1a2cc:	b153      	cbz	r3, 1a2e4 <bt_att_req_send+0x68>
   1a2ce:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1a2d2:	d007      	beq.n	1a2e4 <bt_att_req_send+0x68>
   1a2d4:	681e      	ldr	r6, [r3, #0]
   1a2d6:	b10e      	cbz	r6, 1a2dc <bt_att_req_send+0x60>
   1a2d8:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
   1a2dc:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1a2e0:	b143      	cbz	r3, 1a2f4 <bt_att_req_send+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a2e2:	b96e      	cbnz	r6, 1a300 <bt_att_req_send+0x84>
	parent->next = child;
   1a2e4:	2000      	movs	r0, #0
   1a2e6:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1a2e8:	68ab      	ldr	r3, [r5, #8]
   1a2ea:	b9a3      	cbnz	r3, 1a316 <bt_att_req_send+0x9a>
	list->head = node;
   1a2ec:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   1a2f0:	4618      	mov	r0, r3
}
   1a2f2:	e7e9      	b.n	1a2c8 <bt_att_req_send+0x4c>
			ret = bt_att_chan_req_send(chan, req);
   1a2f4:	4621      	mov	r1, r4
   1a2f6:	f7ff f9ef 	bl	196d8 <bt_att_chan_req_send>
			if (ret >= 0) {
   1a2fa:	2800      	cmp	r0, #0
   1a2fc:	dbf1      	blt.n	1a2e2 <bt_att_req_send+0x66>
   1a2fe:	e7e3      	b.n	1a2c8 <bt_att_req_send+0x4c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a300:	f516 739e 	adds.w	r3, r6, #316	; 0x13c
   1a304:	d004      	beq.n	1a310 <bt_att_req_send+0x94>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a306:	f8d6 313c 	ldr.w	r3, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a30a:	b10b      	cbz	r3, 1a310 <bt_att_req_send+0x94>
   1a30c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1a310:	4630      	mov	r0, r6
   1a312:	461e      	mov	r6, r3
   1a314:	e7e2      	b.n	1a2dc <bt_att_req_send+0x60>
	parent->next = child;
   1a316:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a318:	60ac      	str	r4, [r5, #8]
}
   1a31a:	e7d5      	b.n	1a2c8 <bt_att_req_send+0x4c>
   1a31c:	000295fc 	.word	0x000295fc
   1a320:	00027c9a 	.word	0x00027c9a

0001a324 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1a324:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   1a326:	4908      	ldr	r1, [pc, #32]	; (1a348 <db_hash_set+0x24>)
{
   1a328:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   1a32a:	4618      	mov	r0, r3
   1a32c:	2210      	movs	r2, #16
   1a32e:	47a0      	blx	r4
	if (len < 0) {
   1a330:	1e04      	subs	r4, r0, #0
   1a332:	da06      	bge.n	1a342 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   1a334:	4805      	ldr	r0, [pc, #20]	; (1a34c <db_hash_set+0x28>)
   1a336:	4622      	mov	r2, r4
   1a338:	2145      	movs	r1, #69	; 0x45
   1a33a:	f008 fcf7 	bl	22d2c <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   1a33e:	4620      	mov	r0, r4
   1a340:	bd10      	pop	{r4, pc}
	return 0;
   1a342:	2400      	movs	r4, #0
   1a344:	e7fb      	b.n	1a33e <db_hash_set+0x1a>
   1a346:	bf00      	nop
   1a348:	200030ff 	.word	0x200030ff
   1a34c:	00029769 	.word	0x00029769

0001a350 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   1a350:	2210      	movs	r2, #16
{
   1a352:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   1a354:	4906      	ldr	r1, [pc, #24]	; (1a370 <db_hash_store+0x20>)
   1a356:	4807      	ldr	r0, [pc, #28]	; (1a374 <db_hash_store+0x24>)
   1a358:	f7fa f82a 	bl	143b0 <settings_save_one>
	if (err) {
   1a35c:	4602      	mov	r2, r0
   1a35e:	b128      	cbz	r0, 1a36c <db_hash_store+0x1c>
}
   1a360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1a364:	4804      	ldr	r0, [pc, #16]	; (1a378 <db_hash_store+0x28>)
   1a366:	2145      	movs	r1, #69	; 0x45
   1a368:	f008 bce0 	b.w	22d2c <printk>
}
   1a36c:	bd08      	pop	{r3, pc}
   1a36e:	bf00      	nop
   1a370:	200030ef 	.word	0x200030ef
   1a374:	0002978f 	.word	0x0002978f
   1a378:	00029797 	.word	0x00029797

0001a37c <sc_store>:
{
   1a37c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1a37e:	4605      	mov	r5, r0
{
   1a380:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1a382:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1a386:	4604      	mov	r4, r0
	if (cfg->id) {
   1a388:	b1ca      	cbz	r2, 1a3be <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a38a:	ae02      	add	r6, sp, #8
   1a38c:	2104      	movs	r1, #4
   1a38e:	4630      	mov	r0, r6
   1a390:	f008 fc30 	bl	22bf4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a394:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a396:	4a0b      	ldr	r2, [pc, #44]	; (1a3c4 <sc_store+0x48>)
   1a398:	462b      	mov	r3, r5
   1a39a:	2124      	movs	r1, #36	; 0x24
   1a39c:	a803      	add	r0, sp, #12
   1a39e:	f7fb ff09 	bl	161b4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1a3a2:	2204      	movs	r2, #4
   1a3a4:	f104 0108 	add.w	r1, r4, #8
   1a3a8:	a803      	add	r0, sp, #12
   1a3aa:	f7fa f801 	bl	143b0 <settings_save_one>
	if (err) {
   1a3ae:	4602      	mov	r2, r0
   1a3b0:	b118      	cbz	r0, 1a3ba <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   1a3b2:	4805      	ldr	r0, [pc, #20]	; (1a3c8 <sc_store+0x4c>)
   1a3b4:	2145      	movs	r1, #69	; 0x45
   1a3b6:	f008 fcb9 	bl	22d2c <printk>
}
   1a3ba:	b00c      	add	sp, #48	; 0x30
   1a3bc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a3be:	9200      	str	r2, [sp, #0]
   1a3c0:	e7e9      	b.n	1a396 <sc_store+0x1a>
   1a3c2:	bf00      	nop
   1a3c4:	00029a95 	.word	0x00029a95
   1a3c8:	000297c2 	.word	0x000297c2

0001a3cc <gatt_notify>:
{
   1a3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3d0:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1a3d2:	8992      	ldrh	r2, [r2, #12]
{
   1a3d4:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a3d6:	3202      	adds	r2, #2
   1a3d8:	211b      	movs	r1, #27
{
   1a3da:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a3dc:	f7ff fb4c 	bl	19a78 <bt_att_create_pdu>
	if (!buf) {
   1a3e0:	4605      	mov	r5, r0
   1a3e2:	b1c8      	cbz	r0, 1a418 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
   1a3e4:	f100 0908 	add.w	r9, r0, #8
   1a3e8:	2102      	movs	r1, #2
   1a3ea:	4648      	mov	r0, r9
   1a3ec:	f003 f84e 	bl	1d48c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a3f0:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
   1a3f2:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
   1a3f4:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
   1a3f8:	4648      	mov	r0, r9
   1a3fa:	f003 f847 	bl	1d48c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1a3fe:	89a2      	ldrh	r2, [r4, #12]
   1a400:	68a1      	ldr	r1, [r4, #8]
   1a402:	4630      	mov	r0, r6
   1a404:	f00a fb5e 	bl	24ac4 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1a408:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1a40c:	4629      	mov	r1, r5
   1a40e:	4638      	mov	r0, r7
}
   1a410:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1a414:	f7ff becc 	b.w	1a1b0 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   1a418:	4803      	ldr	r0, [pc, #12]	; (1a428 <gatt_notify+0x5c>)
   1a41a:	2157      	movs	r1, #87	; 0x57
   1a41c:	f008 fc86 	bl	22d2c <printk>
}
   1a420:	f06f 000b 	mvn.w	r0, #11
   1a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a428:	000297e3 	.word	0x000297e3

0001a42c <ccc_save>:
{
   1a42c:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a42e:	4b0c      	ldr	r3, [pc, #48]	; (1a460 <ccc_save+0x34>)
{
   1a430:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a432:	6882      	ldr	r2, [r0, #8]
   1a434:	429a      	cmp	r2, r3
{
   1a436:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a438:	d10f      	bne.n	1a45a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1a43a:	7922      	ldrb	r2, [r4, #4]
   1a43c:	6821      	ldr	r1, [r4, #0]
   1a43e:	68c0      	ldr	r0, [r0, #12]
   1a440:	f00b fb9d 	bl	25b7e <ccc_find_cfg>
	if (!cfg) {
   1a444:	b148      	cbz	r0, 1a45a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1a446:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1a44a:	8901      	ldrh	r1, [r0, #8]
   1a44c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1a450:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1a452:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1a454:	8151      	strh	r1, [r2, #10]
	save->count++;
   1a456:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1a45a:	2001      	movs	r0, #1
   1a45c:	bd38      	pop	{r3, r4, r5, pc}
   1a45e:	bf00      	nop
   1a460:	0001a519 	.word	0x0001a519

0001a464 <ccc_load>:
{
   1a464:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a466:	4b21      	ldr	r3, [pc, #132]	; (1a4ec <ccc_load+0x88>)
{
   1a468:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a46a:	6882      	ldr	r2, [r0, #8]
   1a46c:	429a      	cmp	r2, r3
   1a46e:	d002      	beq.n	1a476 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   1a470:	2001      	movs	r0, #1
}
   1a472:	b002      	add	sp, #8
   1a474:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   1a476:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   1a478:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1a47a:	b94b      	cbnz	r3, 1a490 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1a47c:	7922      	ldrb	r2, [r4, #4]
   1a47e:	6821      	ldr	r1, [r4, #0]
   1a480:	4630      	mov	r0, r6
   1a482:	f00b fb7c 	bl	25b7e <ccc_find_cfg>
	if (!cfg) {
   1a486:	2800      	cmp	r0, #0
   1a488:	d0f2      	beq.n	1a470 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1a48a:	f00b fb4d 	bl	25b28 <clear_ccc_cfg>
   1a48e:	e7ef      	b.n	1a470 <ccc_load+0xc>
	} else if (!load->count) {
   1a490:	68e0      	ldr	r0, [r4, #12]
   1a492:	2800      	cmp	r0, #0
   1a494:	d0ed      	beq.n	1a472 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   1a496:	881b      	ldrh	r3, [r3, #0]
   1a498:	4299      	cmp	r1, r3
   1a49a:	d00a      	beq.n	1a4b2 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1a49c:	d9e8      	bls.n	1a470 <ccc_load+0xc>
	load->count--;
   1a49e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1a4a0:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1a4a2:	3801      	subs	r0, #1
	load->entry++;
   1a4a4:	3304      	adds	r3, #4
	load->count--;
   1a4a6:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a4a8:	3800      	subs	r0, #0
	load->entry++;
   1a4aa:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a4ac:	bf18      	it	ne
   1a4ae:	2001      	movne	r0, #1
   1a4b0:	e7df      	b.n	1a472 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a4b2:	7922      	ldrb	r2, [r4, #4]
   1a4b4:	6821      	ldr	r1, [r4, #0]
   1a4b6:	4630      	mov	r0, r6
   1a4b8:	f00b fb61 	bl	25b7e <ccc_find_cfg>
	if (!cfg) {
   1a4bc:	4605      	mov	r5, r0
   1a4be:	b980      	cbnz	r0, 1a4e2 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1a4c0:	9000      	str	r0, [sp, #0]
   1a4c2:	4602      	mov	r2, r0
   1a4c4:	f8cd 0003 	str.w	r0, [sp, #3]
   1a4c8:	4669      	mov	r1, sp
   1a4ca:	4630      	mov	r0, r6
   1a4cc:	f00b fb57 	bl	25b7e <ccc_find_cfg>
		if (!cfg) {
   1a4d0:	4605      	mov	r5, r0
   1a4d2:	2800      	cmp	r0, #0
   1a4d4:	d0e3      	beq.n	1a49e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1a4d6:	6821      	ldr	r1, [r4, #0]
   1a4d8:	3001      	adds	r0, #1
   1a4da:	f00b fb22 	bl	25b22 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1a4de:	7923      	ldrb	r3, [r4, #4]
   1a4e0:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1a4e2:	68a3      	ldr	r3, [r4, #8]
   1a4e4:	885b      	ldrh	r3, [r3, #2]
   1a4e6:	812b      	strh	r3, [r5, #8]
   1a4e8:	e7d9      	b.n	1a49e <ccc_load+0x3a>
   1a4ea:	bf00      	nop
   1a4ec:	0001a519 	.word	0x0001a519

0001a4f0 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1a4f0:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4f2:	6881      	ldr	r1, [r0, #8]
{
   1a4f4:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4f6:	4a07      	ldr	r2, [pc, #28]	; (1a514 <remove_peer_from_attr+0x24>)
   1a4f8:	4291      	cmp	r1, r2
   1a4fa:	d109      	bne.n	1a510 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1a4fc:	791a      	ldrb	r2, [r3, #4]
   1a4fe:	6819      	ldr	r1, [r3, #0]
   1a500:	68c0      	ldr	r0, [r0, #12]
   1a502:	f00b fb3c 	bl	25b7e <ccc_find_cfg>
	if (cfg) {
   1a506:	b118      	cbz	r0, 1a510 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1a508:	220a      	movs	r2, #10
   1a50a:	2100      	movs	r1, #0
   1a50c:	f00a fb05 	bl	24b1a <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1a510:	2001      	movs	r0, #1
   1a512:	bd08      	pop	{r3, pc}
   1a514:	0001a519 	.word	0x0001a519

0001a518 <bt_gatt_attr_write_ccc>:
{
   1a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a51c:	461f      	mov	r7, r3
   1a51e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a522:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1a526:	4606      	mov	r6, r0
   1a528:	4688      	mov	r8, r1
	if (offset) {
   1a52a:	2b00      	cmp	r3, #0
   1a52c:	d144      	bne.n	1a5b8 <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(uint16_t)) {
   1a52e:	1e7b      	subs	r3, r7, #1
   1a530:	2b01      	cmp	r3, #1
   1a532:	d844      	bhi.n	1a5be <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(uint16_t)) {
   1a534:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1a536:	7815      	ldrb	r5, [r2, #0]
   1a538:	bf18      	it	ne
   1a53a:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1a53c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1a53e:	bf0c      	ite	eq
   1a540:	b2ad      	uxtheq	r5, r5
   1a542:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1a546:	f00b fb29 	bl	25b9c <find_ccc_cfg>
	if (!cfg) {
   1a54a:	4604      	mov	r4, r0
   1a54c:	b9b0      	cbnz	r0, 1a57c <bt_gatt_attr_write_ccc+0x64>
		if (!value) {
   1a54e:	b915      	cbnz	r5, 1a556 <bt_gatt_attr_write_ccc+0x3e>
			return len;
   1a550:	4638      	mov	r0, r7
}
   1a552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a556:	4649      	mov	r1, r9
   1a558:	f00b fb20 	bl	25b9c <find_ccc_cfg>
		if (!cfg) {
   1a55c:	4604      	mov	r4, r0
   1a55e:	b930      	cbnz	r0, 1a56e <bt_gatt_attr_write_ccc+0x56>
			BT_WARN("No space to store CCC cfg");
   1a560:	4818      	ldr	r0, [pc, #96]	; (1a5c4 <bt_gatt_attr_write_ccc+0xac>)
   1a562:	2157      	movs	r1, #87	; 0x57
   1a564:	f008 fbe2 	bl	22d2c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a568:	f06f 0010 	mvn.w	r0, #16
   1a56c:	e7f1      	b.n	1a552 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a56e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1a572:	3001      	adds	r0, #1
   1a574:	f00b fad5 	bl	25b22 <bt_addr_le_copy>
		cfg->id = conn->id;
   1a578:	7a33      	ldrb	r3, [r6, #8]
   1a57a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1a57c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1a580:	b973      	cbnz	r3, 1a5a0 <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
   1a582:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1a586:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1a588:	42ab      	cmp	r3, r5
   1a58a:	d003      	beq.n	1a594 <bt_gatt_attr_write_ccc+0x7c>
		gatt_ccc_changed(attr, ccc);
   1a58c:	4649      	mov	r1, r9
   1a58e:	4640      	mov	r0, r8
   1a590:	f00b fa4f 	bl	25a32 <gatt_ccc_changed>
	if (!value) {
   1a594:	2d00      	cmp	r5, #0
   1a596:	d1db      	bne.n	1a550 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   1a598:	4620      	mov	r0, r4
   1a59a:	f00b fac5 	bl	25b28 <clear_ccc_cfg>
   1a59e:	e7d7      	b.n	1a550 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a5a0:	462a      	mov	r2, r5
   1a5a2:	4641      	mov	r1, r8
   1a5a4:	4630      	mov	r0, r6
   1a5a6:	4798      	blx	r3
		if (write < 0) {
   1a5a8:	2800      	cmp	r0, #0
   1a5aa:	dbd2      	blt.n	1a552 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1a5ac:	1e42      	subs	r2, r0, #1
   1a5ae:	2a01      	cmp	r2, #1
   1a5b0:	d9e7      	bls.n	1a582 <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a5b2:	f06f 000d 	mvn.w	r0, #13
   1a5b6:	e7cc      	b.n	1a552 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a5b8:	f06f 0006 	mvn.w	r0, #6
   1a5bc:	e7c9      	b.n	1a552 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a5be:	f06f 000c 	mvn.w	r0, #12
   1a5c2:	e7c6      	b.n	1a552 <bt_gatt_attr_write_ccc+0x3a>
   1a5c4:	00029811 	.word	0x00029811

0001a5c8 <sc_commit>:
{
   1a5c8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a5ca:	490f      	ldr	r1, [pc, #60]	; (1a608 <sc_commit+0x40>)
   1a5cc:	f3bf 8f5b 	dmb	ish
   1a5d0:	f101 0350 	add.w	r3, r1, #80	; 0x50
   1a5d4:	e853 2f00 	ldrex	r2, [r3]
   1a5d8:	f022 0202 	bic.w	r2, r2, #2
   1a5dc:	e843 2000 	strex	r0, r2, [r3]
   1a5e0:	2800      	cmp	r0, #0
   1a5e2:	d1f7      	bne.n	1a5d4 <sc_commit+0xc>
   1a5e4:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a5e8:	f3bf 8f5b 	dmb	ish
   1a5ec:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1a5ee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a5f2:	07db      	lsls	r3, r3, #31
   1a5f4:	d506      	bpl.n	1a604 <sc_commit+0x3c>
   1a5f6:	4805      	ldr	r0, [pc, #20]	; (1a60c <sc_commit+0x44>)
   1a5f8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a5fc:	2300      	movs	r3, #0
   1a5fe:	3120      	adds	r1, #32
   1a600:	f007 fc64 	bl	21ecc <k_delayed_work_submit_to_queue>
}
   1a604:	2000      	movs	r0, #0
   1a606:	bd08      	pop	{r3, pc}
   1a608:	20002220 	.word	0x20002220
   1a60c:	200026c8 	.word	0x200026c8

0001a610 <find_sc_cfg>:
{
   1a610:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1a612:	4c0e      	ldr	r4, [pc, #56]	; (1a64c <find_sc_cfg+0x3c>)
   1a614:	7823      	ldrb	r3, [r4, #0]
   1a616:	4283      	cmp	r3, r0
{
   1a618:	4605      	mov	r5, r0
   1a61a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1a61c:	d00a      	beq.n	1a634 <find_sc_cfg+0x24>
   1a61e:	7b23      	ldrb	r3, [r4, #12]
   1a620:	42ab      	cmp	r3, r5
   1a622:	d111      	bne.n	1a648 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   1a624:	480a      	ldr	r0, [pc, #40]	; (1a650 <find_sc_cfg+0x40>)
   1a626:	2207      	movs	r2, #7
   1a628:	4631      	mov	r1, r6
   1a62a:	f00a fa3b 	bl	24aa4 <memcmp>
   1a62e:	b958      	cbnz	r0, 1a648 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a630:	2001      	movs	r0, #1
   1a632:	e005      	b.n	1a640 <find_sc_cfg+0x30>
   1a634:	2207      	movs	r2, #7
   1a636:	1c60      	adds	r0, r4, #1
   1a638:	f00a fa34 	bl	24aa4 <memcmp>
		if (id == sc_cfg[i].id &&
   1a63c:	2800      	cmp	r0, #0
   1a63e:	d1ee      	bne.n	1a61e <find_sc_cfg+0xe>
			return &sc_cfg[i];
   1a640:	230c      	movs	r3, #12
   1a642:	fb03 4000 	mla	r0, r3, r0, r4
   1a646:	e000      	b.n	1a64a <find_sc_cfg+0x3a>
	return NULL;
   1a648:	2000      	movs	r0, #0
}
   1a64a:	bd70      	pop	{r4, r5, r6, pc}
   1a64c:	20002b82 	.word	0x20002b82
   1a650:	20002b8f 	.word	0x20002b8f

0001a654 <sc_save>:
{
   1a654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a658:	4680      	mov	r8, r0
   1a65a:	460f      	mov	r7, r1
   1a65c:	4616      	mov	r6, r2
   1a65e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a660:	f7ff ffd6 	bl	1a610 <find_sc_cfg>
	if (!cfg) {
   1a664:	4604      	mov	r4, r0
   1a666:	b998      	cbnz	r0, 1a690 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a668:	4669      	mov	r1, sp
   1a66a:	9000      	str	r0, [sp, #0]
   1a66c:	f8cd 0003 	str.w	r0, [sp, #3]
   1a670:	f7ff ffce 	bl	1a610 <find_sc_cfg>
		if (!cfg) {
   1a674:	4604      	mov	r4, r0
   1a676:	b930      	cbnz	r0, 1a686 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   1a678:	4812      	ldr	r0, [pc, #72]	; (1a6c4 <sc_save+0x70>)
   1a67a:	2145      	movs	r1, #69	; 0x45
   1a67c:	f008 fb56 	bl	22d2c <printk>
}
   1a680:	b002      	add	sp, #8
   1a682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a686:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a68a:	4639      	mov	r1, r7
   1a68c:	f00b fa49 	bl	25b22 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a690:	8922      	ldrh	r2, [r4, #8]
   1a692:	8963      	ldrh	r3, [r4, #10]
   1a694:	b96a      	cbnz	r2, 1a6b2 <sc_save+0x5e>
   1a696:	b973      	cbnz	r3, 1a6b6 <sc_save+0x62>
		cfg->data.start = start;
   1a698:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a69a:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1a69c:	4621      	mov	r1, r4
   1a69e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a6a2:	f00a fcb2 	bl	2500a <bt_addr_le_is_bonded>
   1a6a6:	2800      	cmp	r0, #0
   1a6a8:	d0ea      	beq.n	1a680 <sc_save+0x2c>
		sc_store(cfg);
   1a6aa:	4620      	mov	r0, r4
   1a6ac:	f7ff fe66 	bl	1a37c <sc_store>
   1a6b0:	e7e6      	b.n	1a680 <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
   1a6b2:	4296      	cmp	r6, r2
   1a6b4:	d302      	bcc.n	1a6bc <sc_save+0x68>
   1a6b6:	429d      	cmp	r5, r3
   1a6b8:	d8ef      	bhi.n	1a69a <sc_save+0x46>
   1a6ba:	e7e1      	b.n	1a680 <sc_save+0x2c>
	if (*end < new_end) {
   1a6bc:	429d      	cmp	r5, r3
		*start = new_start;
   1a6be:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1a6c0:	d9ec      	bls.n	1a69c <sc_save+0x48>
   1a6c2:	e7ea      	b.n	1a69a <sc_save+0x46>
   1a6c4:	00029830 	.word	0x00029830

0001a6c8 <sc_set>:
{
   1a6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a6cc:	460e      	mov	r6, r1
   1a6ce:	b087      	sub	sp, #28
   1a6d0:	4690      	mov	r8, r2
   1a6d2:	4699      	mov	r9, r3
	if (!name) {
   1a6d4:	4604      	mov	r4, r0
   1a6d6:	b948      	cbnz	r0, 1a6ec <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   1a6d8:	4829      	ldr	r0, [pc, #164]	; (1a780 <sc_set+0xb8>)
   1a6da:	2145      	movs	r1, #69	; 0x45
   1a6dc:	f008 fb26 	bl	22d2c <printk>
		return -EINVAL;
   1a6e0:	f06f 0515 	mvn.w	r5, #21
}
   1a6e4:	4628      	mov	r0, r5
   1a6e6:	b007      	add	sp, #28
   1a6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1a6ec:	a902      	add	r1, sp, #8
   1a6ee:	f00a fa97 	bl	24c20 <bt_settings_decode_key>
	if (err) {
   1a6f2:	4605      	mov	r5, r0
   1a6f4:	b128      	cbz	r0, 1a702 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1a6f6:	4823      	ldr	r0, [pc, #140]	; (1a784 <sc_set+0xbc>)
   1a6f8:	4622      	mov	r2, r4
   1a6fa:	2145      	movs	r1, #69	; 0x45
   1a6fc:	f008 fb16 	bl	22d2c <printk>
   1a700:	e7ee      	b.n	1a6e0 <sc_set+0x18>
	settings_name_next(name, &next);
   1a702:	a901      	add	r1, sp, #4
   1a704:	4620      	mov	r0, r4
   1a706:	f008 ff2c 	bl	23562 <settings_name_next>
	if (!next) {
   1a70a:	9801      	ldr	r0, [sp, #4]
   1a70c:	b1d8      	cbz	r0, 1a746 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   1a70e:	220a      	movs	r2, #10
   1a710:	4629      	mov	r1, r5
   1a712:	f00a f925 	bl	24960 <strtol>
   1a716:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   1a718:	a902      	add	r1, sp, #8
   1a71a:	4638      	mov	r0, r7
   1a71c:	f7ff ff78 	bl	1a610 <find_sc_cfg>
	if (!cfg && len_rd) {
   1a720:	4604      	mov	r4, r0
   1a722:	bb28      	cbnz	r0, 1a770 <sc_set+0xa8>
   1a724:	2e00      	cmp	r6, #0
   1a726:	d0dd      	beq.n	1a6e4 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a728:	a904      	add	r1, sp, #16
   1a72a:	9004      	str	r0, [sp, #16]
   1a72c:	f8cd 0013 	str.w	r0, [sp, #19]
   1a730:	f7ff ff6e 	bl	1a610 <find_sc_cfg>
		if (!cfg) {
   1a734:	4604      	mov	r4, r0
   1a736:	b940      	cbnz	r0, 1a74a <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   1a738:	4813      	ldr	r0, [pc, #76]	; (1a788 <sc_set+0xc0>)
   1a73a:	2145      	movs	r1, #69	; 0x45
   1a73c:	f008 faf6 	bl	22d2c <printk>
			return -ENOMEM;
   1a740:	f06f 050b 	mvn.w	r5, #11
   1a744:	e7ce      	b.n	1a6e4 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   1a746:	462f      	mov	r7, r5
   1a748:	e7e6      	b.n	1a718 <sc_set+0x50>
		cfg->id = id;
   1a74a:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a74e:	a902      	add	r1, sp, #8
   1a750:	f00b f9e7 	bl	25b22 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1a754:	f104 0108 	add.w	r1, r4, #8
   1a758:	2204      	movs	r2, #4
   1a75a:	4648      	mov	r0, r9
   1a75c:	47c0      	blx	r8
		if (len < 0) {
   1a75e:	1e04      	subs	r4, r0, #0
   1a760:	dac0      	bge.n	1a6e4 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1a762:	480a      	ldr	r0, [pc, #40]	; (1a78c <sc_set+0xc4>)
   1a764:	4622      	mov	r2, r4
   1a766:	2145      	movs	r1, #69	; 0x45
   1a768:	f008 fae0 	bl	22d2c <printk>
			return len;
   1a76c:	4625      	mov	r5, r4
   1a76e:	e7b9      	b.n	1a6e4 <sc_set+0x1c>
	if (len_rd) {
   1a770:	2e00      	cmp	r6, #0
   1a772:	d1ef      	bne.n	1a754 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   1a774:	220c      	movs	r2, #12
   1a776:	4631      	mov	r1, r6
   1a778:	f00a f9cf 	bl	24b1a <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1a77c:	e7b2      	b.n	1a6e4 <sc_set+0x1c>
   1a77e:	bf00      	nop
   1a780:	00028738 	.word	0x00028738
   1a784:	00029854 	.word	0x00029854
   1a788:	00029875 	.word	0x00029875
   1a78c:	00029769 	.word	0x00029769

0001a790 <find_cf_cfg_by_addr>:
{
   1a790:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1a792:	4c0e      	ldr	r4, [pc, #56]	; (1a7cc <find_cf_cfg_by_addr+0x3c>)
   1a794:	7823      	ldrb	r3, [r4, #0]
   1a796:	4283      	cmp	r3, r0
{
   1a798:	4606      	mov	r6, r0
   1a79a:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1a79c:	d00a      	beq.n	1a7b4 <find_cf_cfg_by_addr+0x24>
   1a79e:	7c23      	ldrb	r3, [r4, #16]
   1a7a0:	42b3      	cmp	r3, r6
   1a7a2:	d111      	bne.n	1a7c8 <find_cf_cfg_by_addr+0x38>
   1a7a4:	490a      	ldr	r1, [pc, #40]	; (1a7d0 <find_cf_cfg_by_addr+0x40>)
   1a7a6:	2207      	movs	r2, #7
   1a7a8:	4628      	mov	r0, r5
   1a7aa:	f00a f97b 	bl	24aa4 <memcmp>
   1a7ae:	b958      	cbnz	r0, 1a7c8 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a7b0:	2001      	movs	r0, #1
   1a7b2:	e006      	b.n	1a7c2 <find_cf_cfg_by_addr+0x32>
   1a7b4:	2207      	movs	r2, #7
   1a7b6:	1c61      	adds	r1, r4, #1
   1a7b8:	4628      	mov	r0, r5
   1a7ba:	f00a f973 	bl	24aa4 <memcmp>
			if (id == cf_cfg[i].id &&
   1a7be:	2800      	cmp	r0, #0
   1a7c0:	d1ed      	bne.n	1a79e <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   1a7c2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   1a7c6:	e000      	b.n	1a7ca <find_cf_cfg_by_addr+0x3a>
	return NULL;
   1a7c8:	2000      	movs	r0, #0
}
   1a7ca:	bd70      	pop	{r4, r5, r6, pc}
   1a7cc:	20002988 	.word	0x20002988
   1a7d0:	20002999 	.word	0x20002999

0001a7d4 <find_cf_cfg>:
{
   1a7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a7d6:	4c16      	ldr	r4, [pc, #88]	; (1a830 <find_cf_cfg+0x5c>)
		if (!conn) {
   1a7d8:	4605      	mov	r5, r0
   1a7da:	b140      	cbz	r0, 1a7ee <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a7dc:	4622      	mov	r2, r4
   1a7de:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a7e2:	f00a fd15 	bl	25210 <bt_conn_is_peer_addr_le>
   1a7e6:	b1c0      	cbz	r0, 1a81a <find_cf_cfg+0x46>
}
   1a7e8:	4620      	mov	r0, r4
   1a7ea:	b003      	add	sp, #12
   1a7ec:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a7ee:	9000      	str	r0, [sp, #0]
   1a7f0:	2207      	movs	r2, #7
   1a7f2:	f8cd 0003 	str.w	r0, [sp, #3]
   1a7f6:	4669      	mov	r1, sp
   1a7f8:	1c60      	adds	r0, r4, #1
   1a7fa:	f00a f953 	bl	24aa4 <memcmp>
   1a7fe:	2800      	cmp	r0, #0
   1a800:	d0f2      	beq.n	1a7e8 <find_cf_cfg+0x14>
   1a802:	2207      	movs	r2, #7
   1a804:	4669      	mov	r1, sp
   1a806:	f104 0011 	add.w	r0, r4, #17
   1a80a:	9500      	str	r5, [sp, #0]
   1a80c:	f8cd 5003 	str.w	r5, [sp, #3]
   1a810:	f00a f948 	bl	24aa4 <memcmp>
   1a814:	b948      	cbnz	r0, 1a82a <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a816:	3410      	adds	r4, #16
   1a818:	e7e6      	b.n	1a7e8 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a81a:	7c21      	ldrb	r1, [r4, #16]
   1a81c:	f104 0211 	add.w	r2, r4, #17
   1a820:	4628      	mov	r0, r5
   1a822:	f00a fcf5 	bl	25210 <bt_conn_is_peer_addr_le>
   1a826:	2800      	cmp	r0, #0
   1a828:	d1f5      	bne.n	1a816 <find_cf_cfg+0x42>
	return NULL;
   1a82a:	2400      	movs	r4, #0
   1a82c:	e7dc      	b.n	1a7e8 <find_cf_cfg+0x14>
   1a82e:	bf00      	nop
   1a830:	20002988 	.word	0x20002988

0001a834 <cf_write>:
{
   1a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a838:	461f      	mov	r7, r3
   1a83a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1a83e:	2b01      	cmp	r3, #1
{
   1a840:	4680      	mov	r8, r0
   1a842:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   1a844:	d841      	bhi.n	1a8ca <cf_write+0x96>
	if (offset + len > sizeof(cfg->data)) {
   1a846:	443b      	add	r3, r7
   1a848:	2b01      	cmp	r3, #1
   1a84a:	463d      	mov	r5, r7
   1a84c:	dc40      	bgt.n	1a8d0 <cf_write+0x9c>
	cfg = find_cf_cfg(conn);
   1a84e:	f7ff ffc1 	bl	1a7d4 <find_cf_cfg>
	if (!cfg) {
   1a852:	4604      	mov	r4, r0
   1a854:	b960      	cbnz	r0, 1a870 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
   1a856:	f7ff ffbd 	bl	1a7d4 <find_cf_cfg>
	if (!cfg) {
   1a85a:	4604      	mov	r4, r0
   1a85c:	b940      	cbnz	r0, 1a870 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
   1a85e:	481f      	ldr	r0, [pc, #124]	; (1a8dc <cf_write+0xa8>)
   1a860:	2157      	movs	r1, #87	; 0x57
   1a862:	f008 fa63 	bl	22d2c <printk>
   1a866:	f06f 0510 	mvn.w	r5, #16
}
   1a86a:	4628      	mov	r0, r5
   1a86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
   1a870:	4632      	mov	r2, r6
   1a872:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   1a876:	4562      	cmp	r2, ip
   1a878:	d114      	bne.n	1a8a4 <cf_write+0x70>
	for (i = 0U; i < len && i < last_byte; i++) {
   1a87a:	b12f      	cbz	r7, 1a888 <cf_write+0x54>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   1a87c:	7833      	ldrb	r3, [r6, #0]
   1a87e:	7a22      	ldrb	r2, [r4, #8]
   1a880:	f003 0307 	and.w	r3, r3, #7
   1a884:	4313      	orrs	r3, r2
   1a886:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a888:	f108 0190 	add.w	r1, r8, #144	; 0x90
   1a88c:	1c60      	adds	r0, r4, #1
   1a88e:	f00b f948 	bl	25b22 <bt_addr_le_copy>
	cfg->id = conn->id;
   1a892:	4620      	mov	r0, r4
   1a894:	f898 3008 	ldrb.w	r3, [r8, #8]
   1a898:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a89c:	2100      	movs	r1, #0
   1a89e:	f00b f997 	bl	25bd0 <atomic_set_bit>
	return len;
   1a8a2:	e7e2      	b.n	1a86a <cf_write+0x36>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1a8a4:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a8a8:	7a20      	ldrb	r0, [r4, #8]
   1a8aa:	2300      	movs	r3, #0
   1a8ac:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
   1a8ae:	fa21 fe03 	lsr.w	lr, r1, r3
   1a8b2:	f01e 0f01 	tst.w	lr, #1
   1a8b6:	d004      	beq.n	1a8c2 <cf_write+0x8e>
   1a8b8:	fa20 fe03 	lsr.w	lr, r0, r3
   1a8bc:	f01e 0f01 	tst.w	lr, #1
   1a8c0:	d109      	bne.n	1a8d6 <cf_write+0xa2>
		for (bit = 0U; bit <= last_bit; bit++) {
   1a8c2:	3301      	adds	r3, #1
   1a8c4:	2b03      	cmp	r3, #3
   1a8c6:	d1f2      	bne.n	1a8ae <cf_write+0x7a>
   1a8c8:	e7d5      	b.n	1a876 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a8ca:	f06f 0506 	mvn.w	r5, #6
   1a8ce:	e7cc      	b.n	1a86a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a8d0:	f06f 050c 	mvn.w	r5, #12
   1a8d4:	e7c9      	b.n	1a86a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a8d6:	f06f 0512 	mvn.w	r5, #18
   1a8da:	e7c6      	b.n	1a86a <cf_write+0x36>
   1a8dc:	0002989c 	.word	0x0002989c

0001a8e0 <sc_indicate_rsp>:
{
   1a8e0:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a8e2:	4915      	ldr	r1, [pc, #84]	; (1a938 <sc_indicate_rsp+0x58>)
   1a8e4:	f3bf 8f5b 	dmb	ish
   1a8e8:	4604      	mov	r4, r0
   1a8ea:	f101 0350 	add.w	r3, r1, #80	; 0x50
   1a8ee:	e853 2f00 	ldrex	r2, [r3]
   1a8f2:	f022 0202 	bic.w	r2, r2, #2
   1a8f6:	e843 2000 	strex	r0, r2, [r3]
   1a8fa:	2800      	cmp	r0, #0
   1a8fc:	d1f7      	bne.n	1a8ee <sc_indicate_rsp+0xe>
   1a8fe:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a902:	f3bf 8f5b 	dmb	ish
   1a906:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1a908:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a90c:	07da      	lsls	r2, r3, #31
   1a90e:	d505      	bpl.n	1a91c <sc_indicate_rsp+0x3c>
   1a910:	480a      	ldr	r0, [pc, #40]	; (1a93c <sc_indicate_rsp+0x5c>)
   1a912:	2200      	movs	r2, #0
   1a914:	2300      	movs	r3, #0
   1a916:	3120      	adds	r1, #32
   1a918:	f007 fad8 	bl	21ecc <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   1a91c:	4620      	mov	r0, r4
   1a91e:	f7ff ff59 	bl	1a7d4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a922:	b140      	cbz	r0, 1a936 <sc_indicate_rsp+0x56>
   1a924:	7a03      	ldrb	r3, [r0, #8]
   1a926:	07db      	lsls	r3, r3, #31
   1a928:	d505      	bpl.n	1a936 <sc_indicate_rsp+0x56>
}
   1a92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a92e:	2100      	movs	r1, #0
   1a930:	300c      	adds	r0, #12
   1a932:	f00b b94d 	b.w	25bd0 <atomic_set_bit>
}
   1a936:	bd10      	pop	{r4, pc}
   1a938:	20002220 	.word	0x20002220
   1a93c:	200026c8 	.word	0x200026c8

0001a940 <cf_set>:
{
   1a940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a944:	4689      	mov	r9, r1
   1a946:	b085      	sub	sp, #20
   1a948:	4617      	mov	r7, r2
   1a94a:	4698      	mov	r8, r3
	if (!name) {
   1a94c:	4605      	mov	r5, r0
   1a94e:	b948      	cbnz	r0, 1a964 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   1a950:	4826      	ldr	r0, [pc, #152]	; (1a9ec <cf_set+0xac>)
   1a952:	2145      	movs	r1, #69	; 0x45
   1a954:	f008 f9ea 	bl	22d2c <printk>
		return -EINVAL;
   1a958:	f06f 0415 	mvn.w	r4, #21
}
   1a95c:	4620      	mov	r0, r4
   1a95e:	b005      	add	sp, #20
   1a960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1a964:	a902      	add	r1, sp, #8
   1a966:	f00a f95b 	bl	24c20 <bt_settings_decode_key>
	if (err) {
   1a96a:	4604      	mov	r4, r0
   1a96c:	b128      	cbz	r0, 1a97a <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1a96e:	4820      	ldr	r0, [pc, #128]	; (1a9f0 <cf_set+0xb0>)
   1a970:	462a      	mov	r2, r5
   1a972:	2145      	movs	r1, #69	; 0x45
   1a974:	f008 f9da 	bl	22d2c <printk>
   1a978:	e7ee      	b.n	1a958 <cf_set+0x18>
	settings_name_next(name, &next);
   1a97a:	a901      	add	r1, sp, #4
   1a97c:	4628      	mov	r0, r5
   1a97e:	f008 fdf0 	bl	23562 <settings_name_next>
	if (!next) {
   1a982:	9801      	ldr	r0, [sp, #4]
   1a984:	b1a8      	cbz	r0, 1a9b2 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   1a986:	220a      	movs	r2, #10
   1a988:	4621      	mov	r1, r4
   1a98a:	f009 ffe9 	bl	24960 <strtol>
   1a98e:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   1a990:	a902      	add	r1, sp, #8
   1a992:	4630      	mov	r0, r6
   1a994:	f7ff fefc 	bl	1a790 <find_cf_cfg_by_addr>
	if (!cfg) {
   1a998:	4605      	mov	r5, r0
   1a99a:	b988      	cbnz	r0, 1a9c0 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   1a99c:	f7ff ff1a 	bl	1a7d4 <find_cf_cfg>
		if (!cfg) {
   1a9a0:	4605      	mov	r5, r0
   1a9a2:	b940      	cbnz	r0, 1a9b6 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   1a9a4:	4813      	ldr	r0, [pc, #76]	; (1a9f4 <cf_set+0xb4>)
   1a9a6:	2145      	movs	r1, #69	; 0x45
   1a9a8:	f008 f9c0 	bl	22d2c <printk>
			return -ENOMEM;
   1a9ac:	f06f 040b 	mvn.w	r4, #11
   1a9b0:	e7d4      	b.n	1a95c <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   1a9b2:	4626      	mov	r6, r4
   1a9b4:	e7ec      	b.n	1a990 <cf_set+0x50>
		cfg->id = id;
   1a9b6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a9ba:	a902      	add	r1, sp, #8
   1a9bc:	f00b f8b1 	bl	25b22 <bt_addr_le_copy>
	if (len_rd) {
   1a9c0:	f1b9 0f00 	cmp.w	r9, #0
   1a9c4:	d00d      	beq.n	1a9e2 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1a9c6:	f105 0108 	add.w	r1, r5, #8
   1a9ca:	2201      	movs	r2, #1
   1a9cc:	4640      	mov	r0, r8
   1a9ce:	47b8      	blx	r7
		if (len < 0) {
   1a9d0:	1e05      	subs	r5, r0, #0
   1a9d2:	dac3      	bge.n	1a95c <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1a9d4:	4808      	ldr	r0, [pc, #32]	; (1a9f8 <cf_set+0xb8>)
   1a9d6:	462a      	mov	r2, r5
   1a9d8:	2145      	movs	r1, #69	; 0x45
   1a9da:	f008 f9a7 	bl	22d2c <printk>
			return len;
   1a9de:	462c      	mov	r4, r5
   1a9e0:	e7bc      	b.n	1a95c <cf_set+0x1c>
		clear_cf_cfg(cfg);
   1a9e2:	4628      	mov	r0, r5
   1a9e4:	f00b f8ae 	bl	25b44 <clear_cf_cfg>
   1a9e8:	e7b8      	b.n	1a95c <cf_set+0x1c>
   1a9ea:	bf00      	nop
   1a9ec:	00028738 	.word	0x00028738
   1a9f0:	00029854 	.word	0x00029854
   1a9f4:	000298cd 	.word	0x000298cd
   1a9f8:	00029769 	.word	0x00029769

0001a9fc <read_ppcp>:
{
   1a9fc:	b513      	push	{r0, r1, r4, lr}
   1a9fe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1aa02:	4c0b      	ldr	r4, [pc, #44]	; (1aa30 <read_ppcp+0x34>)
{
   1aa04:	4610      	mov	r0, r2
	if (offset > value_len) {
   1aa06:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1aa08:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1aa0c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1aa10:	d80b      	bhi.n	1aa2a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1aa12:	f1c1 0408 	rsb	r4, r1, #8
   1aa16:	429c      	cmp	r4, r3
   1aa18:	bfa8      	it	ge
   1aa1a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1aa1c:	4622      	mov	r2, r4
   1aa1e:	4469      	add	r1, sp
   1aa20:	f00a f850 	bl	24ac4 <memcpy>
}
   1aa24:	4620      	mov	r0, r4
   1aa26:	b002      	add	sp, #8
   1aa28:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1aa2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1aa2e:	e7f9      	b.n	1aa24 <read_ppcp+0x28>
   1aa30:	00280018 	.word	0x00280018

0001aa34 <bt_gatt_clear_sc>:
{
   1aa34:	b570      	push	{r4, r5, r6, lr}
   1aa36:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1aa38:	f7ff fdea 	bl	1a610 <find_sc_cfg>
	if (!cfg) {
   1aa3c:	4604      	mov	r4, r0
   1aa3e:	b1e8      	cbz	r0, 1aa7c <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   1aa40:	4605      	mov	r5, r0
   1aa42:	f815 2b01 	ldrb.w	r2, [r5], #1
   1aa46:	b1e2      	cbz	r2, 1aa82 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1aa48:	ae02      	add	r6, sp, #8
   1aa4a:	2104      	movs	r1, #4
   1aa4c:	4630      	mov	r0, r6
   1aa4e:	f008 f8d1 	bl	22bf4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1aa52:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1aa54:	4a0c      	ldr	r2, [pc, #48]	; (1aa88 <bt_gatt_clear_sc+0x54>)
   1aa56:	462b      	mov	r3, r5
   1aa58:	2124      	movs	r1, #36	; 0x24
   1aa5a:	a803      	add	r0, sp, #12
   1aa5c:	f7fb fbaa 	bl	161b4 <bt_settings_encode_key>
		err = settings_delete(key);
   1aa60:	a803      	add	r0, sp, #12
   1aa62:	f008 fd57 	bl	23514 <settings_delete>
		if (err) {
   1aa66:	4602      	mov	r2, r0
   1aa68:	b118      	cbz	r0, 1aa72 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   1aa6a:	4808      	ldr	r0, [pc, #32]	; (1aa8c <bt_gatt_clear_sc+0x58>)
   1aa6c:	2145      	movs	r1, #69	; 0x45
   1aa6e:	f008 f95d 	bl	22d2c <printk>
	memset(cfg, 0, sizeof(*cfg));
   1aa72:	220c      	movs	r2, #12
   1aa74:	2100      	movs	r1, #0
   1aa76:	4620      	mov	r0, r4
   1aa78:	f00a f84f 	bl	24b1a <memset>
}
   1aa7c:	2000      	movs	r0, #0
   1aa7e:	b00c      	add	sp, #48	; 0x30
   1aa80:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1aa82:	9200      	str	r2, [sp, #0]
   1aa84:	e7e6      	b.n	1aa54 <bt_gatt_clear_sc+0x20>
   1aa86:	bf00      	nop
   1aa88:	00029a95 	.word	0x00029a95
   1aa8c:	000298f4 	.word	0x000298f4

0001aa90 <sc_clear>:
{
   1aa90:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa92:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1aa96:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa98:	4631      	mov	r1, r6
   1aa9a:	7a00      	ldrb	r0, [r0, #8]
   1aa9c:	f00a fab5 	bl	2500a <bt_addr_le_is_bonded>
   1aaa0:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1aaa2:	4631      	mov	r1, r6
   1aaa4:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aaa6:	b14d      	cbz	r5, 1aabc <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1aaa8:	f7ff ffc4 	bl	1aa34 <bt_gatt_clear_sc>
		if (err) {
   1aaac:	4602      	mov	r2, r0
   1aaae:	b170      	cbz	r0, 1aace <sc_clear+0x3e>
}
   1aab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   1aab4:	4806      	ldr	r0, [pc, #24]	; (1aad0 <sc_clear+0x40>)
   1aab6:	2145      	movs	r1, #69	; 0x45
   1aab8:	f008 b938 	b.w	22d2c <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1aabc:	f7ff fda8 	bl	1a610 <find_sc_cfg>
		if (cfg) {
   1aac0:	b128      	cbz	r0, 1aace <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   1aac2:	4629      	mov	r1, r5
   1aac4:	220c      	movs	r2, #12
}
   1aac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1aaca:	f00a b826 	b.w	24b1a <memset>
}
   1aace:	bd70      	pop	{r4, r5, r6, pc}
   1aad0:	00029916 	.word	0x00029916

0001aad4 <disconnected_cb>:
{
   1aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aad8:	4b1f      	ldr	r3, [pc, #124]	; (1ab58 <disconnected_cb+0x84>)
{
   1aada:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aadc:	6882      	ldr	r2, [r0, #8]
   1aade:	429a      	cmp	r2, r3
{
   1aae0:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aae2:	d102      	bne.n	1aaea <disconnected_cb+0x16>
	ccc = attr->user_data;
   1aae4:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1aae6:	8963      	ldrh	r3, [r4, #10]
   1aae8:	b9c3      	cbnz	r3, 1ab1c <disconnected_cb+0x48>
}
   1aaea:	2001      	movs	r0, #1
   1aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aaf0:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1aaf4:	7a28      	ldrb	r0, [r5, #8]
   1aaf6:	4641      	mov	r1, r8
   1aaf8:	f00a fa87 	bl	2500a <bt_addr_le_is_bonded>
   1aafc:	b948      	cbnz	r0, 1ab12 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1aafe:	4b17      	ldr	r3, [pc, #92]	; (1ab5c <disconnected_cb+0x88>)
   1ab00:	429c      	cmp	r4, r3
   1ab02:	d102      	bne.n	1ab0a <disconnected_cb+0x36>
					sc_clear(conn);
   1ab04:	4628      	mov	r0, r5
   1ab06:	f7ff ffc3 	bl	1aa90 <sc_clear>
				clear_ccc_cfg(cfg);
   1ab0a:	4620      	mov	r0, r4
   1ab0c:	f00b f80c 	bl	25b28 <clear_ccc_cfg>
	if (!value_used) {
   1ab10:	e019      	b.n	1ab46 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ab12:	4641      	mov	r1, r8
   1ab14:	4638      	mov	r0, r7
   1ab16:	f00b f804 	bl	25b22 <bt_addr_le_copy>
	if (!value_used) {
   1ab1a:	e014      	b.n	1ab46 <disconnected_cb+0x72>
		if (!cfg->value) {
   1ab1c:	8923      	ldrh	r3, [r4, #8]
   1ab1e:	b193      	cbz	r3, 1ab46 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ab20:	4627      	mov	r7, r4
   1ab22:	4628      	mov	r0, r5
   1ab24:	f817 1b01 	ldrb.w	r1, [r7], #1
   1ab28:	463a      	mov	r2, r7
   1ab2a:	f00a fb71 	bl	25210 <bt_conn_is_peer_addr_le>
   1ab2e:	2800      	cmp	r0, #0
   1ab30:	d1de      	bne.n	1aaf0 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ab32:	7820      	ldrb	r0, [r4, #0]
   1ab34:	4639      	mov	r1, r7
   1ab36:	f7fd fea9 	bl	1888c <bt_conn_lookup_addr_le>
			if (tmp) {
   1ab3a:	b120      	cbz	r0, 1ab46 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   1ab3c:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   1ab3e:	f00a fb87 	bl	25250 <bt_conn_unref>
	if (!value_used) {
   1ab42:	2d07      	cmp	r5, #7
   1ab44:	d0d1      	beq.n	1aaea <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1ab46:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1ab48:	2100      	movs	r1, #0
   1ab4a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1ab4c:	2b00      	cmp	r3, #0
   1ab4e:	d0cc      	beq.n	1aaea <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1ab50:	4630      	mov	r0, r6
   1ab52:	4798      	blx	r3
   1ab54:	e7c9      	b.n	1aaea <disconnected_cb+0x16>
   1ab56:	bf00      	nop
   1ab58:	0001a519 	.word	0x0001a519
   1ab5c:	20000654 	.word	0x20000654

0001ab60 <gatt_indicate>:
{
   1ab60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ab64:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   1ab66:	8a92      	ldrh	r2, [r2, #20]
{
   1ab68:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   1ab6a:	3202      	adds	r2, #2
   1ab6c:	211d      	movs	r1, #29
{
   1ab6e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   1ab70:	f7fe ff82 	bl	19a78 <bt_att_create_pdu>
	if (!buf) {
   1ab74:	4606      	mov	r6, r0
   1ab76:	b940      	cbnz	r0, 1ab8a <gatt_indicate+0x2a>
		BT_WARN("No buffer available to send indication");
   1ab78:	4821      	ldr	r0, [pc, #132]	; (1ac00 <gatt_indicate+0xa0>)
   1ab7a:	2157      	movs	r1, #87	; 0x57
   1ab7c:	f008 f8d6 	bl	22d2c <printk>
			return -ENOMEM;
   1ab80:	f06f 040b 	mvn.w	r4, #11
}
   1ab84:	4620      	mov	r0, r4
   1ab86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
   1ab8a:	f100 0808 	add.w	r8, r0, #8
   1ab8e:	2102      	movs	r1, #2
   1ab90:	4640      	mov	r0, r8
   1ab92:	f002 fc7b 	bl	1d48c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1ab96:	4605      	mov	r5, r0
	net_buf_add(buf, params->len);
   1ab98:	8aa1      	ldrh	r1, [r4, #20]
	ind->handle = sys_cpu_to_le16(handle);
   1ab9a:	f825 9b02 	strh.w	r9, [r5], #2
	net_buf_add(buf, params->len);
   1ab9e:	4640      	mov	r0, r8
   1aba0:	f002 fc74 	bl	1d48c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1aba4:	8aa2      	ldrh	r2, [r4, #20]
   1aba6:	6921      	ldr	r1, [r4, #16]
   1aba8:	4628      	mov	r0, r5
   1abaa:	f009 ff8b 	bl	24ac4 <memcpy>
	if (!params->func) {
   1abae:	68a3      	ldr	r3, [r4, #8]
   1abb0:	b96b      	cbnz	r3, 1abce <gatt_indicate+0x6e>
		err = bt_att_send(conn, buf, NULL, NULL);
   1abb2:	461a      	mov	r2, r3
   1abb4:	4631      	mov	r1, r6
   1abb6:	4638      	mov	r0, r7
   1abb8:	f7ff fafa 	bl	1a1b0 <bt_att_send>
	if (err) {
   1abbc:	4604      	mov	r4, r0
   1abbe:	2800      	cmp	r0, #0
   1abc0:	d0e0      	beq.n	1ab84 <gatt_indicate+0x24>
		BT_ERR("Error sending ATT PDU: %d", err);
   1abc2:	4810      	ldr	r0, [pc, #64]	; (1ac04 <gatt_indicate+0xa4>)
   1abc4:	4622      	mov	r2, r4
   1abc6:	2145      	movs	r1, #69	; 0x45
   1abc8:	f008 f8b0 	bl	22d2c <printk>
   1abcc:	e7da      	b.n	1ab84 <gatt_indicate+0x24>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1abce:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1abd2:	2100      	movs	r1, #0
   1abd4:	f7ff f9d6 	bl	19f84 <bt_att_req_alloc>
		if (!req) {
   1abd8:	4605      	mov	r5, r0
   1abda:	2800      	cmp	r0, #0
   1abdc:	d0d0      	beq.n	1ab80 <gatt_indicate+0x20>
		req->func = func;
   1abde:	4b0a      	ldr	r3, [pc, #40]	; (1ac08 <gatt_indicate+0xa8>)
   1abe0:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
   1abe2:	2300      	movs	r3, #0
		req->user_data = params;
   1abe4:	6184      	str	r4, [r0, #24]
		req->buf = buf;
   1abe6:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
   1abe8:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   1abea:	4601      	mov	r1, r0
   1abec:	4638      	mov	r0, r7
   1abee:	f7ff fb45 	bl	1a27c <bt_att_req_send>
		if (err) {
   1abf2:	4604      	mov	r4, r0
   1abf4:	2800      	cmp	r0, #0
   1abf6:	d0c5      	beq.n	1ab84 <gatt_indicate+0x24>
			bt_att_req_free(req);
   1abf8:	4628      	mov	r0, r5
   1abfa:	f7ff f9d9 	bl	19fb0 <bt_att_req_free>
   1abfe:	e7e0      	b.n	1abc2 <gatt_indicate+0x62>
   1ac00:	00029931 	.word	0x00029931
   1ac04:	0002995d 	.word	0x0002995d
   1ac08:	00025a47 	.word	0x00025a47

0001ac0c <notify_cb>:
{
   1ac0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ac10:	4b33      	ldr	r3, [pc, #204]	; (1ace0 <notify_cb+0xd4>)
{
   1ac12:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ac14:	6882      	ldr	r2, [r0, #8]
   1ac16:	429a      	cmp	r2, r3
{
   1ac18:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ac1a:	d113      	bne.n	1ac44 <notify_cb+0x38>
	ccc = attr->user_data;
   1ac1c:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1ac1e:	4b31      	ldr	r3, [pc, #196]	; (1ace4 <notify_cb+0xd8>)
   1ac20:	429f      	cmp	r7, r3
   1ac22:	d013      	beq.n	1ac4c <notify_cb+0x40>
		if (cfg->value != data->type) {
   1ac24:	893a      	ldrh	r2, [r7, #8]
   1ac26:	89a3      	ldrh	r3, [r4, #12]
   1ac28:	429a      	cmp	r2, r3
   1ac2a:	d10b      	bne.n	1ac44 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ac2c:	4639      	mov	r1, r7
   1ac2e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1ac32:	f7fd fe2b 	bl	1888c <bt_conn_lookup_addr_le>
		if (!conn) {
   1ac36:	4605      	mov	r5, r0
   1ac38:	b120      	cbz	r0, 1ac44 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   1ac3a:	7b43      	ldrb	r3, [r0, #13]
   1ac3c:	2b07      	cmp	r3, #7
   1ac3e:	d02d      	beq.n	1ac9c <notify_cb+0x90>
			bt_conn_unref(conn);
   1ac40:	f00a fb06 	bl	25250 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1ac44:	2001      	movs	r0, #1
}
   1ac46:	b003      	add	sp, #12
   1ac48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ac4c:	f04f 0800 	mov.w	r8, #0
   1ac50:	4d25      	ldr	r5, [pc, #148]	; (1ace8 <notify_cb+0xdc>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ac52:	46c1      	mov	r9, r8
   1ac54:	2207      	movs	r2, #7
   1ac56:	4669      	mov	r1, sp
   1ac58:	4628      	mov	r0, r5
   1ac5a:	f8cd 9000 	str.w	r9, [sp]
   1ac5e:	f8cd 9003 	str.w	r9, [sp, #3]
   1ac62:	f009 ff1f 	bl	24aa4 <memcmp>
   1ac66:	b178      	cbz	r0, 1ac88 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1ac68:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1ac6c:	2207      	movs	r2, #7
   1ac6e:	4629      	mov	r1, r5
   1ac70:	f7fd fe28 	bl	188c4 <bt_conn_lookup_state_le>
			if (!conn) {
   1ac74:	b978      	cbnz	r0, 1ac96 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   1ac76:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1ac78:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1ac7c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1ac7e:	4629      	mov	r1, r5
   1ac80:	8853      	ldrh	r3, [r2, #2]
   1ac82:	8812      	ldrh	r2, [r2, #0]
   1ac84:	f7ff fce6 	bl	1a654 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ac88:	350c      	adds	r5, #12
   1ac8a:	f1b8 0f00 	cmp.w	r8, #0
   1ac8e:	d1c9      	bne.n	1ac24 <notify_cb+0x18>
   1ac90:	f04f 0801 	mov.w	r8, #1
   1ac94:	e7de      	b.n	1ac54 <notify_cb+0x48>
			bt_conn_unref(conn);
   1ac96:	f00a fadb 	bl	25250 <bt_conn_unref>
   1ac9a:	e7f5      	b.n	1ac88 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1ac9c:	697b      	ldr	r3, [r7, #20]
   1ac9e:	b123      	cbz	r3, 1acaa <notify_cb+0x9e>
   1aca0:	4631      	mov	r1, r6
   1aca2:	4798      	blx	r3
   1aca4:	b908      	cbnz	r0, 1acaa <notify_cb+0x9e>
			bt_conn_unref(conn);
   1aca6:	4628      	mov	r0, r5
   1aca8:	e7ca      	b.n	1ac40 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1acaa:	89a3      	ldrh	r3, [r4, #12]
   1acac:	88a1      	ldrh	r1, [r4, #4]
   1acae:	6922      	ldr	r2, [r4, #16]
   1acb0:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1acb2:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1acb4:	d110      	bne.n	1acd8 <notify_cb+0xcc>
			err = gatt_indicate(conn, data->handle,
   1acb6:	f7ff ff53 	bl	1ab60 <gatt_indicate>
			if (err == 0) {
   1acba:	4606      	mov	r6, r0
   1acbc:	b918      	cbnz	r0, 1acc6 <notify_cb+0xba>
				data->ind_params->_ref++;
   1acbe:	6922      	ldr	r2, [r4, #16]
   1acc0:	7d93      	ldrb	r3, [r2, #22]
   1acc2:	3301      	adds	r3, #1
   1acc4:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1acc6:	4628      	mov	r0, r5
   1acc8:	f00a fac2 	bl	25250 <bt_conn_unref>
		if (err < 0) {
   1accc:	2e00      	cmp	r6, #0
   1acce:	f04f 0000 	mov.w	r0, #0
   1acd2:	dbb8      	blt.n	1ac46 <notify_cb+0x3a>
		data->err = 0;
   1acd4:	60a0      	str	r0, [r4, #8]
   1acd6:	e7b5      	b.n	1ac44 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1acd8:	f7ff fb78 	bl	1a3cc <gatt_notify>
   1acdc:	4606      	mov	r6, r0
   1acde:	e7f2      	b.n	1acc6 <notify_cb+0xba>
   1ace0:	0001a519 	.word	0x0001a519
   1ace4:	20000654 	.word	0x20000654
   1ace8:	20002b83 	.word	0x20002b83

0001acec <bt_gatt_init>:
{
   1acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1acee:	4b2a      	ldr	r3, [pc, #168]	; (1ad98 <bt_gatt_init+0xac>)
   1acf0:	f3bf 8f5b 	dmb	ish
   1acf4:	2201      	movs	r2, #1
   1acf6:	e853 1f00 	ldrex	r1, [r3]
   1acfa:	2900      	cmp	r1, #0
   1acfc:	d103      	bne.n	1ad06 <bt_gatt_init+0x1a>
   1acfe:	e843 2000 	strex	r0, r2, [r3]
   1ad02:	2800      	cmp	r0, #0
   1ad04:	d1f7      	bne.n	1acf6 <bt_gatt_init+0xa>
   1ad06:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1ad0a:	d129      	bne.n	1ad60 <bt_gatt_init+0x74>
   1ad0c:	f3bf 8f5b 	dmb	ish
   1ad10:	4b22      	ldr	r3, [pc, #136]	; (1ad9c <bt_gatt_init+0xb0>)
   1ad12:	e853 1f00 	ldrex	r1, [r3]
   1ad16:	2900      	cmp	r1, #0
   1ad18:	d103      	bne.n	1ad22 <bt_gatt_init+0x36>
   1ad1a:	e843 2000 	strex	r0, r2, [r3]
   1ad1e:	2800      	cmp	r0, #0
   1ad20:	d1f7      	bne.n	1ad12 <bt_gatt_init+0x26>
   1ad22:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1ad26:	d032      	beq.n	1ad8e <bt_gatt_init+0xa2>
	k_delayed_work_init(&db_hash_work, db_hash_process);
   1ad28:	491d      	ldr	r1, [pc, #116]	; (1ada0 <bt_gatt_init+0xb4>)
   1ad2a:	481e      	ldr	r0, [pc, #120]	; (1ada4 <bt_gatt_init+0xb8>)
   1ad2c:	f00b ffc9 	bl	26cc2 <k_delayed_work_init>
   1ad30:	2300      	movs	r3, #0
   1ad32:	491c      	ldr	r1, [pc, #112]	; (1ada4 <bt_gatt_init+0xb8>)
   1ad34:	481c      	ldr	r0, [pc, #112]	; (1ada8 <bt_gatt_init+0xbc>)
   1ad36:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ad3a:	f007 f8c7 	bl	21ecc <k_delayed_work_submit_to_queue>
	k_delayed_work_init(&gatt_sc.work, sc_process);
   1ad3e:	491b      	ldr	r1, [pc, #108]	; (1adac <bt_gatt_init+0xc0>)
   1ad40:	481b      	ldr	r0, [pc, #108]	; (1adb0 <bt_gatt_init+0xc4>)
   1ad42:	f00b ffbe 	bl	26cc2 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ad46:	f3bf 8f5b 	dmb	ish
   1ad4a:	4b1a      	ldr	r3, [pc, #104]	; (1adb4 <bt_gatt_init+0xc8>)
   1ad4c:	e853 2f00 	ldrex	r2, [r3]
   1ad50:	f042 0202 	orr.w	r2, r2, #2
   1ad54:	e843 2100 	strex	r1, r2, [r3]
   1ad58:	2900      	cmp	r1, #0
   1ad5a:	d1f7      	bne.n	1ad4c <bt_gatt_init+0x60>
   1ad5c:	f3bf 8f5b 	dmb	ish
}
   1ad60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
   1ad62:	4a15      	ldr	r2, [pc, #84]	; (1adb8 <bt_gatt_init+0xcc>)
   1ad64:	6863      	ldr	r3, [r4, #4]
   1ad66:	8811      	ldrh	r1, [r2, #0]
   1ad68:	440b      	add	r3, r1
   1ad6a:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1ad6c:	3408      	adds	r4, #8
   1ad6e:	42ac      	cmp	r4, r5
   1ad70:	d90a      	bls.n	1ad88 <bt_gatt_init+0x9c>
   1ad72:	4812      	ldr	r0, [pc, #72]	; (1adbc <bt_gatt_init+0xd0>)
   1ad74:	4631      	mov	r1, r6
   1ad76:	f44f 6283 	mov.w	r2, #1048	; 0x418
   1ad7a:	f007 ffd7 	bl	22d2c <printk>
   1ad7e:	f44f 6183 	mov.w	r1, #1048	; 0x418
   1ad82:	4630      	mov	r0, r6
   1ad84:	f008 fa35 	bl	231f2 <assert_post_action>
   1ad88:	42bc      	cmp	r4, r7
   1ad8a:	d3ea      	bcc.n	1ad62 <bt_gatt_init+0x76>
   1ad8c:	e7cc      	b.n	1ad28 <bt_gatt_init+0x3c>
   1ad8e:	4d0c      	ldr	r5, [pc, #48]	; (1adc0 <bt_gatt_init+0xd4>)
   1ad90:	4c0c      	ldr	r4, [pc, #48]	; (1adc4 <bt_gatt_init+0xd8>)
   1ad92:	4e0d      	ldr	r6, [pc, #52]	; (1adc8 <bt_gatt_init+0xdc>)
   1ad94:	462f      	mov	r7, r5
   1ad96:	e7ea      	b.n	1ad6e <bt_gatt_init+0x82>
   1ad98:	200029a8 	.word	0x200029a8
   1ad9c:	200029c4 	.word	0x200029c4
   1ada0:	00025e27 	.word	0x00025e27
   1ada4:	200021f0 	.word	0x200021f0
   1ada8:	200026c8 	.word	0x200026c8
   1adac:	0001b399 	.word	0x0001b399
   1adb0:	20002240 	.word	0x20002240
   1adb4:	20002270 	.word	0x20002270
   1adb8:	20002b80 	.word	0x20002b80
   1adbc:	00027c9a 	.word	0x00027c9a
   1adc0:	00027024 	.word	0x00027024
   1adc4:	0002700c 	.word	0x0002700c
   1adc8:	0002997c 	.word	0x0002997c

0001adcc <bt_gatt_attr_get_handle>:
{
   1adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1add0:	4604      	mov	r4, r0
   1add2:	b910      	cbnz	r0, 1adda <bt_gatt_attr_get_handle+0xe>
		return 0;
   1add4:	2000      	movs	r0, #0
}
   1add6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1adda:	8a00      	ldrh	r0, [r0, #16]
   1addc:	2800      	cmp	r0, #0
   1adde:	d1fa      	bne.n	1add6 <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ade0:	4e18      	ldr	r6, [pc, #96]	; (1ae44 <bt_gatt_attr_get_handle+0x78>)
   1ade2:	4d19      	ldr	r5, [pc, #100]	; (1ae48 <bt_gatt_attr_get_handle+0x7c>)
   1ade4:	4f19      	ldr	r7, [pc, #100]	; (1ae4c <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   1ade6:	f04f 0901 	mov.w	r9, #1
   1adea:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1adec:	42b5      	cmp	r5, r6
   1adee:	d90a      	bls.n	1ae06 <bt_gatt_attr_get_handle+0x3a>
   1adf0:	4817      	ldr	r0, [pc, #92]	; (1ae50 <bt_gatt_attr_get_handle+0x84>)
   1adf2:	4639      	mov	r1, r7
   1adf4:	f240 522d 	movw	r2, #1325	; 0x52d
   1adf8:	f007 ff98 	bl	22d2c <printk>
   1adfc:	f240 512d 	movw	r1, #1325	; 0x52d
   1ae00:	4638      	mov	r0, r7
   1ae02:	f008 f9f6 	bl	231f2 <assert_post_action>
   1ae06:	4545      	cmp	r5, r8
   1ae08:	d2e4      	bcs.n	1add4 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1ae0a:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1ae0e:	4574      	cmp	r4, lr
   1ae10:	d305      	bcc.n	1ae1e <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1ae12:	2114      	movs	r1, #20
   1ae14:	fb01 e30c 	mla	r3, r1, ip, lr
   1ae18:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1ae1a:	429c      	cmp	r4, r3
   1ae1c:	d910      	bls.n	1ae40 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   1ae1e:	eb09 030c 	add.w	r3, r9, ip
   1ae22:	b298      	uxth	r0, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ae24:	3508      	adds	r5, #8
   1ae26:	4681      	mov	r9, r0
   1ae28:	e7e0      	b.n	1adec <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1ae2a:	fb01 e302 	mla	r3, r1, r2, lr
   1ae2e:	429c      	cmp	r4, r3
   1ae30:	d0d1      	beq.n	1add6 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ae32:	3201      	adds	r2, #1
   1ae34:	eb09 0302 	add.w	r3, r9, r2
   1ae38:	4562      	cmp	r2, ip
   1ae3a:	b298      	uxth	r0, r3
   1ae3c:	d1f5      	bne.n	1ae2a <bt_gatt_attr_get_handle+0x5e>
   1ae3e:	e7f1      	b.n	1ae24 <bt_gatt_attr_get_handle+0x58>
   1ae40:	2200      	movs	r2, #0
   1ae42:	e7f7      	b.n	1ae34 <bt_gatt_attr_get_handle+0x68>
   1ae44:	00027024 	.word	0x00027024
   1ae48:	0002700c 	.word	0x0002700c
   1ae4c:	0002997c 	.word	0x0002997c
   1ae50:	00027c9a 	.word	0x00027c9a

0001ae54 <bt_gatt_foreach_attr_type>:
{
   1ae54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae58:	b085      	sub	sp, #20
   1ae5a:	4607      	mov	r7, r0
   1ae5c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   1ae60:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   1ae62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ae66:	2d00      	cmp	r5, #0
   1ae68:	bf08      	it	eq
   1ae6a:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1ae6c:	4b2b      	ldr	r3, [pc, #172]	; (1af1c <bt_gatt_foreach_attr_type+0xc8>)
{
   1ae6e:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   1ae70:	881b      	ldrh	r3, [r3, #0]
   1ae72:	4283      	cmp	r3, r0
{
   1ae74:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1ae76:	d24a      	bcs.n	1af0e <bt_gatt_foreach_attr_type+0xba>
}
   1ae78:	b005      	add	sp, #20
   1ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1ae7e:	6873      	ldr	r3, [r6, #4]
   1ae80:	4423      	add	r3, r4
   1ae82:	42bb      	cmp	r3, r7
   1ae84:	d240      	bcs.n	1af08 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   1ae86:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ae88:	3608      	adds	r6, #8
   1ae8a:	4556      	cmp	r6, sl
   1ae8c:	d90a      	bls.n	1aea4 <bt_gatt_foreach_attr_type+0x50>
   1ae8e:	4824      	ldr	r0, [pc, #144]	; (1af20 <bt_gatt_foreach_attr_type+0xcc>)
   1ae90:	4659      	mov	r1, fp
   1ae92:	f240 52f1 	movw	r2, #1521	; 0x5f1
   1ae96:	f007 ff49 	bl	22d2c <printk>
   1ae9a:	f240 51f1 	movw	r1, #1521	; 0x5f1
   1ae9e:	4658      	mov	r0, fp
   1aea0:	f008 f9a7 	bl	231f2 <assert_post_action>
   1aea4:	4b1f      	ldr	r3, [pc, #124]	; (1af24 <bt_gatt_foreach_attr_type+0xd0>)
   1aea6:	429e      	cmp	r6, r3
   1aea8:	d3e9      	bcc.n	1ae7e <bt_gatt_foreach_attr_type+0x2a>
   1aeaa:	e7e5      	b.n	1ae78 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1aeac:	5889      	ldr	r1, [r1, r2]
   1aeae:	9303      	str	r3, [sp, #12]
   1aeb0:	4640      	mov	r0, r8
   1aeb2:	f009 fed9 	bl	24c68 <bt_uuid_cmp>
   1aeb6:	9b03      	ldr	r3, [sp, #12]
   1aeb8:	b198      	cbz	r0, 1aee2 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1aeba:	3401      	adds	r4, #1
   1aebc:	f109 0901 	add.w	r9, r9, #1
   1aec0:	b2a4      	uxth	r4, r4
   1aec2:	6873      	ldr	r3, [r6, #4]
   1aec4:	454b      	cmp	r3, r9
   1aec6:	d9df      	bls.n	1ae88 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1aec8:	9b02      	ldr	r3, [sp, #8]
   1aeca:	429c      	cmp	r4, r3
   1aecc:	d8d4      	bhi.n	1ae78 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1aece:	42bc      	cmp	r4, r7
   1aed0:	d3f3      	bcc.n	1aeba <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1aed2:	2314      	movs	r3, #20
   1aed4:	6831      	ldr	r1, [r6, #0]
   1aed6:	fb03 f209 	mul.w	r2, r3, r9
   1aeda:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1aedc:	f1b8 0f00 	cmp.w	r8, #0
   1aee0:	d1e4      	bne.n	1aeac <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   1aee2:	9a01      	ldr	r2, [sp, #4]
   1aee4:	b95a      	cbnz	r2, 1aefe <bt_gatt_foreach_attr_type+0xaa>
	*num_matches -= 1;
   1aee6:	3d01      	subs	r5, #1
   1aee8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1aeea:	4618      	mov	r0, r3
   1aeec:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1aeee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1aef0:	4621      	mov	r1, r4
   1aef2:	4798      	blx	r3
	if (!*num_matches) {
   1aef4:	2d00      	cmp	r5, #0
   1aef6:	d0bf      	beq.n	1ae78 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1aef8:	2800      	cmp	r0, #0
   1aefa:	d1de      	bne.n	1aeba <bt_gatt_foreach_attr_type+0x66>
   1aefc:	e7bc      	b.n	1ae78 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1aefe:	68da      	ldr	r2, [r3, #12]
   1af00:	9901      	ldr	r1, [sp, #4]
   1af02:	4291      	cmp	r1, r2
   1af04:	d1d9      	bne.n	1aeba <bt_gatt_foreach_attr_type+0x66>
   1af06:	e7ee      	b.n	1aee6 <bt_gatt_foreach_attr_type+0x92>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1af08:	f04f 0900 	mov.w	r9, #0
   1af0c:	e7d9      	b.n	1aec2 <bt_gatt_foreach_attr_type+0x6e>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1af0e:	4e06      	ldr	r6, [pc, #24]	; (1af28 <bt_gatt_foreach_attr_type+0xd4>)
   1af10:	f8df a010 	ldr.w	sl, [pc, #16]	; 1af24 <bt_gatt_foreach_attr_type+0xd0>
   1af14:	f8df b014 	ldr.w	fp, [pc, #20]	; 1af2c <bt_gatt_foreach_attr_type+0xd8>
		uint16_t handle = 1;
   1af18:	2401      	movs	r4, #1
   1af1a:	e7b6      	b.n	1ae8a <bt_gatt_foreach_attr_type+0x36>
   1af1c:	20002b80 	.word	0x20002b80
   1af20:	00027c9a 	.word	0x00027c9a
   1af24:	00027024 	.word	0x00027024
   1af28:	0002700c 	.word	0x0002700c
   1af2c:	0002997c 	.word	0x0002997c

0001af30 <db_hash_gen>:
{
   1af30:	b530      	push	{r4, r5, lr}
   1af32:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   1af34:	2400      	movs	r4, #0
{
   1af36:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1af38:	aa1c      	add	r2, sp, #112	; 0x70
   1af3a:	4669      	mov	r1, sp
   1af3c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1af3e:	e9cd 4400 	strd	r4, r4, [sp]
   1af42:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1af46:	f009 fc30 	bl	247aa <tc_cmac_setup>
   1af4a:	b928      	cbnz	r0, 1af58 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   1af4c:	4812      	ldr	r0, [pc, #72]	; (1af98 <db_hash_gen+0x68>)
   1af4e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   1af50:	f007 feec 	bl	22d2c <printk>
}
   1af54:	b049      	add	sp, #292	; 0x124
   1af56:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1af58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1af5c:	2001      	movs	r0, #1
   1af5e:	4a0f      	ldr	r2, [pc, #60]	; (1af9c <db_hash_gen+0x6c>)
   1af60:	ab04      	add	r3, sp, #16
   1af62:	f00a ff55 	bl	25e10 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   1af66:	480e      	ldr	r0, [pc, #56]	; (1afa0 <db_hash_gen+0x70>)
   1af68:	a904      	add	r1, sp, #16
   1af6a:	f009 fcb5 	bl	248d8 <tc_cmac_final>
   1af6e:	b910      	cbnz	r0, 1af76 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   1af70:	480c      	ldr	r0, [pc, #48]	; (1afa4 <db_hash_gen+0x74>)
   1af72:	2145      	movs	r1, #69	; 0x45
   1af74:	e7ec      	b.n	1af50 <db_hash_gen+0x20>
   1af76:	4b0a      	ldr	r3, [pc, #40]	; (1afa0 <db_hash_gen+0x70>)
   1af78:	f103 0210 	add.w	r2, r3, #16
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1af7c:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1af7e:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1af80:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1af84:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1af88:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1af8a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1af8c:	d1f6      	bne.n	1af7c <db_hash_gen+0x4c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1af8e:	2d00      	cmp	r5, #0
   1af90:	d0e0      	beq.n	1af54 <db_hash_gen+0x24>
		db_hash_store();
   1af92:	f7ff f9dd 	bl	1a350 <db_hash_store>
   1af96:	e7dd      	b.n	1af54 <db_hash_gen+0x24>
   1af98:	000299ac 	.word	0x000299ac
   1af9c:	00025a77 	.word	0x00025a77
   1afa0:	200030ef 	.word	0x200030ef
   1afa4:	000299ca 	.word	0x000299ca

0001afa8 <db_hash_commit>:
{
   1afa8:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   1afaa:	4829      	ldr	r0, [pc, #164]	; (1b050 <db_hash_commit+0xa8>)
   1afac:	f007 f800 	bl	21fb0 <k_delayed_work_cancel>
	if (!err) {
   1afb0:	b908      	cbnz	r0, 1afb6 <db_hash_commit+0xe>
		db_hash_gen(false);
   1afb2:	f7ff ffbd 	bl	1af30 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   1afb6:	4927      	ldr	r1, [pc, #156]	; (1b054 <db_hash_commit+0xac>)
   1afb8:	4827      	ldr	r0, [pc, #156]	; (1b058 <db_hash_commit+0xb0>)
   1afba:	4c28      	ldr	r4, [pc, #160]	; (1b05c <db_hash_commit+0xb4>)
   1afbc:	2210      	movs	r2, #16
   1afbe:	f009 fd71 	bl	24aa4 <memcmp>
   1afc2:	b988      	cbnz	r0, 1afe8 <db_hash_commit+0x40>
		k_delayed_work_cancel(&gatt_sc.work);
   1afc4:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   1afc8:	f006 fff2 	bl	21fb0 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1afcc:	f3bf 8f5b 	dmb	ish
   1afd0:	e854 3f00 	ldrex	r3, [r4]
   1afd4:	f023 0301 	bic.w	r3, r3, #1
   1afd8:	e844 3200 	strex	r2, r3, [r4]
   1afdc:	2a00      	cmp	r2, #0
   1afde:	d1f7      	bne.n	1afd0 <db_hash_commit+0x28>
   1afe0:	f3bf 8f5b 	dmb	ish
}
   1afe4:	2000      	movs	r0, #0
   1afe6:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1afe8:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
   1afec:	f3bf 8f5b 	dmb	ish
   1aff0:	e854 2f00 	ldrex	r2, [r4]
   1aff4:	f042 0101 	orr.w	r1, r2, #1
   1aff8:	e844 1000 	strex	r0, r1, [r4]
   1affc:	2800      	cmp	r0, #0
   1affe:	d1f7      	bne.n	1aff0 <db_hash_commit+0x48>
   1b000:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b004:	07d2      	lsls	r2, r2, #31
   1b006:	d412      	bmi.n	1b02e <db_hash_commit+0x86>
		gatt_sc.start = start;
   1b008:	4a15      	ldr	r2, [pc, #84]	; (1b060 <db_hash_commit+0xb8>)
   1b00a:	619a      	str	r2, [r3, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b00c:	f3bf 8f5b 	dmb	ish
   1b010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b012:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1b016:	079b      	lsls	r3, r3, #30
   1b018:	d406      	bmi.n	1b028 <db_hash_commit+0x80>
   1b01a:	4912      	ldr	r1, [pc, #72]	; (1b064 <db_hash_commit+0xbc>)
   1b01c:	4812      	ldr	r0, [pc, #72]	; (1b068 <db_hash_commit+0xc0>)
   1b01e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b022:	2300      	movs	r3, #0
   1b024:	f006 ff52 	bl	21ecc <k_delayed_work_submit_to_queue>
	db_hash_store();
   1b028:	f7ff f992 	bl	1a350 <db_hash_store>
	return 0;
   1b02c:	e7da      	b.n	1afe4 <db_hash_commit+0x3c>
	if (new_start >= *start && new_end <= *end) {
   1b02e:	8b1a      	ldrh	r2, [r3, #24]
   1b030:	8b59      	ldrh	r1, [r3, #26]
   1b032:	2a01      	cmp	r2, #1
   1b034:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b038:	d805      	bhi.n	1b046 <db_hash_commit+0x9e>
   1b03a:	4291      	cmp	r1, r2
   1b03c:	d0f4      	beq.n	1b028 <db_hash_commit+0x80>
		*end = new_end;
   1b03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b042:	835a      	strh	r2, [r3, #26]
   1b044:	e7e2      	b.n	1b00c <db_hash_commit+0x64>
		*start = new_start;
   1b046:	2001      	movs	r0, #1
	if (*end < new_end) {
   1b048:	4291      	cmp	r1, r2
		*start = new_start;
   1b04a:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
   1b04c:	d0de      	beq.n	1b00c <db_hash_commit+0x64>
   1b04e:	e7f6      	b.n	1b03e <db_hash_commit+0x96>
   1b050:	200021f0 	.word	0x200021f0
   1b054:	200030ef 	.word	0x200030ef
   1b058:	200030ff 	.word	0x200030ff
   1b05c:	20002270 	.word	0x20002270
   1b060:	ffff0001 	.word	0xffff0001
   1b064:	20002240 	.word	0x20002240
   1b068:	200026c8 	.word	0x200026c8

0001b06c <ccc_set_direct>:
{
   1b06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b070:	b0b9      	sub	sp, #228	; 0xe4
   1b072:	4688      	mov	r8, r1
   1b074:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1b076:	492c      	ldr	r1, [pc, #176]	; (1b128 <ccc_set_direct+0xbc>)
   1b078:	9840      	ldr	r0, [sp, #256]	; 0x100
   1b07a:	466a      	mov	r2, sp
{
   1b07c:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1b07e:	f008 fa4d 	bl	2351c <settings_name_steq>
   1b082:	b948      	cbnz	r0, 1b098 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   1b084:	4829      	ldr	r0, [pc, #164]	; (1b12c <ccc_set_direct+0xc0>)
   1b086:	2145      	movs	r1, #69	; 0x45
   1b088:	f007 fe50 	bl	22d2c <printk>
   1b08c:	f06f 0515 	mvn.w	r5, #21
}
   1b090:	4628      	mov	r0, r5
   1b092:	b039      	add	sp, #228	; 0xe4
   1b094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1b098:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   1b09a:	a901      	add	r1, sp, #4
   1b09c:	4620      	mov	r0, r4
   1b09e:	f008 fa60 	bl	23562 <settings_name_next>
		if (!name) {
   1b0a2:	b93c      	cbnz	r4, 1b0b4 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   1b0a4:	4822      	ldr	r0, [pc, #136]	; (1b130 <ccc_set_direct+0xc4>)
   1b0a6:	2145      	movs	r1, #69	; 0x45
   1b0a8:	f007 fe40 	bl	22d2c <printk>
			return -EINVAL;
   1b0ac:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1b0b0:	4625      	mov	r5, r4
   1b0b2:	e7ed      	b.n	1b090 <ccc_set_direct+0x24>
		} else if (!next) {
   1b0b4:	9801      	ldr	r0, [sp, #4]
   1b0b6:	b978      	cbnz	r0, 1b0d8 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   1b0b8:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   1b0bc:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1b0c0:	4649      	mov	r1, r9
   1b0c2:	4620      	mov	r0, r4
   1b0c4:	f009 fdac 	bl	24c20 <bt_settings_decode_key>
		if (err) {
   1b0c8:	4605      	mov	r5, r0
   1b0ca:	b150      	cbz	r0, 1b0e2 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   1b0cc:	4819      	ldr	r0, [pc, #100]	; (1b134 <ccc_set_direct+0xc8>)
   1b0ce:	4622      	mov	r2, r4
   1b0d0:	2145      	movs	r1, #69	; 0x45
   1b0d2:	f007 fe2b 	bl	22d2c <printk>
   1b0d6:	e7e9      	b.n	1b0ac <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   1b0d8:	220a      	movs	r2, #10
   1b0da:	2100      	movs	r1, #0
   1b0dc:	f009 fc40 	bl	24960 <strtol>
   1b0e0:	e7ea      	b.n	1b0b8 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   1b0e2:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1b0e6:	f1b8 0f00 	cmp.w	r8, #0
   1b0ea:	d019      	beq.n	1b120 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1b0ec:	f10d 0820 	add.w	r8, sp, #32
   1b0f0:	22c0      	movs	r2, #192	; 0xc0
   1b0f2:	4641      	mov	r1, r8
   1b0f4:	4638      	mov	r0, r7
   1b0f6:	47b0      	blx	r6
			if (len < 0) {
   1b0f8:	1e04      	subs	r4, r0, #0
   1b0fa:	da05      	bge.n	1b108 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   1b0fc:	480e      	ldr	r0, [pc, #56]	; (1b138 <ccc_set_direct+0xcc>)
   1b0fe:	4622      	mov	r2, r4
   1b100:	2145      	movs	r1, #69	; 0x45
   1b102:	f007 fe13 	bl	22d2c <printk>
				return len;
   1b106:	e7d3      	b.n	1b0b0 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   1b108:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1b10a:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1b10e:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1b110:	4a0a      	ldr	r2, [pc, #40]	; (1b13c <ccc_set_direct+0xd0>)
   1b112:	ab04      	add	r3, sp, #16
   1b114:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b118:	2001      	movs	r0, #1
   1b11a:	f00a fe79 	bl	25e10 <bt_gatt_foreach_attr>
	return 0;
   1b11e:	e7b7      	b.n	1b090 <ccc_set_direct+0x24>
			load.count = 0;
   1b120:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1b124:	e7f4      	b.n	1b110 <ccc_set_direct+0xa4>
   1b126:	bf00      	nop
   1b128:	000299e8 	.word	0x000299e8
   1b12c:	000299ef 	.word	0x000299ef
   1b130:	00028738 	.word	0x00028738
   1b134:	00029854 	.word	0x00029854
   1b138:	00029769 	.word	0x00029769
   1b13c:	0001a465 	.word	0x0001a465

0001b140 <bt_gatt_notify_cb>:
{
   1b140:	b530      	push	{r4, r5, lr}
   1b142:	4604      	mov	r4, r0
   1b144:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b146:	460d      	mov	r5, r1
   1b148:	b951      	cbnz	r1, 1b160 <bt_gatt_notify_cb+0x20>
   1b14a:	4942      	ldr	r1, [pc, #264]	; (1b254 <bt_gatt_notify_cb+0x114>)
   1b14c:	4842      	ldr	r0, [pc, #264]	; (1b258 <bt_gatt_notify_cb+0x118>)
   1b14e:	f640 023d 	movw	r2, #2109	; 0x83d
   1b152:	f007 fdeb 	bl	22d2c <printk>
   1b156:	483f      	ldr	r0, [pc, #252]	; (1b254 <bt_gatt_notify_cb+0x114>)
   1b158:	f640 013d 	movw	r1, #2109	; 0x83d
   1b15c:	f008 f849 	bl	231f2 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   1b160:	686b      	ldr	r3, [r5, #4]
   1b162:	b953      	cbnz	r3, 1b17a <bt_gatt_notify_cb+0x3a>
   1b164:	493b      	ldr	r1, [pc, #236]	; (1b254 <bt_gatt_notify_cb+0x114>)
   1b166:	483c      	ldr	r0, [pc, #240]	; (1b258 <bt_gatt_notify_cb+0x118>)
   1b168:	f640 023e 	movw	r2, #2110	; 0x83e
   1b16c:	f007 fdde 	bl	22d2c <printk>
   1b170:	4838      	ldr	r0, [pc, #224]	; (1b254 <bt_gatt_notify_cb+0x114>)
   1b172:	f640 013e 	movw	r1, #2110	; 0x83e
   1b176:	f008 f83c 	bl	231f2 <assert_post_action>
   1b17a:	f3bf 8f5b 	dmb	ish
   1b17e:	4b37      	ldr	r3, [pc, #220]	; (1b25c <bt_gatt_notify_cb+0x11c>)
   1b180:	681b      	ldr	r3, [r3, #0]
   1b182:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b186:	079a      	lsls	r2, r3, #30
   1b188:	d55d      	bpl.n	1b246 <bt_gatt_notify_cb+0x106>
	data.attr = params->attr;
   1b18a:	6868      	ldr	r0, [r5, #4]
   1b18c:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b18e:	b114      	cbz	r4, 1b196 <bt_gatt_notify_cb+0x56>
   1b190:	7b63      	ldrb	r3, [r4, #13]
   1b192:	2b07      	cmp	r3, #7
   1b194:	d15a      	bne.n	1b24c <bt_gatt_notify_cb+0x10c>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b196:	f7ff fe19 	bl	1adcc <bt_gatt_attr_get_handle>
   1b19a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1b19e:	b918      	cbnz	r0, 1b1a8 <bt_gatt_notify_cb+0x68>
		return -ENOENT;
   1b1a0:	f06f 0001 	mvn.w	r0, #1
}
   1b1a4:	b00b      	add	sp, #44	; 0x2c
   1b1a6:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1b1a8:	682a      	ldr	r2, [r5, #0]
   1b1aa:	b9aa      	cbnz	r2, 1b1d8 <bt_gatt_notify_cb+0x98>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b1ac:	9b05      	ldr	r3, [sp, #20]
   1b1ae:	6818      	ldr	r0, [r3, #0]
   1b1b0:	2300      	movs	r3, #0
   1b1b2:	f88d 3010 	strb.w	r3, [sp, #16]
   1b1b6:	a904      	add	r1, sp, #16
   1b1b8:	f642 0303 	movw	r3, #10243	; 0x2803
   1b1bc:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b1c0:	f009 fd52 	bl	24c68 <bt_uuid_cmp>
   1b1c4:	b1c0      	cbz	r0, 1b1f8 <bt_gatt_notify_cb+0xb8>
	if (conn) {
   1b1c6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1b1ca:	b314      	cbz	r4, 1b212 <bt_gatt_notify_cb+0xd2>
		return gatt_notify(conn, data.handle, params);
   1b1cc:	4601      	mov	r1, r0
   1b1ce:	462a      	mov	r2, r5
   1b1d0:	4620      	mov	r0, r4
   1b1d2:	f7ff f8fb 	bl	1a3cc <gatt_notify>
   1b1d6:	e7e5      	b.n	1b1a4 <bt_gatt_notify_cb+0x64>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b1d8:	a905      	add	r1, sp, #20
   1b1da:	9102      	str	r1, [sp, #8]
   1b1dc:	4920      	ldr	r1, [pc, #128]	; (1b260 <bt_gatt_notify_cb+0x120>)
   1b1de:	9101      	str	r1, [sp, #4]
   1b1e0:	2101      	movs	r1, #1
	found->attr = NULL;
   1b1e2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b1e4:	9100      	str	r1, [sp, #0]
   1b1e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b1ea:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b1ec:	f7ff fe32 	bl	1ae54 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b1f0:	9b05      	ldr	r3, [sp, #20]
   1b1f2:	2b00      	cmp	r3, #0
   1b1f4:	d1da      	bne.n	1b1ac <bt_gatt_notify_cb+0x6c>
   1b1f6:	e7d3      	b.n	1b1a0 <bt_gatt_notify_cb+0x60>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b1f8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1b1fa:	68c3      	ldr	r3, [r0, #12]
   1b1fc:	799b      	ldrb	r3, [r3, #6]
   1b1fe:	06db      	lsls	r3, r3, #27
   1b200:	d402      	bmi.n	1b208 <bt_gatt_notify_cb+0xc8>
			return -EINVAL;
   1b202:	f06f 0015 	mvn.w	r0, #21
   1b206:	e7cd      	b.n	1b1a4 <bt_gatt_notify_cb+0x64>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b208:	f00a fdb4 	bl	25d74 <bt_gatt_attr_value_handle>
   1b20c:	f8ad 0018 	strh.w	r0, [sp, #24]
   1b210:	e7d9      	b.n	1b1c6 <bt_gatt_notify_cb+0x86>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b212:	f642 1202 	movw	r2, #10498	; 0x2902
   1b216:	f8ad 2012 	strh.w	r2, [sp, #18]
   1b21a:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1b21c:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b220:	9202      	str	r2, [sp, #8]
   1b222:	4a10      	ldr	r2, [pc, #64]	; (1b264 <bt_gatt_notify_cb+0x124>)
	data.err = -ENOTCONN;
   1b224:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1b226:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b228:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1b22c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b230:	aa04      	add	r2, sp, #16
   1b232:	4623      	mov	r3, r4
   1b234:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1b238:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b23a:	f88d 4010 	strb.w	r4, [sp, #16]
   1b23e:	f7ff fe09 	bl	1ae54 <bt_gatt_foreach_attr_type>
	return data.err;
   1b242:	9807      	ldr	r0, [sp, #28]
   1b244:	e7ae      	b.n	1b1a4 <bt_gatt_notify_cb+0x64>
		return -EAGAIN;
   1b246:	f06f 000a 	mvn.w	r0, #10
   1b24a:	e7ab      	b.n	1b1a4 <bt_gatt_notify_cb+0x64>
		return -ENOTCONN;
   1b24c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1b250:	e7a8      	b.n	1b1a4 <bt_gatt_notify_cb+0x64>
   1b252:	bf00      	nop
   1b254:	0002997c 	.word	0x0002997c
   1b258:	00027c9a 	.word	0x00027c9a
   1b25c:	20000460 	.word	0x20000460
   1b260:	00025a6b 	.word	0x00025a6b
   1b264:	0001ac0d 	.word	0x0001ac0d

0001b268 <bt_gatt_indicate>:
{
   1b268:	b530      	push	{r4, r5, lr}
   1b26a:	4605      	mov	r5, r0
   1b26c:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b26e:	460c      	mov	r4, r1
   1b270:	b951      	cbnz	r1, 1b288 <bt_gatt_indicate+0x20>
   1b272:	4944      	ldr	r1, [pc, #272]	; (1b384 <bt_gatt_indicate+0x11c>)
   1b274:	4844      	ldr	r0, [pc, #272]	; (1b388 <bt_gatt_indicate+0x120>)
   1b276:	f640 0289 	movw	r2, #2185	; 0x889
   1b27a:	f007 fd57 	bl	22d2c <printk>
   1b27e:	4841      	ldr	r0, [pc, #260]	; (1b384 <bt_gatt_indicate+0x11c>)
   1b280:	f640 0189 	movw	r1, #2185	; 0x889
   1b284:	f007 ffb5 	bl	231f2 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   1b288:	6863      	ldr	r3, [r4, #4]
   1b28a:	b953      	cbnz	r3, 1b2a2 <bt_gatt_indicate+0x3a>
   1b28c:	493d      	ldr	r1, [pc, #244]	; (1b384 <bt_gatt_indicate+0x11c>)
   1b28e:	483e      	ldr	r0, [pc, #248]	; (1b388 <bt_gatt_indicate+0x120>)
   1b290:	f640 028a 	movw	r2, #2186	; 0x88a
   1b294:	f007 fd4a 	bl	22d2c <printk>
   1b298:	483a      	ldr	r0, [pc, #232]	; (1b384 <bt_gatt_indicate+0x11c>)
   1b29a:	f640 018a 	movw	r1, #2186	; 0x88a
   1b29e:	f007 ffa8 	bl	231f2 <assert_post_action>
   1b2a2:	f3bf 8f5b 	dmb	ish
   1b2a6:	4b39      	ldr	r3, [pc, #228]	; (1b38c <bt_gatt_indicate+0x124>)
   1b2a8:	681b      	ldr	r3, [r3, #0]
   1b2aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b2ae:	079a      	lsls	r2, r3, #30
   1b2b0:	d561      	bpl.n	1b376 <bt_gatt_indicate+0x10e>
	data.attr = params->attr;
   1b2b2:	6860      	ldr	r0, [r4, #4]
   1b2b4:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b2b6:	b115      	cbz	r5, 1b2be <bt_gatt_indicate+0x56>
   1b2b8:	7b6b      	ldrb	r3, [r5, #13]
   1b2ba:	2b07      	cmp	r3, #7
   1b2bc:	d15e      	bne.n	1b37c <bt_gatt_indicate+0x114>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b2be:	f7ff fd85 	bl	1adcc <bt_gatt_attr_get_handle>
   1b2c2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1b2c6:	b918      	cbnz	r0, 1b2d0 <bt_gatt_indicate+0x68>
		return -ENOENT;
   1b2c8:	f06f 0001 	mvn.w	r0, #1
}
   1b2cc:	b00b      	add	sp, #44	; 0x2c
   1b2ce:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1b2d0:	6822      	ldr	r2, [r4, #0]
   1b2d2:	b9ba      	cbnz	r2, 1b304 <bt_gatt_indicate+0x9c>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b2d4:	9b05      	ldr	r3, [sp, #20]
   1b2d6:	6818      	ldr	r0, [r3, #0]
   1b2d8:	2300      	movs	r3, #0
   1b2da:	f88d 3010 	strb.w	r3, [sp, #16]
   1b2de:	a904      	add	r1, sp, #16
   1b2e0:	f642 0303 	movw	r3, #10243	; 0x2803
   1b2e4:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b2e8:	f009 fcbe 	bl	24c68 <bt_uuid_cmp>
   1b2ec:	b1d0      	cbz	r0, 1b324 <bt_gatt_indicate+0xbc>
	if (conn) {
   1b2ee:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1b2f2:	b325      	cbz	r5, 1b33e <bt_gatt_indicate+0xd6>
		params->_ref = 1;
   1b2f4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1b2f6:	4601      	mov	r1, r0
		params->_ref = 1;
   1b2f8:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b2fa:	4622      	mov	r2, r4
   1b2fc:	4628      	mov	r0, r5
   1b2fe:	f7ff fc2f 	bl	1ab60 <gatt_indicate>
   1b302:	e7e3      	b.n	1b2cc <bt_gatt_indicate+0x64>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b304:	a905      	add	r1, sp, #20
   1b306:	9102      	str	r1, [sp, #8]
   1b308:	4921      	ldr	r1, [pc, #132]	; (1b390 <bt_gatt_indicate+0x128>)
   1b30a:	9101      	str	r1, [sp, #4]
   1b30c:	2101      	movs	r1, #1
	found->attr = NULL;
   1b30e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b310:	9100      	str	r1, [sp, #0]
   1b312:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b316:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b318:	f7ff fd9c 	bl	1ae54 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b31c:	9b05      	ldr	r3, [sp, #20]
   1b31e:	2b00      	cmp	r3, #0
   1b320:	d1d8      	bne.n	1b2d4 <bt_gatt_indicate+0x6c>
   1b322:	e7d1      	b.n	1b2c8 <bt_gatt_indicate+0x60>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b324:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b326:	68c3      	ldr	r3, [r0, #12]
   1b328:	799b      	ldrb	r3, [r3, #6]
   1b32a:	069b      	lsls	r3, r3, #26
   1b32c:	d402      	bmi.n	1b334 <bt_gatt_indicate+0xcc>
			return -EINVAL;
   1b32e:	f06f 0015 	mvn.w	r0, #21
   1b332:	e7cb      	b.n	1b2cc <bt_gatt_indicate+0x64>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b334:	f00a fd1e 	bl	25d74 <bt_gatt_attr_value_handle>
   1b338:	f8ad 0018 	strh.w	r0, [sp, #24]
   1b33c:	e7d7      	b.n	1b2ee <bt_gatt_indicate+0x86>
	data.err = -ENOTCONN;
   1b33e:	f06f 0338 	mvn.w	r3, #56	; 0x38
   1b342:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b344:	2302      	movs	r3, #2
   1b346:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b34a:	f642 1302 	movw	r3, #10498	; 0x2902
   1b34e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b352:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1b354:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b356:	9302      	str	r3, [sp, #8]
   1b358:	4b0e      	ldr	r3, [pc, #56]	; (1b394 <bt_gatt_indicate+0x12c>)
   1b35a:	9301      	str	r3, [sp, #4]
   1b35c:	2301      	movs	r3, #1
   1b35e:	9300      	str	r3, [sp, #0]
   1b360:	aa04      	add	r2, sp, #16
   1b362:	462b      	mov	r3, r5
   1b364:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1b368:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b36a:	f88d 5010 	strb.w	r5, [sp, #16]
   1b36e:	f7ff fd71 	bl	1ae54 <bt_gatt_foreach_attr_type>
	return data.err;
   1b372:	9807      	ldr	r0, [sp, #28]
   1b374:	e7aa      	b.n	1b2cc <bt_gatt_indicate+0x64>
		return -EAGAIN;
   1b376:	f06f 000a 	mvn.w	r0, #10
   1b37a:	e7a7      	b.n	1b2cc <bt_gatt_indicate+0x64>
		return -ENOTCONN;
   1b37c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1b380:	e7a4      	b.n	1b2cc <bt_gatt_indicate+0x64>
   1b382:	bf00      	nop
   1b384:	0002997c 	.word	0x0002997c
   1b388:	00027c9a 	.word	0x00027c9a
   1b38c:	20000460 	.word	0x20000460
   1b390:	00025a6b 	.word	0x00025a6b
   1b394:	0001ac0d 	.word	0x0001ac0d

0001b398 <sc_process>:
{
   1b398:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b39a:	f3bf 8f5b 	dmb	ish
   1b39e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1b3a0:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b3a4:	079b      	lsls	r3, r3, #30
{
   1b3a6:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b3a8:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1b3ac:	d50a      	bpl.n	1b3c4 <sc_process+0x2c>
   1b3ae:	491b      	ldr	r1, [pc, #108]	; (1b41c <sc_process+0x84>)
   1b3b0:	481b      	ldr	r0, [pc, #108]	; (1b420 <sc_process+0x88>)
   1b3b2:	f240 32ae 	movw	r2, #942	; 0x3ae
   1b3b6:	f007 fcb9 	bl	22d2c <printk>
   1b3ba:	4818      	ldr	r0, [pc, #96]	; (1b41c <sc_process+0x84>)
   1b3bc:	f240 31ae 	movw	r1, #942	; 0x3ae
   1b3c0:	f007 ff17 	bl	231f2 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b3c4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b3c8:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b3ca:	f3bf 8f5b 	dmb	ish
   1b3ce:	e855 3f00 	ldrex	r3, [r5]
   1b3d2:	f023 0301 	bic.w	r3, r3, #1
   1b3d6:	e845 3200 	strex	r2, r3, [r5]
   1b3da:	2a00      	cmp	r2, #0
   1b3dc:	d1f7      	bne.n	1b3ce <sc_process+0x36>
   1b3de:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b3e2:	4b10      	ldr	r3, [pc, #64]	; (1b424 <sc_process+0x8c>)
   1b3e4:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1b3e8:	4b0f      	ldr	r3, [pc, #60]	; (1b428 <sc_process+0x90>)
   1b3ea:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1b3ee:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1b3f0:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1b3f2:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1b3f6:	2304      	movs	r3, #4
	sc->start = 0U;
   1b3f8:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1b3fc:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1b400:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b404:	f1a4 0120 	sub.w	r1, r4, #32
   1b408:	f7ff ff2e 	bl	1b268 <bt_gatt_indicate>
   1b40c:	b918      	cbnz	r0, 1b416 <sc_process+0x7e>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1b40e:	2101      	movs	r1, #1
   1b410:	4628      	mov	r0, r5
   1b412:	f00a fbdd 	bl	25bd0 <atomic_set_bit>
}
   1b416:	b003      	add	sp, #12
   1b418:	bd30      	pop	{r4, r5, pc}
   1b41a:	bf00      	nop
   1b41c:	0002997c 	.word	0x0002997c
   1b420:	00027c9a 	.word	0x00027c9a
   1b424:	000276dc 	.word	0x000276dc
   1b428:	0001a8e1 	.word	0x0001a8e1

0001b42c <update_ccc>:
{
   1b42c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b430:	4b38      	ldr	r3, [pc, #224]	; (1b514 <update_ccc+0xe8>)
	struct bt_conn *conn = data->conn;
   1b432:	6815      	ldr	r5, [r2, #0]
{
   1b434:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b436:	6882      	ldr	r2, [r0, #8]
   1b438:	429a      	cmp	r2, r3
{
   1b43a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b43c:	d116      	bne.n	1b46c <update_ccc+0x40>
	ccc = attr->user_data;
   1b43e:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   1b440:	893b      	ldrh	r3, [r7, #8]
   1b442:	b19b      	cbz	r3, 1b46c <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b444:	463a      	mov	r2, r7
   1b446:	4628      	mov	r0, r5
   1b448:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b44c:	f009 fee0 	bl	25210 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b450:	b160      	cbz	r0, 1b46c <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b452:	222a      	movs	r2, #42	; 0x2a
   1b454:	4621      	mov	r1, r4
   1b456:	4628      	mov	r0, r5
   1b458:	f00a fce8 	bl	25e2c <bt_gatt_check_perm>
		if (err) {
   1b45c:	b1d8      	cbz	r0, 1b496 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b45e:	2803      	cmp	r0, #3
   1b460:	d108      	bne.n	1b474 <update_ccc+0x48>
				BT_WARN("CCC %p not writable", attr);
   1b462:	482d      	ldr	r0, [pc, #180]	; (1b518 <update_ccc+0xec>)
   1b464:	4622      	mov	r2, r4
   1b466:	2157      	movs	r1, #87	; 0x57
   1b468:	f007 fc60 	bl	22d2c <printk>
}
   1b46c:	2001      	movs	r0, #1
   1b46e:	b002      	add	sp, #8
   1b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   1b474:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1b476:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
   1b478:	bf14      	ite	ne
   1b47a:	f04f 0802 	movne.w	r8, #2
   1b47e:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   1b482:	f009 fe99 	bl	251b8 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b486:	4580      	cmp	r8, r0
   1b488:	d905      	bls.n	1b496 <update_ccc+0x6a>
				if (data->sec < sec) {
   1b48a:	7933      	ldrb	r3, [r6, #4]
   1b48c:	4543      	cmp	r3, r8
   1b48e:	d2ed      	bcs.n	1b46c <update_ccc+0x40>
					data->sec = sec;
   1b490:	f886 8004 	strb.w	r8, [r6, #4]
   1b494:	e7ea      	b.n	1b46c <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
   1b496:	4639      	mov	r1, r7
   1b498:	4620      	mov	r0, r4
   1b49a:	f00a faca 	bl	25a32 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b49e:	4b1f      	ldr	r3, [pc, #124]	; (1b51c <update_ccc+0xf0>)
   1b4a0:	429f      	cmp	r7, r3
   1b4a2:	d1e3      	bne.n	1b46c <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b4a4:	7a28      	ldrb	r0, [r5, #8]
   1b4a6:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1b4aa:	f7ff f8b1 	bl	1a610 <find_sc_cfg>
	if (!cfg) {
   1b4ae:	4604      	mov	r4, r0
   1b4b0:	2800      	cmp	r0, #0
   1b4b2:	d0db      	beq.n	1b46c <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
   1b4b4:	8902      	ldrh	r2, [r0, #8]
   1b4b6:	8943      	ldrh	r3, [r0, #10]
   1b4b8:	ea52 0103 	orrs.w	r1, r2, r3
   1b4bc:	d0d6      	beq.n	1b46c <update_ccc+0x40>
	index = bt_conn_index(conn);
   1b4be:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1b4c0:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1b4c4:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1b4c8:	f7fd fcbe 	bl	18e48 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b4cc:	4914      	ldr	r1, [pc, #80]	; (1b520 <update_ccc+0xf4>)
   1b4ce:	4a15      	ldr	r2, [pc, #84]	; (1b524 <update_ccc+0xf8>)
   1b4d0:	2318      	movs	r3, #24
   1b4d2:	fb03 1300 	mla	r3, r3, r0, r1
   1b4d6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1b4d8:	4a13      	ldr	r2, [pc, #76]	; (1b528 <update_ccc+0xfc>)
   1b4da:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1b4dc:	aa01      	add	r2, sp, #4
   1b4de:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1b4e0:	2204      	movs	r2, #4
   1b4e2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b4e4:	b203      	sxth	r3, r0
   1b4e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b4ea:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1b4ee:	4628      	mov	r0, r5
   1b4f0:	f7ff feba 	bl	1b268 <bt_gatt_indicate>
   1b4f4:	b118      	cbz	r0, 1b4fe <update_ccc+0xd2>
		BT_ERR("SC restore indication failed");
   1b4f6:	480d      	ldr	r0, [pc, #52]	; (1b52c <update_ccc+0x100>)
   1b4f8:	2145      	movs	r1, #69	; 0x45
   1b4fa:	f007 fc17 	bl	22d2c <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1b4fe:	2204      	movs	r2, #4
   1b500:	2100      	movs	r1, #0
   1b502:	f104 0008 	add.w	r0, r4, #8
   1b506:	f009 fb08 	bl	24b1a <memset>
		sc_store(cfg);
   1b50a:	4620      	mov	r0, r4
   1b50c:	f7fe ff36 	bl	1a37c <sc_store>
   1b510:	e7ac      	b.n	1b46c <update_ccc+0x40>
   1b512:	bf00      	nop
   1b514:	0001a519 	.word	0x0001a519
   1b518:	00029a00 	.word	0x00029a00
   1b51c:	20000654 	.word	0x20000654
   1b520:	200029ac 	.word	0x200029ac
   1b524:	000276dc 	.word	0x000276dc
   1b528:	00025bed 	.word	0x00025bed
   1b52c:	00029a19 	.word	0x00029a19

0001b530 <bt_gatt_connected>:
{
   1b530:	b570      	push	{r4, r5, r6, lr}
   1b532:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b534:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1b538:	4604      	mov	r4, r0
	data.conn = conn;
   1b53a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1b53c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b53e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1b540:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b544:	4629      	mov	r1, r5
   1b546:	f009 fd60 	bl	2500a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b54a:	b190      	cbz	r0, 1b572 <bt_gatt_connected+0x42>
		if (conn->id) {
   1b54c:	7a22      	ldrb	r2, [r4, #8]
   1b54e:	b31a      	cbz	r2, 1b598 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b550:	ae02      	add	r6, sp, #8
   1b552:	2104      	movs	r1, #4
   1b554:	4630      	mov	r0, r6
   1b556:	f007 fb4d 	bl	22bf4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b55a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b55c:	4a0f      	ldr	r2, [pc, #60]	; (1b59c <bt_gatt_connected+0x6c>)
   1b55e:	2124      	movs	r1, #36	; 0x24
   1b560:	a805      	add	r0, sp, #20
   1b562:	462b      	mov	r3, r5
   1b564:	f7fa fe26 	bl	161b4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1b568:	aa05      	add	r2, sp, #20
   1b56a:	490d      	ldr	r1, [pc, #52]	; (1b5a0 <bt_gatt_connected+0x70>)
   1b56c:	4610      	mov	r0, r2
   1b56e:	f7f8 ff83 	bl	14478 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b572:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b576:	4a0b      	ldr	r2, [pc, #44]	; (1b5a4 <bt_gatt_connected+0x74>)
   1b578:	ab03      	add	r3, sp, #12
   1b57a:	2001      	movs	r0, #1
   1b57c:	f00a fc48 	bl	25e10 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1b580:	4620      	mov	r0, r4
   1b582:	f009 fe19 	bl	251b8 <bt_conn_get_security>
   1b586:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b58a:	4288      	cmp	r0, r1
   1b58c:	d202      	bcs.n	1b594 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
   1b58e:	4620      	mov	r0, r4
   1b590:	f009 fddf 	bl	25152 <bt_conn_set_security>
}
   1b594:	b00e      	add	sp, #56	; 0x38
   1b596:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b598:	9200      	str	r2, [sp, #0]
   1b59a:	e7df      	b.n	1b55c <bt_gatt_connected+0x2c>
   1b59c:	000299eb 	.word	0x000299eb
   1b5a0:	0001b06d 	.word	0x0001b06d
   1b5a4:	0001b42d 	.word	0x0001b42d

0001b5a8 <bt_gatt_encrypt_change>:
{
   1b5a8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b5aa:	4a06      	ldr	r2, [pc, #24]	; (1b5c4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1b5ac:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b5ae:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1b5b0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b5b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1b5b6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b5ba:	f00a fc29 	bl	25e10 <bt_gatt_foreach_attr>
}
   1b5be:	b003      	add	sp, #12
   1b5c0:	f85d fb04 	ldr.w	pc, [sp], #4
   1b5c4:	0001b42d 	.word	0x0001b42d

0001b5c8 <db_hash_read>:
{
   1b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b5ca:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   1b5cc:	4810      	ldr	r0, [pc, #64]	; (1b610 <db_hash_read+0x48>)
{
   1b5ce:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b5d2:	4615      	mov	r5, r2
   1b5d4:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
   1b5d6:	f006 fceb 	bl	21fb0 <k_delayed_work_cancel>
	if (!err) {
   1b5da:	b910      	cbnz	r0, 1b5e2 <db_hash_read+0x1a>
		db_hash_gen(true);
   1b5dc:	2001      	movs	r0, #1
   1b5de:	f7ff fca7 	bl	1af30 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   1b5e2:	2101      	movs	r1, #1
   1b5e4:	4620      	mov	r0, r4
   1b5e6:	f00a fc4c 	bl	25e82 <bt_gatt_change_aware>
	if (offset > value_len) {
   1b5ea:	2e10      	cmp	r6, #16
   1b5ec:	d80c      	bhi.n	1b608 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   1b5ee:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1b5f2:	4908      	ldr	r1, [pc, #32]	; (1b614 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
   1b5f4:	42bc      	cmp	r4, r7
   1b5f6:	bfa8      	it	ge
   1b5f8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b5fa:	4622      	mov	r2, r4
   1b5fc:	4431      	add	r1, r6
   1b5fe:	4628      	mov	r0, r5
   1b600:	f009 fa60 	bl	24ac4 <memcpy>
}
   1b604:	4620      	mov	r0, r4
   1b606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b608:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   1b60c:	e7fa      	b.n	1b604 <db_hash_read+0x3c>
   1b60e:	bf00      	nop
   1b610:	200021f0 	.word	0x200021f0
   1b614:	200030ef 	.word	0x200030ef

0001b618 <bt_gatt_store_ccc>:
{
   1b618:	b570      	push	{r4, r5, r6, lr}
   1b61a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1b61c:	2300      	movs	r3, #0
{
   1b61e:	4604      	mov	r4, r0
   1b620:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1b622:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1b624:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1b628:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1b62a:	4a15      	ldr	r2, [pc, #84]	; (1b680 <bt_gatt_store_ccc+0x68>)
   1b62c:	ab0d      	add	r3, sp, #52	; 0x34
   1b62e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b632:	2001      	movs	r0, #1
   1b634:	f00a fbec 	bl	25e10 <bt_gatt_foreach_attr>
	if (id) {
   1b638:	b1ec      	cbz	r4, 1b676 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1b63a:	ae03      	add	r6, sp, #12
   1b63c:	4622      	mov	r2, r4
   1b63e:	2104      	movs	r1, #4
   1b640:	4630      	mov	r0, r6
   1b642:	f007 fad7 	bl	22bf4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1b646:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b648:	4a0e      	ldr	r2, [pc, #56]	; (1b684 <bt_gatt_store_ccc+0x6c>)
   1b64a:	462b      	mov	r3, r5
   1b64c:	2124      	movs	r1, #36	; 0x24
   1b64e:	a804      	add	r0, sp, #16
   1b650:	f7fa fdb0 	bl	161b4 <bt_settings_encode_key>
	if (save.count) {
   1b654:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1b656:	b182      	cbz	r2, 1b67a <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1b658:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1b65a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1b65c:	a804      	add	r0, sp, #16
   1b65e:	f7f8 fea7 	bl	143b0 <settings_save_one>
	if (err) {
   1b662:	4604      	mov	r4, r0
   1b664:	b120      	cbz	r0, 1b670 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1b666:	4602      	mov	r2, r0
   1b668:	2145      	movs	r1, #69	; 0x45
   1b66a:	4807      	ldr	r0, [pc, #28]	; (1b688 <bt_gatt_store_ccc+0x70>)
   1b66c:	f007 fb5e 	bl	22d2c <printk>
}
   1b670:	4620      	mov	r0, r4
   1b672:	b040      	add	sp, #256	; 0x100
   1b674:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b676:	9400      	str	r4, [sp, #0]
   1b678:	e7e6      	b.n	1b648 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1b67a:	4611      	mov	r1, r2
   1b67c:	e7ee      	b.n	1b65c <bt_gatt_store_ccc+0x44>
   1b67e:	bf00      	nop
   1b680:	0001a42d 	.word	0x0001a42d
   1b684:	000299eb 	.word	0x000299eb
   1b688:	00029a3b 	.word	0x00029a3b

0001b68c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1b68c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b68e:	4604      	mov	r4, r0
   1b690:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b692:	4603      	mov	r3, r0
   1b694:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b698:	2001      	movs	r0, #1
   1b69a:	4a37      	ldr	r2, [pc, #220]	; (1b778 <bt_gatt_disconnected+0xec>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b69c:	f104 0690 	add.w	r6, r4, #144	; 0x90
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b6a0:	f00a fbb6 	bl	25e10 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b6a4:	7a20      	ldrb	r0, [r4, #8]
   1b6a6:	4631      	mov	r1, r6
   1b6a8:	f009 fcaf 	bl	2500a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1b6ac:	b378      	cbz	r0, 1b70e <bt_gatt_disconnected+0x82>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1b6ae:	4631      	mov	r1, r6
   1b6b0:	7a20      	ldrb	r0, [r4, #8]
   1b6b2:	f7ff ffb1 	bl	1b618 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1b6b6:	4620      	mov	r0, r4
   1b6b8:	f7ff f88c 	bl	1a7d4 <find_cf_cfg>
	if (!cfg) {
   1b6bc:	4605      	mov	r5, r0
   1b6be:	2800      	cmp	r0, #0
   1b6c0:	d044      	beq.n	1b74c <bt_gatt_disconnected+0xc0>
		if (conn->id) {
   1b6c2:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1b6c4:	3508      	adds	r5, #8
		if (conn->id) {
   1b6c6:	2a00      	cmp	r2, #0
   1b6c8:	d042      	beq.n	1b750 <bt_gatt_disconnected+0xc4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b6ca:	af02      	add	r7, sp, #8
   1b6cc:	2104      	movs	r1, #4
   1b6ce:	4638      	mov	r0, r7
   1b6d0:	f007 fa90 	bl	22bf4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1b6d4:	9700      	str	r7, [sp, #0]
   1b6d6:	4633      	mov	r3, r6
   1b6d8:	4a28      	ldr	r2, [pc, #160]	; (1b77c <bt_gatt_disconnected+0xf0>)
   1b6da:	2124      	movs	r1, #36	; 0x24
   1b6dc:	a803      	add	r0, sp, #12
   1b6de:	f7fa fd69 	bl	161b4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1b6e2:	7a23      	ldrb	r3, [r4, #8]
   1b6e4:	2701      	movs	r7, #1
   1b6e6:	b93b      	cbnz	r3, 1b6f8 <bt_gatt_disconnected+0x6c>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1b6e8:	2300      	movs	r3, #0
   1b6ea:	9300      	str	r3, [sp, #0]
   1b6ec:	4a23      	ldr	r2, [pc, #140]	; (1b77c <bt_gatt_disconnected+0xf0>)
   1b6ee:	4633      	mov	r3, r6
   1b6f0:	2124      	movs	r1, #36	; 0x24
   1b6f2:	a803      	add	r0, sp, #12
   1b6f4:	f7fa fd5e 	bl	161b4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1b6f8:	463a      	mov	r2, r7
   1b6fa:	4629      	mov	r1, r5
   1b6fc:	a803      	add	r0, sp, #12
   1b6fe:	f7f8 fe57 	bl	143b0 <settings_save_one>
	if (err) {
   1b702:	4602      	mov	r2, r0
   1b704:	b118      	cbz	r0, 1b70e <bt_gatt_disconnected+0x82>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1b706:	481e      	ldr	r0, [pc, #120]	; (1b780 <bt_gatt_disconnected+0xf4>)
   1b708:	2145      	movs	r1, #69	; 0x45
   1b70a:	f007 fb0f 	bl	22d2c <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b70e:	7a20      	ldrb	r0, [r4, #8]
   1b710:	4631      	mov	r1, r6
   1b712:	f009 fc7a 	bl	2500a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b716:	b150      	cbz	r0, 1b72e <bt_gatt_disconnected+0xa2>
		struct addr_with_id addr_with_id = {
   1b718:	7a23      	ldrb	r3, [r4, #8]
   1b71a:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1b71e:	4a19      	ldr	r2, [pc, #100]	; (1b784 <bt_gatt_disconnected+0xf8>)
		struct addr_with_id addr_with_id = {
   1b720:	9603      	str	r6, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1b722:	ab03      	add	r3, sp, #12
   1b724:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b728:	2001      	movs	r0, #1
   1b72a:	f00a fb71 	bl	25e10 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1b72e:	4620      	mov	r0, r4
   1b730:	f7ff f850 	bl	1a7d4 <find_cf_cfg>
	if (!cfg) {
   1b734:	4605      	mov	r5, r0
   1b736:	b138      	cbz	r0, 1b748 <bt_gatt_disconnected+0xbc>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b738:	7a20      	ldrb	r0, [r4, #8]
   1b73a:	4631      	mov	r1, r6
   1b73c:	f009 fc65 	bl	2500a <bt_addr_le_is_bonded>
   1b740:	b940      	cbnz	r0, 1b754 <bt_gatt_disconnected+0xc8>
		clear_cf_cfg(cfg);
   1b742:	4628      	mov	r0, r5
   1b744:	f00a f9fe 	bl	25b44 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1b748:	b00d      	add	sp, #52	; 0x34
   1b74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   1b74c:	4607      	mov	r7, r0
   1b74e:	e7cb      	b.n	1b6e8 <bt_gatt_disconnected+0x5c>
   1b750:	2701      	movs	r7, #1
   1b752:	e7c9      	b.n	1b6e8 <bt_gatt_disconnected+0x5c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b754:	1c68      	adds	r0, r5, #1
   1b756:	4631      	mov	r1, r6
   1b758:	350c      	adds	r5, #12
   1b75a:	f00a f9e2 	bl	25b22 <bt_addr_le_copy>
   1b75e:	f3bf 8f5b 	dmb	ish
   1b762:	e855 3f00 	ldrex	r3, [r5]
   1b766:	f023 0302 	bic.w	r3, r3, #2
   1b76a:	e845 3200 	strex	r2, r3, [r5]
   1b76e:	2a00      	cmp	r2, #0
   1b770:	d1f7      	bne.n	1b762 <bt_gatt_disconnected+0xd6>
   1b772:	f3bf 8f5b 	dmb	ish
}
   1b776:	e7e7      	b.n	1b748 <bt_gatt_disconnected+0xbc>
   1b778:	0001aad5 	.word	0x0001aad5
   1b77c:	00029a8f 	.word	0x00029a8f
   1b780:	00029a5e 	.word	0x00029a5e
   1b784:	0001a4f1 	.word	0x0001a4f1

0001b788 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1b788:	4b10      	ldr	r3, [pc, #64]	; (1b7cc <get_io_capa+0x44>)
   1b78a:	681b      	ldr	r3, [r3, #0]
   1b78c:	b1bb      	cbz	r3, 1b7be <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1b78e:	681a      	ldr	r2, [r3, #0]
   1b790:	b142      	cbz	r2, 1b7a4 <get_io_capa+0x1c>
   1b792:	6859      	ldr	r1, [r3, #4]
   1b794:	b131      	cbz	r1, 1b7a4 <get_io_capa+0x1c>
   1b796:	6899      	ldr	r1, [r3, #8]
   1b798:	b911      	cbnz	r1, 1b7a0 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1b79a:	490d      	ldr	r1, [pc, #52]	; (1b7d0 <get_io_capa+0x48>)
   1b79c:	7809      	ldrb	r1, [r1, #0]
   1b79e:	b939      	cbnz	r1, 1b7b0 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1b7a0:	2004      	movs	r0, #4
   1b7a2:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1b7a4:	490a      	ldr	r1, [pc, #40]	; (1b7d0 <get_io_capa+0x48>)
   1b7a6:	7809      	ldrb	r1, [r1, #0]
   1b7a8:	b111      	cbz	r1, 1b7b0 <get_io_capa+0x28>
   1b7aa:	b10a      	cbz	r2, 1b7b0 <get_io_capa+0x28>
   1b7ac:	6899      	ldr	r1, [r3, #8]
   1b7ae:	b941      	cbnz	r1, 1b7c2 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   1b7b0:	685b      	ldr	r3, [r3, #4]
   1b7b2:	b943      	cbnz	r3, 1b7c6 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   1b7b4:	2a00      	cmp	r2, #0
   1b7b6:	bf0c      	ite	eq
   1b7b8:	2003      	moveq	r0, #3
   1b7ba:	2000      	movne	r0, #0
   1b7bc:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1b7be:	2003      	movs	r0, #3
   1b7c0:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1b7c2:	2001      	movs	r0, #1
   1b7c4:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1b7c6:	2002      	movs	r0, #2
	}
}
   1b7c8:	4770      	bx	lr
   1b7ca:	bf00      	nop
   1b7cc:	20002934 	.word	0x20002934
   1b7d0:	20003110 	.word	0x20003110

0001b7d4 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b7d4:	4288      	cmp	r0, r1
{
   1b7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b7d8:	4604      	mov	r4, r0
   1b7da:	460d      	mov	r5, r1
   1b7dc:	4616      	mov	r6, r2
   1b7de:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b7e2:	d916      	bls.n	1b812 <sys_memcpy_swap+0x3e>
   1b7e4:	188b      	adds	r3, r1, r2
   1b7e6:	4298      	cmp	r0, r3
   1b7e8:	d20a      	bcs.n	1b800 <sys_memcpy_swap+0x2c>
   1b7ea:	490b      	ldr	r1, [pc, #44]	; (1b818 <sys_memcpy_swap+0x44>)
   1b7ec:	480b      	ldr	r0, [pc, #44]	; (1b81c <sys_memcpy_swap+0x48>)
   1b7ee:	f240 2217 	movw	r2, #535	; 0x217
   1b7f2:	f007 fa9b 	bl	22d2c <printk>
   1b7f6:	4808      	ldr	r0, [pc, #32]	; (1b818 <sys_memcpy_swap+0x44>)
   1b7f8:	f240 2117 	movw	r1, #535	; 0x217
   1b7fc:	f007 fcf9 	bl	231f2 <assert_post_action>
	psrc += length - 1;
   1b800:	3e01      	subs	r6, #1
   1b802:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1b804:	f815 3901 	ldrb.w	r3, [r5], #-1
   1b808:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   1b80c:	42bc      	cmp	r4, r7
   1b80e:	d1f9      	bne.n	1b804 <sys_memcpy_swap+0x30>
}
   1b810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b812:	d0ea      	beq.n	1b7ea <sys_memcpy_swap+0x16>
   1b814:	42b9      	cmp	r1, r7
   1b816:	e7e7      	b.n	1b7e8 <sys_memcpy_swap+0x14>
   1b818:	0002863f 	.word	0x0002863f
   1b81c:	00027c9a 	.word	0x00027c9a

0001b820 <get_auth.isra.0>:
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
	if (sc_supported) {
   1b820:	4b0c      	ldr	r3, [pc, #48]	; (1b854 <get_auth.isra.0+0x34>)
   1b822:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   1b824:	b510      	push	{r4, lr}
	if (sc_supported) {
   1b826:	b17b      	cbz	r3, 1b848 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1b828:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b82c:	f7ff ffac 	bl	1b788 <get_io_capa>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
	}

	if (bondable) {
   1b830:	4b09      	ldr	r3, [pc, #36]	; (1b858 <get_auth.isra.0+0x38>)
   1b832:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b834:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1b836:	bf0c      	ite	eq
   1b838:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1b83c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1b840:	b12b      	cbz	r3, 1b84e <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1b842:	f044 0001 	orr.w	r0, r4, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
   1b846:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1b848:	f000 0407 	and.w	r4, r0, #7
   1b84c:	e7ee      	b.n	1b82c <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1b84e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1b852:	e7f8      	b.n	1b846 <get_auth.isra.0+0x26>
   1b854:	20003110 	.word	0x20003110
   1b858:	20000798 	.word	0x20000798

0001b85c <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   1b85c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1b85e:	2106      	movs	r1, #6
   1b860:	f009 fdca 	bl	253f8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b864:	4604      	mov	r4, r0
   1b866:	b918      	cbnz	r0, 1b870 <smp_chan_get+0x14>
		BT_ERR("Unable to find SMP channel");
   1b868:	4802      	ldr	r0, [pc, #8]	; (1b874 <smp_chan_get+0x18>)
   1b86a:	2145      	movs	r1, #69	; 0x45
   1b86c:	f007 fa5e 	bl	22d2c <printk>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
   1b870:	4620      	mov	r0, r4
   1b872:	bd10      	pop	{r4, pc}
   1b874:	00029aa0 	.word	0x00029aa0

0001b878 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1b878:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1b87a:	4b07      	ldr	r3, [pc, #28]	; (1b898 <bt_smp_accept+0x20>)
{
   1b87c:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1b87e:	6818      	ldr	r0, [r3, #0]
   1b880:	b918      	cbnz	r0, 1b88a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1b882:	4a06      	ldr	r2, [pc, #24]	; (1b89c <bt_smp_accept+0x24>)
   1b884:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
   1b886:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1b888:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1b88a:	4805      	ldr	r0, [pc, #20]	; (1b8a0 <bt_smp_accept+0x28>)
   1b88c:	2145      	movs	r1, #69	; 0x45
   1b88e:	f007 fa4d 	bl	22d2c <printk>
   1b892:	f06f 000b 	mvn.w	r0, #11
   1b896:	e7f7      	b.n	1b888 <bt_smp_accept+0x10>
   1b898:	20002278 	.word	0x20002278
   1b89c:	00027850 	.word	0x00027850
   1b8a0:	00029ac0 	.word	0x00029ac0

0001b8a4 <smp_init>:
{
   1b8a4:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   1b8a6:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
{
   1b8aa:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
   1b8ac:	22f0      	movs	r2, #240	; 0xf0
   1b8ae:	2100      	movs	r1, #0
   1b8b0:	4628      	mov	r0, r5
   1b8b2:	f009 f932 	bl	24b1a <memset>
	if (bt_rand(smp->prnd, 16)) {
   1b8b6:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   1b8ba:	2110      	movs	r1, #16
   1b8bc:	f003 fd80 	bl	1f3c0 <bt_rand>
   1b8c0:	4604      	mov	r4, r0
   1b8c2:	b948      	cbnz	r0, 1b8d8 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1b8c4:	2105      	movs	r1, #5
   1b8c6:	4628      	mov	r0, r5
   1b8c8:	f00a fb0f 	bl	25eea <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1b8cc:	f7fc fcd2 	bl	18274 <bt_pub_key_get>
   1b8d0:	4b02      	ldr	r3, [pc, #8]	; (1b8dc <smp_init+0x38>)
   1b8d2:	6018      	str	r0, [r3, #0]
}
   1b8d4:	4620      	mov	r0, r4
   1b8d6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1b8d8:	2408      	movs	r4, #8
   1b8da:	e7fb      	b.n	1b8d4 <smp_init+0x30>
   1b8dc:	200029c8 	.word	0x200029c8

0001b8e0 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1b8e0:	b513      	push	{r0, r1, r4, lr}
   1b8e2:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1b8e4:	2200      	movs	r2, #0
   1b8e6:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1b8e8:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1b8ea:	460a      	mov	r2, r1
   1b8ec:	6800      	ldr	r0, [r0, #0]
   1b8ee:	2106      	movs	r1, #6
   1b8f0:	f009 fd59 	bl	253a6 <bt_l2cap_send_cb>
   1b8f4:	4805      	ldr	r0, [pc, #20]	; (1b90c <smp_send.isra.0+0x2c>)
   1b8f6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b8fa:	2300      	movs	r3, #0
   1b8fc:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
   1b900:	b002      	add	sp, #8
   1b902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b906:	f006 bae1 	b.w	21ecc <k_delayed_work_submit_to_queue>
   1b90a:	bf00      	nop
   1b90c:	200026c8 	.word	0x200026c8

0001b910 <compute_and_check_and_send_slave_dhcheck>:
{
   1b910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1b914:	2210      	movs	r2, #16
{
   1b916:	b0a3      	sub	sp, #140	; 0x8c
   1b918:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1b91a:	2100      	movs	r1, #0
   1b91c:	eb0d 0002 	add.w	r0, sp, r2
   1b920:	f009 f8fb 	bl	24b1a <memset>
	switch (smp->method) {
   1b924:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1b928:	2b05      	cmp	r3, #5
   1b92a:	d87e      	bhi.n	1ba2a <compute_and_check_and_send_slave_dhcheck+0x11a>
   1b92c:	e8df f003 	tbb	[pc, r3]
   1b930:	09030309 	.word	0x09030309
   1b934:	7f7d      	.short	0x7f7d
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1b936:	2204      	movs	r2, #4
   1b938:	f504 71cc 	add.w	r1, r4, #408	; 0x198
   1b93c:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b93e:	f009 f8c1 	bl	24ac4 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1b942:	4b63      	ldr	r3, [pc, #396]	; (1bad0 <compute_and_check_and_send_slave_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
   1b944:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
   1b948:	aa14      	add	r2, sp, #80	; 0x50
   1b94a:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1b94e:	6818      	ldr	r0, [r3, #0]
   1b950:	6859      	ldr	r1, [r3, #4]
   1b952:	4615      	mov	r5, r2
   1b954:	c503      	stmia	r5!, {r0, r1}
   1b956:	3308      	adds	r3, #8
   1b958:	42b3      	cmp	r3, r6
   1b95a:	462a      	mov	r2, r5
   1b95c:	d1f7      	bne.n	1b94e <compute_and_check_and_send_slave_dhcheck+0x3e>
   1b95e:	6818      	ldr	r0, [r3, #0]
   1b960:	791b      	ldrb	r3, [r3, #4]
   1b962:	6028      	str	r0, [r5, #0]
   1b964:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1b966:	ad0c      	add	r5, sp, #48	; 0x30
   1b968:	2220      	movs	r2, #32
   1b96a:	f204 1157 	addw	r1, r4, #343	; 0x157
   1b96e:	4628      	mov	r0, r5
   1b970:	f7ff ff30 	bl	1b7d4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1b974:	4857      	ldr	r0, [pc, #348]	; (1bad4 <compute_and_check_and_send_slave_dhcheck+0x1c4>)
   1b976:	ab08      	add	r3, sp, #32
   1b978:	2220      	movs	r2, #32
   1b97a:	4629      	mov	r1, r5
   1b97c:	f00a fad2 	bl	25f24 <bt_smp_aes_cmac>
	if (err) {
   1b980:	2800      	cmp	r0, #0
   1b982:	d152      	bne.n	1ba2a <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b984:	f104 07f7 	add.w	r7, r4, #247	; 0xf7
	sys_memcpy_swap(m + 5, n1, 16);
   1b988:	2210      	movs	r2, #16
   1b98a:	4639      	mov	r1, r7
   1b98c:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b990:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
   1b994:	f7ff ff1e 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1b998:	2210      	movs	r2, #16
   1b99a:	4641      	mov	r1, r8
   1b99c:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1b9a0:	f7ff ff18 	bl	1b7d4 <sys_memcpy_swap>
	m[37] = a1->type;
   1b9a4:	f899 3097 	ldrb.w	r3, [r9, #151]	; 0x97
   1b9a8:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1b9ac:	2206      	movs	r2, #6
   1b9ae:	f109 0198 	add.w	r1, r9, #152	; 0x98
   1b9b2:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1b9b6:	f7ff ff0d 	bl	1b7d4 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1b9ba:	f204 1687 	addw	r6, r4, #391	; 0x187
	m[44] = a2->type;
   1b9be:	f899 309e 	ldrb.w	r3, [r9, #158]	; 0x9e
   1b9c2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1b9c6:	2206      	movs	r2, #6
   1b9c8:	f109 019f 	add.w	r1, r9, #159	; 0x9f
   1b9cc:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1b9d0:	f7ff ff00 	bl	1b7d4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1b9d4:	4633      	mov	r3, r6
   1b9d6:	2235      	movs	r2, #53	; 0x35
   1b9d8:	a914      	add	r1, sp, #80	; 0x50
   1b9da:	a808      	add	r0, sp, #32
   1b9dc:	f00a faa2 	bl	25f24 <bt_smp_aes_cmac>
	if (err) {
   1b9e0:	bb18      	cbnz	r0, 1ba2a <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
   1b9e2:	4630      	mov	r0, r6
   1b9e4:	f00a fad6 	bl	25f94 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1b9e8:	f204 1907 	addw	r9, r4, #263	; 0x107
	m[0] = 0x01;
   1b9ec:	2301      	movs	r3, #1
   1b9ee:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1b9f2:	2235      	movs	r2, #53	; 0x35
   1b9f4:	464b      	mov	r3, r9
   1b9f6:	a914      	add	r1, sp, #80	; 0x50
   1b9f8:	a808      	add	r0, sp, #32
   1b9fa:	f00a fa93 	bl	25f24 <bt_smp_aes_cmac>
	if (err) {
   1b9fe:	b9a0      	cbnz	r0, 1ba2a <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
   1ba00:	4648      	mov	r0, r9
   1ba02:	f00a fac7 	bl	25f94 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1ba06:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1ba08:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
   1ba0a:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1ba0e:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1ba10:	f103 0197 	add.w	r1, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
   1ba14:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1ba16:	e9cd 2300 	strd	r2, r3, [sp]
   1ba1a:	9102      	str	r1, [sp, #8]
   1ba1c:	ab04      	add	r3, sp, #16
   1ba1e:	463a      	mov	r2, r7
   1ba20:	4641      	mov	r1, r8
   1ba22:	4630      	mov	r0, r6
   1ba24:	f00a fac4 	bl	25fb0 <smp_f6>
   1ba28:	b148      	cbz	r0, 1ba3e <compute_and_check_and_send_slave_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
   1ba2a:	2008      	movs	r0, #8
   1ba2c:	e048      	b.n	1bac0 <compute_and_check_and_send_slave_dhcheck+0x1b0>
		if (smp->oobd_remote) {
   1ba2e:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
   1ba32:	2900      	cmp	r1, #0
   1ba34:	d085      	beq.n	1b942 <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1ba36:	2210      	movs	r2, #16
   1ba38:	eb0d 0002 	add.w	r0, sp, r2
   1ba3c:	e77f      	b.n	1b93e <compute_and_check_and_send_slave_dhcheck+0x2e>
	if (smp->method == LE_SC_OOB) {
   1ba3e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1ba42:	2b05      	cmp	r3, #5
   1ba44:	d108      	bne.n	1ba58 <compute_and_check_and_send_slave_dhcheck+0x148>
		if (smp->oobd_local) {
   1ba46:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1ba4a:	2210      	movs	r2, #16
   1ba4c:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   1ba50:	2900      	cmp	r1, #0
   1ba52:	d038      	beq.n	1bac6 <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1ba54:	f009 f836 	bl	24ac4 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1ba58:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ba5a:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
   1ba5c:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ba60:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1ba62:	f103 019e 	add.w	r1, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1ba66:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ba68:	e9cd 2300 	strd	r2, r3, [sp]
   1ba6c:	9102      	str	r1, [sp, #8]
   1ba6e:	ab04      	add	r3, sp, #16
   1ba70:	4642      	mov	r2, r8
   1ba72:	4639      	mov	r1, r7
   1ba74:	f00a fa9c 	bl	25fb0 <smp_f6>
   1ba78:	2800      	cmp	r0, #0
   1ba7a:	d1d6      	bne.n	1ba2a <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
   1ba7c:	4629      	mov	r1, r5
   1ba7e:	2210      	movs	r2, #16
   1ba80:	f204 1077 	addw	r0, r4, #375	; 0x177
   1ba84:	f009 f80e 	bl	24aa4 <memcmp>
   1ba88:	4605      	mov	r5, r0
   1ba8a:	b9f8      	cbnz	r0, 1bacc <compute_and_check_and_send_slave_dhcheck+0x1bc>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1ba8c:	210d      	movs	r1, #13
   1ba8e:	4620      	mov	r0, r4
   1ba90:	f00a fb0a 	bl	260a8 <smp_create_pdu.isra.0>
	if (!buf) {
   1ba94:	4606      	mov	r6, r0
   1ba96:	2800      	cmp	r0, #0
   1ba98:	d0c7      	beq.n	1ba2a <compute_and_check_and_send_slave_dhcheck+0x11a>
	req = net_buf_add(buf, sizeof(*req));
   1ba9a:	2110      	movs	r1, #16
   1ba9c:	3008      	adds	r0, #8
   1ba9e:	f001 fcf5 	bl	1d48c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1baa2:	2210      	movs	r2, #16
   1baa4:	a914      	add	r1, sp, #80	; 0x50
   1baa6:	f009 f80d 	bl	24ac4 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1baaa:	462a      	mov	r2, r5
   1baac:	4631      	mov	r1, r6
   1baae:	4620      	mov	r0, r4
   1bab0:	f7ff ff16 	bl	1b8e0 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1bab4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1bab8:	2101      	movs	r1, #1
   1baba:	f00a fa16 	bl	25eea <atomic_set_bit>
	return 0;
   1babe:	4628      	mov	r0, r5
}
   1bac0:	b023      	add	sp, #140	; 0x8c
   1bac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   1bac6:	f009 f828 	bl	24b1a <memset>
   1baca:	e7c5      	b.n	1ba58 <compute_and_check_and_send_slave_dhcheck+0x148>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1bacc:	200b      	movs	r0, #11
   1bace:	e7f7      	b.n	1bac0 <compute_and_check_and_send_slave_dhcheck+0x1b0>
   1bad0:	000271c5 	.word	0x000271c5
   1bad4:	00029d65 	.word	0x00029d65

0001bad8 <sc_send_public_key>:
{
   1bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1bada:	210c      	movs	r1, #12
{
   1badc:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1bade:	f00a fae3 	bl	260a8 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1bae2:	4604      	mov	r4, r0
   1bae4:	b1b0      	cbz	r0, 1bb14 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
   1bae6:	2140      	movs	r1, #64	; 0x40
   1bae8:	3008      	adds	r0, #8
   1baea:	f001 fccf 	bl	1d48c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1baee:	4f0a      	ldr	r7, [pc, #40]	; (1bb18 <sc_send_public_key+0x40>)
   1baf0:	2220      	movs	r2, #32
   1baf2:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
   1baf4:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1baf6:	f008 ffe5 	bl	24ac4 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1bafa:	6839      	ldr	r1, [r7, #0]
   1bafc:	2220      	movs	r2, #32
   1bafe:	4411      	add	r1, r2
   1bb00:	18b0      	adds	r0, r6, r2
   1bb02:	f008 ffdf 	bl	24ac4 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1bb06:	4628      	mov	r0, r5
   1bb08:	2200      	movs	r2, #0
   1bb0a:	4621      	mov	r1, r4
   1bb0c:	f7ff fee8 	bl	1b8e0 <smp_send.isra.0>
	return 0;
   1bb10:	2000      	movs	r0, #0
}
   1bb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1bb14:	2008      	movs	r0, #8
   1bb16:	e7fc      	b.n	1bb12 <sc_send_public_key+0x3a>
   1bb18:	200029c8 	.word	0x200029c8

0001bb1c <smp_send_pairing_confirm>:
{
   1bb1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1bb1e:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
   1bb22:	2c02      	cmp	r4, #2
{
   1bb24:	4605      	mov	r5, r0
	switch (smp->method) {
   1bb26:	d824      	bhi.n	1bb72 <smp_send_pairing_confirm+0x56>
   1bb28:	b14c      	cbz	r4, 1bb3e <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bb2a:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
   1bb2e:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
   1bb32:	40dc      	lsrs	r4, r3
   1bb34:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1bb38:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1bb3c:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1bb3e:	2103      	movs	r1, #3
   1bb40:	4628      	mov	r0, r5
   1bb42:	f00a fab1 	bl	260a8 <smp_create_pdu.isra.0>
	if (!buf) {
   1bb46:	4606      	mov	r6, r0
   1bb48:	b1a8      	cbz	r0, 1bb76 <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
   1bb4a:	2110      	movs	r1, #16
   1bb4c:	3008      	adds	r0, #8
   1bb4e:	f001 fc9d 	bl	1d48c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1bb52:	9000      	str	r0, [sp, #0]
   1bb54:	4810      	ldr	r0, [pc, #64]	; (1bb98 <smp_send_pairing_confirm+0x7c>)
   1bb56:	4623      	mov	r3, r4
   1bb58:	6800      	ldr	r0, [r0, #0]
   1bb5a:	f105 02e7 	add.w	r2, r5, #231	; 0xe7
   1bb5e:	f205 1117 	addw	r1, r5, #279	; 0x117
   1bb62:	f00a fa71 	bl	26048 <smp_f4>
   1bb66:	4604      	mov	r4, r0
   1bb68:	b148      	cbz	r0, 1bb7e <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
   1bb6a:	4630      	mov	r0, r6
   1bb6c:	f001 fb78 	bl	1d260 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1bb70:	e001      	b.n	1bb76 <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
   1bb72:	2c03      	cmp	r4, #3
   1bb74:	d001      	beq.n	1bb7a <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
   1bb76:	2008      	movs	r0, #8
   1bb78:	e00c      	b.n	1bb94 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1bb7a:	2400      	movs	r4, #0
   1bb7c:	e7df      	b.n	1bb3e <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1bb7e:	4602      	mov	r2, r0
   1bb80:	4631      	mov	r1, r6
   1bb82:	4628      	mov	r0, r5
   1bb84:	f7ff feac 	bl	1b8e0 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1bb88:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1bb8c:	4621      	mov	r1, r4
   1bb8e:	f00a f9ba 	bl	25f06 <atomic_clear_bit>
	return 0;
   1bb92:	4620      	mov	r0, r4
}
   1bb94:	b002      	add	sp, #8
   1bb96:	bd70      	pop	{r4, r5, r6, pc}
   1bb98:	200029c8 	.word	0x200029c8

0001bb9c <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
   1bb9c:	b538      	push	{r3, r4, r5, lr}
   1bb9e:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
   1bba2:	4604      	mov	r4, r0
   1bba4:	2b05      	cmp	r3, #5
   1bba6:	d814      	bhi.n	1bbd2 <smp_public_key_slave.part.0+0x36>
   1bba8:	e8df f003 	tbb	[pc, r3]
   1bbac:	030d3603 	.word	0x030d3603
   1bbb0:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1bbb2:	30c0      	adds	r0, #192	; 0xc0
   1bbb4:	2104      	movs	r1, #4
   1bbb6:	f00a f998 	bl	25eea <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1bbba:	4620      	mov	r0, r4
   1bbbc:	f7ff ffae 	bl	1bb1c <smp_send_pairing_confirm>
		if (err) {
   1bbc0:	2800      	cmp	r0, #0
   1bbc2:	d037      	beq.n	1bc34 <smp_public_key_slave.part.0+0x98>
}
   1bbc4:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1bbc6:	2104      	movs	r1, #4
   1bbc8:	f500 70cc 	add.w	r0, r0, #408	; 0x198
   1bbcc:	f003 fbf8 	bl	1f3c0 <bt_rand>
   1bbd0:	b108      	cbz	r0, 1bbd6 <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
   1bbd2:	2008      	movs	r0, #8
   1bbd4:	e7f6      	b.n	1bbc4 <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
   1bbd6:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
   1bbda:	4a1f      	ldr	r2, [pc, #124]	; (1bc58 <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
   1bbdc:	4d1f      	ldr	r5, [pc, #124]	; (1bc5c <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
   1bbde:	fbb1 f3f2 	udiv	r3, r1, r2
   1bbe2:	fb02 1313 	mls	r3, r2, r3, r1
   1bbe6:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
   1bbea:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   1bbec:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
   1bbf0:	b163      	cbz	r3, 1bc0c <smp_public_key_slave.part.0+0x70>
   1bbf2:	681b      	ldr	r3, [r3, #0]
   1bbf4:	b153      	cbz	r3, 1bc0c <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1bbf6:	210a      	movs	r1, #10
   1bbf8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1bbfc:	f00a f975 	bl	25eea <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1bc00:	682b      	ldr	r3, [r5, #0]
   1bc02:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
   1bc06:	681b      	ldr	r3, [r3, #0]
   1bc08:	6820      	ldr	r0, [r4, #0]
   1bc0a:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1bc0c:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1bc0e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1bc12:	f00a f96a 	bl	25eea <atomic_set_bit>
		break;
   1bc16:	e00d      	b.n	1bc34 <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1bc18:	2103      	movs	r1, #3
   1bc1a:	30c0      	adds	r0, #192	; 0xc0
   1bc1c:	f00a f965 	bl	25eea <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bc20:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1bc24:	2109      	movs	r1, #9
   1bc26:	f00a f960 	bl	25eea <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1bc2a:	4b0c      	ldr	r3, [pc, #48]	; (1bc5c <smp_public_key_slave.part.0+0xc0>)
   1bc2c:	6820      	ldr	r0, [r4, #0]
   1bc2e:	681b      	ldr	r3, [r3, #0]
   1bc30:	685b      	ldr	r3, [r3, #4]
   1bc32:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
   1bc34:	490a      	ldr	r1, [pc, #40]	; (1bc60 <smp_public_key_slave.part.0+0xc4>)
   1bc36:	f204 1017 	addw	r0, r4, #279	; 0x117
   1bc3a:	f7fc fb29 	bl	18290 <bt_dh_key_gen>
   1bc3e:	4605      	mov	r5, r0
   1bc40:	2800      	cmp	r0, #0
   1bc42:	d1c6      	bne.n	1bbd2 <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1bc44:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1bc48:	2107      	movs	r1, #7
   1bc4a:	f00a f94e 	bl	25eea <atomic_set_bit>
	return 0;
   1bc4e:	4628      	mov	r0, r5
   1bc50:	e7b8      	b.n	1bbc4 <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1bc52:	2104      	movs	r1, #4
   1bc54:	e7db      	b.n	1bc0e <smp_public_key_slave.part.0+0x72>
   1bc56:	bf00      	nop
   1bc58:	000f4240 	.word	0x000f4240
   1bc5c:	20002934 	.word	0x20002934
   1bc60:	0001c165 	.word	0x0001c165

0001bc64 <smp_ident_info>:
{
   1bc64:	b570      	push	{r4, r5, r6, lr}
   1bc66:	460b      	mov	r3, r1
   1bc68:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bc6a:	210c      	movs	r1, #12
   1bc6c:	30c4      	adds	r0, #196	; 0xc4
   1bc6e:	f00a fa12 	bl	26096 <atomic_test_bit>
   1bc72:	b1c0      	cbz	r0, 1bca6 <smp_ident_info+0x42>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1bc74:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1bc76:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1bc78:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1bc7c:	7a19      	ldrb	r1, [r3, #8]
   1bc7e:	462a      	mov	r2, r5
   1bc80:	2002      	movs	r0, #2
   1bc82:	f00a fc9c 	bl	265be <bt_keys_get_type>
		if (!keys) {
   1bc86:	b948      	cbnz	r0, 1bc9c <smp_ident_info+0x38>
			BT_ERR("Unable to get keys for %s",
   1bc88:	4628      	mov	r0, r5
   1bc8a:	f7fa f839 	bl	15d00 <bt_addr_le_str_real>
   1bc8e:	2145      	movs	r1, #69	; 0x45
   1bc90:	4602      	mov	r2, r0
   1bc92:	4808      	ldr	r0, [pc, #32]	; (1bcb4 <smp_ident_info+0x50>)
   1bc94:	f007 f84a 	bl	22d2c <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1bc98:	2008      	movs	r0, #8
}
   1bc9a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1bc9c:	2210      	movs	r2, #16
   1bc9e:	4631      	mov	r1, r6
   1bca0:	302a      	adds	r0, #42	; 0x2a
   1bca2:	f008 ff0f 	bl	24ac4 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1bca6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1bcaa:	2109      	movs	r1, #9
   1bcac:	f00a f91d 	bl	25eea <atomic_set_bit>
	return 0;
   1bcb0:	2000      	movs	r0, #0
   1bcb2:	e7f2      	b.n	1bc9a <smp_ident_info+0x36>
   1bcb4:	00029aea 	.word	0x00029aea

0001bcb8 <smp_encrypt_info>:
{
   1bcb8:	b570      	push	{r4, r5, r6, lr}
   1bcba:	460b      	mov	r3, r1
   1bcbc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bcbe:	210c      	movs	r1, #12
   1bcc0:	30c4      	adds	r0, #196	; 0xc4
   1bcc2:	f00a f9e8 	bl	26096 <atomic_test_bit>
   1bcc6:	b1c0      	cbz	r0, 1bcfa <smp_encrypt_info+0x42>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1bcc8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1bcca:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1bccc:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1bcd0:	7a19      	ldrb	r1, [r3, #8]
   1bcd2:	462a      	mov	r2, r5
   1bcd4:	2004      	movs	r0, #4
   1bcd6:	f00a fc72 	bl	265be <bt_keys_get_type>
		if (!keys) {
   1bcda:	b948      	cbnz	r0, 1bcf0 <smp_encrypt_info+0x38>
			BT_ERR("Unable to get keys for %s",
   1bcdc:	4628      	mov	r0, r5
   1bcde:	f7fa f80f 	bl	15d00 <bt_addr_le_str_real>
   1bce2:	2145      	movs	r1, #69	; 0x45
   1bce4:	4602      	mov	r2, r0
   1bce6:	4808      	ldr	r0, [pc, #32]	; (1bd08 <smp_encrypt_info+0x50>)
   1bce8:	f007 f820 	bl	22d2c <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1bcec:	2008      	movs	r0, #8
}
   1bcee:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1bcf0:	2210      	movs	r2, #16
   1bcf2:	4631      	mov	r1, r6
   1bcf4:	301a      	adds	r0, #26
   1bcf6:	f008 fee5 	bl	24ac4 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1bcfa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1bcfe:	2107      	movs	r1, #7
   1bd00:	f00a f8f3 	bl	25eea <atomic_set_bit>
	return 0;
   1bd04:	2000      	movs	r0, #0
   1bd06:	e7f2      	b.n	1bcee <smp_encrypt_info+0x36>
   1bd08:	00029aea 	.word	0x00029aea

0001bd0c <smp_pairing_req>:
{
   1bd0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   1bd10:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1bd12:	78eb      	ldrb	r3, [r5, #3]
   1bd14:	3b07      	subs	r3, #7
   1bd16:	2b09      	cmp	r3, #9
{
   1bd18:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1bd1a:	d904      	bls.n	1bd26 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1bd1c:	2506      	movs	r5, #6
}
   1bd1e:	4628      	mov	r0, r5
   1bd20:	b002      	add	sp, #8
   1bd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   1bd26:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
   1bd28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1bd2c:	b163      	cbz	r3, 1bd48 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1bd2e:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
   1bd32:	210e      	movs	r1, #14
   1bd34:	4630      	mov	r0, r6
   1bd36:	f00a f9ae 	bl	26096 <atomic_test_bit>
   1bd3a:	b980      	cbnz	r0, 1bd5e <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   1bd3c:	4620      	mov	r0, r4
   1bd3e:	f7ff fdb1 	bl	1b8a4 <smp_init>
		if (ret) {
   1bd42:	b160      	cbz	r0, 1bd5e <smp_pairing_req+0x52>
			return ret;
   1bd44:	b2c5      	uxtb	r5, r0
   1bd46:	e7ea      	b.n	1bd1e <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bd48:	7a38      	ldrb	r0, [r7, #8]
   1bd4a:	f107 0190 	add.w	r1, r7, #144	; 0x90
   1bd4e:	f000 ffa5 	bl	1cc9c <bt_keys_get_addr>
   1bd52:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
		if (!conn->le.keys) {
   1bd56:	2800      	cmp	r0, #0
   1bd58:	d1e9      	bne.n	1bd2e <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
   1bd5a:	2508      	movs	r5, #8
   1bd5c:	e7df      	b.n	1bd1e <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1bd5e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1bd60:	2206      	movs	r2, #6
   1bd62:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1bd64:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	memcpy(smp->preq + 1, req, sizeof(*req));
   1bd68:	f104 00ca 	add.w	r0, r4, #202	; 0xca
   1bd6c:	f008 feaa 	bl	24ac4 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1bd70:	2302      	movs	r3, #2
   1bd72:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
   1bd76:	78a8      	ldrb	r0, [r5, #2]
   1bd78:	f7ff fd52 	bl	1b820 <get_auth.isra.0>
   1bd7c:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
   1bd80:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   1bd82:	f7ff fd01 	bl	1b788 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1bd86:	4baf      	ldr	r3, [pc, #700]	; (1c044 <smp_pairing_req+0x338>)
	rsp->io_capability = get_io_capa();
   1bd88:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1bd8c:	781b      	ldrb	r3, [r3, #0]
   1bd8e:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1bd92:	2310      	movs	r3, #16
   1bd94:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1bd98:	792b      	ldrb	r3, [r5, #4]
   1bd9a:	f003 0303 	and.w	r3, r3, #3
   1bd9e:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1bda2:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1bda4:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1bda8:	f003 0301 	and.w	r3, r3, #1
   1bdac:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1bdb0:	d00f      	beq.n	1bdd2 <smp_pairing_req+0xc6>
   1bdb2:	78ab      	ldrb	r3, [r5, #2]
   1bdb4:	0719      	lsls	r1, r3, #28
   1bdb6:	d50c      	bpl.n	1bdd2 <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1bdb8:	2105      	movs	r1, #5
   1bdba:	4630      	mov	r0, r6
   1bdbc:	f00a f895 	bl	25eea <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1bdc0:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   1bdc4:	f003 0302 	and.w	r3, r3, #2
   1bdc8:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1bdcc:	2300      	movs	r3, #0
   1bdce:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1bdd2:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   1bdd6:	069a      	lsls	r2, r3, #26
   1bdd8:	d506      	bpl.n	1bde8 <smp_pairing_req+0xdc>
   1bdda:	78ab      	ldrb	r3, [r5, #2]
   1bddc:	069b      	lsls	r3, r3, #26
   1bdde:	d503      	bpl.n	1bde8 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1bde0:	2113      	movs	r1, #19
   1bde2:	4630      	mov	r0, r6
   1bde4:	f00a f881 	bl	25eea <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1bde8:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   1bdec:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
   1bdf0:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
   1bdf4:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1bdf8:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   1bdfc:	07d8      	lsls	r0, r3, #31
   1bdfe:	d506      	bpl.n	1be0e <smp_pairing_req+0x102>
   1be00:	78ab      	ldrb	r3, [r5, #2]
   1be02:	07d9      	lsls	r1, r3, #31
   1be04:	d503      	bpl.n	1be0e <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1be06:	210c      	movs	r1, #12
   1be08:	4630      	mov	r0, r6
   1be0a:	f00a f86e 	bl	25eea <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1be0e:	2103      	movs	r1, #3
   1be10:	4630      	mov	r0, r6
   1be12:	f00a f86a 	bl	25eea <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1be16:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1be18:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1be1a:	f00a f93c 	bl	26096 <atomic_test_bit>
   1be1e:	f8d4 8000 	ldr.w	r8, [r4]
   1be22:	2800      	cmp	r0, #0
   1be24:	d151      	bne.n	1beca <smp_pairing_req+0x1be>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1be26:	2d04      	cmp	r5, #4
   1be28:	d81d      	bhi.n	1be66 <smp_pairing_req+0x15a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1be2a:	f894 20d2 	ldrb.w	r2, [r4, #210]	; 0xd2
   1be2e:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   1be32:	4013      	ands	r3, r2
   1be34:	07da      	lsls	r2, r3, #31
   1be36:	d465      	bmi.n	1bf04 <smp_pairing_req+0x1f8>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1be38:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   1be3c:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
   1be40:	4318      	orrs	r0, r3
   1be42:	f010 0004 	ands.w	r0, r0, #4
   1be46:	d00e      	beq.n	1be66 <smp_pairing_req+0x15a>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1be48:	f7ff fc9e 	bl	1b788 <get_io_capa>
   1be4c:	4b7e      	ldr	r3, [pc, #504]	; (1c048 <smp_pairing_req+0x33c>)
   1be4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1be52:	441d      	add	r5, r3
   1be54:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1be56:	2804      	cmp	r0, #4
   1be58:	d105      	bne.n	1be66 <smp_pairing_req+0x15a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1be5a:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
   1be5e:	2b00      	cmp	r3, #0
   1be60:	bf0c      	ite	eq
   1be62:	2002      	moveq	r0, #2
   1be64:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1be66:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
	if (!conn->le.keys) {
   1be6a:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   1be6e:	b93b      	cbnz	r3, 1be80 <smp_pairing_req+0x174>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1be70:	f898 0008 	ldrb.w	r0, [r8, #8]
   1be74:	f108 0190 	add.w	r1, r8, #144	; 0x90
   1be78:	f000 ff10 	bl	1cc9c <bt_keys_get_addr>
   1be7c:	f8c8 00bc 	str.w	r0, [r8, #188]	; 0xbc
	if (!conn->le.keys ||
   1be80:	f8d8 20bc 	ldr.w	r2, [r8, #188]	; 0xbc
   1be84:	2a00      	cmp	r2, #0
   1be86:	d143      	bne.n	1bf10 <smp_pairing_req+0x204>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1be88:	2105      	movs	r1, #5
   1be8a:	4630      	mov	r0, r6
   1be8c:	f00a f903 	bl	26096 <atomic_test_bit>
   1be90:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1be94:	2800      	cmp	r0, #0
   1be96:	f040 80e3 	bne.w	1c060 <smp_pairing_req+0x354>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1be9a:	461d      	mov	r5, r3
   1be9c:	2b00      	cmp	r3, #0
   1be9e:	d155      	bne.n	1bf4c <smp_pairing_req+0x240>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1bea0:	210e      	movs	r1, #14
   1bea2:	4630      	mov	r0, r6
   1bea4:	f00a f8f7 	bl	26096 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1bea8:	2800      	cmp	r0, #0
   1beaa:	d14f      	bne.n	1bf4c <smp_pairing_req+0x240>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1beac:	4f67      	ldr	r7, [pc, #412]	; (1c04c <smp_pairing_req+0x340>)
   1beae:	683b      	ldr	r3, [r7, #0]
   1beb0:	2b00      	cmp	r3, #0
   1beb2:	d04b      	beq.n	1bf4c <smp_pairing_req+0x240>
	    bt_auth && bt_auth->pairing_confirm) {
   1beb4:	695b      	ldr	r3, [r3, #20]
   1beb6:	2b00      	cmp	r3, #0
   1beb8:	d048      	beq.n	1bf4c <smp_pairing_req+0x240>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1beba:	4630      	mov	r0, r6
   1bebc:	2109      	movs	r1, #9
   1bebe:	f00a f814 	bl	25eea <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1bec2:	683b      	ldr	r3, [r7, #0]
   1bec4:	6820      	ldr	r0, [r4, #0]
   1bec6:	695b      	ldr	r3, [r3, #20]
   1bec8:	e0b0      	b.n	1c02c <smp_pairing_req+0x320>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1beca:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
   1bece:	f894 20d3 	ldrb.w	r2, [r4, #211]	; 0xd3
   1bed2:	ea00 0302 	and.w	r3, r0, r2
   1bed6:	071b      	lsls	r3, r3, #28
   1bed8:	d506      	bpl.n	1bee8 <smp_pairing_req+0x1dc>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1beda:	f894 10d2 	ldrb.w	r1, [r4, #210]	; 0xd2
   1bede:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
   1bee2:	430b      	orrs	r3, r1
   1bee4:	07d9      	lsls	r1, r3, #31
   1bee6:	d40f      	bmi.n	1bf08 <smp_pairing_req+0x1fc>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1bee8:	2d04      	cmp	r5, #4
   1beea:	d80f      	bhi.n	1bf0c <smp_pairing_req+0x200>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1beec:	4310      	orrs	r0, r2
   1beee:	f010 0004 	ands.w	r0, r0, #4
   1bef2:	d0b8      	beq.n	1be66 <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa()];
   1bef4:	f7ff fc48 	bl	1b788 <get_io_capa>
   1bef8:	4b55      	ldr	r3, [pc, #340]	; (1c050 <smp_pairing_req+0x344>)
   1befa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1befe:	441d      	add	r5, r3
   1bf00:	5c28      	ldrb	r0, [r5, r0]
   1bf02:	e7b0      	b.n	1be66 <smp_pairing_req+0x15a>
		return LEGACY_OOB;
   1bf04:	2006      	movs	r0, #6
   1bf06:	e7ae      	b.n	1be66 <smp_pairing_req+0x15a>
			return LE_SC_OOB;
   1bf08:	2005      	movs	r0, #5
   1bf0a:	e7ac      	b.n	1be66 <smp_pairing_req+0x15a>
		return JUST_WORKS;
   1bf0c:	2000      	movs	r0, #0
   1bf0e:	e7aa      	b.n	1be66 <smp_pairing_req+0x15a>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1bf10:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
   1bf12:	f011 0f24 	tst.w	r1, #36	; 0x24
   1bf16:	d0b7      	beq.n	1be88 <smp_pairing_req+0x17c>
	return MIN(req->max_key_size, rsp->max_key_size);
   1bf18:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
   1bf1c:	f894 00cd 	ldrb.w	r0, [r4, #205]	; 0xcd
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
   1bf20:	7b12      	ldrb	r2, [r2, #12]
   1bf22:	4283      	cmp	r3, r0
   1bf24:	bf28      	it	cs
   1bf26:	4603      	movcs	r3, r0
   1bf28:	429a      	cmp	r2, r3
   1bf2a:	d901      	bls.n	1bf30 <smp_pairing_req+0x224>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1bf2c:	2503      	movs	r5, #3
   1bf2e:	e6f6      	b.n	1bd1e <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   1bf30:	068a      	lsls	r2, r1, #26
   1bf32:	d404      	bmi.n	1bf3e <smp_pairing_req+0x232>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   1bf34:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1bf38:	2b00      	cmp	r3, #0
   1bf3a:	d1a5      	bne.n	1be88 <smp_pairing_req+0x17c>
   1bf3c:	e7f6      	b.n	1bf2c <smp_pairing_req+0x220>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bf3e:	2105      	movs	r1, #5
   1bf40:	4630      	mov	r0, r6
   1bf42:	f00a f8a8 	bl	26096 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   1bf46:	2800      	cmp	r0, #0
   1bf48:	d1f4      	bne.n	1bf34 <smp_pairing_req+0x228>
   1bf4a:	e7ef      	b.n	1bf2c <smp_pairing_req+0x220>
	ret = send_pairing_rsp(smp);
   1bf4c:	4620      	mov	r0, r4
   1bf4e:	f00a f8e4 	bl	2611a <send_pairing_rsp>
	if (ret) {
   1bf52:	4605      	mov	r5, r0
   1bf54:	2800      	cmp	r0, #0
   1bf56:	f47f aee2 	bne.w	1bd1e <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1bf5a:	2103      	movs	r1, #3
   1bf5c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1bf60:	f009 ffc3 	bl	25eea <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1bf64:	6827      	ldr	r7, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1bf66:	7a38      	ldrb	r0, [r7, #8]
   1bf68:	f107 0190 	add.w	r1, r7, #144	; 0x90
   1bf6c:	f000 ff26 	bl	1cdbc <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1bf70:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   1bf74:	b140      	cbz	r0, 1bf88 <smp_pairing_req+0x27c>
   1bf76:	7b43      	ldrb	r3, [r0, #13]
   1bf78:	07db      	lsls	r3, r3, #31
   1bf7a:	d505      	bpl.n	1bf88 <smp_pairing_req+0x27c>
   1bf7c:	b922      	cbnz	r2, 1bf88 <smp_pairing_req+0x27c>
		BT_ERR("JustWorks failed, authenticated keys present");
   1bf7e:	4835      	ldr	r0, [pc, #212]	; (1c054 <smp_pairing_req+0x348>)
   1bf80:	2145      	movs	r1, #69	; 0x45
   1bf82:	f006 fed3 	bl	22d2c <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1bf86:	e6e8      	b.n	1bd5a <smp_pairing_req+0x4e>
	switch (smp->method) {
   1bf88:	2a06      	cmp	r2, #6
   1bf8a:	d851      	bhi.n	1c030 <smp_pairing_req+0x324>
   1bf8c:	e8df f002 	tbb	[pc, r2]
   1bf90:	50184655 	.word	0x50184655
   1bf94:	5050      	.short	0x5050
   1bf96:	04          	.byte	0x04
   1bf97:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1bf98:	4f2c      	ldr	r7, [pc, #176]	; (1c04c <smp_pairing_req+0x340>)
   1bf9a:	683b      	ldr	r3, [r7, #0]
   1bf9c:	2b00      	cmp	r3, #0
   1bf9e:	d04e      	beq.n	1c03e <smp_pairing_req+0x332>
   1bfa0:	68db      	ldr	r3, [r3, #12]
   1bfa2:	2b00      	cmp	r3, #0
   1bfa4:	d04b      	beq.n	1c03e <smp_pairing_req+0x332>
			struct bt_conn_oob_info info = {
   1bfa6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bfa8:	4630      	mov	r0, r6
   1bfaa:	2109      	movs	r1, #9
			struct bt_conn_oob_info info = {
   1bfac:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bfb0:	f009 ff9b 	bl	25eea <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1bfb4:	683b      	ldr	r3, [r7, #0]
   1bfb6:	6820      	ldr	r0, [r4, #0]
   1bfb8:	68db      	ldr	r3, [r3, #12]
   1bfba:	a901      	add	r1, sp, #4
   1bfbc:	4798      	blx	r3
		break;
   1bfbe:	e6ae      	b.n	1bd1e <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1bfc0:	2104      	movs	r1, #4
   1bfc2:	eb0d 0001 	add.w	r0, sp, r1
   1bfc6:	f003 f9fb 	bl	1f3c0 <bt_rand>
   1bfca:	2800      	cmp	r0, #0
   1bfcc:	f47f aec5 	bne.w	1bd5a <smp_pairing_req+0x4e>
			passkey %= 1000000;
   1bfd0:	9901      	ldr	r1, [sp, #4]
   1bfd2:	4a21      	ldr	r2, [pc, #132]	; (1c058 <smp_pairing_req+0x34c>)
		if (bt_auth && bt_auth->passkey_display) {
   1bfd4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1c04c <smp_pairing_req+0x340>
			passkey %= 1000000;
   1bfd8:	fbb1 f3f2 	udiv	r3, r1, r2
   1bfdc:	fb02 1313 	mls	r3, r2, r3, r1
   1bfe0:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1bfe2:	f8d8 3000 	ldr.w	r3, [r8]
   1bfe6:	b15b      	cbz	r3, 1c000 <smp_pairing_req+0x2f4>
   1bfe8:	681b      	ldr	r3, [r3, #0]
   1bfea:	b14b      	cbz	r3, 1c000 <smp_pairing_req+0x2f4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1bfec:	210a      	movs	r1, #10
   1bfee:	4630      	mov	r0, r6
   1bff0:	f009 ff7b 	bl	25eea <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1bff4:	f8d8 3000 	ldr.w	r3, [r8]
   1bff8:	9901      	ldr	r1, [sp, #4]
   1bffa:	681b      	ldr	r3, [r3, #0]
   1bffc:	4638      	mov	r0, r7
   1bffe:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1c000:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1c002:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	dst[1] = val >> 8;
   1c006:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1c00a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1c00c:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	dst[1] = val >> 8;
   1c010:	0a1b      	lsrs	r3, r3, #8
   1c012:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1c016:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
}
   1c01a:	e680      	b.n	1bd1e <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c01c:	4630      	mov	r0, r6
   1c01e:	2109      	movs	r1, #9
   1c020:	f009 ff63 	bl	25eea <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1c024:	4b09      	ldr	r3, [pc, #36]	; (1c04c <smp_pairing_req+0x340>)
   1c026:	681b      	ldr	r3, [r3, #0]
   1c028:	685b      	ldr	r3, [r3, #4]
   1c02a:	4638      	mov	r0, r7
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1c02c:	4798      	blx	r3
		return 0;
   1c02e:	e676      	b.n	1bd1e <smp_pairing_req+0x12>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c030:	480a      	ldr	r0, [pc, #40]	; (1c05c <smp_pairing_req+0x350>)
   1c032:	2145      	movs	r1, #69	; 0x45
   1c034:	f006 fe7a 	bl	22d2c <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1c038:	e68f      	b.n	1bd5a <smp_pairing_req+0x4e>
	switch (smp->method) {
   1c03a:	4615      	mov	r5, r2
   1c03c:	e66f      	b.n	1bd1e <smp_pairing_req+0x12>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c03e:	2502      	movs	r5, #2
   1c040:	e66d      	b.n	1bd1e <smp_pairing_req+0x12>
   1c042:	bf00      	nop
   1c044:	2000310f 	.word	0x2000310f
   1c048:	00029d33 	.word	0x00029d33
   1c04c:	20002934 	.word	0x20002934
   1c050:	00029d4c 	.word	0x00029d4c
   1c054:	00029b09 	.word	0x00029b09
   1c058:	000f4240 	.word	0x000f4240
   1c05c:	00029b3b 	.word	0x00029b3b
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
   1c060:	7aba      	ldrb	r2, [r7, #10]
   1c062:	2a04      	cmp	r2, #4
   1c064:	461d      	mov	r5, r3
   1c066:	d116      	bne.n	1c096 <smp_pairing_req+0x38a>
	     conn->required_sec_level == BT_SECURITY_L4) &&
   1c068:	2b00      	cmp	r3, #0
   1c06a:	f43f af5f 	beq.w	1bf2c <smp_pairing_req+0x220>
	return MIN(req->max_key_size, rsp->max_key_size);
   1c06e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
   1c072:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
	     conn->required_sec_level == BT_SECURITY_L4) &&
   1c076:	4293      	cmp	r3, r2
   1c078:	bf28      	it	cs
   1c07a:	4613      	movcs	r3, r2
   1c07c:	2b10      	cmp	r3, #16
   1c07e:	f47f ae4d 	bne.w	1bd1c <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1c082:	210c      	movs	r1, #12
   1c084:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c088:	f009 ff2f 	bl	25eea <atomic_set_bit>
	return send_pairing_rsp(smp);
   1c08c:	4620      	mov	r0, r4
   1c08e:	f00a f844 	bl	2611a <send_pairing_rsp>
   1c092:	4605      	mov	r5, r0
   1c094:	e643      	b.n	1bd1e <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1c096:	2b00      	cmp	r3, #0
   1c098:	d1f3      	bne.n	1c082 <smp_pairing_req+0x376>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1c09a:	210e      	movs	r1, #14
   1c09c:	4630      	mov	r0, r6
   1c09e:	f009 fffa 	bl	26096 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1c0a2:	2800      	cmp	r0, #0
   1c0a4:	d1ed      	bne.n	1c082 <smp_pairing_req+0x376>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1c0a6:	4f04      	ldr	r7, [pc, #16]	; (1c0b8 <smp_pairing_req+0x3ac>)
   1c0a8:	683b      	ldr	r3, [r7, #0]
   1c0aa:	2b00      	cmp	r3, #0
   1c0ac:	d0e9      	beq.n	1c082 <smp_pairing_req+0x376>
	    bt_auth && bt_auth->pairing_confirm) {
   1c0ae:	695b      	ldr	r3, [r3, #20]
   1c0b0:	2b00      	cmp	r3, #0
   1c0b2:	d0e6      	beq.n	1c082 <smp_pairing_req+0x376>
   1c0b4:	e701      	b.n	1beba <smp_pairing_req+0x1ae>
   1c0b6:	bf00      	nop
   1c0b8:	20002934 	.word	0x20002934

0001c0bc <smp_pairing_complete>:
{
   1c0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0c0:	4f26      	ldr	r7, [pc, #152]	; (1c15c <smp_pairing_complete+0xa0>)
   1c0c2:	4604      	mov	r4, r0
   1c0c4:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
	if (!status) {
   1c0c8:	460d      	mov	r5, r1
   1c0ca:	b9b1      	cbnz	r1, 1c0fa <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1c0cc:	210c      	movs	r1, #12
   1c0ce:	4640      	mov	r0, r8
   1c0d0:	f009 ffe1 	bl	26096 <atomic_test_bit>
		if (bond_flag) {
   1c0d4:	4605      	mov	r5, r0
   1c0d6:	b120      	cbz	r0, 1c0e2 <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
   1c0d8:	6823      	ldr	r3, [r4, #0]
   1c0da:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
   1c0de:	f000 ff17 	bl	1cf10 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   1c0e2:	683b      	ldr	r3, [r7, #0]
   1c0e4:	b123      	cbz	r3, 1c0f0 <smp_pairing_complete+0x34>
   1c0e6:	699b      	ldr	r3, [r3, #24]
   1c0e8:	b113      	cbz	r3, 1c0f0 <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
   1c0ea:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   1c0ec:	6820      	ldr	r0, [r4, #0]
   1c0ee:	4798      	blx	r3
	smp_reset(smp);
   1c0f0:	4620      	mov	r0, r4
}
   1c0f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
   1c0f6:	f00a b86a 	b.w	261ce <smp_reset>
	switch (smp_err) {
   1c0fa:	1e4b      	subs	r3, r1, #1
   1c0fc:	b2db      	uxtb	r3, r3
   1c0fe:	2b0d      	cmp	r3, #13
   1c100:	bf9c      	itt	ls
   1c102:	4a17      	ldrls	r2, [pc, #92]	; (1c160 <smp_pairing_complete+0xa4>)
   1c104:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
   1c106:	6803      	ldr	r3, [r0, #0]
   1c108:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
	if (!status) {
   1c10c:	bf88      	it	hi
   1c10e:	2608      	movhi	r6, #8
		if (smp->chan.chan.conn->le.keys &&
   1c110:	b153      	cbz	r3, 1c128 <smp_pairing_complete+0x6c>
   1c112:	7b1b      	ldrb	r3, [r3, #12]
   1c114:	b9d3      	cbnz	r3, 1c14c <smp_pairing_complete+0x90>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
   1c116:	6823      	ldr	r3, [r4, #0]
   1c118:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
   1c11c:	f000 fe5e 	bl	1cddc <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
   1c120:	6823      	ldr	r3, [r4, #0]
   1c122:	2200      	movs	r2, #0
   1c124:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c128:	2102      	movs	r1, #2
   1c12a:	4640      	mov	r0, r8
   1c12c:	f009 ffb3 	bl	26096 <atomic_test_bit>
   1c130:	b920      	cbnz	r0, 1c13c <smp_pairing_complete+0x80>
			bt_conn_security_changed(smp->chan.chan.conn, status,
   1c132:	6820      	ldr	r0, [r4, #0]
   1c134:	4632      	mov	r2, r6
   1c136:	4629      	mov	r1, r5
   1c138:	f7fc fa1a 	bl	18570 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   1c13c:	683b      	ldr	r3, [r7, #0]
   1c13e:	2b00      	cmp	r3, #0
   1c140:	d0d6      	beq.n	1c0f0 <smp_pairing_complete+0x34>
   1c142:	69db      	ldr	r3, [r3, #28]
   1c144:	2b00      	cmp	r3, #0
   1c146:	d0d3      	beq.n	1c0f0 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
   1c148:	4631      	mov	r1, r6
   1c14a:	e7cf      	b.n	1c0ec <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1c14c:	2102      	movs	r1, #2
   1c14e:	4640      	mov	r0, r8
   1c150:	f009 ffa1 	bl	26096 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
   1c154:	2800      	cmp	r0, #0
   1c156:	d1de      	bne.n	1c116 <smp_pairing_complete+0x5a>
   1c158:	e7e6      	b.n	1c128 <smp_pairing_complete+0x6c>
   1c15a:	bf00      	nop
   1c15c:	20002934 	.word	0x20002934
   1c160:	00029d25 	.word	0x00029d25

0001c164 <bt_smp_dhkey_ready>:
{
   1c164:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
   1c166:	2107      	movs	r1, #7
{
   1c168:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
   1c16a:	4816      	ldr	r0, [pc, #88]	; (1c1c4 <bt_smp_dhkey_ready+0x60>)
   1c16c:	f00a f817 	bl	2619e <atomic_test_and_clear_bit>
   1c170:	b338      	cbz	r0, 1c1c2 <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
   1c172:	b92c      	cbnz	r4, 1c180 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
   1c174:	210b      	movs	r1, #11
}
   1c176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1c17a:	4813      	ldr	r0, [pc, #76]	; (1c1c8 <bt_smp_dhkey_ready+0x64>)
   1c17c:	f00a b852 	b.w	26224 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
   1c180:	4621      	mov	r1, r4
   1c182:	4812      	ldr	r0, [pc, #72]	; (1c1cc <bt_smp_dhkey_ready+0x68>)
   1c184:	2220      	movs	r2, #32
   1c186:	f008 fc9d 	bl	24ac4 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1c18a:	480e      	ldr	r0, [pc, #56]	; (1c1c4 <bt_smp_dhkey_ready+0x60>)
   1c18c:	2109      	movs	r1, #9
   1c18e:	f009 ff82 	bl	26096 <atomic_test_bit>
   1c192:	b128      	cbz	r0, 1c1a0 <bt_smp_dhkey_ready+0x3c>
}
   1c194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1c198:	480a      	ldr	r0, [pc, #40]	; (1c1c4 <bt_smp_dhkey_ready+0x60>)
   1c19a:	2108      	movs	r1, #8
   1c19c:	f009 bea5 	b.w	25eea <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1c1a0:	4808      	ldr	r0, [pc, #32]	; (1c1c4 <bt_smp_dhkey_ready+0x60>)
   1c1a2:	210f      	movs	r1, #15
   1c1a4:	f009 ff77 	bl	26096 <atomic_test_bit>
   1c1a8:	2800      	cmp	r0, #0
   1c1aa:	d1f3      	bne.n	1c194 <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1c1ac:	4805      	ldr	r0, [pc, #20]	; (1c1c4 <bt_smp_dhkey_ready+0x60>)
   1c1ae:	2108      	movs	r1, #8
   1c1b0:	f009 ff71 	bl	26096 <atomic_test_bit>
   1c1b4:	b128      	cbz	r0, 1c1c2 <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
   1c1b6:	4804      	ldr	r0, [pc, #16]	; (1c1c8 <bt_smp_dhkey_ready+0x64>)
   1c1b8:	f7ff fbaa 	bl	1b910 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   1c1bc:	4601      	mov	r1, r0
   1c1be:	2800      	cmp	r0, #0
   1c1c0:	d1d9      	bne.n	1c176 <bt_smp_dhkey_ready+0x12>
}
   1c1c2:	bd10      	pop	{r4, pc}
   1c1c4:	2000233c 	.word	0x2000233c
   1c1c8:	20002278 	.word	0x20002278
   1c1cc:	200023cf 	.word	0x200023cf

0001c1d0 <bt_smp_recv>:
{
   1c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1c1d2:	898b      	ldrh	r3, [r1, #12]
{
   1c1d4:	4604      	mov	r4, r0
   1c1d6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1c1d8:	b92b      	cbnz	r3, 1c1e6 <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1c1da:	4826      	ldr	r0, [pc, #152]	; (1c274 <bt_smp_recv+0xa4>)
   1c1dc:	2145      	movs	r1, #69	; 0x45
   1c1de:	f006 fda5 	bl	22d2c <printk>
}
   1c1e2:	2000      	movs	r0, #0
   1c1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1c1e6:	2101      	movs	r1, #1
   1c1e8:	f105 0008 	add.w	r0, r5, #8
   1c1ec:	f001 f930 	bl	1d450 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c1f0:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1c1f2:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c1f4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1c1f8:	f009 ff4d 	bl	26096 <atomic_test_bit>
   1c1fc:	7832      	ldrb	r2, [r6, #0]
   1c1fe:	b120      	cbz	r0, 1c20a <bt_smp_recv+0x3a>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1c200:	481d      	ldr	r0, [pc, #116]	; (1c278 <bt_smp_recv+0xa8>)
   1c202:	2157      	movs	r1, #87	; 0x57
   1c204:	f006 fd92 	bl	22d2c <printk>
		return 0;
   1c208:	e7eb      	b.n	1c1e2 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
   1c20a:	2a0d      	cmp	r2, #13
   1c20c:	d803      	bhi.n	1c216 <bt_smp_recv+0x46>
   1c20e:	4f1b      	ldr	r7, [pc, #108]	; (1c27c <bt_smp_recv+0xac>)
   1c210:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1c214:	b943      	cbnz	r3, 1c228 <bt_smp_recv+0x58>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1c216:	2157      	movs	r1, #87	; 0x57
   1c218:	4819      	ldr	r0, [pc, #100]	; (1c280 <bt_smp_recv+0xb0>)
   1c21a:	f006 fd87 	bl	22d2c <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1c21e:	2107      	movs	r1, #7
		smp_error(smp, err);
   1c220:	4620      	mov	r0, r4
   1c222:	f009 ffff 	bl	26224 <smp_error>
   1c226:	e7dc      	b.n	1c1e2 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
   1c228:	4611      	mov	r1, r2
   1c22a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c22e:	f009 ffb6 	bl	2619e <atomic_test_and_clear_bit>
   1c232:	7833      	ldrb	r3, [r6, #0]
   1c234:	b948      	cbnz	r0, 1c24a <bt_smp_recv+0x7a>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1c236:	461a      	mov	r2, r3
   1c238:	4812      	ldr	r0, [pc, #72]	; (1c284 <bt_smp_recv+0xb4>)
   1c23a:	2157      	movs	r1, #87	; 0x57
   1c23c:	f006 fd76 	bl	22d2c <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1c240:	7833      	ldrb	r3, [r6, #0]
   1c242:	2b05      	cmp	r3, #5
   1c244:	d0cd      	beq.n	1c1e2 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c246:	2108      	movs	r1, #8
   1c248:	e7ea      	b.n	1c220 <bt_smp_recv+0x50>
	if (buf->len != handlers[hdr->code].expect_len) {
   1c24a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1c24e:	89aa      	ldrh	r2, [r5, #12]
   1c250:	7909      	ldrb	r1, [r1, #4]
   1c252:	4291      	cmp	r1, r2
   1c254:	d005      	beq.n	1c262 <bt_smp_recv+0x92>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c256:	2145      	movs	r1, #69	; 0x45
   1c258:	480b      	ldr	r0, [pc, #44]	; (1c288 <bt_smp_recv+0xb8>)
   1c25a:	f006 fd67 	bl	22d2c <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1c25e:	210a      	movs	r1, #10
   1c260:	e7de      	b.n	1c220 <bt_smp_recv+0x50>
	err = handlers[hdr->code].func(smp, buf);
   1c262:	4629      	mov	r1, r5
   1c264:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1c268:	4620      	mov	r0, r4
   1c26a:	4798      	blx	r3
	if (err) {
   1c26c:	4601      	mov	r1, r0
   1c26e:	2800      	cmp	r0, #0
   1c270:	d0b7      	beq.n	1c1e2 <bt_smp_recv+0x12>
   1c272:	e7d5      	b.n	1c220 <bt_smp_recv+0x50>
   1c274:	00029b5c 	.word	0x00029b5c
   1c278:	00029b7c 	.word	0x00029b7c
   1c27c:	000277e0 	.word	0x000277e0
   1c280:	00029bb2 	.word	0x00029bb2
   1c284:	00029bd1 	.word	0x00029bd1
   1c288:	000296d2 	.word	0x000296d2

0001c28c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1c28c:	4b12      	ldr	r3, [pc, #72]	; (1c2d8 <bt_smp_pkey_ready+0x4c>)
{
   1c28e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1c290:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1c292:	b928      	cbnz	r0, 1c2a0 <bt_smp_pkey_ready+0x14>
}
   1c294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1c298:	4810      	ldr	r0, [pc, #64]	; (1c2dc <bt_smp_pkey_ready+0x50>)
   1c29a:	2157      	movs	r1, #87	; 0x57
   1c29c:	f006 bd46 	b.w	22d2c <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c2a0:	4c0f      	ldr	r4, [pc, #60]	; (1c2e0 <bt_smp_pkey_ready+0x54>)
   1c2a2:	4810      	ldr	r0, [pc, #64]	; (1c2e4 <bt_smp_pkey_ready+0x58>)
   1c2a4:	f005 fba4 	bl	219f0 <z_impl_k_sem_give>
   1c2a8:	f3bf 8f5b 	dmb	ish
   1c2ac:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1c2b0:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1c2b4:	065b      	lsls	r3, r3, #25
   1c2b6:	d50e      	bpl.n	1c2d6 <bt_smp_pkey_ready+0x4a>
	err = sc_send_public_key(smp);
   1c2b8:	4620      	mov	r0, r4
   1c2ba:	f7ff fc0d 	bl	1bad8 <sc_send_public_key>
	if (err) {
   1c2be:	4601      	mov	r1, r0
   1c2c0:	b920      	cbnz	r0, 1c2cc <bt_smp_pkey_ready+0x40>
   1c2c2:	4620      	mov	r0, r4
   1c2c4:	f7ff fc6a 	bl	1bb9c <smp_public_key_slave.part.0>
		if (err) {
   1c2c8:	4601      	mov	r1, r0
   1c2ca:	b120      	cbz	r0, 1c2d6 <bt_smp_pkey_ready+0x4a>
}
   1c2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1c2d0:	4803      	ldr	r0, [pc, #12]	; (1c2e0 <bt_smp_pkey_ready+0x54>)
   1c2d2:	f009 bfa7 	b.w	26224 <smp_error>
}
   1c2d6:	bd10      	pop	{r4, pc}
   1c2d8:	200029c8 	.word	0x200029c8
   1c2dc:	00029bf1 	.word	0x00029bf1
   1c2e0:	20002278 	.word	0x20002278
   1c2e4:	200008a8 	.word	0x200008a8

0001c2e8 <smp_pairing_failed>:
{
   1c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c2ea:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1c2ec:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c2ee:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
   1c2f2:	7832      	ldrb	r2, [r6, #0]
   1c2f4:	2145      	movs	r1, #69	; 0x45
{
   1c2f6:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1c2f8:	480e      	ldr	r0, [pc, #56]	; (1c334 <smp_pairing_failed+0x4c>)
   1c2fa:	f006 fd17 	bl	22d2c <printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c2fe:	2109      	movs	r1, #9
   1c300:	4628      	mov	r0, r5
   1c302:	f009 ff4c 	bl	2619e <atomic_test_and_clear_bit>
   1c306:	b140      	cbz	r0, 1c31a <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1c308:	4b0b      	ldr	r3, [pc, #44]	; (1c338 <smp_pairing_failed+0x50>)
   1c30a:	681b      	ldr	r3, [r3, #0]
   1c30c:	b963      	cbnz	r3, 1c328 <smp_pairing_failed+0x40>
	smp_pairing_complete(smp, req->reason);
   1c30e:	4620      	mov	r0, r4
   1c310:	7831      	ldrb	r1, [r6, #0]
   1c312:	f7ff fed3 	bl	1c0bc <smp_pairing_complete>
}
   1c316:	2000      	movs	r0, #0
   1c318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1c31a:	210a      	movs	r1, #10
   1c31c:	4628      	mov	r0, r5
   1c31e:	f009 ff3e 	bl	2619e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c322:	2800      	cmp	r0, #0
   1c324:	d1f0      	bne.n	1c308 <smp_pairing_failed+0x20>
   1c326:	e7f2      	b.n	1c30e <smp_pairing_failed+0x26>
		if (bt_auth && bt_auth->cancel) {
   1c328:	691b      	ldr	r3, [r3, #16]
   1c32a:	2b00      	cmp	r3, #0
   1c32c:	d0ef      	beq.n	1c30e <smp_pairing_failed+0x26>
			bt_auth->cancel(conn);
   1c32e:	4638      	mov	r0, r7
   1c330:	4798      	blx	r3
   1c332:	e7ec      	b.n	1c30e <smp_pairing_failed+0x26>
   1c334:	00029c0f 	.word	0x00029c0f
   1c338:	20002934 	.word	0x20002934

0001c33c <smp_timeout>:
{
   1c33c:	b510      	push	{r4, lr}
	BT_ERR("SMP Timeout");
   1c33e:	2145      	movs	r1, #69	; 0x45
{
   1c340:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1c342:	4807      	ldr	r0, [pc, #28]	; (1c360 <smp_timeout+0x24>)
   1c344:	f006 fcf2 	bl	22d2c <printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1c348:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
   1c34c:	2108      	movs	r1, #8
   1c34e:	f7ff feb5 	bl	1c0bc <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1c352:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   1c356:	2104      	movs	r1, #4
}
   1c358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1c35c:	f009 bdc5 	b.w	25eea <atomic_set_bit>
   1c360:	00029c20 	.word	0x00029c20

0001c364 <smp_master_ident>:
{
   1c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c366:	4604      	mov	r4, r0
   1c368:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1c36a:	f850 5bc4 	ldr.w	r5, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c36e:	210c      	movs	r1, #12
   1c370:	f009 fe91 	bl	26096 <atomic_test_bit>
   1c374:	b320      	cbz	r0, 1c3c0 <smp_master_ident+0x5c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c376:	f105 0790 	add.w	r7, r5, #144	; 0x90
   1c37a:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1c37c:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c37e:	463a      	mov	r2, r7
   1c380:	2004      	movs	r0, #4
   1c382:	f00a f91c 	bl	265be <bt_keys_get_type>
		if (!keys) {
   1c386:	4605      	mov	r5, r0
   1c388:	b948      	cbnz	r0, 1c39e <smp_master_ident+0x3a>
			BT_ERR("Unable to get keys for %s",
   1c38a:	4638      	mov	r0, r7
   1c38c:	f7f9 fcb8 	bl	15d00 <bt_addr_le_str_real>
   1c390:	2145      	movs	r1, #69	; 0x45
   1c392:	4602      	mov	r2, r0
   1c394:	4815      	ldr	r0, [pc, #84]	; (1c3ec <smp_master_ident+0x88>)
   1c396:	f006 fcc9 	bl	22d2c <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c39a:	2008      	movs	r0, #8
}
   1c39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1c39e:	2202      	movs	r2, #2
   1c3a0:	4631      	mov	r1, r6
   1c3a2:	3018      	adds	r0, #24
   1c3a4:	f008 fb8e 	bl	24ac4 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1c3a8:	2208      	movs	r2, #8
   1c3aa:	1cb1      	adds	r1, r6, #2
   1c3ac:	f105 0010 	add.w	r0, r5, #16
   1c3b0:	f008 fb88 	bl	24ac4 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1c3b4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1c3b8:	f023 0301 	bic.w	r3, r3, #1
   1c3bc:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c3c0:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1c3c4:	079a      	lsls	r2, r3, #30
   1c3c6:	d50d      	bpl.n	1c3e4 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1c3c8:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c3ca:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c3ce:	f009 fd8c 	bl	25eea <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c3d2:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
   1c3d6:	b91d      	cbnz	r5, 1c3e0 <smp_master_ident+0x7c>
		smp_pairing_complete(smp, 0);
   1c3d8:	4629      	mov	r1, r5
   1c3da:	4620      	mov	r0, r4
   1c3dc:	f7ff fe6e 	bl	1c0bc <smp_pairing_complete>
	return 0;
   1c3e0:	2000      	movs	r0, #0
   1c3e2:	e7db      	b.n	1c39c <smp_master_ident+0x38>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c3e4:	075b      	lsls	r3, r3, #29
   1c3e6:	d5f4      	bpl.n	1c3d2 <smp_master_ident+0x6e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c3e8:	210a      	movs	r1, #10
   1c3ea:	e7ee      	b.n	1c3ca <smp_master_ident+0x66>
   1c3ec:	00029aea 	.word	0x00029aea

0001c3f0 <smp_ident_sent>:
{
   1c3f0:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1c3f2:	7883      	ldrb	r3, [r0, #2]
   1c3f4:	2b01      	cmp	r3, #1
   1c3f6:	d11d      	bne.n	1c434 <smp_ident_sent+0x44>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1c3f8:	2106      	movs	r1, #6
   1c3fa:	f008 ffed 	bl	253d8 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1c3fe:	4604      	mov	r4, r0
   1c400:	b950      	cbnz	r0, 1c418 <smp_ident_sent+0x28>
   1c402:	490d      	ldr	r1, [pc, #52]	; (1c438 <smp_ident_sent+0x48>)
   1c404:	480d      	ldr	r0, [pc, #52]	; (1c43c <smp_ident_sent+0x4c>)
   1c406:	f240 3237 	movw	r2, #823	; 0x337
   1c40a:	f006 fc8f 	bl	22d2c <printk>
   1c40e:	480a      	ldr	r0, [pc, #40]	; (1c438 <smp_ident_sent+0x48>)
   1c410:	f240 3137 	movw	r1, #823	; 0x337
   1c414:	f006 feed 	bl	231f2 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1c418:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   1c41c:	f023 0301 	bic.w	r3, r3, #1
   1c420:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   1c424:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   1c428:	b921      	cbnz	r1, 1c434 <smp_ident_sent+0x44>
			smp_pairing_complete(smp, 0);
   1c42a:	4620      	mov	r0, r4
}
   1c42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1c430:	f7ff be44 	b.w	1c0bc <smp_pairing_complete>
}
   1c434:	bd10      	pop	{r4, pc}
   1c436:	bf00      	nop
   1c438:	00029c31 	.word	0x00029c31
   1c43c:	00027c9a 	.word	0x00027c9a

0001c440 <bt_smp_encrypt_change>:
{
   1c440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
   1c444:	4605      	mov	r5, r0
{
   1c446:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   1c448:	f855 7bc4 	ldr.w	r7, [r5], #196
{
   1c44c:	b089      	sub	sp, #36	; 0x24
   1c44e:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c450:	2101      	movs	r1, #1
   1c452:	4628      	mov	r0, r5
   1c454:	f009 fd57 	bl	25f06 <atomic_clear_bit>
	if (hci_status) {
   1c458:	b946      	cbnz	r6, 1c46c <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
   1c45a:	7afb      	ldrb	r3, [r7, #11]
   1c45c:	b133      	cbz	r3, 1c46c <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c45e:	2103      	movs	r1, #3
   1c460:	f009 fe19 	bl	26096 <atomic_test_bit>
   1c464:	b928      	cbnz	r0, 1c472 <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
   1c466:	4620      	mov	r0, r4
   1c468:	f009 feb1 	bl	261ce <smp_reset>
}
   1c46c:	b009      	add	sp, #36	; 0x24
   1c46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c472:	2105      	movs	r1, #5
   1c474:	4628      	mov	r0, r5
   1c476:	f009 fe0e 	bl	26096 <atomic_test_bit>
   1c47a:	b198      	cbz	r0, 1c4a4 <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1c47c:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   1c480:	071f      	lsls	r7, r3, #28
   1c482:	d507      	bpl.n	1c494 <bt_smp_encrypt_change+0x54>
   1c484:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1c488:	071e      	lsls	r6, r3, #28
   1c48a:	d503      	bpl.n	1c494 <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1c48c:	2110      	movs	r1, #16
   1c48e:	4628      	mov	r0, r5
   1c490:	f009 fd2b 	bl	25eea <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1c494:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   1c498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1c49c:	f023 0308 	bic.w	r3, r3, #8
   1c4a0:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1c4a4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1c4a8:	07d8      	lsls	r0, r3, #31
   1c4aa:	d515      	bpl.n	1c4d8 <bt_smp_encrypt_change+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1c4ac:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c4ae:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c4b2:	f009 fd1a 	bl	25eea <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1c4b6:	4628      	mov	r0, r5
   1c4b8:	2102      	movs	r1, #2
   1c4ba:	f009 fd16 	bl	25eea <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c4be:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
   1c4c0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1c4c4:	b983      	cbnz	r3, 1c4e8 <bt_smp_encrypt_change+0xa8>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1c4c6:	3090      	adds	r0, #144	; 0x90
   1c4c8:	f7f9 fc1a 	bl	15d00 <bt_addr_le_str_real>
   1c4cc:	2145      	movs	r1, #69	; 0x45
   1c4ce:	4602      	mov	r2, r0
   1c4d0:	483f      	ldr	r0, [pc, #252]	; (1c5d0 <bt_smp_encrypt_change+0x190>)
   1c4d2:	f006 fc2b 	bl	22d2c <printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1c4d6:	e7c9      	b.n	1c46c <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c4d8:	0799      	lsls	r1, r3, #30
   1c4da:	d501      	bpl.n	1c4e0 <bt_smp_encrypt_change+0xa0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1c4dc:	2108      	movs	r1, #8
   1c4de:	e7e6      	b.n	1c4ae <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c4e0:	075a      	lsls	r2, r3, #29
   1c4e2:	d5e8      	bpl.n	1c4b6 <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c4e4:	210a      	movs	r1, #10
   1c4e6:	e7e2      	b.n	1c4ae <bt_smp_encrypt_change+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c4e8:	2105      	movs	r1, #5
   1c4ea:	4628      	mov	r0, r5
   1c4ec:	f009 fdd3 	bl	26096 <atomic_test_bit>
   1c4f0:	4680      	mov	r8, r0
   1c4f2:	b9a0      	cbnz	r0, 1c51e <bt_smp_encrypt_change+0xde>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1c4f4:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   1c4f8:	07db      	lsls	r3, r3, #31
   1c4fa:	d510      	bpl.n	1c51e <bt_smp_encrypt_change+0xde>
	struct bt_keys *keys = conn->le.keys;
   1c4fc:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
   1c4fe:	211a      	movs	r1, #26
   1c500:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1c502:	f8d3 60bc 	ldr.w	r6, [r3, #188]	; 0xbc
		bt_rand((void *)&rand, sizeof(rand));
   1c506:	f002 ff5b 	bl	1f3c0 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1c50a:	2106      	movs	r1, #6
   1c50c:	4620      	mov	r0, r4
   1c50e:	f009 fdcb 	bl	260a8 <smp_create_pdu.isra.0>
		if (!buf) {
   1c512:	4607      	mov	r7, r0
   1c514:	b958      	cbnz	r0, 1c52e <bt_smp_encrypt_change+0xee>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1c516:	482f      	ldr	r0, [pc, #188]	; (1c5d4 <bt_smp_encrypt_change+0x194>)
   1c518:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate Master Ident buffer");
   1c51a:	f006 fc07 	bl	22d2c <printk>
	if (!smp->local_dist && !smp->remote_dist) {
   1c51e:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   1c522:	2900      	cmp	r1, #0
   1c524:	d1a2      	bne.n	1c46c <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
   1c526:	4620      	mov	r0, r4
   1c528:	f7ff fdc8 	bl	1c0bc <smp_pairing_complete>
   1c52c:	e79e      	b.n	1c46c <bt_smp_encrypt_change+0x2c>
		info = net_buf_add(buf, sizeof(*info));
   1c52e:	2110      	movs	r1, #16
   1c530:	3008      	adds	r0, #8
   1c532:	f000 ffab 	bl	1d48c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1c536:	7b32      	ldrb	r2, [r6, #12]
   1c538:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
   1c53a:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
   1c53c:	f008 fac2 	bl	24ac4 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1c540:	7b30      	ldrb	r0, [r6, #12]
   1c542:	280f      	cmp	r0, #15
   1c544:	d805      	bhi.n	1c552 <bt_smp_encrypt_change+0x112>
			(void)memset(info->ltk + keys->enc_size, 0,
   1c546:	f1c0 0210 	rsb	r2, r0, #16
   1c54a:	4641      	mov	r1, r8
   1c54c:	4448      	add	r0, r9
   1c54e:	f008 fae4 	bl	24b1a <memset>
		smp_send(smp, buf, NULL, NULL);
   1c552:	4639      	mov	r1, r7
   1c554:	2200      	movs	r2, #0
   1c556:	4620      	mov	r0, r4
   1c558:	f7ff f9c2 	bl	1b8e0 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   1c55c:	2107      	movs	r1, #7
   1c55e:	4620      	mov	r0, r4
   1c560:	f009 fda2 	bl	260a8 <smp_create_pdu.isra.0>
		if (!buf) {
   1c564:	4607      	mov	r7, r0
   1c566:	b910      	cbnz	r0, 1c56e <bt_smp_encrypt_change+0x12e>
			BT_ERR("Unable to allocate Master Ident buffer");
   1c568:	481b      	ldr	r0, [pc, #108]	; (1c5d8 <bt_smp_encrypt_change+0x198>)
   1c56a:	2145      	movs	r1, #69	; 0x45
   1c56c:	e7d5      	b.n	1c51a <bt_smp_encrypt_change+0xda>
		ident = net_buf_add(buf, sizeof(*ident));
   1c56e:	210a      	movs	r1, #10
   1c570:	3008      	adds	r0, #8
   1c572:	f000 ff8b 	bl	1d48c <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1c576:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
   1c578:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1c57a:	a905      	add	r1, sp, #20
   1c57c:	3002      	adds	r0, #2
   1c57e:	f008 faa1 	bl	24ac4 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1c582:	2202      	movs	r2, #2
   1c584:	a907      	add	r1, sp, #28
   1c586:	4640      	mov	r0, r8
   1c588:	f008 fa9c 	bl	24ac4 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1c58c:	4639      	mov	r1, r7
   1c58e:	4620      	mov	r0, r4
   1c590:	4a12      	ldr	r2, [pc, #72]	; (1c5dc <bt_smp_encrypt_change+0x19c>)
   1c592:	f7ff f9a5 	bl	1b8e0 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c596:	210c      	movs	r1, #12
   1c598:	4628      	mov	r0, r5
   1c59a:	f009 fd7c 	bl	26096 <atomic_test_bit>
   1c59e:	2800      	cmp	r0, #0
   1c5a0:	d0bd      	beq.n	1c51e <bt_smp_encrypt_change+0xde>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   1c5a2:	4630      	mov	r0, r6
   1c5a4:	2101      	movs	r1, #1
   1c5a6:	f00a f81a 	bl	265de <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   1c5aa:	a901      	add	r1, sp, #4
   1c5ac:	2210      	movs	r2, #16
   1c5ae:	f106 004a 	add.w	r0, r6, #74	; 0x4a
   1c5b2:	f008 fa87 	bl	24ac4 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   1c5b6:	a905      	add	r1, sp, #20
   1c5b8:	2208      	movs	r2, #8
   1c5ba:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1c5be:	f008 fa81 	bl	24ac4 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   1c5c2:	2202      	movs	r2, #2
   1c5c4:	a907      	add	r1, sp, #28
   1c5c6:	f106 0048 	add.w	r0, r6, #72	; 0x48
   1c5ca:	f008 fa7b 	bl	24ac4 <memcpy>
   1c5ce:	e7a6      	b.n	1c51e <bt_smp_encrypt_change+0xde>
   1c5d0:	00029c60 	.word	0x00029c60
   1c5d4:	00029c7a 	.word	0x00029c7a
   1c5d8:	00029ca6 	.word	0x00029ca6
   1c5dc:	0001c3f1 	.word	0x0001c3f1

0001c5e0 <bt_smp_connected>:
{
   1c5e0:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
   1c5e2:	4905      	ldr	r1, [pc, #20]	; (1c5f8 <bt_smp_connected+0x18>)
{
   1c5e4:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
   1c5e6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1c5ea:	f00a fb6a 	bl	26cc2 <k_delayed_work_init>
	smp_reset(smp);
   1c5ee:	4620      	mov	r0, r4
}
   1c5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1c5f4:	f009 bdeb 	b.w	261ce <smp_reset>
   1c5f8:	0001c33d 	.word	0x0001c33d

0001c5fc <smp_pairing_random>:
{
   1c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c600:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c602:	f100 07f7 	add.w	r7, r0, #247	; 0xf7
   1c606:	6889      	ldr	r1, [r1, #8]
{
   1c608:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c60a:	2210      	movs	r2, #16
   1c60c:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c60e:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c612:	f008 fa57 	bl	24ac4 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c616:	2105      	movs	r1, #5
   1c618:	4630      	mov	r0, r6
   1c61a:	f009 fd3c 	bl	26096 <atomic_test_bit>
   1c61e:	2800      	cmp	r0, #0
   1c620:	d13d      	bne.n	1c69e <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c622:	6823      	ldr	r3, [r4, #0]
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c624:	f204 1807 	addw	r8, r4, #263	; 0x107
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c628:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c62c:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c62e:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c630:	9201      	str	r2, [sp, #4]
   1c632:	9300      	str	r3, [sp, #0]
   1c634:	9502      	str	r5, [sp, #8]
   1c636:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1c63a:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
   1c63e:	4639      	mov	r1, r7
   1c640:	4640      	mov	r0, r8
   1c642:	f009 fe0d 	bl	26260 <smp_c1>
	if (err) {
   1c646:	b108      	cbz	r0, 1c64c <smp_pairing_random+0x50>
	switch (smp->method) {
   1c648:	2508      	movs	r5, #8
   1c64a:	e096      	b.n	1c77a <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1c64c:	2210      	movs	r2, #16
   1c64e:	4629      	mov	r1, r5
   1c650:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   1c654:	f008 fa26 	bl	24aa4 <memcmp>
   1c658:	2800      	cmp	r0, #0
   1c65a:	f040 808d 	bne.w	1c778 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
   1c65e:	2208      	movs	r2, #8
   1c660:	4639      	mov	r1, r7
   1c662:	4628      	mov	r0, r5
   1c664:	f008 fa2e 	bl	24ac4 <memcpy>
	memcpy(out + 8, r1, 8);
   1c668:	2208      	movs	r2, #8
   1c66a:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
   1c66e:	a80c      	add	r0, sp, #48	; 0x30
   1c670:	f008 fa28 	bl	24ac4 <memcpy>
	return bt_encrypt_le(k, out, out);
   1c674:	462a      	mov	r2, r5
   1c676:	4629      	mov	r1, r5
   1c678:	4640      	mov	r0, r8
   1c67a:	f00a f976 	bl	2696a <bt_encrypt_le>
		if (err) {
   1c67e:	2800      	cmp	r0, #0
   1c680:	d1e2      	bne.n	1c648 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1c682:	4629      	mov	r1, r5
   1c684:	2210      	movs	r2, #16
   1c686:	4640      	mov	r0, r8
   1c688:	f008 fa1c 	bl	24ac4 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c68c:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c68e:	4630      	mov	r0, r6
   1c690:	f009 fc2b 	bl	25eea <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1c694:	4620      	mov	r0, r4
   1c696:	f009 fd27 	bl	260e8 <smp_send_pairing_random>
   1c69a:	4605      	mov	r5, r0
   1c69c:	e06d      	b.n	1c77a <smp_pairing_random+0x17e>
	switch (smp->method) {
   1c69e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1c6a2:	2b05      	cmp	r3, #5
   1c6a4:	d8d0      	bhi.n	1c648 <smp_pairing_random+0x4c>
   1c6a6:	a201      	add	r2, pc, #4	; (adr r2, 1c6ac <smp_pairing_random+0xb0>)
   1c6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c6ac:	0001c733 	.word	0x0001c733
   1c6b0:	0001c741 	.word	0x0001c741
   1c6b4:	0001c741 	.word	0x0001c741
   1c6b8:	0001c6c5 	.word	0x0001c6c5
   1c6bc:	0001c649 	.word	0x0001c649
   1c6c0:	0001c7cd 	.word	0x0001c7cd
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1c6c4:	4b5a      	ldr	r3, [pc, #360]	; (1c830 <smp_pairing_random+0x234>)
   1c6c6:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1c6c8:	2220      	movs	r2, #32
   1c6ca:	f204 1117 	addw	r1, r4, #279	; 0x117
   1c6ce:	a80a      	add	r0, sp, #40	; 0x28
   1c6d0:	f7ff f880 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1c6d4:	2220      	movs	r2, #32
   1c6d6:	4629      	mov	r1, r5
   1c6d8:	a812      	add	r0, sp, #72	; 0x48
   1c6da:	f7ff f87b 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1c6de:	2210      	movs	r2, #16
   1c6e0:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
   1c6e4:	a81a      	add	r0, sp, #104	; 0x68
   1c6e6:	f7ff f875 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1c6ea:	2210      	movs	r2, #16
   1c6ec:	4639      	mov	r1, r7
   1c6ee:	a806      	add	r0, sp, #24
   1c6f0:	f7ff f870 	bl	1b7d4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1c6f4:	ab06      	add	r3, sp, #24
   1c6f6:	2250      	movs	r2, #80	; 0x50
   1c6f8:	a90a      	add	r1, sp, #40	; 0x28
   1c6fa:	4618      	mov	r0, r3
   1c6fc:	f009 fc12 	bl	25f24 <bt_smp_aes_cmac>
	if (err) {
   1c700:	2800      	cmp	r0, #0
   1c702:	d1a1      	bne.n	1c648 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
   1c704:	2204      	movs	r2, #4
   1c706:	a909      	add	r1, sp, #36	; 0x24
   1c708:	a805      	add	r0, sp, #20
   1c70a:	f008 f9db 	bl	24ac4 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c70e:	9b05      	ldr	r3, [sp, #20]
   1c710:	4948      	ldr	r1, [pc, #288]	; (1c834 <smp_pairing_random+0x238>)
   1c712:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c714:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c716:	fbb3 f2f1 	udiv	r2, r3, r1
   1c71a:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c71e:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c720:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c722:	f009 fbe2 	bl	25eea <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1c726:	4b44      	ldr	r3, [pc, #272]	; (1c838 <smp_pairing_random+0x23c>)
   1c728:	9905      	ldr	r1, [sp, #20]
   1c72a:	681b      	ldr	r3, [r3, #0]
   1c72c:	6820      	ldr	r0, [r4, #0]
   1c72e:	689b      	ldr	r3, [r3, #8]
   1c730:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c732:	210d      	movs	r1, #13
   1c734:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c738:	f009 fbd7 	bl	25eea <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c73c:	210f      	movs	r1, #15
   1c73e:	e7a6      	b.n	1c68e <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c740:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
   1c744:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c748:	4939      	ldr	r1, [pc, #228]	; (1c830 <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c74a:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c74c:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c74e:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c752:	9500      	str	r5, [sp, #0]
   1c754:	6809      	ldr	r1, [r1, #0]
   1c756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c75a:	463a      	mov	r2, r7
   1c75c:	f204 1017 	addw	r0, r4, #279	; 0x117
   1c760:	f009 fc72 	bl	26048 <smp_f4>
   1c764:	2800      	cmp	r0, #0
   1c766:	f47f af6f 	bne.w	1c648 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1c76a:	2210      	movs	r2, #16
   1c76c:	4629      	mov	r1, r5
   1c76e:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   1c772:	f008 f997 	bl	24aa4 <memcmp>
   1c776:	b120      	cbz	r0, 1c782 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1c778:	2504      	movs	r5, #4
}
   1c77a:	4628      	mov	r0, r5
   1c77c:	b01e      	add	sp, #120	; 0x78
   1c77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
   1c782:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
   1c786:	2103      	movs	r1, #3
   1c788:	4638      	mov	r0, r7
   1c78a:	f009 fbae 	bl	25eea <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1c78e:	4620      	mov	r0, r4
   1c790:	f009 fcaa 	bl	260e8 <smp_send_pairing_random>
		if (err) {
   1c794:	4605      	mov	r5, r0
   1c796:	2800      	cmp	r0, #0
   1c798:	d1ef      	bne.n	1c77a <smp_pairing_random+0x17e>
		smp->passkey_round++;
   1c79a:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
   1c79e:	3301      	adds	r3, #1
   1c7a0:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1c7a2:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1c7a4:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
   1c7a8:	d108      	bne.n	1c7bc <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c7aa:	4638      	mov	r0, r7
   1c7ac:	210d      	movs	r1, #13
   1c7ae:	f009 fb9c 	bl	25eea <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c7b2:	210f      	movs	r1, #15
   1c7b4:	4630      	mov	r0, r6
   1c7b6:	f009 fb98 	bl	25eea <atomic_set_bit>
			return 0;
   1c7ba:	e7de      	b.n	1c77a <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
   1c7bc:	2110      	movs	r1, #16
   1c7be:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   1c7c2:	f002 fdfd 	bl	1f3c0 <bt_rand>
   1c7c6:	2800      	cmp	r0, #0
   1c7c8:	d0d7      	beq.n	1c77a <smp_pairing_random+0x17e>
   1c7ca:	e73d      	b.n	1c648 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
   1c7cc:	2110      	movs	r1, #16
   1c7ce:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
   1c7d2:	f002 fdf5 	bl	1f3c0 <bt_rand>
   1c7d6:	2800      	cmp	r0, #0
   1c7d8:	f47f af36 	bne.w	1c648 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
   1c7dc:	4f16      	ldr	r7, [pc, #88]	; (1c838 <smp_pairing_random+0x23c>)
   1c7de:	683b      	ldr	r3, [r7, #0]
   1c7e0:	b193      	cbz	r3, 1c808 <smp_pairing_random+0x20c>
   1c7e2:	68db      	ldr	r3, [r3, #12]
   1c7e4:	b183      	cbz	r3, 1c808 <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
   1c7e6:	4b15      	ldr	r3, [pc, #84]	; (1c83c <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c7e8:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
			struct bt_conn_oob_info info = {
   1c7ec:	881b      	ldrh	r3, [r3, #0]
   1c7ee:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c7f2:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c7f6:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c7f8:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c7fc:	d406      	bmi.n	1c80c <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
   1c7fe:	2b00      	cmp	r3, #0
   1c800:	bf0c      	ite	eq
   1c802:	2003      	moveq	r0, #3
   1c804:	2001      	movne	r0, #1
   1c806:	e004      	b.n	1c812 <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c808:	2502      	movs	r5, #2
   1c80a:	e7b6      	b.n	1c77a <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
   1c80c:	2b00      	cmp	r3, #0
   1c80e:	bf18      	it	ne
   1c810:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1c812:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1c814:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   1c818:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1c81c:	4630      	mov	r0, r6
   1c81e:	210b      	movs	r1, #11
   1c820:	f009 fb63 	bl	25eea <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1c824:	683b      	ldr	r3, [r7, #0]
   1c826:	6820      	ldr	r0, [r4, #0]
   1c828:	68db      	ldr	r3, [r3, #12]
   1c82a:	a90a      	add	r1, sp, #40	; 0x28
   1c82c:	4798      	blx	r3
			return 0;
   1c82e:	e7a4      	b.n	1c77a <smp_pairing_random+0x17e>
   1c830:	200029c8 	.word	0x200029c8
   1c834:	000f4240 	.word	0x000f4240
   1c838:	20002934 	.word	0x20002934
   1c83c:	000271fa 	.word	0x000271fa

0001c840 <smp_public_key>:
{
   1c840:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1c842:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   1c844:	f200 1417 	addw	r4, r0, #279	; 0x117
{
   1c848:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
   1c84a:	2220      	movs	r2, #32
   1c84c:	4631      	mov	r1, r6
   1c84e:	4620      	mov	r0, r4
   1c850:	f008 f938 	bl	24ac4 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   1c854:	2220      	movs	r2, #32
   1c856:	18b1      	adds	r1, r6, r2
   1c858:	f205 1037 	addw	r0, r5, #311	; 0x137
   1c85c:	f008 f932 	bl	24ac4 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
   1c860:	491d      	ldr	r1, [pc, #116]	; (1c8d8 <smp_public_key+0x98>)
   1c862:	2240      	movs	r2, #64	; 0x40
   1c864:	4620      	mov	r0, r4
   1c866:	f008 f91d 	bl	24aa4 <memcmp>
   1c86a:	b148      	cbz	r0, 1c880 <smp_public_key+0x40>
	if (!sc_public_key) {
   1c86c:	4b1b      	ldr	r3, [pc, #108]	; (1c8dc <smp_public_key+0x9c>)
   1c86e:	681c      	ldr	r4, [r3, #0]
   1c870:	bb44      	cbnz	r4, 1c8c4 <smp_public_key+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1c872:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1c876:	2106      	movs	r1, #6
   1c878:	f009 fb37 	bl	25eea <atomic_set_bit>
		return 0;
   1c87c:	4620      	mov	r0, r4
}
   1c87e:	bd70      	pop	{r4, r5, r6, pc}
		BT_INFO("Remote is using Debug Public key");
   1c880:	4817      	ldr	r0, [pc, #92]	; (1c8e0 <smp_public_key+0xa0>)
   1c882:	2149      	movs	r1, #73	; 0x49
   1c884:	f006 fa52 	bl	22d2c <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1c888:	210d      	movs	r1, #13
   1c88a:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   1c88e:	f009 fb2c 	bl	25eea <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1c892:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
   1c894:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1c898:	b933      	cbnz	r3, 1c8a8 <smp_public_key+0x68>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c89a:	7a20      	ldrb	r0, [r4, #8]
   1c89c:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1c8a0:	f000 f9fc 	bl	1cc9c <bt_keys_get_addr>
   1c8a4:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   1c8a8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1c8ac:	2b00      	cmp	r3, #0
   1c8ae:	d0dd      	beq.n	1c86c <smp_public_key+0x2c>
   1c8b0:	89da      	ldrh	r2, [r3, #14]
   1c8b2:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1c8b6:	2a00      	cmp	r2, #0
   1c8b8:	d0d8      	beq.n	1c86c <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1c8ba:	7b5b      	ldrb	r3, [r3, #13]
   1c8bc:	079b      	lsls	r3, r3, #30
   1c8be:	d5d5      	bpl.n	1c86c <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1c8c0:	2003      	movs	r0, #3
   1c8c2:	e7dc      	b.n	1c87e <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
   1c8c4:	4628      	mov	r0, r5
   1c8c6:	f7ff f907 	bl	1bad8 <sc_send_public_key>
	if (err) {
   1c8ca:	2800      	cmp	r0, #0
   1c8cc:	d1d7      	bne.n	1c87e <smp_public_key+0x3e>
   1c8ce:	4628      	mov	r0, r5
}
   1c8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c8d4:	f7ff b962 	b.w	1bb9c <smp_public_key_slave.part.0>
   1c8d8:	00029d75 	.word	0x00029d75
   1c8dc:	200029c8 	.word	0x200029c8
   1c8e0:	00029cd2 	.word	0x00029cd2

0001c8e4 <smp_ident_addr_info>:
{
   1c8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1c8e8:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c8ea:	6805      	ldr	r5, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c8ec:	783b      	ldrb	r3, [r7, #0]
{
   1c8ee:	4604      	mov	r4, r0
   1c8f0:	b1c3      	cbz	r3, 1c924 <smp_ident_addr_info+0x40>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1c8f2:	79bb      	ldrb	r3, [r7, #6]
   1c8f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c8f8:	2bc0      	cmp	r3, #192	; 0xc0
   1c8fa:	d013      	beq.n	1c924 <smp_ident_addr_info+0x40>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1c8fc:	4638      	mov	r0, r7
   1c8fe:	f7f9 f9ff 	bl	15d00 <bt_addr_le_str_real>
   1c902:	2145      	movs	r1, #69	; 0x45
   1c904:	4602      	mov	r2, r0
   1c906:	4837      	ldr	r0, [pc, #220]	; (1c9e4 <smp_ident_addr_info+0x100>)
   1c908:	f006 fa10 	bl	22d2c <printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c90c:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1c910:	f7f9 f9f6 	bl	15d00 <bt_addr_le_str_real>
   1c914:	2145      	movs	r1, #69	; 0x45
   1c916:	4602      	mov	r2, r0
   1c918:	4833      	ldr	r0, [pc, #204]	; (1c9e8 <smp_ident_addr_info+0x104>)
   1c91a:	f006 fa07 	bl	22d2c <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1c91e:	200a      	movs	r0, #10
}
   1c920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c924:	210c      	movs	r1, #12
   1c926:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1c92a:	f009 fbb4 	bl	26096 <atomic_test_bit>
   1c92e:	2800      	cmp	r0, #0
   1c930:	d03e      	beq.n	1c9b0 <smp_ident_addr_info+0xcc>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1c932:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1c936:	7a29      	ldrb	r1, [r5, #8]
   1c938:	4642      	mov	r2, r8
   1c93a:	2002      	movs	r0, #2
   1c93c:	f009 fe3f 	bl	265be <bt_keys_get_type>
		if (!keys) {
   1c940:	4606      	mov	r6, r0
   1c942:	b948      	cbnz	r0, 1c958 <smp_ident_addr_info+0x74>
			BT_ERR("Unable to get keys for %s",
   1c944:	4640      	mov	r0, r8
   1c946:	f7f9 f9db 	bl	15d00 <bt_addr_le_str_real>
   1c94a:	2145      	movs	r1, #69	; 0x45
   1c94c:	4602      	mov	r2, r0
   1c94e:	4827      	ldr	r0, [pc, #156]	; (1c9ec <smp_ident_addr_info+0x108>)
   1c950:	f006 f9ec 	bl	22d2c <printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c954:	2008      	movs	r0, #8
   1c956:	e7e3      	b.n	1c920 <smp_ident_addr_info+0x3c>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1c958:	78eb      	ldrb	r3, [r5, #3]
   1c95a:	2b00      	cmp	r3, #0
   1c95c:	d13e      	bne.n	1c9dc <smp_ident_addr_info+0xf8>
			dst = &conn->le.resp_addr;
   1c95e:	f105 019e 	add.w	r1, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c962:	780b      	ldrb	r3, [r1, #0]
   1c964:	2b01      	cmp	r3, #1
   1c966:	d120      	bne.n	1c9aa <smp_ident_addr_info+0xc6>
		if (bt_addr_le_is_rpa(dst)) {
   1c968:	798b      	ldrb	r3, [r1, #6]
   1c96a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c96e:	2b40      	cmp	r3, #64	; 0x40
   1c970:	d11b      	bne.n	1c9aa <smp_ident_addr_info+0xc6>
	memcpy(dst, src, sizeof(*dst));
   1c972:	2206      	movs	r2, #6
   1c974:	3101      	adds	r1, #1
   1c976:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1c97a:	f008 f8a3 	bl	24ac4 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c97e:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1c982:	b193      	cbz	r3, 1c9aa <smp_ident_addr_info+0xc6>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1c984:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1c988:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c98c:	2bc0      	cmp	r3, #192	; 0xc0
   1c98e:	d00c      	beq.n	1c9aa <smp_ident_addr_info+0xc6>
	memcpy(dst, src, sizeof(*dst));
   1c990:	2207      	movs	r2, #7
   1c992:	4639      	mov	r1, r7
   1c994:	1c70      	adds	r0, r6, #1
   1c996:	f008 f895 	bl	24ac4 <memcpy>
   1c99a:	2207      	movs	r2, #7
   1c99c:	4639      	mov	r1, r7
   1c99e:	4640      	mov	r0, r8
   1c9a0:	f008 f890 	bl	24ac4 <memcpy>
				bt_conn_identity_resolved(conn);
   1c9a4:	4628      	mov	r0, r5
   1c9a6:	f7fb fdc9 	bl	1853c <bt_conn_identity_resolved>
		bt_id_add(keys);
   1c9aa:	4630      	mov	r0, r6
   1c9ac:	f7fa fdb4 	bl	17518 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c9b0:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1c9b4:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c9b8:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c9ba:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c9be:	d504      	bpl.n	1c9ca <smp_ident_addr_info+0xe6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c9c0:	210a      	movs	r1, #10
   1c9c2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c9c6:	f009 fa90 	bl	25eea <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c9ca:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
   1c9ce:	b91d      	cbnz	r5, 1c9d8 <smp_ident_addr_info+0xf4>
		smp_pairing_complete(smp, 0);
   1c9d0:	4629      	mov	r1, r5
   1c9d2:	4620      	mov	r0, r4
   1c9d4:	f7ff fb72 	bl	1c0bc <smp_pairing_complete>
	return 0;
   1c9d8:	2000      	movs	r0, #0
   1c9da:	e7a1      	b.n	1c920 <smp_ident_addr_info+0x3c>
			dst = &conn->le.init_addr;
   1c9dc:	f105 0197 	add.w	r1, r5, #151	; 0x97
   1c9e0:	e7bf      	b.n	1c962 <smp_ident_addr_info+0x7e>
   1c9e2:	bf00      	nop
   1c9e4:	00029cf8 	.word	0x00029cf8
   1c9e8:	00029d11 	.word	0x00029d11
   1c9ec:	00029aea 	.word	0x00029aea

0001c9f0 <bt_smp_start_security>:
{
   1c9f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1c9f4:	78c4      	ldrb	r4, [r0, #3]
   1c9f6:	2c01      	cmp	r4, #1
{
   1c9f8:	4605      	mov	r5, r0
	switch (conn->role) {
   1c9fa:	d005      	beq.n	1ca08 <bt_smp_start_security+0x18>
		return -EINVAL;
   1c9fc:	f06f 0415 	mvn.w	r4, #21
}
   1ca00:	4620      	mov	r0, r4
   1ca02:	b003      	add	sp, #12
   1ca04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1ca08:	f7fe ff28 	bl	1b85c <smp_chan_get>
	if (!smp) {
   1ca0c:	4606      	mov	r6, r0
   1ca0e:	2800      	cmp	r0, #0
   1ca10:	f000 80a1 	beq.w	1cb56 <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1ca14:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
   1ca18:	2104      	movs	r1, #4
   1ca1a:	4638      	mov	r0, r7
   1ca1c:	f009 fb3b 	bl	26096 <atomic_test_bit>
   1ca20:	2800      	cmp	r0, #0
   1ca22:	f040 809b 	bne.w	1cb5c <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ca26:	2103      	movs	r1, #3
   1ca28:	4638      	mov	r0, r7
   1ca2a:	f009 fb34 	bl	26096 <atomic_test_bit>
   1ca2e:	b110      	cbz	r0, 1ca36 <bt_smp_start_security+0x46>
		return -EBUSY;
   1ca30:	f06f 040f 	mvn.w	r4, #15
   1ca34:	e7e4      	b.n	1ca00 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ca36:	4621      	mov	r1, r4
   1ca38:	4638      	mov	r0, r7
   1ca3a:	f009 fb2c 	bl	26096 <atomic_test_bit>
   1ca3e:	2800      	cmp	r0, #0
   1ca40:	d1f6      	bne.n	1ca30 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1ca42:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1ca44:	2b03      	cmp	r3, #3
   1ca46:	d03d      	beq.n	1cac4 <bt_smp_start_security+0xd4>
   1ca48:	d82c      	bhi.n	1caa4 <bt_smp_start_security+0xb4>
   1ca4a:	3b01      	subs	r3, #1
   1ca4c:	2b01      	cmp	r3, #1
   1ca4e:	d947      	bls.n	1cae0 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1ca50:	210b      	movs	r1, #11
   1ca52:	1d28      	adds	r0, r5, #4
   1ca54:	f009 fb1f 	bl	26096 <atomic_test_bit>
   1ca58:	2800      	cmp	r0, #0
   1ca5a:	d1cf      	bne.n	1c9fc <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1ca5c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1ca60:	b983      	cbnz	r3, 1ca84 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
   1ca62:	f105 0490 	add.w	r4, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1ca66:	7a29      	ldrb	r1, [r5, #8]
   1ca68:	4622      	mov	r2, r4
   1ca6a:	2020      	movs	r0, #32
   1ca6c:	f000 f956 	bl	1cd1c <bt_keys_find>
   1ca70:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1ca74:	b930      	cbnz	r0, 1ca84 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1ca76:	7a29      	ldrb	r1, [r5, #8]
   1ca78:	4622      	mov	r2, r4
   1ca7a:	2004      	movs	r0, #4
   1ca7c:	f000 f94e 	bl	1cd1c <bt_keys_find>
   1ca80:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1ca84:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1ca88:	2b00      	cmp	r3, #0
   1ca8a:	d0b7      	beq.n	1c9fc <bt_smp_start_security+0xc>
   1ca8c:	89da      	ldrh	r2, [r3, #14]
   1ca8e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1ca92:	2a00      	cmp	r2, #0
   1ca94:	d0b2      	beq.n	1c9fc <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1ca96:	7aaa      	ldrb	r2, [r5, #10]
   1ca98:	2a02      	cmp	r2, #2
   1ca9a:	d921      	bls.n	1cae0 <bt_smp_start_security+0xf0>
   1ca9c:	7b5b      	ldrb	r3, [r3, #13]
   1ca9e:	07db      	lsls	r3, r3, #31
   1caa0:	d5ac      	bpl.n	1c9fc <bt_smp_start_security+0xc>
   1caa2:	e01d      	b.n	1cae0 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
   1caa4:	2b04      	cmp	r3, #4
   1caa6:	d1d3      	bne.n	1ca50 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1caa8:	f7fe fe6e 	bl	1b788 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1caac:	2803      	cmp	r0, #3
   1caae:	d104      	bne.n	1caba <bt_smp_start_security+0xca>
   1cab0:	4b2c      	ldr	r3, [pc, #176]	; (1cb64 <bt_smp_start_security+0x174>)
   1cab2:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1cab4:	b1fb      	cbz	r3, 1caf6 <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1cab6:	68dc      	ldr	r4, [r3, #12]
   1cab8:	b10c      	cbz	r4, 1cabe <bt_smp_start_security+0xce>
   1caba:	4b2b      	ldr	r3, [pc, #172]	; (1cb68 <bt_smp_start_security+0x178>)
   1cabc:	781c      	ldrb	r4, [r3, #0]
   1cabe:	f004 0401 	and.w	r4, r4, #1
   1cac2:	e00b      	b.n	1cadc <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1cac4:	f7fe fe60 	bl	1b788 <get_io_capa>
   1cac8:	2803      	cmp	r0, #3
   1caca:	d107      	bne.n	1cadc <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
   1cacc:	4b25      	ldr	r3, [pc, #148]	; (1cb64 <bt_smp_start_security+0x174>)
   1cace:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1cad0:	2c00      	cmp	r4, #0
   1cad2:	d0bd      	beq.n	1ca50 <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
   1cad4:	68e4      	ldr	r4, [r4, #12]
   1cad6:	3c00      	subs	r4, #0
   1cad8:	bf18      	it	ne
   1cada:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1cadc:	2c00      	cmp	r4, #0
   1cade:	d0b7      	beq.n	1ca50 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
   1cae0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1cae4:	b14b      	cbz	r3, 1cafa <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
   1cae6:	4630      	mov	r0, r6
   1cae8:	f7fe fedc 	bl	1b8a4 <smp_init>
   1caec:	4604      	mov	r4, r0
   1caee:	b180      	cbz	r0, 1cb12 <bt_smp_start_security+0x122>
		return -ENOBUFS;
   1caf0:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1caf4:	e784      	b.n	1ca00 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1caf6:	2400      	movs	r4, #0
   1caf8:	e7e1      	b.n	1cabe <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1cafa:	7a28      	ldrb	r0, [r5, #8]
   1cafc:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1cb00:	f000 f8cc 	bl	1cc9c <bt_keys_get_addr>
   1cb04:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1cb08:	2800      	cmp	r0, #0
   1cb0a:	d1ec      	bne.n	1cae6 <bt_smp_start_security+0xf6>
			return -ENOMEM;
   1cb0c:	f06f 040b 	mvn.w	r4, #11
   1cb10:	e776      	b.n	1ca00 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1cb12:	210b      	movs	r1, #11
   1cb14:	4630      	mov	r0, r6
   1cb16:	f009 fac7 	bl	260a8 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1cb1a:	4680      	mov	r8, r0
   1cb1c:	2800      	cmp	r0, #0
   1cb1e:	d0e7      	beq.n	1caf0 <bt_smp_start_security+0x100>
	req = net_buf_add(req_buf, sizeof(*req));
   1cb20:	2101      	movs	r1, #1
   1cb22:	3008      	adds	r0, #8
   1cb24:	f000 fcb2 	bl	1d48c <net_buf_simple_add>
   1cb28:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1cb2a:	2009      	movs	r0, #9
   1cb2c:	f7fe fe78 	bl	1b820 <get_auth.isra.0>
   1cb30:	4623      	mov	r3, r4
   1cb32:	f889 0000 	strb.w	r0, [r9]
   1cb36:	4642      	mov	r2, r8
   1cb38:	9400      	str	r4, [sp, #0]
   1cb3a:	2106      	movs	r1, #6
   1cb3c:	4628      	mov	r0, r5
   1cb3e:	f008 fc32 	bl	253a6 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1cb42:	4638      	mov	r0, r7
   1cb44:	210e      	movs	r1, #14
   1cb46:	f009 f9d0 	bl	25eea <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1cb4a:	2101      	movs	r1, #1
   1cb4c:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1cb50:	f009 f9cb 	bl	25eea <atomic_set_bit>
	return 0;
   1cb54:	e754      	b.n	1ca00 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1cb56:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1cb5a:	e751      	b.n	1ca00 <bt_smp_start_security+0x10>
		return -EIO;
   1cb5c:	f06f 0404 	mvn.w	r4, #4
   1cb60:	e74e      	b.n	1ca00 <bt_smp_start_security+0x10>
   1cb62:	bf00      	nop
   1cb64:	20002934 	.word	0x20002934
   1cb68:	20003110 	.word	0x20003110

0001cb6c <bt_smp_update_keys>:
{
   1cb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb6e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1cb70:	f7fe fe74 	bl	1b85c <smp_chan_get>
	if (!smp) {
   1cb74:	4605      	mov	r5, r0
   1cb76:	2800      	cmp	r0, #0
   1cb78:	d077      	beq.n	1cc6a <bt_smp_update_keys+0xfe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1cb7a:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
   1cb7e:	2103      	movs	r1, #3
   1cb80:	4630      	mov	r0, r6
   1cb82:	f009 fa88 	bl	26096 <atomic_test_bit>
   1cb86:	2800      	cmp	r0, #0
   1cb88:	d06f      	beq.n	1cc6a <bt_smp_update_keys+0xfe>
	if (conn->le.keys) {
   1cb8a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cb8e:	b108      	cbz	r0, 1cb94 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1cb90:	f000 f924 	bl	1cddc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1cb94:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1cb98:	7a20      	ldrb	r0, [r4, #8]
   1cb9a:	4639      	mov	r1, r7
   1cb9c:	f000 f87e 	bl	1cc9c <bt_keys_get_addr>
   1cba0:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1cba4:	b968      	cbnz	r0, 1cbc2 <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
   1cba6:	4638      	mov	r0, r7
   1cba8:	f7f9 f8aa 	bl	15d00 <bt_addr_le_str_real>
   1cbac:	2145      	movs	r1, #69	; 0x45
   1cbae:	4602      	mov	r2, r0
   1cbb0:	482e      	ldr	r0, [pc, #184]	; (1cc6c <bt_smp_update_keys+0x100>)
   1cbb2:	f006 f8bb 	bl	22d2c <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1cbb6:	4628      	mov	r0, r5
   1cbb8:	2108      	movs	r1, #8
}
   1cbba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1cbbe:	f009 bb31 	b.w	26224 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1cbc2:	210d      	movs	r1, #13
   1cbc4:	4630      	mov	r0, r6
   1cbc6:	f009 fa66 	bl	26096 <atomic_test_bit>
   1cbca:	b128      	cbz	r0, 1cbd8 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1cbcc:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1cbd0:	7b53      	ldrb	r3, [r2, #13]
   1cbd2:	f043 0302 	orr.w	r3, r3, #2
   1cbd6:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1cbd8:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   1cbdc:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   1cbe0:	2a03      	cmp	r2, #3
   1cbe2:	7b4b      	ldrb	r3, [r1, #13]
   1cbe4:	d838      	bhi.n	1cc58 <bt_smp_update_keys+0xec>
   1cbe6:	b3d2      	cbz	r2, 1cc5e <bt_smp_update_keys+0xf2>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1cbe8:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1cbec:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1cbee:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
   1cbf2:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
   1cbf6:	4293      	cmp	r3, r2
   1cbf8:	bf28      	it	cs
   1cbfa:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1cbfc:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cbfe:	4630      	mov	r0, r6
   1cc00:	2105      	movs	r1, #5
   1cc02:	f009 fa48 	bl	26096 <atomic_test_bit>
   1cc06:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1cc0a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cc0c:	b350      	cbz	r0, 1cc64 <bt_smp_update_keys+0xf8>
		conn->le.keys->flags |= BT_KEYS_SC;
   1cc0e:	f042 0210 	orr.w	r2, r2, #16
   1cc12:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cc14:	210c      	movs	r1, #12
   1cc16:	4630      	mov	r0, r6
   1cc18:	f009 fa3d 	bl	26096 <atomic_test_bit>
   1cc1c:	b328      	cbz	r0, 1cc6a <bt_smp_update_keys+0xfe>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1cc1e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cc22:	2120      	movs	r1, #32
   1cc24:	f009 fcdb 	bl	265de <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1cc28:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cc2c:	f205 1107 	addw	r1, r5, #263	; 0x107
   1cc30:	2210      	movs	r2, #16
   1cc32:	301a      	adds	r0, #26
   1cc34:	f007 ff46 	bl	24ac4 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1cc38:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cc3c:	2208      	movs	r2, #8
   1cc3e:	2100      	movs	r1, #0
   1cc40:	3010      	adds	r0, #16
   1cc42:	f007 ff6a 	bl	24b1a <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1cc46:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cc4a:	2202      	movs	r2, #2
}
   1cc4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1cc50:	2100      	movs	r1, #0
   1cc52:	3018      	adds	r0, #24
   1cc54:	f007 bf61 	b.w	24b1a <memset>
	switch (smp->method) {
   1cc58:	3a05      	subs	r2, #5
   1cc5a:	2a01      	cmp	r2, #1
   1cc5c:	d9c4      	bls.n	1cbe8 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1cc5e:	f023 0301 	bic.w	r3, r3, #1
   1cc62:	e7c3      	b.n	1cbec <bt_smp_update_keys+0x80>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1cc64:	f022 0210 	bic.w	r2, r2, #16
   1cc68:	735a      	strb	r2, [r3, #13]
}
   1cc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cc6c:	00029aea 	.word	0x00029aea

0001cc70 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1cc70:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1cc72:	4b07      	ldr	r3, [pc, #28]	; (1cc90 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1cc74:	4807      	ldr	r0, [pc, #28]	; (1cc94 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1cc76:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1cc7a:	f003 0306 	and.w	r3, r3, #6
   1cc7e:	1f9a      	subs	r2, r3, #6
   1cc80:	4253      	negs	r3, r2
   1cc82:	4153      	adcs	r3, r2
   1cc84:	4a04      	ldr	r2, [pc, #16]	; (1cc98 <bt_smp_init+0x28>)
   1cc86:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1cc88:	f7fb fab2 	bl	181f0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1cc8c:	2000      	movs	r0, #0
   1cc8e:	bd08      	pop	{r3, pc}
   1cc90:	200003c8 	.word	0x200003c8
   1cc94:	2000066c 	.word	0x2000066c
   1cc98:	20003110 	.word	0x20003110

0001cc9c <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1cc9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1cc9e:	4c11      	ldr	r4, [pc, #68]	; (1cce4 <bt_keys_get_addr+0x48>)
   1cca0:	7823      	ldrb	r3, [r4, #0]
   1cca2:	4283      	cmp	r3, r0
{
   1cca4:	4605      	mov	r5, r0
   1cca6:	460e      	mov	r6, r1
   1cca8:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1ccaa:	d00b      	beq.n	1ccc4 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1ccac:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1ccae:	480e      	ldr	r0, [pc, #56]	; (1cce8 <bt_keys_get_addr+0x4c>)
   1ccb0:	9400      	str	r4, [sp, #0]
   1ccb2:	2207      	movs	r2, #7
   1ccb4:	4669      	mov	r1, sp
   1ccb6:	f8cd 4003 	str.w	r4, [sp, #3]
   1ccba:	f007 fef3 	bl	24aa4 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1ccbe:	b140      	cbz	r0, 1ccd2 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1ccc0:	4620      	mov	r0, r4
   1ccc2:	e00d      	b.n	1cce0 <bt_keys_get_addr+0x44>
   1ccc4:	2207      	movs	r2, #7
   1ccc6:	1c60      	adds	r0, r4, #1
   1ccc8:	f007 feec 	bl	24aa4 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1cccc:	2800      	cmp	r0, #0
   1ccce:	d1ed      	bne.n	1ccac <bt_keys_get_addr+0x10>
   1ccd0:	e7f6      	b.n	1ccc0 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   1ccd2:	4805      	ldr	r0, [pc, #20]	; (1cce8 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1ccd4:	703d      	strb	r5, [r7, #0]
   1ccd6:	2207      	movs	r2, #7
   1ccd8:	4631      	mov	r1, r6
   1ccda:	f007 fef3 	bl	24ac4 <memcpy>
		return keys;
   1ccde:	4801      	ldr	r0, [pc, #4]	; (1cce4 <bt_keys_get_addr+0x48>)
}
   1cce0:	b003      	add	sp, #12
   1cce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cce4:	200029cc 	.word	0x200029cc
   1cce8:	200029cd 	.word	0x200029cd

0001ccec <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1ccec:	460b      	mov	r3, r1
   1ccee:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1ccf0:	4a04      	ldr	r2, [pc, #16]	; (1cd04 <bt_keys_foreach+0x18>)
{
   1ccf2:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1ccf4:	89d4      	ldrh	r4, [r2, #14]
   1ccf6:	4204      	tst	r4, r0
   1ccf8:	d002      	beq.n	1cd00 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1ccfa:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1ccfc:	4610      	mov	r0, r2
   1ccfe:	4718      	bx	r3
}
   1cd00:	bc10      	pop	{r4}
   1cd02:	4770      	bx	lr
   1cd04:	200029cc 	.word	0x200029cc

0001cd08 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1cd08:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1cd0a:	4903      	ldr	r1, [pc, #12]	; (1cd18 <keys_commit+0x10>)
   1cd0c:	2200      	movs	r2, #0
   1cd0e:	2002      	movs	r0, #2
   1cd10:	f7ff ffec 	bl	1ccec <bt_keys_foreach>
	}

	return 0;
}
   1cd14:	2000      	movs	r0, #0
   1cd16:	bd08      	pop	{r3, pc}
   1cd18:	000265bb 	.word	0x000265bb

0001cd1c <bt_keys_find>:
{
   1cd1c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1cd1e:	4c09      	ldr	r4, [pc, #36]	; (1cd44 <bt_keys_find+0x28>)
{
   1cd20:	460b      	mov	r3, r1
   1cd22:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1cd24:	89e2      	ldrh	r2, [r4, #14]
   1cd26:	4202      	tst	r2, r0
   1cd28:	d007      	beq.n	1cd3a <bt_keys_find+0x1e>
   1cd2a:	7822      	ldrb	r2, [r4, #0]
   1cd2c:	429a      	cmp	r2, r3
   1cd2e:	d104      	bne.n	1cd3a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1cd30:	2207      	movs	r2, #7
   1cd32:	1c60      	adds	r0, r4, #1
   1cd34:	f007 feb6 	bl	24aa4 <memcmp>
   1cd38:	b108      	cbz	r0, 1cd3e <bt_keys_find+0x22>
	return NULL;
   1cd3a:	2000      	movs	r0, #0
}
   1cd3c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1cd3e:	4620      	mov	r0, r4
   1cd40:	e7fc      	b.n	1cd3c <bt_keys_find+0x20>
   1cd42:	bf00      	nop
   1cd44:	200029cc 	.word	0x200029cc

0001cd48 <bt_keys_find_irk>:
{
   1cd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1cd4a:	780b      	ldrb	r3, [r1, #0]
   1cd4c:	2b01      	cmp	r3, #1
   1cd4e:	4607      	mov	r7, r0
   1cd50:	460c      	mov	r4, r1
   1cd52:	d001      	beq.n	1cd58 <bt_keys_find_irk+0x10>
		return NULL;
   1cd54:	2000      	movs	r0, #0
}
   1cd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1cd58:	798b      	ldrb	r3, [r1, #6]
   1cd5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cd5e:	2b40      	cmp	r3, #64	; 0x40
   1cd60:	d1f8      	bne.n	1cd54 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1cd62:	4d13      	ldr	r5, [pc, #76]	; (1cdb0 <bt_keys_find_irk+0x68>)
   1cd64:	89eb      	ldrh	r3, [r5, #14]
   1cd66:	f013 0f02 	tst.w	r3, #2
   1cd6a:	462e      	mov	r6, r5
   1cd6c:	d0f2      	beq.n	1cd54 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1cd6e:	7833      	ldrb	r3, [r6, #0]
   1cd70:	42bb      	cmp	r3, r7
   1cd72:	d10b      	bne.n	1cd8c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1cd74:	2206      	movs	r2, #6
   1cd76:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1cd7a:	1c60      	adds	r0, r4, #1
   1cd7c:	f007 fe92 	bl	24aa4 <memcmp>
   1cd80:	b908      	cbnz	r0, 1cd86 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   1cd82:	4628      	mov	r0, r5
   1cd84:	e7e7      	b.n	1cd56 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1cd86:	89f3      	ldrh	r3, [r6, #14]
   1cd88:	079b      	lsls	r3, r3, #30
   1cd8a:	d5e3      	bpl.n	1cd54 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1cd8c:	7833      	ldrb	r3, [r6, #0]
   1cd8e:	42bb      	cmp	r3, r7
   1cd90:	d1e0      	bne.n	1cd54 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1cd92:	3401      	adds	r4, #1
   1cd94:	4807      	ldr	r0, [pc, #28]	; (1cdb4 <bt_keys_find_irk+0x6c>)
   1cd96:	4621      	mov	r1, r4
   1cd98:	f007 ff04 	bl	24ba4 <bt_rpa_irk_matches>
   1cd9c:	2800      	cmp	r0, #0
   1cd9e:	d0d9      	beq.n	1cd54 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1cda0:	4805      	ldr	r0, [pc, #20]	; (1cdb8 <bt_keys_find_irk+0x70>)
   1cda2:	2206      	movs	r2, #6
   1cda4:	4621      	mov	r1, r4
   1cda6:	f007 fe8d 	bl	24ac4 <memcpy>
			return &key_pool[i];
   1cdaa:	4801      	ldr	r0, [pc, #4]	; (1cdb0 <bt_keys_find_irk+0x68>)
}
   1cdac:	e7d3      	b.n	1cd56 <bt_keys_find_irk+0xe>
   1cdae:	bf00      	nop
   1cdb0:	200029cc 	.word	0x200029cc
   1cdb4:	200029f6 	.word	0x200029f6
   1cdb8:	20002a06 	.word	0x20002a06

0001cdbc <bt_keys_find_addr>:
{
   1cdbc:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1cdbe:	4c06      	ldr	r4, [pc, #24]	; (1cdd8 <bt_keys_find_addr+0x1c>)
   1cdc0:	7823      	ldrb	r3, [r4, #0]
   1cdc2:	4283      	cmp	r3, r0
   1cdc4:	d104      	bne.n	1cdd0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1cdc6:	2207      	movs	r2, #7
   1cdc8:	1c60      	adds	r0, r4, #1
   1cdca:	f007 fe6b 	bl	24aa4 <memcmp>
   1cdce:	b108      	cbz	r0, 1cdd4 <bt_keys_find_addr+0x18>
	return NULL;
   1cdd0:	2000      	movs	r0, #0
}
   1cdd2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1cdd4:	4620      	mov	r0, r4
   1cdd6:	e7fc      	b.n	1cdd2 <bt_keys_find_addr+0x16>
   1cdd8:	200029cc 	.word	0x200029cc

0001cddc <bt_keys_clear>:
{
   1cddc:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1cdde:	7a03      	ldrb	r3, [r0, #8]
   1cde0:	075b      	lsls	r3, r3, #29
{
   1cde2:	b08c      	sub	sp, #48	; 0x30
   1cde4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1cde6:	d501      	bpl.n	1cdec <bt_keys_clear+0x10>
		bt_id_del(keys);
   1cde8:	f7fa fc40 	bl	1766c <bt_id_del>
		if (keys->id) {
   1cdec:	4625      	mov	r5, r4
   1cdee:	f815 2b01 	ldrb.w	r2, [r5], #1
   1cdf2:	b1aa      	cbz	r2, 1ce20 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1cdf4:	ae02      	add	r6, sp, #8
   1cdf6:	2104      	movs	r1, #4
   1cdf8:	4630      	mov	r0, r6
   1cdfa:	f005 fefb 	bl	22bf4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1cdfe:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1ce00:	462b      	mov	r3, r5
   1ce02:	4a08      	ldr	r2, [pc, #32]	; (1ce24 <bt_keys_clear+0x48>)
   1ce04:	2124      	movs	r1, #36	; 0x24
   1ce06:	a803      	add	r0, sp, #12
   1ce08:	f7f9 f9d4 	bl	161b4 <bt_settings_encode_key>
		settings_delete(key);
   1ce0c:	a803      	add	r0, sp, #12
   1ce0e:	f006 fb81 	bl	23514 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1ce12:	225c      	movs	r2, #92	; 0x5c
   1ce14:	2100      	movs	r1, #0
   1ce16:	4620      	mov	r0, r4
   1ce18:	f007 fe7f 	bl	24b1a <memset>
}
   1ce1c:	b00c      	add	sp, #48	; 0x30
   1ce1e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   1ce20:	9200      	str	r2, [sp, #0]
   1ce22:	e7ed      	b.n	1ce00 <bt_keys_clear+0x24>
   1ce24:	00029e6d 	.word	0x00029e6d

0001ce28 <keys_set>:
{
   1ce28:	b570      	push	{r4, r5, r6, lr}
   1ce2a:	4605      	mov	r5, r0
   1ce2c:	b098      	sub	sp, #96	; 0x60
   1ce2e:	4614      	mov	r4, r2
   1ce30:	4618      	mov	r0, r3
	if (!name) {
   1ce32:	b945      	cbnz	r5, 1ce46 <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   1ce34:	4830      	ldr	r0, [pc, #192]	; (1cef8 <keys_set+0xd0>)
   1ce36:	2145      	movs	r1, #69	; 0x45
   1ce38:	f005 ff78 	bl	22d2c <printk>
		return -EINVAL;
   1ce3c:	f06f 0415 	mvn.w	r4, #21
}
   1ce40:	4620      	mov	r0, r4
   1ce42:	b018      	add	sp, #96	; 0x60
   1ce44:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1ce46:	2250      	movs	r2, #80	; 0x50
   1ce48:	a904      	add	r1, sp, #16
   1ce4a:	47a0      	blx	r4
	if (len < 0) {
   1ce4c:	1e04      	subs	r4, r0, #0
   1ce4e:	da05      	bge.n	1ce5c <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   1ce50:	482a      	ldr	r0, [pc, #168]	; (1cefc <keys_set+0xd4>)
   1ce52:	4622      	mov	r2, r4
   1ce54:	2145      	movs	r1, #69	; 0x45
   1ce56:	f005 ff69 	bl	22d2c <printk>
   1ce5a:	e7ef      	b.n	1ce3c <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1ce5c:	a902      	add	r1, sp, #8
   1ce5e:	4628      	mov	r0, r5
   1ce60:	f007 fede 	bl	24c20 <bt_settings_decode_key>
	if (err) {
   1ce64:	4606      	mov	r6, r0
   1ce66:	b118      	cbz	r0, 1ce70 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   1ce68:	4825      	ldr	r0, [pc, #148]	; (1cf00 <keys_set+0xd8>)
   1ce6a:	462a      	mov	r2, r5
   1ce6c:	2145      	movs	r1, #69	; 0x45
   1ce6e:	e7f2      	b.n	1ce56 <keys_set+0x2e>
	settings_name_next(name, &next);
   1ce70:	a901      	add	r1, sp, #4
   1ce72:	4628      	mov	r0, r5
   1ce74:	f006 fb75 	bl	23562 <settings_name_next>
	if (!next) {
   1ce78:	9801      	ldr	r0, [sp, #4]
   1ce7a:	b120      	cbz	r0, 1ce86 <keys_set+0x5e>
		id = strtol(next, NULL, 10);
   1ce7c:	220a      	movs	r2, #10
   1ce7e:	4631      	mov	r1, r6
   1ce80:	f007 fd6e 	bl	24960 <strtol>
   1ce84:	b2c0      	uxtb	r0, r0
	if (!len) {
   1ce86:	b99c      	cbnz	r4, 1ceb0 <keys_set+0x88>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1ce88:	4601      	mov	r1, r0
   1ce8a:	aa02      	add	r2, sp, #8
   1ce8c:	203f      	movs	r0, #63	; 0x3f
   1ce8e:	f7ff ff45 	bl	1cd1c <bt_keys_find>
		if (keys) {
   1ce92:	b120      	cbz	r0, 1ce9e <keys_set+0x76>
			(void)memset(keys, 0, sizeof(*keys));
   1ce94:	225c      	movs	r2, #92	; 0x5c
   1ce96:	4621      	mov	r1, r4
   1ce98:	f007 fe3f 	bl	24b1a <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1ce9c:	e7d0      	b.n	1ce40 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   1ce9e:	a802      	add	r0, sp, #8
   1cea0:	f7f8 ff2e 	bl	15d00 <bt_addr_le_str_real>
   1cea4:	2157      	movs	r1, #87	; 0x57
   1cea6:	4602      	mov	r2, r0
   1cea8:	4816      	ldr	r0, [pc, #88]	; (1cf04 <keys_set+0xdc>)
   1ceaa:	f005 ff3f 	bl	22d2c <printk>
   1ceae:	e7c7      	b.n	1ce40 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
   1ceb0:	a902      	add	r1, sp, #8
   1ceb2:	f7ff fef3 	bl	1cc9c <bt_keys_get_addr>
	if (!keys) {
   1ceb6:	4605      	mov	r5, r0
   1ceb8:	b950      	cbnz	r0, 1ced0 <keys_set+0xa8>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1ceba:	a802      	add	r0, sp, #8
   1cebc:	f7f8 ff20 	bl	15d00 <bt_addr_le_str_real>
   1cec0:	2145      	movs	r1, #69	; 0x45
   1cec2:	4602      	mov	r2, r0
   1cec4:	4810      	ldr	r0, [pc, #64]	; (1cf08 <keys_set+0xe0>)
   1cec6:	f005 ff31 	bl	22d2c <printk>
		return -ENOMEM;
   1ceca:	f06f 040b 	mvn.w	r4, #11
   1cece:	e7b7      	b.n	1ce40 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1ced0:	2c50      	cmp	r4, #80	; 0x50
   1ced2:	d009      	beq.n	1cee8 <keys_set+0xc0>
			BT_ERR("Invalid key length %zd != %zu", len,
   1ced4:	480d      	ldr	r0, [pc, #52]	; (1cf0c <keys_set+0xe4>)
   1ced6:	2350      	movs	r3, #80	; 0x50
   1ced8:	4622      	mov	r2, r4
   1ceda:	2145      	movs	r1, #69	; 0x45
   1cedc:	f005 ff26 	bl	22d2c <printk>
			bt_keys_clear(keys);
   1cee0:	4628      	mov	r0, r5
   1cee2:	f7ff ff7b 	bl	1cddc <bt_keys_clear>
			return -EINVAL;
   1cee6:	e7a9      	b.n	1ce3c <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   1cee8:	4622      	mov	r2, r4
   1ceea:	a904      	add	r1, sp, #16
   1ceec:	300c      	adds	r0, #12
   1ceee:	f007 fde9 	bl	24ac4 <memcpy>
	return 0;
   1cef2:	2400      	movs	r4, #0
   1cef4:	e7a4      	b.n	1ce40 <keys_set+0x18>
   1cef6:	bf00      	nop
   1cef8:	00028738 	.word	0x00028738
   1cefc:	00029db5 	.word	0x00029db5
   1cf00:	00029854 	.word	0x00029854
   1cf04:	00029dd9 	.word	0x00029dd9
   1cf08:	00029e01 	.word	0x00029e01
   1cf0c:	00029e25 	.word	0x00029e25

0001cf10 <bt_keys_store>:
{
   1cf10:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1cf12:	4605      	mov	r5, r0
{
   1cf14:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1cf16:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1cf1a:	4604      	mov	r4, r0
	if (keys->id) {
   1cf1c:	b1da      	cbz	r2, 1cf56 <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
   1cf1e:	ae02      	add	r6, sp, #8
   1cf20:	2104      	movs	r1, #4
   1cf22:	4630      	mov	r0, r6
   1cf24:	f005 fe66 	bl	22bf4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1cf28:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1cf2a:	4a0c      	ldr	r2, [pc, #48]	; (1cf5c <bt_keys_store+0x4c>)
   1cf2c:	462b      	mov	r3, r5
   1cf2e:	2124      	movs	r1, #36	; 0x24
   1cf30:	a803      	add	r0, sp, #12
   1cf32:	f7f9 f93f 	bl	161b4 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1cf36:	f104 010c 	add.w	r1, r4, #12
   1cf3a:	2250      	movs	r2, #80	; 0x50
   1cf3c:	a803      	add	r0, sp, #12
   1cf3e:	f7f7 fa37 	bl	143b0 <settings_save_one>
	if (err) {
   1cf42:	4604      	mov	r4, r0
   1cf44:	b120      	cbz	r0, 1cf50 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
   1cf46:	4602      	mov	r2, r0
   1cf48:	2145      	movs	r1, #69	; 0x45
   1cf4a:	4805      	ldr	r0, [pc, #20]	; (1cf60 <bt_keys_store+0x50>)
   1cf4c:	f005 feee 	bl	22d2c <printk>
}
   1cf50:	4620      	mov	r0, r4
   1cf52:	b00c      	add	sp, #48	; 0x30
   1cf54:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1cf56:	9200      	str	r2, [sp, #0]
   1cf58:	e7e7      	b.n	1cf2a <bt_keys_store+0x1a>
   1cf5a:	bf00      	nop
   1cf5c:	00029e6d 	.word	0x00029e6d
   1cf60:	00029e48 	.word	0x00029e48

0001cf64 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1cf64:	4b02      	ldr	r3, [pc, #8]	; (1cf70 <net_buf_pool_get+0xc>)
   1cf66:	222c      	movs	r2, #44	; 0x2c
   1cf68:	fb02 3000 	mla	r0, r2, r0, r3
   1cf6c:	4770      	bx	lr
   1cf6e:	bf00      	nop
   1cf70:	2000090c 	.word	0x2000090c

0001cf74 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cf74:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1cf76:	4a05      	ldr	r2, [pc, #20]	; (1cf8c <net_buf_id+0x18>)
   1cf78:	212c      	movs	r1, #44	; 0x2c
   1cf7a:	fb01 2303 	mla	r3, r1, r3, r2
   1cf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cf80:	1ac0      	subs	r0, r0, r3
}
   1cf82:	4b03      	ldr	r3, [pc, #12]	; (1cf90 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1cf84:	10c0      	asrs	r0, r0, #3
}
   1cf86:	4358      	muls	r0, r3
   1cf88:	4770      	bx	lr
   1cf8a:	bf00      	nop
   1cf8c:	2000090c 	.word	0x2000090c
   1cf90:	aaaaaaab 	.word	0xaaaaaaab

0001cf94 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1cf94:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cf96:	4a0a      	ldr	r2, [pc, #40]	; (1cfc0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cf98:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cf9a:	242c      	movs	r4, #44	; 0x2c
   1cf9c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1cfa0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cfa4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1cfa6:	6823      	ldr	r3, [r4, #0]
   1cfa8:	429a      	cmp	r2, r3
   1cfaa:	bf94      	ite	ls
   1cfac:	600a      	strls	r2, [r1, #0]
   1cfae:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1cfb0:	f7ff ffe0 	bl	1cf74 <net_buf_id>
   1cfb4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1cfb8:	fb02 3000 	mla	r0, r2, r0, r3
   1cfbc:	bd10      	pop	{r4, pc}
   1cfbe:	bf00      	nop
   1cfc0:	2000090c 	.word	0x2000090c

0001cfc4 <net_buf_reset>:
{
   1cfc4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1cfc6:	7943      	ldrb	r3, [r0, #5]
{
   1cfc8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1cfca:	b143      	cbz	r3, 1cfde <net_buf_reset+0x1a>
   1cfcc:	490c      	ldr	r1, [pc, #48]	; (1d000 <net_buf_reset+0x3c>)
   1cfce:	480d      	ldr	r0, [pc, #52]	; (1d004 <net_buf_reset+0x40>)
   1cfd0:	224f      	movs	r2, #79	; 0x4f
   1cfd2:	f005 feab 	bl	22d2c <printk>
   1cfd6:	480a      	ldr	r0, [pc, #40]	; (1d000 <net_buf_reset+0x3c>)
   1cfd8:	214f      	movs	r1, #79	; 0x4f
   1cfda:	f006 f90a 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1cfde:	6823      	ldr	r3, [r4, #0]
   1cfe0:	b143      	cbz	r3, 1cff4 <net_buf_reset+0x30>
   1cfe2:	4907      	ldr	r1, [pc, #28]	; (1d000 <net_buf_reset+0x3c>)
   1cfe4:	4807      	ldr	r0, [pc, #28]	; (1d004 <net_buf_reset+0x40>)
   1cfe6:	2250      	movs	r2, #80	; 0x50
   1cfe8:	f005 fea0 	bl	22d2c <printk>
   1cfec:	4804      	ldr	r0, [pc, #16]	; (1d000 <net_buf_reset+0x3c>)
   1cfee:	2150      	movs	r1, #80	; 0x50
   1cff0:	f006 f8ff 	bl	231f2 <assert_post_action>
	buf->len  = 0U;
   1cff4:	2300      	movs	r3, #0
   1cff6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1cff8:	6923      	ldr	r3, [r4, #16]
   1cffa:	60a3      	str	r3, [r4, #8]
}
   1cffc:	bd10      	pop	{r4, pc}
   1cffe:	bf00      	nop
   1d000:	00029e7a 	.word	0x00029e7a
   1d004:	00027c9a 	.word	0x00027c9a

0001d008 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d008:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d00c:	4605      	mov	r5, r0
   1d00e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1d010:	4610      	mov	r0, r2
   1d012:	4619      	mov	r1, r3
{
   1d014:	4616      	mov	r6, r2
   1d016:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1d018:	f009 fe5f 	bl	26cda <z_timeout_end_calc>
   1d01c:	4680      	mov	r8, r0
   1d01e:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1d020:	b945      	cbnz	r5, 1d034 <net_buf_alloc_len+0x2c>
   1d022:	494a      	ldr	r1, [pc, #296]	; (1d14c <net_buf_alloc_len+0x144>)
   1d024:	484a      	ldr	r0, [pc, #296]	; (1d150 <net_buf_alloc_len+0x148>)
   1d026:	22f1      	movs	r2, #241	; 0xf1
   1d028:	f005 fe80 	bl	22d2c <printk>
   1d02c:	4847      	ldr	r0, [pc, #284]	; (1d14c <net_buf_alloc_len+0x144>)
   1d02e:	21f1      	movs	r1, #241	; 0xf1
   1d030:	f006 f8df 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   1d034:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d038:	f3ef 8a11 	mrs	sl, BASEPRI
   1d03c:	f383 8811 	msr	BASEPRI, r3
   1d040:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d044:	8beb      	ldrh	r3, [r5, #30]
   1d046:	2b00      	cmp	r3, #0
   1d048:	d055      	beq.n	1d0f6 <net_buf_alloc_len+0xee>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d04a:	8baa      	ldrh	r2, [r5, #28]
   1d04c:	429a      	cmp	r2, r3
   1d04e:	d93e      	bls.n	1d0ce <net_buf_alloc_len+0xc6>
	return z_impl_k_queue_get(queue, timeout);
   1d050:	2200      	movs	r2, #0
   1d052:	2300      	movs	r3, #0
   1d054:	4628      	mov	r0, r5
   1d056:	f003 fc49 	bl	208ec <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d05a:	4604      	mov	r4, r0
   1d05c:	2800      	cmp	r0, #0
   1d05e:	d036      	beq.n	1d0ce <net_buf_alloc_len+0xc6>
	__asm__ volatile(
   1d060:	f38a 8811 	msr	BASEPRI, sl
   1d064:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d068:	f8dd a004 	ldr.w	sl, [sp, #4]
   1d06c:	f1ba 0f00 	cmp.w	sl, #0
   1d070:	d069      	beq.n	1d146 <net_buf_alloc_len+0x13e>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d072:	ea56 0307 	orrs.w	r3, r6, r7
   1d076:	d010      	beq.n	1d09a <net_buf_alloc_len+0x92>
   1d078:	1c7b      	adds	r3, r7, #1
   1d07a:	bf08      	it	eq
   1d07c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1d080:	d00b      	beq.n	1d09a <net_buf_alloc_len+0x92>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1d082:	f005 fa43 	bl	2250c <z_tick_get>
   1d086:	ebb8 0600 	subs.w	r6, r8, r0
   1d08a:	eb69 0701 	sbc.w	r7, r9, r1
   1d08e:	2e00      	cmp	r6, #0
   1d090:	f177 0300 	sbcs.w	r3, r7, #0
   1d094:	bfbc      	itt	lt
   1d096:	2600      	movlt	r6, #0
   1d098:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d09a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d09c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1d154 <net_buf_alloc_len+0x14c>
   1d0a0:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1d0a4:	fb09 8303 	mla	r3, r9, r3, r8
   1d0a8:	4632      	mov	r2, r6
   1d0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d0ac:	681b      	ldr	r3, [r3, #0]
   1d0ae:	a901      	add	r1, sp, #4
   1d0b0:	681d      	ldr	r5, [r3, #0]
   1d0b2:	4620      	mov	r0, r4
   1d0b4:	463b      	mov	r3, r7
   1d0b6:	47a8      	blx	r5
   1d0b8:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d0ba:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d0bc:	bb58      	cbnz	r0, 1d116 <net_buf_alloc_len+0x10e>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1d0be:	79a0      	ldrb	r0, [r4, #6]
   1d0c0:	4621      	mov	r1, r4
   1d0c2:	fb00 8009 	mla	r0, r0, r9, r8
   1d0c6:	f009 fd28 	bl	26b1a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d0ca:	462c      	mov	r4, r5
}
   1d0cc:	e01f      	b.n	1d10e <net_buf_alloc_len+0x106>
		uninit_count = pool->uninit_count--;
   1d0ce:	8be8      	ldrh	r0, [r5, #30]
   1d0d0:	1e43      	subs	r3, r0, #1
   1d0d2:	83eb      	strh	r3, [r5, #30]
   1d0d4:	f38a 8811 	msr	BASEPRI, sl
   1d0d8:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d0dc:	8bac      	ldrh	r4, [r5, #28]
   1d0de:	1a24      	subs	r4, r4, r0
   1d0e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d0e2:	2318      	movs	r3, #24
   1d0e4:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1d0e8:	481a      	ldr	r0, [pc, #104]	; (1d154 <net_buf_alloc_len+0x14c>)
   1d0ea:	4b1b      	ldr	r3, [pc, #108]	; (1d158 <net_buf_alloc_len+0x150>)
   1d0ec:	1a2d      	subs	r5, r5, r0
   1d0ee:	10ad      	asrs	r5, r5, #2
   1d0f0:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d0f2:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d0f4:	e7b8      	b.n	1d068 <net_buf_alloc_len+0x60>
   1d0f6:	f38a 8811 	msr	BASEPRI, sl
   1d0fa:	f3bf 8f6f 	isb	sy
   1d0fe:	4632      	mov	r2, r6
   1d100:	463b      	mov	r3, r7
   1d102:	4628      	mov	r0, r5
   1d104:	f003 fbf2 	bl	208ec <z_impl_k_queue_get>
	if (!buf) {
   1d108:	4604      	mov	r4, r0
   1d10a:	2800      	cmp	r0, #0
   1d10c:	d1ac      	bne.n	1d068 <net_buf_alloc_len+0x60>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d10e:	4620      	mov	r0, r4
   1d110:	b002      	add	sp, #8
   1d112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1d116:	9b01      	ldr	r3, [sp, #4]
   1d118:	459a      	cmp	sl, r3
   1d11a:	d90a      	bls.n	1d132 <net_buf_alloc_len+0x12a>
   1d11c:	490b      	ldr	r1, [pc, #44]	; (1d14c <net_buf_alloc_len+0x144>)
   1d11e:	480c      	ldr	r0, [pc, #48]	; (1d150 <net_buf_alloc_len+0x148>)
   1d120:	f240 1251 	movw	r2, #337	; 0x151
   1d124:	f005 fe02 	bl	22d2c <printk>
   1d128:	4808      	ldr	r0, [pc, #32]	; (1d14c <net_buf_alloc_len+0x144>)
   1d12a:	f240 1151 	movw	r1, #337	; 0x151
   1d12e:	f006 f860 	bl	231f2 <assert_post_action>
	buf->frags = NULL;
   1d132:	2300      	movs	r3, #0
   1d134:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d136:	2301      	movs	r3, #1
   1d138:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1d13a:	9b01      	ldr	r3, [sp, #4]
   1d13c:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1d13e:	4620      	mov	r0, r4
   1d140:	f7ff ff40 	bl	1cfc4 <net_buf_reset>
	return buf;
   1d144:	e7e3      	b.n	1d10e <net_buf_alloc_len+0x106>
		buf->__buf = NULL;
   1d146:	f8c4 a010 	str.w	sl, [r4, #16]
   1d14a:	e7f2      	b.n	1d132 <net_buf_alloc_len+0x12a>
   1d14c:	00029e7a 	.word	0x00029e7a
   1d150:	00027c9a 	.word	0x00027c9a
   1d154:	2000090c 	.word	0x2000090c
   1d158:	ba2e8ba3 	.word	0xba2e8ba3

0001d15c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1d15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d160:	4606      	mov	r6, r0
   1d162:	f003 fbc3 	bl	208ec <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1d166:	4605      	mov	r5, r0
   1d168:	b140      	cbz	r0, 1d17c <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1d16a:	4f12      	ldr	r7, [pc, #72]	; (1d1b4 <net_buf_get+0x58>)
   1d16c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1d1b8 <net_buf_get+0x5c>
   1d170:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d172:	7963      	ldrb	r3, [r4, #5]
   1d174:	f013 0301 	ands.w	r3, r3, #1
   1d178:	d103      	bne.n	1d182 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1d17a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1d17c:	4628      	mov	r0, r5
   1d17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d182:	2200      	movs	r2, #0
   1d184:	2300      	movs	r3, #0
   1d186:	4630      	mov	r0, r6
   1d188:	f003 fbb0 	bl	208ec <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1d18c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1d18e:	b950      	cbnz	r0, 1d1a6 <net_buf_get+0x4a>
   1d190:	4639      	mov	r1, r7
   1d192:	4640      	mov	r0, r8
   1d194:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
   1d198:	f005 fdc8 	bl	22d2c <printk>
   1d19c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   1d1a0:	4638      	mov	r0, r7
   1d1a2:	f006 f826 	bl	231f2 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1d1a6:	7963      	ldrb	r3, [r4, #5]
   1d1a8:	f023 0301 	bic.w	r3, r3, #1
   1d1ac:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d1ae:	6824      	ldr	r4, [r4, #0]
   1d1b0:	e7df      	b.n	1d172 <net_buf_get+0x16>
   1d1b2:	bf00      	nop
   1d1b4:	00029e7a 	.word	0x00029e7a
   1d1b8:	00027c9a 	.word	0x00027c9a

0001d1bc <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1d1bc:	b538      	push	{r3, r4, r5, lr}
   1d1be:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1d1c0:	4604      	mov	r4, r0
   1d1c2:	b950      	cbnz	r0, 1d1da <net_buf_simple_reserve+0x1e>
   1d1c4:	490d      	ldr	r1, [pc, #52]	; (1d1fc <net_buf_simple_reserve+0x40>)
   1d1c6:	480e      	ldr	r0, [pc, #56]	; (1d200 <net_buf_simple_reserve+0x44>)
   1d1c8:	f240 12bf 	movw	r2, #447	; 0x1bf
   1d1cc:	f005 fdae 	bl	22d2c <printk>
   1d1d0:	480a      	ldr	r0, [pc, #40]	; (1d1fc <net_buf_simple_reserve+0x40>)
   1d1d2:	f240 11bf 	movw	r1, #447	; 0x1bf
   1d1d6:	f006 f80c 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1d1da:	88a3      	ldrh	r3, [r4, #4]
   1d1dc:	b153      	cbz	r3, 1d1f4 <net_buf_simple_reserve+0x38>
   1d1de:	4907      	ldr	r1, [pc, #28]	; (1d1fc <net_buf_simple_reserve+0x40>)
   1d1e0:	4807      	ldr	r0, [pc, #28]	; (1d200 <net_buf_simple_reserve+0x44>)
   1d1e2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1d1e6:	f005 fda1 	bl	22d2c <printk>
   1d1ea:	4804      	ldr	r0, [pc, #16]	; (1d1fc <net_buf_simple_reserve+0x40>)
   1d1ec:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1d1f0:	f005 ffff 	bl	231f2 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1d1f4:	68a3      	ldr	r3, [r4, #8]
   1d1f6:	442b      	add	r3, r5
   1d1f8:	6023      	str	r3, [r4, #0]
}
   1d1fa:	bd38      	pop	{r3, r4, r5, pc}
   1d1fc:	00029e7a 	.word	0x00029e7a
   1d200:	00027c9a 	.word	0x00027c9a

0001d204 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1d204:	b538      	push	{r3, r4, r5, lr}
   1d206:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1d208:	4605      	mov	r5, r0
   1d20a:	b950      	cbnz	r0, 1d222 <net_buf_put+0x1e>
   1d20c:	4912      	ldr	r1, [pc, #72]	; (1d258 <net_buf_put+0x54>)
   1d20e:	4813      	ldr	r0, [pc, #76]	; (1d25c <net_buf_put+0x58>)
   1d210:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
   1d214:	f005 fd8a 	bl	22d2c <printk>
   1d218:	480f      	ldr	r0, [pc, #60]	; (1d258 <net_buf_put+0x54>)
   1d21a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   1d21e:	f005 ffe8 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1d222:	b954      	cbnz	r4, 1d23a <net_buf_put+0x36>
   1d224:	490c      	ldr	r1, [pc, #48]	; (1d258 <net_buf_put+0x54>)
   1d226:	480d      	ldr	r0, [pc, #52]	; (1d25c <net_buf_put+0x58>)
   1d228:	f240 12fd 	movw	r2, #509	; 0x1fd
   1d22c:	f005 fd7e 	bl	22d2c <printk>
   1d230:	4809      	ldr	r0, [pc, #36]	; (1d258 <net_buf_put+0x54>)
   1d232:	f240 11fd 	movw	r1, #509	; 0x1fd
   1d236:	f005 ffdc 	bl	231f2 <assert_post_action>
{
   1d23a:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1d23c:	6811      	ldr	r1, [r2, #0]
   1d23e:	b929      	cbnz	r1, 1d24c <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1d240:	4621      	mov	r1, r4
   1d242:	4628      	mov	r0, r5
}
   1d244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1d248:	f003 bafc 	b.w	20844 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1d24c:	7953      	ldrb	r3, [r2, #5]
   1d24e:	f043 0301 	orr.w	r3, r3, #1
   1d252:	7153      	strb	r3, [r2, #5]
   1d254:	460a      	mov	r2, r1
   1d256:	e7f1      	b.n	1d23c <net_buf_put+0x38>
   1d258:	00029e7a 	.word	0x00029e7a
   1d25c:	00027c9a 	.word	0x00027c9a

0001d260 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1d264:	4605      	mov	r5, r0
   1d266:	b328      	cbz	r0, 1d2b4 <net_buf_unref+0x54>
   1d268:	4e1c      	ldr	r6, [pc, #112]	; (1d2dc <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d26a:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1d26c:	f04f 082c 	mov.w	r8, #44	; 0x2c
		struct net_buf *frags = buf->frags;
   1d270:	462c      	mov	r4, r5
   1d272:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1d274:	7923      	ldrb	r3, [r4, #4]
   1d276:	3b01      	subs	r3, #1
   1d278:	b2db      	uxtb	r3, r3
   1d27a:	7123      	strb	r3, [r4, #4]
   1d27c:	b9c3      	cbnz	r3, 1d2b0 <net_buf_unref+0x50>
		if (buf->__buf) {
   1d27e:	6921      	ldr	r1, [r4, #16]
   1d280:	b159      	cbz	r1, 1d29a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d282:	7963      	ldrb	r3, [r4, #5]
   1d284:	079b      	lsls	r3, r3, #30
   1d286:	d407      	bmi.n	1d298 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   1d288:	79a3      	ldrb	r3, [r4, #6]
   1d28a:	fb08 6303 	mla	r3, r8, r3, r6
   1d28e:	4620      	mov	r0, r4
   1d290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d292:	681b      	ldr	r3, [r3, #0]
   1d294:	689b      	ldr	r3, [r3, #8]
   1d296:	4798      	blx	r3
			buf->__buf = NULL;
   1d298:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1d29a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d29c:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1d29e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1d2a2:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1d2a4:	6a1b      	ldr	r3, [r3, #32]
   1d2a6:	b193      	cbz	r3, 1d2ce <net_buf_unref+0x6e>
			pool->destroy(buf);
   1d2a8:	4620      	mov	r0, r4
   1d2aa:	4798      	blx	r3
	while (buf) {
   1d2ac:	2d00      	cmp	r5, #0
   1d2ae:	d1df      	bne.n	1d270 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1d2b4:	490a      	ldr	r1, [pc, #40]	; (1d2e0 <net_buf_unref+0x80>)
   1d2b6:	480b      	ldr	r0, [pc, #44]	; (1d2e4 <net_buf_unref+0x84>)
   1d2b8:	f44f 7203 	mov.w	r2, #524	; 0x20c
   1d2bc:	f005 fd36 	bl	22d2c <printk>
}
   1d2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1d2c4:	4806      	ldr	r0, [pc, #24]	; (1d2e0 <net_buf_unref+0x80>)
   1d2c6:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1d2ca:	f005 bf92 	b.w	231f2 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1d2ce:	4621      	mov	r1, r4
   1d2d0:	fb00 6008 	mla	r0, r0, r8, r6
   1d2d4:	f009 fc21 	bl	26b1a <k_queue_prepend>
}
   1d2d8:	e7e8      	b.n	1d2ac <net_buf_unref+0x4c>
   1d2da:	bf00      	nop
   1d2dc:	2000090c 	.word	0x2000090c
   1d2e0:	00029e7a 	.word	0x00029e7a
   1d2e4:	00027c9a 	.word	0x00027c9a

0001d2e8 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1d2e8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1d2ea:	4604      	mov	r4, r0
   1d2ec:	b950      	cbnz	r0, 1d304 <net_buf_ref+0x1c>
   1d2ee:	4908      	ldr	r1, [pc, #32]	; (1d310 <net_buf_ref+0x28>)
   1d2f0:	4808      	ldr	r0, [pc, #32]	; (1d314 <net_buf_ref+0x2c>)
   1d2f2:	f240 223b 	movw	r2, #571	; 0x23b
   1d2f6:	f005 fd19 	bl	22d2c <printk>
   1d2fa:	4805      	ldr	r0, [pc, #20]	; (1d310 <net_buf_ref+0x28>)
   1d2fc:	f240 213b 	movw	r1, #571	; 0x23b
   1d300:	f005 ff77 	bl	231f2 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1d304:	7923      	ldrb	r3, [r4, #4]
   1d306:	3301      	adds	r3, #1
   1d308:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1d30a:	4620      	mov	r0, r4
   1d30c:	bd10      	pop	{r4, pc}
   1d30e:	bf00      	nop
   1d310:	00029e7a 	.word	0x00029e7a
   1d314:	00027c9a 	.word	0x00027c9a

0001d318 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1d318:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1d31a:	4604      	mov	r4, r0
   1d31c:	b950      	cbnz	r0, 1d334 <net_buf_frag_last+0x1c>
   1d31e:	4908      	ldr	r1, [pc, #32]	; (1d340 <net_buf_frag_last+0x28>)
   1d320:	4808      	ldr	r0, [pc, #32]	; (1d344 <net_buf_frag_last+0x2c>)
   1d322:	f44f 721e 	mov.w	r2, #632	; 0x278
   1d326:	f005 fd01 	bl	22d2c <printk>
   1d32a:	4805      	ldr	r0, [pc, #20]	; (1d340 <net_buf_frag_last+0x28>)
   1d32c:	f44f 711e 	mov.w	r1, #632	; 0x278
   1d330:	f005 ff5f 	bl	231f2 <assert_post_action>

	while (buf->frags) {
   1d334:	4620      	mov	r0, r4
   1d336:	6824      	ldr	r4, [r4, #0]
   1d338:	2c00      	cmp	r4, #0
   1d33a:	d1fb      	bne.n	1d334 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1d33c:	bd10      	pop	{r4, pc}
   1d33e:	bf00      	nop
   1d340:	00029e7a 	.word	0x00029e7a
   1d344:	00027c9a 	.word	0x00027c9a

0001d348 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1d348:	b538      	push	{r3, r4, r5, lr}
   1d34a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1d34c:	4604      	mov	r4, r0
   1d34e:	b950      	cbnz	r0, 1d366 <net_buf_frag_insert+0x1e>
   1d350:	490f      	ldr	r1, [pc, #60]	; (1d390 <net_buf_frag_insert+0x48>)
   1d352:	4810      	ldr	r0, [pc, #64]	; (1d394 <net_buf_frag_insert+0x4c>)
   1d354:	f240 2283 	movw	r2, #643	; 0x283
   1d358:	f005 fce8 	bl	22d2c <printk>
   1d35c:	480c      	ldr	r0, [pc, #48]	; (1d390 <net_buf_frag_insert+0x48>)
   1d35e:	f240 2183 	movw	r1, #643	; 0x283
   1d362:	f005 ff46 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1d366:	b955      	cbnz	r5, 1d37e <net_buf_frag_insert+0x36>
   1d368:	4909      	ldr	r1, [pc, #36]	; (1d390 <net_buf_frag_insert+0x48>)
   1d36a:	480a      	ldr	r0, [pc, #40]	; (1d394 <net_buf_frag_insert+0x4c>)
   1d36c:	f44f 7221 	mov.w	r2, #644	; 0x284
   1d370:	f005 fcdc 	bl	22d2c <printk>
   1d374:	4806      	ldr	r0, [pc, #24]	; (1d390 <net_buf_frag_insert+0x48>)
   1d376:	f44f 7121 	mov.w	r1, #644	; 0x284
   1d37a:	f005 ff3a 	bl	231f2 <assert_post_action>

	if (parent->frags) {
   1d37e:	6823      	ldr	r3, [r4, #0]
   1d380:	b123      	cbz	r3, 1d38c <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1d382:	4628      	mov	r0, r5
   1d384:	f7ff ffc8 	bl	1d318 <net_buf_frag_last>
   1d388:	6823      	ldr	r3, [r4, #0]
   1d38a:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1d38c:	6025      	str	r5, [r4, #0]
}
   1d38e:	bd38      	pop	{r3, r4, r5, pc}
   1d390:	00029e7a 	.word	0x00029e7a
   1d394:	00027c9a 	.word	0x00027c9a

0001d398 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1d398:	b538      	push	{r3, r4, r5, lr}
   1d39a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1d39c:	460d      	mov	r5, r1
   1d39e:	b951      	cbnz	r1, 1d3b6 <net_buf_frag_add+0x1e>
   1d3a0:	490c      	ldr	r1, [pc, #48]	; (1d3d4 <net_buf_frag_add+0x3c>)
   1d3a2:	480d      	ldr	r0, [pc, #52]	; (1d3d8 <net_buf_frag_add+0x40>)
   1d3a4:	f240 228f 	movw	r2, #655	; 0x28f
   1d3a8:	f005 fcc0 	bl	22d2c <printk>
   1d3ac:	4809      	ldr	r0, [pc, #36]	; (1d3d4 <net_buf_frag_add+0x3c>)
   1d3ae:	f240 218f 	movw	r1, #655	; 0x28f
   1d3b2:	f005 ff1e 	bl	231f2 <assert_post_action>

	if (!head) {
   1d3b6:	b924      	cbnz	r4, 1d3c2 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1d3b8:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1d3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1d3be:	f7ff bf93 	b.w	1d2e8 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1d3c2:	4620      	mov	r0, r4
   1d3c4:	f7ff ffa8 	bl	1d318 <net_buf_frag_last>
   1d3c8:	4629      	mov	r1, r5
   1d3ca:	f7ff ffbd 	bl	1d348 <net_buf_frag_insert>
}
   1d3ce:	4620      	mov	r0, r4
   1d3d0:	bd38      	pop	{r3, r4, r5, pc}
   1d3d2:	bf00      	nop
   1d3d4:	00029e7a 	.word	0x00029e7a
   1d3d8:	00027c9a 	.word	0x00027c9a

0001d3dc <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1d3dc:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1d3de:	6882      	ldr	r2, [r0, #8]
   1d3e0:	6803      	ldr	r3, [r0, #0]
   1d3e2:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d3e4:	4299      	cmp	r1, r3
{
   1d3e6:	4604      	mov	r4, r0
   1d3e8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d3ea:	d90a      	bls.n	1d402 <net_buf_simple_push+0x26>
   1d3ec:	4908      	ldr	r1, [pc, #32]	; (1d410 <net_buf_simple_push+0x34>)
   1d3ee:	4809      	ldr	r0, [pc, #36]	; (1d414 <net_buf_simple_push+0x38>)
   1d3f0:	f240 327d 	movw	r2, #893	; 0x37d
   1d3f4:	f005 fc9a 	bl	22d2c <printk>
   1d3f8:	4805      	ldr	r0, [pc, #20]	; (1d410 <net_buf_simple_push+0x34>)
   1d3fa:	f240 317d 	movw	r1, #893	; 0x37d
   1d3fe:	f005 fef8 	bl	231f2 <assert_post_action>
	buf->data -= len;
   1d402:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1d404:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1d406:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1d408:	440d      	add	r5, r1
	buf->data -= len;
   1d40a:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1d40c:	80a5      	strh	r5, [r4, #4]
}
   1d40e:	bd38      	pop	{r3, r4, r5, pc}
   1d410:	00029e7a 	.word	0x00029e7a
   1d414:	00027c9a 	.word	0x00027c9a

0001d418 <net_buf_simple_pull>:
{
   1d418:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1d41a:	8883      	ldrh	r3, [r0, #4]
   1d41c:	428b      	cmp	r3, r1
{
   1d41e:	4604      	mov	r4, r0
   1d420:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d422:	d20a      	bcs.n	1d43a <net_buf_simple_pull+0x22>
   1d424:	4908      	ldr	r1, [pc, #32]	; (1d448 <net_buf_simple_pull+0x30>)
   1d426:	4809      	ldr	r0, [pc, #36]	; (1d44c <net_buf_simple_pull+0x34>)
   1d428:	f240 32d5 	movw	r2, #981	; 0x3d5
   1d42c:	f005 fc7e 	bl	22d2c <printk>
   1d430:	4805      	ldr	r0, [pc, #20]	; (1d448 <net_buf_simple_pull+0x30>)
   1d432:	f240 31d5 	movw	r1, #981	; 0x3d5
   1d436:	f005 fedc 	bl	231f2 <assert_post_action>
	buf->len -= len;
   1d43a:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1d43c:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1d43e:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1d440:	4428      	add	r0, r5
	buf->len -= len;
   1d442:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1d444:	6020      	str	r0, [r4, #0]
}
   1d446:	bd38      	pop	{r3, r4, r5, pc}
   1d448:	00029e7a 	.word	0x00029e7a
   1d44c:	00027c9a 	.word	0x00027c9a

0001d450 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1d450:	8883      	ldrh	r3, [r0, #4]
   1d452:	428b      	cmp	r3, r1
{
   1d454:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1d456:	6806      	ldr	r6, [r0, #0]
{
   1d458:	4604      	mov	r4, r0
   1d45a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d45c:	d20a      	bcs.n	1d474 <net_buf_simple_pull_mem+0x24>
   1d45e:	4909      	ldr	r1, [pc, #36]	; (1d484 <net_buf_simple_pull_mem+0x34>)
   1d460:	4809      	ldr	r0, [pc, #36]	; (1d488 <net_buf_simple_pull_mem+0x38>)
   1d462:	f240 32e1 	movw	r2, #993	; 0x3e1
   1d466:	f005 fc61 	bl	22d2c <printk>
   1d46a:	4806      	ldr	r0, [pc, #24]	; (1d484 <net_buf_simple_pull_mem+0x34>)
   1d46c:	f240 31e1 	movw	r1, #993	; 0x3e1
   1d470:	f005 febf 	bl	231f2 <assert_post_action>
	buf->len -= len;
   1d474:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1d476:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1d478:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1d47a:	4429      	add	r1, r5
	buf->len -= len;
   1d47c:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1d47e:	6021      	str	r1, [r4, #0]
}
   1d480:	4630      	mov	r0, r6
   1d482:	bd70      	pop	{r4, r5, r6, pc}
   1d484:	00029e7a 	.word	0x00029e7a
   1d488:	00027c9a 	.word	0x00027c9a

0001d48c <net_buf_simple_add>:
{
   1d48c:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1d48e:	6803      	ldr	r3, [r0, #0]
   1d490:	8886      	ldrh	r6, [r0, #4]
   1d492:	4604      	mov	r4, r0
   1d494:	460d      	mov	r5, r1
   1d496:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d498:	f009 f8b7 	bl	2660a <net_buf_simple_tailroom>
   1d49c:	4288      	cmp	r0, r1
   1d49e:	d20a      	bcs.n	1d4b6 <net_buf_simple_add+0x2a>
   1d4a0:	4907      	ldr	r1, [pc, #28]	; (1d4c0 <net_buf_simple_add+0x34>)
   1d4a2:	4808      	ldr	r0, [pc, #32]	; (1d4c4 <net_buf_simple_add+0x38>)
   1d4a4:	f240 3219 	movw	r2, #793	; 0x319
   1d4a8:	f005 fc40 	bl	22d2c <printk>
   1d4ac:	4804      	ldr	r0, [pc, #16]	; (1d4c0 <net_buf_simple_add+0x34>)
   1d4ae:	f240 3119 	movw	r1, #793	; 0x319
   1d4b2:	f005 fe9e 	bl	231f2 <assert_post_action>
	buf->len += len;
   1d4b6:	88a1      	ldrh	r1, [r4, #4]
   1d4b8:	440d      	add	r5, r1
   1d4ba:	80a5      	strh	r5, [r4, #4]
}
   1d4bc:	4630      	mov	r0, r6
   1d4be:	bd70      	pop	{r4, r5, r6, pc}
   1d4c0:	00029e7a 	.word	0x00029e7a
   1d4c4:	00027c9a 	.word	0x00027c9a

0001d4c8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1d4c8:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d4ca:	68c5      	ldr	r5, [r0, #12]
{
   1d4cc:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d4ce:	460c      	mov	r4, r1
   1d4d0:	b941      	cbnz	r1, 1d4e4 <gpio_nrfx_manage_callback+0x1c>
   1d4d2:	491e      	ldr	r1, [pc, #120]	; (1d54c <gpio_nrfx_manage_callback+0x84>)
   1d4d4:	481e      	ldr	r0, [pc, #120]	; (1d550 <gpio_nrfx_manage_callback+0x88>)
   1d4d6:	2224      	movs	r2, #36	; 0x24
   1d4d8:	f005 fc28 	bl	22d2c <printk>
   1d4dc:	481b      	ldr	r0, [pc, #108]	; (1d54c <gpio_nrfx_manage_callback+0x84>)
   1d4de:	2124      	movs	r1, #36	; 0x24
   1d4e0:	f005 fe87 	bl	231f2 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1d4e4:	6863      	ldr	r3, [r4, #4]
   1d4e6:	b943      	cbnz	r3, 1d4fa <gpio_nrfx_manage_callback+0x32>
   1d4e8:	4918      	ldr	r1, [pc, #96]	; (1d54c <gpio_nrfx_manage_callback+0x84>)
   1d4ea:	4819      	ldr	r0, [pc, #100]	; (1d550 <gpio_nrfx_manage_callback+0x88>)
   1d4ec:	2225      	movs	r2, #37	; 0x25
   1d4ee:	f005 fc1d 	bl	22d2c <printk>
   1d4f2:	4816      	ldr	r0, [pc, #88]	; (1d54c <gpio_nrfx_manage_callback+0x84>)
   1d4f4:	2125      	movs	r1, #37	; 0x25
   1d4f6:	f005 fe7c 	bl	231f2 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1d4fa:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d4fc:	b15b      	cbz	r3, 1d516 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d4fe:	2200      	movs	r2, #0
   1d500:	429c      	cmp	r4, r3
   1d502:	d113      	bne.n	1d52c <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
   1d504:	6823      	ldr	r3, [r4, #0]
   1d506:	b95a      	cbnz	r2, 1d520 <gpio_nrfx_manage_callback+0x58>
   1d508:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   1d50a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d50c:	4294      	cmp	r4, r2
   1d50e:	d100      	bne.n	1d512 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1d510:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1d512:	2300      	movs	r3, #0
   1d514:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d516:	b976      	cbnz	r6, 1d536 <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d518:	2000      	movs	r0, #0
				     callback, set);
}
   1d51a:	bd70      	pop	{r4, r5, r6, pc}
   1d51c:	460b      	mov	r3, r1
   1d51e:	e7ef      	b.n	1d500 <gpio_nrfx_manage_callback+0x38>
   1d520:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d522:	68ab      	ldr	r3, [r5, #8]
   1d524:	429c      	cmp	r4, r3
	list->tail = node;
   1d526:	bf08      	it	eq
   1d528:	60aa      	streq	r2, [r5, #8]
}
   1d52a:	e7f2      	b.n	1d512 <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d52c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d52e:	461a      	mov	r2, r3
   1d530:	2900      	cmp	r1, #0
   1d532:	d1f3      	bne.n	1d51c <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1d534:	b13e      	cbz	r6, 1d546 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
   1d536:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1d538:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d53a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   1d53c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d53e:	2800      	cmp	r0, #0
   1d540:	d1ea      	bne.n	1d518 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1d542:	60ac      	str	r4, [r5, #8]
}
   1d544:	e7e9      	b.n	1d51a <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1d546:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d54a:	e7e6      	b.n	1d51a <gpio_nrfx_manage_callback+0x52>
   1d54c:	00029ea6 	.word	0x00029ea6
   1d550:	00027c9a 	.word	0x00027c9a

0001d554 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d554:	6803      	ldr	r3, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1d556:	095a      	lsrs	r2, r3, #5
   1d558:	bf0c      	ite	eq
   1d55a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1d55e:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1d560:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1d564:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d568:	07db      	lsls	r3, r3, #31
{
   1d56a:	b510      	push	{r4, lr}
   1d56c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d56e:	d40a      	bmi.n	1d586 <nrf_gpio_pin_port_decode+0x32>
   1d570:	490f      	ldr	r1, [pc, #60]	; (1d5b0 <nrf_gpio_pin_port_decode+0x5c>)
   1d572:	4810      	ldr	r0, [pc, #64]	; (1d5b4 <nrf_gpio_pin_port_decode+0x60>)
   1d574:	f240 221a 	movw	r2, #538	; 0x21a
   1d578:	f005 fbd8 	bl	22d2c <printk>
   1d57c:	480c      	ldr	r0, [pc, #48]	; (1d5b0 <nrf_gpio_pin_port_decode+0x5c>)
   1d57e:	f240 211a 	movw	r1, #538	; 0x21a
   1d582:	f005 fe36 	bl	231f2 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1d586:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1d588:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d58c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1d58e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d590:	d00a      	beq.n	1d5a8 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   1d592:	4907      	ldr	r1, [pc, #28]	; (1d5b0 <nrf_gpio_pin_port_decode+0x5c>)
   1d594:	4807      	ldr	r0, [pc, #28]	; (1d5b4 <nrf_gpio_pin_port_decode+0x60>)
   1d596:	f240 221f 	movw	r2, #543	; 0x21f
   1d59a:	f005 fbc7 	bl	22d2c <printk>
   1d59e:	4804      	ldr	r0, [pc, #16]	; (1d5b0 <nrf_gpio_pin_port_decode+0x5c>)
   1d5a0:	f240 211f 	movw	r1, #543	; 0x21f
   1d5a4:	f005 fe25 	bl	231f2 <assert_post_action>
}
   1d5a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1d5ac:	bd10      	pop	{r4, pc}
   1d5ae:	bf00      	nop
   1d5b0:	00029ed3 	.word	0x00029ed3
   1d5b4:	00027c9a 	.word	0x00027c9a

0001d5b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d5b8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d5ba:	4b09      	ldr	r3, [pc, #36]	; (1d5e0 <gpio_nrfx_init+0x28>)
   1d5bc:	781a      	ldrb	r2, [r3, #0]
   1d5be:	b96a      	cbnz	r2, 1d5dc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1d5c0:	2101      	movs	r1, #1
   1d5c2:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d5c4:	2006      	movs	r0, #6
   1d5c6:	2105      	movs	r1, #5
   1d5c8:	f7f7 fe72 	bl	152b0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d5cc:	2006      	movs	r0, #6
   1d5ce:	f7f7 fe5f 	bl	15290 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d5d2:	4b04      	ldr	r3, [pc, #16]	; (1d5e4 <gpio_nrfx_init+0x2c>)
   1d5d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d5d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d5dc:	2000      	movs	r0, #0
   1d5de:	bd08      	pop	{r3, pc}
   1d5e0:	20003111 	.word	0x20003111
   1d5e4:	40006000 	.word	0x40006000

0001d5e8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d5e8:	4b2e      	ldr	r3, [pc, #184]	; (1d6a4 <gpio_nrfx_config+0xbc>)
{
   1d5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d5ec:	4c2e      	ldr	r4, [pc, #184]	; (1d6a8 <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5ee:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d5f0:	4013      	ands	r3, r2
   1d5f2:	42a3      	cmp	r3, r4
   1d5f4:	d045      	beq.n	1d682 <gpio_nrfx_config+0x9a>
   1d5f6:	d80e      	bhi.n	1d616 <gpio_nrfx_config+0x2e>
   1d5f8:	2b06      	cmp	r3, #6
   1d5fa:	d044      	beq.n	1d686 <gpio_nrfx_config+0x9e>
   1d5fc:	d806      	bhi.n	1d60c <gpio_nrfx_config+0x24>
   1d5fe:	2b00      	cmp	r3, #0
   1d600:	d041      	beq.n	1d686 <gpio_nrfx_config+0x9e>
   1d602:	2b02      	cmp	r3, #2
   1d604:	d041      	beq.n	1d68a <gpio_nrfx_config+0xa2>
   1d606:	f06f 0015 	mvn.w	r0, #21
   1d60a:	e038      	b.n	1d67e <gpio_nrfx_config+0x96>
   1d60c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d610:	d1f9      	bne.n	1d606 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   1d612:	2401      	movs	r4, #1
   1d614:	e009      	b.n	1d62a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d616:	4c25      	ldr	r4, [pc, #148]	; (1d6ac <gpio_nrfx_config+0xc4>)
   1d618:	42a3      	cmp	r3, r4
   1d61a:	d038      	beq.n	1d68e <gpio_nrfx_config+0xa6>
   1d61c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d620:	d037      	beq.n	1d692 <gpio_nrfx_config+0xaa>
   1d622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d626:	d1ee      	bne.n	1d606 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   1d628:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1d62a:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d62c:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   1d630:	bf54      	ite	pl
   1d632:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1d636:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d638:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1d63c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1d63e:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1d642:	d507      	bpl.n	1d654 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d644:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d646:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d64a:	d524      	bpl.n	1d696 <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1d64c:	2301      	movs	r3, #1
   1d64e:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1d650:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1d654:	7a03      	ldrb	r3, [r0, #8]
   1d656:	f001 011f 	and.w	r1, r1, #31
   1d65a:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d65e:	a801      	add	r0, sp, #4
   1d660:	9101      	str	r1, [sp, #4]
   1d662:	f7ff ff77 	bl	1d554 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d666:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d668:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   1d66c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d670:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d674:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d678:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   1d67c:	2000      	movs	r0, #0
}
   1d67e:	b003      	add	sp, #12
   1d680:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1d682:	2407      	movs	r4, #7
   1d684:	e7d1      	b.n	1d62a <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d686:	461c      	mov	r4, r3
   1d688:	e7cf      	b.n	1d62a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   1d68a:	2404      	movs	r4, #4
   1d68c:	e7cd      	b.n	1d62a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   1d68e:	2405      	movs	r4, #5
   1d690:	e7cb      	b.n	1d62a <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   1d692:	2403      	movs	r4, #3
   1d694:	e7c9      	b.n	1d62a <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d696:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1d698:	bf42      	ittt	mi
   1d69a:	2301      	movmi	r3, #1
   1d69c:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   1d69e:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
   1d6a2:	e7d7      	b.n	1d654 <gpio_nrfx_config+0x6c>
   1d6a4:	00f00006 	.word	0x00f00006
   1d6a8:	00100006 	.word	0x00100006
   1d6ac:	00400002 	.word	0x00400002

0001d6b0 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d6b0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1d6b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   1d6b8:	68c4      	ldr	r4, [r0, #12]
{
   1d6ba:	4680      	mov	r8, r0
   1d6bc:	460d      	mov	r5, r1
   1d6be:	4617      	mov	r7, r2
   1d6c0:	4699      	mov	r9, r3
   1d6c2:	f001 061f 	and.w	r6, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d6c6:	f040 80c2 	bne.w	1d84e <gpio_nrfx_pin_interrupt_configure+0x19e>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d6ca:	6843      	ldr	r3, [r0, #4]
   1d6cc:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d6ce:	a801      	add	r0, sp, #4
   1d6d0:	ea46 1343 	orr.w	r3, r6, r3, lsl #5
   1d6d4:	9301      	str	r3, [sp, #4]
   1d6d6:	f7ff ff3d 	bl	1d554 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d6da:	9b01      	ldr	r3, [sp, #4]
   1d6dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d6e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d6e4:	07db      	lsls	r3, r3, #31
   1d6e6:	f100 80d6 	bmi.w	1d896 <gpio_nrfx_pin_interrupt_configure+0x1e6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d6ea:	68e3      	ldr	r3, [r4, #12]
   1d6ec:	2101      	movs	r1, #1
   1d6ee:	40a9      	lsls	r1, r5
   1d6f0:	4319      	orrs	r1, r3
   1d6f2:	6963      	ldr	r3, [r4, #20]
   1d6f4:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d6f6:	2101      	movs	r1, #1
   1d6f8:	40a9      	lsls	r1, r5
   1d6fa:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   1d6fe:	bf0c      	ite	eq
   1d700:	430b      	orreq	r3, r1
   1d702:	438b      	bicne	r3, r1
   1d704:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d706:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1d708:	4a64      	ldr	r2, [pc, #400]	; (1d89c <gpio_nrfx_pin_interrupt_configure+0x1ec>)
	struct gpio_nrfx_data *data = get_port_data(port);
   1d70a:	f8d8 700c 	ldr.w	r7, [r8, #12]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d70e:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   1d712:	bf0c      	ite	eq
   1d714:	430b      	orreq	r3, r1
   1d716:	438b      	bicne	r3, r1
   1d718:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d71a:	6923      	ldr	r3, [r4, #16]
   1d71c:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1d720:	bf0c      	ite	eq
   1d722:	4319      	orreq	r1, r3
   1d724:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d728:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d72c:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d72e:	7a18      	ldrb	r0, [r3, #8]
   1d730:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
   1d734:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
   1d738:	b2c9      	uxtb	r1, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d73a:	2300      	movs	r3, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d73c:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1d740:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1d744:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d748:	4286      	cmp	r6, r0
   1d74a:	f040 808b 	bne.w	1d864 <gpio_nrfx_pin_interrupt_configure+0x1b4>
		    && (intenset & BIT(i))) {
   1d74e:	fa21 f003 	lsr.w	r0, r1, r3
   1d752:	07c0      	lsls	r0, r0, #31
   1d754:	f140 8086 	bpl.w	1d864 <gpio_nrfx_pin_interrupt_configure+0x1b4>
			(void)atomic_and(mask, ~BIT(i));
   1d758:	2101      	movs	r1, #1
   1d75a:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d75c:	4850      	ldr	r0, [pc, #320]	; (1d8a0 <gpio_nrfx_pin_interrupt_configure+0x1f0>)
   1d75e:	f3bf 8f5b 	dmb	ish
   1d762:	43cc      	mvns	r4, r1
   1d764:	e850 cf00 	ldrex	ip, [r0]
   1d768:	ea0c 0c04 	and.w	ip, ip, r4
   1d76c:	e840 ce00 	strex	lr, ip, [r0]
   1d770:	f1be 0f00 	cmp.w	lr, #0
   1d774:	d1f6      	bne.n	1d764 <gpio_nrfx_pin_interrupt_configure+0xb4>
   1d776:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d77a:	009b      	lsls	r3, r3, #2
   1d77c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d780:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d784:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1d788:	f020 0001 	bic.w	r0, r0, #1
   1d78c:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1d790:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d794:	2100      	movs	r1, #0
   1d796:	4630      	mov	r0, r6
   1d798:	f008 ff79 	bl	2668e <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1d79c:	68fb      	ldr	r3, [r7, #12]
   1d79e:	40eb      	lsrs	r3, r5
   1d7a0:	f013 0301 	ands.w	r3, r3, #1
   1d7a4:	d051      	beq.n	1d84a <gpio_nrfx_pin_interrupt_configure+0x19a>
		if (data->trig_edge & BIT(pin)) {
   1d7a6:	697b      	ldr	r3, [r7, #20]
   1d7a8:	40eb      	lsrs	r3, r5
   1d7aa:	f013 0401 	ands.w	r4, r3, #1
   1d7ae:	d066      	beq.n	1d87e <gpio_nrfx_pin_interrupt_configure+0x1ce>
			if (data->double_edge & BIT(pin)) {
   1d7b0:	69bb      	ldr	r3, [r7, #24]
   1d7b2:	40eb      	lsrs	r3, r5
   1d7b4:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d7b6:	bf5f      	itttt	pl
   1d7b8:	6939      	ldrpl	r1, [r7, #16]
   1d7ba:	fa21 f505 	lsrpl.w	r5, r1, r5
   1d7be:	f005 0501 	andpl.w	r5, r5, #1
   1d7c2:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d7c6:	4936      	ldr	r1, [pc, #216]	; (1d8a0 <gpio_nrfx_pin_interrupt_configure+0x1f0>)
   1d7c8:	bf54      	ite	pl
   1d7ca:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1d7cc:	2503      	movmi	r5, #3
   1d7ce:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1d7d0:	2701      	movs	r7, #1
   1d7d2:	fa07 f402 	lsl.w	r4, r7, r2
   1d7d6:	f3bf 8f5b 	dmb	ish
   1d7da:	e851 0f00 	ldrex	r0, [r1]
   1d7de:	ea40 0304 	orr.w	r3, r0, r4
   1d7e2:	e841 3c00 	strex	ip, r3, [r1]
   1d7e6:	f1bc 0f00 	cmp.w	ip, #0
   1d7ea:	d1f6      	bne.n	1d7da <gpio_nrfx_pin_interrupt_configure+0x12a>
   1d7ec:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1d7f0:	40d0      	lsrs	r0, r2
   1d7f2:	f010 0301 	ands.w	r3, r0, #1
   1d7f6:	d13a      	bne.n	1d86e <gpio_nrfx_pin_interrupt_configure+0x1be>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d7f8:	0091      	lsls	r1, r2, #2
   1d7fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1d7fe:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   1d802:	3240      	adds	r2, #64	; 0x40
   1d804:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1d808:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1d80c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1d810:	0092      	lsls	r2, r2, #2
   1d812:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d816:	0236      	lsls	r6, r6, #8
    return ((uint32_t)p_reg + event);
   1d818:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d81a:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1d81e:	f406 56f8 	and.w	r6, r6, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   1d822:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d826:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d82a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   1d82e:	4306      	orrs	r6, r0
   1d830:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d834:	6013      	str	r3, [r2, #0]
   1d836:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d838:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   1d83c:	f042 0201 	orr.w	r2, r2, #1
   1d840:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1d844:	4a15      	ldr	r2, [pc, #84]	; (1d89c <gpio_nrfx_pin_interrupt_configure+0x1ec>)
   1d846:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
	int res = 0;
   1d84a:	4618      	mov	r0, r3
   1d84c:	e014      	b.n	1d878 <gpio_nrfx_pin_interrupt_configure+0x1c8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d84e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1d852:	f47f af4a 	bne.w	1d6ea <gpio_nrfx_pin_interrupt_configure+0x3a>
   1d856:	2101      	movs	r1, #1
   1d858:	fa01 f305 	lsl.w	r3, r1, r5
   1d85c:	68e1      	ldr	r1, [r4, #12]
   1d85e:	ea21 0103 	bic.w	r1, r1, r3
   1d862:	e746      	b.n	1d6f2 <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d864:	3301      	adds	r3, #1
   1d866:	2b08      	cmp	r3, #8
   1d868:	f47f af68 	bne.w	1d73c <gpio_nrfx_pin_interrupt_configure+0x8c>
   1d86c:	e792      	b.n	1d794 <gpio_nrfx_pin_interrupt_configure+0xe4>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1d86e:	3201      	adds	r2, #1
   1d870:	2a08      	cmp	r2, #8
   1d872:	d1ae      	bne.n	1d7d2 <gpio_nrfx_pin_interrupt_configure+0x122>
	return -ENODEV;
   1d874:	f06f 0012 	mvn.w	r0, #18
}
   1d878:	b003      	add	sp, #12
   1d87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d87e:	6939      	ldr	r1, [r7, #16]
   1d880:	40e9      	lsrs	r1, r5
   1d882:	f001 0101 	and.w	r1, r1, #1
   1d886:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d88a:	4630      	mov	r0, r6
   1d88c:	b2c9      	uxtb	r1, r1
   1d88e:	f008 fefe 	bl	2668e <nrf_gpio_cfg_sense_set>
	int res = 0;
   1d892:	4620      	mov	r0, r4
   1d894:	e7f0      	b.n	1d878 <gpio_nrfx_pin_interrupt_configure+0x1c8>
		return -ENOTSUP;
   1d896:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d89a:	e7ed      	b.n	1d878 <gpio_nrfx_pin_interrupt_configure+0x1c8>
   1d89c:	40006000 	.word	0x40006000
   1d8a0:	20002a44 	.word	0x20002a44

0001d8a4 <gpiote_event_handler>:
{
   1d8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8a8:	4e4a      	ldr	r6, [pc, #296]	; (1d9d4 <gpiote_event_handler+0x130>)
   1d8aa:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   1d8ac:	2f00      	cmp	r7, #0
   1d8ae:	d052      	beq.n	1d956 <gpiote_event_handler+0xb2>
	uint32_t out = data->pin_int_en;
   1d8b0:	4b49      	ldr	r3, [pc, #292]	; (1d9d8 <gpiote_event_handler+0x134>)
	out &= ~data->trig_edge & ~data->double_edge;
   1d8b2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   1d8b6:	68dd      	ldr	r5, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1d8b8:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   1d8ba:	430a      	orrs	r2, r1
   1d8bc:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   1d8c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   1d8c4:	f04f 0801 	mov.w	r8, #1
   1d8c8:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1d8cc:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1d8ce:	ea25 0404 	bic.w	r4, r5, r4
	uint32_t pin = 0U;
   1d8d2:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
   1d8d6:	bb7d      	cbnz	r5, 1d938 <gpiote_event_handler+0x94>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d8d8:	6035      	str	r5, [r6, #0]
   1d8da:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   1d8dc:	483f      	ldr	r0, [pc, #252]	; (1d9dc <gpiote_event_handler+0x138>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1d8de:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1d8e0:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d8e2:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   1d8e4:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1d8e8:	fa05 f103 	lsl.w	r1, r5, r3
   1d8ec:	4211      	tst	r1, r2
   1d8ee:	d011      	beq.n	1d914 <gpiote_event_handler+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8f0:	009a      	lsls	r2, r3, #2
   1d8f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d8f6:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   1d8fa:	6811      	ldr	r1, [r2, #0]
   1d8fc:	b151      	cbz	r1, 1d914 <gpiote_event_handler+0x70>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d8fe:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1d902:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d906:	6016      	str	r6, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d908:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1d90c:	fa05 f101 	lsl.w	r1, r5, r1
   1d910:	6812      	ldr	r2, [r2, #0]
   1d912:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d914:	3301      	adds	r3, #1
   1d916:	2b08      	cmp	r3, #8
   1d918:	d1e4      	bne.n	1d8e4 <gpiote_event_handler+0x40>
	if (fired_triggers[0]) {
   1d91a:	b9f4      	cbnz	r4, 1d95a <gpiote_event_handler+0xb6>
	if (port_event) {
   1d91c:	b157      	cbz	r7, 1d934 <gpiote_event_handler+0x90>
	uint32_t out = data->pin_int_en;
   1d91e:	4d2e      	ldr	r5, [pc, #184]	; (1d9d8 <gpiote_event_handler+0x134>)
	out &= ~data->trig_edge & ~data->double_edge;
   1d920:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
	uint32_t out = data->pin_int_en;
   1d924:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d926:	430a      	orrs	r2, r1
   1d928:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t bit = 1U << pin;
   1d92c:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d92e:	2700      	movs	r7, #0
	while (level_pins) {
   1d930:	2c00      	cmp	r4, #0
   1d932:	d13d      	bne.n	1d9b0 <gpiote_event_handler+0x10c>
}
   1d934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   1d938:	ea15 0f08 	tst.w	r5, r8
   1d93c:	d006      	beq.n	1d94c <gpiote_event_handler+0xa8>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d93e:	2100      	movs	r1, #0
   1d940:	f009 001f 	and.w	r0, r9, #31
   1d944:	f008 fea3 	bl	2668e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d948:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   1d94c:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1d950:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1d954:	e7bf      	b.n	1d8d6 <gpiote_event_handler+0x32>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1d956:	463c      	mov	r4, r7
   1d958:	e7c0      	b.n	1d8dc <gpiote_event_handler+0x38>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d95a:	4b1f      	ldr	r3, [pc, #124]	; (1d9d8 <gpiote_event_handler+0x134>)
   1d95c:	685d      	ldr	r5, [r3, #4]
   1d95e:	2d00      	cmp	r5, #0
   1d960:	d0dc      	beq.n	1d91c <gpiote_event_handler+0x78>
	return node->next;
   1d962:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d964:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1d9e0 <gpiote_event_handler+0x13c>
			__ASSERT(cb->handler, "No callback handler!");
   1d968:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1d9e4 <gpiote_event_handler+0x140>
   1d96c:	f8df a078 	ldr.w	sl, [pc, #120]	; 1d9e8 <gpiote_event_handler+0x144>
   1d970:	2e00      	cmp	r6, #0
   1d972:	bf38      	it	cc
   1d974:	2600      	movcc	r6, #0
		if (cb->pin_mask & pins) {
   1d976:	68ab      	ldr	r3, [r5, #8]
   1d978:	421c      	tst	r4, r3
   1d97a:	d010      	beq.n	1d99e <gpiote_event_handler+0xfa>
			__ASSERT(cb->handler, "No callback handler!");
   1d97c:	686b      	ldr	r3, [r5, #4]
   1d97e:	b943      	cbnz	r3, 1d992 <gpiote_event_handler+0xee>
   1d980:	4641      	mov	r1, r8
   1d982:	4650      	mov	r0, sl
   1d984:	2245      	movs	r2, #69	; 0x45
   1d986:	f005 f9d1 	bl	22d2c <printk>
   1d98a:	2145      	movs	r1, #69	; 0x45
   1d98c:	4640      	mov	r0, r8
   1d98e:	f005 fc30 	bl	231f2 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d992:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   1d996:	4629      	mov	r1, r5
   1d998:	4022      	ands	r2, r4
   1d99a:	4648      	mov	r0, r9
   1d99c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d99e:	2e00      	cmp	r6, #0
   1d9a0:	d0bc      	beq.n	1d91c <gpiote_event_handler+0x78>
   1d9a2:	6833      	ldr	r3, [r6, #0]
   1d9a4:	2b00      	cmp	r3, #0
   1d9a6:	bf38      	it	cc
   1d9a8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d9aa:	4635      	mov	r5, r6
   1d9ac:	461e      	mov	r6, r3
   1d9ae:	e7e2      	b.n	1d976 <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
   1d9b0:	4226      	tst	r6, r4
   1d9b2:	d00c      	beq.n	1d9ce <gpiote_event_handler+0x12a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d9b4:	6929      	ldr	r1, [r5, #16]
   1d9b6:	40f9      	lsrs	r1, r7
   1d9b8:	f001 0101 	and.w	r1, r1, #1
   1d9bc:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d9c0:	b2c9      	uxtb	r1, r1
   1d9c2:	f007 001f 	and.w	r0, r7, #31
   1d9c6:	f008 fe62 	bl	2668e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d9ca:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d9ce:	3701      	adds	r7, #1
		bit <<= 1;
   1d9d0:	0076      	lsls	r6, r6, #1
   1d9d2:	e7ad      	b.n	1d930 <gpiote_event_handler+0x8c>
   1d9d4:	4000617c 	.word	0x4000617c
   1d9d8:	20002a28 	.word	0x20002a28
   1d9dc:	40006000 	.word	0x40006000
   1d9e0:	200007dc 	.word	0x200007dc
   1d9e4:	00029ea6 	.word	0x00029ea6
   1d9e8:	00027c9a 	.word	0x00027c9a

0001d9ec <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   1d9ec:	4802      	ldr	r0, [pc, #8]	; (1d9f8 <pwm_nrfx_get_cycles_per_sec+0xc>)
   1d9ee:	2100      	movs	r1, #0
   1d9f0:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   1d9f4:	2000      	movs	r0, #0
   1d9f6:	4770      	bx	lr
   1d9f8:	00f42400 	.word	0x00f42400

0001d9fc <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d9fc:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1d9fe:	095a      	lsrs	r2, r3, #5
   1da00:	bf0c      	ite	eq
   1da02:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1da06:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1da08:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1da0c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1da10:	07db      	lsls	r3, r3, #31
{
   1da12:	b510      	push	{r4, lr}
   1da14:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1da16:	d40a      	bmi.n	1da2e <nrf_gpio_pin_port_decode+0x32>
   1da18:	490f      	ldr	r1, [pc, #60]	; (1da58 <nrf_gpio_pin_port_decode+0x5c>)
   1da1a:	4810      	ldr	r0, [pc, #64]	; (1da5c <nrf_gpio_pin_port_decode+0x60>)
   1da1c:	f240 221a 	movw	r2, #538	; 0x21a
   1da20:	f005 f984 	bl	22d2c <printk>
   1da24:	480c      	ldr	r0, [pc, #48]	; (1da58 <nrf_gpio_pin_port_decode+0x5c>)
   1da26:	f240 211a 	movw	r1, #538	; 0x21a
   1da2a:	f005 fbe2 	bl	231f2 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1da2e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1da30:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1da34:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1da36:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1da38:	d00a      	beq.n	1da50 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   1da3a:	4907      	ldr	r1, [pc, #28]	; (1da58 <nrf_gpio_pin_port_decode+0x5c>)
   1da3c:	4807      	ldr	r0, [pc, #28]	; (1da5c <nrf_gpio_pin_port_decode+0x60>)
   1da3e:	f240 221f 	movw	r2, #543	; 0x21f
   1da42:	f005 f973 	bl	22d2c <printk>
   1da46:	4804      	ldr	r0, [pc, #16]	; (1da58 <nrf_gpio_pin_port_decode+0x5c>)
   1da48:	f240 211f 	movw	r1, #543	; 0x21f
   1da4c:	f005 fbd1 	bl	231f2 <assert_post_action>
}
   1da50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1da54:	bd10      	pop	{r4, pc}
   1da56:	bf00      	nop
   1da58:	00029ed3 	.word	0x00029ed3
   1da5c:	00027c9a 	.word	0x00027c9a

0001da60 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   1da60:	b510      	push	{r4, lr}
   1da62:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config;
   1da64:	6840      	ldr	r0, [r0, #4]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   1da66:	2300      	movs	r3, #0
   1da68:	461a      	mov	r2, r3
   1da6a:	f100 0108 	add.w	r1, r0, #8
   1da6e:	f001 ffcf 	bl	1fa10 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   1da72:	4b06      	ldr	r3, [pc, #24]	; (1da8c <pwm_nrfx_init+0x2c>)
   1da74:	4298      	cmp	r0, r3
   1da76:	d007      	beq.n	1da88 <pwm_nrfx_init+0x28>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1da78:	4805      	ldr	r0, [pc, #20]	; (1da90 <pwm_nrfx_init+0x30>)
   1da7a:	6822      	ldr	r2, [r4, #0]
   1da7c:	2145      	movs	r1, #69	; 0x45
   1da7e:	f005 f955 	bl	22d2c <printk>
   1da82:	f06f 000f 	mvn.w	r0, #15
		return -EBUSY;
	}

	return 0;
}
   1da86:	bd10      	pop	{r4, pc}
	return 0;
   1da88:	2000      	movs	r0, #0
   1da8a:	e7fc      	b.n	1da86 <pwm_nrfx_init+0x26>
   1da8c:	0bad0000 	.word	0x0bad0000
   1da90:	00029f0d 	.word	0x00029f0d

0001da94 <pwm_nrfx_pin_set>:
{
   1da94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da98:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
   1da9c:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   1da9e:	68c4      	ldr	r4, [r0, #12]
{
   1daa0:	4688      	mov	r8, r1
   1daa2:	4616      	mov	r6, r2
   1daa4:	4699      	mov	r9, r3
	if (flags) {
   1daa6:	2d00      	cmp	r5, #0
   1daa8:	d178      	bne.n	1db9c <pwm_nrfx_pin_set+0x108>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1daaa:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   1daac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1dab0:	2bff      	cmp	r3, #255	; 0xff
   1dab2:	d003      	beq.n	1dabc <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   1dab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1dab8:	4598      	cmp	r8, r3
   1daba:	d072      	beq.n	1dba2 <pwm_nrfx_pin_set+0x10e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1dabc:	3501      	adds	r5, #1
   1dabe:	b2ed      	uxtb	r5, r5
   1dac0:	2d04      	cmp	r5, #4
   1dac2:	d1f3      	bne.n	1daac <pwm_nrfx_pin_set+0x18>
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   1dac4:	4856      	ldr	r0, [pc, #344]	; (1dc20 <pwm_nrfx_pin_set+0x18c>)
   1dac6:	4642      	mov	r2, r8
   1dac8:	2145      	movs	r1, #69	; 0x45
   1daca:	e03d      	b.n	1db48 <pwm_nrfx_pin_set+0xb4>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1dacc:	2000      	movs	r0, #0
   1dace:	e079      	b.n	1dbc4 <pwm_nrfx_pin_set+0x130>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1dad0:	3301      	adds	r3, #1
   1dad2:	2b04      	cmp	r3, #4
   1dad4:	f040 8082 	bne.w	1dbdc <pwm_nrfx_pin_set+0x148>
   1dad8:	4632      	mov	r2, r6
   1dada:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   1dadc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1dae0:	fa5f fc83 	uxtb.w	ip, r3
   1dae4:	d228      	bcs.n	1db38 <pwm_nrfx_pin_set+0xa4>
			data->prescaler     = prescaler;
   1dae6:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   1daea:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
   1daee:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
   1daf0:	81a2      	strh	r2, [r4, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   1daf2:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1daf6:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1dafa:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
   1dafe:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1db00:	454e      	cmp	r6, r9
   1db02:	4633      	mov	r3, r6
   1db04:	bf28      	it	cs
   1db06:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
   1db08:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1db0c:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   1db10:	ea42 020b 	orr.w	r2, r2, fp
   1db14:	b292      	uxth	r2, r2
	data->current[channel] = (
   1db16:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
   1db1a:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   1db1e:	b112      	cbz	r2, 1db26 <pwm_nrfx_pin_set+0x92>
   1db20:	89a1      	ldrh	r1, [r4, #12]
   1db22:	4291      	cmp	r1, r2
   1db24:	d813      	bhi.n	1db4e <pwm_nrfx_pin_set+0xba>
			config->initial_config.output_pins[channel]
   1db26:	197a      	adds	r2, r7, r5
   1db28:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
   1db2c:	b193      	cbz	r3, 1db54 <pwm_nrfx_pin_set+0xc0>
			&& channel_inverted_state;
   1db2e:	454e      	cmp	r6, r9
   1db30:	d86a      	bhi.n	1dc08 <pwm_nrfx_pin_set+0x174>
   1db32:	2a00      	cmp	r2, #0
   1db34:	db10      	blt.n	1db58 <pwm_nrfx_pin_set+0xc4>
   1db36:	e067      	b.n	1dc08 <pwm_nrfx_pin_set+0x174>
		countertop >>= 1;
   1db38:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1db3a:	2b08      	cmp	r3, #8
		countertop >>= 1;
   1db3c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1db40:	d1cc      	bne.n	1dadc <pwm_nrfx_pin_set+0x48>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   1db42:	4838      	ldr	r0, [pc, #224]	; (1dc24 <pwm_nrfx_pin_set+0x190>)
   1db44:	4632      	mov	r2, r6
   1db46:	2145      	movs	r1, #69	; 0x45
   1db48:	f005 f8f0 	bl	22d2c <printk>
   1db4c:	e055      	b.n	1dbfa <pwm_nrfx_pin_set+0x166>
		if (was_stopped) {
   1db4e:	b9c0      	cbnz	r0, 1db82 <pwm_nrfx_pin_set+0xee>
	return 0;
   1db50:	2000      	movs	r0, #0
   1db52:	e054      	b.n	1dbfe <pwm_nrfx_pin_set+0x16a>
			&& channel_inverted_state;
   1db54:	454e      	cmp	r6, r9
   1db56:	d855      	bhi.n	1dc04 <pwm_nrfx_pin_set+0x170>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1db58:	a801      	add	r0, sp, #4
   1db5a:	f8cd 8004 	str.w	r8, [sp, #4]
   1db5e:	f7ff ff4d 	bl	1d9fc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1db62:	9a01      	ldr	r2, [sp, #4]
   1db64:	2301      	movs	r3, #1
   1db66:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1db68:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
   1db6c:	4621      	mov	r1, r4
   1db6e:	4628      	mov	r0, r5
   1db70:	f008 fda0 	bl	266b4 <any_other_channel_is_active>
   1db74:	2800      	cmp	r0, #0
   1db76:	d1eb      	bne.n	1db50 <pwm_nrfx_pin_set+0xbc>
			nrfx_pwm_stop(&config->pwm, false);
   1db78:	4601      	mov	r1, r0
   1db7a:	4638      	mov	r0, r7
   1db7c:	f002 f898 	bl	1fcb0 <nrfx_pwm_stop>
   1db80:	e7e6      	b.n	1db50 <pwm_nrfx_pin_set+0xbc>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   1db82:	4638      	mov	r0, r7
   1db84:	f002 f86a 	bl	1fc5c <nrfx_pwm_is_stopped>
   1db88:	2800      	cmp	r0, #0
   1db8a:	d0fa      	beq.n	1db82 <pwm_nrfx_pin_set+0xee>
			nrfx_pwm_simple_playback(&config->pwm,
   1db8c:	2302      	movs	r3, #2
   1db8e:	2201      	movs	r2, #1
   1db90:	f107 0118 	add.w	r1, r7, #24
   1db94:	4638      	mov	r0, r7
   1db96:	f001 fff7 	bl	1fb88 <nrfx_pwm_simple_playback>
   1db9a:	e7d9      	b.n	1db50 <pwm_nrfx_pin_set+0xbc>
		return -ENOTSUP;
   1db9c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1dba0:	e02d      	b.n	1dbfe <pwm_nrfx_pin_set+0x16a>
	uint16_t pulse_cycle =
   1dba2:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   1dba6:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
   1dbaa:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   1dbae:	b113      	cbz	r3, 1dbb6 <pwm_nrfx_pin_set+0x122>
   1dbb0:	89a2      	ldrh	r2, [r4, #12]
   1dbb2:	429a      	cmp	r2, r3
   1dbb4:	d88a      	bhi.n	1dacc <pwm_nrfx_pin_set+0x38>
		      !any_other_channel_is_active(channel, data);
   1dbb6:	4621      	mov	r1, r4
   1dbb8:	4628      	mov	r0, r5
   1dbba:	f008 fd7b 	bl	266b4 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1dbbe:	f080 0001 	eor.w	r0, r0, #1
   1dbc2:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1dbc4:	7bb9      	ldrb	r1, [r7, #14]
	if (period_cycles != data->period_cycles) {
   1dbc6:	6823      	ldr	r3, [r4, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1dbc8:	2901      	cmp	r1, #1
		period_cycles /= 2;
   1dbca:	bf04      	itt	eq
   1dbcc:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
   1dbce:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != data->period_cycles) {
   1dbd2:	42b3      	cmp	r3, r6
   1dbd4:	d093      	beq.n	1dafe <pwm_nrfx_pin_set+0x6a>
   1dbd6:	2300      	movs	r3, #0
				data->current[i]
   1dbd8:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
   1dbdc:	b2da      	uxtb	r2, r3
   1dbde:	42aa      	cmp	r2, r5
   1dbe0:	f43f af76 	beq.w	1dad0 <pwm_nrfx_pin_set+0x3c>
			uint16_t channel_pulse_cycle =
   1dbe4:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   1dbe8:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1dbec:	2a00      	cmp	r2, #0
   1dbee:	f43f af6f 	beq.w	1dad0 <pwm_nrfx_pin_set+0x3c>
				LOG_ERR("Incompatible period.");
   1dbf2:	480d      	ldr	r0, [pc, #52]	; (1dc28 <pwm_nrfx_pin_set+0x194>)
   1dbf4:	2145      	movs	r1, #69	; 0x45
   1dbf6:	f005 f899 	bl	22d2c <printk>
	return -EINVAL;
   1dbfa:	f06f 0015 	mvn.w	r0, #21
}
   1dbfe:	b003      	add	sp, #12
   1dc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   1dc04:	2a00      	cmp	r2, #0
   1dc06:	daa7      	bge.n	1db58 <pwm_nrfx_pin_set+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1dc08:	a801      	add	r0, sp, #4
   1dc0a:	f8cd 8004 	str.w	r8, [sp, #4]
   1dc0e:	f7ff fef5 	bl	1d9fc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1dc12:	9a01      	ldr	r2, [sp, #4]
   1dc14:	2301      	movs	r3, #1
   1dc16:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1dc18:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   1dc1c:	e7a6      	b.n	1db6c <pwm_nrfx_pin_set+0xd8>
   1dc1e:	bf00      	nop
   1dc20:	00029f7b 	.word	0x00029f7b
   1dc24:	00029f4c 	.word	0x00029f4c
   1dc28:	00029f32 	.word	0x00029f32

0001dc2c <sdc_flash_parameters_get>:
		.write_block_size = FLASH_DRIVER_WRITE_BLOCK_SIZE,
		.erase_value = 0xff,
	};

	return &flash_parameters;
}
   1dc2c:	4800      	ldr	r0, [pc, #0]	; (1dc30 <sdc_flash_parameters_get+0x4>)
   1dc2e:	4770      	bx	lr
   1dc30:	000278f4 	.word	0x000278f4

0001dc34 <sdc_flash_page_layout_get>:
static void sdc_flash_page_layout_get(
	const struct device *dev,
	const struct flash_pages_layout **layout,
	size_t *layout_size)
{
	*layout = &dev_layout;
   1dc34:	4b02      	ldr	r3, [pc, #8]	; (1dc40 <sdc_flash_page_layout_get+0xc>)
   1dc36:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1dc38:	2301      	movs	r3, #1
   1dc3a:	6013      	str	r3, [r2, #0]
}
   1dc3c:	4770      	bx	lr
   1dc3e:	bf00      	nop
   1dc40:	20002a48 	.word	0x20002a48

0001dc44 <flash_op_execute>:
{
   1dc44:	b570      	push	{r4, r5, r6, lr}
	if (flash_state.op == FLASH_OP_WRITE) {
   1dc46:	4d2b      	ldr	r5, [pc, #172]	; (1dcf4 <flash_op_execute+0xb0>)
   1dc48:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1dc4c:	2b01      	cmp	r3, #1
   1dc4e:	462c      	mov	r4, r5
   1dc50:	d139      	bne.n	1dcc6 <flash_op_execute+0x82>
	    is_aligned_32((off_t) flash_state.data) &&
   1dc52:	e9d5 100b 	ldrd	r1, r0, [r5, #44]	; 0x2c
	if (is_aligned_32(flash_state.addr) &&
   1dc56:	ea41 0300 	orr.w	r3, r1, r0
   1dc5a:	079b      	lsls	r3, r3, #30
   1dc5c:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   1dc5e:	d116      	bne.n	1dc8e <flash_op_execute+0x4a>
	    is_aligned_32((off_t) flash_state.data) &&
   1dc60:	2e03      	cmp	r6, #3
   1dc62:	d914      	bls.n	1dc8e <flash_op_execute+0x4a>
		flash_state.prev_len = MIN(align_32(flash_state.len),
   1dc64:	f008 fedc 	bl	26a20 <nrfx_nvmc_flash_page_size_get>
	return (addr & ~0x3);
   1dc68:	f026 0503 	bic.w	r5, r6, #3
		flash_state.prev_len = MIN(align_32(flash_state.len),
   1dc6c:	4285      	cmp	r5, r0
   1dc6e:	d20b      	bcs.n	1dc88 <flash_op_execute+0x44>
	return (addr & ~0x3);
   1dc70:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1dc72:	f020 0003 	bic.w	r0, r0, #3
		flash_state.prev_len = MIN(align_32(flash_state.len),
   1dc76:	63a0      	str	r0, [r4, #56]	; 0x38
		return sdc_soc_flash_write_async(
   1dc78:	0882      	lsrs	r2, r0, #2
   1dc7a:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
   1dc7e:	4b1e      	ldr	r3, [pc, #120]	; (1dcf8 <flash_op_execute+0xb4>)
}
   1dc80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sdc_soc_flash_write_async(
   1dc84:	f7e6 b810 	b.w	3ca8 <sdc_soc_flash_write_async>
		flash_state.prev_len = MIN(align_32(flash_state.len),
   1dc88:	f008 feca 	bl	26a20 <nrfx_nvmc_flash_page_size_get>
   1dc8c:	e7f3      	b.n	1dc76 <flash_op_execute+0x32>
	return (size_t) addr & 0x3;
   1dc8e:	f001 0503 	and.w	r5, r1, #3
   1dc92:	f000 0003 	and.w	r0, r0, #3
	size_t remaining_bytes_in_word = sizeof(uint32_t) - max_offset;
   1dc96:	4285      	cmp	r5, r0
   1dc98:	bf38      	it	cc
   1dc9a:	4605      	movcc	r5, r0
   1dc9c:	f1c5 0504 	rsb	r5, r5, #4
	size_t bytes_to_copy = MIN(len, remaining_bytes_in_word);
   1dca0:	42b5      	cmp	r5, r6
   1dca2:	bf28      	it	cs
   1dca4:	4635      	movcs	r5, r6
	memcpy(&((uint8_t *)word_dst)[offset_32(dst)], src, bytes_to_copy);
   1dca6:	4e15      	ldr	r6, [pc, #84]	; (1dcfc <flash_op_execute+0xb8>)
	*word_dst = ~0;
   1dca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dcac:	63e3      	str	r3, [r4, #60]	; 0x3c
	memcpy(&((uint8_t *)word_dst)[offset_32(dst)], src, bytes_to_copy);
   1dcae:	462a      	mov	r2, r5
   1dcb0:	4430      	add	r0, r6
   1dcb2:	f006 ff07 	bl	24ac4 <memcpy>
	return (addr & ~0x3);
   1dcb6:	6b20      	ldr	r0, [r4, #48]	; 0x30
		return sdc_soc_flash_write_async(
   1dcb8:	4b0f      	ldr	r3, [pc, #60]	; (1dcf8 <flash_op_execute+0xb4>)
		flash_state.prev_len = unaligned_word_copy(
   1dcba:	63a5      	str	r5, [r4, #56]	; 0x38
		return sdc_soc_flash_write_async(
   1dcbc:	2201      	movs	r2, #1
   1dcbe:	4631      	mov	r1, r6
   1dcc0:	f020 0003 	bic.w	r0, r0, #3
   1dcc4:	e7dc      	b.n	1dc80 <flash_op_execute+0x3c>
	} else if (flash_state.op == FLASH_OP_ERASE) {
   1dcc6:	2b02      	cmp	r3, #2
   1dcc8:	d108      	bne.n	1dcdc <flash_op_execute+0x98>
		flash_state.prev_len = nrfx_nvmc_flash_page_size_get();
   1dcca:	f008 fea9 	bl	26a20 <nrfx_nvmc_flash_page_size_get>
		err = sdc_soc_flash_page_erase_async(
   1dcce:	490a      	ldr	r1, [pc, #40]	; (1dcf8 <flash_op_execute+0xb4>)
		flash_state.prev_len = nrfx_nvmc_flash_page_size_get();
   1dcd0:	63a8      	str	r0, [r5, #56]	; 0x38
		err = sdc_soc_flash_page_erase_async(
   1dcd2:	6b28      	ldr	r0, [r5, #48]	; 0x30
}
   1dcd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = sdc_soc_flash_page_erase_async(
   1dcd8:	f7e5 bfd4 	b.w	3c84 <sdc_soc_flash_page_erase_async>
		__ASSERT(0, "Unsupported operation");
   1dcdc:	22fb      	movs	r2, #251	; 0xfb
   1dcde:	4908      	ldr	r1, [pc, #32]	; (1dd00 <flash_op_execute+0xbc>)
   1dce0:	4808      	ldr	r0, [pc, #32]	; (1dd04 <flash_op_execute+0xc0>)
   1dce2:	f005 f823 	bl	22d2c <printk>
   1dce6:	4806      	ldr	r0, [pc, #24]	; (1dd00 <flash_op_execute+0xbc>)
   1dce8:	21fb      	movs	r1, #251	; 0xfb
   1dcea:	f005 fa82 	bl	231f2 <assert_post_action>
}
   1dcee:	f06f 0015 	mvn.w	r0, #21
   1dcf2:	bd70      	pop	{r4, r5, r6, pc}
   1dcf4:	20002a50 	.word	0x20002a50
   1dcf8:	0001dd09 	.word	0x0001dd09
   1dcfc:	20002a8c 	.word	0x20002a8c
   1dd00:	00029fbb 	.word	0x00029fbb
   1dd04:	00027c9a 	.word	0x00027c9a

0001dd08 <flash_operation_complete_callback>:
{
   1dd08:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(flash_state.op == FLASH_OP_WRITE ||
   1dd0a:	4c1f      	ldr	r4, [pc, #124]	; (1dd88 <flash_operation_complete_callback+0x80>)
   1dd0c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1dd10:	3b01      	subs	r3, #1
   1dd12:	2b01      	cmp	r3, #1
{
   1dd14:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(flash_state.op == FLASH_OP_WRITE ||
   1dd16:	d908      	bls.n	1dd2a <flash_operation_complete_callback+0x22>
   1dd18:	491c      	ldr	r1, [pc, #112]	; (1dd8c <flash_operation_complete_callback+0x84>)
   1dd1a:	481d      	ldr	r0, [pc, #116]	; (1dd90 <flash_operation_complete_callback+0x88>)
   1dd1c:	2283      	movs	r2, #131	; 0x83
   1dd1e:	f005 f805 	bl	22d2c <printk>
   1dd22:	481a      	ldr	r0, [pc, #104]	; (1dd8c <flash_operation_complete_callback+0x84>)
   1dd24:	2183      	movs	r1, #131	; 0x83
   1dd26:	f005 fa64 	bl	231f2 <assert_post_action>
	if (status == SDC_SOC_FLASH_CMD_STATUS_SUCCESS) {
   1dd2a:	b9cd      	cbnz	r5, 1dd60 <flash_operation_complete_callback+0x58>
		flash_state.addr += flash_state.prev_len;
   1dd2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1dd2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dd30:	4413      	add	r3, r2
   1dd32:	6323      	str	r3, [r4, #48]	; 0x30
		flash_state.data = (const void *) ((intptr_t) flash_state.data +
   1dd34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1dd36:	4413      	add	r3, r2
   1dd38:	62e3      	str	r3, [r4, #44]	; 0x2c
		flash_state.len -= flash_state.prev_len;
   1dd3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dd3c:	1a9b      	subs	r3, r3, r2
   1dd3e:	6363      	str	r3, [r4, #52]	; 0x34
	if (flash_state.len > 0) {
   1dd40:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1dd42:	b1cb      	cbz	r3, 1dd78 <flash_operation_complete_callback+0x70>
		err = flash_op_execute();
   1dd44:	f7ff ff7e 	bl	1dc44 <flash_op_execute>
		__ASSERT(err == 0, "Continued flash operation failed");
   1dd48:	b1e8      	cbz	r0, 1dd86 <flash_operation_complete_callback+0x7e>
   1dd4a:	4910      	ldr	r1, [pc, #64]	; (1dd8c <flash_operation_complete_callback+0x84>)
   1dd4c:	4810      	ldr	r0, [pc, #64]	; (1dd90 <flash_operation_complete_callback+0x88>)
   1dd4e:	2295      	movs	r2, #149	; 0x95
   1dd50:	f004 ffec 	bl	22d2c <printk>
}
   1dd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(err == 0, "Continued flash operation failed");
   1dd58:	480c      	ldr	r0, [pc, #48]	; (1dd8c <flash_operation_complete_callback+0x84>)
   1dd5a:	2195      	movs	r1, #149	; 0x95
   1dd5c:	f005 ba49 	b.w	231f2 <assert_post_action>
		__ASSERT_NO_MSG(status == SDC_SOC_FLASH_CMD_STATUS_TIMEOUT);
   1dd60:	2d01      	cmp	r5, #1
   1dd62:	d0ed      	beq.n	1dd40 <flash_operation_complete_callback+0x38>
   1dd64:	4909      	ldr	r1, [pc, #36]	; (1dd8c <flash_operation_complete_callback+0x84>)
   1dd66:	480a      	ldr	r0, [pc, #40]	; (1dd90 <flash_operation_complete_callback+0x88>)
   1dd68:	228f      	movs	r2, #143	; 0x8f
   1dd6a:	f004 ffdf 	bl	22d2c <printk>
   1dd6e:	4807      	ldr	r0, [pc, #28]	; (1dd8c <flash_operation_complete_callback+0x84>)
   1dd70:	218f      	movs	r1, #143	; 0x8f
   1dd72:	f005 fa3e 	bl	231f2 <assert_post_action>
   1dd76:	e7e3      	b.n	1dd40 <flash_operation_complete_callback+0x38>
		flash_state.op = FLASH_OP_NONE;
   1dd78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1dd7c:	4805      	ldr	r0, [pc, #20]	; (1dd94 <flash_operation_complete_callback+0x8c>)
}
   1dd7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1dd82:	f003 be35 	b.w	219f0 <z_impl_k_sem_give>
   1dd86:	bd38      	pop	{r3, r4, r5, pc}
   1dd88:	20002a50 	.word	0x20002a50
   1dd8c:	00029fbb 	.word	0x00029fbb
   1dd90:	00027c9a 	.word	0x00027c9a
   1dd94:	20002a64 	.word	0x20002a64

0001dd98 <sdc_flash_write>:
{
   1dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd9a:	460e      	mov	r6, r1
	if (!is_addr_valid(offset, len)) {
   1dd9c:	4630      	mov	r0, r6
   1dd9e:	4619      	mov	r1, r3
{
   1dda0:	4617      	mov	r7, r2
   1dda2:	461d      	mov	r5, r3
	if (!is_addr_valid(offset, len)) {
   1dda4:	f008 fd0d 	bl	267c2 <is_addr_valid>
   1dda8:	2800      	cmp	r0, #0
   1ddaa:	d044      	beq.n	1de36 <sdc_flash_write+0x9e>
	return z_impl_k_mutex_lock(mutex, timeout);
   1ddac:	4823      	ldr	r0, [pc, #140]	; (1de3c <sdc_flash_write+0xa4>)
   1ddae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ddb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ddb6:	f002 fb47 	bl	20448 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(err == 0);
   1ddba:	b150      	cbz	r0, 1ddd2 <sdc_flash_write+0x3a>
   1ddbc:	4920      	ldr	r1, [pc, #128]	; (1de40 <sdc_flash_write+0xa8>)
   1ddbe:	4821      	ldr	r0, [pc, #132]	; (1de44 <sdc_flash_write+0xac>)
   1ddc0:	f44f 729c 	mov.w	r2, #312	; 0x138
   1ddc4:	f004 ffb2 	bl	22d2c <printk>
   1ddc8:	481d      	ldr	r0, [pc, #116]	; (1de40 <sdc_flash_write+0xa8>)
   1ddca:	f44f 719c 	mov.w	r1, #312	; 0x138
   1ddce:	f005 fa10 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(flash_state.op == FLASH_OP_NONE);
   1ddd2:	4c1a      	ldr	r4, [pc, #104]	; (1de3c <sdc_flash_write+0xa4>)
   1ddd4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1ddd8:	b153      	cbz	r3, 1ddf0 <sdc_flash_write+0x58>
   1ddda:	4919      	ldr	r1, [pc, #100]	; (1de40 <sdc_flash_write+0xa8>)
   1dddc:	4819      	ldr	r0, [pc, #100]	; (1de44 <sdc_flash_write+0xac>)
   1ddde:	f240 1239 	movw	r2, #313	; 0x139
   1dde2:	f004 ffa3 	bl	22d2c <printk>
   1dde6:	4816      	ldr	r0, [pc, #88]	; (1de40 <sdc_flash_write+0xa8>)
   1dde8:	f240 1139 	movw	r1, #313	; 0x139
   1ddec:	f005 fa01 	bl	231f2 <assert_post_action>
	flash_state.op = FLASH_OP_WRITE;
   1ddf0:	2301      	movs	r3, #1
	flash_state.addr = offset;
   1ddf2:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
	flash_state.op = FLASH_OP_WRITE;
   1ddf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	flash_state.len = len;
   1ddfa:	6365      	str	r5, [r4, #52]	; 0x34
	err = flash_op_execute_with_lock();
   1ddfc:	f008 fcf3 	bl	267e6 <flash_op_execute_with_lock>
	if (!err) {
   1de00:	4604      	mov	r4, r0
   1de02:	b998      	cbnz	r0, 1de2c <sdc_flash_write+0x94>
	return z_impl_k_sem_take(sem, timeout);
   1de04:	4810      	ldr	r0, [pc, #64]	; (1de48 <sdc_flash_write+0xb0>)
   1de06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1de0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de0e:	f003 fe2b 	bl	21a68 <z_impl_k_sem_take>
		__ASSERT_NO_MSG(err == 0);
   1de12:	4604      	mov	r4, r0
   1de14:	b150      	cbz	r0, 1de2c <sdc_flash_write+0x94>
   1de16:	490a      	ldr	r1, [pc, #40]	; (1de40 <sdc_flash_write+0xa8>)
   1de18:	480a      	ldr	r0, [pc, #40]	; (1de44 <sdc_flash_write+0xac>)
   1de1a:	f44f 72a1 	mov.w	r2, #322	; 0x142
   1de1e:	f004 ff85 	bl	22d2c <printk>
   1de22:	4807      	ldr	r0, [pc, #28]	; (1de40 <sdc_flash_write+0xa8>)
   1de24:	f44f 71a1 	mov.w	r1, #322	; 0x142
   1de28:	f005 f9e3 	bl	231f2 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   1de2c:	4803      	ldr	r0, [pc, #12]	; (1de3c <sdc_flash_write+0xa4>)
   1de2e:	f002 fbdd 	bl	205ec <z_impl_k_mutex_unlock>
}
   1de32:	4620      	mov	r0, r4
   1de34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1de36:	f06f 0415 	mvn.w	r4, #21
   1de3a:	e7fa      	b.n	1de32 <sdc_flash_write+0x9a>
   1de3c:	20002a50 	.word	0x20002a50
   1de40:	00029fbb 	.word	0x00029fbb
   1de44:	00027c9a 	.word	0x00027c9a
   1de48:	20002a64 	.word	0x20002a64

0001de4c <flash_init>:
#endif /* defined(CONFIG_FLASH_PAGE_LAYOUT) */

static int flash_init(const struct device *dev)
{
   1de4c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1de4e:	4c09      	ldr	r4, [pc, #36]	; (1de74 <flash_init+0x28>)
   1de50:	2201      	movs	r2, #1
   1de52:	2100      	movs	r1, #0
   1de54:	f104 0014 	add.w	r0, r4, #20
   1de58:	f008 feb1 	bl	26bbe <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   1de5c:	4620      	mov	r0, r4
   1de5e:	f008 fe31 	bl	26ac4 <z_impl_k_mutex_init>
	k_sem_init(&flash_state.sync, 0, 1);
	k_mutex_init(&flash_state.lock);

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1de62:	f008 fde1 	bl	26a28 <nrfx_nvmc_flash_page_count_get>
   1de66:	4c04      	ldr	r4, [pc, #16]	; (1de78 <flash_init+0x2c>)
   1de68:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1de6a:	f008 fdd9 	bl	26a20 <nrfx_nvmc_flash_page_size_get>
   1de6e:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1de70:	2000      	movs	r0, #0
   1de72:	bd10      	pop	{r4, pc}
   1de74:	20002a50 	.word	0x20002a50
   1de78:	20002a48 	.word	0x20002a48

0001de7c <sdc_flash_read>:
{
   1de7c:	b570      	push	{r4, r5, r6, lr}
   1de7e:	460d      	mov	r5, r1
	if (!is_addr_valid(offset, len)) {
   1de80:	4628      	mov	r0, r5
   1de82:	4619      	mov	r1, r3
{
   1de84:	4616      	mov	r6, r2
   1de86:	461c      	mov	r4, r3
	if (!is_addr_valid(offset, len)) {
   1de88:	f008 fc9b 	bl	267c2 <is_addr_valid>
   1de8c:	b1e8      	cbz	r0, 1deca <sdc_flash_read+0x4e>
	if (len == 0) {
   1de8e:	b1fc      	cbz	r4, 1ded0 <sdc_flash_read+0x54>
	return z_impl_k_mutex_lock(mutex, timeout);
   1de90:	4810      	ldr	r0, [pc, #64]	; (1ded4 <sdc_flash_read+0x58>)
   1de92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1de96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de9a:	f002 fad5 	bl	20448 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(err == 0);
   1de9e:	b150      	cbz	r0, 1deb6 <sdc_flash_read+0x3a>
   1dea0:	490d      	ldr	r1, [pc, #52]	; (1ded8 <sdc_flash_read+0x5c>)
   1dea2:	480e      	ldr	r0, [pc, #56]	; (1dedc <sdc_flash_read+0x60>)
   1dea4:	f240 1223 	movw	r2, #291	; 0x123
   1dea8:	f004 ff40 	bl	22d2c <printk>
   1deac:	480a      	ldr	r0, [pc, #40]	; (1ded8 <sdc_flash_read+0x5c>)
   1deae:	f240 1123 	movw	r1, #291	; 0x123
   1deb2:	f005 f99e 	bl	231f2 <assert_post_action>
	memcpy(data, (void *)offset, len);
   1deb6:	4622      	mov	r2, r4
   1deb8:	4629      	mov	r1, r5
   1deba:	4630      	mov	r0, r6
   1debc:	f006 fe02 	bl	24ac4 <memcpy>
	return z_impl_k_mutex_unlock(mutex);
   1dec0:	4804      	ldr	r0, [pc, #16]	; (1ded4 <sdc_flash_read+0x58>)
   1dec2:	f002 fb93 	bl	205ec <z_impl_k_mutex_unlock>
   1dec6:	2000      	movs	r0, #0
}
   1dec8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1deca:	f06f 0015 	mvn.w	r0, #21
   1dece:	e7fb      	b.n	1dec8 <sdc_flash_read+0x4c>
		return 0;
   1ded0:	4620      	mov	r0, r4
   1ded2:	e7f9      	b.n	1dec8 <sdc_flash_read+0x4c>
   1ded4:	20002a50 	.word	0x20002a50
   1ded8:	00029fbb 	.word	0x00029fbb
   1dedc:	00027c9a 	.word	0x00027c9a

0001dee0 <sdc_flash_erase>:
{
   1dee0:	b570      	push	{r4, r5, r6, lr}
   1dee2:	460e      	mov	r6, r1
   1dee4:	4615      	mov	r5, r2
	return (addr & (nrfx_nvmc_flash_page_size_get() - 1)) == 0;
   1dee6:	f008 fd9b 	bl	26a20 <nrfx_nvmc_flash_page_size_get>
   1deea:	3801      	subs	r0, #1
	if (!(is_page_aligned(offset) && is_page_aligned(len)) ||
   1deec:	4230      	tst	r0, r6
   1deee:	d003      	beq.n	1def8 <sdc_flash_erase+0x18>
		return -EINVAL;
   1def0:	f06f 0415 	mvn.w	r4, #21
}
   1def4:	4620      	mov	r0, r4
   1def6:	bd70      	pop	{r4, r5, r6, pc}
	return (addr & (nrfx_nvmc_flash_page_size_get() - 1)) == 0;
   1def8:	f008 fd92 	bl	26a20 <nrfx_nvmc_flash_page_size_get>
   1defc:	3801      	subs	r0, #1
	if (!(is_page_aligned(offset) && is_page_aligned(len)) ||
   1defe:	ea10 0405 	ands.w	r4, r0, r5
   1df02:	d1f5      	bne.n	1def0 <sdc_flash_erase+0x10>
	    !is_addr_valid(offset, len)) {
   1df04:	4629      	mov	r1, r5
   1df06:	4630      	mov	r0, r6
   1df08:	f008 fc5b 	bl	267c2 <is_addr_valid>
	if (!(is_page_aligned(offset) && is_page_aligned(len)) ||
   1df0c:	2800      	cmp	r0, #0
   1df0e:	d0ef      	beq.n	1def0 <sdc_flash_erase+0x10>
	size_t page_count = len / nrfx_nvmc_flash_page_size_get();
   1df10:	f008 fd86 	bl	26a20 <nrfx_nvmc_flash_page_size_get>
	if (page_count == 0) {
   1df14:	42a8      	cmp	r0, r5
   1df16:	d8ed      	bhi.n	1def4 <sdc_flash_erase+0x14>
	return z_impl_k_mutex_lock(mutex, timeout);
   1df18:	4821      	ldr	r0, [pc, #132]	; (1dfa0 <sdc_flash_erase+0xc0>)
   1df1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1df1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1df22:	f002 fa91 	bl	20448 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(err == 0);
   1df26:	b150      	cbz	r0, 1df3e <sdc_flash_erase+0x5e>
   1df28:	491e      	ldr	r1, [pc, #120]	; (1dfa4 <sdc_flash_erase+0xc4>)
   1df2a:	481f      	ldr	r0, [pc, #124]	; (1dfa8 <sdc_flash_erase+0xc8>)
   1df2c:	f44f 72ae 	mov.w	r2, #348	; 0x15c
   1df30:	f004 fefc 	bl	22d2c <printk>
   1df34:	481b      	ldr	r0, [pc, #108]	; (1dfa4 <sdc_flash_erase+0xc4>)
   1df36:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   1df3a:	f005 f95a 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG(flash_state.op == FLASH_OP_NONE);
   1df3e:	4c18      	ldr	r4, [pc, #96]	; (1dfa0 <sdc_flash_erase+0xc0>)
   1df40:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1df44:	b153      	cbz	r3, 1df5c <sdc_flash_erase+0x7c>
   1df46:	4917      	ldr	r1, [pc, #92]	; (1dfa4 <sdc_flash_erase+0xc4>)
   1df48:	4817      	ldr	r0, [pc, #92]	; (1dfa8 <sdc_flash_erase+0xc8>)
   1df4a:	f240 125d 	movw	r2, #349	; 0x15d
   1df4e:	f004 feed 	bl	22d2c <printk>
   1df52:	4814      	ldr	r0, [pc, #80]	; (1dfa4 <sdc_flash_erase+0xc4>)
   1df54:	f240 115d 	movw	r1, #349	; 0x15d
   1df58:	f005 f94b 	bl	231f2 <assert_post_action>
	flash_state.op = FLASH_OP_ERASE;
   1df5c:	2302      	movs	r3, #2
	flash_state.len = len;
   1df5e:	e9c4 650c 	strd	r6, r5, [r4, #48]	; 0x30
	flash_state.op = FLASH_OP_ERASE;
   1df62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	err = flash_op_execute_with_lock();
   1df66:	f008 fc3e 	bl	267e6 <flash_op_execute_with_lock>
	if (!err) {
   1df6a:	4604      	mov	r4, r0
   1df6c:	b998      	cbnz	r0, 1df96 <sdc_flash_erase+0xb6>
	return z_impl_k_sem_take(sem, timeout);
   1df6e:	480f      	ldr	r0, [pc, #60]	; (1dfac <sdc_flash_erase+0xcc>)
   1df70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1df74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1df78:	f003 fd76 	bl	21a68 <z_impl_k_sem_take>
		__ASSERT_NO_MSG(err == 0);
   1df7c:	4604      	mov	r4, r0
   1df7e:	b150      	cbz	r0, 1df96 <sdc_flash_erase+0xb6>
   1df80:	4908      	ldr	r1, [pc, #32]	; (1dfa4 <sdc_flash_erase+0xc4>)
   1df82:	4809      	ldr	r0, [pc, #36]	; (1dfa8 <sdc_flash_erase+0xc8>)
   1df84:	f240 1265 	movw	r2, #357	; 0x165
   1df88:	f004 fed0 	bl	22d2c <printk>
   1df8c:	4805      	ldr	r0, [pc, #20]	; (1dfa4 <sdc_flash_erase+0xc4>)
   1df8e:	f240 1165 	movw	r1, #357	; 0x165
   1df92:	f005 f92e 	bl	231f2 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   1df96:	4802      	ldr	r0, [pc, #8]	; (1dfa0 <sdc_flash_erase+0xc0>)
   1df98:	f002 fb28 	bl	205ec <z_impl_k_mutex_unlock>
	return err;
   1df9c:	e7aa      	b.n	1def4 <sdc_flash_erase+0x14>
   1df9e:	bf00      	nop
   1dfa0:	20002a50 	.word	0x20002a50
   1dfa4:	00029fbb 	.word	0x00029fbb
   1dfa8:	00027c9a 	.word	0x00027c9a
   1dfac:	20002a64 	.word	0x20002a64

0001dfb0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1dfb0:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1dfb2:	794b      	ldrb	r3, [r1, #5]
   1dfb4:	2b01      	cmp	r3, #1
   1dfb6:	d123      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1dfb8:	798b      	ldrb	r3, [r1, #6]
   1dfba:	2b03      	cmp	r3, #3
   1dfbc:	d120      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1dfbe:	79ca      	ldrb	r2, [r1, #7]
   1dfc0:	b122      	cbz	r2, 1dfcc <uarte_nrfx_configure+0x1c>
   1dfc2:	2a01      	cmp	r2, #1
   1dfc4:	d11c      	bne.n	1e000 <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1dfc6:	6843      	ldr	r3, [r0, #4]
   1dfc8:	791b      	ldrb	r3, [r3, #4]
   1dfca:	b1cb      	cbz	r3, 1e000 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1dfcc:	790c      	ldrb	r4, [r1, #4]
   1dfce:	b114      	cbz	r4, 1dfd6 <uarte_nrfx_configure+0x26>
   1dfd0:	2c02      	cmp	r4, #2
   1dfd2:	d115      	bne.n	1e000 <uarte_nrfx_configure+0x50>
   1dfd4:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1dfd6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1dfd8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1dfda:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1dfde:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1dfe0:	d062      	beq.n	1e0a8 <uarte_nrfx_configure+0xf8>
   1dfe2:	d82b      	bhi.n	1e03c <uarte_nrfx_configure+0x8c>
   1dfe4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1dfe8:	d061      	beq.n	1e0ae <uarte_nrfx_configure+0xfe>
   1dfea:	d814      	bhi.n	1e016 <uarte_nrfx_configure+0x66>
   1dfec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1dff0:	d05f      	beq.n	1e0b2 <uarte_nrfx_configure+0x102>
   1dff2:	d808      	bhi.n	1e006 <uarte_nrfx_configure+0x56>
   1dff4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1dff8:	d05e      	beq.n	1e0b8 <uarte_nrfx_configure+0x108>
   1dffa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1dffe:	d05e      	beq.n	1e0be <uarte_nrfx_configure+0x10e>
   1e000:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e004:	e04f      	b.n	1e0a6 <uarte_nrfx_configure+0xf6>
   1e006:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e00a:	d05b      	beq.n	1e0c4 <uarte_nrfx_configure+0x114>
   1e00c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e010:	d1f6      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e012:	4b37      	ldr	r3, [pc, #220]	; (1e0f0 <uarte_nrfx_configure+0x140>)
   1e014:	e03c      	b.n	1e090 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1e016:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e01a:	d056      	beq.n	1e0ca <uarte_nrfx_configure+0x11a>
   1e01c:	d807      	bhi.n	1e02e <uarte_nrfx_configure+0x7e>
   1e01e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e022:	d054      	beq.n	1e0ce <uarte_nrfx_configure+0x11e>
   1e024:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e028:	d1ea      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e02a:	4b32      	ldr	r3, [pc, #200]	; (1e0f4 <uarte_nrfx_configure+0x144>)
   1e02c:	e030      	b.n	1e090 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1e02e:	f647 2612 	movw	r6, #31250	; 0x7a12
   1e032:	42b3      	cmp	r3, r6
   1e034:	d1e4      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e036:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e03a:	e029      	b.n	1e090 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1e03c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e040:	d047      	beq.n	1e0d2 <uarte_nrfx_configure+0x122>
   1e042:	d813      	bhi.n	1e06c <uarte_nrfx_configure+0xbc>
   1e044:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e048:	d046      	beq.n	1e0d8 <uarte_nrfx_configure+0x128>
   1e04a:	d809      	bhi.n	1e060 <uarte_nrfx_configure+0xb0>
   1e04c:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1e050:	42b3      	cmp	r3, r6
   1e052:	d043      	beq.n	1e0dc <uarte_nrfx_configure+0x12c>
   1e054:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e058:	d1d2      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e05a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e05e:	e017      	b.n	1e090 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1e060:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e064:	d1cc      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e066:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e06a:	e011      	b.n	1e090 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1e06c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e070:	d037      	beq.n	1e0e2 <uarte_nrfx_configure+0x132>
   1e072:	d808      	bhi.n	1e086 <uarte_nrfx_configure+0xd6>
   1e074:	4e20      	ldr	r6, [pc, #128]	; (1e0f8 <uarte_nrfx_configure+0x148>)
   1e076:	42b3      	cmp	r3, r6
   1e078:	d036      	beq.n	1e0e8 <uarte_nrfx_configure+0x138>
   1e07a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e07e:	d1bf      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e080:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e084:	e004      	b.n	1e090 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1e086:	4e1d      	ldr	r6, [pc, #116]	; (1e0fc <uarte_nrfx_configure+0x14c>)
   1e088:	42b3      	cmp	r3, r6
   1e08a:	d1b9      	bne.n	1e000 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e08c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e090:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1e094:	68c3      	ldr	r3, [r0, #12]
   1e096:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e098:	4322      	orrs	r2, r4
   1e09a:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e09c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e0a0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e0a4:	2000      	movs	r0, #0
}
   1e0a6:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e0a8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e0ac:	e7f0      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e0ae:	4b14      	ldr	r3, [pc, #80]	; (1e100 <uarte_nrfx_configure+0x150>)
   1e0b0:	e7ee      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e0b2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e0b6:	e7eb      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
   1e0b8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e0bc:	e7e8      	b.n	1e090 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
   1e0be:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e0c2:	e7e5      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e0c4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e0c8:	e7e2      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e0ca:	4b0e      	ldr	r3, [pc, #56]	; (1e104 <uarte_nrfx_configure+0x154>)
   1e0cc:	e7e0      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e0ce:	4b0e      	ldr	r3, [pc, #56]	; (1e108 <uarte_nrfx_configure+0x158>)
   1e0d0:	e7de      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e0d2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e0d6:	e7db      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e0d8:	4b0c      	ldr	r3, [pc, #48]	; (1e10c <uarte_nrfx_configure+0x15c>)
   1e0da:	e7d9      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e0dc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e0e0:	e7d6      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e0e2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e0e6:	e7d3      	b.n	1e090 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e0e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e0ec:	e7d0      	b.n	1e090 <uarte_nrfx_configure+0xe0>
   1e0ee:	bf00      	nop
   1e0f0:	0013b000 	.word	0x0013b000
   1e0f4:	004ea000 	.word	0x004ea000
   1e0f8:	0003d090 	.word	0x0003d090
   1e0fc:	000f4240 	.word	0x000f4240
   1e100:	00275000 	.word	0x00275000
   1e104:	0075c000 	.word	0x0075c000
   1e108:	003af000 	.word	0x003af000
   1e10c:	013a9000 	.word	0x013a9000

0001e110 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e110:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1e112:	095a      	lsrs	r2, r3, #5
   1e114:	bf0c      	ite	eq
   1e116:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1e11a:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1e11c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e120:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e124:	07db      	lsls	r3, r3, #31
{
   1e126:	b510      	push	{r4, lr}
   1e128:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e12a:	d40a      	bmi.n	1e142 <nrf_gpio_pin_port_decode+0x32>
   1e12c:	490f      	ldr	r1, [pc, #60]	; (1e16c <nrf_gpio_pin_port_decode+0x5c>)
   1e12e:	4810      	ldr	r0, [pc, #64]	; (1e170 <nrf_gpio_pin_port_decode+0x60>)
   1e130:	f240 221a 	movw	r2, #538	; 0x21a
   1e134:	f004 fdfa 	bl	22d2c <printk>
   1e138:	480c      	ldr	r0, [pc, #48]	; (1e16c <nrf_gpio_pin_port_decode+0x5c>)
   1e13a:	f240 211a 	movw	r1, #538	; 0x21a
   1e13e:	f005 f858 	bl	231f2 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1e142:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1e144:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e148:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1e14a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e14c:	d00a      	beq.n	1e164 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   1e14e:	4907      	ldr	r1, [pc, #28]	; (1e16c <nrf_gpio_pin_port_decode+0x5c>)
   1e150:	4807      	ldr	r0, [pc, #28]	; (1e170 <nrf_gpio_pin_port_decode+0x60>)
   1e152:	f240 221f 	movw	r2, #543	; 0x21f
   1e156:	f004 fde9 	bl	22d2c <printk>
   1e15a:	4804      	ldr	r0, [pc, #16]	; (1e16c <nrf_gpio_pin_port_decode+0x5c>)
   1e15c:	f240 211f 	movw	r1, #543	; 0x21f
   1e160:	f005 f847 	bl	231f2 <assert_post_action>
}
   1e164:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1e168:	bd10      	pop	{r4, pc}
   1e16a:	bf00      	nop
   1e16c:	00029ed3 	.word	0x00029ed3
   1e170:	00027c9a 	.word	0x00027c9a

0001e174 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1e174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e178:	68c7      	ldr	r7, [r0, #12]
{
   1e17a:	4606      	mov	r6, r0
   1e17c:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e17e:	f008 fd2e 	bl	26bde <k_is_in_isr>
   1e182:	b9b8      	cbnz	r0, 1e1b4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1e184:	4b28      	ldr	r3, [pc, #160]	; (1e228 <uarte_nrfx_poll_out+0xb4>)
   1e186:	781b      	ldrb	r3, [r3, #0]
   1e188:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1e18c:	6872      	ldr	r2, [r6, #4]
   1e18e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1e190:	b193      	cbz	r3, 1e1b8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1e192:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e196:	f3ef 8411 	mrs	r4, BASEPRI
   1e19a:	f383 8811 	msr	BASEPRI, r3
   1e19e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1e1a2:	4630      	mov	r0, r6
   1e1a4:	f008 fb5e 	bl	26864 <is_tx_ready>
   1e1a8:	bb38      	cbnz	r0, 1e1fa <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1e1aa:	f384 8811 	msr	BASEPRI, r4
   1e1ae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1e1b2:	e7ee      	b.n	1e192 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e1b4:	2301      	movs	r3, #1
   1e1b6:	e7e9      	b.n	1e18c <uarte_nrfx_poll_out+0x18>
   1e1b8:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e1ba:	4630      	mov	r0, r6
   1e1bc:	f008 fb52 	bl	26864 <is_tx_ready>
   1e1c0:	b970      	cbnz	r0, 1e1e0 <uarte_nrfx_poll_out+0x6c>
   1e1c2:	2001      	movs	r0, #1
   1e1c4:	f008 fc24 	bl	26a10 <nrfx_busy_wait>
   1e1c8:	3c01      	subs	r4, #1
   1e1ca:	d1f6      	bne.n	1e1ba <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1e1cc:	2100      	movs	r1, #0
   1e1ce:	2021      	movs	r0, #33	; 0x21
   1e1d0:	f003 fbda 	bl	21988 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e1d4:	e7f0      	b.n	1e1b8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1e1d6:	f384 8811 	msr	BASEPRI, r4
   1e1da:	f3bf 8f6f 	isb	sy
}
   1e1de:	e7f5      	b.n	1e1cc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1e1e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1e4:	f3ef 8411 	mrs	r4, BASEPRI
   1e1e8:	f383 8811 	msr	BASEPRI, r3
   1e1ec:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   1e1f0:	4630      	mov	r0, r6
   1e1f2:	f008 fb37 	bl	26864 <is_tx_ready>
   1e1f6:	2800      	cmp	r0, #0
   1e1f8:	d0ed      	beq.n	1e1d6 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1e1fa:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1e1fe:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e200:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e202:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e206:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e20a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1e20e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1e212:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1e216:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e21a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1e21c:	f384 8811 	msr	BASEPRI, r4
   1e220:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1e224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e228:	20003570 	.word	0x20003570

0001e22c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1e22c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e230:	2200      	movs	r2, #0
   1e232:	2101      	movs	r1, #1
   1e234:	4605      	mov	r5, r0
   1e236:	2002      	movs	r0, #2
   1e238:	f7f7 f83a 	bl	152b0 <z_arm_irq_priority_set>
   1e23c:	2002      	movs	r0, #2
   1e23e:	f7f7 f827 	bl	15290 <arch_irq_enable>
	return config->uarte_regs;
   1e242:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1e244:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   1e246:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e248:	2700      	movs	r7, #0
   1e24a:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
	data->dev = dev;
   1e24e:	f04f 0906 	mov.w	r9, #6
   1e252:	6035      	str	r5, [r6, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e254:	a801      	add	r0, sp, #4
   1e256:	f8cd 9004 	str.w	r9, [sp, #4]
   1e25a:	f7ff ff59 	bl	1e110 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e25e:	9b01      	ldr	r3, [sp, #4]
   1e260:	f04f 0801 	mov.w	r8, #1
   1e264:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
   1e268:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e26c:	a801      	add	r0, sp, #4
   1e26e:	f8cd 9004 	str.w	r9, [sp, #4]
   1e272:	f7ff ff4d 	bl	1e110 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e276:	9b01      	ldr	r3, [sp, #4]
   1e278:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e27c:	f04f 0a03 	mov.w	sl, #3
   1e280:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1e284:	f04f 0b08 	mov.w	fp, #8
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e288:	a801      	add	r0, sp, #4
   1e28a:	f8cd b004 	str.w	fp, [sp, #4]
   1e28e:	f7ff ff3f 	bl	1e110 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e292:	9b01      	ldr	r3, [sp, #4]
   1e294:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e298:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1e29c:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2a0:	a801      	add	r0, sp, #4
    p_reg->PSEL.RXD = pselrxd;
   1e2a2:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    nrf_gpio_cfg(
   1e2a6:	f04f 0907 	mov.w	r9, #7
   1e2aa:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2ae:	f7ff ff2f 	bl	1e110 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e2b2:	9b01      	ldr	r3, [sp, #4]
   1e2b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e2b8:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   1e2bc:	2705      	movs	r7, #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2be:	a801      	add	r0, sp, #4
   1e2c0:	9701      	str	r7, [sp, #4]
   1e2c2:	f7ff ff25 	bl	1e110 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e2c6:	9b01      	ldr	r3, [sp, #4]
   1e2c8:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
   1e2cc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2d0:	a801      	add	r0, sp, #4
   1e2d2:	9701      	str	r7, [sp, #4]
   1e2d4:	f7ff ff1c 	bl	1e110 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e2d8:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e2da:	68e9      	ldr	r1, [r5, #12]
   1e2dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e2e0:	3104      	adds	r1, #4
   1e2e2:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1e2e6:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
   1e2ea:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   1e2ec:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   1e2f0:	f7ff fe5e 	bl	1dfb0 <uarte_nrfx_configure>
	if (err) {
   1e2f4:	4607      	mov	r7, r0
   1e2f6:	b978      	cbnz	r0, 1e318 <uarte_0_init+0xec>
	if (get_dev_config(dev)->ppi_endtx) {
   1e2f8:	686b      	ldr	r3, [r5, #4]
   1e2fa:	799b      	ldrb	r3, [r3, #6]
   1e2fc:	b31b      	cbz	r3, 1e346 <uarte_0_init+0x11a>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e2fe:	f106 000e 	add.w	r0, r6, #14
   1e302:	f001 faaf 	bl	1f864 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e306:	4b20      	ldr	r3, [pc, #128]	; (1e388 <uarte_0_init+0x15c>)
   1e308:	4298      	cmp	r0, r3
   1e30a:	d009      	beq.n	1e320 <uarte_0_init+0xf4>
		LOG_ERR("Failed to allocate PPI Channel");
   1e30c:	481f      	ldr	r0, [pc, #124]	; (1e38c <uarte_0_init+0x160>)
   1e30e:	2145      	movs	r1, #69	; 0x45
   1e310:	f004 fd0c 	bl	22d2c <printk>
		return -EIO;
   1e314:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   1e318:	4638      	mov	r0, r7
   1e31a:	b003      	add	sp, #12
   1e31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e320:	7bb0      	ldrb	r0, [r6, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e322:	00c3      	lsls	r3, r0, #3
   1e324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e328:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1e32c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e330:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e334:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e338:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1e33c:	4a14      	ldr	r2, [pc, #80]	; (1e390 <uarte_0_init+0x164>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e33e:	fa08 f000 	lsl.w	r0, r8, r0
   1e342:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e346:	2308      	movs	r3, #8
   1e348:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e34c:	2300      	movs	r3, #0
   1e34e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e352:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1e356:	f106 030d 	add.w	r3, r6, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e35a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e35e:	2301      	movs	r3, #1
   1e360:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e364:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1e366:	686b      	ldr	r3, [r5, #4]
   1e368:	799b      	ldrb	r3, [r3, #6]
   1e36a:	b91b      	cbnz	r3, 1e374 <uarte_0_init+0x148>
    p_reg->INTENSET = mask;
   1e36c:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e370:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1e374:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1e376:	360c      	adds	r6, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e378:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e37c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e380:	2301      	movs	r3, #1
   1e382:	60a3      	str	r3, [r4, #8]
   1e384:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1e386:	e7c7      	b.n	1e318 <uarte_0_init+0xec>
   1e388:	0bad0000 	.word	0x0bad0000
   1e38c:	0002a000 	.word	0x0002a000
   1e390:	4001f000 	.word	0x4001f000

0001e394 <rng_driver_data_get>:
};

static struct rng_driver_data rng_data;

static inline struct rng_driver_data *rng_driver_data_get(const struct device *dev)
{
   1e394:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dev != NULL);
   1e396:	4604      	mov	r4, r0
   1e398:	b940      	cbnz	r0, 1e3ac <rng_driver_data_get+0x18>
   1e39a:	490c      	ldr	r1, [pc, #48]	; (1e3cc <rng_driver_data_get+0x38>)
   1e39c:	480c      	ldr	r0, [pc, #48]	; (1e3d0 <rng_driver_data_get+0x3c>)
   1e39e:	221e      	movs	r2, #30
   1e3a0:	f004 fcc4 	bl	22d2c <printk>
   1e3a4:	4809      	ldr	r0, [pc, #36]	; (1e3cc <rng_driver_data_get+0x38>)
   1e3a6:	211e      	movs	r1, #30
   1e3a8:	f004 ff23 	bl	231f2 <assert_post_action>
	__ASSERT_NO_MSG((intptr_t) dev->data == (intptr_t) &rng_data);
   1e3ac:	68e2      	ldr	r2, [r4, #12]
   1e3ae:	4b09      	ldr	r3, [pc, #36]	; (1e3d4 <rng_driver_data_get+0x40>)
   1e3b0:	429a      	cmp	r2, r3
   1e3b2:	d008      	beq.n	1e3c6 <rng_driver_data_get+0x32>
   1e3b4:	4905      	ldr	r1, [pc, #20]	; (1e3cc <rng_driver_data_get+0x38>)
   1e3b6:	4806      	ldr	r0, [pc, #24]	; (1e3d0 <rng_driver_data_get+0x3c>)
   1e3b8:	221f      	movs	r2, #31
   1e3ba:	f004 fcb7 	bl	22d2c <printk>
   1e3be:	4803      	ldr	r0, [pc, #12]	; (1e3cc <rng_driver_data_get+0x38>)
   1e3c0:	211f      	movs	r1, #31
   1e3c2:	f004 ff16 	bl	231f2 <assert_post_action>

	return dev->data;
}
   1e3c6:	68e0      	ldr	r0, [r4, #12]
   1e3c8:	bd10      	pop	{r4, pc}
   1e3ca:	bf00      	nop
   1e3cc:	0002a034 	.word	0x0002a034
   1e3d0:	00027c9a 	.word	0x00027c9a
   1e3d4:	20002a94 	.word	0x20002a94

0001e3d8 <rng_driver_isr>:
		return errcode;
	}
}

static void rng_driver_isr(void *param)
{
   1e3d8:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	sdc_RNG_IRQHandler();
   1e3da:	f7f0 fde6 	bl	efaa <sdc_RNG_IRQHandler>
	z_impl_k_sem_give(sem);
   1e3de:	4802      	ldr	r0, [pc, #8]	; (1e3e8 <rng_driver_isr+0x10>)

	/* This sema wakes up the pending client buffer to fill it with new
	 * random values.
	 */
	k_sem_give(&rng_data.sem_sync);
}
   1e3e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e3e4:	f003 bb04 	b.w	219f0 <z_impl_k_sem_give>
   1e3e8:	20002a94 	.word	0x20002a94

0001e3ec <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1e3ec:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   1e3f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   1e3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   1e3f8:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
	const struct gpio_driver_data *const data =
   1e3fc:	f8d0 900c 	ldr.w	r9, [r0, #12]
{
   1e400:	4605      	mov	r5, r0
   1e402:	460e      	mov	r6, r1
   1e404:	4614      	mov	r4, r2
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1e406:	d14f      	bne.n	1e4a8 <z_impl_gpio_pin_interrupt_configure+0xbc>
   1e408:	492d      	ldr	r1, [pc, #180]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e40a:	482e      	ldr	r0, [pc, #184]	; (1e4c4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1e40c:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   1e410:	f004 fc8c 	bl	22d2c <printk>
   1e414:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1e418:	4829      	ldr	r0, [pc, #164]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e41a:	f004 feea 	bl	231f2 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1e41e:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1e422:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   1e426:	d10a      	bne.n	1e43e <z_impl_gpio_pin_interrupt_configure+0x52>
   1e428:	4925      	ldr	r1, [pc, #148]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e42a:	4826      	ldr	r0, [pc, #152]	; (1e4c4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1e42c:	f240 12f1 	movw	r2, #497	; 0x1f1
   1e430:	f004 fc7c 	bl	22d2c <printk>
   1e434:	4822      	ldr	r0, [pc, #136]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e436:	f240 11f1 	movw	r1, #497	; 0x1f1
   1e43a:	f004 feda 	bl	231f2 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1e43e:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1e442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1e446:	d10a      	bne.n	1e45e <z_impl_gpio_pin_interrupt_configure+0x72>
   1e448:	491d      	ldr	r1, [pc, #116]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e44a:	481e      	ldr	r0, [pc, #120]	; (1e4c4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1e44c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1e450:	f004 fc6c 	bl	22d2c <printk>
   1e454:	481a      	ldr	r0, [pc, #104]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e456:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1e45a:	f004 feca 	bl	231f2 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e45e:	f8da 3000 	ldr.w	r3, [sl]
   1e462:	2701      	movs	r7, #1
   1e464:	40b7      	lsls	r7, r6
   1e466:	421f      	tst	r7, r3
   1e468:	d10a      	bne.n	1e480 <z_impl_gpio_pin_interrupt_configure+0x94>
   1e46a:	4915      	ldr	r1, [pc, #84]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e46c:	4815      	ldr	r0, [pc, #84]	; (1e4c4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1e46e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   1e472:	f004 fc5b 	bl	22d2c <printk>
   1e476:	4812      	ldr	r0, [pc, #72]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e478:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1e47c:	f004 feb9 	bl	231f2 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1e480:	0423      	lsls	r3, r4, #16
   1e482:	d505      	bpl.n	1e490 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1e484:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1e488:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1e48a:	bf18      	it	ne
   1e48c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   1e490:	f8d8 7018 	ldr.w	r7, [r8, #24]
   1e494:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1e498:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
   1e49c:	4631      	mov	r1, r6
   1e49e:	4628      	mov	r0, r5
   1e4a0:	46bc      	mov	ip, r7
}
   1e4a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1e4a6:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1e4a8:	2b00      	cmp	r3, #0
   1e4aa:	d1b8      	bne.n	1e41e <z_impl_gpio_pin_interrupt_configure+0x32>
   1e4ac:	4904      	ldr	r1, [pc, #16]	; (1e4c0 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1e4ae:	4805      	ldr	r0, [pc, #20]	; (1e4c4 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1e4b0:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   1e4b4:	f004 fc3a 	bl	22d2c <printk>
   1e4b8:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   1e4bc:	e7ac      	b.n	1e418 <z_impl_gpio_pin_interrupt_configure+0x2c>
   1e4be:	bf00      	nop
   1e4c0:	0002a081 	.word	0x0002a081
   1e4c4:	00027c9a 	.word	0x00027c9a

0001e4c8 <gpio_pin_configure>:
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e4c8:	6843      	ldr	r3, [r0, #4]
{
   1e4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e4ce:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   1e4d0:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e4d4:	2501      	movs	r5, #1
   1e4d6:	408d      	lsls	r5, r1
   1e4d8:	421d      	tst	r5, r3
{
   1e4da:	4604      	mov	r4, r0
   1e4dc:	460e      	mov	r6, r1
   1e4de:	4617      	mov	r7, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e4e0:	d10a      	bne.n	1e4f8 <gpio_pin_configure+0x30>
   1e4e2:	490d      	ldr	r1, [pc, #52]	; (1e518 <gpio_pin_configure+0x50>)
   1e4e4:	480d      	ldr	r0, [pc, #52]	; (1e51c <gpio_pin_configure+0x54>)
   1e4e6:	f44f 7211 	mov.w	r2, #580	; 0x244
   1e4ea:	f004 fc1f 	bl	22d2c <printk>
   1e4ee:	480a      	ldr	r0, [pc, #40]	; (1e518 <gpio_pin_configure+0x50>)
   1e4f0:	f44f 7111 	mov.w	r1, #580	; 0x244
   1e4f4:	f004 fe7d 	bl	231f2 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   1e4f8:	68a3      	ldr	r3, [r4, #8]
   1e4fa:	463a      	mov	r2, r7
   1e4fc:	681b      	ldr	r3, [r3, #0]
   1e4fe:	4631      	mov	r1, r6
   1e500:	4620      	mov	r0, r4
   1e502:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1e504:	b928      	cbnz	r0, 1e512 <gpio_pin_configure+0x4a>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1e506:	f8d8 3000 	ldr.w	r3, [r8]
   1e50a:	ea23 0505 	bic.w	r5, r3, r5
   1e50e:	f8c8 5000 	str.w	r5, [r8]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   1e512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e516:	bf00      	nop
   1e518:	0002a081 	.word	0x0002a081
   1e51c:	00027c9a 	.word	0x00027c9a

0001e520 <gpio_pin_set_raw>:
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e520:	6843      	ldr	r3, [r0, #4]
{
   1e522:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e524:	681b      	ldr	r3, [r3, #0]
   1e526:	2501      	movs	r5, #1
   1e528:	408d      	lsls	r5, r1
   1e52a:	421d      	tst	r5, r3
{
   1e52c:	4604      	mov	r4, r0
   1e52e:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e530:	d10a      	bne.n	1e548 <gpio_pin_set_raw+0x28>
   1e532:	490b      	ldr	r1, [pc, #44]	; (1e560 <gpio_pin_set_raw+0x40>)
   1e534:	480b      	ldr	r0, [pc, #44]	; (1e564 <gpio_pin_set_raw+0x44>)
   1e536:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   1e53a:	f004 fbf7 	bl	22d2c <printk>
   1e53e:	4808      	ldr	r0, [pc, #32]	; (1e560 <gpio_pin_set_raw+0x40>)
   1e540:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   1e544:	f004 fe55 	bl	231f2 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   1e548:	b136      	cbz	r6, 1e558 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   1e54a:	68a3      	ldr	r3, [r4, #8]
   1e54c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1e54e:	4629      	mov	r1, r5
   1e550:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   1e552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   1e556:	4718      	bx	r3
   1e558:	68a3      	ldr	r3, [r4, #8]
   1e55a:	691b      	ldr	r3, [r3, #16]
   1e55c:	e7f7      	b.n	1e54e <gpio_pin_set_raw+0x2e>
   1e55e:	bf00      	nop
   1e560:	0002a081 	.word	0x0002a081
   1e564:	00027c9a 	.word	0x00027c9a

0001e568 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1e568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   1e56c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1e5bc <dk_set_leds_state.part.0+0x54>
   1e570:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1e5c0 <dk_set_leds_state.part.0+0x58>
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1e574:	4606      	mov	r6, r0
   1e576:	460f      	mov	r7, r1
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1e578:	2400      	movs	r4, #0
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1e57a:	fa26 f204 	lsr.w	r2, r6, r4
   1e57e:	fa27 f304 	lsr.w	r3, r7, r4
   1e582:	4313      	orrs	r3, r2
   1e584:	07db      	lsls	r3, r3, #31
   1e586:	d512      	bpl.n	1e5ae <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   1e588:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1e58c:	43d2      	mvns	r2, r2
   1e58e:	7919      	ldrb	r1, [r3, #4]
   1e590:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   1e594:	f002 0201 	and.w	r2, r2, #1
   1e598:	f7ff ffc2 	bl	1e520 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   1e59c:	4605      	mov	r5, r0
   1e59e:	b130      	cbz	r0, 1e5ae <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   1e5a0:	4805      	ldr	r0, [pc, #20]	; (1e5b8 <dk_set_leds_state.part.0+0x50>)
   1e5a2:	2145      	movs	r1, #69	; 0x45
   1e5a4:	f004 fbc2 	bl	22d2c <printk>
			}
		}
	}

	return 0;
}
   1e5a8:	4628      	mov	r0, r5
   1e5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1e5ae:	3401      	adds	r4, #1
   1e5b0:	2c04      	cmp	r4, #4
   1e5b2:	d1e2      	bne.n	1e57a <dk_set_leds_state.part.0+0x12>
	return 0;
   1e5b4:	2500      	movs	r5, #0
   1e5b6:	e7f7      	b.n	1e5a8 <dk_set_leds_state.part.0+0x40>
   1e5b8:	0002a0ab 	.word	0x0002a0ab
   1e5bc:	00027940 	.word	0x00027940
   1e5c0:	20002af0 	.word	0x20002af0

0001e5c4 <button_pressed>:
{
   1e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1e5c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e5ca:	f3ef 8611 	mrs	r6, BASEPRI
   1e5ce:	f383 8811 	msr	BASEPRI, r3
   1e5d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e5d6:	4827      	ldr	r0, [pc, #156]	; (1e674 <button_pressed+0xb0>)
   1e5d8:	f003 fc00 	bl	21ddc <z_spin_lock_valid>
   1e5dc:	b940      	cbnz	r0, 1e5f0 <button_pressed+0x2c>
   1e5de:	4926      	ldr	r1, [pc, #152]	; (1e678 <button_pressed+0xb4>)
   1e5e0:	4826      	ldr	r0, [pc, #152]	; (1e67c <button_pressed+0xb8>)
   1e5e2:	2278      	movs	r2, #120	; 0x78
   1e5e4:	f004 fba2 	bl	22d2c <printk>
   1e5e8:	4823      	ldr	r0, [pc, #140]	; (1e678 <button_pressed+0xb4>)
   1e5ea:	2178      	movs	r1, #120	; 0x78
   1e5ec:	f004 fe01 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e5f0:	4820      	ldr	r0, [pc, #128]	; (1e674 <button_pressed+0xb0>)
   1e5f2:	4d23      	ldr	r5, [pc, #140]	; (1e680 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   1e5f4:	4f23      	ldr	r7, [pc, #140]	; (1e684 <button_pressed+0xc0>)
   1e5f6:	f003 fc0f 	bl	21e18 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1e5fa:	2400      	movs	r4, #0
			err = gpio_pin_interrupt_configure(button_devs[i],
   1e5fc:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1e600:	f855 0b04 	ldr.w	r0, [r5], #4
   1e604:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1e606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1e60a:	3401      	adds	r4, #1
   1e60c:	f7ff feee 	bl	1e3ec <z_impl_gpio_pin_interrupt_configure>
   1e610:	2c04      	cmp	r4, #4
   1e612:	d006      	beq.n	1e622 <button_pressed+0x5e>
   1e614:	2800      	cmp	r0, #0
   1e616:	d0f1      	beq.n	1e5fc <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   1e618:	481b      	ldr	r0, [pc, #108]	; (1e688 <button_pressed+0xc4>)
   1e61a:	2145      	movs	r1, #69	; 0x45
   1e61c:	f004 fb86 	bl	22d2c <printk>
   1e620:	e001      	b.n	1e626 <button_pressed+0x62>
	if (err) {
   1e622:	2800      	cmp	r0, #0
   1e624:	d1f8      	bne.n	1e618 <button_pressed+0x54>
	switch (state) {
   1e626:	4b19      	ldr	r3, [pc, #100]	; (1e68c <button_pressed+0xc8>)
   1e628:	781a      	ldrb	r2, [r3, #0]
   1e62a:	b9ca      	cbnz	r2, 1e660 <button_pressed+0x9c>
		state = STATE_SCANNING;
   1e62c:	2201      	movs	r2, #1
   1e62e:	701a      	strb	r2, [r3, #0]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1e630:	4917      	ldr	r1, [pc, #92]	; (1e690 <button_pressed+0xcc>)
   1e632:	4818      	ldr	r0, [pc, #96]	; (1e694 <button_pressed+0xd0>)
   1e634:	2221      	movs	r2, #33	; 0x21
   1e636:	2300      	movs	r3, #0
   1e638:	f003 fc48 	bl	21ecc <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e63c:	480d      	ldr	r0, [pc, #52]	; (1e674 <button_pressed+0xb0>)
   1e63e:	f003 fbdb 	bl	21df8 <z_spin_unlock_valid>
   1e642:	b940      	cbnz	r0, 1e656 <button_pressed+0x92>
   1e644:	490c      	ldr	r1, [pc, #48]	; (1e678 <button_pressed+0xb4>)
   1e646:	480d      	ldr	r0, [pc, #52]	; (1e67c <button_pressed+0xb8>)
   1e648:	22a3      	movs	r2, #163	; 0xa3
   1e64a:	f004 fb6f 	bl	22d2c <printk>
   1e64e:	480a      	ldr	r0, [pc, #40]	; (1e678 <button_pressed+0xb4>)
   1e650:	21a3      	movs	r1, #163	; 0xa3
   1e652:	f004 fdce 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   1e656:	f386 8811 	msr	BASEPRI, r6
   1e65a:	f3bf 8f6f 	isb	sy
}
   1e65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   1e660:	490d      	ldr	r1, [pc, #52]	; (1e698 <button_pressed+0xd4>)
   1e662:	4806      	ldr	r0, [pc, #24]	; (1e67c <button_pressed+0xb8>)
   1e664:	22eb      	movs	r2, #235	; 0xeb
   1e666:	f004 fb61 	bl	22d2c <printk>
   1e66a:	480b      	ldr	r0, [pc, #44]	; (1e698 <button_pressed+0xd4>)
   1e66c:	21eb      	movs	r1, #235	; 0xeb
   1e66e:	f004 fdc0 	bl	231f2 <assert_post_action>
		break;
   1e672:	e7e3      	b.n	1e63c <button_pressed+0x78>
   1e674:	20002b00 	.word	0x20002b00
   1e678:	00027cd4 	.word	0x00027cd4
   1e67c:	00027c9a 	.word	0x00027c9a
   1e680:	20002aac 	.word	0x20002aac
   1e684:	00027920 	.word	0x00027920
   1e688:	0002a0c6 	.word	0x0002a0c6
   1e68c:	20003112 	.word	0x20003112
   1e690:	20002458 	.word	0x20002458
   1e694:	200026c8 	.word	0x200026c8
   1e698:	0002a0e4 	.word	0x0002a0e4

0001e69c <buttons_scan_fn>:
{
   1e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6a0:	4e6f      	ldr	r6, [pc, #444]	; (1e860 <buttons_scan_fn+0x1c4>)
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1e6a2:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 1e8a0 <buttons_scan_fn+0x204>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1e6a6:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 1e8a4 <buttons_scan_fn+0x208>
	uint32_t ret = 0;
   1e6aa:	2400      	movs	r4, #0
{
   1e6ac:	b085      	sub	sp, #20
   1e6ae:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e6b0:	4625      	mov	r5, r4
   1e6b2:	4657      	mov	r7, sl
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1e6b4:	eb0a 02c5 	add.w	r2, sl, r5, lsl #3
   1e6b8:	f859 3b04 	ldr.w	r3, [r9], #4
   1e6bc:	7912      	ldrb	r2, [r2, #4]
   1e6be:	f04f 0801 	mov.w	r8, #1
   1e6c2:	fa08 f802 	lsl.w	r8, r8, r2
   1e6c6:	685a      	ldr	r2, [r3, #4]
   1e6c8:	6812      	ldr	r2, [r2, #0]
   1e6ca:	ea18 0f02 	tst.w	r8, r2
   1e6ce:	d10c      	bne.n	1e6ea <buttons_scan_fn+0x4e>
   1e6d0:	4864      	ldr	r0, [pc, #400]	; (1e864 <buttons_scan_fn+0x1c8>)
   1e6d2:	9301      	str	r3, [sp, #4]
   1e6d4:	f44f 725e 	mov.w	r2, #888	; 0x378
   1e6d8:	4659      	mov	r1, fp
   1e6da:	f004 fb27 	bl	22d2c <printk>
   1e6de:	f44f 715e 	mov.w	r1, #888	; 0x378
   1e6e2:	4658      	mov	r0, fp
   1e6e4:	f004 fd85 	bl	231f2 <assert_post_action>
   1e6e8:	9b01      	ldr	r3, [sp, #4]
	return api->port_get_raw(port, value);
   1e6ea:	689a      	ldr	r2, [r3, #8]
   1e6ec:	a903      	add	r1, sp, #12
   1e6ee:	6852      	ldr	r2, [r2, #4]
   1e6f0:	4618      	mov	r0, r3
   1e6f2:	4790      	blx	r2
	if (ret == 0) {
   1e6f4:	2800      	cmp	r0, #0
   1e6f6:	d16c      	bne.n	1e7d2 <buttons_scan_fn+0x136>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1e6f8:	9b03      	ldr	r3, [sp, #12]
   1e6fa:	ea18 0f03 	tst.w	r8, r3
   1e6fe:	d003      	beq.n	1e708 <buttons_scan_fn+0x6c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e700:	3501      	adds	r5, #1
   1e702:	2d04      	cmp	r5, #4
   1e704:	d1d6      	bne.n	1e6b4 <buttons_scan_fn+0x18>
   1e706:	e06a      	b.n	1e7de <buttons_scan_fn+0x142>
			ret |= 1U << i;
   1e708:	2301      	movs	r3, #1
   1e70a:	40ab      	lsls	r3, r5
   1e70c:	431c      	orrs	r4, r3
   1e70e:	e7f7      	b.n	1e700 <buttons_scan_fn+0x64>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1e710:	3d04      	subs	r5, #4
   1e712:	2d00      	cmp	r5, #0
   1e714:	f000 808c 	beq.w	1e830 <buttons_scan_fn+0x194>
			handler->cb(button_state, has_changed);
   1e718:	46aa      	mov	sl, r5
   1e71a:	4641      	mov	r1, r8
   1e71c:	f85a 3b04 	ldr.w	r3, [sl], #4
   1e720:	4620      	mov	r0, r4
   1e722:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e724:	f1ba 0f00 	cmp.w	sl, #0
   1e728:	f000 8082 	beq.w	1e830 <buttons_scan_fn+0x194>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e72c:	686d      	ldr	r5, [r5, #4]
	return node->next;
   1e72e:	e07c      	b.n	1e82a <buttons_scan_fn+0x18e>
		initial_run = false;
   1e730:	2200      	movs	r2, #0
   1e732:	701a      	strb	r2, [r3, #0]
   1e734:	e07f      	b.n	1e836 <buttons_scan_fn+0x19a>
	__asm__ volatile(
   1e736:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e73a:	f3ef 8811 	mrs	r8, BASEPRI
   1e73e:	f383 8811 	msr	BASEPRI, r3
   1e742:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e746:	4848      	ldr	r0, [pc, #288]	; (1e868 <buttons_scan_fn+0x1cc>)
   1e748:	f003 fb48 	bl	21ddc <z_spin_lock_valid>
   1e74c:	b940      	cbnz	r0, 1e760 <buttons_scan_fn+0xc4>
   1e74e:	4947      	ldr	r1, [pc, #284]	; (1e86c <buttons_scan_fn+0x1d0>)
   1e750:	4844      	ldr	r0, [pc, #272]	; (1e864 <buttons_scan_fn+0x1c8>)
   1e752:	2278      	movs	r2, #120	; 0x78
   1e754:	f004 faea 	bl	22d2c <printk>
   1e758:	4844      	ldr	r0, [pc, #272]	; (1e86c <buttons_scan_fn+0x1d0>)
   1e75a:	2178      	movs	r1, #120	; 0x78
   1e75c:	f004 fd49 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e760:	4841      	ldr	r0, [pc, #260]	; (1e868 <buttons_scan_fn+0x1cc>)
   1e762:	f003 fb59 	bl	21e18 <z_spin_lock_set_owner>
		switch (state) {
   1e766:	4b42      	ldr	r3, [pc, #264]	; (1e870 <buttons_scan_fn+0x1d4>)
   1e768:	781a      	ldrb	r2, [r3, #0]
   1e76a:	2a01      	cmp	r2, #1
   1e76c:	d126      	bne.n	1e7bc <buttons_scan_fn+0x120>
			state = STATE_WAITING;
   1e76e:	2200      	movs	r2, #0
   1e770:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1e772:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1e776:	f856 0b04 	ldr.w	r0, [r6], #4
   1e77a:	7919      	ldrb	r1, [r3, #4]
   1e77c:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   1e780:	f7ff fe34 	bl	1e3ec <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1e784:	3401      	adds	r4, #1
   1e786:	2c04      	cmp	r4, #4
   1e788:	4605      	mov	r5, r0
   1e78a:	d001      	beq.n	1e790 <buttons_scan_fn+0xf4>
   1e78c:	2800      	cmp	r0, #0
   1e78e:	d0f0      	beq.n	1e772 <buttons_scan_fn+0xd6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e790:	4835      	ldr	r0, [pc, #212]	; (1e868 <buttons_scan_fn+0x1cc>)
   1e792:	f003 fb31 	bl	21df8 <z_spin_unlock_valid>
   1e796:	b940      	cbnz	r0, 1e7aa <buttons_scan_fn+0x10e>
   1e798:	4934      	ldr	r1, [pc, #208]	; (1e86c <buttons_scan_fn+0x1d0>)
   1e79a:	4832      	ldr	r0, [pc, #200]	; (1e864 <buttons_scan_fn+0x1c8>)
   1e79c:	22a3      	movs	r2, #163	; 0xa3
   1e79e:	f004 fac5 	bl	22d2c <printk>
   1e7a2:	4832      	ldr	r0, [pc, #200]	; (1e86c <buttons_scan_fn+0x1d0>)
   1e7a4:	21a3      	movs	r1, #163	; 0xa3
   1e7a6:	f004 fd24 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   1e7aa:	f388 8811 	msr	BASEPRI, r8
   1e7ae:	f3bf 8f6f 	isb	sy
		if (err) {
   1e7b2:	2d00      	cmp	r5, #0
   1e7b4:	d050      	beq.n	1e858 <buttons_scan_fn+0x1bc>
			LOG_ERR("Cannot enable callbacks");
   1e7b6:	482f      	ldr	r0, [pc, #188]	; (1e874 <buttons_scan_fn+0x1d8>)
   1e7b8:	2145      	movs	r1, #69	; 0x45
   1e7ba:	e04b      	b.n	1e854 <buttons_scan_fn+0x1b8>
			__ASSERT_NO_MSG(false);
   1e7bc:	492e      	ldr	r1, [pc, #184]	; (1e878 <buttons_scan_fn+0x1dc>)
   1e7be:	4829      	ldr	r0, [pc, #164]	; (1e864 <buttons_scan_fn+0x1c8>)
   1e7c0:	22b4      	movs	r2, #180	; 0xb4
   1e7c2:	f004 fab3 	bl	22d2c <printk>
   1e7c6:	482c      	ldr	r0, [pc, #176]	; (1e878 <buttons_scan_fn+0x1dc>)
   1e7c8:	21b4      	movs	r1, #180	; 0xb4
   1e7ca:	f004 fd12 	bl	231f2 <assert_post_action>
		int err = 0;
   1e7ce:	2500      	movs	r5, #0
			break;
   1e7d0:	e7de      	b.n	1e790 <buttons_scan_fn+0xf4>
		if (val < 0) {
   1e7d2:	da95      	bge.n	1e700 <buttons_scan_fn+0x64>
			LOG_ERR("Cannot read gpio pin");
   1e7d4:	4829      	ldr	r0, [pc, #164]	; (1e87c <buttons_scan_fn+0x1e0>)
   1e7d6:	2145      	movs	r1, #69	; 0x45
   1e7d8:	f004 faa8 	bl	22d2c <printk>
			return 0;
   1e7dc:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e7de:	4b28      	ldr	r3, [pc, #160]	; (1e880 <buttons_scan_fn+0x1e4>)
   1e7e0:	f3bf 8f5b 	dmb	ish
   1e7e4:	e853 2f00 	ldrex	r2, [r3]
   1e7e8:	e843 4100 	strex	r1, r4, [r3]
   1e7ec:	2900      	cmp	r1, #0
   1e7ee:	d1f9      	bne.n	1e7e4 <buttons_scan_fn+0x148>
   1e7f0:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1e7f4:	4b23      	ldr	r3, [pc, #140]	; (1e884 <buttons_scan_fn+0x1e8>)
   1e7f6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1e8a8 <buttons_scan_fn+0x20c>
   1e7fa:	781a      	ldrb	r2, [r3, #0]
   1e7fc:	2a00      	cmp	r2, #0
   1e7fe:	d197      	bne.n	1e730 <buttons_scan_fn+0x94>
		if (button_scan != last_button_scan) {
   1e800:	f8d9 3000 	ldr.w	r3, [r9]
   1e804:	42a3      	cmp	r3, r4
   1e806:	d016      	beq.n	1e836 <buttons_scan_fn+0x19a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1e808:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   1e80c:	4b1e      	ldr	r3, [pc, #120]	; (1e888 <buttons_scan_fn+0x1ec>)
   1e80e:	681b      	ldr	r3, [r3, #0]
   1e810:	b113      	cbz	r3, 1e818 <buttons_scan_fn+0x17c>
		button_handler_cb(button_state, has_changed);
   1e812:	4641      	mov	r1, r8
   1e814:	4620      	mov	r0, r4
   1e816:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1e818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e81c:	481b      	ldr	r0, [pc, #108]	; (1e88c <buttons_scan_fn+0x1f0>)
   1e81e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e822:	f001 fe11 	bl	20448 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1e826:	4b1a      	ldr	r3, [pc, #104]	; (1e890 <buttons_scan_fn+0x1f4>)
   1e828:	681d      	ldr	r5, [r3, #0]
   1e82a:	2d00      	cmp	r5, #0
   1e82c:	f47f af70 	bne.w	1e710 <buttons_scan_fn+0x74>
	return z_impl_k_mutex_unlock(mutex);
   1e830:	4816      	ldr	r0, [pc, #88]	; (1e88c <buttons_scan_fn+0x1f0>)
   1e832:	f001 fedb 	bl	205ec <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1e836:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   1e83a:	2c00      	cmp	r4, #0
   1e83c:	f43f af7b 	beq.w	1e736 <buttons_scan_fn+0x9a>
   1e840:	4914      	ldr	r1, [pc, #80]	; (1e894 <buttons_scan_fn+0x1f8>)
   1e842:	4815      	ldr	r0, [pc, #84]	; (1e898 <buttons_scan_fn+0x1fc>)
   1e844:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1e848:	2300      	movs	r3, #0
   1e84a:	f003 fb3f 	bl	21ecc <k_delayed_work_submit_to_queue>
		if (err) {
   1e84e:	b118      	cbz	r0, 1e858 <buttons_scan_fn+0x1bc>
			LOG_ERR("Cannot add work to workqueue");
   1e850:	4812      	ldr	r0, [pc, #72]	; (1e89c <buttons_scan_fn+0x200>)
   1e852:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Cannot enable callbacks");
   1e854:	f004 fa6a 	bl	22d2c <printk>
}
   1e858:	b005      	add	sp, #20
   1e85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e85e:	bf00      	nop
   1e860:	20002aac 	.word	0x20002aac
   1e864:	00027c9a 	.word	0x00027c9a
   1e868:	20002b00 	.word	0x20002b00
   1e86c:	00027cd4 	.word	0x00027cd4
   1e870:	20003112 	.word	0x20003112
   1e874:	0002a15e 	.word	0x0002a15e
   1e878:	0002a0e4 	.word	0x0002a0e4
   1e87c:	0002a122 	.word	0x0002a122
   1e880:	20002b04 	.word	0x20002b04
   1e884:	20000799 	.word	0x20000799
   1e888:	20002abc 	.word	0x20002abc
   1e88c:	20002ac0 	.word	0x20002ac0
   1e890:	20002ad4 	.word	0x20002ad4
   1e894:	20002458 	.word	0x20002458
   1e898:	200026c8 	.word	0x200026c8
   1e89c:	0002a13c 	.word	0x0002a13c
   1e8a0:	00027920 	.word	0x00027920
   1e8a4:	0002a081 	.word	0x0002a081
   1e8a8:	20002ae8 	.word	0x20002ae8

0001e8ac <dk_leds_init>:
{
   1e8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8ae:	4d13      	ldr	r5, [pc, #76]	; (1e8fc <dk_leds_init+0x50>)
   1e8b0:	4f13      	ldr	r7, [pc, #76]	; (1e900 <dk_leds_init+0x54>)
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1e8b2:	2600      	movs	r6, #0
		led_devs[i] = device_get_binding(led_pins[i].port);
   1e8b4:	6828      	ldr	r0, [r5, #0]
   1e8b6:	f001 fa69 	bl	1fd8c <z_impl_device_get_binding>
   1e8ba:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   1e8be:	b938      	cbnz	r0, 1e8d0 <dk_leds_init+0x24>
			LOG_ERR("Cannot bind gpio device");
   1e8c0:	4810      	ldr	r0, [pc, #64]	; (1e904 <dk_leds_init+0x58>)
   1e8c2:	2145      	movs	r1, #69	; 0x45
   1e8c4:	f004 fa32 	bl	22d2c <printk>
			return -ENODEV;
   1e8c8:	f06f 0412 	mvn.w	r4, #18
}
   1e8cc:	4620      	mov	r0, r4
   1e8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   1e8d0:	7929      	ldrb	r1, [r5, #4]
   1e8d2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e8d6:	f7ff fdf7 	bl	1e4c8 <gpio_pin_configure>
		if (err) {
   1e8da:	4604      	mov	r4, r0
   1e8dc:	b120      	cbz	r0, 1e8e8 <dk_leds_init+0x3c>
			LOG_ERR("Cannot configure LED gpio");
   1e8de:	480a      	ldr	r0, [pc, #40]	; (1e908 <dk_leds_init+0x5c>)
   1e8e0:	2145      	movs	r1, #69	; 0x45
   1e8e2:	f004 fa23 	bl	22d2c <printk>
			return err;
   1e8e6:	e7f1      	b.n	1e8cc <dk_leds_init+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1e8e8:	3601      	adds	r6, #1
   1e8ea:	2e04      	cmp	r6, #4
   1e8ec:	f105 0508 	add.w	r5, r5, #8
   1e8f0:	d1e0      	bne.n	1e8b4 <dk_leds_init+0x8>
}
   1e8f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e8f6:	210f      	movs	r1, #15
   1e8f8:	f7ff be36 	b.w	1e568 <dk_set_leds_state.part.0>
   1e8fc:	00027940 	.word	0x00027940
   1e900:	20002af0 	.word	0x20002af0
   1e904:	0002a17b 	.word	0x0002a17b
   1e908:	0002a198 	.word	0x0002a198

0001e90c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e90c:	4b07      	ldr	r3, [pc, #28]	; (1e92c <dk_read_buttons+0x20>)
   1e90e:	f3bf 8f5b 	dmb	ish
   1e912:	681b      	ldr	r3, [r3, #0]
   1e914:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   1e918:	b100      	cbz	r0, 1e91c <dk_read_buttons+0x10>
		*button_state = current_state;
   1e91a:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1e91c:	4804      	ldr	r0, [pc, #16]	; (1e930 <dk_read_buttons+0x24>)
   1e91e:	b111      	cbz	r1, 1e926 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1e920:	6802      	ldr	r2, [r0, #0]
   1e922:	405a      	eors	r2, r3
   1e924:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1e926:	6003      	str	r3, [r0, #0]
}
   1e928:	4770      	bx	lr
   1e92a:	bf00      	nop
   1e92c:	20002b04 	.word	0x20002b04
   1e930:	20002aec 	.word	0x20002aec

0001e934 <dk_buttons_init>:
{
   1e934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   1e938:	4b39      	ldr	r3, [pc, #228]	; (1ea20 <dk_buttons_init+0xec>)
   1e93a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1e93c:	4839      	ldr	r0, [pc, #228]	; (1ea24 <dk_buttons_init+0xf0>)
   1e93e:	4d3a      	ldr	r5, [pc, #232]	; (1ea28 <dk_buttons_init+0xf4>)
   1e940:	4f3a      	ldr	r7, [pc, #232]	; (1ea2c <dk_buttons_init+0xf8>)
   1e942:	f008 f8bf 	bl	26ac4 <z_impl_k_mutex_init>
   1e946:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e948:	2600      	movs	r6, #0
   1e94a:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   1e94c:	6828      	ldr	r0, [r5, #0]
   1e94e:	f001 fa1d 	bl	1fd8c <z_impl_device_get_binding>
   1e952:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   1e956:	b940      	cbnz	r0, 1e96a <dk_buttons_init+0x36>
			LOG_ERR("Cannot bind gpio device");
   1e958:	4835      	ldr	r0, [pc, #212]	; (1ea30 <dk_buttons_init+0xfc>)
   1e95a:	2145      	movs	r1, #69	; 0x45
   1e95c:	f004 f9e6 	bl	22d2c <printk>
			return -ENODEV;
   1e960:	f06f 0412 	mvn.w	r4, #18
}
   1e964:	4620      	mov	r0, r4
   1e966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1e96a:	7929      	ldrb	r1, [r5, #4]
   1e96c:	f44f 7288 	mov.w	r2, #272	; 0x110
   1e970:	f7ff fdaa 	bl	1e4c8 <gpio_pin_configure>
		if (err) {
   1e974:	4604      	mov	r4, r0
   1e976:	b120      	cbz	r0, 1e982 <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   1e978:	482e      	ldr	r0, [pc, #184]	; (1ea34 <dk_buttons_init+0x100>)
   1e97a:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Cannot add work to workqueue");
   1e97c:	f004 f9d6 	bl	22d2c <printk>
		return err;
   1e980:	e7f0      	b.n	1e964 <dk_buttons_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e982:	3601      	adds	r6, #1
   1e984:	2e04      	cmp	r6, #4
   1e986:	f105 0508 	add.w	r5, r5, #8
   1e98a:	d1df      	bne.n	1e94c <dk_buttons_init+0x18>
   1e98c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1ea2c <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e990:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   1e992:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   1e994:	f04f 0b01 	mov.w	fp, #1
		err = gpio_pin_interrupt_configure(button_devs[i],
   1e998:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   1e99c:	f85a 0b04 	ldr.w	r0, [sl], #4
   1e9a0:	791e      	ldrb	r6, [r3, #4]
   1e9a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e9a6:	4631      	mov	r1, r6
   1e9a8:	f7ff fd20 	bl	1e3ec <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   1e9ac:	4604      	mov	r4, r0
   1e9ae:	b110      	cbz	r0, 1e9b6 <dk_buttons_init+0x82>
			LOG_ERR("Cannot disable callbacks()");
   1e9b0:	4821      	ldr	r0, [pc, #132]	; (1ea38 <dk_buttons_init+0x104>)
   1e9b2:	2145      	movs	r1, #69	; 0x45
   1e9b4:	e7e2      	b.n	1e97c <dk_buttons_init+0x48>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e9b6:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   1e9b8:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e9bc:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   1e9be:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e9c2:	d1e9      	bne.n	1e998 <dk_buttons_init+0x64>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1e9c4:	4d1d      	ldr	r5, [pc, #116]	; (1ea3c <dk_buttons_init+0x108>)
   1e9c6:	4b1e      	ldr	r3, [pc, #120]	; (1ea40 <dk_buttons_init+0x10c>)
	callback->pin_mask = pin_mask;
   1e9c8:	e9c5 3901 	strd	r3, r9, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e9cc:	4606      	mov	r6, r0
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   1e9ce:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1e9d2:	6883      	ldr	r3, [r0, #8]
   1e9d4:	69db      	ldr	r3, [r3, #28]
   1e9d6:	b13b      	cbz	r3, 1e9e8 <dk_buttons_init+0xb4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1e9d8:	2201      	movs	r2, #1
   1e9da:	4629      	mov	r1, r5
   1e9dc:	4798      	blx	r3
		if (err) {
   1e9de:	4604      	mov	r4, r0
   1e9e0:	b128      	cbz	r0, 1e9ee <dk_buttons_init+0xba>
			LOG_ERR("Cannot add callback");
   1e9e2:	4818      	ldr	r0, [pc, #96]	; (1ea44 <dk_buttons_init+0x110>)
   1e9e4:	2145      	movs	r1, #69	; 0x45
   1e9e6:	e7c9      	b.n	1e97c <dk_buttons_init+0x48>
		return -ENOTSUP;
   1e9e8:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1e9ec:	e7f9      	b.n	1e9e2 <dk_buttons_init+0xae>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1e9ee:	3601      	adds	r6, #1
   1e9f0:	2e04      	cmp	r6, #4
   1e9f2:	d1ec      	bne.n	1e9ce <dk_buttons_init+0x9a>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   1e9f4:	4914      	ldr	r1, [pc, #80]	; (1ea48 <dk_buttons_init+0x114>)
   1e9f6:	4815      	ldr	r0, [pc, #84]	; (1ea4c <dk_buttons_init+0x118>)
   1e9f8:	f008 f963 	bl	26cc2 <k_delayed_work_init>
	state = STATE_SCANNING;
   1e9fc:	4b14      	ldr	r3, [pc, #80]	; (1ea50 <dk_buttons_init+0x11c>)
   1e9fe:	4913      	ldr	r1, [pc, #76]	; (1ea4c <dk_buttons_init+0x118>)
   1ea00:	4814      	ldr	r0, [pc, #80]	; (1ea54 <dk_buttons_init+0x120>)
   1ea02:	2201      	movs	r2, #1
   1ea04:	701a      	strb	r2, [r3, #0]
   1ea06:	2200      	movs	r2, #0
   1ea08:	2300      	movs	r3, #0
   1ea0a:	f003 fa5f 	bl	21ecc <k_delayed_work_submit_to_queue>
	if (err) {
   1ea0e:	4604      	mov	r4, r0
   1ea10:	b110      	cbz	r0, 1ea18 <dk_buttons_init+0xe4>
		LOG_ERR("Cannot add work to workqueue");
   1ea12:	4811      	ldr	r0, [pc, #68]	; (1ea58 <dk_buttons_init+0x124>)
   1ea14:	2145      	movs	r1, #69	; 0x45
   1ea16:	e7b1      	b.n	1e97c <dk_buttons_init+0x48>
	dk_read_buttons(NULL, NULL);
   1ea18:	4601      	mov	r1, r0
   1ea1a:	f7ff ff77 	bl	1e90c <dk_read_buttons>
	return 0;
   1ea1e:	e7a1      	b.n	1e964 <dk_buttons_init+0x30>
   1ea20:	20002abc 	.word	0x20002abc
   1ea24:	20002ac0 	.word	0x20002ac0
   1ea28:	00027920 	.word	0x00027920
   1ea2c:	20002aac 	.word	0x20002aac
   1ea30:	0002a17b 	.word	0x0002a17b
   1ea34:	0002a1b7 	.word	0x0002a1b7
   1ea38:	0002a1d9 	.word	0x0002a1d9
   1ea3c:	20002adc 	.word	0x20002adc
   1ea40:	0001e5c5 	.word	0x0001e5c5
   1ea44:	0002a1f9 	.word	0x0002a1f9
   1ea48:	0001e69d 	.word	0x0001e69d
   1ea4c:	20002458 	.word	0x20002458
   1ea50:	20003112 	.word	0x20003112
   1ea54:	200026c8 	.word	0x200026c8
   1ea58:	0002a13c 	.word	0x0002a13c

0001ea5c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   1ea5c:	2804      	cmp	r0, #4
{
   1ea5e:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   1ea60:	d907      	bls.n	1ea72 <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   1ea62:	480e      	ldr	r0, [pc, #56]	; (1ea9c <dk_set_led+0x40>)
   1ea64:	2145      	movs	r1, #69	; 0x45
   1ea66:	f004 f961 	bl	22d2c <printk>
   1ea6a:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1ea6e:	4620      	mov	r0, r4
   1ea70:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   1ea72:	4b0b      	ldr	r3, [pc, #44]	; (1eaa0 <dk_set_led+0x44>)
   1ea74:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1ea78:	fab1 f281 	clz	r2, r1
   1ea7c:	7919      	ldrb	r1, [r3, #4]
   1ea7e:	4b09      	ldr	r3, [pc, #36]	; (1eaa4 <dk_set_led+0x48>)
   1ea80:	0952      	lsrs	r2, r2, #5
   1ea82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1ea86:	f7ff fd4b 	bl	1e520 <gpio_pin_set_raw>
	if (err) {
   1ea8a:	4604      	mov	r4, r0
   1ea8c:	2800      	cmp	r0, #0
   1ea8e:	d0ee      	beq.n	1ea6e <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   1ea90:	4805      	ldr	r0, [pc, #20]	; (1eaa8 <dk_set_led+0x4c>)
   1ea92:	2145      	movs	r1, #69	; 0x45
   1ea94:	f004 f94a 	bl	22d2c <printk>
   1ea98:	e7e9      	b.n	1ea6e <dk_set_led+0x12>
   1ea9a:	bf00      	nop
   1ea9c:	0002a212 	.word	0x0002a212
   1eaa0:	00027940 	.word	0x00027940
   1eaa4:	20002af0 	.word	0x20002af0
   1eaa8:	0002a0ab 	.word	0x0002a0ab

0001eaac <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_SEM_DEFINE(mpsl_lock, 1, 1);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1eaac:	4602      	mov	r2, r0
   1eaae:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1eab0:	4801      	ldr	r0, [pc, #4]	; (1eab8 <multithreading_lock_acquire+0xc>)
   1eab2:	f002 bfd9 	b.w	21a68 <z_impl_k_sem_take>
   1eab6:	bf00      	nop
   1eab8:	20000890 	.word	0x20000890

0001eabc <multithreading_lock_release>:
	z_impl_k_sem_give(sem);
   1eabc:	4801      	ldr	r0, [pc, #4]	; (1eac4 <multithreading_lock_release+0x8>)
   1eabe:	f002 bf97 	b.w	219f0 <z_impl_k_sem_give>
   1eac2:	bf00      	nop
   1eac4:	20000890 	.word	0x20000890

0001eac8 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1eac8:	4803      	ldr	r0, [pc, #12]	; (1ead8 <k_sys_fatal_error_handler+0x10>)
{
   1eaca:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   1eacc:	2145      	movs	r1, #69	; 0x45
   1eace:	f004 f92d 	bl	22d2c <printk>
	sys_arch_reboot(0);
   1ead2:	2000      	movs	r0, #0
   1ead4:	f7f7 f8d2 	bl	15c7c <sys_arch_reboot>

	CODE_UNREACHABLE;
   1ead8:	0002a246 	.word	0x0002a246

0001eadc <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1eadc:	b508      	push	{r3, lr}
   1eade:	4602      	mov	r2, r0
   1eae0:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1eae2:	4805      	ldr	r0, [pc, #20]	; (1eaf8 <sdc_assertion_handler+0x1c>)
   1eae4:	2145      	movs	r1, #69	; 0x45
   1eae6:	f004 f921 	bl	22d2c <printk>
	k_oops();
   1eaea:	4040      	eors	r0, r0
   1eaec:	f380 8811 	msr	BASEPRI, r0
   1eaf0:	f04f 0003 	mov.w	r0, #3
   1eaf4:	df02      	svc	2
}
   1eaf6:	bd08      	pop	{r3, pc}
   1eaf8:	0002a268 	.word	0x0002a268

0001eafc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1eafc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1eafe:	4804      	ldr	r0, [pc, #16]	; (1eb10 <hci_driver_init+0x14>)
   1eb00:	f7f8 feea 	bl	178d8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1eb04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1eb08:	4802      	ldr	r0, [pc, #8]	; (1eb14 <hci_driver_init+0x18>)
   1eb0a:	f7e4 bff5 	b.w	3af8 <sdc_init>
   1eb0e:	bf00      	nop
   1eb10:	00027960 	.word	0x00027960
   1eb14:	0001eadd 	.word	0x0001eadd

0001eb18 <recv_thread>:
{
   1eb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   1eb1a:	2600      	movs	r6, #0
	return z_impl_k_sem_take(sem, timeout);
   1eb1c:	4f3a      	ldr	r7, [pc, #232]	; (1ec08 <recv_thread+0xf0>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   1eb1e:	4d3b      	ldr	r5, [pc, #236]	; (1ec0c <recv_thread+0xf4>)
	bool received_evt = false;
   1eb20:	4634      	mov	r4, r6
		if (!received_evt && !received_data) {
   1eb22:	b93c      	cbnz	r4, 1eb34 <recv_thread+0x1c>
   1eb24:	b936      	cbnz	r6, 1eb34 <recv_thread+0x1c>
   1eb26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eb2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eb2e:	4638      	mov	r0, r7
   1eb30:	f002 ff9a 	bl	21a68 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eb34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1eb38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1eb3c:	f7ff ffb6 	bl	1eaac <multithreading_lock_acquire>
	if (!errcode) {
   1eb40:	b160      	cbz	r0, 1eb5c <recv_thread+0x44>
		return false;
   1eb42:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eb44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1eb48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1eb4c:	f7ff ffae 	bl	1eaac <multithreading_lock_acquire>
	if (!errcode) {
   1eb50:	2800      	cmp	r0, #0
   1eb52:	d038      	beq.n	1ebc6 <recv_thread+0xae>
		return false;
   1eb54:	2600      	movs	r6, #0
	z_impl_k_yield();
   1eb56:	f002 fe0b 	bl	21770 <z_impl_k_yield>
}
   1eb5a:	e7e2      	b.n	1eb22 <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1eb5c:	482b      	ldr	r0, [pc, #172]	; (1ec0c <recv_thread+0xf4>)
   1eb5e:	f000 fbf7 	bl	1f350 <hci_internal_evt_get>
   1eb62:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1eb64:	f7ff ffaa 	bl	1eabc <multithreading_lock_release>
	if (errcode) {
   1eb68:	2c00      	cmp	r4, #0
   1eb6a:	d1ea      	bne.n	1eb42 <recv_thread+0x2a>
	switch (hdr->evt) {
   1eb6c:	7828      	ldrb	r0, [r5, #0]
   1eb6e:	283e      	cmp	r0, #62	; 0x3e
   1eb70:	d007      	beq.n	1eb82 <recv_thread+0x6a>
   1eb72:	28ff      	cmp	r0, #255	; 0xff
   1eb74:	d01a      	beq.n	1ebac <recv_thread+0x94>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1eb76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eb7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eb7e:	2400      	movs	r4, #0
   1eb80:	e007      	b.n	1eb92 <recv_thread+0x7a>
		switch (me->subevent) {
   1eb82:	78ab      	ldrb	r3, [r5, #2]
   1eb84:	2b02      	cmp	r3, #2
   1eb86:	d001      	beq.n	1eb8c <recv_thread+0x74>
   1eb88:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1eb8a:	d1f4      	bne.n	1eb76 <recv_thread+0x5e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1eb8c:	2200      	movs	r2, #0
   1eb8e:	2300      	movs	r3, #0
   1eb90:	2401      	movs	r4, #1
   1eb92:	4621      	mov	r1, r4
   1eb94:	f7f9 fb02 	bl	1819c <bt_buf_get_evt>
	if (!evt_buf) {
   1eb98:	4606      	mov	r6, r0
   1eb9a:	b950      	cbnz	r0, 1ebb2 <recv_thread+0x9a>
		if (discardable) {
   1eb9c:	2c00      	cmp	r4, #0
   1eb9e:	d1d1      	bne.n	1eb44 <recv_thread+0x2c>
		BT_ERR("No event buffer available");
   1eba0:	481b      	ldr	r0, [pc, #108]	; (1ec10 <recv_thread+0xf8>)
   1eba2:	2145      	movs	r1, #69	; 0x45
   1eba4:	f004 f8c2 	bl	22d2c <printk>
	return true;
   1eba8:	2401      	movs	r4, #1
   1ebaa:	e7cb      	b.n	1eb44 <recv_thread+0x2c>
		switch (subevent) {
   1ebac:	78ab      	ldrb	r3, [r5, #2]
   1ebae:	2b80      	cmp	r3, #128	; 0x80
   1ebb0:	e7eb      	b.n	1eb8a <recv_thread+0x72>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1ebb2:	786a      	ldrb	r2, [r5, #1]
   1ebb4:	4629      	mov	r1, r5
   1ebb6:	3202      	adds	r2, #2
   1ebb8:	3008      	adds	r0, #8
   1ebba:	f007 fd2e 	bl	2661a <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1ebbe:	4630      	mov	r0, r6
   1ebc0:	f7f8 fe60 	bl	17884 <bt_recv>
   1ebc4:	e7f0      	b.n	1eba8 <recv_thread+0x90>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1ebc6:	4811      	ldr	r0, [pc, #68]	; (1ec0c <recv_thread+0xf4>)
   1ebc8:	f7f0 fd16 	bl	f5f8 <sdc_hci_data_get>
   1ebcc:	4606      	mov	r6, r0
		MULTITHREADING_LOCK_RELEASE();
   1ebce:	f7ff ff75 	bl	1eabc <multithreading_lock_release>
	if (errcode) {
   1ebd2:	2e00      	cmp	r6, #0
   1ebd4:	d1be      	bne.n	1eb54 <recv_thread+0x3c>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1ebd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ebda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ebde:	2003      	movs	r0, #3
   1ebe0:	f7f9 fa8c 	bl	180fc <bt_buf_get_rx>
	if (!data_buf) {
   1ebe4:	4606      	mov	r6, r0
   1ebe6:	b928      	cbnz	r0, 1ebf4 <recv_thread+0xdc>
		BT_ERR("No data buffer available");
   1ebe8:	480a      	ldr	r0, [pc, #40]	; (1ec14 <recv_thread+0xfc>)
   1ebea:	2145      	movs	r1, #69	; 0x45
   1ebec:	f004 f89e 	bl	22d2c <printk>
	return true;
   1ebf0:	2601      	movs	r6, #1
   1ebf2:	e7b0      	b.n	1eb56 <recv_thread+0x3e>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1ebf4:	886a      	ldrh	r2, [r5, #2]
   1ebf6:	4629      	mov	r1, r5
   1ebf8:	3204      	adds	r2, #4
   1ebfa:	3008      	adds	r0, #8
   1ebfc:	f007 fd0d 	bl	2661a <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1ec00:	4630      	mov	r0, r6
   1ec02:	f7f8 fe3f 	bl	17884 <bt_recv>
   1ec06:	e7f3      	b.n	1ebf0 <recv_thread+0xd8>
   1ec08:	200008c0 	.word	0x200008c0
   1ec0c:	20003113 	.word	0x20003113
   1ec10:	0002a292 	.word	0x0002a292
   1ec14:	0002a2b1 	.word	0x0002a2b1

0001ec18 <hci_driver_open>:
{
   1ec18:	b510      	push	{r4, lr}
   1ec1a:	b08e      	sub	sp, #56	; 0x38
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ec1c:	2200      	movs	r2, #0
   1ec1e:	2300      	movs	r3, #0
   1ec20:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ec24:	2400      	movs	r4, #0
   1ec26:	f06f 0309 	mvn.w	r3, #9
   1ec2a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1ec2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1ec32:	4b3b      	ldr	r3, [pc, #236]	; (1ed20 <hci_driver_open+0x108>)
   1ec34:	493b      	ldr	r1, [pc, #236]	; (1ed24 <hci_driver_open+0x10c>)
   1ec36:	9400      	str	r4, [sp, #0]
   1ec38:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ec3c:	483a      	ldr	r0, [pc, #232]	; (1ed28 <hci_driver_open+0x110>)
   1ec3e:	f003 f807 	bl	21c50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1ec42:	493a      	ldr	r1, [pc, #232]	; (1ed2c <hci_driver_open+0x114>)
   1ec44:	4838      	ldr	r0, [pc, #224]	; (1ed28 <hci_driver_open+0x110>)
   1ec46:	f007 ffd4 	bl	26bf2 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1ec4a:	a809      	add	r0, sp, #36	; 0x24
   1ec4c:	f7e4 fef8 	bl	3a40 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1ec50:	4a37      	ldr	r2, [pc, #220]	; (1ed30 <hci_driver_open+0x118>)
   1ec52:	4838      	ldr	r0, [pc, #224]	; (1ed34 <hci_driver_open+0x11c>)
   1ec54:	2149      	movs	r1, #73	; 0x49
   1ec56:	f004 f869 	bl	22d2c <printk>
   1ec5a:	2214      	movs	r2, #20
   1ec5c:	a909      	add	r1, sp, #36	; 0x24
   1ec5e:	2003      	movs	r0, #3
   1ec60:	f7f4 ff94 	bl	13b8c <log_minimal_hexdump_print>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec64:	aa08      	add	r2, sp, #32
   1ec66:	2101      	movs	r1, #1
   1ec68:	4620      	mov	r0, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   1ec6a:	f88d 4020 	strb.w	r4, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec6e:	f7e4 fef5 	bl	3a5c <sdc_cfg_set>
	if (required_memory < 0) {
   1ec72:	2800      	cmp	r0, #0
   1ec74:	db2e      	blt.n	1ecd4 <hci_driver_open+0xbc>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1ec76:	2301      	movs	r3, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec78:	aa08      	add	r2, sp, #32
   1ec7a:	2102      	movs	r1, #2
   1ec7c:	4620      	mov	r0, r4
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1ec7e:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec82:	f7e4 feeb 	bl	3a5c <sdc_cfg_set>
	if (required_memory < 0) {
   1ec86:	2800      	cmp	r0, #0
   1ec88:	db24      	blt.n	1ecd4 <hci_driver_open+0xbc>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1ec8a:	4b2b      	ldr	r3, [pc, #172]	; (1ed38 <hci_driver_open+0x120>)
   1ec8c:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec8e:	aa08      	add	r2, sp, #32
   1ec90:	2103      	movs	r1, #3
   1ec92:	4620      	mov	r0, r4
   1ec94:	f7e4 fee2 	bl	3a5c <sdc_cfg_set>
	if (required_memory < 0) {
   1ec98:	2800      	cmp	r0, #0
   1ec9a:	db1b      	blt.n	1ecd4 <hci_driver_open+0xbc>
	cfg.event_length.event_length_us =
   1ec9c:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1eca0:	aa08      	add	r2, sp, #32
   1eca2:	2104      	movs	r1, #4
   1eca4:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1eca6:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1eca8:	f7e4 fed8 	bl	3a5c <sdc_cfg_set>
	if (required_memory < 0) {
   1ecac:	2800      	cmp	r0, #0
   1ecae:	db11      	blt.n	1ecd4 <hci_driver_open+0xbc>
	if (required_memory > sizeof(sdc_mempool)) {
   1ecb0:	f5b0 7f71 	cmp.w	r0, #964	; 0x3c4
   1ecb4:	dd10      	ble.n	1ecd8 <hci_driver_open+0xc0>
		BT_ERR("Allocated memory too low: %u < %u",
   1ecb6:	4603      	mov	r3, r0
   1ecb8:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1ecbc:	481f      	ldr	r0, [pc, #124]	; (1ed3c <hci_driver_open+0x124>)
   1ecbe:	2145      	movs	r1, #69	; 0x45
   1ecc0:	f004 f834 	bl	22d2c <printk>
		k_panic();
   1ecc4:	4040      	eors	r0, r0
   1ecc6:	f380 8811 	msr	BASEPRI, r0
   1ecca:	f04f 0004 	mov.w	r0, #4
   1ecce:	df02      	svc	2
		return -ENOMEM;
   1ecd0:	f06f 000b 	mvn.w	r0, #11
}
   1ecd4:	b00e      	add	sp, #56	; 0x38
   1ecd6:	bd10      	pop	{r4, pc}
			err = sdc_support_adv();
   1ecd8:	f7f0 f969 	bl	efae <sdc_support_adv>
			if (err) {
   1ecdc:	b110      	cbz	r0, 1ece4 <hci_driver_open+0xcc>
				return -ENOTSUP;
   1ecde:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1ece2:	e7f7      	b.n	1ecd4 <hci_driver_open+0xbc>
		err = sdc_support_slave();
   1ece4:	f7f0 f972 	bl	efcc <sdc_support_slave>
		if (err) {
   1ece8:	2800      	cmp	r0, #0
   1ecea:	d1f8      	bne.n	1ecde <hci_driver_open+0xc6>
		err = sdc_support_dle();
   1ecec:	f7f0 f964 	bl	efb8 <sdc_support_dle>
		if (err) {
   1ecf0:	2800      	cmp	r0, #0
   1ecf2:	d1f4      	bne.n	1ecde <hci_driver_open+0xc6>
		err = sdc_support_le_2m_phy();
   1ecf4:	f7f0 f965 	bl	efc2 <sdc_support_le_2m_phy>
		if (err) {
   1ecf8:	2800      	cmp	r0, #0
   1ecfa:	d1f0      	bne.n	1ecde <hci_driver_open+0xc6>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1ecfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ed04:	f7ff fed2 	bl	1eaac <multithreading_lock_acquire>
	if (!err) {
   1ed08:	4604      	mov	r4, r0
   1ed0a:	b930      	cbnz	r0, 1ed1a <hci_driver_open+0x102>
		err = sdc_enable(host_signal, sdc_mempool);
   1ed0c:	490c      	ldr	r1, [pc, #48]	; (1ed40 <hci_driver_open+0x128>)
   1ed0e:	480d      	ldr	r0, [pc, #52]	; (1ed44 <hci_driver_open+0x12c>)
   1ed10:	f7e4 fed0 	bl	3ab4 <sdc_enable>
   1ed14:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ed16:	f7ff fed1 	bl	1eabc <multithreading_lock_release>
	if (err < 0) {
   1ed1a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1ed1e:	e7d9      	b.n	1ecd4 <hci_driver_open+0xbc>
   1ed20:	0001eb19 	.word	0x0001eb19
   1ed24:	200048e0 	.word	0x200048e0
   1ed28:	20002488 	.word	0x20002488
   1ed2c:	0002a2cf 	.word	0x0002a2cf
   1ed30:	0002a2d6 	.word	0x0002a2d6
   1ed34:	0002a2fd 	.word	0x0002a2fd
   1ed38:	03031b1b 	.word	0x03031b1b
   1ed3c:	0002a305 	.word	0x0002a305
   1ed40:	2000315f 	.word	0x2000315f
   1ed44:	0001ed49 	.word	0x0001ed49

0001ed48 <host_signal>:
	z_impl_k_sem_give(sem);
   1ed48:	4801      	ldr	r0, [pc, #4]	; (1ed50 <host_signal+0x8>)
   1ed4a:	f002 be51 	b.w	219f0 <z_impl_k_sem_give>
   1ed4e:	bf00      	nop
   1ed50:	200008c0 	.word	0x200008c0

0001ed54 <hci_driver_send>:
{
   1ed54:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1ed56:	8983      	ldrh	r3, [r0, #12]
{
   1ed58:	4605      	mov	r5, r0
	if (!buf->len) {
   1ed5a:	b383      	cbz	r3, 1edbe <hci_driver_send+0x6a>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   1ed5c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1ed5e:	b1ab      	cbz	r3, 1ed8c <hci_driver_send+0x38>
   1ed60:	2b02      	cmp	r3, #2
   1ed62:	d12c      	bne.n	1edbe <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ed64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ed6c:	f7ff fe9e 	bl	1eaac <multithreading_lock_acquire>
	if (!errcode) {
   1ed70:	4604      	mov	r4, r0
   1ed72:	b948      	cbnz	r0, 1ed88 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1ed74:	68a8      	ldr	r0, [r5, #8]
   1ed76:	f7f0 fc4c 	bl	f612 <sdc_hci_data_put>
   1ed7a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ed7c:	f7ff fe9e 	bl	1eabc <multithreading_lock_release>
		if (errcode) {
   1ed80:	b1c4      	cbz	r4, 1edb4 <hci_driver_send+0x60>
   1ed82:	4810      	ldr	r0, [pc, #64]	; (1edc4 <hci_driver_send+0x70>)
   1ed84:	f002 fe34 	bl	219f0 <z_impl_k_sem_give>
}
   1ed88:	4620      	mov	r0, r4
   1ed8a:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ed8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ed94:	f7ff fe8a 	bl	1eaac <multithreading_lock_acquire>
	if (!errcode) {
   1ed98:	4604      	mov	r4, r0
   1ed9a:	2800      	cmp	r0, #0
   1ed9c:	d1f4      	bne.n	1ed88 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1ed9e:	68a8      	ldr	r0, [r5, #8]
   1eda0:	f000 f812 	bl	1edc8 <hci_internal_cmd_put>
   1eda4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1eda6:	f7ff fe89 	bl	1eabc <multithreading_lock_release>
	if (errcode) {
   1edaa:	2c00      	cmp	r4, #0
   1edac:	d1ec      	bne.n	1ed88 <hci_driver_send+0x34>
   1edae:	4805      	ldr	r0, [pc, #20]	; (1edc4 <hci_driver_send+0x70>)
   1edb0:	f002 fe1e 	bl	219f0 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1edb4:	4628      	mov	r0, r5
   1edb6:	f7fe fa53 	bl	1d260 <net_buf_unref>
   1edba:	2400      	movs	r4, #0
   1edbc:	e7e4      	b.n	1ed88 <hci_driver_send+0x34>
	switch (type) {
   1edbe:	f06f 0415 	mvn.w	r4, #21
   1edc2:	e7e1      	b.n	1ed88 <hci_driver_send+0x34>
   1edc4:	200008c0 	.word	0x200008c0

0001edc8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1edc8:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1edca:	4c8a      	ldr	r4, [pc, #552]	; (1eff4 <hci_internal_cmd_put+0x22c>)
   1edcc:	7823      	ldrb	r3, [r4, #0]
   1edce:	2b00      	cmp	r3, #0
   1edd0:	f040 82b8 	bne.w	1f344 <hci_internal_cmd_put+0x57c>
	return ((uint16_t)src[1] << 8) | src[0];
   1edd4:	7843      	ldrb	r3, [r0, #1]
   1edd6:	7805      	ldrb	r5, [r0, #0]
   1edd8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1eddc:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1ede0:	b22e      	sxth	r6, r5
   1ede2:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1ede6:	d20d      	bcs.n	1ee04 <hci_internal_cmd_put+0x3c>
   1ede8:	b17b      	cbz	r3, 1ee0a <hci_internal_cmd_put+0x42>
   1edea:	3b01      	subs	r3, #1
   1edec:	2b07      	cmp	r3, #7
   1edee:	d80c      	bhi.n	1ee0a <hci_internal_cmd_put+0x42>
   1edf0:	e8df f013 	tbh	[pc, r3, lsl #1]
   1edf4:	000b000e 	.word	0x000b000e
   1edf8:	0060002c 	.word	0x0060002c
   1edfc:	000b000b 	.word	0x000b000b
   1ee00:	0104000b 	.word	0x0104000b
   1ee04:	2b3f      	cmp	r3, #63	; 0x3f
   1ee06:	f000 821d 	beq.w	1f244 <hci_internal_cmd_put+0x47c>
   1ee0a:	2304      	movs	r3, #4
   1ee0c:	2001      	movs	r0, #1
   1ee0e:	e254      	b.n	1f2ba <hci_internal_cmd_put+0x4f2>
	switch (opcode)	{
   1ee10:	f240 4306 	movw	r3, #1030	; 0x406
   1ee14:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ee16:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1ee1a:	d005      	beq.n	1ee28 <hci_internal_cmd_put+0x60>
   1ee1c:	f240 431d 	movw	r3, #1053	; 0x41d
   1ee20:	429e      	cmp	r6, r3
   1ee22:	d010      	beq.n	1ee46 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1ee24:	2001      	movs	r0, #1
   1ee26:	e001      	b.n	1ee2c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1ee28:	f7f0 fd06 	bl	f838 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ee2c:	230f      	movs	r3, #15
   1ee2e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ee30:	2304      	movs	r3, #4
   1ee32:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1ee34:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1ee36:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1ee38:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1ee3a:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1ee3e:	2301      	movs	r3, #1
   1ee40:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1ee42:	2000      	movs	r0, #0
}
   1ee44:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1ee46:	f7f0 fcf9 	bl	f83c <sdc_hci_cmd_lc_read_remote_version_information>
   1ee4a:	e7ef      	b.n	1ee2c <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1ee4c:	f640 4363 	movw	r3, #3171	; 0xc63
   1ee50:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ee52:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1ee56:	d025      	beq.n	1eea4 <hci_internal_cmd_put+0xdc>
   1ee58:	dc0f      	bgt.n	1ee7a <hci_internal_cmd_put+0xb2>
   1ee5a:	f640 4303 	movw	r3, #3075	; 0xc03
   1ee5e:	429e      	cmp	r6, r3
   1ee60:	d018      	beq.n	1ee94 <hci_internal_cmd_put+0xcc>
   1ee62:	f640 432d 	movw	r3, #3117	; 0xc2d
   1ee66:	429e      	cmp	r6, r3
   1ee68:	d017      	beq.n	1ee9a <hci_internal_cmd_put+0xd2>
   1ee6a:	f640 4301 	movw	r3, #3073	; 0xc01
   1ee6e:	429e      	cmp	r6, r3
   1ee70:	d1d8      	bne.n	1ee24 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1ee72:	f7f0 fbea 	bl	f64a <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out +=
   1ee76:	2304      	movs	r3, #4
   1ee78:	e0b8      	b.n	1efec <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1ee7a:	f640 437b 	movw	r3, #3195	; 0xc7b
   1ee7e:	429e      	cmp	r6, r3
   1ee80:	d013      	beq.n	1eeaa <hci_internal_cmd_put+0xe2>
   1ee82:	f640 437c 	movw	r3, #3196	; 0xc7c
   1ee86:	429e      	cmp	r6, r3
   1ee88:	d1cc      	bne.n	1ee24 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1ee8a:	495b      	ldr	r1, [pc, #364]	; (1eff8 <hci_internal_cmd_put+0x230>)
   1ee8c:	f7f0 fbe7 	bl	f65e <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1ee90:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1ee92:	e0ab      	b.n	1efec <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1ee94:	f7e4 ffee 	bl	3e74 <sdc_hci_cmd_cb_reset>
   1ee98:	e7ed      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1ee9a:	4957      	ldr	r1, [pc, #348]	; (1eff8 <hci_internal_cmd_put+0x230>)
   1ee9c:	f7f0 fbd3 	bl	f646 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1eea0:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1eea2:	e0a3      	b.n	1efec <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1eea4:	f7f0 fbd6 	bl	f654 <sdc_hci_cmd_cb_set_event_mask_page_2>
   1eea8:	e7e5      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1eeaa:	4953      	ldr	r1, [pc, #332]	; (1eff8 <hci_internal_cmd_put+0x230>)
   1eeac:	f7f0 fbc9 	bl	f642 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1eeb0:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1eeb2:	e09b      	b.n	1efec <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1eeb4:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1eeb8:	3e01      	subs	r6, #1
   1eeba:	2e08      	cmp	r6, #8
   1eebc:	d8b2      	bhi.n	1ee24 <hci_internal_cmd_put+0x5c>
   1eebe:	a301      	add	r3, pc, #4	; (adr r3, 1eec4 <hci_internal_cmd_put+0xfc>)
   1eec0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1eec4:	0001eee9 	.word	0x0001eee9
   1eec8:	0001eef3 	.word	0x0001eef3
   1eecc:	0001efdd 	.word	0x0001efdd
   1eed0:	0001ee25 	.word	0x0001ee25
   1eed4:	0001ee25 	.word	0x0001ee25
   1eed8:	0001ee25 	.word	0x0001ee25
   1eedc:	0001ee25 	.word	0x0001ee25
   1eee0:	0001ee25 	.word	0x0001ee25
   1eee4:	0001efe5 	.word	0x0001efe5
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1eee8:	4843      	ldr	r0, [pc, #268]	; (1eff8 <hci_internal_cmd_put+0x230>)
   1eeea:	f7f0 fc58 	bl	f79e <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1eeee:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1eef0:	e07c      	b.n	1efec <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1eef2:	4841      	ldr	r0, [pc, #260]	; (1eff8 <hci_internal_cmd_put+0x230>)
   1eef4:	222e      	movs	r2, #46	; 0x2e
   1eef6:	2100      	movs	r1, #0
   1eef8:	f005 fe0f 	bl	24b1a <memset>
	cmds->hci_disconnect = 1;
   1eefc:	79e3      	ldrb	r3, [r4, #7]
   1eefe:	f043 0320 	orr.w	r3, r3, #32
   1ef02:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1ef04:	7a63      	ldrb	r3, [r4, #9]
   1ef06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ef0a:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1ef0c:	7b23      	ldrb	r3, [r4, #12]
   1ef0e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ef12:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1ef14:	7c63      	ldrb	r3, [r4, #17]
   1ef16:	f043 0304 	orr.w	r3, r3, #4
   1ef1a:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1ef1c:	7d63      	ldrb	r3, [r4, #21]
   1ef1e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1ef22:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1ef26:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1ef28:	7da3      	ldrb	r3, [r4, #22]
   1ef2a:	f043 0302 	orr.w	r3, r3, #2
   1ef2e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1ef30:	7f63      	ldrb	r3, [r4, #29]
   1ef32:	f043 0304 	orr.w	r3, r3, #4
   1ef36:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1ef38:	f894 3020 	ldrb.w	r3, [r4, #32]
   1ef3c:	f063 0308 	orn	r3, r3, #8
   1ef40:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1ef44:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1ef48:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1ef4c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1ef50:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1ef54:	f063 030c 	orn	r3, r3, #12
   1ef58:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1ef5c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1ef60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1ef64:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1ef68:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1ef6c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1ef70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1ef74:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1ef78:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1ef7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1ef80:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ef84:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1ef88:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1ef8c:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1ef90:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1ef94:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1ef98:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1ef9c:	f063 0301 	orn	r3, r3, #1
   1efa0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1efa4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1efa8:	f043 0301 	orr.w	r3, r3, #1
   1efac:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1efb0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1efb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1efb8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1efbc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1efc0:	f043 0304 	orr.w	r3, r3, #4
   1efc4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1efc8:	2344      	movs	r3, #68	; 0x44
		return 0;
   1efca:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1efcc:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1efce:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1efd0:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1efd2:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1efd4:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1efd6:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1efd8:	71a0      	strb	r0, [r4, #6]
}
   1efda:	e730      	b.n	1ee3e <hci_internal_cmd_put+0x76>
		return sdc_hci_cmd_ip_read_local_supported_features((void *)event_out_params);
   1efdc:	4806      	ldr	r0, [pc, #24]	; (1eff8 <hci_internal_cmd_put+0x230>)
   1efde:	f7f0 fbdc 	bl	f79a <sdc_hci_cmd_ip_read_local_supported_features>
   1efe2:	e784      	b.n	1eeee <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1efe4:	4804      	ldr	r0, [pc, #16]	; (1eff8 <hci_internal_cmd_put+0x230>)
   1efe6:	f7f0 fbd6 	bl	f796 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1efea:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1efec:	2801      	cmp	r0, #1
   1efee:	d1ed      	bne.n	1efcc <hci_internal_cmd_put+0x204>
   1eff0:	e71c      	b.n	1ee2c <hci_internal_cmd_put+0x64>
   1eff2:	bf00      	nop
   1eff4:	20003523 	.word	0x20003523
   1eff8:	2000352a 	.word	0x2000352a
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1effc:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1f000:	3e01      	subs	r6, #1
   1f002:	3003      	adds	r0, #3
	switch (opcode)	{
   1f004:	2e4d      	cmp	r6, #77	; 0x4d
   1f006:	f63f af0d 	bhi.w	1ee24 <hci_internal_cmd_put+0x5c>
   1f00a:	a301      	add	r3, pc, #4	; (adr r3, 1f010 <hci_internal_cmd_put+0x248>)
   1f00c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1f010:	0001f149 	.word	0x0001f149
   1f014:	0001f14f 	.word	0x0001f14f
   1f018:	0001f157 	.word	0x0001f157
   1f01c:	0001ee25 	.word	0x0001ee25
   1f020:	0001f15f 	.word	0x0001f15f
   1f024:	0001f165 	.word	0x0001f165
   1f028:	0001f16b 	.word	0x0001f16b
   1f02c:	0001f175 	.word	0x0001f175
   1f030:	0001f17b 	.word	0x0001f17b
   1f034:	0001f181 	.word	0x0001f181
   1f038:	0001ee25 	.word	0x0001ee25
   1f03c:	0001ee25 	.word	0x0001ee25
   1f040:	0001ee25 	.word	0x0001ee25
   1f044:	0001ee25 	.word	0x0001ee25
   1f048:	0001f187 	.word	0x0001f187
   1f04c:	0001f18f 	.word	0x0001f18f
   1f050:	0001f195 	.word	0x0001f195
   1f054:	0001f19b 	.word	0x0001f19b
   1f058:	0001ee25 	.word	0x0001ee25
   1f05c:	0001ee25 	.word	0x0001ee25
   1f060:	0001f1a1 	.word	0x0001f1a1
   1f064:	0001f1ab 	.word	0x0001f1ab
   1f068:	0001f1b1 	.word	0x0001f1b1
   1f06c:	0001f1bb 	.word	0x0001f1bb
   1f070:	0001ee25 	.word	0x0001ee25
   1f074:	0001f1c3 	.word	0x0001f1c3
   1f078:	0001f1cb 	.word	0x0001f1cb
   1f07c:	0001f1d3 	.word	0x0001f1d3
   1f080:	0001ee25 	.word	0x0001ee25
   1f084:	0001ee25 	.word	0x0001ee25
   1f088:	0001ee25 	.word	0x0001ee25
   1f08c:	0001ee25 	.word	0x0001ee25
   1f090:	0001ee25 	.word	0x0001ee25
   1f094:	0001f1df 	.word	0x0001f1df
   1f098:	0001f1e7 	.word	0x0001f1e7
   1f09c:	0001f1ef 	.word	0x0001f1ef
   1f0a0:	0001ee25 	.word	0x0001ee25
   1f0a4:	0001ee25 	.word	0x0001ee25
   1f0a8:	0001f1f5 	.word	0x0001f1f5
   1f0ac:	0001f1fb 	.word	0x0001f1fb
   1f0b0:	0001f201 	.word	0x0001f201
   1f0b4:	0001f207 	.word	0x0001f207
   1f0b8:	0001ee25 	.word	0x0001ee25
   1f0bc:	0001ee25 	.word	0x0001ee25
   1f0c0:	0001f20f 	.word	0x0001f20f
   1f0c4:	0001f215 	.word	0x0001f215
   1f0c8:	0001f21b 	.word	0x0001f21b
   1f0cc:	0001f223 	.word	0x0001f223
   1f0d0:	0001f22b 	.word	0x0001f22b
   1f0d4:	0001f231 	.word	0x0001f231
   1f0d8:	0001ee25 	.word	0x0001ee25
   1f0dc:	0001ee25 	.word	0x0001ee25
   1f0e0:	0001ee25 	.word	0x0001ee25
   1f0e4:	0001ee25 	.word	0x0001ee25
   1f0e8:	0001ee25 	.word	0x0001ee25
   1f0ec:	0001ee25 	.word	0x0001ee25
   1f0f0:	0001ee25 	.word	0x0001ee25
   1f0f4:	0001ee25 	.word	0x0001ee25
   1f0f8:	0001ee25 	.word	0x0001ee25
   1f0fc:	0001ee25 	.word	0x0001ee25
   1f100:	0001ee25 	.word	0x0001ee25
   1f104:	0001ee25 	.word	0x0001ee25
   1f108:	0001ee25 	.word	0x0001ee25
   1f10c:	0001ee25 	.word	0x0001ee25
   1f110:	0001ee25 	.word	0x0001ee25
   1f114:	0001ee25 	.word	0x0001ee25
   1f118:	0001ee25 	.word	0x0001ee25
   1f11c:	0001ee25 	.word	0x0001ee25
   1f120:	0001ee25 	.word	0x0001ee25
   1f124:	0001ee25 	.word	0x0001ee25
   1f128:	0001ee25 	.word	0x0001ee25
   1f12c:	0001ee25 	.word	0x0001ee25
   1f130:	0001ee25 	.word	0x0001ee25
   1f134:	0001ee25 	.word	0x0001ee25
   1f138:	0001f237 	.word	0x0001f237
   1f13c:	0001ee25 	.word	0x0001ee25
   1f140:	0001ee25 	.word	0x0001ee25
   1f144:	0001f23f 	.word	0x0001f23f
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1f148:	f7f0 fb65 	bl	f816 <sdc_hci_cmd_le_set_event_mask>
   1f14c:	e693      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f14e:	487f      	ldr	r0, [pc, #508]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f150:	f7f0 fb3d 	bl	f7ce <sdc_hci_cmd_le_read_buffer_size>
   1f154:	e6a4      	b.n	1eea0 <hci_internal_cmd_put+0xd8>
		return sdc_hci_cmd_le_read_local_supported_features((void *)event_out_params);
   1f156:	487d      	ldr	r0, [pc, #500]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f158:	f7f0 fb3d 	bl	f7d6 <sdc_hci_cmd_le_read_local_supported_features>
   1f15c:	e6c7      	b.n	1eeee <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1f15e:	f7f0 fb63 	bl	f828 <sdc_hci_cmd_le_set_random_address>
   1f162:	e688      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1f164:	f7f0 fb51 	bl	f80a <sdc_hci_cmd_le_set_adv_params>
   1f168:	e685      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1f16a:	4878      	ldr	r0, [pc, #480]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f16c:	f7f0 fb2d 	bl	f7ca <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1f170:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1f172:	e73b      	b.n	1efec <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1f174:	f7f0 fb45 	bl	f802 <sdc_hci_cmd_le_set_adv_data>
   1f178:	e67d      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1f17a:	f7f0 fb59 	bl	f830 <sdc_hci_cmd_le_set_scan_response_data>
   1f17e:	e67a      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1f180:	f7f0 fb41 	bl	f806 <sdc_hci_cmd_le_set_adv_enable>
   1f184:	e677      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1f186:	4871      	ldr	r0, [pc, #452]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f188:	f7f0 fb33 	bl	f7f2 <sdc_hci_cmd_le_read_white_list_size>
   1f18c:	e7f0      	b.n	1f170 <hci_internal_cmd_put+0x3a8>
		return sdc_hci_cmd_le_clear_white_list();
   1f18e:	f7f0 fb0e 	bl	f7ae <sdc_hci_cmd_le_clear_white_list>
   1f192:	e670      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1f194:	f7f0 fb07 	bl	f7a6 <sdc_hci_cmd_le_add_device_to_white_list>
   1f198:	e66d      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1f19a:	f7f0 fb2e 	bl	f7fa <sdc_hci_cmd_le_remove_device_from_white_list>
   1f19e:	e66a      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f1a0:	496a      	ldr	r1, [pc, #424]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f1a2:	f7f0 fb16 	bl	f7d2 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1f1a6:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1f1a8:	e720      	b.n	1efec <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1f1aa:	f7f0 fb1a 	bl	f7e2 <sdc_hci_cmd_le_read_remote_features>
   1f1ae:	e63d      	b.n	1ee2c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f1b0:	4966      	ldr	r1, [pc, #408]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f1b2:	f7f0 fafe 	bl	f7b2 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1f1b6:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1f1b8:	e718      	b.n	1efec <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1f1ba:	4864      	ldr	r0, [pc, #400]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f1bc:	f7f0 fb03 	bl	f7c6 <sdc_hci_cmd_le_rand>
   1f1c0:	e695      	b.n	1eeee <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1f1c2:	4962      	ldr	r1, [pc, #392]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f1c4:	f7f0 fafb 	bl	f7be <sdc_hci_cmd_le_long_term_key_request_reply>
   1f1c8:	e662      	b.n	1ee90 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1f1ca:	4960      	ldr	r1, [pc, #384]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f1cc:	f7f0 faf3 	bl	f7b6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1f1d0:	e65e      	b.n	1ee90 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1f1d2:	238f      	movs	r3, #143	; 0x8f
   1f1d4:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1f1d6:	23c0      	movs	r3, #192	; 0xc0
   1f1d8:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1f1da:	230c      	movs	r3, #12
   1f1dc:	e6f5      	b.n	1efca <hci_internal_cmd_put+0x202>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1f1de:	495b      	ldr	r1, [pc, #364]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f1e0:	f7f0 fb15 	bl	f80e <sdc_hci_cmd_le_set_data_length>
   1f1e4:	e654      	b.n	1ee90 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1f1e6:	4859      	ldr	r0, [pc, #356]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f1e8:	f7f0 faff 	bl	f7ea <sdc_hci_cmd_le_read_suggested_default_data_length>
   1f1ec:	e660      	b.n	1eeb0 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1f1ee:	f7f0 fb21 	bl	f834 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1f1f2:	e640      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1f1f4:	f7f0 fad5 	bl	f7a2 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1f1f8:	e63d      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1f1fa:	f7f0 fafc 	bl	f7f6 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1f1fe:	e63a      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1f200:	f7f0 fad3 	bl	f7aa <sdc_hci_cmd_le_clear_resolving_list>
   1f204:	e637      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1f206:	4851      	ldr	r0, [pc, #324]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f208:	f7f0 faed 	bl	f7e6 <sdc_hci_cmd_le_read_resolving_list_size>
   1f20c:	e7b0      	b.n	1f170 <hci_internal_cmd_put+0x3a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1f20e:	f7f0 faf6 	bl	f7fe <sdc_hci_cmd_le_set_address_resolution_enable>
   1f212:	e630      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1f214:	f7f0 fb0a 	bl	f82c <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1f218:	e62d      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f21a:	484c      	ldr	r0, [pc, #304]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f21c:	f7f0 fadd 	bl	f7da <sdc_hci_cmd_le_read_max_data_length>
   1f220:	e665      	b.n	1eeee <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f222:	494a      	ldr	r1, [pc, #296]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f224:	f7f0 fadb 	bl	f7de <sdc_hci_cmd_le_read_phy>
   1f228:	e642      	b.n	1eeb0 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1f22a:	f7f0 faf2 	bl	f812 <sdc_hci_cmd_le_set_default_phy>
   1f22e:	e622      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1f230:	f7f0 faf6 	bl	f820 <sdc_hci_cmd_le_set_phy>
   1f234:	e5fa      	b.n	1ee2c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f236:	4845      	ldr	r0, [pc, #276]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f238:	f7f0 fad9 	bl	f7ee <sdc_hci_cmd_le_read_transmit_power>
   1f23c:	e628      	b.n	1ee90 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1f23e:	f7f0 faf1 	bl	f824 <sdc_hci_cmd_le_set_privacy_mode>
   1f242:	e618      	b.n	1ee76 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1f244:	f64f 4309 	movw	r3, #64521	; 0xfc09
   1f248:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f24a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f24e:	d81f      	bhi.n	1f290 <hci_internal_cmd_put+0x4c8>
   1f250:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1f254:	f43f ade6 	beq.w	1ee24 <hci_internal_cmd_put+0x5c>
   1f258:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1f25c:	3b01      	subs	r3, #1
   1f25e:	2b08      	cmp	r3, #8
   1f260:	f63f ade0 	bhi.w	1ee24 <hci_internal_cmd_put+0x5c>
   1f264:	a201      	add	r2, pc, #4	; (adr r2, 1f26c <hci_internal_cmd_put+0x4a4>)
   1f266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f26a:	bf00      	nop
   1f26c:	0001f2b3 	.word	0x0001f2b3
   1f270:	0001f2e1 	.word	0x0001f2e1
   1f274:	0001ee25 	.word	0x0001ee25
   1f278:	0001ee25 	.word	0x0001ee25
   1f27c:	0001ee25 	.word	0x0001ee25
   1f280:	0001f2f5 	.word	0x0001f2f5
   1f284:	0001ee25 	.word	0x0001ee25
   1f288:	0001ee25 	.word	0x0001ee25
   1f28c:	0001f2eb 	.word	0x0001f2eb
   1f290:	f205 23ff 	addw	r3, r5, #767	; 0x2ff
   1f294:	b29b      	uxth	r3, r3
   1f296:	2b04      	cmp	r3, #4
   1f298:	f63f adc4 	bhi.w	1ee24 <hci_internal_cmd_put+0x5c>
   1f29c:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1f2a0:	3b01      	subs	r3, #1
   1f2a2:	2b04      	cmp	r3, #4
   1f2a4:	f63f adbe 	bhi.w	1ee24 <hci_internal_cmd_put+0x5c>
   1f2a8:	e8df f003 	tbb	[pc, r3]
   1f2ac:	312e2b28 	.word	0x312e2b28
   1f2b0:	34          	.byte	0x34
   1f2b1:	00          	.byte	0x00
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1f2b2:	4826      	ldr	r0, [pc, #152]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f2b4:	f7e4 fdf6 	bl	3ea4 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1f2b8:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1f2ba:	f242 0219 	movw	r2, #8217	; 0x2019
   1f2be:	4296      	cmp	r6, r2
   1f2c0:	dc38      	bgt.n	1f334 <hci_internal_cmd_put+0x56c>
   1f2c2:	f242 020c 	movw	r2, #8204	; 0x200c
   1f2c6:	4296      	cmp	r6, r2
   1f2c8:	dc27      	bgt.n	1f31a <hci_internal_cmd_put+0x552>
   1f2ca:	f240 4206 	movw	r2, #1030	; 0x406
   1f2ce:	4296      	cmp	r6, r2
   1f2d0:	f43f adac 	beq.w	1ee2c <hci_internal_cmd_put+0x64>
   1f2d4:	f240 421d 	movw	r2, #1053	; 0x41d
   1f2d8:	4296      	cmp	r6, r2
   1f2da:	f43f ada7 	beq.w	1ee2c <hci_internal_cmd_put+0x64>
   1f2de:	e685      	b.n	1efec <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_vs_zephyr_read_supported_commands((void *)event_out_params);
   1f2e0:	481a      	ldr	r0, [pc, #104]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f2e2:	f7f0 fa46 	bl	f772 <sdc_hci_cmd_vs_zephyr_read_supported_commands>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1f2e6:	2344      	movs	r3, #68	; 0x44
		return sdc_hci_cmd_vs_zephyr_read_supported_commands((void *)event_out_params);
   1f2e8:	e7e7      	b.n	1f2ba <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1f2ea:	4818      	ldr	r0, [pc, #96]	; (1f34c <hci_internal_cmd_put+0x584>)
   1f2ec:	f7f0 f9fa 	bl	f6e4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1f2f0:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1f2f2:	e7e2      	b.n	1f2ba <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1f2f4:	f7f0 fa4d 	bl	f792 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1f2f8:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1f2fa:	e7de      	b.n	1f2ba <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1f2fc:	f7f0 f9e5 	bl	f6ca <sdc_hci_cmd_vs_llpm_mode_set>
   1f300:	e5b9      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1f302:	f7f0 f9b6 	bl	f672 <sdc_hci_cmd_vs_conn_update>
   1f306:	e5b6      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1f308:	f7f0 f9ab 	bl	f662 <sdc_hci_cmd_vs_conn_event_extend>
   1f30c:	e5b3      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1f30e:	f7f0 f9e4 	bl	f6da <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1f312:	e5b0      	b.n	1ee76 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1f314:	f7f0 f9d7 	bl	f6c6 <sdc_hci_cmd_vs_event_length_set>
   1f318:	e5ad      	b.n	1ee76 <hci_internal_cmd_put+0xae>
   1f31a:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1f31e:	3a0d      	subs	r2, #13
   1f320:	2101      	movs	r1, #1
   1f322:	b292      	uxth	r2, r2
   1f324:	fa01 f202 	lsl.w	r2, r1, r2
   1f328:	f241 2141 	movw	r1, #4673	; 0x1241
   1f32c:	420a      	tst	r2, r1
   1f32e:	f43f ae5d 	beq.w	1efec <hci_internal_cmd_put+0x224>
   1f332:	e57b      	b.n	1ee2c <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1f334:	f242 0232 	movw	r2, #8242	; 0x2032
   1f338:	4296      	cmp	r6, r2
   1f33a:	f43f ad77 	beq.w	1ee2c <hci_internal_cmd_put+0x64>
   1f33e:	f242 0243 	movw	r2, #8259	; 0x2043
   1f342:	e7c9      	b.n	1f2d8 <hci_internal_cmd_put+0x510>
		return -NRF_EPERM;
   1f344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f348:	e57c      	b.n	1ee44 <hci_internal_cmd_put+0x7c>
   1f34a:	bf00      	nop
   1f34c:	2000352a 	.word	0x2000352a

0001f350 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1f350:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1f352:	4c07      	ldr	r4, [pc, #28]	; (1f370 <hci_internal_evt_get+0x20>)
   1f354:	7823      	ldrb	r3, [r4, #0]
   1f356:	b13b      	cbz	r3, 1f368 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1f358:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1f35a:	1c61      	adds	r1, r4, #1
   1f35c:	3202      	adds	r2, #2
   1f35e:	f005 fbb1 	bl	24ac4 <memcpy>
		cmd_complete_or_status.occurred = false;
   1f362:	2000      	movs	r0, #0
   1f364:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1f366:	bd10      	pop	{r4, pc}
   1f368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1f36c:	f7f0 b95c 	b.w	f628 <sdc_hci_evt_get>
   1f370:	20003523 	.word	0x20003523

0001f374 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1f374:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1f376:	b570      	push	{r4, r5, r6, lr}
   1f378:	4604      	mov	r4, r0
   1f37a:	460d      	mov	r5, r1
   1f37c:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1f380:	d915      	bls.n	1f3ae <sys_memcpy_swap.constprop.0+0x3a>
   1f382:	42b0      	cmp	r0, r6
   1f384:	d20a      	bcs.n	1f39c <sys_memcpy_swap.constprop.0+0x28>
   1f386:	490c      	ldr	r1, [pc, #48]	; (1f3b8 <sys_memcpy_swap.constprop.0+0x44>)
   1f388:	480c      	ldr	r0, [pc, #48]	; (1f3bc <sys_memcpy_swap.constprop.0+0x48>)
   1f38a:	f240 2217 	movw	r2, #535	; 0x217
   1f38e:	f003 fccd 	bl	22d2c <printk>
   1f392:	4809      	ldr	r0, [pc, #36]	; (1f3b8 <sys_memcpy_swap.constprop.0+0x44>)
   1f394:	f240 2117 	movw	r1, #535	; 0x217
   1f398:	f003 ff2b 	bl	231f2 <assert_post_action>
	for (; length > 0; length--) {
   1f39c:	4633      	mov	r3, r6
   1f39e:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1f3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1f3a4:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1f3a8:	42ab      	cmp	r3, r5
   1f3aa:	d1f9      	bne.n	1f3a0 <sys_memcpy_swap.constprop.0+0x2c>
}
   1f3ac:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1f3ae:	d0ea      	beq.n	1f386 <sys_memcpy_swap.constprop.0+0x12>
   1f3b0:	f100 0310 	add.w	r3, r0, #16
   1f3b4:	4299      	cmp	r1, r3
   1f3b6:	e7e5      	b.n	1f384 <sys_memcpy_swap.constprop.0+0x10>
   1f3b8:	0002863f 	.word	0x0002863f
   1f3bc:	00027c9a 	.word	0x00027c9a

0001f3c0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1f3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1f3c4:	4e12      	ldr	r6, [pc, #72]	; (1f410 <bt_rand+0x50>)
   1f3c6:	6833      	ldr	r3, [r6, #0]
{
   1f3c8:	4605      	mov	r5, r0
   1f3ca:	460c      	mov	r4, r1
   1f3cc:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   1f3ce:	b1a3      	cbz	r3, 1f3fa <bt_rand+0x3a>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1f3d0:	683e      	ldr	r6, [r7, #0]
   1f3d2:	b2a4      	uxth	r4, r4

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1f3d4:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1f3d6:	683b      	ldr	r3, [r7, #0]
   1f3d8:	b943      	cbnz	r3, 1f3ec <bt_rand+0x2c>
   1f3da:	490e      	ldr	r1, [pc, #56]	; (1f414 <bt_rand+0x54>)
   1f3dc:	480e      	ldr	r0, [pc, #56]	; (1f418 <bt_rand+0x58>)
   1f3de:	224b      	movs	r2, #75	; 0x4b
   1f3e0:	f003 fca4 	bl	22d2c <printk>
   1f3e4:	480b      	ldr	r0, [pc, #44]	; (1f414 <bt_rand+0x54>)
   1f3e6:	214b      	movs	r1, #75	; 0x4b
   1f3e8:	f003 ff03 	bl	231f2 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1f3ec:	683b      	ldr	r3, [r7, #0]
   1f3ee:	4622      	mov	r2, r4
   1f3f0:	4629      	mov	r1, r5
   1f3f2:	4630      	mov	r0, r6
}
   1f3f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f3f8:	4718      	bx	r3
   1f3fa:	4808      	ldr	r0, [pc, #32]	; (1f41c <bt_rand+0x5c>)
   1f3fc:	f000 fcc6 	bl	1fd8c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1f400:	6030      	str	r0, [r6, #0]
		if (!dev) {
   1f402:	2800      	cmp	r0, #0
   1f404:	d1e4      	bne.n	1f3d0 <bt_rand+0x10>
}
   1f406:	f06f 0012 	mvn.w	r0, #18
   1f40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f40e:	bf00      	nop
   1f410:	20002b08 	.word	0x20002b08
   1f414:	0002a351 	.word	0x0002a351
   1f418:	00027c9a 	.word	0x00027c9a
   1f41c:	0002a07d 	.word	0x0002a07d

0001f420 <m_assert_handler>:
	 */
	return 1;
}

static void m_assert_handler(const char *const file, const uint32_t line)
{
   1f420:	b508      	push	{r3, lr}
   1f422:	4602      	mov	r2, r0
   1f424:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1f426:	4805      	ldr	r0, [pc, #20]	; (1f43c <m_assert_handler+0x1c>)
   1f428:	2145      	movs	r1, #69	; 0x45
   1f42a:	f003 fc7f 	bl	22d2c <printk>
	k_oops();
   1f42e:	4040      	eors	r0, r0
   1f430:	f380 8811 	msr	BASEPRI, r0
   1f434:	f04f 0003 	mov.w	r0, #3
   1f438:	df02      	svc	2
}
   1f43a:	bd08      	pop	{r3, pc}
   1f43c:	0002a389 	.word	0x0002a389

0001f440 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1f440:	b537      	push	{r0, r1, r2, r4, r5, lr}
	err_code = nrfx_dppi_channel_alloc(&channel);
	__ASSERT_NO_MSG(err_code == NRFX_SUCCESS && channel == 2);
#endif

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1f442:	2314      	movs	r3, #20
   1f444:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f448:	4a0f      	ldr	r2, [pc, #60]	; (1f488 <mpsl_lib_init+0x48>)
	clock_cfg.rc_temp_ctiv = 0;
   1f44a:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1f44c:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f44e:	2119      	movs	r1, #25
   1f450:	4668      	mov	r0, sp
	clock_cfg.source = m_config_clock_source_get();
   1f452:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1f456:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f45a:	f7e4 f8db 	bl	3614 <mpsl_init>
	if (err) {
   1f45e:	4604      	mov	r4, r0
   1f460:	b970      	cbnz	r0, 1f480 <mpsl_lib_init+0x40>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f462:	4601      	mov	r1, r0
   1f464:	462a      	mov	r2, r5
   1f466:	2008      	movs	r0, #8
   1f468:	f7f5 ff22 	bl	152b0 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f46c:	462a      	mov	r2, r5
   1f46e:	4621      	mov	r1, r4
   1f470:	200b      	movs	r0, #11
   1f472:	f7f5 ff1d 	bl	152b0 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f476:	462a      	mov	r2, r5
   1f478:	4621      	mov	r1, r4
   1f47a:	4628      	mov	r0, r5
   1f47c:	f7f5 ff18 	bl	152b0 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1f480:	4620      	mov	r0, r4
   1f482:	b003      	add	sp, #12
   1f484:	bd30      	pop	{r4, r5, pc}
   1f486:	bf00      	nop
   1f488:	0001f421 	.word	0x0001f421

0001f48c <mpsl_low_prio_irq_handler>:
   1f48c:	4801      	ldr	r0, [pc, #4]	; (1f494 <mpsl_low_prio_irq_handler+0x8>)
   1f48e:	f002 baaf 	b.w	219f0 <z_impl_k_sem_give>
   1f492:	bf00      	nop
   1f494:	200008d8 	.word	0x200008d8

0001f498 <signal_thread>:
{
   1f498:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   1f49a:	4d0f      	ldr	r5, [pc, #60]	; (1f4d8 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   1f49c:	4c0f      	ldr	r4, [pc, #60]	; (1f4dc <signal_thread+0x44>)
   1f49e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f4a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f4a6:	4628      	mov	r0, r5
   1f4a8:	f002 fade 	bl	21a68 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f4ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f4b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f4b4:	f7ff fafa 	bl	1eaac <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   1f4b8:	b140      	cbz	r0, 1f4cc <signal_thread+0x34>
   1f4ba:	4809      	ldr	r0, [pc, #36]	; (1f4e0 <signal_thread+0x48>)
   1f4bc:	4621      	mov	r1, r4
   1f4be:	223f      	movs	r2, #63	; 0x3f
   1f4c0:	f003 fc34 	bl	22d2c <printk>
   1f4c4:	213f      	movs	r1, #63	; 0x3f
   1f4c6:	4620      	mov	r0, r4
   1f4c8:	f003 fe93 	bl	231f2 <assert_post_action>
		mpsl_low_priority_process();
   1f4cc:	f7ef fc88 	bl	ede0 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1f4d0:	f7ff faf4 	bl	1eabc <multithreading_lock_release>
	while (true) {
   1f4d4:	e7e3      	b.n	1f49e <signal_thread+0x6>
   1f4d6:	bf00      	nop
   1f4d8:	200008d8 	.word	0x200008d8
   1f4dc:	0002a3a2 	.word	0x0002a3a2
   1f4e0:	00027c9a 	.word	0x00027c9a

0001f4e4 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1f4e4:	b530      	push	{r4, r5, lr}
   1f4e6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f4e8:	4d0f      	ldr	r5, [pc, #60]	; (1f528 <mpsl_signal_thread_init+0x44>)
   1f4ea:	4910      	ldr	r1, [pc, #64]	; (1f52c <mpsl_signal_thread_init+0x48>)
   1f4ec:	2200      	movs	r2, #0
   1f4ee:	2300      	movs	r3, #0
   1f4f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f4f4:	2400      	movs	r4, #0
   1f4f6:	f06f 0309 	mvn.w	r3, #9
   1f4fa:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1f4fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f502:	4b0b      	ldr	r3, [pc, #44]	; (1f530 <mpsl_signal_thread_init+0x4c>)
   1f504:	9400      	str	r4, [sp, #0]
   1f506:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f50a:	4628      	mov	r0, r5
   1f50c:	f002 fba0 	bl	21c50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1f510:	4908      	ldr	r1, [pc, #32]	; (1f534 <mpsl_signal_thread_init+0x50>)
   1f512:	4628      	mov	r0, r5
   1f514:	f007 fb6d 	bl	26bf2 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1f518:	4622      	mov	r2, r4
   1f51a:	2104      	movs	r1, #4
   1f51c:	2019      	movs	r0, #25
   1f51e:	f7f5 fec7 	bl	152b0 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1f522:	4620      	mov	r0, r4
   1f524:	b009      	add	sp, #36	; 0x24
   1f526:	bd30      	pop	{r4, r5, pc}
   1f528:	20002518 	.word	0x20002518
   1f52c:	20004d00 	.word	0x20004d00
   1f530:	0001f499 	.word	0x0001f499
   1f534:	0002a3ca 	.word	0x0002a3ca

0001f538 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f538:	4b01      	ldr	r3, [pc, #4]	; (1f540 <mpsl_hfclk_callback+0x8>)
   1f53a:	2000      	movs	r0, #0
   1f53c:	681b      	ldr	r3, [r3, #0]
   1f53e:	4718      	bx	r3
   1f540:	20002b0c 	.word	0x20002b0c

0001f544 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1f544:	b510      	push	{r4, lr}
	switch (domain) {
   1f546:	b130      	cbz	r0, 1f556 <nrfx_clock_start+0x12>
   1f548:	2801      	cmp	r0, #1
   1f54a:	d10a      	bne.n	1f562 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1f550:	4809      	ldr	r0, [pc, #36]	; (1f578 <nrfx_clock_start+0x34>)
   1f552:	f7e3 bee1 	b.w	3318 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f556:	4b09      	ldr	r3, [pc, #36]	; (1f57c <nrfx_clock_start+0x38>)
}
   1f558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f55c:	681b      	ldr	r3, [r3, #0]
   1f55e:	2001      	movs	r0, #1
   1f560:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1f562:	4907      	ldr	r1, [pc, #28]	; (1f580 <nrfx_clock_start+0x3c>)
   1f564:	4807      	ldr	r0, [pc, #28]	; (1f584 <nrfx_clock_start+0x40>)
   1f566:	221c      	movs	r2, #28
   1f568:	f003 fbe0 	bl	22d2c <printk>
}
   1f56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   1f570:	4803      	ldr	r0, [pc, #12]	; (1f580 <nrfx_clock_start+0x3c>)
   1f572:	211c      	movs	r1, #28
   1f574:	f003 be3d 	b.w	231f2 <assert_post_action>
   1f578:	0001f539 	.word	0x0001f539
   1f57c:	20002b0c 	.word	0x20002b0c
   1f580:	0002a3e0 	.word	0x0002a3e0
   1f584:	00027c9a 	.word	0x00027c9a

0001f588 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f588:	b508      	push	{r3, lr}
	switch (domain) {
   1f58a:	b180      	cbz	r0, 1f5ae <nrfx_clock_stop+0x26>
   1f58c:	2801      	cmp	r0, #1
   1f58e:	d103      	bne.n	1f598 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f590:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1f594:	f7e3 beb2 	b.w	32fc <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1f598:	4905      	ldr	r1, [pc, #20]	; (1f5b0 <nrfx_clock_stop+0x28>)
   1f59a:	4806      	ldr	r0, [pc, #24]	; (1f5b4 <nrfx_clock_stop+0x2c>)
   1f59c:	222a      	movs	r2, #42	; 0x2a
   1f59e:	f003 fbc5 	bl	22d2c <printk>
}
   1f5a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   1f5a6:	4802      	ldr	r0, [pc, #8]	; (1f5b0 <nrfx_clock_stop+0x28>)
   1f5a8:	212a      	movs	r1, #42	; 0x2a
   1f5aa:	f003 be22 	b.w	231f2 <assert_post_action>
}
   1f5ae:	bd08      	pop	{r3, pc}
   1f5b0:	0002a3e0 	.word	0x0002a3e0
   1f5b4:	00027c9a 	.word	0x00027c9a

0001f5b8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1f5b8:	4b01      	ldr	r3, [pc, #4]	; (1f5c0 <nrfx_clock_init+0x8>)
   1f5ba:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1f5bc:	4801      	ldr	r0, [pc, #4]	; (1f5c4 <nrfx_clock_init+0xc>)
   1f5be:	4770      	bx	lr
   1f5c0:	20002b0c 	.word	0x20002b0c
   1f5c4:	0bad0000 	.word	0x0bad0000

0001f5c8 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f5c8:	4b04      	ldr	r3, [pc, #16]	; (1f5dc <nrf52_errata_108+0x14>)
   1f5ca:	6818      	ldr	r0, [r3, #0]
   1f5cc:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f5ce:	bf04      	itt	eq
   1f5d0:	4b03      	ldreq	r3, [pc, #12]	; (1f5e0 <nrf52_errata_108+0x18>)
   1f5d2:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   1f5d4:	1f83      	subs	r3, r0, #6
   1f5d6:	4258      	negs	r0, r3
   1f5d8:	4158      	adcs	r0, r3
   1f5da:	4770      	bx	lr
   1f5dc:	10000130 	.word	0x10000130
   1f5e0:	f0000fe0 	.word	0xf0000fe0

0001f5e4 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f5e4:	4b07      	ldr	r3, [pc, #28]	; (1f604 <nrf52_errata_16+0x20>)
   1f5e6:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f5e8:	2b06      	cmp	r3, #6
   1f5ea:	d109      	bne.n	1f600 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f5ec:	4b06      	ldr	r3, [pc, #24]	; (1f608 <nrf52_errata_16+0x24>)
   1f5ee:	681b      	ldr	r3, [r3, #0]
   1f5f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1f5f4:	3b03      	subs	r3, #3
   1f5f6:	2b03      	cmp	r3, #3
   1f5f8:	d802      	bhi.n	1f600 <nrf52_errata_16+0x1c>
   1f5fa:	4a04      	ldr	r2, [pc, #16]	; (1f60c <nrf52_errata_16+0x28>)
   1f5fc:	5cd0      	ldrb	r0, [r2, r3]
   1f5fe:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f600:	2000      	movs	r0, #0
    #endif
}
   1f602:	4770      	bx	lr
   1f604:	f0000fe0 	.word	0xf0000fe0
   1f608:	f0000fe8 	.word	0xf0000fe8
   1f60c:	0002a425 	.word	0x0002a425

0001f610 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f610:	4a02      	ldr	r2, [pc, #8]	; (1f61c <nvmc_wait+0xc>)
   1f612:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f616:	2b00      	cmp	r3, #0
   1f618:	d0fb      	beq.n	1f612 <nvmc_wait+0x2>
}
   1f61a:	4770      	bx	lr
   1f61c:	4001e000 	.word	0x4001e000

0001f620 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1f620:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1f622:	f7ff ffd1 	bl	1f5c8 <nrf52_errata_108>
   1f626:	b128      	cbz	r0, 1f634 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1f628:	4b77      	ldr	r3, [pc, #476]	; (1f808 <SystemInit+0x1e8>)
   1f62a:	4a78      	ldr	r2, [pc, #480]	; (1f80c <SystemInit+0x1ec>)
   1f62c:	681b      	ldr	r3, [r3, #0]
   1f62e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1f632:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1f634:	f7ff ffd6 	bl	1f5e4 <nrf52_errata_16>
   1f638:	b110      	cbz	r0, 1f640 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1f63a:	4b75      	ldr	r3, [pc, #468]	; (1f810 <SystemInit+0x1f0>)
   1f63c:	4a75      	ldr	r2, [pc, #468]	; (1f814 <SystemInit+0x1f4>)
   1f63e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1f640:	f7ff ffc2 	bl	1f5c8 <nrf52_errata_108>
   1f644:	b128      	cbz	r0, 1f652 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1f646:	4b74      	ldr	r3, [pc, #464]	; (1f818 <SystemInit+0x1f8>)
   1f648:	4a74      	ldr	r2, [pc, #464]	; (1f81c <SystemInit+0x1fc>)
   1f64a:	681b      	ldr	r3, [r3, #0]
   1f64c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1f650:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1f652:	f7ff ffc7 	bl	1f5e4 <nrf52_errata_16>
   1f656:	b120      	cbz	r0, 1f662 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1f658:	4a71      	ldr	r2, [pc, #452]	; (1f820 <SystemInit+0x200>)
   1f65a:	68d3      	ldr	r3, [r2, #12]
   1f65c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f660:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f662:	f7ff ffb1 	bl	1f5c8 <nrf52_errata_108>
   1f666:	b140      	cbz	r0, 1f67a <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f66c:	2200      	movs	r2, #0
   1f66e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f672:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f676:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1f67a:	f7ff ffb3 	bl	1f5e4 <nrf52_errata_16>
   1f67e:	b110      	cbz	r0, 1f686 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1f680:	4b68      	ldr	r3, [pc, #416]	; (1f824 <SystemInit+0x204>)
   1f682:	2203      	movs	r2, #3
   1f684:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1f686:	f7ff ffad 	bl	1f5e4 <nrf52_errata_16>
   1f68a:	b140      	cbz	r0, 1f69e <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1f68c:	4b66      	ldr	r3, [pc, #408]	; (1f828 <SystemInit+0x208>)
   1f68e:	2205      	movs	r2, #5
   1f690:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1f692:	2201      	movs	r2, #1
   1f694:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1f696:	2200      	movs	r2, #0
   1f698:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1f69a:	223f      	movs	r2, #63	; 0x3f
   1f69c:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f69e:	4b63      	ldr	r3, [pc, #396]	; (1f82c <SystemInit+0x20c>)
   1f6a0:	681a      	ldr	r2, [r3, #0]
   1f6a2:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f6a4:	bf0b      	itete	eq
   1f6a6:	4b62      	ldreq	r3, [pc, #392]	; (1f830 <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1f6a8:	4b62      	ldrne	r3, [pc, #392]	; (1f834 <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f6aa:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1f6ac:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f6ae:	bf02      	ittt	eq
   1f6b0:	3308      	addeq	r3, #8
   1f6b2:	681b      	ldreq	r3, [r3, #0]
   1f6b4:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f6b8:	2a06      	cmp	r2, #6
   1f6ba:	d14d      	bne.n	1f758 <SystemInit+0x138>
            {
                switch(var2)
   1f6bc:	3b03      	subs	r3, #3
   1f6be:	2b03      	cmp	r3, #3
   1f6c0:	d803      	bhi.n	1f6ca <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f6c2:	4a5d      	ldr	r2, [pc, #372]	; (1f838 <SystemInit+0x218>)
   1f6c4:	5cd3      	ldrb	r3, [r2, r3]
   1f6c6:	2b00      	cmp	r3, #0
   1f6c8:	d046      	beq.n	1f758 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f6ce:	4b5b      	ldr	r3, [pc, #364]	; (1f83c <SystemInit+0x21c>)
   1f6d0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f6d4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f6d8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f6dc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f6e0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f6e4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f6e8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f6ec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f6f0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f6f4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f6f8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f6fc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f700:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f704:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f708:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f70c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f710:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f714:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f718:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f71c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f720:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f724:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f728:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f72c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f730:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f734:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f738:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f73c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f740:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f744:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f748:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f74c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f750:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f754:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1f758:	f7ff ff36 	bl	1f5c8 <nrf52_errata_108>
   1f75c:	b128      	cbz	r0, 1f76a <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1f75e:	4b38      	ldr	r3, [pc, #224]	; (1f840 <SystemInit+0x220>)
   1f760:	4a38      	ldr	r2, [pc, #224]	; (1f844 <SystemInit+0x224>)
   1f762:	681b      	ldr	r3, [r3, #0]
   1f764:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1f768:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f76a:	f7ff ff2d 	bl	1f5c8 <nrf52_errata_108>
   1f76e:	b148      	cbz	r0, 1f784 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f774:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f778:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f77a:	bf44      	itt	mi
   1f77c:	f06f 0201 	mvnmi.w	r2, #1
   1f780:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f784:	4b29      	ldr	r3, [pc, #164]	; (1f82c <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f786:	681b      	ldr	r3, [r3, #0]
   1f788:	2b06      	cmp	r3, #6
   1f78a:	d10c      	bne.n	1f7a6 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f78c:	4b29      	ldr	r3, [pc, #164]	; (1f834 <SystemInit+0x214>)
   1f78e:	681b      	ldr	r3, [r3, #0]
   1f790:	3b03      	subs	r3, #3
   1f792:	2b03      	cmp	r3, #3
   1f794:	d802      	bhi.n	1f79c <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1f796:	4a2c      	ldr	r2, [pc, #176]	; (1f848 <SystemInit+0x228>)
   1f798:	5cd3      	ldrb	r3, [r2, r3]
   1f79a:	b123      	cbz	r3, 1f7a6 <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1f79c:	4a2b      	ldr	r2, [pc, #172]	; (1f84c <SystemInit+0x22c>)
   1f79e:	6813      	ldr	r3, [r2, #0]
   1f7a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f7a4:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f7a6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f7aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f7ae:	2a00      	cmp	r2, #0
   1f7b0:	db03      	blt.n	1f7ba <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f7b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f7b6:	2b00      	cmp	r3, #0
   1f7b8:	da22      	bge.n	1f800 <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f7ba:	4925      	ldr	r1, [pc, #148]	; (1f850 <SystemInit+0x230>)
   1f7bc:	2301      	movs	r3, #1
   1f7be:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f7c2:	f7ff ff25 	bl	1f610 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f7c6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1f7ca:	2415      	movs	r4, #21
   1f7cc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f7d0:	f7ff ff1e 	bl	1f610 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f7d4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f7d8:	f7ff ff1a 	bl	1f610 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f7dc:	2300      	movs	r3, #0
   1f7de:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f7e2:	f7ff ff15 	bl	1f610 <nvmc_wait>
   1f7e6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f7ea:	491a      	ldr	r1, [pc, #104]	; (1f854 <SystemInit+0x234>)
   1f7ec:	4b1a      	ldr	r3, [pc, #104]	; (1f858 <SystemInit+0x238>)
   1f7ee:	68ca      	ldr	r2, [r1, #12]
   1f7f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f7f4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f7f6:	60cb      	str	r3, [r1, #12]
   1f7f8:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f7fc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f7fe:	e7fd      	b.n	1f7fc <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f800:	4b16      	ldr	r3, [pc, #88]	; (1f85c <SystemInit+0x23c>)
   1f802:	4a17      	ldr	r2, [pc, #92]	; (1f860 <SystemInit+0x240>)
   1f804:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f806:	bd10      	pop	{r4, pc}
   1f808:	10000324 	.word	0x10000324
   1f80c:	40013540 	.word	0x40013540
   1f810:	4007c074 	.word	0x4007c074
   1f814:	baadf00d 	.word	0xbaadf00d
   1f818:	10000244 	.word	0x10000244
   1f81c:	4000053c 	.word	0x4000053c
   1f820:	e000edf0 	.word	0xe000edf0
   1f824:	400005a0 	.word	0x400005a0
   1f828:	40005610 	.word	0x40005610
   1f82c:	10000130 	.word	0x10000130
   1f830:	f0000fe0 	.word	0xf0000fe0
   1f834:	10000134 	.word	0x10000134
   1f838:	0002a41d 	.word	0x0002a41d
   1f83c:	4000c000 	.word	0x4000c000
   1f840:	10000258 	.word	0x10000258
   1f844:	40000ee4 	.word	0x40000ee4
   1f848:	0002a421 	.word	0x0002a421
   1f84c:	4000173c 	.word	0x4000173c
   1f850:	4001e000 	.word	0x4001e000
   1f854:	e000ed00 	.word	0xe000ed00
   1f858:	05fa0004 	.word	0x05fa0004
   1f85c:	20000694 	.word	0x20000694
   1f860:	03d09000 	.word	0x03d09000

0001f864 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f864:	4b18      	ldr	r3, [pc, #96]	; (1f8c8 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1f866:	f8df c06c 	ldr.w	ip, [pc, #108]	; 1f8d4 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f86a:	681b      	ldr	r3, [r3, #0]
{
   1f86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f870:	43db      	mvns	r3, r3
{
   1f872:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1f874:	4f15      	ldr	r7, [pc, #84]	; (1f8cc <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1f876:	4816      	ldr	r0, [pc, #88]	; (1f8d0 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f878:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f87c:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1f87e:	f04f 0e01 	mov.w	lr, #1
   1f882:	b2e6      	uxtb	r6, r4
   1f884:	b90b      	cbnz	r3, 1f88a <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1f88a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f88e:	f3ef 8811 	mrs	r8, BASEPRI
   1f892:	f382 8811 	msr	BASEPRI, r2
   1f896:	f3bf 8f6f 	isb	sy
   1f89a:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1f89e:	4213      	tst	r3, r2
   1f8a0:	d006      	beq.n	1f8b0 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1f8a2:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1f8a4:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1f8a6:	bf01      	itttt	eq
   1f8a8:	4311      	orreq	r1, r2
   1f8aa:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1f8ac:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1f8ae:	4660      	moveq	r0, ip
	__asm__ volatile(
   1f8b0:	f388 8811 	msr	BASEPRI, r8
   1f8b4:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1f8b8:	4560      	cmp	r0, ip
   1f8ba:	f104 0401 	add.w	r4, r4, #1
   1f8be:	d0e2      	beq.n	1f886 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1f8c0:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f8c4:	e7dd      	b.n	1f882 <nrfx_ppi_channel_alloc+0x1e>
   1f8c6:	bf00      	nop
   1f8c8:	00027974 	.word	0x00027974
   1f8cc:	20002b10 	.word	0x20002b10
   1f8d0:	0bad0002 	.word	0x0bad0002
   1f8d4:	0bad0000 	.word	0x0bad0000

0001f8d8 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
   1f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8dc:	4604      	mov	r4, r0
   1f8de:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
   1f8e0:	4615      	mov	r5, r2
   1f8e2:	b952      	cbnz	r2, 1f8fa <nrf_pwm_sequence_set+0x22>
   1f8e4:	492f      	ldr	r1, [pc, #188]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f8e6:	4830      	ldr	r0, [pc, #192]	; (1f9a8 <nrf_pwm_sequence_set+0xd0>)
   1f8e8:	f240 22a5 	movw	r2, #677	; 0x2a5
   1f8ec:	f003 fa1e 	bl	22d2c <printk>
   1f8f0:	482c      	ldr	r0, [pc, #176]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f8f2:	f240 21a5 	movw	r1, #677	; 0x2a5
   1f8f6:	f003 fc7c 	bl	231f2 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   1f8fa:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
   1f8fc:	b957      	cbnz	r7, 1f914 <nrf_pwm_sequence_set+0x3c>
   1f8fe:	4929      	ldr	r1, [pc, #164]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f900:	4829      	ldr	r0, [pc, #164]	; (1f9a8 <nrf_pwm_sequence_set+0xd0>)
   1f902:	f240 22b2 	movw	r2, #690	; 0x2b2
   1f906:	f003 fa11 	bl	22d2c <printk>
   1f90a:	4826      	ldr	r0, [pc, #152]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f90c:	f240 21b2 	movw	r1, #690	; 0x2b2
   1f910:	f003 fc6f 	bl	231f2 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   1f914:	eb04 1846 	add.w	r8, r4, r6, lsl #5
   1f918:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   1f91c:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
   1f91e:	2f00      	cmp	r7, #0
   1f920:	d135      	bne.n	1f98e <nrf_pwm_sequence_set+0xb6>
   1f922:	4920      	ldr	r1, [pc, #128]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f924:	4820      	ldr	r0, [pc, #128]	; (1f9a8 <nrf_pwm_sequence_set+0xd0>)
   1f926:	f240 22bb 	movw	r2, #699	; 0x2bb
   1f92a:	f003 f9ff 	bl	22d2c <printk>
   1f92e:	f240 21bb 	movw	r1, #699	; 0x2bb
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   1f932:	481c      	ldr	r0, [pc, #112]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f934:	f003 fc5d 	bl	231f2 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
   1f938:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   1f93c:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   1f93e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
   1f942:	d30a      	bcc.n	1f95a <nrf_pwm_sequence_set+0x82>
   1f944:	4917      	ldr	r1, [pc, #92]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f946:	4818      	ldr	r0, [pc, #96]	; (1f9a8 <nrf_pwm_sequence_set+0xd0>)
   1f948:	f240 22c5 	movw	r2, #709	; 0x2c5
   1f94c:	f003 f9ee 	bl	22d2c <printk>
   1f950:	4814      	ldr	r0, [pc, #80]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f952:	f240 21c5 	movw	r1, #709	; 0x2c5
   1f956:	f003 fc4c 	bl	231f2 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   1f95a:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   1f95c:	ea4f 1846 	mov.w	r8, r6, lsl #5
   1f960:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   1f964:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   1f968:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   1f96c:	d30a      	bcc.n	1f984 <nrf_pwm_sequence_set+0xac>
   1f96e:	490d      	ldr	r1, [pc, #52]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f970:	480d      	ldr	r0, [pc, #52]	; (1f9a8 <nrf_pwm_sequence_set+0xd0>)
   1f972:	f240 22ce 	movw	r2, #718	; 0x2ce
   1f976:	f003 f9d9 	bl	22d2c <printk>
   1f97a:	480a      	ldr	r0, [pc, #40]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f97c:	f240 21ce 	movw	r1, #718	; 0x2ce
   1f980:	f003 fc37 	bl	231f2 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   1f984:	4444      	add	r4, r8
   1f986:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
   1f98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   1f98e:	043b      	lsls	r3, r7, #16
   1f990:	d5d2      	bpl.n	1f938 <nrf_pwm_sequence_set+0x60>
   1f992:	4904      	ldr	r1, [pc, #16]	; (1f9a4 <nrf_pwm_sequence_set+0xcc>)
   1f994:	4804      	ldr	r0, [pc, #16]	; (1f9a8 <nrf_pwm_sequence_set+0xd0>)
   1f996:	f44f 722f 	mov.w	r2, #700	; 0x2bc
   1f99a:	f003 f9c7 	bl	22d2c <printk>
   1f99e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
   1f9a2:	e7c6      	b.n	1f932 <nrf_pwm_sequence_set+0x5a>
   1f9a4:	0002a429 	.word	0x0002a429
   1f9a8:	00027c9a 	.word	0x00027c9a

0001f9ac <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f9ac:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1f9ae:	095a      	lsrs	r2, r3, #5
   1f9b0:	bf0c      	ite	eq
   1f9b2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1f9b6:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1f9b8:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f9bc:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f9c0:	07db      	lsls	r3, r3, #31
{
   1f9c2:	b510      	push	{r4, lr}
   1f9c4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f9c6:	d40a      	bmi.n	1f9de <nrf_gpio_pin_port_decode+0x32>
   1f9c8:	490f      	ldr	r1, [pc, #60]	; (1fa08 <nrf_gpio_pin_port_decode+0x5c>)
   1f9ca:	4810      	ldr	r0, [pc, #64]	; (1fa0c <nrf_gpio_pin_port_decode+0x60>)
   1f9cc:	f240 221a 	movw	r2, #538	; 0x21a
   1f9d0:	f003 f9ac 	bl	22d2c <printk>
   1f9d4:	480c      	ldr	r0, [pc, #48]	; (1fa08 <nrf_gpio_pin_port_decode+0x5c>)
   1f9d6:	f240 211a 	movw	r1, #538	; 0x21a
   1f9da:	f003 fc0a 	bl	231f2 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1f9de:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1f9e0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f9e4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1f9e6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f9e8:	d00a      	beq.n	1fa00 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   1f9ea:	4907      	ldr	r1, [pc, #28]	; (1fa08 <nrf_gpio_pin_port_decode+0x5c>)
   1f9ec:	4807      	ldr	r0, [pc, #28]	; (1fa0c <nrf_gpio_pin_port_decode+0x60>)
   1f9ee:	f240 221f 	movw	r2, #543	; 0x21f
   1f9f2:	f003 f99b 	bl	22d2c <printk>
   1f9f6:	4804      	ldr	r0, [pc, #16]	; (1fa08 <nrf_gpio_pin_port_decode+0x5c>)
   1f9f8:	f240 211f 	movw	r1, #543	; 0x21f
   1f9fc:	f003 fbf9 	bl	231f2 <assert_post_action>
}
   1fa00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1fa04:	bd10      	pop	{r4, pc}
   1fa06:	bf00      	nop
   1fa08:	00029ed3 	.word	0x00029ed3
   1fa0c:	00027c9a 	.word	0x00027c9a

0001fa10 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   1fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa14:	4606      	mov	r6, r0
   1fa16:	b087      	sub	sp, #28
   1fa18:	4690      	mov	r8, r2
   1fa1a:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
   1fa1c:	468b      	mov	fp, r1
   1fa1e:	b941      	cbnz	r1, 1fa32 <nrfx_pwm_init+0x22>
   1fa20:	4953      	ldr	r1, [pc, #332]	; (1fb70 <nrfx_pwm_init+0x160>)
   1fa22:	4854      	ldr	r0, [pc, #336]	; (1fb74 <nrfx_pwm_init+0x164>)
   1fa24:	2287      	movs	r2, #135	; 0x87
   1fa26:	f003 f981 	bl	22d2c <printk>
   1fa2a:	4851      	ldr	r0, [pc, #324]	; (1fb70 <nrfx_pwm_init+0x160>)
   1fa2c:	2187      	movs	r1, #135	; 0x87
   1fa2e:	f003 fbe0 	bl	231f2 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fa32:	7935      	ldrb	r5, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1fa34:	4c50      	ldr	r4, [pc, #320]	; (1fb78 <nrfx_pwm_init+0x168>)
   1fa36:	210c      	movs	r1, #12
   1fa38:	4369      	muls	r1, r5
   1fa3a:	1863      	adds	r3, r4, r1
   1fa3c:	7a1a      	ldrb	r2, [r3, #8]
   1fa3e:	2a00      	cmp	r2, #0
   1fa40:	f040 8093 	bne.w	1fb6a <nrfx_pwm_init+0x15a>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
   1fa44:	f844 8001 	str.w	r8, [r4, r1]
    p_cb->p_context = p_context;
   1fa48:	605f      	str	r7, [r3, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1fa4a:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
   1fa4e:	af02      	add	r7, sp, #8
   1fa50:	f10b 0903 	add.w	r9, fp, #3
        uint8_t output_pin = p_config->output_pins[i];
   1fa54:	f818 2f01 	ldrb.w	r2, [r8, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   1fa58:	2aff      	cmp	r2, #255	; 0xff
   1fa5a:	f000 8082 	beq.w	1fb62 <nrfx_pwm_init+0x152>
            if (!p_config->skip_gpio_cfg)
   1fa5e:	f89b 100c 	ldrb.w	r1, [fp, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   1fa62:	f022 0a80 	bic.w	sl, r2, #128	; 0x80
   1fa66:	f8c7 a000 	str.w	sl, [r7]
            if (!p_config->skip_gpio_cfg)
   1fa6a:	b9b9      	cbnz	r1, 1fa9c <nrfx_pwm_init+0x8c>
                if (inverted)
   1fa6c:	0613      	lsls	r3, r2, #24
   1fa6e:	f8cd a004 	str.w	sl, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fa72:	a801      	add	r0, sp, #4
   1fa74:	d56c      	bpl.n	1fb50 <nrfx_pwm_init+0x140>
   1fa76:	f7ff ff99 	bl	1f9ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1fa7a:	9a01      	ldr	r2, [sp, #4]
   1fa7c:	2101      	movs	r1, #1
   1fa7e:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   1fa82:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fa86:	a801      	add	r0, sp, #4
   1fa88:	f8cd a004 	str.w	sl, [sp, #4]
   1fa8c:	f7ff ff8e 	bl	1f9ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fa90:	9b01      	ldr	r3, [sp, #4]
   1fa92:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fa96:	2203      	movs	r2, #3
   1fa98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1fa9c:	45c8      	cmp	r8, r9
   1fa9e:	f107 0704 	add.w	r7, r7, #4
   1faa2:	d1d7      	bne.n	1fa54 <nrfx_pwm_init+0x44>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   1faa4:	6837      	ldr	r7, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   1faa6:	9b02      	ldr	r3, [sp, #8]
   1faa8:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
   1faac:	9b03      	ldr	r3, [sp, #12]
   1faae:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
   1fab2:	9b04      	ldr	r3, [sp, #16]
   1fab4:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
   1fab8:	9b05      	ldr	r3, [sp, #20]
   1faba:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   1fabe:	2301      	movs	r3, #1
   1fac0:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   1fac4:	f9bb 3008 	ldrsh.w	r3, [fp, #8]

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
   1fac8:	f89b a005 	ldrb.w	sl, [fp, #5]
   1facc:	f89b 9006 	ldrb.w	r9, [fp, #6]
   1fad0:	f8bb 8008 	ldrh.w	r8, [fp, #8]
   1fad4:	2b00      	cmp	r3, #0
   1fad6:	da0a      	bge.n	1faee <nrfx_pwm_init+0xde>
   1fad8:	4928      	ldr	r1, [pc, #160]	; (1fb7c <nrfx_pwm_init+0x16c>)
   1fada:	4826      	ldr	r0, [pc, #152]	; (1fb74 <nrfx_pwm_init+0x164>)
   1fadc:	f240 229a 	movw	r2, #666	; 0x29a
   1fae0:	f003 f924 	bl	22d2c <printk>
   1fae4:	4825      	ldr	r0, [pc, #148]	; (1fb7c <nrfx_pwm_init+0x16c>)
   1fae6:	f240 219a 	movw	r1, #666	; 0x29a
   1faea:	f003 fb82 	bl	231f2 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
   1faee:	f8c7 a50c 	str.w	sl, [r7, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
   1faf2:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
   1faf4:	f8c7 9504 	str.w	r9, [r7, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1faf8:	f8c7 8508 	str.w	r8, [r7, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   1fafc:	f8bb 300a 	ldrh.w	r3, [fp, #10]
   1fb00:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   1fb04:	2300      	movs	r3, #0
   1fb06:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   1fb0a:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fb0e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1fb12:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1fb16:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   1fb1a:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
   1fb1e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1fb22:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   1fb26:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1fb2a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   1fb2e:	230c      	movs	r3, #12
   1fb30:	436b      	muls	r3, r5
   1fb32:	58e3      	ldr	r3, [r4, r3]
   1fb34:	b11b      	cbz	r3, 1fb3e <nrfx_pwm_init+0x12e>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   1fb36:	f340 3007 	sbfx	r0, r0, #12, #8
   1fb3a:	f7f5 fba9 	bl	15290 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fb3e:	230c      	movs	r3, #12
   1fb40:	fb03 4405 	mla	r4, r3, r5, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1fb44:	480e      	ldr	r0, [pc, #56]	; (1fb80 <nrfx_pwm_init+0x170>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fb46:	2301      	movs	r3, #1
   1fb48:	7223      	strb	r3, [r4, #8]
}
   1fb4a:	b007      	add	sp, #28
   1fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb50:	f7ff ff2c 	bl	1f9ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1fb54:	9a01      	ldr	r2, [sp, #4]
   1fb56:	2101      	movs	r1, #1
   1fb58:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
   1fb5c:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
   1fb60:	e791      	b.n	1fa86 <nrfx_pwm_init+0x76>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   1fb62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb66:	603b      	str	r3, [r7, #0]
   1fb68:	e798      	b.n	1fa9c <nrfx_pwm_init+0x8c>
        return err_code;
   1fb6a:	4806      	ldr	r0, [pc, #24]	; (1fb84 <nrfx_pwm_init+0x174>)
   1fb6c:	e7ed      	b.n	1fb4a <nrfx_pwm_init+0x13a>
   1fb6e:	bf00      	nop
   1fb70:	0002a45b 	.word	0x0002a45b
   1fb74:	00027c9a 	.word	0x00027c9a
   1fb78:	20002b14 	.word	0x20002b14
   1fb7c:	0002a429 	.word	0x0002a429
   1fb80:	0bad0000 	.word	0x0bad0000
   1fb84:	0bad0005 	.word	0x0bad0005

0001fb88 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   1fb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb8c:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fb8e:	7903      	ldrb	r3, [r0, #4]
{
   1fb90:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fb92:	4a2f      	ldr	r2, [pc, #188]	; (1fc50 <nrfx_pwm_simple_playback+0xc8>)
{
   1fb94:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fb96:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1fb9a:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fb9e:	210c      	movs	r1, #12
   1fba0:	fb01 2303 	mla	r3, r1, r3, r2
{
   1fba4:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fba6:	7a1b      	ldrb	r3, [r3, #8]
   1fba8:	b953      	cbnz	r3, 1fbc0 <nrfx_pwm_simple_playback+0x38>
   1fbaa:	492a      	ldr	r1, [pc, #168]	; (1fc54 <nrfx_pwm_simple_playback+0xcc>)
   1fbac:	482a      	ldr	r0, [pc, #168]	; (1fc58 <nrfx_pwm_simple_playback+0xd0>)
   1fbae:	f240 1223 	movw	r2, #291	; 0x123
   1fbb2:	f003 f8bb 	bl	22d2c <printk>
   1fbb6:	4827      	ldr	r0, [pc, #156]	; (1fc54 <nrfx_pwm_simple_playback+0xcc>)
   1fbb8:	f240 1123 	movw	r1, #291	; 0x123
   1fbbc:	f003 fb19 	bl	231f2 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
   1fbc0:	b954      	cbnz	r4, 1fbd8 <nrfx_pwm_simple_playback+0x50>
   1fbc2:	4924      	ldr	r1, [pc, #144]	; (1fc54 <nrfx_pwm_simple_playback+0xcc>)
   1fbc4:	4824      	ldr	r0, [pc, #144]	; (1fc58 <nrfx_pwm_simple_playback+0xd0>)
   1fbc6:	f44f 7292 	mov.w	r2, #292	; 0x124
   1fbca:	f003 f8af 	bl	22d2c <printk>
   1fbce:	4821      	ldr	r0, [pc, #132]	; (1fc54 <nrfx_pwm_simple_playback+0xcc>)
   1fbd0:	f44f 7192 	mov.w	r1, #292	; 0x124
   1fbd4:	f003 fb0d 	bl	231f2 <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1fbd8:	6833      	ldr	r3, [r6, #0]
   1fbda:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   1fbde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1fbe2:	d00a      	beq.n	1fbfa <nrfx_pwm_simple_playback+0x72>
   1fbe4:	491b      	ldr	r1, [pc, #108]	; (1fc54 <nrfx_pwm_simple_playback+0xcc>)
   1fbe6:	481c      	ldr	r0, [pc, #112]	; (1fc58 <nrfx_pwm_simple_playback+0xd0>)
   1fbe8:	f240 1225 	movw	r2, #293	; 0x125
   1fbec:	f003 f89e 	bl	22d2c <printk>
   1fbf0:	4818      	ldr	r0, [pc, #96]	; (1fc54 <nrfx_pwm_simple_playback+0xcc>)
   1fbf2:	f240 1125 	movw	r1, #293	; 0x125
   1fbf6:	f003 fafc 	bl	231f2 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   1fbfa:	6828      	ldr	r0, [r5, #0]
   1fbfc:	4632      	mov	r2, r6
   1fbfe:	2100      	movs	r1, #0
   1fc00:	f7ff fe6a 	bl	1f8d8 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   1fc04:	6828      	ldr	r0, [r5, #0]
   1fc06:	4632      	mov	r2, r6
   1fc08:	2101      	movs	r1, #1
   1fc0a:	f7ff fe65 	bl	1f8d8 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   1fc0e:	6828      	ldr	r0, [r5, #0]
   1fc10:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   1fc14:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   1fc18:	f018 0f01 	tst.w	r8, #1
   1fc1c:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
   1fc20:	d114      	bne.n	1fc4c <nrfx_pwm_simple_playback+0xc4>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   1fc22:	f018 0202 	ands.w	r2, r8, #2
   1fc26:	d003      	beq.n	1fc30 <nrfx_pwm_simple_playback+0xa8>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   1fc28:	2b00      	cmp	r3, #0
   1fc2a:	bf14      	ite	ne
   1fc2c:	2208      	movne	r2, #8
   1fc2e:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   1fc30:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   1fc32:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   1fc36:	4639      	mov	r1, r7
   1fc38:	fa5f f288 	uxtb.w	r2, r8
   1fc3c:	bf18      	it	ne
   1fc3e:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   1fc40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
   1fc44:	bf08      	it	eq
   1fc46:	2308      	moveq	r3, #8
   1fc48:	f006 bef2 	b.w	26a30 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   1fc4c:	2210      	movs	r2, #16
   1fc4e:	e7ef      	b.n	1fc30 <nrfx_pwm_simple_playback+0xa8>
   1fc50:	20002b14 	.word	0x20002b14
   1fc54:	0002a45b 	.word	0x0002a45b
   1fc58:	00027c9a 	.word	0x00027c9a

0001fc5c <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
   1fc5c:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fc5e:	4e11      	ldr	r6, [pc, #68]	; (1fca4 <nrfx_pwm_is_stopped+0x48>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fc60:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fc62:	220c      	movs	r2, #12
   1fc64:	fb02 6204 	mla	r2, r2, r4, r6
{
   1fc68:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fc6a:	7a12      	ldrb	r2, [r2, #8]
   1fc6c:	b952      	cbnz	r2, 1fc84 <nrfx_pwm_is_stopped+0x28>
   1fc6e:	490e      	ldr	r1, [pc, #56]	; (1fca8 <nrfx_pwm_is_stopped+0x4c>)
   1fc70:	480e      	ldr	r0, [pc, #56]	; (1fcac <nrfx_pwm_is_stopped+0x50>)
   1fc72:	f240 12a1 	movw	r2, #417	; 0x1a1
   1fc76:	f003 f859 	bl	22d2c <printk>
   1fc7a:	480b      	ldr	r0, [pc, #44]	; (1fca8 <nrfx_pwm_is_stopped+0x4c>)
   1fc7c:	f240 11a1 	movw	r1, #417	; 0x1a1
   1fc80:	f003 fab7 	bl	231f2 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   1fc84:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   1fc86:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   1fc88:	fb03 6404 	mla	r4, r3, r4, r6
   1fc8c:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fc8e:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
   1fc92:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   1fc94:	b91a      	cbnz	r2, 1fc9e <nrfx_pwm_is_stopped+0x42>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   1fc96:	1e98      	subs	r0, r3, #2
   1fc98:	bf18      	it	ne
   1fc9a:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   1fc9c:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fc9e:	2001      	movs	r0, #1
   1fca0:	7220      	strb	r0, [r4, #8]
        ret_val = true;
   1fca2:	e7fb      	b.n	1fc9c <nrfx_pwm_is_stopped+0x40>
   1fca4:	20002b14 	.word	0x20002b14
   1fca8:	0002a45b 	.word	0x0002a45b
   1fcac:	00027c9a 	.word	0x00027c9a

0001fcb0 <nrfx_pwm_stop>:
{
   1fcb0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   1fcb2:	4a14      	ldr	r2, [pc, #80]	; (1fd04 <nrfx_pwm_stop+0x54>)
   1fcb4:	7903      	ldrb	r3, [r0, #4]
{
   1fcb6:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   1fcb8:	210c      	movs	r1, #12
   1fcba:	fb01 2303 	mla	r3, r1, r3, r2
{
   1fcbe:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   1fcc0:	7a1b      	ldrb	r3, [r3, #8]
   1fcc2:	b953      	cbnz	r3, 1fcda <nrfx_pwm_stop+0x2a>
   1fcc4:	4910      	ldr	r1, [pc, #64]	; (1fd08 <nrfx_pwm_stop+0x58>)
   1fcc6:	4811      	ldr	r0, [pc, #68]	; (1fd0c <nrfx_pwm_stop+0x5c>)
   1fcc8:	f44f 72be 	mov.w	r2, #380	; 0x17c
   1fccc:	f003 f82e 	bl	22d2c <printk>
   1fcd0:	480d      	ldr	r0, [pc, #52]	; (1fd08 <nrfx_pwm_stop+0x58>)
   1fcd2:	f44f 71be 	mov.w	r1, #380	; 0x17c
   1fcd6:	f003 fa8c 	bl	231f2 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1fcda:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
   1fcdc:	2200      	movs	r2, #0
   1fcde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fce2:	2201      	movs	r2, #1
   1fce4:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
   1fce6:	4620      	mov	r0, r4
   1fce8:	f7ff ffb8 	bl	1fc5c <nrfx_pwm_is_stopped>
   1fcec:	b938      	cbnz	r0, 1fcfe <nrfx_pwm_stop+0x4e>
            if (nrfx_pwm_is_stopped(p_instance))
   1fcee:	4620      	mov	r0, r4
   1fcf0:	f7ff ffb4 	bl	1fc5c <nrfx_pwm_is_stopped>
   1fcf4:	b918      	cbnz	r0, 1fcfe <nrfx_pwm_stop+0x4e>
        } while (wait_until_stopped);
   1fcf6:	2d00      	cmp	r5, #0
   1fcf8:	d1f9      	bne.n	1fcee <nrfx_pwm_stop+0x3e>
}
   1fcfa:	4628      	mov	r0, r5
   1fcfc:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   1fcfe:	2501      	movs	r5, #1
   1fd00:	e7fb      	b.n	1fcfa <nrfx_pwm_stop+0x4a>
   1fd02:	bf00      	nop
   1fd04:	20002b14 	.word	0x20002b14
   1fd08:	0002a45b 	.word	0x0002a45b
   1fd0c:	00027c9a 	.word	0x00027c9a

0001fd10 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1fd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fd12:	4b10      	ldr	r3, [pc, #64]	; (1fd54 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1fd14:	4f10      	ldr	r7, [pc, #64]	; (1fd58 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fd16:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1fd1a:	3001      	adds	r0, #1
   1fd1c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1fd20:	42ae      	cmp	r6, r5
   1fd22:	d800      	bhi.n	1fd26 <z_sys_init_run_level+0x16>
		}
	}
}
   1fd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1fd26:	e9d5 3400 	ldrd	r3, r4, [r5]
   1fd2a:	4620      	mov	r0, r4
   1fd2c:	4798      	blx	r3
   1fd2e:	b170      	cbz	r0, 1fd4e <z_sys_init_run_level+0x3e>
   1fd30:	b16c      	cbz	r4, 1fd4e <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1fd32:	1be4      	subs	r4, r4, r7
   1fd34:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1fd36:	0961      	lsrs	r1, r4, #5
   1fd38:	4a08      	ldr	r2, [pc, #32]	; (1fd5c <z_sys_init_run_level+0x4c>)
   1fd3a:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1fd3e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1fd42:	2301      	movs	r3, #1
   1fd44:	fa03 f404 	lsl.w	r4, r3, r4
   1fd48:	4304      	orrs	r4, r0
   1fd4a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fd4e:	3508      	adds	r5, #8
   1fd50:	e7e6      	b.n	1fd20 <z_sys_init_run_level+0x10>
   1fd52:	bf00      	nop
   1fd54:	00027978 	.word	0x00027978
   1fd58:	2000079c 	.word	0x2000079c
   1fd5c:	2000080c 	.word	0x2000080c

0001fd60 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1fd60:	4b08      	ldr	r3, [pc, #32]	; (1fd84 <z_device_ready+0x24>)
   1fd62:	1ac0      	subs	r0, r0, r3
   1fd64:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1fd66:	4b08      	ldr	r3, [pc, #32]	; (1fd88 <z_device_ready+0x28>)
   1fd68:	0942      	lsrs	r2, r0, #5
   1fd6a:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1fd6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1fd72:	2301      	movs	r3, #1
   1fd74:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1fd78:	4210      	tst	r0, r2
}
   1fd7a:	bf0c      	ite	eq
   1fd7c:	4618      	moveq	r0, r3
   1fd7e:	2000      	movne	r0, #0
   1fd80:	4770      	bx	lr
   1fd82:	bf00      	nop
   1fd84:	2000079c 	.word	0x2000079c
   1fd88:	2000080c 	.word	0x2000080c

0001fd8c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1fd8c:	4911      	ldr	r1, [pc, #68]	; (1fdd4 <z_impl_device_get_binding+0x48>)
{
   1fd8e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1fd90:	4c11      	ldr	r4, [pc, #68]	; (1fdd8 <z_impl_device_get_binding+0x4c>)
{
   1fd92:	4605      	mov	r5, r0
   1fd94:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1fd96:	428c      	cmp	r4, r1
   1fd98:	d104      	bne.n	1fda4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1fd9a:	4c0f      	ldr	r4, [pc, #60]	; (1fdd8 <z_impl_device_get_binding+0x4c>)
   1fd9c:	42b4      	cmp	r4, r6
   1fd9e:	d10a      	bne.n	1fdb6 <z_impl_device_get_binding+0x2a>
	return NULL;
   1fda0:	2400      	movs	r4, #0
   1fda2:	e014      	b.n	1fdce <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1fda4:	4620      	mov	r0, r4
   1fda6:	f7ff ffdb 	bl	1fd60 <z_device_ready>
   1fdaa:	b110      	cbz	r0, 1fdb2 <z_impl_device_get_binding+0x26>
   1fdac:	6823      	ldr	r3, [r4, #0]
   1fdae:	42ab      	cmp	r3, r5
   1fdb0:	d00d      	beq.n	1fdce <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1fdb2:	3410      	adds	r4, #16
   1fdb4:	e7ef      	b.n	1fd96 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1fdb6:	4620      	mov	r0, r4
   1fdb8:	f7ff ffd2 	bl	1fd60 <z_device_ready>
   1fdbc:	b908      	cbnz	r0, 1fdc2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1fdbe:	3410      	adds	r4, #16
   1fdc0:	e7ec      	b.n	1fd9c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1fdc2:	6821      	ldr	r1, [r4, #0]
   1fdc4:	4628      	mov	r0, r5
   1fdc6:	f004 fe52 	bl	24a6e <strcmp>
   1fdca:	2800      	cmp	r0, #0
   1fdcc:	d1f7      	bne.n	1fdbe <z_impl_device_get_binding+0x32>
}
   1fdce:	4620      	mov	r0, r4
   1fdd0:	bd70      	pop	{r4, r5, r6, pc}
   1fdd2:	bf00      	nop
   1fdd4:	2000080c 	.word	0x2000080c
   1fdd8:	2000079c 	.word	0x2000079c

0001fddc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1fddc:	4b01      	ldr	r3, [pc, #4]	; (1fde4 <z_impl_z_errno+0x8>)
   1fdde:	6898      	ldr	r0, [r3, #8]
}
   1fde0:	3070      	adds	r0, #112	; 0x70
   1fde2:	4770      	bx	lr
   1fde4:	20002b28 	.word	0x20002b28

0001fde8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1fde8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fdea:	4604      	mov	r4, r0
   1fdec:	460e      	mov	r6, r1
	__asm__ volatile(
   1fdee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fdf2:	f3ef 8711 	mrs	r7, BASEPRI
   1fdf6:	f383 8811 	msr	BASEPRI, r3
   1fdfa:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1fdfe:	f001 fdf1 	bl	219e4 <z_impl_k_current_get>
   1fe02:	2c04      	cmp	r4, #4
   1fe04:	bf96      	itet	ls
   1fe06:	4b1e      	ldrls	r3, [pc, #120]	; (1fe80 <z_fatal_error+0x98>)
   1fe08:	4b1e      	ldrhi	r3, [pc, #120]	; (1fe84 <z_fatal_error+0x9c>)
   1fe0a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1fe0e:	2200      	movs	r2, #0
   1fe10:	4605      	mov	r5, r0
   1fe12:	9200      	str	r2, [sp, #0]
   1fe14:	481c      	ldr	r0, [pc, #112]	; (1fe88 <z_fatal_error+0xa0>)
   1fe16:	4622      	mov	r2, r4
   1fe18:	2145      	movs	r1, #69	; 0x45
   1fe1a:	f002 ff87 	bl	22d2c <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1fe1e:	b13e      	cbz	r6, 1fe30 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1fe20:	69f3      	ldr	r3, [r6, #28]
   1fe22:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1fe26:	b11b      	cbz	r3, 1fe30 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   1fe28:	4818      	ldr	r0, [pc, #96]	; (1fe8c <z_fatal_error+0xa4>)
   1fe2a:	2145      	movs	r1, #69	; 0x45
   1fe2c:	f002 ff7e 	bl	22d2c <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1fe30:	b135      	cbz	r5, 1fe40 <z_fatal_error+0x58>
   1fe32:	4628      	mov	r0, r5
   1fe34:	f006 fee0 	bl	26bf8 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1fe38:	4603      	mov	r3, r0
   1fe3a:	b108      	cbz	r0, 1fe40 <z_fatal_error+0x58>
   1fe3c:	7802      	ldrb	r2, [r0, #0]
   1fe3e:	b902      	cbnz	r2, 1fe42 <z_fatal_error+0x5a>
		thread_name = "unknown";
   1fe40:	4b13      	ldr	r3, [pc, #76]	; (1fe90 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1fe42:	4814      	ldr	r0, [pc, #80]	; (1fe94 <z_fatal_error+0xac>)
   1fe44:	462a      	mov	r2, r5
   1fe46:	2145      	movs	r1, #69	; 0x45
   1fe48:	f002 ff70 	bl	22d2c <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1fe4c:	4631      	mov	r1, r6
   1fe4e:	4620      	mov	r0, r4
   1fe50:	f7fe fe3a 	bl	1eac8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1fe54:	2c04      	cmp	r4, #4
   1fe56:	d108      	bne.n	1fe6a <z_fatal_error+0x82>
   1fe58:	490f      	ldr	r1, [pc, #60]	; (1fe98 <z_fatal_error+0xb0>)
   1fe5a:	4810      	ldr	r0, [pc, #64]	; (1fe9c <z_fatal_error+0xb4>)
   1fe5c:	228e      	movs	r2, #142	; 0x8e
   1fe5e:	f002 ff65 	bl	22d2c <printk>
   1fe62:	480d      	ldr	r0, [pc, #52]	; (1fe98 <z_fatal_error+0xb0>)
   1fe64:	218e      	movs	r1, #142	; 0x8e
   1fe66:	f003 f9c4 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   1fe6a:	f387 8811 	msr	BASEPRI, r7
   1fe6e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1fe72:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1fe74:	b003      	add	sp, #12
   1fe76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1fe7a:	f7f5 bd9b 	b.w	159b4 <z_impl_k_thread_abort>
   1fe7e:	bf00      	nop
   1fe80:	00027990 	.word	0x00027990
   1fe84:	0002a496 	.word	0x0002a496
   1fe88:	0002a4ac 	.word	0x0002a4ac
   1fe8c:	0002a4d9 	.word	0x0002a4d9
   1fe90:	0002a4a4 	.word	0x0002a4a4
   1fe94:	0002a4ff 	.word	0x0002a4ff
   1fe98:	0002a51c 	.word	0x0002a51c
   1fe9c:	00027c9a 	.word	0x00027c9a

0001fea0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1fea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   1fea2:	4e1c      	ldr	r6, [pc, #112]	; (1ff14 <idle+0x74>)
{
   1fea4:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   1fea6:	2700      	movs	r7, #0
	__asm__ volatile(
   1fea8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1feac:	f3ef 8311 	mrs	r3, BASEPRI
   1feb0:	f382 8811 	msr	BASEPRI, r2
   1feb4:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1feb8:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1feba:	b188      	cbz	r0, 1fee0 <idle+0x40>
			cpu->pending_abort = NULL;
   1febc:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1febe:	f383 8811 	msr	BASEPRI, r3
   1fec2:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   1fec6:	f001 f989 	bl	211dc <z_thread_single_abort>
	__asm__ volatile(
   1feca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fece:	f3ef 8011 	mrs	r0, BASEPRI
   1fed2:	f383 8811 	msr	BASEPRI, r3
   1fed6:	f3bf 8f6f 	isb	sy
   1feda:	f006 fe31 	bl	26b40 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1fede:	e7e3      	b.n	1fea8 <idle+0x8>
	__asm__ volatile(
   1fee0:	f383 8811 	msr	BASEPRI, r3
   1fee4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fee8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1feec:	f3ef 8311 	mrs	r3, BASEPRI
   1fef0:	f382 8811 	msr	BASEPRI, r2
   1fef4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1fef8:	f002 f9dc 	bl	222b4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1fefc:	2101      	movs	r1, #1
   1fefe:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1ff00:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1ff02:	bfd8      	it	le
   1ff04:	4608      	movle	r0, r1
   1ff06:	f002 fa0b 	bl	22320 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1ff0a:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1ff0c:	f7f5 faec 	bl	154e8 <arch_cpu_idle>
}
   1ff10:	e7ca      	b.n	1fea8 <idle+0x8>
   1ff12:	bf00      	nop
   1ff14:	20002b28 	.word	0x20002b28

0001ff18 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1ff18:	4802      	ldr	r0, [pc, #8]	; (1ff24 <z_bss_zero+0xc>)
   1ff1a:	4a03      	ldr	r2, [pc, #12]	; (1ff28 <z_bss_zero+0x10>)
   1ff1c:	2100      	movs	r1, #0
   1ff1e:	1a12      	subs	r2, r2, r0
   1ff20:	f004 bdfb 	b.w	24b1a <memset>
   1ff24:	20000a18 	.word	0x20000a18
   1ff28:	20003574 	.word	0x20003574

0001ff2c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ff2c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1ff2e:	4806      	ldr	r0, [pc, #24]	; (1ff48 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1ff30:	4a06      	ldr	r2, [pc, #24]	; (1ff4c <z_data_copy+0x20>)
   1ff32:	4907      	ldr	r1, [pc, #28]	; (1ff50 <z_data_copy+0x24>)
   1ff34:	1a12      	subs	r2, r2, r0
   1ff36:	f004 fdc5 	bl	24ac4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ff3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1ff3e:	4a05      	ldr	r2, [pc, #20]	; (1ff54 <z_data_copy+0x28>)
   1ff40:	4905      	ldr	r1, [pc, #20]	; (1ff58 <z_data_copy+0x2c>)
   1ff42:	4806      	ldr	r0, [pc, #24]	; (1ff5c <z_data_copy+0x30>)
   1ff44:	f004 bdbe 	b.w	24ac4 <memcpy>
   1ff48:	20000000 	.word	0x20000000
   1ff4c:	20000a14 	.word	0x20000a14
   1ff50:	0002a750 	.word	0x0002a750
   1ff54:	00000000 	.word	0x00000000
   1ff58:	0002a750 	.word	0x0002a750
   1ff5c:	20000000 	.word	0x20000000

0001ff60 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1ff60:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1ff62:	4b0c      	ldr	r3, [pc, #48]	; (1ff94 <bg_thread_main+0x34>)
   1ff64:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ff66:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1ff68:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1ff6a:	f7ff fed1 	bl	1fd10 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1ff6e:	4a0a      	ldr	r2, [pc, #40]	; (1ff98 <bg_thread_main+0x38>)
   1ff70:	490a      	ldr	r1, [pc, #40]	; (1ff9c <bg_thread_main+0x3c>)
   1ff72:	480b      	ldr	r0, [pc, #44]	; (1ffa0 <bg_thread_main+0x40>)
   1ff74:	f002 feda 	bl	22d2c <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ff78:	2003      	movs	r0, #3
   1ff7a:	f7ff fec9 	bl	1fd10 <z_sys_init_run_level>

	z_init_static_threads();
   1ff7e:	f001 fead 	bl	21cdc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1ff82:	f7f2 fdbd 	bl	12b00 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ff86:	4a07      	ldr	r2, [pc, #28]	; (1ffa4 <bg_thread_main+0x44>)
   1ff88:	7b13      	ldrb	r3, [r2, #12]
   1ff8a:	f023 0301 	bic.w	r3, r3, #1
   1ff8e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ff90:	bd08      	pop	{r3, pc}
   1ff92:	bf00      	nop
   1ff94:	20003570 	.word	0x20003570
   1ff98:	0002a4fe 	.word	0x0002a4fe
   1ff9c:	0002a588 	.word	0x0002a588
   1ffa0:	0002a5a7 	.word	0x0002a5a7
   1ffa4:	20002638 	.word	0x20002638

0001ffa8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1ffa8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1ffac:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 200a4 <z_cstart+0xfc>
   1ffb0:	b0ab      	sub	sp, #172	; 0xac
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ffb2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ffb6:	4d33      	ldr	r5, [pc, #204]	; (20084 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1ffb8:	4e33      	ldr	r6, [pc, #204]	; (20088 <z_cstart+0xe0>)
   1ffba:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ffbc:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 200a8 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   1ffc0:	4f32      	ldr	r7, [pc, #200]	; (2008c <z_cstart+0xe4>)
   1ffc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1ffc6:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ffc8:	23e0      	movs	r3, #224	; 0xe0
   1ffca:	2400      	movs	r4, #0
   1ffcc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ffd0:	2320      	movs	r3, #32
   1ffd2:	77eb      	strb	r3, [r5, #31]
   1ffd4:	762c      	strb	r4, [r5, #24]
   1ffd6:	766c      	strb	r4, [r5, #25]
   1ffd8:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ffda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ffdc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ffe0:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ffe2:	f7f5 fcd3 	bl	1598c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ffe6:	f7f5 fa79 	bl	154dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ffea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ffee:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1fff0:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1fff2:	4d27      	ldr	r5, [pc, #156]	; (20090 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1fff4:	f240 1301 	movw	r3, #257	; 0x101
   1fff8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1fffc:	ab06      	add	r3, sp, #24
   1fffe:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20000:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   20002:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   20006:	f7ff fe83 	bl	1fd10 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2000a:	2001      	movs	r0, #1
   2000c:	f7ff fe80 	bl	1fd10 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20010:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   20014:	f001 fba0 	bl	21758 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20018:	4b1e      	ldr	r3, [pc, #120]	; (20094 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   2001a:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2001c:	491e      	ldr	r1, [pc, #120]	; (20098 <z_cstart+0xf0>)
   2001e:	9305      	str	r3, [sp, #20]
   20020:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20024:	4653      	mov	r3, sl
   20026:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   2002a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2002e:	9400      	str	r4, [sp, #0]
   20030:	4630      	mov	r0, r6
   20032:	f001 fd9b 	bl	21b6c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20036:	7b73      	ldrb	r3, [r6, #13]
   20038:	4680      	mov	r8, r0
   2003a:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   2003e:	4630      	mov	r0, r6
   20040:	7373      	strb	r3, [r6, #13]
   20042:	f000 ff01 	bl	20e48 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   20046:	230f      	movs	r3, #15
   20048:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2004c:	4913      	ldr	r1, [pc, #76]	; (2009c <z_cstart+0xf4>)
   2004e:	4b14      	ldr	r3, [pc, #80]	; (200a0 <z_cstart+0xf8>)
   20050:	f44f 72a0 	mov.w	r2, #320	; 0x140
   20054:	e9cd b404 	strd	fp, r4, [sp, #16]
   20058:	e9cd 5400 	strd	r5, r4, [sp]
   2005c:	4638      	mov	r0, r7
   2005e:	f001 fd85 	bl	21b6c <z_setup_new_thread>
   20062:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   20064:	60ef      	str	r7, [r5, #12]
   20066:	f023 0304 	bic.w	r3, r3, #4
   2006a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   2006c:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   20070:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   20074:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   20076:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2007a:	4652      	mov	r2, sl
   2007c:	4641      	mov	r1, r8
   2007e:	4630      	mov	r0, r6
   20080:	f7f5 f986 	bl	15390 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20084:	e000ed00 	.word	0xe000ed00
   20088:	20002638 	.word	0x20002638
   2008c:	200025a8 	.word	0x200025a8
   20090:	20002b28 	.word	0x20002b28
   20094:	0002a5ce 	.word	0x0002a5ce
   20098:	20005120 	.word	0x20005120
   2009c:	20005540 	.word	0x20005540
   200a0:	0001fea1 	.word	0x0001fea1
   200a4:	20005ec0 	.word	0x20005ec0
   200a8:	0001ff61 	.word	0x0001ff61

000200ac <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   200ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   200ae:	4d0d      	ldr	r5, [pc, #52]	; (200e4 <statics_init+0x38>)
   200b0:	4c0d      	ldr	r4, [pc, #52]	; (200e8 <statics_init+0x3c>)
   200b2:	4e0e      	ldr	r6, [pc, #56]	; (200ec <statics_init+0x40>)
   200b4:	462f      	mov	r7, r5
   200b6:	42ac      	cmp	r4, r5
   200b8:	d908      	bls.n	200cc <statics_init+0x20>
   200ba:	480d      	ldr	r0, [pc, #52]	; (200f0 <statics_init+0x44>)
   200bc:	4631      	mov	r1, r6
   200be:	2215      	movs	r2, #21
   200c0:	f002 fe34 	bl	22d2c <printk>
   200c4:	2115      	movs	r1, #21
   200c6:	4630      	mov	r0, r6
   200c8:	f003 f893 	bl	231f2 <assert_post_action>
   200cc:	42bc      	cmp	r4, r7
   200ce:	d301      	bcc.n	200d4 <statics_init+0x28>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   200d0:	2000      	movs	r0, #0
   200d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   200d4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   200d8:	4620      	mov	r0, r4
   200da:	f006 fcce 	bl	26a7a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   200de:	3418      	adds	r4, #24
   200e0:	e7e9      	b.n	200b6 <statics_init+0xa>
   200e2:	bf00      	nop
   200e4:	20000864 	.word	0x20000864
   200e8:	20000864 	.word	0x20000864
   200ec:	0002a5d6 	.word	0x0002a5d6
   200f0:	00027c9a 	.word	0x00027c9a

000200f4 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   200f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200f8:	4606      	mov	r6, r0
   200fa:	b087      	sub	sp, #28
   200fc:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   200fe:	4610      	mov	r0, r2
   20100:	4619      	mov	r1, r3
{
   20102:	4690      	mov	r8, r2
   20104:	4699      	mov	r9, r3
	int64_t now, end = z_timeout_end_calc(timeout);
   20106:	f006 fde8 	bl	26cda <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2010a:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2010e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   20112:	f04f 0340 	mov.w	r3, #64	; 0x40
   20116:	f3ef 8411 	mrs	r4, BASEPRI
   2011a:	f383 8811 	msr	BASEPRI, r3
   2011e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20122:	4628      	mov	r0, r5
   20124:	f001 fe5a 	bl	21ddc <z_spin_lock_valid>
   20128:	b940      	cbnz	r0, 2013c <k_heap_alloc+0x48>
   2012a:	4936      	ldr	r1, [pc, #216]	; (20204 <k_heap_alloc+0x110>)
   2012c:	4836      	ldr	r0, [pc, #216]	; (20208 <k_heap_alloc+0x114>)
   2012e:	2278      	movs	r2, #120	; 0x78
   20130:	f002 fdfc 	bl	22d2c <printk>
   20134:	4833      	ldr	r0, [pc, #204]	; (20204 <k_heap_alloc+0x110>)
   20136:	2178      	movs	r1, #120	; 0x78
   20138:	f003 f85b 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2013c:	4628      	mov	r0, r5
   2013e:	f001 fe6b 	bl	21e18 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20142:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20146:	b15b      	cbz	r3, 20160 <k_heap_alloc+0x6c>
   20148:	ea58 0309 	orrs.w	r3, r8, r9
   2014c:	d008      	beq.n	20160 <k_heap_alloc+0x6c>
   2014e:	492f      	ldr	r1, [pc, #188]	; (2020c <k_heap_alloc+0x118>)
   20150:	482d      	ldr	r0, [pc, #180]	; (20208 <k_heap_alloc+0x114>)
   20152:	2223      	movs	r2, #35	; 0x23
   20154:	f002 fdea 	bl	22d2c <printk>
   20158:	482c      	ldr	r0, [pc, #176]	; (2020c <k_heap_alloc+0x118>)
   2015a:	2123      	movs	r1, #35	; 0x23
   2015c:	f003 f849 	bl	231f2 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20160:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 20204 <k_heap_alloc+0x110>
   20164:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 20208 <k_heap_alloc+0x114>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20168:	f106 090c 	add.w	r9, r6, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   2016c:	4651      	mov	r1, sl
   2016e:	4630      	mov	r0, r6
   20170:	f002 ffaa 	bl	230c8 <sys_heap_alloc>
   20174:	4607      	mov	r7, r0
		now = z_tick_get();
   20176:	f002 f9c9 	bl	2250c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2017a:	b1a7      	cbz	r7, 201a6 <k_heap_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2017c:	4628      	mov	r0, r5
   2017e:	f001 fe3b 	bl	21df8 <z_spin_unlock_valid>
   20182:	b940      	cbnz	r0, 20196 <k_heap_alloc+0xa2>
   20184:	491f      	ldr	r1, [pc, #124]	; (20204 <k_heap_alloc+0x110>)
   20186:	4820      	ldr	r0, [pc, #128]	; (20208 <k_heap_alloc+0x114>)
   20188:	22a3      	movs	r2, #163	; 0xa3
   2018a:	f002 fdcf 	bl	22d2c <printk>
   2018e:	481d      	ldr	r0, [pc, #116]	; (20204 <k_heap_alloc+0x110>)
   20190:	21a3      	movs	r1, #163	; 0xa3
   20192:	f003 f82e 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20196:	f384 8811 	msr	BASEPRI, r4
   2019a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2019e:	4638      	mov	r0, r7
   201a0:	b007      	add	sp, #28
   201a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   201a6:	9b04      	ldr	r3, [sp, #16]
   201a8:	1a1b      	subs	r3, r3, r0
   201aa:	9302      	str	r3, [sp, #8]
   201ac:	9b05      	ldr	r3, [sp, #20]
   201ae:	eb63 0301 	sbc.w	r3, r3, r1
   201b2:	9303      	str	r3, [sp, #12]
   201b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   201b8:	2a01      	cmp	r2, #1
   201ba:	f173 0300 	sbcs.w	r3, r3, #0
   201be:	dbdd      	blt.n	2017c <k_heap_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   201c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   201c4:	4621      	mov	r1, r4
   201c6:	e9cd 2300 	strd	r2, r3, [sp]
   201ca:	4628      	mov	r0, r5
   201cc:	464a      	mov	r2, r9
   201ce:	f001 f9b5 	bl	2153c <z_pend_curr>
	__asm__ volatile(
   201d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   201d6:	f3ef 8411 	mrs	r4, BASEPRI
   201da:	f383 8811 	msr	BASEPRI, r3
   201de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   201e2:	4628      	mov	r0, r5
   201e4:	f001 fdfa 	bl	21ddc <z_spin_lock_valid>
   201e8:	b940      	cbnz	r0, 201fc <k_heap_alloc+0x108>
   201ea:	4641      	mov	r1, r8
   201ec:	4658      	mov	r0, fp
   201ee:	2278      	movs	r2, #120	; 0x78
   201f0:	f002 fd9c 	bl	22d2c <printk>
   201f4:	2178      	movs	r1, #120	; 0x78
   201f6:	4640      	mov	r0, r8
   201f8:	f002 fffb 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   201fc:	4628      	mov	r0, r5
   201fe:	f001 fe0b 	bl	21e18 <z_spin_lock_set_owner>
	return k;
   20202:	e7b3      	b.n	2016c <k_heap_alloc+0x78>
   20204:	00027cd4 	.word	0x00027cd4
   20208:	00027c9a 	.word	0x00027c9a
   2020c:	0002a5d6 	.word	0x0002a5d6

00020210 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   20210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20212:	4604      	mov	r4, r0
   20214:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20216:	f100 0514 	add.w	r5, r0, #20
   2021a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2021e:	f3ef 8711 	mrs	r7, BASEPRI
   20222:	f383 8811 	msr	BASEPRI, r3
   20226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2022a:	4628      	mov	r0, r5
   2022c:	f001 fdd6 	bl	21ddc <z_spin_lock_valid>
   20230:	b940      	cbnz	r0, 20244 <k_heap_free+0x34>
   20232:	4916      	ldr	r1, [pc, #88]	; (2028c <k_heap_free+0x7c>)
   20234:	4816      	ldr	r0, [pc, #88]	; (20290 <k_heap_free+0x80>)
   20236:	2278      	movs	r2, #120	; 0x78
   20238:	f002 fd78 	bl	22d2c <printk>
   2023c:	4813      	ldr	r0, [pc, #76]	; (2028c <k_heap_free+0x7c>)
   2023e:	2178      	movs	r1, #120	; 0x78
   20240:	f002 ffd7 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20244:	4628      	mov	r0, r5
   20246:	f001 fde7 	bl	21e18 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2024a:	4620      	mov	r0, r4
   2024c:	4631      	mov	r1, r6
   2024e:	f7f3 f839 	bl	132c4 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   20252:	f104 000c 	add.w	r0, r4, #12
   20256:	f006 fca2 	bl	26b9e <z_unpend_all>
   2025a:	b128      	cbz	r0, 20268 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   2025c:	4639      	mov	r1, r7
   2025e:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20260:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   20264:	f000 bc16 	b.w	20a94 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20268:	4628      	mov	r0, r5
   2026a:	f001 fdc5 	bl	21df8 <z_spin_unlock_valid>
   2026e:	b940      	cbnz	r0, 20282 <k_heap_free+0x72>
   20270:	4906      	ldr	r1, [pc, #24]	; (2028c <k_heap_free+0x7c>)
   20272:	4807      	ldr	r0, [pc, #28]	; (20290 <k_heap_free+0x80>)
   20274:	22a3      	movs	r2, #163	; 0xa3
   20276:	f002 fd59 	bl	22d2c <printk>
   2027a:	4804      	ldr	r0, [pc, #16]	; (2028c <k_heap_free+0x7c>)
   2027c:	21a3      	movs	r1, #163	; 0xa3
   2027e:	f002 ffb8 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20282:	f387 8811 	msr	BASEPRI, r7
   20286:	f3bf 8f6f 	isb	sy
}
   2028a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2028c:	00027cd4 	.word	0x00027cd4
   20290:	00027c9a 	.word	0x00027c9a

00020294 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   20294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20298:	4d14      	ldr	r5, [pc, #80]	; (202ec <init_mem_slab_module+0x58>)
   2029a:	4c15      	ldr	r4, [pc, #84]	; (202f0 <init_mem_slab_module+0x5c>)
   2029c:	4e15      	ldr	r6, [pc, #84]	; (202f4 <init_mem_slab_module+0x60>)
   2029e:	46a8      	mov	r8, r5
   202a0:	42ac      	cmp	r4, r5
   202a2:	d908      	bls.n	202b6 <init_mem_slab_module+0x22>
   202a4:	4814      	ldr	r0, [pc, #80]	; (202f8 <init_mem_slab_module+0x64>)
   202a6:	4631      	mov	r1, r6
   202a8:	2242      	movs	r2, #66	; 0x42
   202aa:	f002 fd3f 	bl	22d2c <printk>
   202ae:	2142      	movs	r1, #66	; 0x42
   202b0:	4630      	mov	r0, r6
   202b2:	f002 ff9e 	bl	231f2 <assert_post_action>
   202b6:	4544      	cmp	r4, r8
   202b8:	d302      	bcc.n	202c0 <init_mem_slab_module+0x2c>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   202ba:	2000      	movs	r0, #0
	return rc;
}
   202bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   202c0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   202c4:	ea42 0301 	orr.w	r3, r2, r1
   202c8:	f013 0303 	ands.w	r3, r3, #3
   202cc:	d10b      	bne.n	202e6 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   202ce:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   202d0:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   202d2:	4283      	cmp	r3, r0
   202d4:	d101      	bne.n	202da <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   202d6:	341c      	adds	r4, #28
   202d8:	e7e2      	b.n	202a0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   202da:	6967      	ldr	r7, [r4, #20]
   202dc:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   202de:	3301      	adds	r3, #1
		slab->free_list = p;
   202e0:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   202e2:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   202e4:	e7f5      	b.n	202d2 <init_mem_slab_module+0x3e>
		return -EINVAL;
   202e6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   202ea:	e7e7      	b.n	202bc <init_mem_slab_module+0x28>
   202ec:	20000864 	.word	0x20000864
   202f0:	20000810 	.word	0x20000810
   202f4:	0002a5f8 	.word	0x0002a5f8
   202f8:	00027c9a 	.word	0x00027c9a

000202fc <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   202fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20300:	4604      	mov	r4, r0
   20302:	460d      	mov	r5, r1
   20304:	4616      	mov	r6, r2
   20306:	461f      	mov	r7, r3
	__asm__ volatile(
   20308:	f04f 0340 	mov.w	r3, #64	; 0x40
   2030c:	f3ef 8811 	mrs	r8, BASEPRI
   20310:	f383 8811 	msr	BASEPRI, r3
   20314:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20318:	4821      	ldr	r0, [pc, #132]	; (203a0 <k_mem_slab_alloc+0xa4>)
   2031a:	f001 fd5f 	bl	21ddc <z_spin_lock_valid>
   2031e:	b940      	cbnz	r0, 20332 <k_mem_slab_alloc+0x36>
   20320:	4920      	ldr	r1, [pc, #128]	; (203a4 <k_mem_slab_alloc+0xa8>)
   20322:	4821      	ldr	r0, [pc, #132]	; (203a8 <k_mem_slab_alloc+0xac>)
   20324:	2278      	movs	r2, #120	; 0x78
   20326:	f002 fd01 	bl	22d2c <printk>
   2032a:	481e      	ldr	r0, [pc, #120]	; (203a4 <k_mem_slab_alloc+0xa8>)
   2032c:	2178      	movs	r1, #120	; 0x78
   2032e:	f002 ff60 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20332:	481b      	ldr	r0, [pc, #108]	; (203a0 <k_mem_slab_alloc+0xa4>)
   20334:	f001 fd70 	bl	21e18 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   20338:	6963      	ldr	r3, [r4, #20]
   2033a:	b1c3      	cbz	r3, 2036e <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   2033c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2033e:	681b      	ldr	r3, [r3, #0]
   20340:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   20342:	69a3      	ldr	r3, [r4, #24]
   20344:	3301      	adds	r3, #1
   20346:	61a3      	str	r3, [r4, #24]
		result = 0;
   20348:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2034a:	4815      	ldr	r0, [pc, #84]	; (203a0 <k_mem_slab_alloc+0xa4>)
   2034c:	f001 fd54 	bl	21df8 <z_spin_unlock_valid>
   20350:	b940      	cbnz	r0, 20364 <k_mem_slab_alloc+0x68>
   20352:	4914      	ldr	r1, [pc, #80]	; (203a4 <k_mem_slab_alloc+0xa8>)
   20354:	4814      	ldr	r0, [pc, #80]	; (203a8 <k_mem_slab_alloc+0xac>)
   20356:	22a3      	movs	r2, #163	; 0xa3
   20358:	f002 fce8 	bl	22d2c <printk>
   2035c:	4811      	ldr	r0, [pc, #68]	; (203a4 <k_mem_slab_alloc+0xa8>)
   2035e:	21a3      	movs	r1, #163	; 0xa3
   20360:	f002 ff47 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20364:	f388 8811 	msr	BASEPRI, r8
   20368:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   2036c:	e013      	b.n	20396 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2036e:	ea56 0207 	orrs.w	r2, r6, r7
   20372:	d103      	bne.n	2037c <k_mem_slab_alloc+0x80>
		*mem = NULL;
   20374:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   20376:	f06f 040b 	mvn.w	r4, #11
   2037a:	e7e6      	b.n	2034a <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   2037c:	4622      	mov	r2, r4
   2037e:	e9cd 6700 	strd	r6, r7, [sp]
   20382:	4807      	ldr	r0, [pc, #28]	; (203a0 <k_mem_slab_alloc+0xa4>)
   20384:	4641      	mov	r1, r8
   20386:	f001 f8d9 	bl	2153c <z_pend_curr>
		if (result == 0) {
   2038a:	4604      	mov	r4, r0
   2038c:	b918      	cbnz	r0, 20396 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   2038e:	4b07      	ldr	r3, [pc, #28]	; (203ac <k_mem_slab_alloc+0xb0>)
   20390:	689b      	ldr	r3, [r3, #8]
   20392:	695b      	ldr	r3, [r3, #20]
   20394:	602b      	str	r3, [r5, #0]
}
   20396:	4620      	mov	r0, r4
   20398:	b002      	add	sp, #8
   2039a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2039e:	bf00      	nop
   203a0:	20002b20 	.word	0x20002b20
   203a4:	00027cd4 	.word	0x00027cd4
   203a8:	00027c9a 	.word	0x00027c9a
   203ac:	20002b28 	.word	0x20002b28

000203b0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   203b0:	b570      	push	{r4, r5, r6, lr}
   203b2:	4604      	mov	r4, r0
   203b4:	460d      	mov	r5, r1
	__asm__ volatile(
   203b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   203ba:	f3ef 8611 	mrs	r6, BASEPRI
   203be:	f383 8811 	msr	BASEPRI, r3
   203c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203c6:	481d      	ldr	r0, [pc, #116]	; (2043c <k_mem_slab_free+0x8c>)
   203c8:	f001 fd08 	bl	21ddc <z_spin_lock_valid>
   203cc:	b940      	cbnz	r0, 203e0 <k_mem_slab_free+0x30>
   203ce:	491c      	ldr	r1, [pc, #112]	; (20440 <k_mem_slab_free+0x90>)
   203d0:	481c      	ldr	r0, [pc, #112]	; (20444 <k_mem_slab_free+0x94>)
   203d2:	2278      	movs	r2, #120	; 0x78
   203d4:	f002 fcaa 	bl	22d2c <printk>
   203d8:	4819      	ldr	r0, [pc, #100]	; (20440 <k_mem_slab_free+0x90>)
   203da:	2178      	movs	r1, #120	; 0x78
   203dc:	f002 ff09 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   203e0:	4816      	ldr	r0, [pc, #88]	; (2043c <k_mem_slab_free+0x8c>)
   203e2:	f001 fd19 	bl	21e18 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   203e6:	4620      	mov	r0, r4
   203e8:	f001 f94e 	bl	21688 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   203ec:	b160      	cbz	r0, 20408 <k_mem_slab_free+0x58>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   203ee:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   203f0:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   203f2:	2100      	movs	r1, #0
   203f4:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
		z_ready_thread(pending_thread);
   203f8:	f000 fd26 	bl	20e48 <z_ready_thread>
		z_reschedule(&lock, key);
   203fc:	4631      	mov	r1, r6
   203fe:	480f      	ldr	r0, [pc, #60]	; (2043c <k_mem_slab_free+0x8c>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   20400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   20404:	f000 bb46 	b.w	20a94 <z_reschedule>
		**(char ***)mem = slab->free_list;
   20408:	682b      	ldr	r3, [r5, #0]
   2040a:	6962      	ldr	r2, [r4, #20]
   2040c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2040e:	682b      	ldr	r3, [r5, #0]
   20410:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   20412:	69a3      	ldr	r3, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20414:	4809      	ldr	r0, [pc, #36]	; (2043c <k_mem_slab_free+0x8c>)
   20416:	3b01      	subs	r3, #1
   20418:	61a3      	str	r3, [r4, #24]
   2041a:	f001 fced 	bl	21df8 <z_spin_unlock_valid>
   2041e:	b940      	cbnz	r0, 20432 <k_mem_slab_free+0x82>
   20420:	4907      	ldr	r1, [pc, #28]	; (20440 <k_mem_slab_free+0x90>)
   20422:	4808      	ldr	r0, [pc, #32]	; (20444 <k_mem_slab_free+0x94>)
   20424:	22a3      	movs	r2, #163	; 0xa3
   20426:	f002 fc81 	bl	22d2c <printk>
   2042a:	4805      	ldr	r0, [pc, #20]	; (20440 <k_mem_slab_free+0x90>)
   2042c:	21a3      	movs	r1, #163	; 0xa3
   2042e:	f002 fee0 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20432:	f386 8811 	msr	BASEPRI, r6
   20436:	f3bf 8f6f 	isb	sy
}
   2043a:	bd70      	pop	{r4, r5, r6, pc}
   2043c:	20002b20 	.word	0x20002b20
   20440:	00027cd4 	.word	0x00027cd4
   20444:	00027c9a 	.word	0x00027c9a

00020448 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20448:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2044c:	4604      	mov	r4, r0
   2044e:	4616      	mov	r6, r2
   20450:	461f      	mov	r7, r3
   20452:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20456:	b143      	cbz	r3, 2046a <z_impl_k_mutex_lock+0x22>
   20458:	495f      	ldr	r1, [pc, #380]	; (205d8 <z_impl_k_mutex_lock+0x190>)
   2045a:	4860      	ldr	r0, [pc, #384]	; (205dc <z_impl_k_mutex_lock+0x194>)
   2045c:	227d      	movs	r2, #125	; 0x7d
   2045e:	f002 fc65 	bl	22d2c <printk>
   20462:	485d      	ldr	r0, [pc, #372]	; (205d8 <z_impl_k_mutex_lock+0x190>)
   20464:	217d      	movs	r1, #125	; 0x7d
   20466:	f002 fec4 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   2046a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2046e:	f3ef 8811 	mrs	r8, BASEPRI
   20472:	f383 8811 	msr	BASEPRI, r3
   20476:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2047a:	4859      	ldr	r0, [pc, #356]	; (205e0 <z_impl_k_mutex_lock+0x198>)
   2047c:	f001 fcae 	bl	21ddc <z_spin_lock_valid>
   20480:	b940      	cbnz	r0, 20494 <z_impl_k_mutex_lock+0x4c>
   20482:	4958      	ldr	r1, [pc, #352]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   20484:	4855      	ldr	r0, [pc, #340]	; (205dc <z_impl_k_mutex_lock+0x194>)
   20486:	2278      	movs	r2, #120	; 0x78
   20488:	f002 fc50 	bl	22d2c <printk>
   2048c:	4855      	ldr	r0, [pc, #340]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   2048e:	2178      	movs	r1, #120	; 0x78
   20490:	f002 feaf 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20494:	4852      	ldr	r0, [pc, #328]	; (205e0 <z_impl_k_mutex_lock+0x198>)
   20496:	f001 fcbf 	bl	21e18 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2049a:	68e3      	ldr	r3, [r4, #12]
   2049c:	4a52      	ldr	r2, [pc, #328]	; (205e8 <z_impl_k_mutex_lock+0x1a0>)
   2049e:	b1d3      	cbz	r3, 204d6 <z_impl_k_mutex_lock+0x8e>
   204a0:	68a0      	ldr	r0, [r4, #8]
   204a2:	6891      	ldr	r1, [r2, #8]
   204a4:	4288      	cmp	r0, r1
   204a6:	d033      	beq.n	20510 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   204a8:	ea56 0307 	orrs.w	r3, r6, r7
   204ac:	d132      	bne.n	20514 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204ae:	484c      	ldr	r0, [pc, #304]	; (205e0 <z_impl_k_mutex_lock+0x198>)
   204b0:	f001 fca2 	bl	21df8 <z_spin_unlock_valid>
   204b4:	b940      	cbnz	r0, 204c8 <z_impl_k_mutex_lock+0x80>
   204b6:	494b      	ldr	r1, [pc, #300]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   204b8:	4848      	ldr	r0, [pc, #288]	; (205dc <z_impl_k_mutex_lock+0x194>)
   204ba:	22a3      	movs	r2, #163	; 0xa3
   204bc:	f002 fc36 	bl	22d2c <printk>
   204c0:	4848      	ldr	r0, [pc, #288]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   204c2:	21a3      	movs	r1, #163	; 0xa3
   204c4:	f002 fe95 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   204c8:	f388 8811 	msr	BASEPRI, r8
   204cc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   204d0:	f06f 000f 	mvn.w	r0, #15
   204d4:	e019      	b.n	2050a <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   204d6:	6891      	ldr	r1, [r2, #8]
   204d8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   204dc:	4840      	ldr	r0, [pc, #256]	; (205e0 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   204de:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   204e0:	3301      	adds	r3, #1
   204e2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   204e4:	6893      	ldr	r3, [r2, #8]
   204e6:	60a3      	str	r3, [r4, #8]
   204e8:	f001 fc86 	bl	21df8 <z_spin_unlock_valid>
   204ec:	b940      	cbnz	r0, 20500 <z_impl_k_mutex_lock+0xb8>
   204ee:	493d      	ldr	r1, [pc, #244]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   204f0:	483a      	ldr	r0, [pc, #232]	; (205dc <z_impl_k_mutex_lock+0x194>)
   204f2:	22a3      	movs	r2, #163	; 0xa3
   204f4:	f002 fc1a 	bl	22d2c <printk>
   204f8:	483a      	ldr	r0, [pc, #232]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   204fa:	21a3      	movs	r1, #163	; 0xa3
   204fc:	f002 fe79 	bl	231f2 <assert_post_action>
   20500:	f388 8811 	msr	BASEPRI, r8
   20504:	f3bf 8f6f 	isb	sy
		return 0;
   20508:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2050a:	b002      	add	sp, #8
   2050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20510:	6921      	ldr	r1, [r4, #16]
   20512:	e7e3      	b.n	204dc <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20514:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20518:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2051c:	4299      	cmp	r1, r3
   2051e:	bfa8      	it	ge
   20520:	4619      	movge	r1, r3
   20522:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20526:	4299      	cmp	r1, r3
   20528:	da3c      	bge.n	205a4 <z_impl_k_mutex_lock+0x15c>
		return z_set_prio(mutex->owner, new_prio);
   2052a:	f001 f82d 	bl	21588 <z_set_prio>
   2052e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20530:	e9cd 6700 	strd	r6, r7, [sp]
   20534:	482a      	ldr	r0, [pc, #168]	; (205e0 <z_impl_k_mutex_lock+0x198>)
   20536:	4622      	mov	r2, r4
   20538:	4641      	mov	r1, r8
   2053a:	f000 ffff 	bl	2153c <z_pend_curr>
	if (got_mutex == 0) {
   2053e:	2800      	cmp	r0, #0
   20540:	d0e3      	beq.n	2050a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   20542:	f04f 0340 	mov.w	r3, #64	; 0x40
   20546:	f3ef 8611 	mrs	r6, BASEPRI
   2054a:	f383 8811 	msr	BASEPRI, r3
   2054e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20552:	4823      	ldr	r0, [pc, #140]	; (205e0 <z_impl_k_mutex_lock+0x198>)
   20554:	f001 fc42 	bl	21ddc <z_spin_lock_valid>
   20558:	b940      	cbnz	r0, 2056c <z_impl_k_mutex_lock+0x124>
   2055a:	4922      	ldr	r1, [pc, #136]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   2055c:	481f      	ldr	r0, [pc, #124]	; (205dc <z_impl_k_mutex_lock+0x194>)
   2055e:	2278      	movs	r2, #120	; 0x78
   20560:	f002 fbe4 	bl	22d2c <printk>
   20564:	481f      	ldr	r0, [pc, #124]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   20566:	2178      	movs	r1, #120	; 0x78
   20568:	f002 fe43 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2056c:	481c      	ldr	r0, [pc, #112]	; (205e0 <z_impl_k_mutex_lock+0x198>)
   2056e:	f001 fc53 	bl	21e18 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20572:	6823      	ldr	r3, [r4, #0]
   20574:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20576:	42a3      	cmp	r3, r4
   20578:	d007      	beq.n	2058a <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2057a:	b133      	cbz	r3, 2058a <z_impl_k_mutex_lock+0x142>
   2057c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20580:	4299      	cmp	r1, r3
   20582:	bfa8      	it	ge
   20584:	4619      	movge	r1, r3
   20586:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2058a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2058c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20590:	4299      	cmp	r1, r3
   20592:	d109      	bne.n	205a8 <z_impl_k_mutex_lock+0x160>
	if (resched) {
   20594:	b16d      	cbz	r5, 205b2 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   20596:	4812      	ldr	r0, [pc, #72]	; (205e0 <z_impl_k_mutex_lock+0x198>)
   20598:	4631      	mov	r1, r6
   2059a:	f000 fa7b 	bl	20a94 <z_reschedule>
	return -EAGAIN;
   2059e:	f06f 000a 	mvn.w	r0, #10
   205a2:	e7b2      	b.n	2050a <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   205a4:	2500      	movs	r5, #0
   205a6:	e7c3      	b.n	20530 <z_impl_k_mutex_lock+0xe8>
		return z_set_prio(mutex->owner, new_prio);
   205a8:	f000 ffee 	bl	21588 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   205ac:	2800      	cmp	r0, #0
   205ae:	d1f2      	bne.n	20596 <z_impl_k_mutex_lock+0x14e>
   205b0:	e7f0      	b.n	20594 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   205b2:	480b      	ldr	r0, [pc, #44]	; (205e0 <z_impl_k_mutex_lock+0x198>)
   205b4:	f001 fc20 	bl	21df8 <z_spin_unlock_valid>
   205b8:	b940      	cbnz	r0, 205cc <z_impl_k_mutex_lock+0x184>
   205ba:	490a      	ldr	r1, [pc, #40]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   205bc:	4807      	ldr	r0, [pc, #28]	; (205dc <z_impl_k_mutex_lock+0x194>)
   205be:	22a3      	movs	r2, #163	; 0xa3
   205c0:	f002 fbb4 	bl	22d2c <printk>
   205c4:	4807      	ldr	r0, [pc, #28]	; (205e4 <z_impl_k_mutex_lock+0x19c>)
   205c6:	21a3      	movs	r1, #163	; 0xa3
   205c8:	f002 fe13 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   205cc:	f386 8811 	msr	BASEPRI, r6
   205d0:	f3bf 8f6f 	isb	sy
   205d4:	e7e3      	b.n	2059e <z_impl_k_mutex_lock+0x156>
   205d6:	bf00      	nop
   205d8:	0002a61d 	.word	0x0002a61d
   205dc:	00027c9a 	.word	0x00027c9a
   205e0:	20002b24 	.word	0x20002b24
   205e4:	00027cd4 	.word	0x00027cd4
   205e8:	20002b28 	.word	0x20002b28

000205ec <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   205ec:	b538      	push	{r3, r4, r5, lr}
   205ee:	4604      	mov	r4, r0
   205f0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   205f4:	b143      	cbz	r3, 20608 <z_impl_k_mutex_unlock+0x1c>
   205f6:	4948      	ldr	r1, [pc, #288]	; (20718 <z_impl_k_mutex_unlock+0x12c>)
   205f8:	4848      	ldr	r0, [pc, #288]	; (2071c <z_impl_k_mutex_unlock+0x130>)
   205fa:	22d8      	movs	r2, #216	; 0xd8
   205fc:	f002 fb96 	bl	22d2c <printk>
   20600:	4845      	ldr	r0, [pc, #276]	; (20718 <z_impl_k_mutex_unlock+0x12c>)
   20602:	21d8      	movs	r1, #216	; 0xd8
   20604:	f002 fdf5 	bl	231f2 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   20608:	68a3      	ldr	r3, [r4, #8]
   2060a:	2b00      	cmp	r3, #0
   2060c:	d07d      	beq.n	2070a <z_impl_k_mutex_unlock+0x11e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2060e:	4d44      	ldr	r5, [pc, #272]	; (20720 <z_impl_k_mutex_unlock+0x134>)
   20610:	68aa      	ldr	r2, [r5, #8]
   20612:	4293      	cmp	r3, r2
   20614:	d17c      	bne.n	20710 <z_impl_k_mutex_unlock+0x124>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20616:	68e3      	ldr	r3, [r4, #12]
   20618:	b943      	cbnz	r3, 2062c <z_impl_k_mutex_unlock+0x40>
   2061a:	493f      	ldr	r1, [pc, #252]	; (20718 <z_impl_k_mutex_unlock+0x12c>)
   2061c:	483f      	ldr	r0, [pc, #252]	; (2071c <z_impl_k_mutex_unlock+0x130>)
   2061e:	22ea      	movs	r2, #234	; 0xea
   20620:	f002 fb84 	bl	22d2c <printk>
   20624:	483c      	ldr	r0, [pc, #240]	; (20718 <z_impl_k_mutex_unlock+0x12c>)
   20626:	21ea      	movs	r1, #234	; 0xea
   20628:	f002 fde3 	bl	231f2 <assert_post_action>
   2062c:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   20630:	b153      	cbz	r3, 20648 <z_impl_k_mutex_unlock+0x5c>
   20632:	493c      	ldr	r1, [pc, #240]	; (20724 <z_impl_k_mutex_unlock+0x138>)
   20634:	4839      	ldr	r0, [pc, #228]	; (2071c <z_impl_k_mutex_unlock+0x130>)
   20636:	f44f 7289 	mov.w	r2, #274	; 0x112
   2063a:	f002 fb77 	bl	22d2c <printk>
   2063e:	4839      	ldr	r0, [pc, #228]	; (20724 <z_impl_k_mutex_unlock+0x138>)
   20640:	f44f 7189 	mov.w	r1, #274	; 0x112
   20644:	f002 fdd5 	bl	231f2 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   20648:	68ab      	ldr	r3, [r5, #8]
   2064a:	7bdb      	ldrb	r3, [r3, #15]
   2064c:	2b01      	cmp	r3, #1
   2064e:	d10a      	bne.n	20666 <z_impl_k_mutex_unlock+0x7a>
   20650:	4934      	ldr	r1, [pc, #208]	; (20724 <z_impl_k_mutex_unlock+0x138>)
   20652:	4832      	ldr	r0, [pc, #200]	; (2071c <z_impl_k_mutex_unlock+0x130>)
   20654:	f240 1213 	movw	r2, #275	; 0x113
   20658:	f002 fb68 	bl	22d2c <printk>
   2065c:	4831      	ldr	r0, [pc, #196]	; (20724 <z_impl_k_mutex_unlock+0x138>)
   2065e:	f240 1113 	movw	r1, #275	; 0x113
   20662:	f002 fdc6 	bl	231f2 <assert_post_action>

	--_current->base.sched_locked;
   20666:	68aa      	ldr	r2, [r5, #8]
   20668:	7bd3      	ldrb	r3, [r2, #15]
   2066a:	3b01      	subs	r3, #1
   2066c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   2066e:	68e3      	ldr	r3, [r4, #12]
   20670:	2b01      	cmp	r3, #1
   20672:	d005      	beq.n	20680 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   20674:	3b01      	subs	r3, #1
   20676:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   20678:	f000 fb3a 	bl	20cf0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   2067c:	2000      	movs	r0, #0
}
   2067e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20680:	f04f 0340 	mov.w	r3, #64	; 0x40
   20684:	f3ef 8511 	mrs	r5, BASEPRI
   20688:	f383 8811 	msr	BASEPRI, r3
   2068c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20690:	4825      	ldr	r0, [pc, #148]	; (20728 <z_impl_k_mutex_unlock+0x13c>)
   20692:	f001 fba3 	bl	21ddc <z_spin_lock_valid>
   20696:	b940      	cbnz	r0, 206aa <z_impl_k_mutex_unlock+0xbe>
   20698:	4924      	ldr	r1, [pc, #144]	; (2072c <z_impl_k_mutex_unlock+0x140>)
   2069a:	4820      	ldr	r0, [pc, #128]	; (2071c <z_impl_k_mutex_unlock+0x130>)
   2069c:	2278      	movs	r2, #120	; 0x78
   2069e:	f002 fb45 	bl	22d2c <printk>
   206a2:	4822      	ldr	r0, [pc, #136]	; (2072c <z_impl_k_mutex_unlock+0x140>)
   206a4:	2178      	movs	r1, #120	; 0x78
   206a6:	f002 fda4 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   206aa:	481f      	ldr	r0, [pc, #124]	; (20728 <z_impl_k_mutex_unlock+0x13c>)
   206ac:	f001 fbb4 	bl	21e18 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   206b0:	68a0      	ldr	r0, [r4, #8]
   206b2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   206b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   206b8:	4299      	cmp	r1, r3
   206ba:	d001      	beq.n	206c0 <z_impl_k_mutex_unlock+0xd4>
		return z_set_prio(mutex->owner, new_prio);
   206bc:	f000 ff64 	bl	21588 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   206c0:	4620      	mov	r0, r4
   206c2:	f000 ffe1 	bl	21688 <z_unpend_first_thread>
	mutex->owner = new_owner;
   206c6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   206c8:	b160      	cbz	r0, 206e4 <z_impl_k_mutex_unlock+0xf8>
		mutex->owner_orig_prio = new_owner->base.prio;
   206ca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   206ce:	6122      	str	r2, [r4, #16]
   206d0:	2200      	movs	r2, #0
   206d2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   206d6:	f000 fbb7 	bl	20e48 <z_ready_thread>
		z_reschedule(&lock, key);
   206da:	4813      	ldr	r0, [pc, #76]	; (20728 <z_impl_k_mutex_unlock+0x13c>)
   206dc:	4629      	mov	r1, r5
   206de:	f000 f9d9 	bl	20a94 <z_reschedule>
   206e2:	e7c9      	b.n	20678 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   206e4:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   206e6:	4810      	ldr	r0, [pc, #64]	; (20728 <z_impl_k_mutex_unlock+0x13c>)
   206e8:	f001 fb86 	bl	21df8 <z_spin_unlock_valid>
   206ec:	b940      	cbnz	r0, 20700 <z_impl_k_mutex_unlock+0x114>
   206ee:	490f      	ldr	r1, [pc, #60]	; (2072c <z_impl_k_mutex_unlock+0x140>)
   206f0:	480a      	ldr	r0, [pc, #40]	; (2071c <z_impl_k_mutex_unlock+0x130>)
   206f2:	22a3      	movs	r2, #163	; 0xa3
   206f4:	f002 fb1a 	bl	22d2c <printk>
   206f8:	480c      	ldr	r0, [pc, #48]	; (2072c <z_impl_k_mutex_unlock+0x140>)
   206fa:	21a3      	movs	r1, #163	; 0xa3
   206fc:	f002 fd79 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20700:	f385 8811 	msr	BASEPRI, r5
   20704:	f3bf 8f6f 	isb	sy
   20708:	e7b6      	b.n	20678 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   2070a:	f06f 0015 	mvn.w	r0, #21
   2070e:	e7b6      	b.n	2067e <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   20710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20714:	e7b3      	b.n	2067e <z_impl_k_mutex_unlock+0x92>
   20716:	bf00      	nop
   20718:	0002a61d 	.word	0x0002a61d
   2071c:	00027c9a 	.word	0x00027c9a
   20720:	20002b28 	.word	0x20002b28
   20724:	0002a63f 	.word	0x0002a63f
   20728:	20002b24 	.word	0x20002b24
   2072c:	00027cd4 	.word	0x00027cd4

00020730 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20734:	4604      	mov	r4, r0
   20736:	f89d a020 	ldrb.w	sl, [sp, #32]
   2073a:	460d      	mov	r5, r1
   2073c:	4690      	mov	r8, r2
   2073e:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20740:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20744:	f04f 0340 	mov.w	r3, #64	; 0x40
   20748:	f3ef 8711 	mrs	r7, BASEPRI
   2074c:	f383 8811 	msr	BASEPRI, r3
   20750:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20754:	4630      	mov	r0, r6
   20756:	f001 fb41 	bl	21ddc <z_spin_lock_valid>
   2075a:	b940      	cbnz	r0, 2076e <queue_insert+0x3e>
   2075c:	4937      	ldr	r1, [pc, #220]	; (2083c <queue_insert+0x10c>)
   2075e:	4838      	ldr	r0, [pc, #224]	; (20840 <queue_insert+0x110>)
   20760:	2278      	movs	r2, #120	; 0x78
   20762:	f002 fae3 	bl	22d2c <printk>
   20766:	4835      	ldr	r0, [pc, #212]	; (2083c <queue_insert+0x10c>)
   20768:	2178      	movs	r1, #120	; 0x78
   2076a:	f002 fd42 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2076e:	4630      	mov	r0, r6
   20770:	f001 fb52 	bl	21e18 <z_spin_lock_set_owner>

	if (is_append) {
   20774:	f1ba 0f00 	cmp.w	sl, #0
   20778:	d000      	beq.n	2077c <queue_insert+0x4c>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2077a:	6865      	ldr	r5, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2077c:	f104 000c 	add.w	r0, r4, #12
   20780:	f000 ff82 	bl	21688 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20784:	b160      	cbz	r0, 207a0 <queue_insert+0x70>
   20786:	2400      	movs	r4, #0
   20788:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
   2078c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20790:	f000 fb5a 	bl	20e48 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20794:	4630      	mov	r0, r6
   20796:	4639      	mov	r1, r7
   20798:	f000 f97c 	bl	20a94 <z_reschedule>
	return 0;
   2079c:	2000      	movs	r0, #0
   2079e:	e019      	b.n	207d4 <queue_insert+0xa4>
	if (alloc) {
   207a0:	f1b9 0f00 	cmp.w	r9, #0
   207a4:	d028      	beq.n	207f8 <queue_insert+0xc8>
		anode = z_thread_malloc(sizeof(*anode));
   207a6:	2008      	movs	r0, #8
   207a8:	f002 fa0c 	bl	22bc4 <z_thread_malloc>
		if (anode == NULL) {
   207ac:	b9a0      	cbnz	r0, 207d8 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207ae:	4630      	mov	r0, r6
   207b0:	f001 fb22 	bl	21df8 <z_spin_unlock_valid>
   207b4:	b940      	cbnz	r0, 207c8 <queue_insert+0x98>
   207b6:	4921      	ldr	r1, [pc, #132]	; (2083c <queue_insert+0x10c>)
   207b8:	4821      	ldr	r0, [pc, #132]	; (20840 <queue_insert+0x110>)
   207ba:	22a3      	movs	r2, #163	; 0xa3
   207bc:	f002 fab6 	bl	22d2c <printk>
   207c0:	481e      	ldr	r0, [pc, #120]	; (2083c <queue_insert+0x10c>)
   207c2:	21a3      	movs	r1, #163	; 0xa3
   207c4:	f002 fd15 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   207c8:	f387 8811 	msr	BASEPRI, r7
   207cc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   207d0:	f06f 000b 	mvn.w	r0, #11
}
   207d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   207d8:	2301      	movs	r3, #1
		anode->data = data;
   207da:	f8c0 8004 	str.w	r8, [r0, #4]
   207de:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   207e0:	6803      	ldr	r3, [r0, #0]
   207e2:	f003 0303 	and.w	r3, r3, #3
   207e6:	b95d      	cbnz	r5, 20800 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   207e8:	6822      	ldr	r2, [r4, #0]
   207ea:	4313      	orrs	r3, r2
   207ec:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   207ee:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   207f0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   207f2:	b973      	cbnz	r3, 20812 <queue_insert+0xe2>
	list->tail = node;
   207f4:	6060      	str	r0, [r4, #4]
}
   207f6:	e00c      	b.n	20812 <queue_insert+0xe2>
	node->next_and_flags = flags;
   207f8:	f8c8 9000 	str.w	r9, [r8]
}
   207fc:	4640      	mov	r0, r8
   207fe:	e7ef      	b.n	207e0 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20800:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20802:	f032 0203 	bics.w	r2, r2, #3
   20806:	d110      	bne.n	2082a <queue_insert+0xfa>
Z_GENLIST_APPEND(sflist, sfnode)
   20808:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2080a:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2080c:	b93a      	cbnz	r2, 2081e <queue_insert+0xee>
	list->head = node;
   2080e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20812:	2104      	movs	r1, #4
   20814:	f104 0014 	add.w	r0, r4, #20
   20818:	f006 fad5 	bl	26dc6 <z_handle_obj_poll_events>
   2081c:	e7ba      	b.n	20794 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2081e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20820:	f003 0303 	and.w	r3, r3, #3
   20824:	4303      	orrs	r3, r0
   20826:	6013      	str	r3, [r2, #0]
   20828:	e7e4      	b.n	207f4 <queue_insert+0xc4>
   2082a:	4313      	orrs	r3, r2
   2082c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2082e:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20830:	f003 0303 	and.w	r3, r3, #3
   20834:	4303      	orrs	r3, r0
   20836:	602b      	str	r3, [r5, #0]
}
   20838:	e7eb      	b.n	20812 <queue_insert+0xe2>
   2083a:	bf00      	nop
   2083c:	00027cd4 	.word	0x00027cd4
   20840:	00027c9a 	.word	0x00027c9a

00020844 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   20844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20848:	4605      	mov	r5, r0
   2084a:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   2084c:	460c      	mov	r4, r1
   2084e:	2900      	cmp	r1, #0
   20850:	d045      	beq.n	208de <k_queue_append_list+0x9a>
   20852:	2a00      	cmp	r2, #0
   20854:	d043      	beq.n	208de <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20856:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2085a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2085e:	f3ef 8911 	mrs	r9, BASEPRI
   20862:	f383 8811 	msr	BASEPRI, r3
   20866:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2086a:	4638      	mov	r0, r7
   2086c:	f001 fab6 	bl	21ddc <z_spin_lock_valid>
   20870:	b940      	cbnz	r0, 20884 <k_queue_append_list+0x40>
   20872:	491c      	ldr	r1, [pc, #112]	; (208e4 <k_queue_append_list+0xa0>)
   20874:	481c      	ldr	r0, [pc, #112]	; (208e8 <k_queue_append_list+0xa4>)
   20876:	2278      	movs	r2, #120	; 0x78
   20878:	f002 fa58 	bl	22d2c <printk>
   2087c:	4819      	ldr	r0, [pc, #100]	; (208e4 <k_queue_append_list+0xa0>)
   2087e:	2178      	movs	r1, #120	; 0x78
   20880:	f002 fcb7 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20884:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   20886:	f105 080c 	add.w	r8, r5, #12
   2088a:	f001 fac5 	bl	21e18 <z_spin_lock_set_owner>
   2088e:	4640      	mov	r0, r8
   20890:	f000 fefa 	bl	21688 <z_unpend_first_thread>
   20894:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   20898:	b920      	cbnz	r0, 208a4 <k_queue_append_list+0x60>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2089a:	686b      	ldr	r3, [r5, #4]
   2089c:	b9cb      	cbnz	r3, 208d2 <k_queue_append_list+0x8e>
	list->head = node;
   2089e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   208a0:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   208a2:	e00a      	b.n	208ba <k_queue_append_list+0x76>
   208a4:	6144      	str	r4, [r0, #20]
   208a6:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   208aa:	f000 facd 	bl	20e48 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   208ae:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   208b0:	4640      	mov	r0, r8
   208b2:	f000 fee9 	bl	21688 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   208b6:	2c00      	cmp	r4, #0
   208b8:	d1ee      	bne.n	20898 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   208ba:	2104      	movs	r1, #4
   208bc:	f105 0014 	add.w	r0, r5, #20
   208c0:	f006 fa81 	bl	26dc6 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   208c4:	4638      	mov	r0, r7
   208c6:	4649      	mov	r1, r9
   208c8:	f000 f8e4 	bl	20a94 <z_reschedule>
	return 0;
   208cc:	2000      	movs	r0, #0
}
   208ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   208d2:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   208d4:	f001 0103 	and.w	r1, r1, #3
   208d8:	430c      	orrs	r4, r1
   208da:	601c      	str	r4, [r3, #0]
}
   208dc:	e7e0      	b.n	208a0 <k_queue_append_list+0x5c>
		return -EINVAL;
   208de:	f06f 0015 	mvn.w	r0, #21
   208e2:	e7f4      	b.n	208ce <k_queue_append_list+0x8a>
   208e4:	00027cd4 	.word	0x00027cd4
   208e8:	00027c9a 	.word	0x00027c9a

000208ec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   208ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   208f0:	4605      	mov	r5, r0
   208f2:	4690      	mov	r8, r2
   208f4:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   208f6:	f100 0608 	add.w	r6, r0, #8
   208fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   208fe:	f3ef 8711 	mrs	r7, BASEPRI
   20902:	f383 8811 	msr	BASEPRI, r3
   20906:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2090a:	4630      	mov	r0, r6
   2090c:	f001 fa66 	bl	21ddc <z_spin_lock_valid>
   20910:	b940      	cbnz	r0, 20924 <z_impl_k_queue_get+0x38>
   20912:	4920      	ldr	r1, [pc, #128]	; (20994 <z_impl_k_queue_get+0xa8>)
   20914:	4820      	ldr	r0, [pc, #128]	; (20998 <z_impl_k_queue_get+0xac>)
   20916:	2278      	movs	r2, #120	; 0x78
   20918:	f002 fa08 	bl	22d2c <printk>
   2091c:	481d      	ldr	r0, [pc, #116]	; (20994 <z_impl_k_queue_get+0xa8>)
   2091e:	2178      	movs	r1, #120	; 0x78
   20920:	f002 fc67 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20924:	4630      	mov	r0, r6
   20926:	f001 fa77 	bl	21e18 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2092a:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2092c:	b30c      	cbz	r4, 20972 <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2092e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20930:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20932:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20936:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20938:	4620      	mov	r0, r4
	list->head = node;
   2093a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   2093c:	bf08      	it	eq
   2093e:	606b      	streq	r3, [r5, #4]
   20940:	2101      	movs	r1, #1
   20942:	f006 f8c6 	bl	26ad2 <z_queue_node_peek>
   20946:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20948:	4630      	mov	r0, r6
   2094a:	f001 fa55 	bl	21df8 <z_spin_unlock_valid>
   2094e:	b940      	cbnz	r0, 20962 <z_impl_k_queue_get+0x76>
   20950:	4910      	ldr	r1, [pc, #64]	; (20994 <z_impl_k_queue_get+0xa8>)
   20952:	4811      	ldr	r0, [pc, #68]	; (20998 <z_impl_k_queue_get+0xac>)
   20954:	22a3      	movs	r2, #163	; 0xa3
   20956:	f002 f9e9 	bl	22d2c <printk>
   2095a:	480e      	ldr	r0, [pc, #56]	; (20994 <z_impl_k_queue_get+0xa8>)
   2095c:	21a3      	movs	r1, #163	; 0xa3
   2095e:	f002 fc48 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20962:	f387 8811 	msr	BASEPRI, r7
   20966:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2096a:	4620      	mov	r0, r4
   2096c:	b003      	add	sp, #12
   2096e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20972:	ea58 0309 	orrs.w	r3, r8, r9
   20976:	d0e7      	beq.n	20948 <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20978:	e9cd 8900 	strd	r8, r9, [sp]
   2097c:	f105 020c 	add.w	r2, r5, #12
   20980:	4639      	mov	r1, r7
   20982:	4630      	mov	r0, r6
   20984:	f000 fdda 	bl	2153c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   20988:	2800      	cmp	r0, #0
   2098a:	d1ee      	bne.n	2096a <z_impl_k_queue_get+0x7e>
   2098c:	4b03      	ldr	r3, [pc, #12]	; (2099c <z_impl_k_queue_get+0xb0>)
   2098e:	689b      	ldr	r3, [r3, #8]
   20990:	695c      	ldr	r4, [r3, #20]
   20992:	e7ea      	b.n	2096a <z_impl_k_queue_get+0x7e>
   20994:	00027cd4 	.word	0x00027cd4
   20998:	00027c9a 	.word	0x00027c9a
   2099c:	20002b28 	.word	0x20002b28

000209a0 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   209a0:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   209a2:	b510      	push	{r4, lr}
   209a4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   209a6:	b953      	cbnz	r3, 209be <pended_on.isra.0+0x1e>
   209a8:	4906      	ldr	r1, [pc, #24]	; (209c4 <pended_on.isra.0+0x24>)
   209aa:	4807      	ldr	r0, [pc, #28]	; (209c8 <pended_on.isra.0+0x28>)
   209ac:	f44f 7201 	mov.w	r2, #516	; 0x204
   209b0:	f002 f9bc 	bl	22d2c <printk>
   209b4:	4803      	ldr	r0, [pc, #12]	; (209c4 <pended_on.isra.0+0x24>)
   209b6:	f44f 7101 	mov.w	r1, #516	; 0x204
   209ba:	f002 fc1a 	bl	231f2 <assert_post_action>

	return thread->base.pended_on;
}
   209be:	6820      	ldr	r0, [r4, #0]
   209c0:	bd10      	pop	{r4, pc}
   209c2:	bf00      	nop
   209c4:	0002a66a 	.word	0x0002a66a
   209c8:	00027c9a 	.word	0x00027c9a

000209cc <z_reset_time_slice>:
{
   209cc:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   209ce:	4c08      	ldr	r4, [pc, #32]	; (209f0 <z_reset_time_slice+0x24>)
   209d0:	6823      	ldr	r3, [r4, #0]
   209d2:	b15b      	cbz	r3, 209ec <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   209d4:	f7f4 fa40 	bl	14e58 <z_clock_elapsed>
   209d8:	4603      	mov	r3, r0
   209da:	6820      	ldr	r0, [r4, #0]
   209dc:	4a05      	ldr	r2, [pc, #20]	; (209f4 <z_reset_time_slice+0x28>)
   209de:	4403      	add	r3, r0
}
   209e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   209e4:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   209e6:	2100      	movs	r1, #0
   209e8:	f001 bc9a 	b.w	22320 <z_set_timeout_expiry>
}
   209ec:	bd10      	pop	{r4, pc}
   209ee:	bf00      	nop
   209f0:	20002b68 	.word	0x20002b68
   209f4:	20002b28 	.word	0x20002b28

000209f8 <k_sched_time_slice_set>:
{
   209f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209fa:	4605      	mov	r5, r0
   209fc:	460c      	mov	r4, r1
	__asm__ volatile(
   209fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a02:	f3ef 8611 	mrs	r6, BASEPRI
   20a06:	f383 8811 	msr	BASEPRI, r3
   20a0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a0e:	481b      	ldr	r0, [pc, #108]	; (20a7c <k_sched_time_slice_set+0x84>)
   20a10:	f001 f9e4 	bl	21ddc <z_spin_lock_valid>
   20a14:	b940      	cbnz	r0, 20a28 <k_sched_time_slice_set+0x30>
   20a16:	491a      	ldr	r1, [pc, #104]	; (20a80 <k_sched_time_slice_set+0x88>)
   20a18:	481a      	ldr	r0, [pc, #104]	; (20a84 <k_sched_time_slice_set+0x8c>)
   20a1a:	2278      	movs	r2, #120	; 0x78
   20a1c:	f002 f986 	bl	22d2c <printk>
   20a20:	4817      	ldr	r0, [pc, #92]	; (20a80 <k_sched_time_slice_set+0x88>)
   20a22:	2178      	movs	r1, #120	; 0x78
   20a24:	f002 fbe5 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20a28:	4814      	ldr	r0, [pc, #80]	; (20a7c <k_sched_time_slice_set+0x84>)
   20a2a:	f001 f9f5 	bl	21e18 <z_spin_lock_set_owner>
		_current_cpu->slice_ticks = 0;
   20a2e:	4b16      	ldr	r3, [pc, #88]	; (20a88 <k_sched_time_slice_set+0x90>)
   20a30:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   20a32:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   20a36:	f240 30e7 	movw	r0, #999	; 0x3e7
   20a3a:	2100      	movs	r1, #0
   20a3c:	615a      	str	r2, [r3, #20]
   20a3e:	fbe7 0105 	umlal	r0, r1, r7, r5
   20a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20a46:	2300      	movs	r3, #0
   20a48:	f7df fb4a 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   20a4c:	4b0f      	ldr	r3, [pc, #60]	; (20a8c <k_sched_time_slice_set+0x94>)
   20a4e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   20a50:	4b0f      	ldr	r3, [pc, #60]	; (20a90 <k_sched_time_slice_set+0x98>)
   20a52:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   20a54:	f7ff ffba 	bl	209cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a58:	4808      	ldr	r0, [pc, #32]	; (20a7c <k_sched_time_slice_set+0x84>)
   20a5a:	f001 f9cd 	bl	21df8 <z_spin_unlock_valid>
   20a5e:	b940      	cbnz	r0, 20a72 <k_sched_time_slice_set+0x7a>
   20a60:	4907      	ldr	r1, [pc, #28]	; (20a80 <k_sched_time_slice_set+0x88>)
   20a62:	4808      	ldr	r0, [pc, #32]	; (20a84 <k_sched_time_slice_set+0x8c>)
   20a64:	22a3      	movs	r2, #163	; 0xa3
   20a66:	f002 f961 	bl	22d2c <printk>
   20a6a:	4805      	ldr	r0, [pc, #20]	; (20a80 <k_sched_time_slice_set+0x88>)
   20a6c:	21a3      	movs	r1, #163	; 0xa3
   20a6e:	f002 fbc0 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20a72:	f386 8811 	msr	BASEPRI, r6
   20a76:	f3bf 8f6f 	isb	sy
}
   20a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20a7c:	20002b60 	.word	0x20002b60
   20a80:	00027cd4 	.word	0x00027cd4
   20a84:	00027c9a 	.word	0x00027c9a
   20a88:	20002b28 	.word	0x20002b28
   20a8c:	20002b68 	.word	0x20002b68
   20a90:	20002b64 	.word	0x20002b64

00020a94 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20a94:	b510      	push	{r4, lr}
   20a96:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20a98:	460c      	mov	r4, r1
   20a9a:	b9c1      	cbnz	r1, 20ace <z_reschedule+0x3a>
   20a9c:	f3ef 8205 	mrs	r2, IPSR
   20aa0:	b9aa      	cbnz	r2, 20ace <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   20aa2:	4a14      	ldr	r2, [pc, #80]	; (20af4 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   20aa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
   20aa6:	6892      	ldr	r2, [r2, #8]
   20aa8:	4291      	cmp	r1, r2
   20aaa:	d010      	beq.n	20ace <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20aac:	f001 f9a4 	bl	21df8 <z_spin_unlock_valid>
   20ab0:	b940      	cbnz	r0, 20ac4 <z_reschedule+0x30>
   20ab2:	4911      	ldr	r1, [pc, #68]	; (20af8 <z_reschedule+0x64>)
   20ab4:	4811      	ldr	r0, [pc, #68]	; (20afc <z_reschedule+0x68>)
   20ab6:	22ba      	movs	r2, #186	; 0xba
   20ab8:	f002 f938 	bl	22d2c <printk>
   20abc:	480e      	ldr	r0, [pc, #56]	; (20af8 <z_reschedule+0x64>)
   20abe:	21ba      	movs	r1, #186	; 0xba
   20ac0:	f002 fb97 	bl	231f2 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   20ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   20ac8:	2000      	movs	r0, #0
   20aca:	f7f4 bbc5 	b.w	15258 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ace:	4618      	mov	r0, r3
   20ad0:	f001 f992 	bl	21df8 <z_spin_unlock_valid>
   20ad4:	b940      	cbnz	r0, 20ae8 <z_reschedule+0x54>
   20ad6:	4908      	ldr	r1, [pc, #32]	; (20af8 <z_reschedule+0x64>)
   20ad8:	4808      	ldr	r0, [pc, #32]	; (20afc <z_reschedule+0x68>)
   20ada:	22a3      	movs	r2, #163	; 0xa3
   20adc:	f002 f926 	bl	22d2c <printk>
   20ae0:	4805      	ldr	r0, [pc, #20]	; (20af8 <z_reschedule+0x64>)
   20ae2:	21a3      	movs	r1, #163	; 0xa3
   20ae4:	f002 fb85 	bl	231f2 <assert_post_action>
   20ae8:	f384 8811 	msr	BASEPRI, r4
   20aec:	f3bf 8f6f 	isb	sy
   20af0:	bd10      	pop	{r4, pc}
   20af2:	bf00      	nop
   20af4:	20002b28 	.word	0x20002b28
   20af8:	00027cd4 	.word	0x00027cd4
   20afc:	00027c9a 	.word	0x00027c9a

00020b00 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   20b00:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20b02:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b06:	f3ef 8511 	mrs	r5, BASEPRI
   20b0a:	f383 8811 	msr	BASEPRI, r3
   20b0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b12:	4822      	ldr	r0, [pc, #136]	; (20b9c <k_sched_lock+0x9c>)
   20b14:	f001 f962 	bl	21ddc <z_spin_lock_valid>
   20b18:	b940      	cbnz	r0, 20b2c <k_sched_lock+0x2c>
   20b1a:	4921      	ldr	r1, [pc, #132]	; (20ba0 <k_sched_lock+0xa0>)
   20b1c:	4821      	ldr	r0, [pc, #132]	; (20ba4 <k_sched_lock+0xa4>)
   20b1e:	2278      	movs	r2, #120	; 0x78
   20b20:	f002 f904 	bl	22d2c <printk>
   20b24:	481e      	ldr	r0, [pc, #120]	; (20ba0 <k_sched_lock+0xa0>)
   20b26:	2178      	movs	r1, #120	; 0x78
   20b28:	f002 fb63 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20b2c:	481b      	ldr	r0, [pc, #108]	; (20b9c <k_sched_lock+0x9c>)
   20b2e:	f001 f973 	bl	21e18 <z_spin_lock_set_owner>
   20b32:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   20b36:	b153      	cbz	r3, 20b4e <k_sched_lock+0x4e>
   20b38:	491b      	ldr	r1, [pc, #108]	; (20ba8 <k_sched_lock+0xa8>)
   20b3a:	481a      	ldr	r0, [pc, #104]	; (20ba4 <k_sched_lock+0xa4>)
   20b3c:	f44f 7289 	mov.w	r2, #274	; 0x112
   20b40:	f002 f8f4 	bl	22d2c <printk>
   20b44:	4818      	ldr	r0, [pc, #96]	; (20ba8 <k_sched_lock+0xa8>)
   20b46:	f44f 7189 	mov.w	r1, #274	; 0x112
   20b4a:	f002 fb52 	bl	231f2 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   20b4e:	4c17      	ldr	r4, [pc, #92]	; (20bac <k_sched_lock+0xac>)
   20b50:	68a2      	ldr	r2, [r4, #8]
   20b52:	7bd2      	ldrb	r2, [r2, #15]
   20b54:	2a01      	cmp	r2, #1
   20b56:	d10a      	bne.n	20b6e <k_sched_lock+0x6e>
   20b58:	4913      	ldr	r1, [pc, #76]	; (20ba8 <k_sched_lock+0xa8>)
   20b5a:	4812      	ldr	r0, [pc, #72]	; (20ba4 <k_sched_lock+0xa4>)
   20b5c:	f240 1213 	movw	r2, #275	; 0x113
   20b60:	f002 f8e4 	bl	22d2c <printk>
   20b64:	4810      	ldr	r0, [pc, #64]	; (20ba8 <k_sched_lock+0xa8>)
   20b66:	f240 1113 	movw	r1, #275	; 0x113
   20b6a:	f002 fb42 	bl	231f2 <assert_post_action>
	--_current->base.sched_locked;
   20b6e:	68a2      	ldr	r2, [r4, #8]
   20b70:	7bd3      	ldrb	r3, [r2, #15]
   20b72:	3b01      	subs	r3, #1
   20b74:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b76:	4809      	ldr	r0, [pc, #36]	; (20b9c <k_sched_lock+0x9c>)
   20b78:	f001 f93e 	bl	21df8 <z_spin_unlock_valid>
   20b7c:	b940      	cbnz	r0, 20b90 <k_sched_lock+0x90>
   20b7e:	4908      	ldr	r1, [pc, #32]	; (20ba0 <k_sched_lock+0xa0>)
   20b80:	4808      	ldr	r0, [pc, #32]	; (20ba4 <k_sched_lock+0xa4>)
   20b82:	22a3      	movs	r2, #163	; 0xa3
   20b84:	f002 f8d2 	bl	22d2c <printk>
   20b88:	4805      	ldr	r0, [pc, #20]	; (20ba0 <k_sched_lock+0xa0>)
   20b8a:	21a3      	movs	r1, #163	; 0xa3
   20b8c:	f002 fb31 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20b90:	f385 8811 	msr	BASEPRI, r5
   20b94:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   20b98:	bd38      	pop	{r3, r4, r5, pc}
   20b9a:	bf00      	nop
   20b9c:	20002b60 	.word	0x20002b60
   20ba0:	00027cd4 	.word	0x00027cd4
   20ba4:	00027c9a 	.word	0x00027c9a
   20ba8:	0002a63f 	.word	0x0002a63f
   20bac:	20002b28 	.word	0x20002b28

00020bb0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20bb0:	4b11      	ldr	r3, [pc, #68]	; (20bf8 <z_priq_dumb_remove+0x48>)
   20bb2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   20bb6:	4282      	cmp	r2, r0
{
   20bb8:	b510      	push	{r4, lr}
   20bba:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20bbc:	d105      	bne.n	20bca <z_priq_dumb_remove+0x1a>
   20bbe:	689b      	ldr	r3, [r3, #8]
   20bc0:	428b      	cmp	r3, r1
   20bc2:	d102      	bne.n	20bca <z_priq_dumb_remove+0x1a>
   20bc4:	7b4b      	ldrb	r3, [r1, #13]
   20bc6:	06db      	lsls	r3, r3, #27
   20bc8:	d114      	bne.n	20bf4 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20bca:	4b0c      	ldr	r3, [pc, #48]	; (20bfc <z_priq_dumb_remove+0x4c>)
   20bcc:	429c      	cmp	r4, r3
   20bce:	d10a      	bne.n	20be6 <z_priq_dumb_remove+0x36>
   20bd0:	490b      	ldr	r1, [pc, #44]	; (20c00 <z_priq_dumb_remove+0x50>)
   20bd2:	480c      	ldr	r0, [pc, #48]	; (20c04 <z_priq_dumb_remove+0x54>)
   20bd4:	f240 32dd 	movw	r2, #989	; 0x3dd
   20bd8:	f002 f8a8 	bl	22d2c <printk>
   20bdc:	4808      	ldr	r0, [pc, #32]	; (20c00 <z_priq_dumb_remove+0x50>)
   20bde:	f240 31dd 	movw	r1, #989	; 0x3dd
   20be2:	f002 fb06 	bl	231f2 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   20be6:	e9d4 3200 	ldrd	r3, r2, [r4]
   20bea:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20bec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20bee:	2300      	movs	r3, #0
	node->prev = NULL;
   20bf0:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20bf4:	bd10      	pop	{r4, pc}
   20bf6:	bf00      	nop
   20bf8:	20002b28 	.word	0x20002b28
   20bfc:	200025a8 	.word	0x200025a8
   20c00:	0002a66a 	.word	0x0002a66a
   20c04:	00027c9a 	.word	0x00027c9a

00020c08 <z_unpend_thread>:
{
   20c08:	b538      	push	{r3, r4, r5, lr}
   20c0a:	4604      	mov	r4, r0
	__asm__ volatile(
   20c0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c10:	f3ef 8511 	mrs	r5, BASEPRI
   20c14:	f383 8811 	msr	BASEPRI, r3
   20c18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c1c:	4814      	ldr	r0, [pc, #80]	; (20c70 <z_unpend_thread+0x68>)
   20c1e:	f001 f8dd 	bl	21ddc <z_spin_lock_valid>
   20c22:	b940      	cbnz	r0, 20c36 <z_unpend_thread+0x2e>
   20c24:	4913      	ldr	r1, [pc, #76]	; (20c74 <z_unpend_thread+0x6c>)
   20c26:	4814      	ldr	r0, [pc, #80]	; (20c78 <z_unpend_thread+0x70>)
   20c28:	2278      	movs	r2, #120	; 0x78
   20c2a:	f002 f87f 	bl	22d2c <printk>
   20c2e:	4811      	ldr	r0, [pc, #68]	; (20c74 <z_unpend_thread+0x6c>)
   20c30:	2178      	movs	r1, #120	; 0x78
   20c32:	f002 fade 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20c36:	480e      	ldr	r0, [pc, #56]	; (20c70 <z_unpend_thread+0x68>)
   20c38:	f001 f8ee 	bl	21e18 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   20c3c:	4620      	mov	r0, r4
   20c3e:	f005 ff95 	bl	26b6c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c42:	480b      	ldr	r0, [pc, #44]	; (20c70 <z_unpend_thread+0x68>)
   20c44:	f001 f8d8 	bl	21df8 <z_spin_unlock_valid>
   20c48:	b940      	cbnz	r0, 20c5c <z_unpend_thread+0x54>
   20c4a:	490a      	ldr	r1, [pc, #40]	; (20c74 <z_unpend_thread+0x6c>)
   20c4c:	480a      	ldr	r0, [pc, #40]	; (20c78 <z_unpend_thread+0x70>)
   20c4e:	22a3      	movs	r2, #163	; 0xa3
   20c50:	f002 f86c 	bl	22d2c <printk>
   20c54:	4807      	ldr	r0, [pc, #28]	; (20c74 <z_unpend_thread+0x6c>)
   20c56:	21a3      	movs	r1, #163	; 0xa3
   20c58:	f002 facb 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20c5c:	f385 8811 	msr	BASEPRI, r5
   20c60:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20c64:	f104 0018 	add.w	r0, r4, #24
}
   20c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20c6c:	f001 bae6 	b.w	2223c <z_abort_timeout>
   20c70:	20002b60 	.word	0x20002b60
   20c74:	00027cd4 	.word	0x00027cd4
   20c78:	00027c9a 	.word	0x00027c9a

00020c7c <update_cache>:
{
   20c7c:	b538      	push	{r3, r4, r5, lr}
   20c7e:	4c19      	ldr	r4, [pc, #100]	; (20ce4 <update_cache+0x68>)
	if (_current_cpu->pending_abort != NULL) {
   20c80:	6923      	ldr	r3, [r4, #16]
   20c82:	68a1      	ldr	r1, [r4, #8]
{
   20c84:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   20c86:	b143      	cbz	r3, 20c9a <update_cache+0x1e>
		return _current_cpu->idle_thread;
   20c88:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   20c8a:	b1a8      	cbz	r0, 20cb8 <update_cache+0x3c>
		if (thread != _current) {
   20c8c:	68a3      	ldr	r3, [r4, #8]
   20c8e:	42ab      	cmp	r3, r5
   20c90:	d001      	beq.n	20c96 <update_cache+0x1a>
			z_reset_time_slice();
   20c92:	f7ff fe9b 	bl	209cc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   20c96:	62a5      	str	r5, [r4, #40]	; 0x28
}
   20c98:	e023      	b.n	20ce2 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   20c9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   20c9e:	f005 ff74 	bl	26b8a <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20ca2:	7b4b      	ldrb	r3, [r1, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   20ca4:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20ca6:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   20ca8:	bf44      	itt	mi
   20caa:	f043 0308 	orrmi.w	r3, r3, #8
   20cae:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   20cb0:	b905      	cbnz	r5, 20cb4 <update_cache+0x38>
   20cb2:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   20cb4:	b152      	cbz	r2, 20ccc <update_cache+0x50>
   20cb6:	e7e9      	b.n	20c8c <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   20cb8:	b941      	cbnz	r1, 20ccc <update_cache+0x50>
   20cba:	490b      	ldr	r1, [pc, #44]	; (20ce8 <update_cache+0x6c>)
   20cbc:	480b      	ldr	r0, [pc, #44]	; (20cec <update_cache+0x70>)
   20cbe:	2283      	movs	r2, #131	; 0x83
   20cc0:	f002 f834 	bl	22d2c <printk>
   20cc4:	4808      	ldr	r0, [pc, #32]	; (20ce8 <update_cache+0x6c>)
   20cc6:	2183      	movs	r1, #131	; 0x83
   20cc8:	f002 fa93 	bl	231f2 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   20ccc:	68a3      	ldr	r3, [r4, #8]
   20cce:	7b5a      	ldrb	r2, [r3, #13]
   20cd0:	06d2      	lsls	r2, r2, #27
   20cd2:	d1db      	bne.n	20c8c <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20cd4:	69aa      	ldr	r2, [r5, #24]
   20cd6:	2a00      	cmp	r2, #0
   20cd8:	d1d8      	bne.n	20c8c <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   20cda:	89da      	ldrh	r2, [r3, #14]
   20cdc:	2a7f      	cmp	r2, #127	; 0x7f
   20cde:	d9d5      	bls.n	20c8c <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   20ce0:	62a3      	str	r3, [r4, #40]	; 0x28
}
   20ce2:	bd38      	pop	{r3, r4, r5, pc}
   20ce4:	20002b28 	.word	0x20002b28
   20ce8:	0002a66a 	.word	0x0002a66a
   20cec:	00027c9a 	.word	0x00027c9a

00020cf0 <k_sched_unlock>:
{
   20cf0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20cf2:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cf6:	f3ef 8511 	mrs	r5, BASEPRI
   20cfa:	f383 8811 	msr	BASEPRI, r3
   20cfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d02:	4824      	ldr	r0, [pc, #144]	; (20d94 <k_sched_unlock+0xa4>)
   20d04:	f001 f86a 	bl	21ddc <z_spin_lock_valid>
   20d08:	b940      	cbnz	r0, 20d1c <k_sched_unlock+0x2c>
   20d0a:	4923      	ldr	r1, [pc, #140]	; (20d98 <k_sched_unlock+0xa8>)
   20d0c:	4823      	ldr	r0, [pc, #140]	; (20d9c <k_sched_unlock+0xac>)
   20d0e:	2278      	movs	r2, #120	; 0x78
   20d10:	f002 f80c 	bl	22d2c <printk>
   20d14:	4820      	ldr	r0, [pc, #128]	; (20d98 <k_sched_unlock+0xa8>)
   20d16:	2178      	movs	r1, #120	; 0x78
   20d18:	f002 fa6b 	bl	231f2 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   20d1c:	4c20      	ldr	r4, [pc, #128]	; (20da0 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   20d1e:	481d      	ldr	r0, [pc, #116]	; (20d94 <k_sched_unlock+0xa4>)
   20d20:	f001 f87a 	bl	21e18 <z_spin_lock_set_owner>
   20d24:	68a2      	ldr	r2, [r4, #8]
   20d26:	7bd2      	ldrb	r2, [r2, #15]
   20d28:	b952      	cbnz	r2, 20d40 <k_sched_unlock+0x50>
   20d2a:	491e      	ldr	r1, [pc, #120]	; (20da4 <k_sched_unlock+0xb4>)
   20d2c:	481b      	ldr	r0, [pc, #108]	; (20d9c <k_sched_unlock+0xac>)
   20d2e:	f240 3277 	movw	r2, #887	; 0x377
   20d32:	f001 fffb 	bl	22d2c <printk>
   20d36:	481b      	ldr	r0, [pc, #108]	; (20da4 <k_sched_unlock+0xb4>)
   20d38:	f240 3177 	movw	r1, #887	; 0x377
   20d3c:	f002 fa59 	bl	231f2 <assert_post_action>
   20d40:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   20d44:	b153      	cbz	r3, 20d5c <k_sched_unlock+0x6c>
   20d46:	4917      	ldr	r1, [pc, #92]	; (20da4 <k_sched_unlock+0xb4>)
   20d48:	4814      	ldr	r0, [pc, #80]	; (20d9c <k_sched_unlock+0xac>)
   20d4a:	f44f 725e 	mov.w	r2, #888	; 0x378
   20d4e:	f001 ffed 	bl	22d2c <printk>
   20d52:	4814      	ldr	r0, [pc, #80]	; (20da4 <k_sched_unlock+0xb4>)
   20d54:	f44f 715e 	mov.w	r1, #888	; 0x378
   20d58:	f002 fa4b 	bl	231f2 <assert_post_action>
		++_current->base.sched_locked;
   20d5c:	68a2      	ldr	r2, [r4, #8]
   20d5e:	7bd3      	ldrb	r3, [r2, #15]
   20d60:	3301      	adds	r3, #1
		update_cache(0);
   20d62:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   20d64:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20d66:	f7ff ff89 	bl	20c7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d6a:	480a      	ldr	r0, [pc, #40]	; (20d94 <k_sched_unlock+0xa4>)
   20d6c:	f001 f844 	bl	21df8 <z_spin_unlock_valid>
   20d70:	b940      	cbnz	r0, 20d84 <k_sched_unlock+0x94>
   20d72:	4909      	ldr	r1, [pc, #36]	; (20d98 <k_sched_unlock+0xa8>)
   20d74:	4809      	ldr	r0, [pc, #36]	; (20d9c <k_sched_unlock+0xac>)
   20d76:	22a3      	movs	r2, #163	; 0xa3
   20d78:	f001 ffd8 	bl	22d2c <printk>
   20d7c:	4806      	ldr	r0, [pc, #24]	; (20d98 <k_sched_unlock+0xa8>)
   20d7e:	21a3      	movs	r1, #163	; 0xa3
   20d80:	f002 fa37 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20d84:	f385 8811 	msr	BASEPRI, r5
   20d88:	f3bf 8f6f 	isb	sy
}
   20d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   20d90:	f005 bee2 	b.w	26b58 <z_reschedule_unlocked>
   20d94:	20002b60 	.word	0x20002b60
   20d98:	00027cd4 	.word	0x00027cd4
   20d9c:	00027c9a 	.word	0x00027c9a
   20da0:	20002b28 	.word	0x20002b28
   20da4:	0002a66a 	.word	0x0002a66a

00020da8 <ready_thread>:
{
   20da8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   20daa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   20dae:	7b43      	ldrb	r3, [r0, #13]
   20db0:	2a00      	cmp	r2, #0
{
   20db2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   20db4:	db3e      	blt.n	20e34 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20db6:	06db      	lsls	r3, r3, #27
   20db8:	d13c      	bne.n	20e34 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&t->node);
   20dba:	6985      	ldr	r5, [r0, #24]
   20dbc:	2d00      	cmp	r5, #0
   20dbe:	d139      	bne.n	20e34 <ready_thread+0x8c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20dc0:	4b1d      	ldr	r3, [pc, #116]	; (20e38 <ready_thread+0x90>)
   20dc2:	4298      	cmp	r0, r3
   20dc4:	d10a      	bne.n	20ddc <ready_thread+0x34>
   20dc6:	491d      	ldr	r1, [pc, #116]	; (20e3c <ready_thread+0x94>)
   20dc8:	481d      	ldr	r0, [pc, #116]	; (20e40 <ready_thread+0x98>)
   20dca:	f240 32c7 	movw	r2, #967	; 0x3c7
   20dce:	f001 ffad 	bl	22d2c <printk>
   20dd2:	481a      	ldr	r0, [pc, #104]	; (20e3c <ready_thread+0x94>)
   20dd4:	f240 31c7 	movw	r1, #967	; 0x3c7
   20dd8:	f002 fa0b 	bl	231f2 <assert_post_action>
	return list->head == list;
   20ddc:	4a19      	ldr	r2, [pc, #100]	; (20e44 <ready_thread+0x9c>)
   20dde:	4613      	mov	r3, r2
   20de0:	f853 0f2c 	ldr.w	r0, [r3, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20de4:	4298      	cmp	r0, r3
   20de6:	bf18      	it	ne
   20de8:	4605      	movne	r5, r0
   20dea:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20dec:	6b10      	ldr	r0, [r2, #48]	; 0x30
   20dee:	4619      	mov	r1, r3
   20df0:	462b      	mov	r3, r5
   20df2:	bf38      	it	cc
   20df4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20df6:	b1bb      	cbz	r3, 20e28 <ready_thread+0x80>
	if (thread_1->base.prio < thread_2->base.prio) {
   20df8:	f994 600e 	ldrsb.w	r6, [r4, #14]
   20dfc:	f993 500e 	ldrsb.w	r5, [r3, #14]
   20e00:	42ae      	cmp	r6, r5
   20e02:	db03      	blt.n	20e0c <ready_thread+0x64>
	return (node == list->tail) ? NULL : node->next;
   20e04:	4298      	cmp	r0, r3
   20e06:	d00f      	beq.n	20e28 <ready_thread+0x80>
   20e08:	681b      	ldr	r3, [r3, #0]
   20e0a:	e7f4      	b.n	20df6 <ready_thread+0x4e>
	node->prev = successor->prev;
   20e0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20e0e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   20e12:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20e14:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   20e16:	7b63      	ldrb	r3, [r4, #13]
   20e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20e1c:	7363      	strb	r3, [r4, #13]
		update_cache(0);
   20e1e:	2000      	movs	r0, #0
}
   20e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   20e24:	f7ff bf2a 	b.w	20c7c <update_cache>
	node->prev = list->tail;
   20e28:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   20e2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20e2e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20e30:	6314      	str	r4, [r2, #48]	; 0x30
}
   20e32:	e7f0      	b.n	20e16 <ready_thread+0x6e>
}
   20e34:	bd70      	pop	{r4, r5, r6, pc}
   20e36:	bf00      	nop
   20e38:	200025a8 	.word	0x200025a8
   20e3c:	0002a66a 	.word	0x0002a66a
   20e40:	00027c9a 	.word	0x00027c9a
   20e44:	20002b28 	.word	0x20002b28

00020e48 <z_ready_thread>:
{
   20e48:	b538      	push	{r3, r4, r5, lr}
   20e4a:	4604      	mov	r4, r0
	__asm__ volatile(
   20e4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e50:	f3ef 8511 	mrs	r5, BASEPRI
   20e54:	f383 8811 	msr	BASEPRI, r3
   20e58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e5c:	4812      	ldr	r0, [pc, #72]	; (20ea8 <z_ready_thread+0x60>)
   20e5e:	f000 ffbd 	bl	21ddc <z_spin_lock_valid>
   20e62:	b940      	cbnz	r0, 20e76 <z_ready_thread+0x2e>
   20e64:	4911      	ldr	r1, [pc, #68]	; (20eac <z_ready_thread+0x64>)
   20e66:	4812      	ldr	r0, [pc, #72]	; (20eb0 <z_ready_thread+0x68>)
   20e68:	2278      	movs	r2, #120	; 0x78
   20e6a:	f001 ff5f 	bl	22d2c <printk>
   20e6e:	480f      	ldr	r0, [pc, #60]	; (20eac <z_ready_thread+0x64>)
   20e70:	2178      	movs	r1, #120	; 0x78
   20e72:	f002 f9be 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20e76:	480c      	ldr	r0, [pc, #48]	; (20ea8 <z_ready_thread+0x60>)
   20e78:	f000 ffce 	bl	21e18 <z_spin_lock_set_owner>
		ready_thread(thread);
   20e7c:	4620      	mov	r0, r4
   20e7e:	f7ff ff93 	bl	20da8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e82:	4809      	ldr	r0, [pc, #36]	; (20ea8 <z_ready_thread+0x60>)
   20e84:	f000 ffb8 	bl	21df8 <z_spin_unlock_valid>
   20e88:	b940      	cbnz	r0, 20e9c <z_ready_thread+0x54>
   20e8a:	4908      	ldr	r1, [pc, #32]	; (20eac <z_ready_thread+0x64>)
   20e8c:	4808      	ldr	r0, [pc, #32]	; (20eb0 <z_ready_thread+0x68>)
   20e8e:	22a3      	movs	r2, #163	; 0xa3
   20e90:	f001 ff4c 	bl	22d2c <printk>
   20e94:	4805      	ldr	r0, [pc, #20]	; (20eac <z_ready_thread+0x64>)
   20e96:	21a3      	movs	r1, #163	; 0xa3
   20e98:	f002 f9ab 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20e9c:	f385 8811 	msr	BASEPRI, r5
   20ea0:	f3bf 8f6f 	isb	sy
}
   20ea4:	bd38      	pop	{r3, r4, r5, pc}
   20ea6:	bf00      	nop
   20ea8:	20002b60 	.word	0x20002b60
   20eac:	00027cd4 	.word	0x00027cd4
   20eb0:	00027c9a 	.word	0x00027c9a

00020eb4 <z_sched_start>:
{
   20eb4:	b538      	push	{r3, r4, r5, lr}
   20eb6:	4604      	mov	r4, r0
	__asm__ volatile(
   20eb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ebc:	f3ef 8511 	mrs	r5, BASEPRI
   20ec0:	f383 8811 	msr	BASEPRI, r3
   20ec4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ec8:	4818      	ldr	r0, [pc, #96]	; (20f2c <z_sched_start+0x78>)
   20eca:	f000 ff87 	bl	21ddc <z_spin_lock_valid>
   20ece:	b940      	cbnz	r0, 20ee2 <z_sched_start+0x2e>
   20ed0:	4917      	ldr	r1, [pc, #92]	; (20f30 <z_sched_start+0x7c>)
   20ed2:	4818      	ldr	r0, [pc, #96]	; (20f34 <z_sched_start+0x80>)
   20ed4:	2278      	movs	r2, #120	; 0x78
   20ed6:	f001 ff29 	bl	22d2c <printk>
   20eda:	4815      	ldr	r0, [pc, #84]	; (20f30 <z_sched_start+0x7c>)
   20edc:	2178      	movs	r1, #120	; 0x78
   20ede:	f002 f988 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ee2:	4812      	ldr	r0, [pc, #72]	; (20f2c <z_sched_start+0x78>)
   20ee4:	f000 ff98 	bl	21e18 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   20ee8:	7b63      	ldrb	r3, [r4, #13]
   20eea:	075a      	lsls	r2, r3, #29
   20eec:	d411      	bmi.n	20f12 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20eee:	480f      	ldr	r0, [pc, #60]	; (20f2c <z_sched_start+0x78>)
   20ef0:	f000 ff82 	bl	21df8 <z_spin_unlock_valid>
   20ef4:	b940      	cbnz	r0, 20f08 <z_sched_start+0x54>
   20ef6:	490e      	ldr	r1, [pc, #56]	; (20f30 <z_sched_start+0x7c>)
   20ef8:	480e      	ldr	r0, [pc, #56]	; (20f34 <z_sched_start+0x80>)
   20efa:	22a3      	movs	r2, #163	; 0xa3
   20efc:	f001 ff16 	bl	22d2c <printk>
   20f00:	480b      	ldr	r0, [pc, #44]	; (20f30 <z_sched_start+0x7c>)
   20f02:	21a3      	movs	r1, #163	; 0xa3
   20f04:	f002 f975 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20f08:	f385 8811 	msr	BASEPRI, r5
   20f0c:	f3bf 8f6f 	isb	sy
}
   20f10:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20f12:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   20f16:	4620      	mov	r0, r4
   20f18:	7363      	strb	r3, [r4, #13]
   20f1a:	f7ff ff45 	bl	20da8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20f1e:	4629      	mov	r1, r5
   20f20:	4802      	ldr	r0, [pc, #8]	; (20f2c <z_sched_start+0x78>)
}
   20f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   20f26:	f7ff bdb5 	b.w	20a94 <z_reschedule>
   20f2a:	bf00      	nop
   20f2c:	20002b60 	.word	0x20002b60
   20f30:	00027cd4 	.word	0x00027cd4
   20f34:	00027c9a 	.word	0x00027c9a

00020f38 <z_thread_timeout>:
{
   20f38:	b570      	push	{r4, r5, r6, lr}
   20f3a:	4604      	mov	r4, r0
	__asm__ volatile(
   20f3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f40:	f3ef 8611 	mrs	r6, BASEPRI
   20f44:	f383 8811 	msr	BASEPRI, r3
   20f48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f4c:	4819      	ldr	r0, [pc, #100]	; (20fb4 <z_thread_timeout+0x7c>)
   20f4e:	f000 ff45 	bl	21ddc <z_spin_lock_valid>
   20f52:	b940      	cbnz	r0, 20f66 <z_thread_timeout+0x2e>
   20f54:	4918      	ldr	r1, [pc, #96]	; (20fb8 <z_thread_timeout+0x80>)
   20f56:	4819      	ldr	r0, [pc, #100]	; (20fbc <z_thread_timeout+0x84>)
   20f58:	2278      	movs	r2, #120	; 0x78
   20f5a:	f001 fee7 	bl	22d2c <printk>
   20f5e:	4816      	ldr	r0, [pc, #88]	; (20fb8 <z_thread_timeout+0x80>)
   20f60:	2178      	movs	r1, #120	; 0x78
   20f62:	f002 f946 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20f66:	4813      	ldr	r0, [pc, #76]	; (20fb4 <z_thread_timeout+0x7c>)
   20f68:	f000 ff56 	bl	21e18 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   20f6c:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   20f70:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   20f74:	b113      	cbz	r3, 20f7c <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   20f76:	4628      	mov	r0, r5
   20f78:	f005 fdf8 	bl	26b6c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20f7c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   20f80:	f023 0314 	bic.w	r3, r3, #20
		ready_thread(thread);
   20f84:	4628      	mov	r0, r5
   20f86:	f804 3c0b 	strb.w	r3, [r4, #-11]
   20f8a:	f7ff ff0d 	bl	20da8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f8e:	4809      	ldr	r0, [pc, #36]	; (20fb4 <z_thread_timeout+0x7c>)
   20f90:	f000 ff32 	bl	21df8 <z_spin_unlock_valid>
   20f94:	b940      	cbnz	r0, 20fa8 <z_thread_timeout+0x70>
   20f96:	4908      	ldr	r1, [pc, #32]	; (20fb8 <z_thread_timeout+0x80>)
   20f98:	4808      	ldr	r0, [pc, #32]	; (20fbc <z_thread_timeout+0x84>)
   20f9a:	22a3      	movs	r2, #163	; 0xa3
   20f9c:	f001 fec6 	bl	22d2c <printk>
   20fa0:	4805      	ldr	r0, [pc, #20]	; (20fb8 <z_thread_timeout+0x80>)
   20fa2:	21a3      	movs	r1, #163	; 0xa3
   20fa4:	f002 f925 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   20fa8:	f386 8811 	msr	BASEPRI, r6
   20fac:	f3bf 8f6f 	isb	sy
}
   20fb0:	bd70      	pop	{r4, r5, r6, pc}
   20fb2:	bf00      	nop
   20fb4:	20002b60 	.word	0x20002b60
   20fb8:	00027cd4 	.word	0x00027cd4
   20fbc:	00027c9a 	.word	0x00027c9a

00020fc0 <move_thread_to_end_of_prio_q>:
{
   20fc0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   20fc2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   20fc6:	2b00      	cmp	r3, #0
{
   20fc8:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   20fca:	da03      	bge.n	20fd4 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   20fcc:	4601      	mov	r1, r0
   20fce:	481f      	ldr	r0, [pc, #124]	; (2104c <move_thread_to_end_of_prio_q+0x8c>)
   20fd0:	f7ff fdee 	bl	20bb0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20fd4:	4b1e      	ldr	r3, [pc, #120]	; (21050 <move_thread_to_end_of_prio_q+0x90>)
   20fd6:	429c      	cmp	r4, r3
   20fd8:	d10a      	bne.n	20ff0 <move_thread_to_end_of_prio_q+0x30>
   20fda:	491e      	ldr	r1, [pc, #120]	; (21054 <move_thread_to_end_of_prio_q+0x94>)
   20fdc:	481e      	ldr	r0, [pc, #120]	; (21058 <move_thread_to_end_of_prio_q+0x98>)
   20fde:	f240 32c7 	movw	r2, #967	; 0x3c7
   20fe2:	f001 fea3 	bl	22d2c <printk>
   20fe6:	481b      	ldr	r0, [pc, #108]	; (21054 <move_thread_to_end_of_prio_q+0x94>)
   20fe8:	f240 31c7 	movw	r1, #967	; 0x3c7
   20fec:	f002 f901 	bl	231f2 <assert_post_action>
	return list->head == list;
   20ff0:	4a1a      	ldr	r2, [pc, #104]	; (2105c <move_thread_to_end_of_prio_q+0x9c>)
   20ff2:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20ff4:	6b10      	ldr	r0, [r2, #48]	; 0x30
	return list->head == list;
   20ff6:	f851 3f2c 	ldr.w	r3, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ffa:	428b      	cmp	r3, r1
   20ffc:	bf08      	it	eq
   20ffe:	2300      	moveq	r3, #0
   21000:	2b00      	cmp	r3, #0
   21002:	bf38      	it	cc
   21004:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21006:	b1d3      	cbz	r3, 2103e <move_thread_to_end_of_prio_q+0x7e>
	if (thread_1->base.prio < thread_2->base.prio) {
   21008:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2100c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   21010:	42ae      	cmp	r6, r5
   21012:	db03      	blt.n	2101c <move_thread_to_end_of_prio_q+0x5c>
	return (node == list->tail) ? NULL : node->next;
   21014:	4298      	cmp	r0, r3
   21016:	d012      	beq.n	2103e <move_thread_to_end_of_prio_q+0x7e>
   21018:	681b      	ldr	r3, [r3, #0]
   2101a:	e7f4      	b.n	21006 <move_thread_to_end_of_prio_q+0x46>
	node->prev = successor->prev;
   2101c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2101e:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   21022:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   21024:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   21026:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   21028:	6890      	ldr	r0, [r2, #8]
   2102a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2102e:	7363      	strb	r3, [r4, #13]
   21030:	1b03      	subs	r3, r0, r4
   21032:	4258      	negs	r0, r3
}
   21034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   21038:	4158      	adcs	r0, r3
   2103a:	f7ff be1f 	b.w	20c7c <update_cache>
	node->prev = list->tail;
   2103e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   21042:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21044:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21046:	6314      	str	r4, [r2, #48]	; 0x30
}
   21048:	e7ed      	b.n	21026 <move_thread_to_end_of_prio_q+0x66>
   2104a:	bf00      	nop
   2104c:	20002b54 	.word	0x20002b54
   21050:	200025a8 	.word	0x200025a8
   21054:	0002a66a 	.word	0x0002a66a
   21058:	00027c9a 	.word	0x00027c9a
   2105c:	20002b28 	.word	0x20002b28

00021060 <z_time_slice>:
{
   21060:	b570      	push	{r4, r5, r6, lr}
   21062:	4604      	mov	r4, r0
	__asm__ volatile(
   21064:	f04f 0340 	mov.w	r3, #64	; 0x40
   21068:	f3ef 8511 	mrs	r5, BASEPRI
   2106c:	f383 8811 	msr	BASEPRI, r3
   21070:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21074:	4825      	ldr	r0, [pc, #148]	; (2110c <z_time_slice+0xac>)
   21076:	f000 feb1 	bl	21ddc <z_spin_lock_valid>
   2107a:	b940      	cbnz	r0, 2108e <z_time_slice+0x2e>
   2107c:	4924      	ldr	r1, [pc, #144]	; (21110 <z_time_slice+0xb0>)
   2107e:	4825      	ldr	r0, [pc, #148]	; (21114 <z_time_slice+0xb4>)
   21080:	2278      	movs	r2, #120	; 0x78
   21082:	f001 fe53 	bl	22d2c <printk>
   21086:	4822      	ldr	r0, [pc, #136]	; (21110 <z_time_slice+0xb0>)
   21088:	2178      	movs	r1, #120	; 0x78
   2108a:	f002 f8b2 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2108e:	481f      	ldr	r0, [pc, #124]	; (2110c <z_time_slice+0xac>)
   21090:	f000 fec2 	bl	21e18 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   21094:	4b20      	ldr	r3, [pc, #128]	; (21118 <z_time_slice+0xb8>)
   21096:	4a21      	ldr	r2, [pc, #132]	; (2111c <z_time_slice+0xbc>)
   21098:	6898      	ldr	r0, [r3, #8]
   2109a:	6811      	ldr	r1, [r2, #0]
   2109c:	4288      	cmp	r0, r1
   2109e:	4619      	mov	r1, r3
   210a0:	d113      	bne.n	210ca <z_time_slice+0x6a>
			z_reset_time_slice();
   210a2:	f7ff fc93 	bl	209cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210a6:	4819      	ldr	r0, [pc, #100]	; (2110c <z_time_slice+0xac>)
   210a8:	f000 fea6 	bl	21df8 <z_spin_unlock_valid>
   210ac:	b940      	cbnz	r0, 210c0 <z_time_slice+0x60>
   210ae:	4918      	ldr	r1, [pc, #96]	; (21110 <z_time_slice+0xb0>)
   210b0:	4818      	ldr	r0, [pc, #96]	; (21114 <z_time_slice+0xb4>)
   210b2:	22a3      	movs	r2, #163	; 0xa3
   210b4:	f001 fe3a 	bl	22d2c <printk>
   210b8:	4815      	ldr	r0, [pc, #84]	; (21110 <z_time_slice+0xb0>)
   210ba:	21a3      	movs	r1, #163	; 0xa3
   210bc:	f002 f899 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   210c0:	f385 8811 	msr	BASEPRI, r5
   210c4:	f3bf 8f6f 	isb	sy
}
   210c8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   210ca:	2600      	movs	r6, #0
   210cc:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   210ce:	4a14      	ldr	r2, [pc, #80]	; (21120 <z_time_slice+0xc0>)
   210d0:	6812      	ldr	r2, [r2, #0]
   210d2:	b1ba      	cbz	r2, 21104 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   210d4:	89c2      	ldrh	r2, [r0, #14]
   210d6:	2a7f      	cmp	r2, #127	; 0x7f
   210d8:	d814      	bhi.n	21104 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   210da:	7b42      	ldrb	r2, [r0, #13]
   210dc:	06d2      	lsls	r2, r2, #27
   210de:	d111      	bne.n	21104 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   210e0:	4a10      	ldr	r2, [pc, #64]	; (21124 <z_time_slice+0xc4>)
   210e2:	f990 600e 	ldrsb.w	r6, [r0, #14]
   210e6:	6812      	ldr	r2, [r2, #0]
   210e8:	4296      	cmp	r6, r2
   210ea:	db0b      	blt.n	21104 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   210ec:	4a0e      	ldr	r2, [pc, #56]	; (21128 <z_time_slice+0xc8>)
   210ee:	4290      	cmp	r0, r2
   210f0:	d008      	beq.n	21104 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   210f2:	695a      	ldr	r2, [r3, #20]
   210f4:	42a2      	cmp	r2, r4
   210f6:	dc02      	bgt.n	210fe <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   210f8:	f7ff ff62 	bl	20fc0 <move_thread_to_end_of_prio_q>
   210fc:	e7d1      	b.n	210a2 <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   210fe:	1b12      	subs	r2, r2, r4
   21100:	615a      	str	r2, [r3, #20]
   21102:	e7d0      	b.n	210a6 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   21104:	2300      	movs	r3, #0
   21106:	614b      	str	r3, [r1, #20]
   21108:	e7cd      	b.n	210a6 <z_time_slice+0x46>
   2110a:	bf00      	nop
   2110c:	20002b60 	.word	0x20002b60
   21110:	00027cd4 	.word	0x00027cd4
   21114:	00027c9a 	.word	0x00027c9a
   21118:	20002b28 	.word	0x20002b28
   2111c:	20002b5c 	.word	0x20002b5c
   21120:	20002b68 	.word	0x20002b68
   21124:	20002b64 	.word	0x20002b64
   21128:	200025a8 	.word	0x200025a8

0002112c <z_impl_k_thread_suspend>:
{
   2112c:	b570      	push	{r4, r5, r6, lr}
   2112e:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   21130:	3018      	adds	r0, #24
   21132:	f001 f883 	bl	2223c <z_abort_timeout>
	__asm__ volatile(
   21136:	f04f 0340 	mov.w	r3, #64	; 0x40
   2113a:	f3ef 8611 	mrs	r6, BASEPRI
   2113e:	f383 8811 	msr	BASEPRI, r3
   21142:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21146:	4820      	ldr	r0, [pc, #128]	; (211c8 <z_impl_k_thread_suspend+0x9c>)
   21148:	f000 fe48 	bl	21ddc <z_spin_lock_valid>
   2114c:	b940      	cbnz	r0, 21160 <z_impl_k_thread_suspend+0x34>
   2114e:	491f      	ldr	r1, [pc, #124]	; (211cc <z_impl_k_thread_suspend+0xa0>)
   21150:	481f      	ldr	r0, [pc, #124]	; (211d0 <z_impl_k_thread_suspend+0xa4>)
   21152:	2278      	movs	r2, #120	; 0x78
   21154:	f001 fdea 	bl	22d2c <printk>
   21158:	481c      	ldr	r0, [pc, #112]	; (211cc <z_impl_k_thread_suspend+0xa0>)
   2115a:	2178      	movs	r1, #120	; 0x78
   2115c:	f002 f849 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   21160:	4819      	ldr	r0, [pc, #100]	; (211c8 <z_impl_k_thread_suspend+0x9c>)
   21162:	f000 fe59 	bl	21e18 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21166:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2116a:	2b00      	cmp	r3, #0
   2116c:	da07      	bge.n	2117e <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2116e:	4819      	ldr	r0, [pc, #100]	; (211d4 <z_impl_k_thread_suspend+0xa8>)
   21170:	4621      	mov	r1, r4
   21172:	f7ff fd1d 	bl	20bb0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   21176:	7b63      	ldrb	r3, [r4, #13]
   21178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2117c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2117e:	4d16      	ldr	r5, [pc, #88]	; (211d8 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21180:	7b63      	ldrb	r3, [r4, #13]
   21182:	68a8      	ldr	r0, [r5, #8]
   21184:	f043 0310 	orr.w	r3, r3, #16
   21188:	7363      	strb	r3, [r4, #13]
   2118a:	1b03      	subs	r3, r0, r4
   2118c:	4258      	negs	r0, r3
   2118e:	4158      	adcs	r0, r3
   21190:	f7ff fd74 	bl	20c7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21194:	480c      	ldr	r0, [pc, #48]	; (211c8 <z_impl_k_thread_suspend+0x9c>)
   21196:	f000 fe2f 	bl	21df8 <z_spin_unlock_valid>
   2119a:	b940      	cbnz	r0, 211ae <z_impl_k_thread_suspend+0x82>
   2119c:	490b      	ldr	r1, [pc, #44]	; (211cc <z_impl_k_thread_suspend+0xa0>)
   2119e:	480c      	ldr	r0, [pc, #48]	; (211d0 <z_impl_k_thread_suspend+0xa4>)
   211a0:	22a3      	movs	r2, #163	; 0xa3
   211a2:	f001 fdc3 	bl	22d2c <printk>
   211a6:	4809      	ldr	r0, [pc, #36]	; (211cc <z_impl_k_thread_suspend+0xa0>)
   211a8:	21a3      	movs	r1, #163	; 0xa3
   211aa:	f002 f822 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   211ae:	f386 8811 	msr	BASEPRI, r6
   211b2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   211b6:	68ab      	ldr	r3, [r5, #8]
   211b8:	42a3      	cmp	r3, r4
   211ba:	d103      	bne.n	211c4 <z_impl_k_thread_suspend+0x98>
}
   211bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   211c0:	f005 bcca 	b.w	26b58 <z_reschedule_unlocked>
}
   211c4:	bd70      	pop	{r4, r5, r6, pc}
   211c6:	bf00      	nop
   211c8:	20002b60 	.word	0x20002b60
   211cc:	00027cd4 	.word	0x00027cd4
   211d0:	00027c9a 	.word	0x00027c9a
   211d4:	20002b54 	.word	0x20002b54
   211d8:	20002b28 	.word	0x20002b28

000211dc <z_thread_single_abort>:
{
   211dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   211e0:	7b03      	ldrb	r3, [r0, #12]
   211e2:	07dd      	lsls	r5, r3, #31
{
   211e4:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   211e6:	d50a      	bpl.n	211fe <z_thread_single_abort+0x22>
   211e8:	4979      	ldr	r1, [pc, #484]	; (213d0 <z_thread_single_abort+0x1f4>)
   211ea:	487a      	ldr	r0, [pc, #488]	; (213d4 <z_thread_single_abort+0x1f8>)
   211ec:	f240 220d 	movw	r2, #525	; 0x20d
   211f0:	f001 fd9c 	bl	22d2c <printk>
   211f4:	4876      	ldr	r0, [pc, #472]	; (213d0 <z_thread_single_abort+0x1f4>)
   211f6:	f240 210d 	movw	r1, #525	; 0x20d
   211fa:	f001 fffa 	bl	231f2 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   211fe:	4e76      	ldr	r6, [pc, #472]	; (213d8 <z_thread_single_abort+0x1fc>)
   21200:	68b3      	ldr	r3, [r6, #8]
   21202:	42a3      	cmp	r3, r4
   21204:	d10d      	bne.n	21222 <z_thread_single_abort+0x46>
   21206:	f3ef 8305 	mrs	r3, IPSR
   2120a:	b953      	cbnz	r3, 21222 <z_thread_single_abort+0x46>
   2120c:	4970      	ldr	r1, [pc, #448]	; (213d0 <z_thread_single_abort+0x1f4>)
   2120e:	4871      	ldr	r0, [pc, #452]	; (213d4 <z_thread_single_abort+0x1f8>)
   21210:	f240 220f 	movw	r2, #527	; 0x20f
   21214:	f001 fd8a 	bl	22d2c <printk>
   21218:	486d      	ldr	r0, [pc, #436]	; (213d0 <z_thread_single_abort+0x1f4>)
   2121a:	f240 210f 	movw	r1, #527	; 0x20f
   2121e:	f001 ffe8 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   21222:	f04f 0340 	mov.w	r3, #64	; 0x40
   21226:	f3ef 8511 	mrs	r5, BASEPRI
   2122a:	f383 8811 	msr	BASEPRI, r3
   2122e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21232:	486a      	ldr	r0, [pc, #424]	; (213dc <z_thread_single_abort+0x200>)
   21234:	f000 fdd2 	bl	21ddc <z_spin_lock_valid>
   21238:	b940      	cbnz	r0, 2124c <z_thread_single_abort+0x70>
   2123a:	4969      	ldr	r1, [pc, #420]	; (213e0 <z_thread_single_abort+0x204>)
   2123c:	4865      	ldr	r0, [pc, #404]	; (213d4 <z_thread_single_abort+0x1f8>)
   2123e:	2278      	movs	r2, #120	; 0x78
   21240:	f001 fd74 	bl	22d2c <printk>
   21244:	4866      	ldr	r0, [pc, #408]	; (213e0 <z_thread_single_abort+0x204>)
   21246:	2178      	movs	r1, #120	; 0x78
   21248:	f001 ffd3 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2124c:	4863      	ldr	r0, [pc, #396]	; (213dc <z_thread_single_abort+0x200>)
   2124e:	f000 fde3 	bl	21e18 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   21252:	7b63      	ldrb	r3, [r4, #13]
   21254:	f013 0f28 	tst.w	r3, #40	; 0x28
   21258:	d012      	beq.n	21280 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2125a:	4860      	ldr	r0, [pc, #384]	; (213dc <z_thread_single_abort+0x200>)
   2125c:	f000 fdcc 	bl	21df8 <z_spin_unlock_valid>
   21260:	b940      	cbnz	r0, 21274 <z_thread_single_abort+0x98>
   21262:	495f      	ldr	r1, [pc, #380]	; (213e0 <z_thread_single_abort+0x204>)
   21264:	485b      	ldr	r0, [pc, #364]	; (213d4 <z_thread_single_abort+0x1f8>)
   21266:	22a3      	movs	r2, #163	; 0xa3
   21268:	f001 fd60 	bl	22d2c <printk>
   2126c:	485c      	ldr	r0, [pc, #368]	; (213e0 <z_thread_single_abort+0x204>)
   2126e:	21a3      	movs	r1, #163	; 0xa3
   21270:	f001 ffbf 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   21274:	f385 8811 	msr	BASEPRI, r5
   21278:	f3bf 8f6f 	isb	sy
}
   2127c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   21280:	f043 0320 	orr.w	r3, r3, #32
   21284:	4855      	ldr	r0, [pc, #340]	; (213dc <z_thread_single_abort+0x200>)
   21286:	7363      	strb	r3, [r4, #13]
   21288:	f000 fdb6 	bl	21df8 <z_spin_unlock_valid>
   2128c:	b940      	cbnz	r0, 212a0 <z_thread_single_abort+0xc4>
   2128e:	4954      	ldr	r1, [pc, #336]	; (213e0 <z_thread_single_abort+0x204>)
   21290:	4850      	ldr	r0, [pc, #320]	; (213d4 <z_thread_single_abort+0x1f8>)
   21292:	22a3      	movs	r2, #163	; 0xa3
   21294:	f001 fd4a 	bl	22d2c <printk>
   21298:	4851      	ldr	r0, [pc, #324]	; (213e0 <z_thread_single_abort+0x204>)
   2129a:	21a3      	movs	r1, #163	; 0xa3
   2129c:	f001 ffa9 	bl	231f2 <assert_post_action>
   212a0:	f385 8811 	msr	BASEPRI, r5
   212a4:	f3bf 8f6f 	isb	sy
   212a8:	f104 0018 	add.w	r0, r4, #24
   212ac:	f000 ffc6 	bl	2223c <z_abort_timeout>
	__asm__ volatile(
   212b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   212b4:	f3ef 8711 	mrs	r7, BASEPRI
   212b8:	f383 8811 	msr	BASEPRI, r3
   212bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   212c0:	4846      	ldr	r0, [pc, #280]	; (213dc <z_thread_single_abort+0x200>)
   212c2:	f000 fd8b 	bl	21ddc <z_spin_lock_valid>
   212c6:	b940      	cbnz	r0, 212da <z_thread_single_abort+0xfe>
   212c8:	4945      	ldr	r1, [pc, #276]	; (213e0 <z_thread_single_abort+0x204>)
   212ca:	4842      	ldr	r0, [pc, #264]	; (213d4 <z_thread_single_abort+0x1f8>)
   212cc:	2278      	movs	r2, #120	; 0x78
   212ce:	f001 fd2d 	bl	22d2c <printk>
   212d2:	4843      	ldr	r0, [pc, #268]	; (213e0 <z_thread_single_abort+0x204>)
   212d4:	2178      	movs	r1, #120	; 0x78
   212d6:	f001 ff8c 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   212da:	4840      	ldr	r0, [pc, #256]	; (213dc <z_thread_single_abort+0x200>)
   212dc:	f000 fd9c 	bl	21e18 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   212e0:	7b63      	ldrb	r3, [r4, #13]
   212e2:	06d8      	lsls	r0, r3, #27
   212e4:	d116      	bne.n	21314 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   212e6:	69a2      	ldr	r2, [r4, #24]
   212e8:	b9a2      	cbnz	r2, 21314 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   212ea:	0619      	lsls	r1, r3, #24
   212ec:	d507      	bpl.n	212fe <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   212ee:	483d      	ldr	r0, [pc, #244]	; (213e4 <z_thread_single_abort+0x208>)
   212f0:	4621      	mov	r1, r4
   212f2:	f7ff fc5d 	bl	20bb0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   212f6:	7b63      	ldrb	r3, [r4, #13]
   212f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   212fc:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   212fe:	68b0      	ldr	r0, [r6, #8]
   21300:	1b02      	subs	r2, r0, r4
   21302:	4250      	negs	r0, r2
   21304:	4150      	adcs	r0, r2
   21306:	f7ff fcb9 	bl	20c7c <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2130a:	f104 0930 	add.w	r9, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   2130e:	f04f 0800 	mov.w	r8, #0
   21312:	e025      	b.n	21360 <z_thread_single_abort+0x184>
			if (z_is_thread_pending(thread)) {
   21314:	079b      	lsls	r3, r3, #30
   21316:	d5f8      	bpl.n	2130a <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   21318:	f104 0008 	add.w	r0, r4, #8
   2131c:	f7ff fb40 	bl	209a0 <pended_on.isra.0>
   21320:	4621      	mov	r1, r4
   21322:	f7ff fc45 	bl	20bb0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21326:	7b63      	ldrb	r3, [r4, #13]
   21328:	f023 0302 	bic.w	r3, r3, #2
   2132c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   2132e:	2300      	movs	r3, #0
   21330:	60a3      	str	r3, [r4, #8]
   21332:	e7ea      	b.n	2130a <z_thread_single_abort+0x12e>
   21334:	f105 0018 	add.w	r0, r5, #24
   21338:	f000 ff80 	bl	2223c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   2133c:	f105 0008 	add.w	r0, r5, #8
   21340:	f7ff fb2e 	bl	209a0 <pended_on.isra.0>
   21344:	4629      	mov	r1, r5
   21346:	f7ff fc33 	bl	20bb0 <z_priq_dumb_remove>
   2134a:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   2134c:	f8c5 8008 	str.w	r8, [r5, #8]
   21350:	f023 0302 	bic.w	r3, r3, #2
   21354:	736b      	strb	r3, [r5, #13]
   21356:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   2135a:	4628      	mov	r0, r5
   2135c:	f7ff fd24 	bl	20da8 <ready_thread>
	return list->head == list;
   21360:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21362:	454d      	cmp	r5, r9
   21364:	d001      	beq.n	2136a <z_thread_single_abort+0x18e>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   21366:	2d00      	cmp	r5, #0
   21368:	d1e4      	bne.n	21334 <z_thread_single_abort+0x158>
		if (z_is_idle_thread_object(_current)) {
   2136a:	68b2      	ldr	r2, [r6, #8]
   2136c:	4b1e      	ldr	r3, [pc, #120]	; (213e8 <z_thread_single_abort+0x20c>)
   2136e:	429a      	cmp	r2, r3
   21370:	d102      	bne.n	21378 <z_thread_single_abort+0x19c>
			update_cache(1);
   21372:	2001      	movs	r0, #1
   21374:	f7ff fc82 	bl	20c7c <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   21378:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   2137a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   2137c:	f043 0308 	orr.w	r3, r3, #8
   21380:	7363      	strb	r3, [r4, #13]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21382:	2200      	movs	r2, #0
   21384:	f104 0338 	add.w	r3, r4, #56	; 0x38
   21388:	f3bf 8f5b 	dmb	ish
   2138c:	e853 1f00 	ldrex	r1, [r3]
   21390:	e843 2000 	strex	r0, r2, [r3]
   21394:	2800      	cmp	r0, #0
   21396:	d1f9      	bne.n	2138c <z_thread_single_abort+0x1b0>
   21398:	f3bf 8f5b 	dmb	ish
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2139c:	480f      	ldr	r0, [pc, #60]	; (213dc <z_thread_single_abort+0x200>)
   2139e:	f000 fd2b 	bl	21df8 <z_spin_unlock_valid>
   213a2:	b940      	cbnz	r0, 213b6 <z_thread_single_abort+0x1da>
   213a4:	490e      	ldr	r1, [pc, #56]	; (213e0 <z_thread_single_abort+0x204>)
   213a6:	480b      	ldr	r0, [pc, #44]	; (213d4 <z_thread_single_abort+0x1f8>)
   213a8:	22a3      	movs	r2, #163	; 0xa3
   213aa:	f001 fcbf 	bl	22d2c <printk>
   213ae:	480c      	ldr	r0, [pc, #48]	; (213e0 <z_thread_single_abort+0x204>)
   213b0:	21a3      	movs	r1, #163	; 0xa3
   213b2:	f001 ff1e 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   213b6:	f387 8811 	msr	BASEPRI, r7
   213ba:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   213be:	2d00      	cmp	r5, #0
   213c0:	f43f af5c 	beq.w	2127c <z_thread_single_abort+0xa0>
		fn_abort(thread);
   213c4:	4620      	mov	r0, r4
   213c6:	462b      	mov	r3, r5
}
   213c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   213cc:	4718      	bx	r3
   213ce:	bf00      	nop
   213d0:	0002a66a 	.word	0x0002a66a
   213d4:	00027c9a 	.word	0x00027c9a
   213d8:	20002b28 	.word	0x20002b28
   213dc:	20002b60 	.word	0x20002b60
   213e0:	00027cd4 	.word	0x00027cd4
   213e4:	20002b54 	.word	0x20002b54
   213e8:	200025a8 	.word	0x200025a8

000213ec <unready_thread>:
{
   213ec:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   213ee:	f990 300d 	ldrsb.w	r3, [r0, #13]
   213f2:	2b00      	cmp	r3, #0
{
   213f4:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   213f6:	da07      	bge.n	21408 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   213f8:	4601      	mov	r1, r0
   213fa:	4808      	ldr	r0, [pc, #32]	; (2141c <unready_thread+0x30>)
   213fc:	f7ff fbd8 	bl	20bb0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   21400:	7b63      	ldrb	r3, [r4, #13]
   21402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21406:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   21408:	4b05      	ldr	r3, [pc, #20]	; (21420 <unready_thread+0x34>)
   2140a:	6898      	ldr	r0, [r3, #8]
   2140c:	1b03      	subs	r3, r0, r4
   2140e:	4258      	negs	r0, r3
}
   21410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   21414:	4158      	adcs	r0, r3
   21416:	f7ff bc31 	b.w	20c7c <update_cache>
   2141a:	bf00      	nop
   2141c:	20002b54 	.word	0x20002b54
   21420:	20002b28 	.word	0x20002b28

00021424 <add_to_waitq_locked>:
{
   21424:	b538      	push	{r3, r4, r5, lr}
   21426:	4604      	mov	r4, r0
   21428:	460d      	mov	r5, r1
	unready_thread(thread);
   2142a:	f7ff ffdf 	bl	213ec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2142e:	7b63      	ldrb	r3, [r4, #13]
   21430:	f043 0302 	orr.w	r3, r3, #2
   21434:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21436:	b335      	cbz	r5, 21486 <add_to_waitq_locked+0x62>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21438:	4b17      	ldr	r3, [pc, #92]	; (21498 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   2143a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2143c:	429c      	cmp	r4, r3
   2143e:	d10a      	bne.n	21456 <add_to_waitq_locked+0x32>
   21440:	4916      	ldr	r1, [pc, #88]	; (2149c <add_to_waitq_locked+0x78>)
   21442:	4817      	ldr	r0, [pc, #92]	; (214a0 <add_to_waitq_locked+0x7c>)
   21444:	f240 32c7 	movw	r2, #967	; 0x3c7
   21448:	f001 fc70 	bl	22d2c <printk>
   2144c:	4813      	ldr	r0, [pc, #76]	; (2149c <add_to_waitq_locked+0x78>)
   2144e:	f240 31c7 	movw	r1, #967	; 0x3c7
   21452:	f001 fece 	bl	231f2 <assert_post_action>
	return list->head == list;
   21456:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21458:	429d      	cmp	r5, r3
   2145a:	bf08      	it	eq
   2145c:	2300      	moveq	r3, #0
   2145e:	2b00      	cmp	r3, #0
   21460:	bf38      	it	cc
   21462:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21464:	b183      	cbz	r3, 21488 <add_to_waitq_locked+0x64>
	if (thread_1->base.prio < thread_2->base.prio) {
   21466:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2146a:	f993 200e 	ldrsb.w	r2, [r3, #14]
   2146e:	4291      	cmp	r1, r2
   21470:	db04      	blt.n	2147c <add_to_waitq_locked+0x58>
	return (node == list->tail) ? NULL : node->next;
   21472:	686a      	ldr	r2, [r5, #4]
   21474:	429a      	cmp	r2, r3
   21476:	d007      	beq.n	21488 <add_to_waitq_locked+0x64>
   21478:	681b      	ldr	r3, [r3, #0]
   2147a:	e7f3      	b.n	21464 <add_to_waitq_locked+0x40>
	node->prev = successor->prev;
   2147c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2147e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   21482:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21484:	605c      	str	r4, [r3, #4]
}
   21486:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   21488:	686b      	ldr	r3, [r5, #4]
   2148a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2148c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2148e:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   21490:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21492:	606c      	str	r4, [r5, #4]
   21494:	e7f7      	b.n	21486 <add_to_waitq_locked+0x62>
   21496:	bf00      	nop
   21498:	200025a8 	.word	0x200025a8
   2149c:	0002a66a 	.word	0x0002a66a
   214a0:	00027c9a 	.word	0x00027c9a

000214a4 <pend>:
{
   214a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214a8:	4604      	mov	r4, r0
   214aa:	460d      	mov	r5, r1
   214ac:	4616      	mov	r6, r2
   214ae:	461f      	mov	r7, r3
	__asm__ volatile(
   214b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   214b4:	f3ef 8811 	mrs	r8, BASEPRI
   214b8:	f383 8811 	msr	BASEPRI, r3
   214bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214c0:	481a      	ldr	r0, [pc, #104]	; (2152c <pend+0x88>)
   214c2:	f000 fc8b 	bl	21ddc <z_spin_lock_valid>
   214c6:	b940      	cbnz	r0, 214da <pend+0x36>
   214c8:	4919      	ldr	r1, [pc, #100]	; (21530 <pend+0x8c>)
   214ca:	481a      	ldr	r0, [pc, #104]	; (21534 <pend+0x90>)
   214cc:	2278      	movs	r2, #120	; 0x78
   214ce:	f001 fc2d 	bl	22d2c <printk>
   214d2:	4817      	ldr	r0, [pc, #92]	; (21530 <pend+0x8c>)
   214d4:	2178      	movs	r1, #120	; 0x78
   214d6:	f001 fe8c 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   214da:	4814      	ldr	r0, [pc, #80]	; (2152c <pend+0x88>)
   214dc:	f000 fc9c 	bl	21e18 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   214e0:	4620      	mov	r0, r4
   214e2:	4629      	mov	r1, r5
   214e4:	f7ff ff9e 	bl	21424 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214e8:	4810      	ldr	r0, [pc, #64]	; (2152c <pend+0x88>)
   214ea:	f000 fc85 	bl	21df8 <z_spin_unlock_valid>
   214ee:	b940      	cbnz	r0, 21502 <pend+0x5e>
   214f0:	490f      	ldr	r1, [pc, #60]	; (21530 <pend+0x8c>)
   214f2:	4810      	ldr	r0, [pc, #64]	; (21534 <pend+0x90>)
   214f4:	22a3      	movs	r2, #163	; 0xa3
   214f6:	f001 fc19 	bl	22d2c <printk>
   214fa:	480d      	ldr	r0, [pc, #52]	; (21530 <pend+0x8c>)
   214fc:	21a3      	movs	r1, #163	; 0xa3
   214fe:	f001 fe78 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   21502:	f388 8811 	msr	BASEPRI, r8
   21506:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2150a:	1c7b      	adds	r3, r7, #1
   2150c:	bf08      	it	eq
   2150e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   21512:	d008      	beq.n	21526 <pend+0x82>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   21514:	4632      	mov	r2, r6
   21516:	463b      	mov	r3, r7
   21518:	f104 0018 	add.w	r0, r4, #24
   2151c:	4906      	ldr	r1, [pc, #24]	; (21538 <pend+0x94>)
}
   2151e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21522:	f000 bdd1 	b.w	220c8 <z_add_timeout>
   21526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2152a:	bf00      	nop
   2152c:	20002b60 	.word	0x20002b60
   21530:	00027cd4 	.word	0x00027cd4
   21534:	00027c9a 	.word	0x00027c9a
   21538:	00020f39 	.word	0x00020f39

0002153c <z_pend_curr>:
{
   2153c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   2153e:	4b0e      	ldr	r3, [pc, #56]	; (21578 <z_pend_curr+0x3c>)
{
   21540:	4605      	mov	r5, r0
	pending_current = _current;
   21542:	6898      	ldr	r0, [r3, #8]
   21544:	4b0d      	ldr	r3, [pc, #52]	; (2157c <z_pend_curr+0x40>)
{
   21546:	460c      	mov	r4, r1
	pending_current = _current;
   21548:	6018      	str	r0, [r3, #0]
{
   2154a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2154c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21550:	f7ff ffa8 	bl	214a4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21554:	4628      	mov	r0, r5
   21556:	f000 fc4f 	bl	21df8 <z_spin_unlock_valid>
   2155a:	b940      	cbnz	r0, 2156e <z_pend_curr+0x32>
   2155c:	4908      	ldr	r1, [pc, #32]	; (21580 <z_pend_curr+0x44>)
   2155e:	4809      	ldr	r0, [pc, #36]	; (21584 <z_pend_curr+0x48>)
   21560:	22ba      	movs	r2, #186	; 0xba
   21562:	f001 fbe3 	bl	22d2c <printk>
   21566:	4806      	ldr	r0, [pc, #24]	; (21580 <z_pend_curr+0x44>)
   21568:	21ba      	movs	r1, #186	; 0xba
   2156a:	f001 fe42 	bl	231f2 <assert_post_action>
   2156e:	4620      	mov	r0, r4
}
   21570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21574:	f7f3 be70 	b.w	15258 <arch_swap>
   21578:	20002b28 	.word	0x20002b28
   2157c:	20002b5c 	.word	0x20002b5c
   21580:	00027cd4 	.word	0x00027cd4
   21584:	00027c9a 	.word	0x00027c9a

00021588 <z_set_prio>:
{
   21588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2158a:	4604      	mov	r4, r0
   2158c:	460e      	mov	r6, r1
	__asm__ volatile(
   2158e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21592:	f3ef 8711 	mrs	r7, BASEPRI
   21596:	f383 8811 	msr	BASEPRI, r3
   2159a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2159e:	4833      	ldr	r0, [pc, #204]	; (2166c <z_set_prio+0xe4>)
   215a0:	f000 fc1c 	bl	21ddc <z_spin_lock_valid>
   215a4:	b940      	cbnz	r0, 215b8 <z_set_prio+0x30>
   215a6:	4932      	ldr	r1, [pc, #200]	; (21670 <z_set_prio+0xe8>)
   215a8:	4832      	ldr	r0, [pc, #200]	; (21674 <z_set_prio+0xec>)
   215aa:	2278      	movs	r2, #120	; 0x78
   215ac:	f001 fbbe 	bl	22d2c <printk>
   215b0:	482f      	ldr	r0, [pc, #188]	; (21670 <z_set_prio+0xe8>)
   215b2:	2178      	movs	r1, #120	; 0x78
   215b4:	f001 fe1d 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   215b8:	482c      	ldr	r0, [pc, #176]	; (2166c <z_set_prio+0xe4>)
   215ba:	f000 fc2d 	bl	21e18 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   215be:	7b63      	ldrb	r3, [r4, #13]
   215c0:	06db      	lsls	r3, r3, #27
   215c2:	b276      	sxtb	r6, r6
   215c4:	d14f      	bne.n	21666 <z_set_prio+0xde>
	return !sys_dnode_is_linked(&t->node);
   215c6:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   215c8:	2d00      	cmp	r5, #0
   215ca:	d14c      	bne.n	21666 <z_set_prio+0xde>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   215cc:	482a      	ldr	r0, [pc, #168]	; (21678 <z_set_prio+0xf0>)
   215ce:	4621      	mov	r1, r4
   215d0:	f7ff faee 	bl	20bb0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   215d4:	4b29      	ldr	r3, [pc, #164]	; (2167c <z_set_prio+0xf4>)
				thread->base.prio = prio;
   215d6:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   215d8:	429c      	cmp	r4, r3
   215da:	d10a      	bne.n	215f2 <z_set_prio+0x6a>
   215dc:	4928      	ldr	r1, [pc, #160]	; (21680 <z_set_prio+0xf8>)
   215de:	4825      	ldr	r0, [pc, #148]	; (21674 <z_set_prio+0xec>)
   215e0:	f240 32c7 	movw	r2, #967	; 0x3c7
   215e4:	f001 fba2 	bl	22d2c <printk>
   215e8:	4825      	ldr	r0, [pc, #148]	; (21680 <z_set_prio+0xf8>)
   215ea:	f240 31c7 	movw	r1, #967	; 0x3c7
   215ee:	f001 fe00 	bl	231f2 <assert_post_action>
	return list->head == list;
   215f2:	4a24      	ldr	r2, [pc, #144]	; (21684 <z_set_prio+0xfc>)
   215f4:	4613      	mov	r3, r2
   215f6:	f853 0f2c 	ldr.w	r0, [r3, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   215fa:	4298      	cmp	r0, r3
   215fc:	bf18      	it	ne
   215fe:	4605      	movne	r5, r0
   21600:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21602:	6b10      	ldr	r0, [r2, #48]	; 0x30
   21604:	4619      	mov	r1, r3
   21606:	462b      	mov	r3, r5
   21608:	bf38      	it	cc
   2160a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2160c:	b32b      	cbz	r3, 2165a <z_set_prio+0xd2>
	if (thread_1->base.prio < thread_2->base.prio) {
   2160e:	f994 600e 	ldrsb.w	r6, [r4, #14]
   21612:	f993 500e 	ldrsb.w	r5, [r3, #14]
   21616:	42ae      	cmp	r6, r5
   21618:	db03      	blt.n	21622 <z_set_prio+0x9a>
	return (node == list->tail) ? NULL : node->next;
   2161a:	4298      	cmp	r0, r3
   2161c:	d01d      	beq.n	2165a <z_set_prio+0xd2>
   2161e:	681b      	ldr	r3, [r3, #0]
   21620:	e7f4      	b.n	2160c <z_set_prio+0x84>
	node->prev = successor->prev;
   21622:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21624:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   21628:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2162a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2162c:	2001      	movs	r0, #1
   2162e:	f7ff fb25 	bl	20c7c <update_cache>
   21632:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21634:	480d      	ldr	r0, [pc, #52]	; (2166c <z_set_prio+0xe4>)
   21636:	f000 fbdf 	bl	21df8 <z_spin_unlock_valid>
   2163a:	b940      	cbnz	r0, 2164e <z_set_prio+0xc6>
   2163c:	490c      	ldr	r1, [pc, #48]	; (21670 <z_set_prio+0xe8>)
   2163e:	480d      	ldr	r0, [pc, #52]	; (21674 <z_set_prio+0xec>)
   21640:	22a3      	movs	r2, #163	; 0xa3
   21642:	f001 fb73 	bl	22d2c <printk>
   21646:	480a      	ldr	r0, [pc, #40]	; (21670 <z_set_prio+0xe8>)
   21648:	21a3      	movs	r1, #163	; 0xa3
   2164a:	f001 fdd2 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   2164e:	f387 8811 	msr	BASEPRI, r7
   21652:	f3bf 8f6f 	isb	sy
}
   21656:	4620      	mov	r0, r4
   21658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   2165a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2165e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21660:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21662:	6314      	str	r4, [r2, #48]	; 0x30
}
   21664:	e7e2      	b.n	2162c <z_set_prio+0xa4>
			thread->base.prio = prio;
   21666:	73a6      	strb	r6, [r4, #14]
   21668:	2400      	movs	r4, #0
   2166a:	e7e3      	b.n	21634 <z_set_prio+0xac>
   2166c:	20002b60 	.word	0x20002b60
   21670:	00027cd4 	.word	0x00027cd4
   21674:	00027c9a 	.word	0x00027c9a
   21678:	20002b54 	.word	0x20002b54
   2167c:	200025a8 	.word	0x200025a8
   21680:	0002a66a 	.word	0x0002a66a
   21684:	20002b28 	.word	0x20002b28

00021688 <z_unpend_first_thread>:
{
   21688:	b538      	push	{r3, r4, r5, lr}
   2168a:	4604      	mov	r4, r0
	__asm__ volatile(
   2168c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21690:	f3ef 8511 	mrs	r5, BASEPRI
   21694:	f383 8811 	msr	BASEPRI, r3
   21698:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2169c:	482b      	ldr	r0, [pc, #172]	; (2174c <z_unpend_first_thread+0xc4>)
   2169e:	f000 fb9d 	bl	21ddc <z_spin_lock_valid>
   216a2:	b940      	cbnz	r0, 216b6 <z_unpend_first_thread+0x2e>
   216a4:	492a      	ldr	r1, [pc, #168]	; (21750 <z_unpend_first_thread+0xc8>)
   216a6:	482b      	ldr	r0, [pc, #172]	; (21754 <z_unpend_first_thread+0xcc>)
   216a8:	2278      	movs	r2, #120	; 0x78
   216aa:	f001 fb3f 	bl	22d2c <printk>
   216ae:	4828      	ldr	r0, [pc, #160]	; (21750 <z_unpend_first_thread+0xc8>)
   216b0:	2178      	movs	r1, #120	; 0x78
   216b2:	f001 fd9e 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   216b6:	4825      	ldr	r0, [pc, #148]	; (2174c <z_unpend_first_thread+0xc4>)
   216b8:	f000 fbae 	bl	21e18 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   216bc:	4620      	mov	r0, r4
   216be:	f005 fa64 	bl	26b8a <z_priq_dumb_best>
   216c2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216c4:	4821      	ldr	r0, [pc, #132]	; (2174c <z_unpend_first_thread+0xc4>)
   216c6:	f000 fb97 	bl	21df8 <z_spin_unlock_valid>
   216ca:	b940      	cbnz	r0, 216de <z_unpend_first_thread+0x56>
   216cc:	4920      	ldr	r1, [pc, #128]	; (21750 <z_unpend_first_thread+0xc8>)
   216ce:	4821      	ldr	r0, [pc, #132]	; (21754 <z_unpend_first_thread+0xcc>)
   216d0:	22a3      	movs	r2, #163	; 0xa3
   216d2:	f001 fb2b 	bl	22d2c <printk>
   216d6:	481e      	ldr	r0, [pc, #120]	; (21750 <z_unpend_first_thread+0xc8>)
   216d8:	21a3      	movs	r1, #163	; 0xa3
   216da:	f001 fd8a 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   216de:	f385 8811 	msr	BASEPRI, r5
   216e2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   216e6:	b37c      	cbz	r4, 21748 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   216e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   216ec:	f3ef 8511 	mrs	r5, BASEPRI
   216f0:	f383 8811 	msr	BASEPRI, r3
   216f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216f8:	4814      	ldr	r0, [pc, #80]	; (2174c <z_unpend_first_thread+0xc4>)
   216fa:	f000 fb6f 	bl	21ddc <z_spin_lock_valid>
   216fe:	b940      	cbnz	r0, 21712 <z_unpend_first_thread+0x8a>
   21700:	4913      	ldr	r1, [pc, #76]	; (21750 <z_unpend_first_thread+0xc8>)
   21702:	4814      	ldr	r0, [pc, #80]	; (21754 <z_unpend_first_thread+0xcc>)
   21704:	2278      	movs	r2, #120	; 0x78
   21706:	f001 fb11 	bl	22d2c <printk>
   2170a:	4811      	ldr	r0, [pc, #68]	; (21750 <z_unpend_first_thread+0xc8>)
   2170c:	2178      	movs	r1, #120	; 0x78
   2170e:	f001 fd70 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   21712:	480e      	ldr	r0, [pc, #56]	; (2174c <z_unpend_first_thread+0xc4>)
   21714:	f000 fb80 	bl	21e18 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   21718:	4620      	mov	r0, r4
   2171a:	f005 fa27 	bl	26b6c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2171e:	480b      	ldr	r0, [pc, #44]	; (2174c <z_unpend_first_thread+0xc4>)
   21720:	f000 fb6a 	bl	21df8 <z_spin_unlock_valid>
   21724:	b940      	cbnz	r0, 21738 <z_unpend_first_thread+0xb0>
   21726:	490a      	ldr	r1, [pc, #40]	; (21750 <z_unpend_first_thread+0xc8>)
   21728:	480a      	ldr	r0, [pc, #40]	; (21754 <z_unpend_first_thread+0xcc>)
   2172a:	22a3      	movs	r2, #163	; 0xa3
   2172c:	f001 fafe 	bl	22d2c <printk>
   21730:	4807      	ldr	r0, [pc, #28]	; (21750 <z_unpend_first_thread+0xc8>)
   21732:	21a3      	movs	r1, #163	; 0xa3
   21734:	f001 fd5d 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   21738:	f385 8811 	msr	BASEPRI, r5
   2173c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   21740:	f104 0018 	add.w	r0, r4, #24
   21744:	f000 fd7a 	bl	2223c <z_abort_timeout>
}
   21748:	4620      	mov	r0, r4
   2174a:	bd38      	pop	{r3, r4, r5, pc}
   2174c:	20002b60 	.word	0x20002b60
   21750:	00027cd4 	.word	0x00027cd4
   21754:	00027c9a 	.word	0x00027c9a

00021758 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21758:	4b04      	ldr	r3, [pc, #16]	; (2176c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2175a:	2100      	movs	r1, #0
   2175c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   21760:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   21764:	4608      	mov	r0, r1
   21766:	f7ff b947 	b.w	209f8 <k_sched_time_slice_set>
   2176a:	bf00      	nop
   2176c:	20002b28 	.word	0x20002b28

00021770 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   21770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21772:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21776:	b153      	cbz	r3, 2178e <z_impl_k_yield+0x1e>
   21778:	493f      	ldr	r1, [pc, #252]	; (21878 <z_impl_k_yield+0x108>)
   2177a:	4840      	ldr	r0, [pc, #256]	; (2187c <z_impl_k_yield+0x10c>)
   2177c:	f240 42d2 	movw	r2, #1234	; 0x4d2
   21780:	f001 fad4 	bl	22d2c <printk>
   21784:	483c      	ldr	r0, [pc, #240]	; (21878 <z_impl_k_yield+0x108>)
   21786:	f240 41d2 	movw	r1, #1234	; 0x4d2
   2178a:	f001 fd32 	bl	231f2 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   2178e:	4c3c      	ldr	r4, [pc, #240]	; (21880 <z_impl_k_yield+0x110>)
   21790:	4e3c      	ldr	r6, [pc, #240]	; (21884 <z_impl_k_yield+0x114>)
   21792:	68a2      	ldr	r2, [r4, #8]
   21794:	42b2      	cmp	r2, r6
   21796:	d05c      	beq.n	21852 <z_impl_k_yield+0xe2>
	__asm__ volatile(
   21798:	f04f 0340 	mov.w	r3, #64	; 0x40
   2179c:	f3ef 8711 	mrs	r7, BASEPRI
   217a0:	f383 8811 	msr	BASEPRI, r3
   217a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217a8:	4837      	ldr	r0, [pc, #220]	; (21888 <z_impl_k_yield+0x118>)
   217aa:	f000 fb17 	bl	21ddc <z_spin_lock_valid>
   217ae:	b940      	cbnz	r0, 217c2 <z_impl_k_yield+0x52>
   217b0:	4936      	ldr	r1, [pc, #216]	; (2188c <z_impl_k_yield+0x11c>)
   217b2:	4832      	ldr	r0, [pc, #200]	; (2187c <z_impl_k_yield+0x10c>)
   217b4:	2278      	movs	r2, #120	; 0x78
   217b6:	f001 fab9 	bl	22d2c <printk>
   217ba:	4834      	ldr	r0, [pc, #208]	; (2188c <z_impl_k_yield+0x11c>)
   217bc:	2178      	movs	r1, #120	; 0x78
   217be:	f001 fd18 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   217c2:	4831      	ldr	r0, [pc, #196]	; (21888 <z_impl_k_yield+0x118>)
   217c4:	f000 fb28 	bl	21e18 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   217c8:	68a1      	ldr	r1, [r4, #8]
   217ca:	4831      	ldr	r0, [pc, #196]	; (21890 <z_impl_k_yield+0x120>)
   217cc:	f7ff f9f0 	bl	20bb0 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   217d0:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   217d2:	42b5      	cmp	r5, r6
   217d4:	d10a      	bne.n	217ec <z_impl_k_yield+0x7c>
   217d6:	4928      	ldr	r1, [pc, #160]	; (21878 <z_impl_k_yield+0x108>)
   217d8:	4828      	ldr	r0, [pc, #160]	; (2187c <z_impl_k_yield+0x10c>)
   217da:	f240 32c7 	movw	r2, #967	; 0x3c7
   217de:	f001 faa5 	bl	22d2c <printk>
   217e2:	4825      	ldr	r0, [pc, #148]	; (21878 <z_impl_k_yield+0x108>)
   217e4:	f240 31c7 	movw	r1, #967	; 0x3c7
   217e8:	f001 fd03 	bl	231f2 <assert_post_action>
	return list->head == list;
   217ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217ee:	4928      	ldr	r1, [pc, #160]	; (21890 <z_impl_k_yield+0x120>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   217f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217f2:	428b      	cmp	r3, r1
   217f4:	bf08      	it	eq
   217f6:	2300      	moveq	r3, #0
   217f8:	2b00      	cmp	r3, #0
   217fa:	bf38      	it	cc
   217fc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217fe:	2b00      	cmp	r3, #0
   21800:	d033      	beq.n	2186a <z_impl_k_yield+0xfa>
	if (thread_1->base.prio < thread_2->base.prio) {
   21802:	f995 600e 	ldrsb.w	r6, [r5, #14]
   21806:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2180a:	4286      	cmp	r6, r0
   2180c:	db03      	blt.n	21816 <z_impl_k_yield+0xa6>
	return (node == list->tail) ? NULL : node->next;
   2180e:	4293      	cmp	r3, r2
   21810:	d02b      	beq.n	2186a <z_impl_k_yield+0xfa>
   21812:	681b      	ldr	r3, [r3, #0]
   21814:	e7f3      	b.n	217fe <z_impl_k_yield+0x8e>
	node->prev = successor->prev;
   21816:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21818:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   2181c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2181e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   21820:	68a2      	ldr	r2, [r4, #8]
	thread->base.thread_state |= states;
   21822:	7b53      	ldrb	r3, [r2, #13]
   21824:	f063 037f 	orn	r3, r3, #127	; 0x7f
			update_cache(1);
   21828:	2001      	movs	r0, #1
   2182a:	7353      	strb	r3, [r2, #13]
   2182c:	f7ff fa26 	bl	20c7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21830:	4815      	ldr	r0, [pc, #84]	; (21888 <z_impl_k_yield+0x118>)
   21832:	f000 fae1 	bl	21df8 <z_spin_unlock_valid>
   21836:	b940      	cbnz	r0, 2184a <z_impl_k_yield+0xda>
   21838:	4914      	ldr	r1, [pc, #80]	; (2188c <z_impl_k_yield+0x11c>)
   2183a:	4810      	ldr	r0, [pc, #64]	; (2187c <z_impl_k_yield+0x10c>)
   2183c:	22a3      	movs	r2, #163	; 0xa3
   2183e:	f001 fa75 	bl	22d2c <printk>
   21842:	4812      	ldr	r0, [pc, #72]	; (2188c <z_impl_k_yield+0x11c>)
   21844:	21a3      	movs	r1, #163	; 0xa3
   21846:	f001 fcd4 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   2184a:	f387 8811 	msr	BASEPRI, r7
   2184e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21852:	f04f 0340 	mov.w	r3, #64	; 0x40
   21856:	f3ef 8011 	mrs	r0, BASEPRI
   2185a:	f383 8811 	msr	BASEPRI, r3
   2185e:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   21862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21866:	f7f3 bcf7 	b.w	15258 <arch_swap>
	node->prev = list->tail;
   2186a:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   2186e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21870:	601d      	str	r5, [r3, #0]
	list->tail = node;
   21872:	6325      	str	r5, [r4, #48]	; 0x30
}
   21874:	e7d4      	b.n	21820 <z_impl_k_yield+0xb0>
   21876:	bf00      	nop
   21878:	0002a66a 	.word	0x0002a66a
   2187c:	00027c9a 	.word	0x00027c9a
   21880:	20002b28 	.word	0x20002b28
   21884:	200025a8 	.word	0x200025a8
   21888:	20002b60 	.word	0x20002b60
   2188c:	00027cd4 	.word	0x00027cd4
   21890:	20002b54 	.word	0x20002b54

00021894 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   21894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21898:	4604      	mov	r4, r0
   2189a:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   2189e:	b153      	cbz	r3, 218b6 <z_tick_sleep+0x22>
   218a0:	4932      	ldr	r1, [pc, #200]	; (2196c <z_tick_sleep+0xd8>)
   218a2:	4833      	ldr	r0, [pc, #204]	; (21970 <z_tick_sleep+0xdc>)
   218a4:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
   218a8:	f001 fa40 	bl	22d2c <printk>
   218ac:	482f      	ldr	r0, [pc, #188]	; (2196c <z_tick_sleep+0xd8>)
   218ae:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
   218b2:	f001 fc9e 	bl	231f2 <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   218b6:	b924      	cbnz	r4, 218c2 <z_tick_sleep+0x2e>
	z_impl_k_yield();
   218b8:	f7ff ff5a 	bl	21770 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   218bc:	4620      	mov	r0, r4
   218be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   218c2:	f005 fa06 	bl	26cd2 <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
   218c6:	4626      	mov	r6, r4
   218c8:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
   218ca:	4404      	add	r4, r0
   218cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   218d0:	f3ef 8811 	mrs	r8, BASEPRI
   218d4:	f383 8811 	msr	BASEPRI, r3
   218d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218dc:	4825      	ldr	r0, [pc, #148]	; (21974 <z_tick_sleep+0xe0>)
   218de:	f000 fa7d 	bl	21ddc <z_spin_lock_valid>
   218e2:	b940      	cbnz	r0, 218f6 <z_tick_sleep+0x62>
   218e4:	4924      	ldr	r1, [pc, #144]	; (21978 <z_tick_sleep+0xe4>)
   218e6:	4822      	ldr	r0, [pc, #136]	; (21970 <z_tick_sleep+0xdc>)
   218e8:	2278      	movs	r2, #120	; 0x78
   218ea:	f001 fa1f 	bl	22d2c <printk>
   218ee:	4822      	ldr	r0, [pc, #136]	; (21978 <z_tick_sleep+0xe4>)
   218f0:	2178      	movs	r1, #120	; 0x78
   218f2:	f001 fc7e 	bl	231f2 <assert_post_action>
	pending_current = _current;
   218f6:	4d21      	ldr	r5, [pc, #132]	; (2197c <z_tick_sleep+0xe8>)
	z_spin_lock_set_owner(l);
   218f8:	481e      	ldr	r0, [pc, #120]	; (21974 <z_tick_sleep+0xe0>)
   218fa:	f000 fa8d 	bl	21e18 <z_spin_lock_set_owner>
   218fe:	4b20      	ldr	r3, [pc, #128]	; (21980 <z_tick_sleep+0xec>)
   21900:	68a8      	ldr	r0, [r5, #8]
   21902:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21904:	f7ff fd72 	bl	213ec <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21908:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2190a:	491e      	ldr	r1, [pc, #120]	; (21984 <z_tick_sleep+0xf0>)
   2190c:	4632      	mov	r2, r6
   2190e:	463b      	mov	r3, r7
   21910:	3018      	adds	r0, #24
   21912:	f000 fbd9 	bl	220c8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21916:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21918:	4816      	ldr	r0, [pc, #88]	; (21974 <z_tick_sleep+0xe0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2191a:	7b53      	ldrb	r3, [r2, #13]
   2191c:	f043 0310 	orr.w	r3, r3, #16
   21920:	7353      	strb	r3, [r2, #13]
   21922:	f000 fa69 	bl	21df8 <z_spin_unlock_valid>
   21926:	b940      	cbnz	r0, 2193a <z_tick_sleep+0xa6>
   21928:	4913      	ldr	r1, [pc, #76]	; (21978 <z_tick_sleep+0xe4>)
   2192a:	4811      	ldr	r0, [pc, #68]	; (21970 <z_tick_sleep+0xdc>)
   2192c:	22ba      	movs	r2, #186	; 0xba
   2192e:	f001 f9fd 	bl	22d2c <printk>
   21932:	4811      	ldr	r0, [pc, #68]	; (21978 <z_tick_sleep+0xe4>)
   21934:	21ba      	movs	r1, #186	; 0xba
   21936:	f001 fc5c 	bl	231f2 <assert_post_action>
   2193a:	4640      	mov	r0, r8
   2193c:	f7f3 fc8c 	bl	15258 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21940:	68ab      	ldr	r3, [r5, #8]
   21942:	7b5b      	ldrb	r3, [r3, #13]
   21944:	06db      	lsls	r3, r3, #27
   21946:	d50a      	bpl.n	2195e <z_tick_sleep+0xca>
   21948:	4908      	ldr	r1, [pc, #32]	; (2196c <z_tick_sleep+0xd8>)
   2194a:	4809      	ldr	r0, [pc, #36]	; (21970 <z_tick_sleep+0xdc>)
   2194c:	f44f 62a2 	mov.w	r2, #1296	; 0x510
   21950:	f001 f9ec 	bl	22d2c <printk>
   21954:	4805      	ldr	r0, [pc, #20]	; (2196c <z_tick_sleep+0xd8>)
   21956:	f44f 61a2 	mov.w	r1, #1296	; 0x510
   2195a:	f001 fc4a 	bl	231f2 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   2195e:	f005 f9b8 	bl	26cd2 <z_tick_get_32>
   21962:	1a24      	subs	r4, r4, r0
   21964:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   21968:	e7a8      	b.n	218bc <z_tick_sleep+0x28>
   2196a:	bf00      	nop
   2196c:	0002a66a 	.word	0x0002a66a
   21970:	00027c9a 	.word	0x00027c9a
   21974:	20002b60 	.word	0x20002b60
   21978:	00027cd4 	.word	0x00027cd4
   2197c:	20002b28 	.word	0x20002b28
   21980:	20002b5c 	.word	0x20002b5c
   21984:	00020f39 	.word	0x00020f39

00021988 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21988:	b538      	push	{r3, r4, r5, lr}
   2198a:	4604      	mov	r4, r0
   2198c:	460d      	mov	r5, r1
   2198e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21992:	b153      	cbz	r3, 219aa <z_impl_k_sleep+0x22>
   21994:	4910      	ldr	r1, [pc, #64]	; (219d8 <z_impl_k_sleep+0x50>)
   21996:	4811      	ldr	r0, [pc, #68]	; (219dc <z_impl_k_sleep+0x54>)
   21998:	f240 521f 	movw	r2, #1311	; 0x51f
   2199c:	f001 f9c6 	bl	22d2c <printk>
   219a0:	480d      	ldr	r0, [pc, #52]	; (219d8 <z_impl_k_sleep+0x50>)
   219a2:	f240 511f 	movw	r1, #1311	; 0x51f
   219a6:	f001 fc24 	bl	231f2 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   219aa:	3501      	adds	r5, #1
   219ac:	bf08      	it	eq
   219ae:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   219b2:	d106      	bne.n	219c2 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   219b4:	4b0a      	ldr	r3, [pc, #40]	; (219e0 <z_impl_k_sleep+0x58>)
   219b6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   219b8:	f7ff fbb8 	bl	2112c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   219bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   219c0:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   219c2:	4620      	mov	r0, r4
   219c4:	f7ff ff66 	bl	21894 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
   219c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   219cc:	fb80 3403 	smull	r3, r4, r0, r3
   219d0:	0bd8      	lsrs	r0, r3, #15
   219d2:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   219d6:	e7f3      	b.n	219c0 <z_impl_k_sleep+0x38>
   219d8:	0002a66a 	.word	0x0002a66a
   219dc:	00027c9a 	.word	0x00027c9a
   219e0:	20002b28 	.word	0x20002b28

000219e4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   219e4:	4b01      	ldr	r3, [pc, #4]	; (219ec <z_impl_k_current_get+0x8>)
   219e6:	6898      	ldr	r0, [r3, #8]
   219e8:	4770      	bx	lr
   219ea:	bf00      	nop
   219ec:	20002b28 	.word	0x20002b28

000219f0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   219f0:	b538      	push	{r3, r4, r5, lr}
   219f2:	4604      	mov	r4, r0
   219f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   219f8:	f3ef 8511 	mrs	r5, BASEPRI
   219fc:	f383 8811 	msr	BASEPRI, r3
   21a00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a04:	4815      	ldr	r0, [pc, #84]	; (21a5c <z_impl_k_sem_give+0x6c>)
   21a06:	f000 f9e9 	bl	21ddc <z_spin_lock_valid>
   21a0a:	b940      	cbnz	r0, 21a1e <z_impl_k_sem_give+0x2e>
   21a0c:	4914      	ldr	r1, [pc, #80]	; (21a60 <z_impl_k_sem_give+0x70>)
   21a0e:	4815      	ldr	r0, [pc, #84]	; (21a64 <z_impl_k_sem_give+0x74>)
   21a10:	2278      	movs	r2, #120	; 0x78
   21a12:	f001 f98b 	bl	22d2c <printk>
   21a16:	4812      	ldr	r0, [pc, #72]	; (21a60 <z_impl_k_sem_give+0x70>)
   21a18:	2178      	movs	r1, #120	; 0x78
   21a1a:	f001 fbea 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a1e:	480f      	ldr	r0, [pc, #60]	; (21a5c <z_impl_k_sem_give+0x6c>)
   21a20:	f000 f9fa 	bl	21e18 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   21a24:	4620      	mov	r0, r4
   21a26:	f7ff fe2f 	bl	21688 <z_unpend_first_thread>

	if (thread != NULL) {
   21a2a:	b150      	cbz	r0, 21a42 <z_impl_k_sem_give+0x52>
   21a2c:	2200      	movs	r2, #0
   21a2e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21a32:	f7ff fa09 	bl	20e48 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21a36:	4629      	mov	r1, r5
   21a38:	4808      	ldr	r0, [pc, #32]	; (21a5c <z_impl_k_sem_give+0x6c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   21a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21a3e:	f7ff b829 	b.w	20a94 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21a42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21a46:	429a      	cmp	r2, r3
   21a48:	bf18      	it	ne
   21a4a:	3301      	addne	r3, #1
   21a4c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21a4e:	2102      	movs	r1, #2
   21a50:	f104 0010 	add.w	r0, r4, #16
   21a54:	f005 f9b7 	bl	26dc6 <z_handle_obj_poll_events>
}
   21a58:	e7ed      	b.n	21a36 <z_impl_k_sem_give+0x46>
   21a5a:	bf00      	nop
   21a5c:	20002b6c 	.word	0x20002b6c
   21a60:	00027cd4 	.word	0x00027cd4
   21a64:	00027c9a 	.word	0x00027c9a

00021a68 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21a6a:	4604      	mov	r4, r0
   21a6c:	4616      	mov	r6, r2
   21a6e:	461f      	mov	r7, r3
   21a70:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   21a74:	b15b      	cbz	r3, 21a8e <z_impl_k_sem_take+0x26>
   21a76:	ea56 0307 	orrs.w	r3, r6, r7
   21a7a:	d008      	beq.n	21a8e <z_impl_k_sem_take+0x26>
   21a7c:	492b      	ldr	r1, [pc, #172]	; (21b2c <z_impl_k_sem_take+0xc4>)
   21a7e:	482c      	ldr	r0, [pc, #176]	; (21b30 <z_impl_k_sem_take+0xc8>)
   21a80:	228c      	movs	r2, #140	; 0x8c
   21a82:	f001 f953 	bl	22d2c <printk>
   21a86:	4829      	ldr	r0, [pc, #164]	; (21b2c <z_impl_k_sem_take+0xc4>)
   21a88:	218c      	movs	r1, #140	; 0x8c
   21a8a:	f001 fbb2 	bl	231f2 <assert_post_action>
   21a8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a92:	f3ef 8511 	mrs	r5, BASEPRI
   21a96:	f383 8811 	msr	BASEPRI, r3
   21a9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a9e:	4825      	ldr	r0, [pc, #148]	; (21b34 <z_impl_k_sem_take+0xcc>)
   21aa0:	f000 f99c 	bl	21ddc <z_spin_lock_valid>
   21aa4:	b940      	cbnz	r0, 21ab8 <z_impl_k_sem_take+0x50>
   21aa6:	4924      	ldr	r1, [pc, #144]	; (21b38 <z_impl_k_sem_take+0xd0>)
   21aa8:	4821      	ldr	r0, [pc, #132]	; (21b30 <z_impl_k_sem_take+0xc8>)
   21aaa:	2278      	movs	r2, #120	; 0x78
   21aac:	f001 f93e 	bl	22d2c <printk>
   21ab0:	4821      	ldr	r0, [pc, #132]	; (21b38 <z_impl_k_sem_take+0xd0>)
   21ab2:	2178      	movs	r1, #120	; 0x78
   21ab4:	f001 fb9d 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ab8:	481e      	ldr	r0, [pc, #120]	; (21b34 <z_impl_k_sem_take+0xcc>)
   21aba:	f000 f9ad 	bl	21e18 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   21abe:	68a3      	ldr	r3, [r4, #8]
   21ac0:	b1ab      	cbz	r3, 21aee <z_impl_k_sem_take+0x86>
		sem->count--;
   21ac2:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ac4:	481b      	ldr	r0, [pc, #108]	; (21b34 <z_impl_k_sem_take+0xcc>)
   21ac6:	60a3      	str	r3, [r4, #8]
   21ac8:	f000 f996 	bl	21df8 <z_spin_unlock_valid>
   21acc:	b940      	cbnz	r0, 21ae0 <z_impl_k_sem_take+0x78>
   21ace:	491a      	ldr	r1, [pc, #104]	; (21b38 <z_impl_k_sem_take+0xd0>)
   21ad0:	4817      	ldr	r0, [pc, #92]	; (21b30 <z_impl_k_sem_take+0xc8>)
   21ad2:	22a3      	movs	r2, #163	; 0xa3
   21ad4:	f001 f92a 	bl	22d2c <printk>
   21ad8:	4817      	ldr	r0, [pc, #92]	; (21b38 <z_impl_k_sem_take+0xd0>)
   21ada:	21a3      	movs	r1, #163	; 0xa3
   21adc:	f001 fb89 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   21ae0:	f385 8811 	msr	BASEPRI, r5
   21ae4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21ae8:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   21aea:	b003      	add	sp, #12
   21aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21aee:	ea56 0307 	orrs.w	r3, r6, r7
   21af2:	d113      	bne.n	21b1c <z_impl_k_sem_take+0xb4>
   21af4:	480f      	ldr	r0, [pc, #60]	; (21b34 <z_impl_k_sem_take+0xcc>)
   21af6:	f000 f97f 	bl	21df8 <z_spin_unlock_valid>
   21afa:	b940      	cbnz	r0, 21b0e <z_impl_k_sem_take+0xa6>
   21afc:	490e      	ldr	r1, [pc, #56]	; (21b38 <z_impl_k_sem_take+0xd0>)
   21afe:	480c      	ldr	r0, [pc, #48]	; (21b30 <z_impl_k_sem_take+0xc8>)
   21b00:	22a3      	movs	r2, #163	; 0xa3
   21b02:	f001 f913 	bl	22d2c <printk>
   21b06:	480c      	ldr	r0, [pc, #48]	; (21b38 <z_impl_k_sem_take+0xd0>)
   21b08:	21a3      	movs	r1, #163	; 0xa3
   21b0a:	f001 fb72 	bl	231f2 <assert_post_action>
   21b0e:	f385 8811 	msr	BASEPRI, r5
   21b12:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21b16:	f06f 000f 	mvn.w	r0, #15
   21b1a:	e7e6      	b.n	21aea <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21b1c:	e9cd 6700 	strd	r6, r7, [sp]
   21b20:	4622      	mov	r2, r4
   21b22:	4629      	mov	r1, r5
   21b24:	4803      	ldr	r0, [pc, #12]	; (21b34 <z_impl_k_sem_take+0xcc>)
   21b26:	f7ff fd09 	bl	2153c <z_pend_curr>
	return ret;
   21b2a:	e7de      	b.n	21aea <z_impl_k_sem_take+0x82>
   21b2c:	0002a68c 	.word	0x0002a68c
   21b30:	00027c9a 	.word	0x00027c9a
   21b34:	20002b6c 	.word	0x20002b6c
   21b38:	00027cd4 	.word	0x00027cd4

00021b3c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21b3c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   21b3e:	4c08      	ldr	r4, [pc, #32]	; (21b60 <k_sys_work_q_init+0x24>)
   21b40:	4908      	ldr	r1, [pc, #32]	; (21b64 <k_sys_work_q_init+0x28>)
   21b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21b4a:	4620      	mov	r0, r4
   21b4c:	f000 f998 	bl	21e80 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   21b50:	4905      	ldr	r1, [pc, #20]	; (21b68 <k_sys_work_q_init+0x2c>)
   21b52:	f104 0020 	add.w	r0, r4, #32
   21b56:	f005 f84c 	bl	26bf2 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   21b5a:	2000      	movs	r0, #0
   21b5c:	bd10      	pop	{r4, pc}
   21b5e:	bf00      	nop
   21b60:	200026c8 	.word	0x200026c8
   21b64:	20005ec0 	.word	0x20005ec0
   21b68:	0002a6ac 	.word	0x0002a6ac

00021b6c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21b70:	4699      	mov	r9, r3
   21b72:	b085      	sub	sp, #20
   21b74:	4b31      	ldr	r3, [pc, #196]	; (21c3c <z_setup_new_thread+0xd0>)
   21b76:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   21b78:	f3bf 8f5b 	dmb	ish
   21b7c:	4616      	mov	r6, r2
   21b7e:	4604      	mov	r4, r0
   21b80:	460f      	mov	r7, r1
   21b82:	f100 0238 	add.w	r2, r0, #56	; 0x38
   21b86:	e852 1f00 	ldrex	r1, [r2]
   21b8a:	e842 3000 	strex	r0, r3, [r2]
   21b8e:	2800      	cmp	r0, #0
   21b90:	d1f9      	bne.n	21b86 <z_setup_new_thread+0x1a>
   21b92:	f3bf 8f5b 	dmb	ish
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   21b96:	4299      	cmp	r1, r3
   21b98:	d10a      	bne.n	21bb0 <z_setup_new_thread+0x44>
   21b9a:	4929      	ldr	r1, [pc, #164]	; (21c40 <z_setup_new_thread+0xd4>)
   21b9c:	4829      	ldr	r0, [pc, #164]	; (21c44 <z_setup_new_thread+0xd8>)
   21b9e:	f240 2229 	movw	r2, #553	; 0x229
   21ba2:	f001 f8c3 	bl	22d2c <printk>
   21ba6:	4826      	ldr	r0, [pc, #152]	; (21c40 <z_setup_new_thread+0xd4>)
   21ba8:	f240 2129 	movw	r1, #553	; 0x229
   21bac:	f001 fb21 	bl	231f2 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   21bb0:	2d0f      	cmp	r5, #15
   21bb2:	d133      	bne.n	21c1c <z_setup_new_thread+0xb0>
   21bb4:	4b24      	ldr	r3, [pc, #144]	; (21c48 <z_setup_new_thread+0xdc>)
   21bb6:	4599      	cmp	r9, r3
   21bb8:	d134      	bne.n	21c24 <z_setup_new_thread+0xb8>
	sys_dlist_init(&w->waitq);
   21bba:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   21bbe:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   21bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21bc4:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21bc6:	3607      	adds	r6, #7
	thread_base->thread_state = (uint8_t)initial_state;
   21bc8:	2304      	movs	r3, #4
   21bca:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21bcc:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   21bd0:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   21bd4:	e9c4 361d 	strd	r3, r6, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21bda:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21bdc:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34

	thread_base->prio = priority;
   21be2:	73a5      	strb	r5, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21be4:	9301      	str	r3, [sp, #4]

	thread_base->sched_locked = 0U;
   21be6:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21bea:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   21bec:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21bee:	464b      	mov	r3, r9
	node->prev = NULL;
   21bf0:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   21bf4:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   21bf6:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21bf8:	4642      	mov	r2, r8
   21bfa:	4639      	mov	r1, r7
   21bfc:	4620      	mov	r0, r4
   21bfe:	f7f3 fb91 	bl	15324 <arch_new_thread>
	if (!_current) {
   21c02:	4b12      	ldr	r3, [pc, #72]	; (21c4c <z_setup_new_thread+0xe0>)
   21c04:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   21c06:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   21c0a:	b10b      	cbz	r3, 21c10 <z_setup_new_thread+0xa4>
	new_thread->resource_pool = _current->resource_pool;
   21c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	return stack_ptr;
   21c10:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
   21c14:	4640      	mov	r0, r8
   21c16:	b005      	add	sp, #20
   21c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   21c1c:	f105 0310 	add.w	r3, r5, #16
   21c20:	2b1e      	cmp	r3, #30
   21c22:	d9ca      	bls.n	21bba <z_setup_new_thread+0x4e>
   21c24:	4906      	ldr	r1, [pc, #24]	; (21c40 <z_setup_new_thread+0xd4>)
   21c26:	4807      	ldr	r0, [pc, #28]	; (21c44 <z_setup_new_thread+0xd8>)
   21c28:	f44f 720b 	mov.w	r2, #556	; 0x22c
   21c2c:	f001 f87e 	bl	22d2c <printk>
   21c30:	4803      	ldr	r0, [pc, #12]	; (21c40 <z_setup_new_thread+0xd4>)
   21c32:	f44f 710b 	mov.w	r1, #556	; 0x22c
   21c36:	f001 fadc 	bl	231f2 <assert_post_action>
   21c3a:	e7be      	b.n	21bba <z_setup_new_thread+0x4e>
   21c3c:	1337c0d3 	.word	0x1337c0d3
   21c40:	0002a6b5 	.word	0x0002a6b5
   21c44:	00027c9a 	.word	0x00027c9a
   21c48:	0001fea1 	.word	0x0001fea1
   21c4c:	20002b28 	.word	0x20002b28

00021c50 <z_impl_k_thread_create>:
{
   21c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21c54:	b087      	sub	sp, #28
   21c56:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   21c5a:	4604      	mov	r4, r0
   21c5c:	460d      	mov	r5, r1
   21c5e:	4690      	mov	r8, r2
   21c60:	4699      	mov	r9, r3
   21c62:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   21c66:	b153      	cbz	r3, 21c7e <z_impl_k_thread_create+0x2e>
   21c68:	4919      	ldr	r1, [pc, #100]	; (21cd0 <z_impl_k_thread_create+0x80>)
   21c6a:	481a      	ldr	r0, [pc, #104]	; (21cd4 <z_impl_k_thread_create+0x84>)
   21c6c:	f240 2295 	movw	r2, #661	; 0x295
   21c70:	f001 f85c 	bl	22d2c <printk>
   21c74:	4816      	ldr	r0, [pc, #88]	; (21cd0 <z_impl_k_thread_create+0x80>)
   21c76:	f240 2195 	movw	r1, #661	; 0x295
   21c7a:	f001 faba 	bl	231f2 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21c7e:	2300      	movs	r3, #0
   21c80:	9305      	str	r3, [sp, #20]
   21c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21c84:	9304      	str	r3, [sp, #16]
   21c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21c88:	9303      	str	r3, [sp, #12]
   21c8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21c8c:	9302      	str	r3, [sp, #8]
   21c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21c90:	9301      	str	r3, [sp, #4]
   21c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21c94:	9300      	str	r3, [sp, #0]
   21c96:	4642      	mov	r2, r8
   21c98:	464b      	mov	r3, r9
   21c9a:	4629      	mov	r1, r5
   21c9c:	4620      	mov	r0, r4
   21c9e:	f7ff ff65 	bl	21b6c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   21ca2:	1c7b      	adds	r3, r7, #1
   21ca4:	bf08      	it	eq
   21ca6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   21caa:	d005      	beq.n	21cb8 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21cac:	ea56 0307 	orrs.w	r3, r6, r7
   21cb0:	d106      	bne.n	21cc0 <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
   21cb2:	4620      	mov	r0, r4
   21cb4:	f7ff f8fe 	bl	20eb4 <z_sched_start>
}
   21cb8:	4620      	mov	r0, r4
   21cba:	b007      	add	sp, #28
   21cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21cc0:	4905      	ldr	r1, [pc, #20]	; (21cd8 <z_impl_k_thread_create+0x88>)
   21cc2:	4632      	mov	r2, r6
   21cc4:	463b      	mov	r3, r7
   21cc6:	f104 0018 	add.w	r0, r4, #24
   21cca:	f000 f9fd 	bl	220c8 <z_add_timeout>
   21cce:	e7f3      	b.n	21cb8 <z_impl_k_thread_create+0x68>
   21cd0:	0002a6b5 	.word	0x0002a6b5
   21cd4:	00027c9a 	.word	0x00027c9a
   21cd8:	00020f39 	.word	0x00020f39

00021cdc <z_init_static_threads>:
{
   21cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   21ce0:	4f39      	ldr	r7, [pc, #228]	; (21dc8 <z_init_static_threads+0xec>)
   21ce2:	4d3a      	ldr	r5, [pc, #232]	; (21dcc <z_init_static_threads+0xf0>)
   21ce4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 21dd4 <z_init_static_threads+0xf8>
{
   21ce8:	b086      	sub	sp, #24
   21cea:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   21cec:	42bd      	cmp	r5, r7
   21cee:	d90a      	bls.n	21d06 <z_init_static_threads+0x2a>
   21cf0:	4837      	ldr	r0, [pc, #220]	; (21dd0 <z_init_static_threads+0xf4>)
   21cf2:	4641      	mov	r1, r8
   21cf4:	f240 3203 	movw	r2, #771	; 0x303
   21cf8:	f001 f818 	bl	22d2c <printk>
   21cfc:	f240 3103 	movw	r1, #771	; 0x303
   21d00:	4640      	mov	r0, r8
   21d02:	f001 fa76 	bl	231f2 <assert_post_action>
   21d06:	42b5      	cmp	r5, r6
   21d08:	f105 0430 	add.w	r4, r5, #48	; 0x30
   21d0c:	d31d      	bcc.n	21d4a <z_init_static_threads+0x6e>
	k_sched_lock();
   21d0e:	f7fe fef7 	bl	20b00 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   21d12:	4c2e      	ldr	r4, [pc, #184]	; (21dcc <z_init_static_threads+0xf0>)
   21d14:	4d2f      	ldr	r5, [pc, #188]	; (21dd4 <z_init_static_threads+0xf8>)
   21d16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 21dd0 <z_init_static_threads+0xf4>
   21d1a:	f240 38e7 	movw	r8, #999	; 0x3e7
   21d1e:	f04f 0900 	mov.w	r9, #0
   21d22:	42b4      	cmp	r4, r6
   21d24:	d90a      	bls.n	21d3c <z_init_static_threads+0x60>
   21d26:	4629      	mov	r1, r5
   21d28:	4650      	mov	r0, sl
   21d2a:	f240 3222 	movw	r2, #802	; 0x322
   21d2e:	f000 fffd 	bl	22d2c <printk>
   21d32:	f240 3122 	movw	r1, #802	; 0x322
   21d36:	4628      	mov	r0, r5
   21d38:	f001 fa5b 	bl	231f2 <assert_post_action>
   21d3c:	42b4      	cmp	r4, r6
   21d3e:	d321      	bcc.n	21d84 <z_init_static_threads+0xa8>
}
   21d40:	b006      	add	sp, #24
   21d42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   21d46:	f7fe bfd3 	b.w	20cf0 <k_sched_unlock>
		z_setup_new_thread(
   21d4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21d4e:	9305      	str	r3, [sp, #20]
   21d50:	f854 3c10 	ldr.w	r3, [r4, #-16]
   21d54:	9304      	str	r3, [sp, #16]
   21d56:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21d5a:	9303      	str	r3, [sp, #12]
   21d5c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21d60:	9302      	str	r3, [sp, #8]
   21d62:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   21d66:	9301      	str	r3, [sp, #4]
   21d68:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21d6c:	9300      	str	r3, [sp, #0]
   21d6e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   21d72:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   21d76:	f7ff fef9 	bl	21b6c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21d7a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   21d7e:	665d      	str	r5, [r3, #100]	; 0x64
   21d80:	4625      	mov	r5, r4
   21d82:	e7b3      	b.n	21cec <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   21d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21d86:	1c5a      	adds	r2, r3, #1
   21d88:	d00f      	beq.n	21daa <z_init_static_threads+0xce>
					    K_MSEC(thread_data->init_delay));
   21d8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   21d8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   21d92:	4640      	mov	r0, r8
   21d94:	4649      	mov	r1, r9
   21d96:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21d9a:	4549      	cmp	r1, r9
   21d9c:	bf08      	it	eq
   21d9e:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   21da0:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21da2:	d104      	bne.n	21dae <z_init_static_threads+0xd2>
	z_sched_start(thread);
   21da4:	4638      	mov	r0, r7
   21da6:	f7ff f885 	bl	20eb4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   21daa:	3430      	adds	r4, #48	; 0x30
   21dac:	e7b9      	b.n	21d22 <z_init_static_threads+0x46>
   21dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21db2:	2300      	movs	r3, #0
   21db4:	f7de f994 	bl	e0 <__aeabi_uldivmod>
   21db8:	4602      	mov	r2, r0
   21dba:	460b      	mov	r3, r1
   21dbc:	f107 0018 	add.w	r0, r7, #24
   21dc0:	4905      	ldr	r1, [pc, #20]	; (21dd8 <z_init_static_threads+0xfc>)
   21dc2:	f000 f981 	bl	220c8 <z_add_timeout>
   21dc6:	e7f0      	b.n	21daa <z_init_static_threads+0xce>
   21dc8:	20000810 	.word	0x20000810
   21dcc:	20000810 	.word	0x20000810
   21dd0:	00027c9a 	.word	0x00027c9a
   21dd4:	0002a6b5 	.word	0x0002a6b5
   21dd8:	00020f39 	.word	0x00020f39

00021ddc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   21ddc:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   21dde:	b138      	cbz	r0, 21df0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   21de0:	4b04      	ldr	r3, [pc, #16]	; (21df4 <z_spin_lock_valid+0x18>)
   21de2:	7e1b      	ldrb	r3, [r3, #24]
   21de4:	f000 0003 	and.w	r0, r0, #3
   21de8:	1ac0      	subs	r0, r0, r3
   21dea:	bf18      	it	ne
   21dec:	2001      	movne	r0, #1
   21dee:	4770      	bx	lr
			return false;
		}
	}
	return true;
   21df0:	2001      	movs	r0, #1
}
   21df2:	4770      	bx	lr
   21df4:	20002b28 	.word	0x20002b28

00021df8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21df8:	4906      	ldr	r1, [pc, #24]	; (21e14 <z_spin_unlock_valid+0x1c>)
{
   21dfa:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   21dfc:	688a      	ldr	r2, [r1, #8]
   21dfe:	7e08      	ldrb	r0, [r1, #24]
   21e00:	6819      	ldr	r1, [r3, #0]
   21e02:	4302      	orrs	r2, r0
   21e04:	4291      	cmp	r1, r2
   21e06:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   21e0a:	bf04      	itt	eq
   21e0c:	6018      	streq	r0, [r3, #0]
	return true;
   21e0e:	2001      	moveq	r0, #1
}
   21e10:	4770      	bx	lr
   21e12:	bf00      	nop
   21e14:	20002b28 	.word	0x20002b28

00021e18 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   21e18:	4a02      	ldr	r2, [pc, #8]	; (21e24 <z_spin_lock_set_owner+0xc>)
   21e1a:	7e11      	ldrb	r1, [r2, #24]
   21e1c:	6893      	ldr	r3, [r2, #8]
   21e1e:	430b      	orrs	r3, r1
   21e20:	6003      	str	r3, [r0, #0]
}
   21e22:	4770      	bx	lr
   21e24:	20002b28 	.word	0x20002b28

00021e28 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   21e28:	b508      	push	{r3, lr}
	__asm__ volatile(
   21e2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e2e:	f3ef 8511 	mrs	r5, BASEPRI
   21e32:	f383 8811 	msr	BASEPRI, r3
   21e36:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   21e3a:	4c0e      	ldr	r4, [pc, #56]	; (21e74 <z_self_abort+0x4c>)
   21e3c:	6923      	ldr	r3, [r4, #16]
   21e3e:	b143      	cbz	r3, 21e52 <z_self_abort+0x2a>
   21e40:	490d      	ldr	r1, [pc, #52]	; (21e78 <z_self_abort+0x50>)
   21e42:	480e      	ldr	r0, [pc, #56]	; (21e7c <z_self_abort+0x54>)
   21e44:	2228      	movs	r2, #40	; 0x28
   21e46:	f000 ff71 	bl	22d2c <printk>
   21e4a:	480b      	ldr	r0, [pc, #44]	; (21e78 <z_self_abort+0x50>)
   21e4c:	2128      	movs	r1, #40	; 0x28
   21e4e:	f001 f9d0 	bl	231f2 <assert_post_action>
	cpu->pending_abort = _current;
   21e52:	68a0      	ldr	r0, [r4, #8]
   21e54:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   21e56:	f7ff f969 	bl	2112c <z_impl_k_thread_suspend>
   21e5a:	4628      	mov	r0, r5
   21e5c:	f7f3 f9fc 	bl	15258 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   21e60:	4905      	ldr	r1, [pc, #20]	; (21e78 <z_self_abort+0x50>)
   21e62:	4806      	ldr	r0, [pc, #24]	; (21e7c <z_self_abort+0x54>)
   21e64:	2230      	movs	r2, #48	; 0x30
   21e66:	f000 ff61 	bl	22d2c <printk>
   21e6a:	4803      	ldr	r0, [pc, #12]	; (21e78 <z_self_abort+0x50>)
   21e6c:	2130      	movs	r1, #48	; 0x30
   21e6e:	f001 f9c0 	bl	231f2 <assert_post_action>
	CODE_UNREACHABLE;
   21e72:	bf00      	nop
   21e74:	20002b28 	.word	0x20002b28
   21e78:	0002a6d8 	.word	0x0002a6d8
   21e7c:	00027c9a 	.word	0x00027c9a

00021e80 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   21e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e84:	4604      	mov	r4, r0
   21e86:	b088      	sub	sp, #32
   21e88:	460d      	mov	r5, r1
   21e8a:	4616      	mov	r6, r2
   21e8c:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   21e8e:	f004 fe2c 	bl	26aea <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   21e92:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21e96:	2200      	movs	r2, #0
   21e98:	2300      	movs	r3, #0
   21e9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21e9e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   21ea2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   21ea6:	4b07      	ldr	r3, [pc, #28]	; (21ec4 <k_work_q_start+0x44>)
   21ea8:	9400      	str	r4, [sp, #0]
   21eaa:	4632      	mov	r2, r6
   21eac:	4629      	mov	r1, r5
   21eae:	4640      	mov	r0, r8
   21eb0:	f7ff fece 	bl	21c50 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   21eb4:	4904      	ldr	r1, [pc, #16]	; (21ec8 <k_work_q_start+0x48>)
   21eb6:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   21eb8:	b008      	add	sp, #32
   21eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21ebe:	f004 be98 	b.w	26bf2 <z_impl_k_thread_name_set>
   21ec2:	bf00      	nop
   21ec4:	0001325d 	.word	0x0001325d
   21ec8:	0002a701 	.word	0x0002a701

00021ecc <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   21ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21ed0:	4680      	mov	r8, r0
   21ed2:	460d      	mov	r5, r1
   21ed4:	4616      	mov	r6, r2
   21ed6:	461f      	mov	r7, r3
   21ed8:	f04f 0340 	mov.w	r3, #64	; 0x40
   21edc:	f3ef 8911 	mrs	r9, BASEPRI
   21ee0:	f383 8811 	msr	BASEPRI, r3
   21ee4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ee8:	482d      	ldr	r0, [pc, #180]	; (21fa0 <k_delayed_work_submit_to_queue+0xd4>)
   21eea:	f7ff ff77 	bl	21ddc <z_spin_lock_valid>
   21eee:	b940      	cbnz	r0, 21f02 <k_delayed_work_submit_to_queue+0x36>
   21ef0:	492c      	ldr	r1, [pc, #176]	; (21fa4 <k_delayed_work_submit_to_queue+0xd8>)
   21ef2:	482d      	ldr	r0, [pc, #180]	; (21fa8 <k_delayed_work_submit_to_queue+0xdc>)
   21ef4:	2278      	movs	r2, #120	; 0x78
   21ef6:	f000 ff19 	bl	22d2c <printk>
   21efa:	482a      	ldr	r0, [pc, #168]	; (21fa4 <k_delayed_work_submit_to_queue+0xd8>)
   21efc:	2178      	movs	r1, #120	; 0x78
   21efe:	f001 f978 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f02:	4827      	ldr	r0, [pc, #156]	; (21fa0 <k_delayed_work_submit_to_queue+0xd4>)
   21f04:	f7ff ff88 	bl	21e18 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   21f08:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21f0a:	b1e3      	cbz	r3, 21f46 <k_delayed_work_submit_to_queue+0x7a>
   21f0c:	4543      	cmp	r3, r8
   21f0e:	d144      	bne.n	21f9a <k_delayed_work_submit_to_queue+0xce>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   21f10:	4628      	mov	r0, r5
   21f12:	f004 fe90 	bl	26c36 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   21f16:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   21f1a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   21f1c:	d016      	beq.n	21f4c <k_delayed_work_submit_to_queue+0x80>
			err = 0;
		} else if (err < 0) {
   21f1e:	2800      	cmp	r0, #0
   21f20:	da15      	bge.n	21f4e <k_delayed_work_submit_to_queue+0x82>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f22:	481f      	ldr	r0, [pc, #124]	; (21fa0 <k_delayed_work_submit_to_queue+0xd4>)
   21f24:	f7ff ff68 	bl	21df8 <z_spin_unlock_valid>
   21f28:	b940      	cbnz	r0, 21f3c <k_delayed_work_submit_to_queue+0x70>
   21f2a:	491e      	ldr	r1, [pc, #120]	; (21fa4 <k_delayed_work_submit_to_queue+0xd8>)
   21f2c:	481e      	ldr	r0, [pc, #120]	; (21fa8 <k_delayed_work_submit_to_queue+0xdc>)
   21f2e:	22a3      	movs	r2, #163	; 0xa3
   21f30:	f000 fefc 	bl	22d2c <printk>
   21f34:	481b      	ldr	r0, [pc, #108]	; (21fa4 <k_delayed_work_submit_to_queue+0xd8>)
   21f36:	21a3      	movs	r1, #163	; 0xa3
   21f38:	f001 f95b 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   21f3c:	f389 8811 	msr	BASEPRI, r9
   21f40:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   21f44:	e01e      	b.n	21f84 <k_delayed_work_submit_to_queue+0xb8>
	if (work->work_q == work_q) {
   21f46:	f1b8 0f00 	cmp.w	r8, #0
   21f4a:	d0e1      	beq.n	21f10 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   21f4c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21f4e:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   21f52:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21f56:	d118      	bne.n	21f8a <k_delayed_work_submit_to_queue+0xbe>
   21f58:	4811      	ldr	r0, [pc, #68]	; (21fa0 <k_delayed_work_submit_to_queue+0xd4>)
   21f5a:	f7ff ff4d 	bl	21df8 <z_spin_unlock_valid>
   21f5e:	b940      	cbnz	r0, 21f72 <k_delayed_work_submit_to_queue+0xa6>
   21f60:	4910      	ldr	r1, [pc, #64]	; (21fa4 <k_delayed_work_submit_to_queue+0xd8>)
   21f62:	4811      	ldr	r0, [pc, #68]	; (21fa8 <k_delayed_work_submit_to_queue+0xdc>)
   21f64:	22a3      	movs	r2, #163	; 0xa3
   21f66:	f000 fee1 	bl	22d2c <printk>
   21f6a:	480e      	ldr	r0, [pc, #56]	; (21fa4 <k_delayed_work_submit_to_queue+0xd8>)
   21f6c:	21a3      	movs	r1, #163	; 0xa3
   21f6e:	f001 f940 	bl	231f2 <assert_post_action>
   21f72:	f389 8811 	msr	BASEPRI, r9
   21f76:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   21f7a:	4629      	mov	r1, r5
   21f7c:	4640      	mov	r0, r8
   21f7e:	f004 fe3d 	bl	26bfc <k_work_submit_to_queue>
		return 0;
   21f82:	2400      	movs	r4, #0
}
   21f84:	4620      	mov	r0, r4
   21f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   21f8a:	4908      	ldr	r1, [pc, #32]	; (21fac <k_delayed_work_submit_to_queue+0xe0>)
   21f8c:	4632      	mov	r2, r6
   21f8e:	463b      	mov	r3, r7
   21f90:	f105 0010 	add.w	r0, r5, #16
   21f94:	f000 f898 	bl	220c8 <z_add_timeout>
   21f98:	e7c3      	b.n	21f22 <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   21f9a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   21f9e:	e7c0      	b.n	21f22 <k_delayed_work_submit_to_queue+0x56>
   21fa0:	20002b70 	.word	0x20002b70
   21fa4:	00027cd4 	.word	0x00027cd4
   21fa8:	00027c9a 	.word	0x00027c9a
   21fac:	00026c2d 	.word	0x00026c2d

00021fb0 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   21fb0:	b538      	push	{r3, r4, r5, lr}
   21fb2:	4604      	mov	r4, r0
	__asm__ volatile(
   21fb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21fb8:	f3ef 8511 	mrs	r5, BASEPRI
   21fbc:	f383 8811 	msr	BASEPRI, r3
   21fc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21fc4:	4815      	ldr	r0, [pc, #84]	; (2201c <k_delayed_work_cancel+0x6c>)
   21fc6:	f7ff ff09 	bl	21ddc <z_spin_lock_valid>
   21fca:	b940      	cbnz	r0, 21fde <k_delayed_work_cancel+0x2e>
   21fcc:	4914      	ldr	r1, [pc, #80]	; (22020 <k_delayed_work_cancel+0x70>)
   21fce:	4815      	ldr	r0, [pc, #84]	; (22024 <k_delayed_work_cancel+0x74>)
   21fd0:	2278      	movs	r2, #120	; 0x78
   21fd2:	f000 feab 	bl	22d2c <printk>
   21fd6:	4812      	ldr	r0, [pc, #72]	; (22020 <k_delayed_work_cancel+0x70>)
   21fd8:	2178      	movs	r1, #120	; 0x78
   21fda:	f001 f90a 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   21fde:	480f      	ldr	r0, [pc, #60]	; (2201c <k_delayed_work_cancel+0x6c>)
   21fe0:	f7ff ff1a 	bl	21e18 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   21fe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21fe6:	b1b3      	cbz	r3, 22016 <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   21fe8:	4620      	mov	r0, r4
   21fea:	f004 fe24 	bl	26c36 <work_cancel>
   21fee:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ff0:	480a      	ldr	r0, [pc, #40]	; (2201c <k_delayed_work_cancel+0x6c>)
   21ff2:	f7ff ff01 	bl	21df8 <z_spin_unlock_valid>
   21ff6:	b940      	cbnz	r0, 2200a <k_delayed_work_cancel+0x5a>
   21ff8:	4909      	ldr	r1, [pc, #36]	; (22020 <k_delayed_work_cancel+0x70>)
   21ffa:	480a      	ldr	r0, [pc, #40]	; (22024 <k_delayed_work_cancel+0x74>)
   21ffc:	22a3      	movs	r2, #163	; 0xa3
   21ffe:	f000 fe95 	bl	22d2c <printk>
   22002:	4807      	ldr	r0, [pc, #28]	; (22020 <k_delayed_work_cancel+0x70>)
   22004:	21a3      	movs	r1, #163	; 0xa3
   22006:	f001 f8f4 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   2200a:	f385 8811 	msr	BASEPRI, r5
   2200e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   22012:	4620      	mov	r0, r4
   22014:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   22016:	f06f 0415 	mvn.w	r4, #21
   2201a:	e7e9      	b.n	21ff0 <k_delayed_work_cancel+0x40>
   2201c:	20002b70 	.word	0x20002b70
   22020:	00027cd4 	.word	0x00027cd4
   22024:	00027c9a 	.word	0x00027c9a

00022028 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   22028:	4b03      	ldr	r3, [pc, #12]	; (22038 <elapsed+0x10>)
   2202a:	681b      	ldr	r3, [r3, #0]
   2202c:	b90b      	cbnz	r3, 22032 <elapsed+0xa>
   2202e:	f7f2 bf13 	b.w	14e58 <z_clock_elapsed>
}
   22032:	2000      	movs	r0, #0
   22034:	4770      	bx	lr
   22036:	bf00      	nop
   22038:	20002b74 	.word	0x20002b74

0002203c <remove_timeout>:
{
   2203c:	b530      	push	{r4, r5, lr}
   2203e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22040:	b168      	cbz	r0, 2205e <remove_timeout+0x22>
   22042:	4a0a      	ldr	r2, [pc, #40]	; (2206c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   22044:	6852      	ldr	r2, [r2, #4]
   22046:	4290      	cmp	r0, r2
   22048:	d009      	beq.n	2205e <remove_timeout+0x22>
	if (next(t) != NULL) {
   2204a:	b143      	cbz	r3, 2205e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2204c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22050:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22054:	1912      	adds	r2, r2, r4
   22056:	eb45 0101 	adc.w	r1, r5, r1
   2205a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   2205e:	6842      	ldr	r2, [r0, #4]
   22060:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22062:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22064:	2300      	movs	r3, #0
	node->prev = NULL;
   22066:	e9c0 3300 	strd	r3, r3, [r0]
}
   2206a:	bd30      	pop	{r4, r5, pc}
   2206c:	20000698 	.word	0x20000698

00022070 <next_timeout>:

static int32_t next_timeout(void)
{
   22070:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   22072:	4b13      	ldr	r3, [pc, #76]	; (220c0 <next_timeout+0x50>)
   22074:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22076:	429c      	cmp	r4, r3
   22078:	bf08      	it	eq
   2207a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2207c:	f7ff ffd4 	bl	22028 <elapsed>
   22080:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   22082:	b1bc      	cbz	r4, 220b4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   22084:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   22088:	1b40      	subs	r0, r0, r5
   2208a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2208e:	2801      	cmp	r0, #1
   22090:	f171 0300 	sbcs.w	r3, r1, #0
   22094:	db11      	blt.n	220ba <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   22096:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2209a:	2300      	movs	r3, #0
   2209c:	4282      	cmp	r2, r0
   2209e:	eb73 0401 	sbcs.w	r4, r3, r1
   220a2:	da00      	bge.n	220a6 <next_timeout+0x36>
   220a4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   220a6:	4b07      	ldr	r3, [pc, #28]	; (220c4 <next_timeout+0x54>)
   220a8:	695b      	ldr	r3, [r3, #20]
   220aa:	b113      	cbz	r3, 220b2 <next_timeout+0x42>
   220ac:	4298      	cmp	r0, r3
   220ae:	bfa8      	it	ge
   220b0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   220b2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   220b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   220b8:	e7f5      	b.n	220a6 <next_timeout+0x36>
   220ba:	2000      	movs	r0, #0
   220bc:	e7f3      	b.n	220a6 <next_timeout+0x36>
   220be:	bf00      	nop
   220c0:	20000698 	.word	0x20000698
   220c4:	20002b28 	.word	0x20002b28

000220c8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   220c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220cc:	9101      	str	r1, [sp, #4]
   220ce:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   220d0:	1c4b      	adds	r3, r1, #1
   220d2:	bf08      	it	eq
   220d4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   220d8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   220da:	f000 8095 	beq.w	22208 <z_add_timeout+0x140>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   220de:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   220e0:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   220e4:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   220e8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   220ec:	ebb3 0804 	subs.w	r8, r3, r4
   220f0:	eb6b 0905 	sbc.w	r9, fp, r5
   220f4:	f1b8 0f00 	cmp.w	r8, #0
   220f8:	f179 0300 	sbcs.w	r3, r9, #0
   220fc:	db0f      	blt.n	2211e <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   220fe:	f7ff ff93 	bl	22028 <elapsed>
   22102:	4a48      	ldr	r2, [pc, #288]	; (22224 <z_add_timeout+0x15c>)
   22104:	e9d2 1c00 	ldrd	r1, ip, [r2]
   22108:	f06f 0301 	mvn.w	r3, #1
   2210c:	1a5b      	subs	r3, r3, r1
   2210e:	eb6b 020c 	sbc.w	r2, fp, ip
   22112:	1b1e      	subs	r6, r3, r4
   22114:	eb62 0705 	sbc.w	r7, r2, r5
   22118:	1a34      	subs	r4, r6, r0
   2211a:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2211e:	f8da 3000 	ldr.w	r3, [sl]
   22122:	b143      	cbz	r3, 22136 <z_add_timeout+0x6e>
   22124:	4940      	ldr	r1, [pc, #256]	; (22228 <z_add_timeout+0x160>)
   22126:	4841      	ldr	r0, [pc, #260]	; (2222c <z_add_timeout+0x164>)
   22128:	226c      	movs	r2, #108	; 0x6c
   2212a:	f000 fdff 	bl	22d2c <printk>
   2212e:	483e      	ldr	r0, [pc, #248]	; (22228 <z_add_timeout+0x160>)
   22130:	216c      	movs	r1, #108	; 0x6c
   22132:	f001 f85e 	bl	231f2 <assert_post_action>
	to->fn = fn;
   22136:	9b01      	ldr	r3, [sp, #4]
   22138:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   2213c:	2c01      	cmp	r4, #1
   2213e:	f175 0300 	sbcs.w	r3, r5, #0
   22142:	bfbc      	itt	lt
   22144:	2401      	movlt	r4, #1
   22146:	2500      	movlt	r5, #0
	__asm__ volatile(
   22148:	f04f 0340 	mov.w	r3, #64	; 0x40
   2214c:	f3ef 8611 	mrs	r6, BASEPRI
   22150:	f383 8811 	msr	BASEPRI, r3
   22154:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22158:	4835      	ldr	r0, [pc, #212]	; (22230 <z_add_timeout+0x168>)
   2215a:	f7ff fe3f 	bl	21ddc <z_spin_lock_valid>
   2215e:	b940      	cbnz	r0, 22172 <z_add_timeout+0xaa>
   22160:	4934      	ldr	r1, [pc, #208]	; (22234 <z_add_timeout+0x16c>)
   22162:	4832      	ldr	r0, [pc, #200]	; (2222c <z_add_timeout+0x164>)
   22164:	2278      	movs	r2, #120	; 0x78
   22166:	f000 fde1 	bl	22d2c <printk>
   2216a:	4832      	ldr	r0, [pc, #200]	; (22234 <z_add_timeout+0x16c>)
   2216c:	2178      	movs	r1, #120	; 0x78
   2216e:	f001 f840 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   22172:	482f      	ldr	r0, [pc, #188]	; (22230 <z_add_timeout+0x168>)
   22174:	f7ff fe50 	bl	21e18 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   22178:	f7ff ff56 	bl	22028 <elapsed>
	return list->head == list;
   2217c:	4b2e      	ldr	r3, [pc, #184]	; (22238 <z_add_timeout+0x170>)
   2217e:	681a      	ldr	r2, [r3, #0]
   22180:	1824      	adds	r4, r4, r0
   22182:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22186:	429a      	cmp	r2, r3
   22188:	e9ca 4504 	strd	r4, r5, [sl, #16]
   2218c:	d001      	beq.n	22192 <z_add_timeout+0xca>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2218e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   22190:	b952      	cbnz	r2, 221a8 <z_add_timeout+0xe0>
	node->prev = list->tail;
   22192:	685a      	ldr	r2, [r3, #4]
   22194:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   22198:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   2219a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   2219e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   221a2:	f8c3 a004 	str.w	sl, [r3, #4]
}
   221a6:	e014      	b.n	221d2 <z_add_timeout+0x10a>
			if (t->dticks > to->dticks) {
   221a8:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   221ac:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   221b0:	4544      	cmp	r4, r8
   221b2:	eb75 0109 	sbcs.w	r1, r5, r9
   221b6:	da2a      	bge.n	2220e <z_add_timeout+0x146>
				t->dticks -= to->dticks;
   221b8:	ebb8 0004 	subs.w	r0, r8, r4
   221bc:	eb69 0105 	sbc.w	r1, r9, r5
   221c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   221c4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   221c6:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   221ca:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   221ce:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   221d2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   221d4:	429a      	cmp	r2, r3
   221d6:	d006      	beq.n	221e6 <z_add_timeout+0x11e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   221d8:	4592      	cmp	sl, r2
   221da:	d104      	bne.n	221e6 <z_add_timeout+0x11e>
			z_clock_set_timeout(next_timeout(), false);
   221dc:	f7ff ff48 	bl	22070 <next_timeout>
   221e0:	2100      	movs	r1, #0
   221e2:	f7f2 fdd3 	bl	14d8c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221e6:	4812      	ldr	r0, [pc, #72]	; (22230 <z_add_timeout+0x168>)
   221e8:	f7ff fe06 	bl	21df8 <z_spin_unlock_valid>
   221ec:	b940      	cbnz	r0, 22200 <z_add_timeout+0x138>
   221ee:	4911      	ldr	r1, [pc, #68]	; (22234 <z_add_timeout+0x16c>)
   221f0:	480e      	ldr	r0, [pc, #56]	; (2222c <z_add_timeout+0x164>)
   221f2:	22a3      	movs	r2, #163	; 0xa3
   221f4:	f000 fd9a 	bl	22d2c <printk>
   221f8:	480e      	ldr	r0, [pc, #56]	; (22234 <z_add_timeout+0x16c>)
   221fa:	21a3      	movs	r1, #163	; 0xa3
   221fc:	f000 fff9 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22200:	f386 8811 	msr	BASEPRI, r6
   22204:	f3bf 8f6f 	isb	sy
		}
	}
}
   22208:	b003      	add	sp, #12
   2220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   2220e:	ebb4 0008 	subs.w	r0, r4, r8
   22212:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   22216:	42ba      	cmp	r2, r7
   22218:	e9ca 0104 	strd	r0, r1, [sl, #16]
   2221c:	d0b9      	beq.n	22192 <z_add_timeout+0xca>
   2221e:	6812      	ldr	r2, [r2, #0]
   22220:	e7b6      	b.n	22190 <z_add_timeout+0xc8>
   22222:	bf00      	nop
   22224:	20002778 	.word	0x20002778
   22228:	0002a70b 	.word	0x0002a70b
   2222c:	00027c9a 	.word	0x00027c9a
   22230:	20002b78 	.word	0x20002b78
   22234:	00027cd4 	.word	0x00027cd4
   22238:	20000698 	.word	0x20000698

0002223c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2223c:	b538      	push	{r3, r4, r5, lr}
   2223e:	4604      	mov	r4, r0
	__asm__ volatile(
   22240:	f04f 0340 	mov.w	r3, #64	; 0x40
   22244:	f3ef 8511 	mrs	r5, BASEPRI
   22248:	f383 8811 	msr	BASEPRI, r3
   2224c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22250:	4815      	ldr	r0, [pc, #84]	; (222a8 <z_abort_timeout+0x6c>)
   22252:	f7ff fdc3 	bl	21ddc <z_spin_lock_valid>
   22256:	b940      	cbnz	r0, 2226a <z_abort_timeout+0x2e>
   22258:	4914      	ldr	r1, [pc, #80]	; (222ac <z_abort_timeout+0x70>)
   2225a:	4815      	ldr	r0, [pc, #84]	; (222b0 <z_abort_timeout+0x74>)
   2225c:	2278      	movs	r2, #120	; 0x78
   2225e:	f000 fd65 	bl	22d2c <printk>
   22262:	4812      	ldr	r0, [pc, #72]	; (222ac <z_abort_timeout+0x70>)
   22264:	2178      	movs	r1, #120	; 0x78
   22266:	f000 ffc4 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2226a:	480f      	ldr	r0, [pc, #60]	; (222a8 <z_abort_timeout+0x6c>)
   2226c:	f7ff fdd4 	bl	21e18 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   22270:	6823      	ldr	r3, [r4, #0]
   22272:	b1b3      	cbz	r3, 222a2 <z_abort_timeout+0x66>
			remove_timeout(to);
   22274:	4620      	mov	r0, r4
   22276:	f7ff fee1 	bl	2203c <remove_timeout>
			ret = 0;
   2227a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2227c:	480a      	ldr	r0, [pc, #40]	; (222a8 <z_abort_timeout+0x6c>)
   2227e:	f7ff fdbb 	bl	21df8 <z_spin_unlock_valid>
   22282:	b940      	cbnz	r0, 22296 <z_abort_timeout+0x5a>
   22284:	4909      	ldr	r1, [pc, #36]	; (222ac <z_abort_timeout+0x70>)
   22286:	480a      	ldr	r0, [pc, #40]	; (222b0 <z_abort_timeout+0x74>)
   22288:	22a3      	movs	r2, #163	; 0xa3
   2228a:	f000 fd4f 	bl	22d2c <printk>
   2228e:	4807      	ldr	r0, [pc, #28]	; (222ac <z_abort_timeout+0x70>)
   22290:	21a3      	movs	r1, #163	; 0xa3
   22292:	f000 ffae 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22296:	f385 8811 	msr	BASEPRI, r5
   2229a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2229e:	4620      	mov	r0, r4
   222a0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   222a2:	f06f 0415 	mvn.w	r4, #21
   222a6:	e7e9      	b.n	2227c <z_abort_timeout+0x40>
   222a8:	20002b78 	.word	0x20002b78
   222ac:	00027cd4 	.word	0x00027cd4
   222b0:	00027c9a 	.word	0x00027c9a

000222b4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   222b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   222b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   222ba:	f3ef 8511 	mrs	r5, BASEPRI
   222be:	f383 8811 	msr	BASEPRI, r3
   222c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222c6:	4813      	ldr	r0, [pc, #76]	; (22314 <z_get_next_timeout_expiry+0x60>)
   222c8:	f7ff fd88 	bl	21ddc <z_spin_lock_valid>
   222cc:	b940      	cbnz	r0, 222e0 <z_get_next_timeout_expiry+0x2c>
   222ce:	4912      	ldr	r1, [pc, #72]	; (22318 <z_get_next_timeout_expiry+0x64>)
   222d0:	4812      	ldr	r0, [pc, #72]	; (2231c <z_get_next_timeout_expiry+0x68>)
   222d2:	2278      	movs	r2, #120	; 0x78
   222d4:	f000 fd2a 	bl	22d2c <printk>
   222d8:	480f      	ldr	r0, [pc, #60]	; (22318 <z_get_next_timeout_expiry+0x64>)
   222da:	2178      	movs	r1, #120	; 0x78
   222dc:	f000 ff89 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   222e0:	480c      	ldr	r0, [pc, #48]	; (22314 <z_get_next_timeout_expiry+0x60>)
   222e2:	f7ff fd99 	bl	21e18 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   222e6:	f7ff fec3 	bl	22070 <next_timeout>
   222ea:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222ec:	4809      	ldr	r0, [pc, #36]	; (22314 <z_get_next_timeout_expiry+0x60>)
   222ee:	f7ff fd83 	bl	21df8 <z_spin_unlock_valid>
   222f2:	b940      	cbnz	r0, 22306 <z_get_next_timeout_expiry+0x52>
   222f4:	4908      	ldr	r1, [pc, #32]	; (22318 <z_get_next_timeout_expiry+0x64>)
   222f6:	4809      	ldr	r0, [pc, #36]	; (2231c <z_get_next_timeout_expiry+0x68>)
   222f8:	22a3      	movs	r2, #163	; 0xa3
   222fa:	f000 fd17 	bl	22d2c <printk>
   222fe:	4806      	ldr	r0, [pc, #24]	; (22318 <z_get_next_timeout_expiry+0x64>)
   22300:	21a3      	movs	r1, #163	; 0xa3
   22302:	f000 ff76 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22306:	f385 8811 	msr	BASEPRI, r5
   2230a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2230e:	4620      	mov	r0, r4
   22310:	bd38      	pop	{r3, r4, r5, pc}
   22312:	bf00      	nop
   22314:	20002b78 	.word	0x20002b78
   22318:	00027cd4 	.word	0x00027cd4
   2231c:	00027c9a 	.word	0x00027c9a

00022320 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   22320:	b570      	push	{r4, r5, r6, lr}
   22322:	4604      	mov	r4, r0
   22324:	460d      	mov	r5, r1
	__asm__ volatile(
   22326:	f04f 0340 	mov.w	r3, #64	; 0x40
   2232a:	f3ef 8611 	mrs	r6, BASEPRI
   2232e:	f383 8811 	msr	BASEPRI, r3
   22332:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22336:	4816      	ldr	r0, [pc, #88]	; (22390 <z_set_timeout_expiry+0x70>)
   22338:	f7ff fd50 	bl	21ddc <z_spin_lock_valid>
   2233c:	b940      	cbnz	r0, 22350 <z_set_timeout_expiry+0x30>
   2233e:	4915      	ldr	r1, [pc, #84]	; (22394 <z_set_timeout_expiry+0x74>)
   22340:	4815      	ldr	r0, [pc, #84]	; (22398 <z_set_timeout_expiry+0x78>)
   22342:	2278      	movs	r2, #120	; 0x78
   22344:	f000 fcf2 	bl	22d2c <printk>
   22348:	4812      	ldr	r0, [pc, #72]	; (22394 <z_set_timeout_expiry+0x74>)
   2234a:	2178      	movs	r1, #120	; 0x78
   2234c:	f000 ff51 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   22350:	480f      	ldr	r0, [pc, #60]	; (22390 <z_set_timeout_expiry+0x70>)
   22352:	f7ff fd61 	bl	21e18 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   22356:	f7ff fe8b 	bl	22070 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2235a:	2801      	cmp	r0, #1
   2235c:	dd05      	ble.n	2236a <z_set_timeout_expiry+0x4a>
   2235e:	42a0      	cmp	r0, r4
   22360:	dd03      	ble.n	2236a <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   22362:	4629      	mov	r1, r5
   22364:	4620      	mov	r0, r4
   22366:	f7f2 fd11 	bl	14d8c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2236a:	4809      	ldr	r0, [pc, #36]	; (22390 <z_set_timeout_expiry+0x70>)
   2236c:	f7ff fd44 	bl	21df8 <z_spin_unlock_valid>
   22370:	b940      	cbnz	r0, 22384 <z_set_timeout_expiry+0x64>
   22372:	4908      	ldr	r1, [pc, #32]	; (22394 <z_set_timeout_expiry+0x74>)
   22374:	4808      	ldr	r0, [pc, #32]	; (22398 <z_set_timeout_expiry+0x78>)
   22376:	22a3      	movs	r2, #163	; 0xa3
   22378:	f000 fcd8 	bl	22d2c <printk>
   2237c:	4805      	ldr	r0, [pc, #20]	; (22394 <z_set_timeout_expiry+0x74>)
   2237e:	21a3      	movs	r1, #163	; 0xa3
   22380:	f000 ff37 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22384:	f386 8811 	msr	BASEPRI, r6
   22388:	f3bf 8f6f 	isb	sy
		}
	}
}
   2238c:	bd70      	pop	{r4, r5, r6, pc}
   2238e:	bf00      	nop
   22390:	20002b78 	.word	0x20002b78
   22394:	00027cd4 	.word	0x00027cd4
   22398:	00027c9a 	.word	0x00027c9a

0002239c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   2239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223a0:	b085      	sub	sp, #20
   223a2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   223a4:	f7fe fe5c 	bl	21060 <z_time_slice>
	__asm__ volatile(
   223a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   223ac:	f3ef 8911 	mrs	r9, BASEPRI
   223b0:	f383 8811 	msr	BASEPRI, r3
   223b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223b8:	484e      	ldr	r0, [pc, #312]	; (224f4 <z_clock_announce+0x158>)
   223ba:	f7ff fd0f 	bl	21ddc <z_spin_lock_valid>
   223be:	b940      	cbnz	r0, 223d2 <z_clock_announce+0x36>
   223c0:	494d      	ldr	r1, [pc, #308]	; (224f8 <z_clock_announce+0x15c>)
   223c2:	484e      	ldr	r0, [pc, #312]	; (224fc <z_clock_announce+0x160>)
   223c4:	2278      	movs	r2, #120	; 0x78
   223c6:	f000 fcb1 	bl	22d2c <printk>
   223ca:	484b      	ldr	r0, [pc, #300]	; (224f8 <z_clock_announce+0x15c>)
   223cc:	2178      	movs	r1, #120	; 0x78
   223ce:	f000 ff10 	bl	231f2 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   223d2:	4e4b      	ldr	r6, [pc, #300]	; (22500 <z_clock_announce+0x164>)
   223d4:	4f4b      	ldr	r7, [pc, #300]	; (22504 <z_clock_announce+0x168>)
	z_spin_lock_set_owner(l);
   223d6:	4847      	ldr	r0, [pc, #284]	; (224f4 <z_clock_announce+0x158>)
	return list->head == list;
   223d8:	f8df a12c 	ldr.w	sl, [pc, #300]	; 22508 <z_clock_announce+0x16c>
   223dc:	f7ff fd1c 	bl	21e18 <z_spin_lock_set_owner>
   223e0:	46bb      	mov	fp, r7
   223e2:	6034      	str	r4, [r6, #0]
   223e4:	e9d7 3400 	ldrd	r3, r4, [r7]
   223e8:	f8d6 c000 	ldr.w	ip, [r6]
   223ec:	f8da 8000 	ldr.w	r8, [sl]
   223f0:	4662      	mov	r2, ip
   223f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   223f6:	45d0      	cmp	r8, sl
   223f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
   223fc:	e9cd 2300 	strd	r2, r3, [sp]
   22400:	d011      	beq.n	22426 <z_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   22402:	f1b8 0f00 	cmp.w	r8, #0
   22406:	d00e      	beq.n	22426 <z_clock_announce+0x8a>
   22408:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   2240c:	e9dd 3400 	ldrd	r3, r4, [sp]
   22410:	428b      	cmp	r3, r1
   22412:	eb74 0302 	sbcs.w	r3, r4, r2
   22416:	da2b      	bge.n	22470 <z_clock_announce+0xd4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22418:	9b00      	ldr	r3, [sp, #0]
   2241a:	1ac8      	subs	r0, r1, r3
   2241c:	9b01      	ldr	r3, [sp, #4]
   2241e:	eb62 0103 	sbc.w	r1, r2, r3
   22422:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
   22426:	9b00      	ldr	r3, [sp, #0]
   22428:	9a02      	ldr	r2, [sp, #8]
   2242a:	9903      	ldr	r1, [sp, #12]
   2242c:	189a      	adds	r2, r3, r2
   2242e:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   22430:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   22434:	eb41 0303 	adc.w	r3, r1, r3
   22438:	e9cb 2300 	strd	r2, r3, [fp]
	announce_remaining = 0;
   2243c:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   2243e:	f7ff fe17 	bl	22070 <next_timeout>
   22442:	4621      	mov	r1, r4
   22444:	f7f2 fca2 	bl	14d8c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22448:	482a      	ldr	r0, [pc, #168]	; (224f4 <z_clock_announce+0x158>)
   2244a:	f7ff fcd5 	bl	21df8 <z_spin_unlock_valid>
   2244e:	b940      	cbnz	r0, 22462 <z_clock_announce+0xc6>
   22450:	4929      	ldr	r1, [pc, #164]	; (224f8 <z_clock_announce+0x15c>)
   22452:	482a      	ldr	r0, [pc, #168]	; (224fc <z_clock_announce+0x160>)
   22454:	22a3      	movs	r2, #163	; 0xa3
   22456:	f000 fc69 	bl	22d2c <printk>
   2245a:	4827      	ldr	r0, [pc, #156]	; (224f8 <z_clock_announce+0x15c>)
   2245c:	21a3      	movs	r1, #163	; 0xa3
   2245e:	f000 fec8 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22462:	f389 8811 	msr	BASEPRI, r9
   22466:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2246a:	b005      	add	sp, #20
   2246c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   22470:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		announce_remaining -= dt;
   22474:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   22478:	1864      	adds	r4, r4, r1
		t->dticks = 0;
   2247a:	f04f 0200 	mov.w	r2, #0
   2247e:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   22482:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   22486:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   22488:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   2248c:	4640      	mov	r0, r8
		curr_tick += dt;
   2248e:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   22492:	f7ff fdd3 	bl	2203c <remove_timeout>
   22496:	4817      	ldr	r0, [pc, #92]	; (224f4 <z_clock_announce+0x158>)
   22498:	f7ff fcae 	bl	21df8 <z_spin_unlock_valid>
   2249c:	b940      	cbnz	r0, 224b0 <z_clock_announce+0x114>
   2249e:	4916      	ldr	r1, [pc, #88]	; (224f8 <z_clock_announce+0x15c>)
   224a0:	4816      	ldr	r0, [pc, #88]	; (224fc <z_clock_announce+0x160>)
   224a2:	22a3      	movs	r2, #163	; 0xa3
   224a4:	f000 fc42 	bl	22d2c <printk>
   224a8:	4813      	ldr	r0, [pc, #76]	; (224f8 <z_clock_announce+0x15c>)
   224aa:	21a3      	movs	r1, #163	; 0xa3
   224ac:	f000 fea1 	bl	231f2 <assert_post_action>
   224b0:	f389 8811 	msr	BASEPRI, r9
   224b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   224b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   224bc:	4640      	mov	r0, r8
   224be:	4798      	blx	r3
	__asm__ volatile(
   224c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   224c4:	f3ef 8911 	mrs	r9, BASEPRI
   224c8:	f383 8811 	msr	BASEPRI, r3
   224cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224d0:	4808      	ldr	r0, [pc, #32]	; (224f4 <z_clock_announce+0x158>)
   224d2:	f7ff fc83 	bl	21ddc <z_spin_lock_valid>
   224d6:	b940      	cbnz	r0, 224ea <z_clock_announce+0x14e>
   224d8:	4907      	ldr	r1, [pc, #28]	; (224f8 <z_clock_announce+0x15c>)
   224da:	4808      	ldr	r0, [pc, #32]	; (224fc <z_clock_announce+0x160>)
   224dc:	2278      	movs	r2, #120	; 0x78
   224de:	f000 fc25 	bl	22d2c <printk>
   224e2:	4805      	ldr	r0, [pc, #20]	; (224f8 <z_clock_announce+0x15c>)
   224e4:	2178      	movs	r1, #120	; 0x78
   224e6:	f000 fe84 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   224ea:	4802      	ldr	r0, [pc, #8]	; (224f4 <z_clock_announce+0x158>)
   224ec:	f7ff fc94 	bl	21e18 <z_spin_lock_set_owner>
	return k;
   224f0:	e778      	b.n	223e4 <z_clock_announce+0x48>
   224f2:	bf00      	nop
   224f4:	20002b78 	.word	0x20002b78
   224f8:	00027cd4 	.word	0x00027cd4
   224fc:	00027c9a 	.word	0x00027c9a
   22500:	20002b74 	.word	0x20002b74
   22504:	20002778 	.word	0x20002778
   22508:	20000698 	.word	0x20000698

0002250c <z_tick_get>:

int64_t z_tick_get(void)
{
   2250c:	b570      	push	{r4, r5, r6, lr}
   2250e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22512:	f3ef 8611 	mrs	r6, BASEPRI
   22516:	f383 8811 	msr	BASEPRI, r3
   2251a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2251e:	4816      	ldr	r0, [pc, #88]	; (22578 <z_tick_get+0x6c>)
   22520:	f7ff fc5c 	bl	21ddc <z_spin_lock_valid>
   22524:	b940      	cbnz	r0, 22538 <z_tick_get+0x2c>
   22526:	4915      	ldr	r1, [pc, #84]	; (2257c <z_tick_get+0x70>)
   22528:	4815      	ldr	r0, [pc, #84]	; (22580 <z_tick_get+0x74>)
   2252a:	2278      	movs	r2, #120	; 0x78
   2252c:	f000 fbfe 	bl	22d2c <printk>
   22530:	4812      	ldr	r0, [pc, #72]	; (2257c <z_tick_get+0x70>)
   22532:	2178      	movs	r1, #120	; 0x78
   22534:	f000 fe5d 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   22538:	480f      	ldr	r0, [pc, #60]	; (22578 <z_tick_get+0x6c>)
   2253a:	f7ff fc6d 	bl	21e18 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2253e:	f7f2 fc8b 	bl	14e58 <z_clock_elapsed>
   22542:	4b10      	ldr	r3, [pc, #64]	; (22584 <z_tick_get+0x78>)
   22544:	e9d3 4500 	ldrd	r4, r5, [r3]
   22548:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2254a:	480b      	ldr	r0, [pc, #44]	; (22578 <z_tick_get+0x6c>)
   2254c:	f145 0500 	adc.w	r5, r5, #0
   22550:	f7ff fc52 	bl	21df8 <z_spin_unlock_valid>
   22554:	b940      	cbnz	r0, 22568 <z_tick_get+0x5c>
   22556:	4909      	ldr	r1, [pc, #36]	; (2257c <z_tick_get+0x70>)
   22558:	4809      	ldr	r0, [pc, #36]	; (22580 <z_tick_get+0x74>)
   2255a:	22a3      	movs	r2, #163	; 0xa3
   2255c:	f000 fbe6 	bl	22d2c <printk>
   22560:	4806      	ldr	r0, [pc, #24]	; (2257c <z_tick_get+0x70>)
   22562:	21a3      	movs	r1, #163	; 0xa3
   22564:	f000 fe45 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22568:	f386 8811 	msr	BASEPRI, r6
   2256c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22570:	4620      	mov	r0, r4
   22572:	4629      	mov	r1, r5
   22574:	bd70      	pop	{r4, r5, r6, pc}
   22576:	bf00      	nop
   22578:	20002b78 	.word	0x20002b78
   2257c:	00027cd4 	.word	0x00027cd4
   22580:	00027c9a 	.word	0x00027c9a
   22584:	20002778 	.word	0x20002778

00022588 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   22588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2258c:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   2258e:	4d3d      	ldr	r5, [pc, #244]	; (22684 <clear_event_registrations+0xfc>)
   22590:	4f3d      	ldr	r7, [pc, #244]	; (22688 <clear_event_registrations+0x100>)
   22592:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 22690 <clear_event_registrations+0x108>
{
   22596:	4680      	mov	r8, r0
   22598:	4616      	mov	r6, r2
	while (num_events--) {
   2259a:	fb04 0401 	mla	r4, r4, r1, r0
   2259e:	4544      	cmp	r4, r8
   225a0:	d101      	bne.n	225a6 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   225a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   225a6:	2300      	movs	r3, #0
   225a8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   225ac:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   225b0:	f003 030f 	and.w	r3, r3, #15
   225b4:	2b04      	cmp	r3, #4
   225b6:	d831      	bhi.n	2261c <clear_event_registrations+0x94>
   225b8:	e8df f003 	tbb	[pc, r3]
   225bc:	30032539 	.word	0x30032539
   225c0:	1a          	.byte	0x1a
   225c1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   225c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   225c6:	b943      	cbnz	r3, 225da <clear_event_registrations+0x52>
   225c8:	4629      	mov	r1, r5
   225ca:	229f      	movs	r2, #159	; 0x9f
   225cc:	4638      	mov	r0, r7
   225ce:	f000 fbad 	bl	22d2c <printk>
   225d2:	219f      	movs	r1, #159	; 0x9f
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   225d4:	4628      	mov	r0, r5
   225d6:	f000 fe0c 	bl	231f2 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   225da:	f854 3c14 	ldr.w	r3, [r4, #-20]
   225de:	b333      	cbz	r3, 2262e <clear_event_registrations+0xa6>
	node->prev->next = node->next;
   225e0:	f854 2c10 	ldr.w	r2, [r4, #-16]
   225e4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   225e6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   225e8:	2300      	movs	r3, #0
	node->prev = NULL;
   225ea:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   225ee:	e01e      	b.n	2262e <clear_event_registrations+0xa6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   225f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   225f4:	2b00      	cmp	r3, #0
   225f6:	d1f0      	bne.n	225da <clear_event_registrations+0x52>
   225f8:	4629      	mov	r1, r5
   225fa:	22a3      	movs	r2, #163	; 0xa3
   225fc:	4638      	mov	r0, r7
   225fe:	f000 fb95 	bl	22d2c <printk>
   22602:	21a3      	movs	r1, #163	; 0xa3
   22604:	e7e6      	b.n	225d4 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22606:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2260a:	2b00      	cmp	r3, #0
   2260c:	d1e5      	bne.n	225da <clear_event_registrations+0x52>
   2260e:	4629      	mov	r1, r5
   22610:	22a7      	movs	r2, #167	; 0xa7
   22612:	4638      	mov	r0, r7
   22614:	f000 fb8a 	bl	22d2c <printk>
   22618:	21a7      	movs	r1, #167	; 0xa7
   2261a:	e7db      	b.n	225d4 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   2261c:	4629      	mov	r1, r5
   2261e:	4638      	mov	r0, r7
   22620:	22ae      	movs	r2, #174	; 0xae
   22622:	f000 fb83 	bl	22d2c <printk>
   22626:	21ae      	movs	r1, #174	; 0xae
   22628:	4628      	mov	r0, r5
   2262a:	f000 fde2 	bl	231f2 <assert_post_action>
   2262e:	4648      	mov	r0, r9
   22630:	f7ff fbe2 	bl	21df8 <z_spin_unlock_valid>
   22634:	b940      	cbnz	r0, 22648 <clear_event_registrations+0xc0>
   22636:	4915      	ldr	r1, [pc, #84]	; (2268c <clear_event_registrations+0x104>)
   22638:	4638      	mov	r0, r7
   2263a:	22a3      	movs	r2, #163	; 0xa3
   2263c:	f000 fb76 	bl	22d2c <printk>
   22640:	4812      	ldr	r0, [pc, #72]	; (2268c <clear_event_registrations+0x104>)
   22642:	21a3      	movs	r1, #163	; 0xa3
   22644:	f000 fdd5 	bl	231f2 <assert_post_action>
   22648:	f386 8811 	msr	BASEPRI, r6
   2264c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22650:	f04f 0340 	mov.w	r3, #64	; 0x40
   22654:	f3ef 8611 	mrs	r6, BASEPRI
   22658:	f383 8811 	msr	BASEPRI, r3
   2265c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22660:	4648      	mov	r0, r9
   22662:	f7ff fbbb 	bl	21ddc <z_spin_lock_valid>
   22666:	b940      	cbnz	r0, 2267a <clear_event_registrations+0xf2>
   22668:	4908      	ldr	r1, [pc, #32]	; (2268c <clear_event_registrations+0x104>)
   2266a:	4638      	mov	r0, r7
   2266c:	2278      	movs	r2, #120	; 0x78
   2266e:	f000 fb5d 	bl	22d2c <printk>
   22672:	4806      	ldr	r0, [pc, #24]	; (2268c <clear_event_registrations+0x104>)
   22674:	2178      	movs	r1, #120	; 0x78
   22676:	f000 fdbc 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2267a:	4648      	mov	r0, r9
   2267c:	f7ff fbcc 	bl	21e18 <z_spin_lock_set_owner>
	return k;
   22680:	3c14      	subs	r4, #20
   22682:	e78c      	b.n	2259e <clear_event_registrations+0x16>
   22684:	0002a72f 	.word	0x0002a72f
   22688:	00027c9a 	.word	0x00027c9a
   2268c:	00027cd4 	.word	0x00027cd4
   22690:	20002b7c 	.word	0x20002b7c

00022694 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   22694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   22698:	6884      	ldr	r4, [r0, #8]
{
   2269a:	4605      	mov	r5, r0
   2269c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   2269e:	b1b4      	cbz	r4, 226ce <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   226a0:	7863      	ldrb	r3, [r4, #1]
   226a2:	2b01      	cmp	r3, #1
   226a4:	d147      	bne.n	22736 <signal_poll_event+0xa2>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   226a6:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   226aa:	d10a      	bne.n	226c2 <signal_poll_event+0x2e>
   226ac:	22e9      	movs	r2, #233	; 0xe9
   226ae:	492e      	ldr	r1, [pc, #184]	; (22768 <signal_poll_event+0xd4>)
   226b0:	482e      	ldr	r0, [pc, #184]	; (2276c <signal_poll_event+0xd8>)
   226b2:	f000 fb3b 	bl	22d2c <printk>
   226b6:	482c      	ldr	r0, [pc, #176]	; (22768 <signal_poll_event+0xd4>)
   226b8:	21e9      	movs	r1, #233	; 0xe9
   226ba:	f000 fd9a 	bl	231f2 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   226be:	7b7b      	ldrb	r3, [r7, #13]
   226c0:	deff      	udf	#255	; 0xff
   226c2:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   226c6:	f013 0302 	ands.w	r3, r3, #2
   226ca:	d10a      	bne.n	226e2 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   226cc:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   226ce:	68eb      	ldr	r3, [r5, #12]
   226d0:	f3c3 3104 	ubfx	r1, r3, #12, #5
   226d4:	430e      	orrs	r6, r1
	event->poller = NULL;
   226d6:	2000      	movs	r0, #0
	event->state |= state;
   226d8:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   226dc:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   226de:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   226e0:	e00d      	b.n	226fe <signal_poll_event+0x6a>
	if (z_is_thread_timeout_expired(thread)) {
   226e2:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   226e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   226ea:	f06f 0001 	mvn.w	r0, #1
   226ee:	428b      	cmp	r3, r1
   226f0:	bf08      	it	eq
   226f2:	4282      	cmpeq	r2, r0
   226f4:	d105      	bne.n	22702 <signal_poll_event+0x6e>
		poller->is_polling = false;
   226f6:	2300      	movs	r3, #0
   226f8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   226fa:	f06f 000a 	mvn.w	r0, #10
}
   226fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   22702:	4638      	mov	r0, r7
   22704:	f7fe fa80 	bl	20c08 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   22708:	2e08      	cmp	r6, #8
   2270a:	bf0c      	ite	eq
   2270c:	f06f 0303 	mvneq.w	r3, #3
   22710:	2300      	movne	r3, #0
   22712:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22714:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   22718:	06db      	lsls	r3, r3, #27
   2271a:	d104      	bne.n	22726 <signal_poll_event+0x92>
	if (!z_is_thread_ready(thread)) {
   2271c:	f854 8c54 	ldr.w	r8, [r4, #-84]
   22720:	f1b8 0f00 	cmp.w	r8, #0
   22724:	d001      	beq.n	2272a <signal_poll_event+0x96>
		poller->is_polling = false;
   22726:	2300      	movs	r3, #0
   22728:	e7d0      	b.n	226cc <signal_poll_event+0x38>
	z_ready_thread(thread);
   2272a:	4638      	mov	r0, r7
   2272c:	f7fe fb8c 	bl	20e48 <z_ready_thread>
		poller->is_polling = false;
   22730:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   22734:	e7cb      	b.n	226ce <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   22736:	2b02      	cmp	r3, #2
   22738:	d1f5      	bne.n	22726 <signal_poll_event+0x92>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2273a:	7823      	ldrb	r3, [r4, #0]
   2273c:	2b00      	cmp	r3, #0
   2273e:	d0c6      	beq.n	226ce <signal_poll_event+0x3a>
   22740:	f854 7c04 	ldr.w	r7, [r4, #-4]
   22744:	b177      	cbz	r7, 22764 <signal_poll_event+0xd0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   22746:	f1a4 0910 	sub.w	r9, r4, #16
   2274a:	f104 0010 	add.w	r0, r4, #16
		twork->poll_result = 0;
   2274e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   22752:	f7ff fd73 	bl	2223c <z_abort_timeout>
		twork->poll_result = 0;
   22756:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   2275a:	4649      	mov	r1, r9
   2275c:	4638      	mov	r0, r7
   2275e:	f004 fae5 	bl	26d2c <k_work_submit_to_queue>
   22762:	e7e5      	b.n	22730 <signal_poll_event+0x9c>
		poller->is_polling = false;
   22764:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   22766:	e7b2      	b.n	226ce <signal_poll_event+0x3a>
   22768:	0002a72f 	.word	0x0002a72f
   2276c:	00027c9a 	.word	0x00027c9a

00022770 <register_events>:
{
   22770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   22774:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22776:	f8df a19c 	ldr.w	sl, [pc, #412]	; 22914 <register_events+0x1a4>
   2277a:	4f63      	ldr	r7, [pc, #396]	; (22908 <register_events+0x198>)
   2277c:	4d63      	ldr	r5, [pc, #396]	; (2290c <register_events+0x19c>)
{
   2277e:	9100      	str	r1, [sp, #0]
   22780:	4614      	mov	r4, r2
   22782:	9301      	str	r3, [sp, #4]
   22784:	4681      	mov	r9, r0
	int events_registered = 0;
   22786:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   22788:	9b00      	ldr	r3, [sp, #0]
   2278a:	429e      	cmp	r6, r3
   2278c:	db03      	blt.n	22796 <register_events+0x26>
}
   2278e:	4640      	mov	r0, r8
   22790:	b003      	add	sp, #12
   22792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22796:	f04f 0240 	mov.w	r2, #64	; 0x40
   2279a:	f3ef 8b11 	mrs	fp, BASEPRI
   2279e:	f382 8811 	msr	BASEPRI, r2
   227a2:	f3bf 8f6f 	isb	sy
   227a6:	4650      	mov	r0, sl
   227a8:	f7ff fb18 	bl	21ddc <z_spin_lock_valid>
   227ac:	b940      	cbnz	r0, 227c0 <register_events+0x50>
   227ae:	4639      	mov	r1, r7
   227b0:	4628      	mov	r0, r5
   227b2:	2278      	movs	r2, #120	; 0x78
   227b4:	f000 faba 	bl	22d2c <printk>
   227b8:	2178      	movs	r1, #120	; 0x78
   227ba:	4638      	mov	r0, r7
   227bc:	f000 fd19 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   227c0:	4650      	mov	r0, sl
   227c2:	f7ff fb29 	bl	21e18 <z_spin_lock_set_owner>
	switch (event->type) {
   227c6:	f899 200d 	ldrb.w	r2, [r9, #13]
   227ca:	f002 020f 	and.w	r2, r2, #15
   227ce:	2a04      	cmp	r2, #4
   227d0:	d848      	bhi.n	22864 <register_events+0xf4>
   227d2:	e8df f002 	tbb	[pc, r2]
   227d6:	402f      	.short	0x402f
   227d8:	4703      	.short	0x4703
   227da:	2b          	.byte	0x2b
   227db:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   227dc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   227e0:	6892      	ldr	r2, [r2, #8]
   227e2:	b33a      	cbz	r2, 22834 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   227e4:	2102      	movs	r1, #2
	event->state |= state;
   227e6:	f8d9 200c 	ldr.w	r2, [r9, #12]
   227ea:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   227ee:	ea41 010c 	orr.w	r1, r1, ip
	event->poller = NULL;
   227f2:	2000      	movs	r0, #0
	event->state |= state;
   227f4:	f361 3210 	bfi	r2, r1, #12, #5
	event->poller = NULL;
   227f8:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   227fc:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   22800:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22802:	4650      	mov	r0, sl
   22804:	f7ff faf8 	bl	21df8 <z_spin_unlock_valid>
   22808:	b940      	cbnz	r0, 2281c <register_events+0xac>
   2280a:	4639      	mov	r1, r7
   2280c:	4628      	mov	r0, r5
   2280e:	22a3      	movs	r2, #163	; 0xa3
   22810:	f000 fa8c 	bl	22d2c <printk>
   22814:	21a3      	movs	r1, #163	; 0xa3
   22816:	4638      	mov	r0, r7
   22818:	f000 fceb 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   2281c:	f38b 8811 	msr	BASEPRI, fp
   22820:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22824:	3601      	adds	r6, #1
   22826:	f109 0914 	add.w	r9, r9, #20
   2282a:	e7ad      	b.n	22788 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   2282c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22830:	6812      	ldr	r2, [r2, #0]
   22832:	bb0a      	cbnz	r2, 22878 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   22834:	9b01      	ldr	r3, [sp, #4]
   22836:	2b00      	cmp	r3, #0
   22838:	d1e3      	bne.n	22802 <register_events+0x92>
   2283a:	7822      	ldrb	r2, [r4, #0]
   2283c:	2a00      	cmp	r2, #0
   2283e:	d0e0      	beq.n	22802 <register_events+0x92>
	switch (event->type) {
   22840:	f899 200d 	ldrb.w	r2, [r9, #13]
   22844:	f002 020f 	and.w	r2, r2, #15
   22848:	2a04      	cmp	r2, #4
   2284a:	d852      	bhi.n	228f2 <register_events+0x182>
   2284c:	e8df f002 	tbb	[pc, r2]
   22850:	51164029 	.word	0x51164029
   22854:	2e          	.byte	0x2e
   22855:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   22856:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2285a:	6892      	ldr	r2, [r2, #8]
   2285c:	2a00      	cmp	r2, #0
   2285e:	d0e9      	beq.n	22834 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   22860:	2101      	movs	r1, #1
   22862:	e7c0      	b.n	227e6 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   22864:	4628      	mov	r0, r5
   22866:	492a      	ldr	r1, [pc, #168]	; (22910 <register_events+0x1a0>)
   22868:	2254      	movs	r2, #84	; 0x54
   2286a:	f000 fa5f 	bl	22d2c <printk>
   2286e:	4828      	ldr	r0, [pc, #160]	; (22910 <register_events+0x1a0>)
   22870:	2154      	movs	r1, #84	; 0x54
   22872:	f000 fcbe 	bl	231f2 <assert_post_action>
		break;
   22876:	e7dd      	b.n	22834 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22878:	2104      	movs	r1, #4
   2287a:	e7b4      	b.n	227e6 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2287c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22880:	b942      	cbnz	r2, 22894 <register_events+0x124>
   22882:	4923      	ldr	r1, [pc, #140]	; (22910 <register_events+0x1a0>)
   22884:	4628      	mov	r0, r5
   22886:	227e      	movs	r2, #126	; 0x7e
   22888:	f000 fa50 	bl	22d2c <printk>
   2288c:	4820      	ldr	r0, [pc, #128]	; (22910 <register_events+0x1a0>)
   2288e:	217e      	movs	r1, #126	; 0x7e
   22890:	f000 fcaf 	bl	231f2 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   22894:	f8d9 0010 	ldr.w	r0, [r9, #16]
   22898:	4622      	mov	r2, r4
   2289a:	4649      	mov	r1, r9
   2289c:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2289e:	f004 fa5d 	bl	26d5c <add_event>
	event->poller = poller;
   228a2:	f8c9 4008 	str.w	r4, [r9, #8]
				events_registered += 1;
   228a6:	f108 0801 	add.w	r8, r8, #1
   228aa:	e7aa      	b.n	22802 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   228ac:	f8d9 2010 	ldr.w	r2, [r9, #16]
   228b0:	b942      	cbnz	r2, 228c4 <register_events+0x154>
   228b2:	4917      	ldr	r1, [pc, #92]	; (22910 <register_events+0x1a0>)
   228b4:	4628      	mov	r0, r5
   228b6:	2282      	movs	r2, #130	; 0x82
   228b8:	f000 fa38 	bl	22d2c <printk>
   228bc:	4814      	ldr	r0, [pc, #80]	; (22910 <register_events+0x1a0>)
   228be:	2182      	movs	r1, #130	; 0x82
   228c0:	f000 fc97 	bl	231f2 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   228c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   228c8:	4622      	mov	r2, r4
   228ca:	4649      	mov	r1, r9
   228cc:	3014      	adds	r0, #20
   228ce:	e7e6      	b.n	2289e <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   228d0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   228d4:	b942      	cbnz	r2, 228e8 <register_events+0x178>
   228d6:	490e      	ldr	r1, [pc, #56]	; (22910 <register_events+0x1a0>)
   228d8:	4628      	mov	r0, r5
   228da:	2286      	movs	r2, #134	; 0x86
   228dc:	f000 fa26 	bl	22d2c <printk>
   228e0:	480b      	ldr	r0, [pc, #44]	; (22910 <register_events+0x1a0>)
   228e2:	2186      	movs	r1, #134	; 0x86
   228e4:	f000 fc85 	bl	231f2 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   228e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   228ec:	4622      	mov	r2, r4
   228ee:	4649      	mov	r1, r9
   228f0:	e7d5      	b.n	2289e <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   228f2:	4628      	mov	r0, r5
   228f4:	4906      	ldr	r1, [pc, #24]	; (22910 <register_events+0x1a0>)
   228f6:	228d      	movs	r2, #141	; 0x8d
   228f8:	f000 fa18 	bl	22d2c <printk>
   228fc:	4804      	ldr	r0, [pc, #16]	; (22910 <register_events+0x1a0>)
   228fe:	218d      	movs	r1, #141	; 0x8d
   22900:	f000 fc77 	bl	231f2 <assert_post_action>
		break;
   22904:	e7cd      	b.n	228a2 <register_events+0x132>
   22906:	bf00      	nop
   22908:	00027cd4 	.word	0x00027cd4
   2290c:	00027c9a 	.word	0x00027c9a
   22910:	0002a72f 	.word	0x0002a72f
   22914:	20002b7c 	.word	0x20002b7c

00022918 <k_poll_event_init>:
{
   22918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2291a:	4605      	mov	r5, r0
   2291c:	460f      	mov	r7, r1
   2291e:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   22920:	4614      	mov	r4, r2
   22922:	b142      	cbz	r2, 22936 <k_poll_event_init+0x1e>
   22924:	4915      	ldr	r1, [pc, #84]	; (2297c <k_poll_event_init+0x64>)
   22926:	4816      	ldr	r0, [pc, #88]	; (22980 <k_poll_event_init+0x68>)
   22928:	222d      	movs	r2, #45	; 0x2d
   2292a:	f000 f9ff 	bl	22d2c <printk>
   2292e:	4813      	ldr	r0, [pc, #76]	; (2297c <k_poll_event_init+0x64>)
   22930:	212d      	movs	r1, #45	; 0x2d
   22932:	f000 fc5e 	bl	231f2 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22936:	2f0f      	cmp	r7, #15
   22938:	d908      	bls.n	2294c <k_poll_event_init+0x34>
   2293a:	4910      	ldr	r1, [pc, #64]	; (2297c <k_poll_event_init+0x64>)
   2293c:	4810      	ldr	r0, [pc, #64]	; (22980 <k_poll_event_init+0x68>)
   2293e:	222f      	movs	r2, #47	; 0x2f
   22940:	f000 f9f4 	bl	22d2c <printk>
   22944:	480d      	ldr	r0, [pc, #52]	; (2297c <k_poll_event_init+0x64>)
   22946:	212f      	movs	r1, #47	; 0x2f
   22948:	f000 fc53 	bl	231f2 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   2294c:	b946      	cbnz	r6, 22960 <k_poll_event_init+0x48>
   2294e:	490b      	ldr	r1, [pc, #44]	; (2297c <k_poll_event_init+0x64>)
   22950:	480b      	ldr	r0, [pc, #44]	; (22980 <k_poll_event_init+0x68>)
   22952:	2230      	movs	r2, #48	; 0x30
   22954:	f000 f9ea 	bl	22d2c <printk>
   22958:	4808      	ldr	r0, [pc, #32]	; (2297c <k_poll_event_init+0x64>)
   2295a:	2130      	movs	r1, #48	; 0x30
   2295c:	f000 fc49 	bl	231f2 <assert_post_action>
	event->poller = NULL;
   22960:	2300      	movs	r3, #0
	event->type = type;
   22962:	0464      	lsls	r4, r4, #17
   22964:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   22966:	60ab      	str	r3, [r5, #8]
	event->type = type;
   22968:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   2296c:	7b2b      	ldrb	r3, [r5, #12]
   2296e:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   22972:	433c      	orrs	r4, r7
   22974:	431c      	orrs	r4, r3
	event->obj = obj;
   22976:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   2297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2297c:	0002a72f 	.word	0x0002a72f
   22980:	00027c9a 	.word	0x00027c9a

00022984 <z_impl_k_poll>:
{
   22984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22988:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   2298a:	4b64      	ldr	r3, [pc, #400]	; (22b1c <z_impl_k_poll+0x198>)
   2298c:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   2298e:	2301      	movs	r3, #1
{
   22990:	b085      	sub	sp, #20
   22992:	4604      	mov	r4, r0
   22994:	4688      	mov	r8, r1
   22996:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   22998:	f105 096c 	add.w	r9, r5, #108	; 0x6c
	poller->is_polling = true;
   2299c:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
	poller->mode = MODE_POLL;
   229a0:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   229a4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   229a8:	b153      	cbz	r3, 229c0 <z_impl_k_poll+0x3c>
   229aa:	495d      	ldr	r1, [pc, #372]	; (22b20 <z_impl_k_poll+0x19c>)
   229ac:	485d      	ldr	r0, [pc, #372]	; (22b24 <z_impl_k_poll+0x1a0>)
   229ae:	f44f 7285 	mov.w	r2, #266	; 0x10a
   229b2:	f000 f9bb 	bl	22d2c <printk>
   229b6:	485a      	ldr	r0, [pc, #360]	; (22b20 <z_impl_k_poll+0x19c>)
   229b8:	f44f 7185 	mov.w	r1, #266	; 0x10a
   229bc:	f000 fc19 	bl	231f2 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   229c0:	b954      	cbnz	r4, 229d8 <z_impl_k_poll+0x54>
   229c2:	4957      	ldr	r1, [pc, #348]	; (22b20 <z_impl_k_poll+0x19c>)
   229c4:	4857      	ldr	r0, [pc, #348]	; (22b24 <z_impl_k_poll+0x1a0>)
   229c6:	f240 120b 	movw	r2, #267	; 0x10b
   229ca:	f000 f9af 	bl	22d2c <printk>
   229ce:	4854      	ldr	r0, [pc, #336]	; (22b20 <z_impl_k_poll+0x19c>)
   229d0:	f240 110b 	movw	r1, #267	; 0x10b
   229d4:	f000 fc0d 	bl	231f2 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   229d8:	f1b8 0f00 	cmp.w	r8, #0
   229dc:	da0a      	bge.n	229f4 <z_impl_k_poll+0x70>
   229de:	4950      	ldr	r1, [pc, #320]	; (22b20 <z_impl_k_poll+0x19c>)
   229e0:	4850      	ldr	r0, [pc, #320]	; (22b24 <z_impl_k_poll+0x1a0>)
   229e2:	f44f 7286 	mov.w	r2, #268	; 0x10c
   229e6:	f000 f9a1 	bl	22d2c <printk>
   229ea:	484d      	ldr	r0, [pc, #308]	; (22b20 <z_impl_k_poll+0x19c>)
   229ec:	f44f 7186 	mov.w	r1, #268	; 0x10c
   229f0:	f000 fbff 	bl	231f2 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   229f4:	ea56 0307 	orrs.w	r3, r6, r7
   229f8:	bf0c      	ite	eq
   229fa:	2301      	moveq	r3, #1
   229fc:	2300      	movne	r3, #0
   229fe:	4641      	mov	r1, r8
   22a00:	464a      	mov	r2, r9
   22a02:	4620      	mov	r0, r4
   22a04:	f7ff feb4 	bl	22770 <register_events>
   22a08:	4680      	mov	r8, r0
	__asm__ volatile(
   22a0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a0e:	f3ef 8911 	mrs	r9, BASEPRI
   22a12:	f383 8811 	msr	BASEPRI, r3
   22a16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a1a:	4843      	ldr	r0, [pc, #268]	; (22b28 <z_impl_k_poll+0x1a4>)
   22a1c:	f7ff f9de 	bl	21ddc <z_spin_lock_valid>
   22a20:	b940      	cbnz	r0, 22a34 <z_impl_k_poll+0xb0>
   22a22:	4942      	ldr	r1, [pc, #264]	; (22b2c <z_impl_k_poll+0x1a8>)
   22a24:	483f      	ldr	r0, [pc, #252]	; (22b24 <z_impl_k_poll+0x1a0>)
   22a26:	2278      	movs	r2, #120	; 0x78
   22a28:	f000 f980 	bl	22d2c <printk>
   22a2c:	483f      	ldr	r0, [pc, #252]	; (22b2c <z_impl_k_poll+0x1a8>)
   22a2e:	2178      	movs	r1, #120	; 0x78
   22a30:	f000 fbdf 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a34:	483c      	ldr	r0, [pc, #240]	; (22b28 <z_impl_k_poll+0x1a4>)
   22a36:	f7ff f9ef 	bl	21e18 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   22a3a:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
   22a3e:	b9d3      	cbnz	r3, 22a76 <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   22a40:	4620      	mov	r0, r4
   22a42:	464a      	mov	r2, r9
   22a44:	4641      	mov	r1, r8
   22a46:	f7ff fd9f 	bl	22588 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a4a:	4837      	ldr	r0, [pc, #220]	; (22b28 <z_impl_k_poll+0x1a4>)
   22a4c:	f7ff f9d4 	bl	21df8 <z_spin_unlock_valid>
   22a50:	b940      	cbnz	r0, 22a64 <z_impl_k_poll+0xe0>
   22a52:	4936      	ldr	r1, [pc, #216]	; (22b2c <z_impl_k_poll+0x1a8>)
   22a54:	4833      	ldr	r0, [pc, #204]	; (22b24 <z_impl_k_poll+0x1a0>)
   22a56:	22a3      	movs	r2, #163	; 0xa3
   22a58:	f000 f968 	bl	22d2c <printk>
   22a5c:	4833      	ldr	r0, [pc, #204]	; (22b2c <z_impl_k_poll+0x1a8>)
   22a5e:	21a3      	movs	r1, #163	; 0xa3
   22a60:	f000 fbc7 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22a64:	f389 8811 	msr	BASEPRI, r9
   22a68:	f3bf 8f6f 	isb	sy
		return 0;
   22a6c:	2500      	movs	r5, #0
}
   22a6e:	4628      	mov	r0, r5
   22a70:	b005      	add	sp, #20
   22a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   22a76:	2300      	movs	r3, #0
   22a78:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22a7c:	ea56 0307 	orrs.w	r3, r6, r7
   22a80:	d113      	bne.n	22aaa <z_impl_k_poll+0x126>
   22a82:	4829      	ldr	r0, [pc, #164]	; (22b28 <z_impl_k_poll+0x1a4>)
   22a84:	f7ff f9b8 	bl	21df8 <z_spin_unlock_valid>
   22a88:	b940      	cbnz	r0, 22a9c <z_impl_k_poll+0x118>
   22a8a:	4928      	ldr	r1, [pc, #160]	; (22b2c <z_impl_k_poll+0x1a8>)
   22a8c:	4825      	ldr	r0, [pc, #148]	; (22b24 <z_impl_k_poll+0x1a0>)
   22a8e:	22a3      	movs	r2, #163	; 0xa3
   22a90:	f000 f94c 	bl	22d2c <printk>
   22a94:	4825      	ldr	r0, [pc, #148]	; (22b2c <z_impl_k_poll+0x1a8>)
   22a96:	21a3      	movs	r1, #163	; 0xa3
   22a98:	f000 fbab 	bl	231f2 <assert_post_action>
   22a9c:	f389 8811 	msr	BASEPRI, r9
   22aa0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22aa4:	f06f 050a 	mvn.w	r5, #10
   22aa8:	e7e1      	b.n	22a6e <z_impl_k_poll+0xea>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   22aaa:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22aac:	e9cd 6700 	strd	r6, r7, [sp]
   22ab0:	4649      	mov	r1, r9
   22ab2:	481d      	ldr	r0, [pc, #116]	; (22b28 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   22ab4:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22ab8:	f7fe fd40 	bl	2153c <z_pend_curr>
   22abc:	4605      	mov	r5, r0
	__asm__ volatile(
   22abe:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ac2:	f3ef 8611 	mrs	r6, BASEPRI
   22ac6:	f383 8811 	msr	BASEPRI, r3
   22aca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ace:	4816      	ldr	r0, [pc, #88]	; (22b28 <z_impl_k_poll+0x1a4>)
   22ad0:	f7ff f984 	bl	21ddc <z_spin_lock_valid>
   22ad4:	b940      	cbnz	r0, 22ae8 <z_impl_k_poll+0x164>
   22ad6:	4915      	ldr	r1, [pc, #84]	; (22b2c <z_impl_k_poll+0x1a8>)
   22ad8:	4812      	ldr	r0, [pc, #72]	; (22b24 <z_impl_k_poll+0x1a0>)
   22ada:	2278      	movs	r2, #120	; 0x78
   22adc:	f000 f926 	bl	22d2c <printk>
   22ae0:	4812      	ldr	r0, [pc, #72]	; (22b2c <z_impl_k_poll+0x1a8>)
   22ae2:	2178      	movs	r1, #120	; 0x78
   22ae4:	f000 fb85 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ae8:	480f      	ldr	r0, [pc, #60]	; (22b28 <z_impl_k_poll+0x1a4>)
   22aea:	f7ff f995 	bl	21e18 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   22aee:	4620      	mov	r0, r4
   22af0:	4632      	mov	r2, r6
   22af2:	4641      	mov	r1, r8
   22af4:	f7ff fd48 	bl	22588 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22af8:	480b      	ldr	r0, [pc, #44]	; (22b28 <z_impl_k_poll+0x1a4>)
   22afa:	f7ff f97d 	bl	21df8 <z_spin_unlock_valid>
   22afe:	b940      	cbnz	r0, 22b12 <z_impl_k_poll+0x18e>
   22b00:	490a      	ldr	r1, [pc, #40]	; (22b2c <z_impl_k_poll+0x1a8>)
   22b02:	4808      	ldr	r0, [pc, #32]	; (22b24 <z_impl_k_poll+0x1a0>)
   22b04:	22a3      	movs	r2, #163	; 0xa3
   22b06:	f000 f911 	bl	22d2c <printk>
   22b0a:	4808      	ldr	r0, [pc, #32]	; (22b2c <z_impl_k_poll+0x1a8>)
   22b0c:	21a3      	movs	r1, #163	; 0xa3
   22b0e:	f000 fb70 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22b12:	f386 8811 	msr	BASEPRI, r6
   22b16:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22b1a:	e7a8      	b.n	22a6e <z_impl_k_poll+0xea>
   22b1c:	20002b28 	.word	0x20002b28
   22b20:	0002a72f 	.word	0x0002a72f
   22b24:	00027c9a 	.word	0x00027c9a
   22b28:	20002b7c 	.word	0x20002b7c
   22b2c:	00027cd4 	.word	0x00027cd4

00022b30 <z_impl_k_poll_signal_raise>:
{
   22b30:	b570      	push	{r4, r5, r6, lr}
   22b32:	4604      	mov	r4, r0
   22b34:	460d      	mov	r5, r1
	__asm__ volatile(
   22b36:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b3a:	f3ef 8611 	mrs	r6, BASEPRI
   22b3e:	f383 8811 	msr	BASEPRI, r3
   22b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b46:	481c      	ldr	r0, [pc, #112]	; (22bb8 <z_impl_k_poll_signal_raise+0x88>)
   22b48:	f7ff f948 	bl	21ddc <z_spin_lock_valid>
   22b4c:	b940      	cbnz	r0, 22b60 <z_impl_k_poll_signal_raise+0x30>
   22b4e:	491b      	ldr	r1, [pc, #108]	; (22bbc <z_impl_k_poll_signal_raise+0x8c>)
   22b50:	481b      	ldr	r0, [pc, #108]	; (22bc0 <z_impl_k_poll_signal_raise+0x90>)
   22b52:	2278      	movs	r2, #120	; 0x78
   22b54:	f000 f8ea 	bl	22d2c <printk>
   22b58:	4818      	ldr	r0, [pc, #96]	; (22bbc <z_impl_k_poll_signal_raise+0x8c>)
   22b5a:	2178      	movs	r1, #120	; 0x78
   22b5c:	f000 fb49 	bl	231f2 <assert_post_action>
	z_spin_lock_set_owner(l);
   22b60:	4815      	ldr	r0, [pc, #84]	; (22bb8 <z_impl_k_poll_signal_raise+0x88>)
   22b62:	f7ff f959 	bl	21e18 <z_spin_lock_set_owner>
	return list->head == list;
   22b66:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   22b68:	60e5      	str	r5, [r4, #12]
	signal->signaled = 1U;
   22b6a:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22b6c:	4284      	cmp	r4, r0
   22b6e:	60a1      	str	r1, [r4, #8]
   22b70:	d112      	bne.n	22b98 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b72:	4811      	ldr	r0, [pc, #68]	; (22bb8 <z_impl_k_poll_signal_raise+0x88>)
   22b74:	f7ff f940 	bl	21df8 <z_spin_unlock_valid>
   22b78:	b940      	cbnz	r0, 22b8c <z_impl_k_poll_signal_raise+0x5c>
   22b7a:	4910      	ldr	r1, [pc, #64]	; (22bbc <z_impl_k_poll_signal_raise+0x8c>)
   22b7c:	4810      	ldr	r0, [pc, #64]	; (22bc0 <z_impl_k_poll_signal_raise+0x90>)
   22b7e:	22a3      	movs	r2, #163	; 0xa3
   22b80:	f000 f8d4 	bl	22d2c <printk>
   22b84:	480d      	ldr	r0, [pc, #52]	; (22bbc <z_impl_k_poll_signal_raise+0x8c>)
   22b86:	21a3      	movs	r1, #163	; 0xa3
   22b88:	f000 fb33 	bl	231f2 <assert_post_action>
	__asm__ volatile(
   22b8c:	f386 8811 	msr	BASEPRI, r6
   22b90:	f3bf 8f6f 	isb	sy
		return 0;
   22b94:	2400      	movs	r4, #0
   22b96:	e00d      	b.n	22bb4 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   22b98:	e9d0 3200 	ldrd	r3, r2, [r0]
   22b9c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22b9e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22ba0:	2300      	movs	r3, #0
	node->prev = NULL;
   22ba2:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22ba6:	f7ff fd75 	bl	22694 <signal_poll_event>
	z_reschedule(&lock, key);
   22baa:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22bac:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   22bae:	4802      	ldr	r0, [pc, #8]	; (22bb8 <z_impl_k_poll_signal_raise+0x88>)
   22bb0:	f7fd ff70 	bl	20a94 <z_reschedule>
}
   22bb4:	4620      	mov	r0, r4
   22bb6:	bd70      	pop	{r4, r5, r6, pc}
   22bb8:	20002b7c 	.word	0x20002b7c
   22bbc:	00027cd4 	.word	0x00027cd4
   22bc0:	00027c9a 	.word	0x00027c9a

00022bc4 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   22bc4:	b510      	push	{r4, lr}
   22bc6:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   22bc8:	f004 f809 	bl	26bde <k_is_in_isr>
   22bcc:	b948      	cbnz	r0, 22be2 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   22bce:	4b06      	ldr	r3, [pc, #24]	; (22be8 <z_thread_malloc+0x24>)
   22bd0:	689b      	ldr	r3, [r3, #8]
   22bd2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
	}

	if (pool) {
   22bd6:	b120      	cbz	r0, 22be2 <z_thread_malloc+0x1e>
		ret = k_mem_pool_malloc(pool, size);
   22bd8:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   22bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   22bde:	f004 b900 	b.w	26de2 <k_mem_pool_malloc>
}
   22be2:	2000      	movs	r0, #0
   22be4:	bd10      	pop	{r4, pc}
   22be6:	bf00      	nop
   22be8:	20002b28 	.word	0x20002b28

00022bec <app_led_cb>:
{
   22bec:	4601      	mov	r1, r0
        dk_set_led(USER_LED, led_state);
   22bee:	2002      	movs	r0, #2
   22bf0:	f7fb bf34 	b.w	1ea5c <dk_set_led>

00022bf4 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   22bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   22bf6:	f04f 0c0a 	mov.w	ip, #10
{
   22bfa:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   22bfc:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   22bfe:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   22c00:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   22c02:	b111      	cbz	r1, 22c0a <u8_to_dec+0x16>
   22c04:	3e01      	subs	r6, #1
   22c06:	d101      	bne.n	22c0c <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   22c08:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   22c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22c0c:	42a2      	cmp	r2, r4
		digit = value / divisor;
   22c0e:	fbb2 f7f4 	udiv	r7, r2, r4
   22c12:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22c14:	d202      	bcs.n	22c1c <u8_to_dec+0x28>
   22c16:	2c01      	cmp	r4, #1
   22c18:	d000      	beq.n	22c1c <u8_to_dec+0x28>
   22c1a:	b130      	cbz	r0, 22c2a <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   22c1c:	3330      	adds	r3, #48	; 0x30
   22c1e:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   22c22:	3901      	subs	r1, #1
			num_digits++;
   22c24:	1c43      	adds	r3, r0, #1
			buflen--;
   22c26:	b2c9      	uxtb	r1, r1
			num_digits++;
   22c28:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   22c2a:	fb04 2217 	mls	r2, r4, r7, r2
   22c2e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   22c30:	fbb4 f4fc 	udiv	r4, r4, ip
   22c34:	e7e5      	b.n	22c02 <u8_to_dec+0xe>

00022c36 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   22c36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   22c3a:	b2db      	uxtb	r3, r3
   22c3c:	2b09      	cmp	r3, #9
   22c3e:	d802      	bhi.n	22c46 <char2hex+0x10>
		*x = c - '0';
   22c40:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   22c42:	2000      	movs	r0, #0
   22c44:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   22c46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   22c4a:	2b05      	cmp	r3, #5
   22c4c:	d802      	bhi.n	22c54 <char2hex+0x1e>
		*x = c - 'a' + 10;
   22c4e:	3857      	subs	r0, #87	; 0x57
   22c50:	7008      	strb	r0, [r1, #0]
   22c52:	e7f6      	b.n	22c42 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   22c54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   22c58:	2b05      	cmp	r3, #5
   22c5a:	d801      	bhi.n	22c60 <char2hex+0x2a>
		*x = c - 'A' + 10;
   22c5c:	3837      	subs	r0, #55	; 0x37
   22c5e:	e7f7      	b.n	22c50 <char2hex+0x1a>
		return -EINVAL;
   22c60:	f06f 0015 	mvn.w	r0, #21
}
   22c64:	4770      	bx	lr

00022c66 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   22c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22c68:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   22c6a:	f001 0001 	and.w	r0, r1, #1
   22c6e:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   22c72:	429d      	cmp	r5, r3
   22c74:	ea4f 0651 	mov.w	r6, r1, lsr #1
   22c78:	d903      	bls.n	22c82 <hex2bin+0x1c>
		return 0;
   22c7a:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   22c7c:	4628      	mov	r0, r5
   22c7e:	b003      	add	sp, #12
   22c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   22c82:	b158      	cbz	r0, 22c9c <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   22c84:	7820      	ldrb	r0, [r4, #0]
   22c86:	f10d 0107 	add.w	r1, sp, #7
   22c8a:	f7ff ffd4 	bl	22c36 <char2hex>
   22c8e:	2800      	cmp	r0, #0
   22c90:	dbf3      	blt.n	22c7a <hex2bin+0x14>
		buf[0] = dec;
   22c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22c96:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   22c9a:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   22c9c:	3401      	adds	r4, #1
   22c9e:	4416      	add	r6, r2
   22ca0:	42b2      	cmp	r2, r6
   22ca2:	d0eb      	beq.n	22c7c <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   22ca4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   22ca8:	f10d 0107 	add.w	r1, sp, #7
   22cac:	f7ff ffc3 	bl	22c36 <char2hex>
   22cb0:	2800      	cmp	r0, #0
   22cb2:	dbe2      	blt.n	22c7a <hex2bin+0x14>
		buf[i] = dec << 4;
   22cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22cb8:	011b      	lsls	r3, r3, #4
   22cba:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   22cbc:	f814 0b02 	ldrb.w	r0, [r4], #2
   22cc0:	f10d 0107 	add.w	r1, sp, #7
   22cc4:	f7ff ffb7 	bl	22c36 <char2hex>
   22cc8:	2800      	cmp	r0, #0
   22cca:	dbd6      	blt.n	22c7a <hex2bin+0x14>
		buf[i] += dec;
   22ccc:	7813      	ldrb	r3, [r2, #0]
   22cce:	f89d 1007 	ldrb.w	r1, [sp, #7]
   22cd2:	440b      	add	r3, r1
   22cd4:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   22cd8:	e7e2      	b.n	22ca0 <hex2bin+0x3a>

00022cda <sys_notify_validate>:
	if (notify == NULL) {
   22cda:	4603      	mov	r3, r0
   22cdc:	b140      	cbz	r0, 22cf0 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22cde:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   22ce0:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   22ce4:	2a02      	cmp	r2, #2
   22ce6:	d006      	beq.n	22cf6 <sys_notify_validate+0x1c>
   22ce8:	2a03      	cmp	r2, #3
   22cea:	d004      	beq.n	22cf6 <sys_notify_validate+0x1c>
   22cec:	2a01      	cmp	r2, #1
   22cee:	d005      	beq.n	22cfc <sys_notify_validate+0x22>
		return -EINVAL;
   22cf0:	f06f 0015 	mvn.w	r0, #21
}
   22cf4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   22cf6:	681a      	ldr	r2, [r3, #0]
   22cf8:	2a00      	cmp	r2, #0
   22cfa:	d0f9      	beq.n	22cf0 <sys_notify_validate+0x16>
		notify->result = 0;
   22cfc:	2000      	movs	r0, #0
   22cfe:	6098      	str	r0, [r3, #8]
   22d00:	4770      	bx	lr

00022d02 <arch_printk_char_out>:
}
   22d02:	2000      	movs	r0, #0
   22d04:	4770      	bx	lr

00022d06 <str_out>:
{
   22d06:	b530      	push	{r4, r5, lr}
   22d08:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   22d0a:	680c      	ldr	r4, [r1, #0]
   22d0c:	1c55      	adds	r5, r2, #1
   22d0e:	b114      	cbz	r4, 22d16 <str_out+0x10>
   22d10:	684b      	ldr	r3, [r1, #4]
   22d12:	4293      	cmp	r3, r2
   22d14:	dc01      	bgt.n	22d1a <str_out+0x14>
		ctx->count++;
   22d16:	608d      	str	r5, [r1, #8]
}
   22d18:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   22d1a:	3b01      	subs	r3, #1
   22d1c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   22d1e:	bf08      	it	eq
   22d20:	2200      	moveq	r2, #0
   22d22:	608d      	str	r5, [r1, #8]
   22d24:	bf0c      	ite	eq
   22d26:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   22d28:	54a0      	strbne	r0, [r4, r2]
   22d2a:	e7f5      	b.n	22d18 <str_out+0x12>

00022d2c <printk>:
{
   22d2c:	b40f      	push	{r0, r1, r2, r3}
   22d2e:	b507      	push	{r0, r1, r2, lr}
   22d30:	a904      	add	r1, sp, #16
   22d32:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   22d36:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   22d38:	f7f0 f806 	bl	12d48 <vprintk>
}
   22d3c:	b003      	add	sp, #12
   22d3e:	f85d eb04 	ldr.w	lr, [sp], #4
   22d42:	b004      	add	sp, #16
   22d44:	4770      	bx	lr

00022d46 <snprintk>:
{
   22d46:	b40c      	push	{r2, r3}
   22d48:	b507      	push	{r0, r1, r2, lr}
   22d4a:	ab04      	add	r3, sp, #16
   22d4c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   22d50:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   22d52:	f7f0 f807 	bl	12d64 <vsnprintk>
}
   22d56:	b003      	add	sp, #12
   22d58:	f85d eb04 	ldr.w	lr, [sp], #4
   22d5c:	b002      	add	sp, #8
   22d5e:	4770      	bx	lr

00022d60 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22d60:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   22d62:	f013 0307 	ands.w	r3, r3, #7
   22d66:	d105      	bne.n	22d74 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   22d68:	6803      	ldr	r3, [r0, #0]
   22d6a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   22d6c:	bf0c      	ite	eq
   22d6e:	2000      	moveq	r0, #0
   22d70:	2003      	movne	r0, #3
   22d72:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   22d74:	2b02      	cmp	r3, #2
   22d76:	d105      	bne.n	22d84 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   22d78:	8bc3      	ldrh	r3, [r0, #30]
   22d7a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   22d7c:	bf14      	ite	ne
   22d7e:	2000      	movne	r0, #0
   22d80:	2004      	moveq	r0, #4
   22d82:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   22d84:	2b01      	cmp	r3, #1
   22d86:	d105      	bne.n	22d94 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   22d88:	6803      	ldr	r3, [r0, #0]
   22d8a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   22d8c:	bf0c      	ite	eq
   22d8e:	2000      	moveq	r0, #0
   22d90:	2005      	movne	r0, #5
   22d92:	4770      	bx	lr
	int evt = EVT_NOP;
   22d94:	2000      	movs	r0, #0
}
   22d96:	4770      	bx	lr

00022d98 <notify_one>:
{
   22d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d9c:	460d      	mov	r5, r1
   22d9e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22da0:	4619      	mov	r1, r3
   22da2:	1d28      	adds	r0, r5, #4
{
   22da4:	4690      	mov	r8, r2
   22da6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22da8:	f7ef ff94 	bl	12cd4 <sys_notify_finalize>
	if (cb) {
   22dac:	4604      	mov	r4, r0
   22dae:	b138      	cbz	r0, 22dc0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   22db0:	4633      	mov	r3, r6
   22db2:	4642      	mov	r2, r8
   22db4:	4629      	mov	r1, r5
   22db6:	4638      	mov	r0, r7
   22db8:	46a4      	mov	ip, r4
}
   22dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   22dbe:	4760      	bx	ip
}
   22dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022dc4 <validate_args>:
{
   22dc4:	b510      	push	{r4, lr}
   22dc6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   22dc8:	b140      	cbz	r0, 22ddc <validate_args+0x18>
   22dca:	b139      	cbz	r1, 22ddc <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   22dcc:	1d08      	adds	r0, r1, #4
   22dce:	f7ff ff84 	bl	22cda <sys_notify_validate>
	if ((rv == 0)
   22dd2:	b928      	cbnz	r0, 22de0 <validate_args+0x1c>
	    && ((cli->notify.flags
   22dd4:	68a3      	ldr	r3, [r4, #8]
   22dd6:	f033 0303 	bics.w	r3, r3, #3
   22dda:	d001      	beq.n	22de0 <validate_args+0x1c>
		rv = -EINVAL;
   22ddc:	f06f 0015 	mvn.w	r0, #21
}
   22de0:	bd10      	pop	{r4, pc}

00022de2 <onoff_manager_init>:
{
   22de2:	b538      	push	{r3, r4, r5, lr}
   22de4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   22de6:	4605      	mov	r5, r0
   22de8:	b158      	cbz	r0, 22e02 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   22dea:	b151      	cbz	r1, 22e02 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   22dec:	680b      	ldr	r3, [r1, #0]
   22dee:	b143      	cbz	r3, 22e02 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   22df0:	684b      	ldr	r3, [r1, #4]
   22df2:	b133      	cbz	r3, 22e02 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   22df4:	2220      	movs	r2, #32
   22df6:	2100      	movs	r1, #0
   22df8:	f001 fe8f 	bl	24b1a <memset>
   22dfc:	612c      	str	r4, [r5, #16]
	return 0;
   22dfe:	2000      	movs	r0, #0
}
   22e00:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22e02:	f06f 0015 	mvn.w	r0, #21
   22e06:	e7fb      	b.n	22e00 <onoff_manager_init+0x1e>

00022e08 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   22e08:	4604      	mov	r4, r0
   22e0a:	b508      	push	{r3, lr}
   22e0c:	4608      	mov	r0, r1
   22e0e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   22e10:	461a      	mov	r2, r3
   22e12:	47a0      	blx	r4
	return z_impl_k_current_get();
   22e14:	f7fe fde6 	bl	219e4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   22e18:	f7f2 fdcc 	bl	159b4 <z_impl_k_thread_abort>

00022e1c <chunk_field>:
	if (big_heap(h)) {
   22e1c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   22e1e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   22e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   22e26:	bf2c      	ite	cs
   22e28:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   22e2c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   22e30:	4770      	bx	lr

00022e32 <chunk_set>:
	void *cmem = &buf[c];
   22e32:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   22e36:	6880      	ldr	r0, [r0, #8]
   22e38:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   22e3c:	bf2c      	ite	cs
   22e3e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   22e42:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   22e46:	4770      	bx	lr

00022e48 <chunk_size>:
{
   22e48:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   22e4a:	2201      	movs	r2, #1
   22e4c:	f7ff ffe6 	bl	22e1c <chunk_field>
}
   22e50:	0840      	lsrs	r0, r0, #1
   22e52:	bd08      	pop	{r3, pc}

00022e54 <set_chunk_used>:
	if (big_heap(h)) {
   22e54:	6883      	ldr	r3, [r0, #8]
   22e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   22e5a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   22e5e:	d308      	bcc.n	22e72 <set_chunk_used+0x1e>
		if (used) {
   22e60:	684b      	ldr	r3, [r1, #4]
   22e62:	b11a      	cbz	r2, 22e6c <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   22e64:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   22e68:	604b      	str	r3, [r1, #4]
   22e6a:	4770      	bx	lr
   22e6c:	f023 0301 	bic.w	r3, r3, #1
   22e70:	e7fa      	b.n	22e68 <set_chunk_used+0x14>
		if (used) {
   22e72:	884b      	ldrh	r3, [r1, #2]
   22e74:	b11a      	cbz	r2, 22e7e <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22e76:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   22e7a:	804b      	strh	r3, [r1, #2]
}
   22e7c:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   22e7e:	f023 0301 	bic.w	r3, r3, #1
   22e82:	e7fa      	b.n	22e7a <set_chunk_used+0x26>

00022e84 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22e84:	0053      	lsls	r3, r2, #1
   22e86:	2201      	movs	r2, #1
   22e88:	f7ff bfd3 	b.w	22e32 <chunk_set>

00022e8c <bucket_idx>:
	return big_heap(h) ? 8 : 4;
   22e8c:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   22e8e:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22e90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   22e94:	bf2c      	ite	cs
   22e96:	2002      	movcs	r0, #2
   22e98:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   22e9a:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   22e9c:	fab0 f080 	clz	r0, r0
}
   22ea0:	f1c0 001f 	rsb	r0, r0, #31
   22ea4:	4770      	bx	lr

00022ea6 <merge_chunks>:
{
   22ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22eaa:	4616      	mov	r6, r2
   22eac:	4604      	mov	r4, r0
   22eae:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   22eb0:	f7ff ffca 	bl	22e48 <chunk_size>
   22eb4:	4631      	mov	r1, r6
   22eb6:	4605      	mov	r5, r0
   22eb8:	4620      	mov	r0, r4
   22eba:	f7ff ffc5 	bl	22e48 <chunk_size>
   22ebe:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   22ec0:	462a      	mov	r2, r5
   22ec2:	4639      	mov	r1, r7
   22ec4:	4620      	mov	r0, r4
   22ec6:	f7ff ffdd 	bl	22e84 <set_chunk_size>
	return c + chunk_size(h, c);
   22eca:	4631      	mov	r1, r6
   22ecc:	4620      	mov	r0, r4
   22ece:	f7ff ffbb 	bl	22e48 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   22ed2:	462b      	mov	r3, r5
   22ed4:	1831      	adds	r1, r6, r0
   22ed6:	2200      	movs	r2, #0
   22ed8:	4620      	mov	r0, r4
}
   22eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22ede:	f7ff bfa8 	b.w	22e32 <chunk_set>

00022ee2 <split_chunks>:
{
   22ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ee6:	4614      	mov	r4, r2
   22ee8:	4605      	mov	r5, r0
   22eea:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   22eec:	f7ff ffac 	bl	22e48 <chunk_size>
	size_t lsz = rc - lc;
   22ef0:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   22ef4:	1b37      	subs	r7, r6, r4
   22ef6:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   22ef8:	4642      	mov	r2, r8
   22efa:	4631      	mov	r1, r6
   22efc:	4628      	mov	r0, r5
   22efe:	f7ff ffc1 	bl	22e84 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   22f02:	463a      	mov	r2, r7
   22f04:	4621      	mov	r1, r4
   22f06:	4628      	mov	r0, r5
   22f08:	f7ff ffbc 	bl	22e84 <set_chunk_size>
   22f0c:	4643      	mov	r3, r8
   22f0e:	2200      	movs	r2, #0
   22f10:	4621      	mov	r1, r4
   22f12:	4628      	mov	r0, r5
   22f14:	f7ff ff8d 	bl	22e32 <chunk_set>
	return c + chunk_size(h, c);
   22f18:	4621      	mov	r1, r4
   22f1a:	4628      	mov	r0, r5
   22f1c:	f7ff ff94 	bl	22e48 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   22f20:	463b      	mov	r3, r7
   22f22:	1821      	adds	r1, r4, r0
   22f24:	2200      	movs	r2, #0
   22f26:	4628      	mov	r0, r5
}
   22f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22f2c:	f7ff bf81 	b.w	22e32 <chunk_set>

00022f30 <free_list_remove_bidx>:
{
   22f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f34:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   22f36:	2203      	movs	r2, #3
   22f38:	460e      	mov	r6, r1
   22f3a:	4604      	mov	r4, r0
   22f3c:	f7ff ff6e 	bl	22e1c <chunk_field>
	if (next_free_chunk(h, c) == c) {
   22f40:	4286      	cmp	r6, r0
   22f42:	4605      	mov	r5, r0
   22f44:	f107 0804 	add.w	r8, r7, #4
   22f48:	d10b      	bne.n	22f62 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   22f4a:	2301      	movs	r3, #1
   22f4c:	fa03 f707 	lsl.w	r7, r3, r7
   22f50:	68e3      	ldr	r3, [r4, #12]
   22f52:	ea23 0307 	bic.w	r3, r3, r7
   22f56:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   22f58:	2300      	movs	r3, #0
   22f5a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   22f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   22f62:	4631      	mov	r1, r6
   22f64:	2202      	movs	r2, #2
   22f66:	4620      	mov	r0, r4
   22f68:	f7ff ff58 	bl	22e1c <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   22f6c:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   22f6e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   22f70:	4601      	mov	r1, r0
		b->next = second;
   22f72:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   22f76:	4620      	mov	r0, r4
   22f78:	2203      	movs	r2, #3
   22f7a:	f7ff ff5a 	bl	22e32 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   22f7e:	4633      	mov	r3, r6
   22f80:	4629      	mov	r1, r5
   22f82:	4620      	mov	r0, r4
   22f84:	2202      	movs	r2, #2
}
   22f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22f8a:	f7ff bf52 	b.w	22e32 <chunk_set>

00022f8e <free_list_remove>:
{
   22f8e:	b538      	push	{r3, r4, r5, lr}
   22f90:	4604      	mov	r4, r0
   22f92:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   22f94:	f7ff ff58 	bl	22e48 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   22f98:	68a3      	ldr	r3, [r4, #8]
   22f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   22f9e:	4601      	mov	r1, r0
   22fa0:	d301      	bcc.n	22fa6 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   22fa2:	2801      	cmp	r0, #1
   22fa4:	d009      	beq.n	22fba <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   22fa6:	4620      	mov	r0, r4
   22fa8:	f7ff ff70 	bl	22e8c <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   22fac:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   22fae:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   22fb0:	4620      	mov	r0, r4
}
   22fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   22fb6:	f7ff bfbb 	b.w	22f30 <free_list_remove_bidx>
}
   22fba:	bd38      	pop	{r3, r4, r5, pc}

00022fbc <alloc_chunk>:
{
   22fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22fc0:	4604      	mov	r4, r0
   22fc2:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   22fc4:	f7ff ff62 	bl	22e8c <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   22fc8:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   22fca:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   22fcc:	4620      	mov	r0, r4
   22fce:	f7ff ff5d 	bl	22e8c <bucket_idx>
   22fd2:	42a8      	cmp	r0, r5
   22fd4:	da03      	bge.n	22fde <alloc_chunk+0x22>
		return 0;
   22fd6:	2600      	movs	r6, #0
}
   22fd8:	4630      	mov	r0, r6
   22fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   22fde:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   22fe2:	f8da 9010 	ldr.w	r9, [sl, #16]
   22fe6:	f1b9 0f00 	cmp.w	r9, #0
   22fea:	d019      	beq.n	23020 <alloc_chunk+0x64>
   22fec:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   22fee:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   22ff2:	4620      	mov	r0, r4
   22ff4:	4631      	mov	r1, r6
   22ff6:	f7ff ff27 	bl	22e48 <chunk_size>
   22ffa:	4540      	cmp	r0, r8
   22ffc:	d305      	bcc.n	2300a <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   22ffe:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   23000:	4631      	mov	r1, r6
   23002:	4620      	mov	r0, r4
   23004:	f7ff ff94 	bl	22f30 <free_list_remove_bidx>
		return c;
   23008:	e7e6      	b.n	22fd8 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   2300a:	2203      	movs	r2, #3
   2300c:	4631      	mov	r1, r6
   2300e:	4620      	mov	r0, r4
   23010:	f7ff ff04 	bl	22e1c <chunk_field>
		} while (--i && b->next != first);
   23014:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   23016:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   2301a:	d001      	beq.n	23020 <alloc_chunk+0x64>
   2301c:	4581      	cmp	r9, r0
   2301e:	d1e6      	bne.n	22fee <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   23020:	68e3      	ldr	r3, [r4, #12]
   23022:	3501      	adds	r5, #1
   23024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23028:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   2302a:	401a      	ands	r2, r3
   2302c:	d0d3      	beq.n	22fd6 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   2302e:	fa92 f2a2 	rbit	r2, r2
   23032:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23036:	1d13      	adds	r3, r2, #4
   23038:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   2303c:	e7e0      	b.n	23000 <alloc_chunk+0x44>

0002303e <free_list_add>:
{
   2303e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23042:	4604      	mov	r4, r0
   23044:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   23046:	f7ff feff 	bl	22e48 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   2304a:	68a3      	ldr	r3, [r4, #8]
   2304c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23050:	4601      	mov	r1, r0
   23052:	d301      	bcc.n	23058 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   23054:	2801      	cmp	r0, #1
   23056:	d035      	beq.n	230c4 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   23058:	4620      	mov	r0, r4
   2305a:	f7ff ff17 	bl	22e8c <bucket_idx>
	if (b->next == 0U) {
   2305e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   23062:	6916      	ldr	r6, [r2, #16]
   23064:	b99e      	cbnz	r6, 2308e <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   23066:	2301      	movs	r3, #1
   23068:	fa03 f000 	lsl.w	r0, r3, r0
   2306c:	68e3      	ldr	r3, [r4, #12]
   2306e:	4303      	orrs	r3, r0
   23070:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   23072:	4629      	mov	r1, r5
		b->next = c;
   23074:	6115      	str	r5, [r2, #16]
   23076:	462b      	mov	r3, r5
   23078:	2202      	movs	r2, #2
   2307a:	4620      	mov	r0, r4
   2307c:	f7ff fed9 	bl	22e32 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   23080:	2203      	movs	r2, #3
   23082:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   23084:	4620      	mov	r0, r4
}
   23086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2308a:	f7ff bed2 	b.w	22e32 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2308e:	2202      	movs	r2, #2
   23090:	4631      	mov	r1, r6
   23092:	4620      	mov	r0, r4
   23094:	f7ff fec2 	bl	22e1c <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   23098:	2202      	movs	r2, #2
   2309a:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   2309c:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2309e:	4629      	mov	r1, r5
   230a0:	4620      	mov	r0, r4
   230a2:	f7ff fec6 	bl	22e32 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   230a6:	4633      	mov	r3, r6
   230a8:	2203      	movs	r2, #3
   230aa:	4629      	mov	r1, r5
   230ac:	4620      	mov	r0, r4
   230ae:	f7ff fec0 	bl	22e32 <chunk_set>
   230b2:	2203      	movs	r2, #3
   230b4:	4639      	mov	r1, r7
   230b6:	462b      	mov	r3, r5
   230b8:	4620      	mov	r0, r4
   230ba:	f7ff feba 	bl	22e32 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   230be:	2202      	movs	r2, #2
   230c0:	4631      	mov	r1, r6
   230c2:	e7df      	b.n	23084 <free_list_add+0x46>
   230c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000230c8 <sys_heap_alloc>:
{
   230c8:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   230ca:	b909      	cbnz	r1, 230d0 <sys_heap_alloc+0x8>
		return NULL;
   230cc:	2000      	movs	r0, #0
}
   230ce:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   230d0:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   230d2:	68ab      	ldr	r3, [r5, #8]
   230d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   230d8:	bf2c      	ite	cs
   230da:	2208      	movcs	r2, #8
   230dc:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   230de:	1dcc      	adds	r4, r1, #7
   230e0:	4414      	add	r4, r2
   230e2:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   230e4:	4621      	mov	r1, r4
   230e6:	4628      	mov	r0, r5
   230e8:	f7ff ff68 	bl	22fbc <alloc_chunk>
	if (c == 0U) {
   230ec:	4606      	mov	r6, r0
   230ee:	2800      	cmp	r0, #0
   230f0:	d0ec      	beq.n	230cc <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   230f2:	4601      	mov	r1, r0
   230f4:	4628      	mov	r0, r5
   230f6:	f7ff fea7 	bl	22e48 <chunk_size>
   230fa:	42a0      	cmp	r0, r4
   230fc:	d909      	bls.n	23112 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   230fe:	4434      	add	r4, r6
   23100:	4631      	mov	r1, r6
   23102:	4628      	mov	r0, r5
   23104:	4622      	mov	r2, r4
   23106:	f7ff feec 	bl	22ee2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2310a:	4621      	mov	r1, r4
   2310c:	4628      	mov	r0, r5
   2310e:	f7ff ff96 	bl	2303e <free_list_add>
	set_chunk_used(h, c, true);
   23112:	4628      	mov	r0, r5
   23114:	2201      	movs	r2, #1
   23116:	4631      	mov	r1, r6
   23118:	f7ff fe9c 	bl	22e54 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   2311c:	68ab      	ldr	r3, [r5, #8]
   2311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23122:	bf2c      	ite	cs
   23124:	2008      	movcs	r0, #8
   23126:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   23128:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   2312c:	4428      	add	r0, r5
	return chunk_mem(h, c);
   2312e:	e7ce      	b.n	230ce <sys_heap_alloc+0x6>

00023130 <encode_uint>:
{
   23130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23134:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   23136:	78d3      	ldrb	r3, [r2, #3]
{
   23138:	4614      	mov	r4, r2
	switch (specifier) {
   2313a:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2313c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   23140:	4606      	mov	r6, r0
   23142:	460f      	mov	r7, r1
   23144:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   23146:	d02d      	beq.n	231a4 <encode_uint+0x74>
   23148:	d828      	bhi.n	2319c <encode_uint+0x6c>
		return 16;
   2314a:	2b58      	cmp	r3, #88	; 0x58
   2314c:	bf14      	ite	ne
   2314e:	250a      	movne	r5, #10
   23150:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   23152:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   23156:	46aa      	mov	sl, r5
   23158:	f04f 0b00 	mov.w	fp, #0
   2315c:	4652      	mov	r2, sl
   2315e:	465b      	mov	r3, fp
   23160:	4630      	mov	r0, r6
   23162:	4639      	mov	r1, r7
   23164:	f7dc ffbc 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23168:	2a09      	cmp	r2, #9
   2316a:	b2d3      	uxtb	r3, r2
   2316c:	d81f      	bhi.n	231ae <encode_uint+0x7e>
   2316e:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   23170:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23172:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   23174:	bf08      	it	eq
   23176:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23178:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   2317c:	d301      	bcc.n	23182 <encode_uint+0x52>
   2317e:	45c8      	cmp	r8, r9
   23180:	d812      	bhi.n	231a8 <encode_uint+0x78>
	if (conv->flag_hash) {
   23182:	7823      	ldrb	r3, [r4, #0]
   23184:	069b      	lsls	r3, r3, #26
   23186:	d505      	bpl.n	23194 <encode_uint+0x64>
		if (radix == 8) {
   23188:	2d08      	cmp	r5, #8
   2318a:	d116      	bne.n	231ba <encode_uint+0x8a>
			conv->altform_0 = true;
   2318c:	78a3      	ldrb	r3, [r4, #2]
   2318e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   23192:	70a3      	strb	r3, [r4, #2]
}
   23194:	4640      	mov	r0, r8
   23196:	b003      	add	sp, #12
   23198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2319c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   231a0:	2b70      	cmp	r3, #112	; 0x70
   231a2:	e7d3      	b.n	2314c <encode_uint+0x1c>
	switch (specifier) {
   231a4:	2508      	movs	r5, #8
   231a6:	e7d4      	b.n	23152 <encode_uint+0x22>
		value /= radix;
   231a8:	4606      	mov	r6, r0
   231aa:	460f      	mov	r7, r1
   231ac:	e7d6      	b.n	2315c <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   231ae:	9a01      	ldr	r2, [sp, #4]
   231b0:	2a19      	cmp	r2, #25
   231b2:	bf94      	ite	ls
   231b4:	3337      	addls	r3, #55	; 0x37
   231b6:	3357      	addhi	r3, #87	; 0x57
   231b8:	e7da      	b.n	23170 <encode_uint+0x40>
		} else if (radix == 16) {
   231ba:	2d10      	cmp	r5, #16
   231bc:	d1ea      	bne.n	23194 <encode_uint+0x64>
			conv->altform_0c = true;
   231be:	78a3      	ldrb	r3, [r4, #2]
   231c0:	f043 0310 	orr.w	r3, r3, #16
   231c4:	e7e5      	b.n	23192 <encode_uint+0x62>

000231c6 <outs>:
{
   231c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231ca:	4607      	mov	r7, r0
   231cc:	4688      	mov	r8, r1
   231ce:	4615      	mov	r5, r2
   231d0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   231d2:	4614      	mov	r4, r2
   231d4:	42b4      	cmp	r4, r6
   231d6:	eba4 0005 	sub.w	r0, r4, r5
   231da:	d302      	bcc.n	231e2 <outs+0x1c>
   231dc:	b93e      	cbnz	r6, 231ee <outs+0x28>
   231de:	7823      	ldrb	r3, [r4, #0]
   231e0:	b12b      	cbz	r3, 231ee <outs+0x28>
		int rc = out((int)*sp++, ctx);
   231e2:	f814 0b01 	ldrb.w	r0, [r4], #1
   231e6:	4641      	mov	r1, r8
   231e8:	47b8      	blx	r7
		if (rc < 0) {
   231ea:	2800      	cmp	r0, #0
   231ec:	daf2      	bge.n	231d4 <outs+0xe>
}
   231ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000231f2 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   231f2:	4040      	eors	r0, r0
   231f4:	f380 8811 	msr	BASEPRI, r0
   231f8:	f04f 0004 	mov.w	r0, #4
   231fc:	df02      	svc	2
}
   231fe:	4770      	bx	lr

00023200 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   23200:	4770      	bx	lr

00023202 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   23202:	6883      	ldr	r3, [r0, #8]
   23204:	68db      	ldr	r3, [r3, #12]
   23206:	4718      	bx	r3

00023208 <nvs_flash_rd>:
{
   23208:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2320a:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2320c:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2320e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23210:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   23212:	fa16 f181 	uxtah	r1, r6, r1
   23216:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   2321a:	6884      	ldr	r4, [r0, #8]
   2321c:	6824      	ldr	r4, [r4, #0]
   2321e:	46a4      	mov	ip, r4
}
   23220:	bc70      	pop	{r4, r5, r6}
   23222:	4760      	bx	ip

00023224 <nvs_flash_block_cmp>:
{
   23224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23228:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2322a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2322c:	681d      	ldr	r5, [r3, #0]
   2322e:	426d      	negs	r5, r5
{
   23230:	b089      	sub	sp, #36	; 0x24
   23232:	4681      	mov	r9, r0
   23234:	460e      	mov	r6, r1
   23236:	4617      	mov	r7, r2
	block_size =
   23238:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2323c:	b91c      	cbnz	r4, 23246 <nvs_flash_block_cmp+0x22>
	return 0;
   2323e:	4620      	mov	r0, r4
}
   23240:	b009      	add	sp, #36	; 0x24
   23242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   23246:	42ac      	cmp	r4, r5
   23248:	46a0      	mov	r8, r4
   2324a:	bf28      	it	cs
   2324c:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2324e:	4643      	mov	r3, r8
   23250:	466a      	mov	r2, sp
   23252:	4631      	mov	r1, r6
   23254:	4648      	mov	r0, r9
   23256:	f7ff ffd7 	bl	23208 <nvs_flash_rd>
		if (rc) {
   2325a:	2800      	cmp	r0, #0
   2325c:	d1f0      	bne.n	23240 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2325e:	4642      	mov	r2, r8
   23260:	4669      	mov	r1, sp
   23262:	4638      	mov	r0, r7
   23264:	f001 fc1e 	bl	24aa4 <memcmp>
		if (rc) {
   23268:	b920      	cbnz	r0, 23274 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2326a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2326e:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   23270:	4447      	add	r7, r8
   23272:	e7e3      	b.n	2323c <nvs_flash_block_cmp+0x18>
			return 1;
   23274:	2001      	movs	r0, #1
   23276:	e7e3      	b.n	23240 <nvs_flash_block_cmp+0x1c>

00023278 <nvs_flash_cmp_const>:
{
   23278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2327c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2327e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   23280:	681d      	ldr	r5, [r3, #0]
   23282:	426d      	negs	r5, r5
{
   23284:	b088      	sub	sp, #32
	block_size =
   23286:	f005 0520 	and.w	r5, r5, #32
{
   2328a:	4607      	mov	r7, r0
   2328c:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2328e:	4668      	mov	r0, sp
{
   23290:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   23292:	462a      	mov	r2, r5
   23294:	f001 fc41 	bl	24b1a <memset>
	while (len) {
   23298:	b91c      	cbnz	r4, 232a2 <nvs_flash_cmp_const+0x2a>
	return 0;
   2329a:	4620      	mov	r0, r4
}
   2329c:	b008      	add	sp, #32
   2329e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   232a2:	42ac      	cmp	r4, r5
   232a4:	46a0      	mov	r8, r4
   232a6:	bf28      	it	cs
   232a8:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   232aa:	4643      	mov	r3, r8
   232ac:	466a      	mov	r2, sp
   232ae:	4631      	mov	r1, r6
   232b0:	4638      	mov	r0, r7
   232b2:	f7ff ffb7 	bl	23224 <nvs_flash_block_cmp>
		if (rc) {
   232b6:	2800      	cmp	r0, #0
   232b8:	d1f0      	bne.n	2329c <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   232ba:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   232be:	4446      	add	r6, r8
   232c0:	e7ea      	b.n	23298 <nvs_flash_cmp_const+0x20>

000232c2 <nvs_ate_crc8_check>:
{
   232c2:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   232c4:	4601      	mov	r1, r0
{
   232c6:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   232c8:	2207      	movs	r2, #7
   232ca:	20ff      	movs	r0, #255	; 0xff
   232cc:	f7ef fcea 	bl	12ca4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   232d0:	79e3      	ldrb	r3, [r4, #7]
}
   232d2:	1a18      	subs	r0, r3, r0
   232d4:	bf18      	it	ne
   232d6:	2001      	movne	r0, #1
   232d8:	bd10      	pop	{r4, pc}

000232da <nvs_ate_crc8_update>:
{
   232da:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   232dc:	4601      	mov	r1, r0
{
   232de:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   232e0:	2207      	movs	r2, #7
   232e2:	20ff      	movs	r0, #255	; 0xff
   232e4:	f7ef fcde 	bl	12ca4 <crc8_ccitt>
	entry->crc8 = crc8;
   232e8:	71e0      	strb	r0, [r4, #7]
}
   232ea:	bd10      	pop	{r4, pc}

000232ec <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   232ec:	7800      	ldrb	r0, [r0, #0]
   232ee:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   232f0:	bf81      	itttt	hi
   232f2:	1809      	addhi	r1, r1, r0
   232f4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   232f8:	4240      	neghi	r0, r0
   232fa:	4001      	andhi	r1, r0
}
   232fc:	4608      	mov	r0, r1
   232fe:	4770      	bx	lr

00023300 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   23300:	680b      	ldr	r3, [r1, #0]
   23302:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   23306:	0c1a      	lsrs	r2, r3, #16
   23308:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2330c:	bf08      	it	eq
   2330e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   23312:	600b      	str	r3, [r1, #0]
}
   23314:	4770      	bx	lr

00023316 <nvs_flash_erase_sector>:
{
   23316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2331a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2331c:	8983      	ldrh	r3, [r0, #12]
   2331e:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   23320:	0c0e      	lsrs	r6, r1, #16
   23322:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   23324:	4631      	mov	r1, r6
{
   23326:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   23328:	f7ff ffa6 	bl	23278 <nvs_flash_cmp_const>
	if (rc <= 0) {
   2332c:	1e04      	subs	r4, r0, #0
   2332e:	dd17      	ble.n	23360 <nvs_flash_erase_sector+0x4a>
	rc = flash_write_protection_set(fs->flash_device, false);
   23330:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   23332:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23334:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   23338:	2100      	movs	r1, #0
   2333a:	f7ff ff62 	bl	23202 <flash_write_protection_set>
	if (rc) {
   2333e:	4604      	mov	r4, r0
   23340:	b970      	cbnz	r0, 23360 <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   23342:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   23344:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   23346:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23348:	0c31      	lsrs	r1, r6, #16
   2334a:	689b      	ldr	r3, [r3, #8]
   2334c:	fb08 7101 	mla	r1, r8, r1, r7
   23350:	4798      	blx	r3
	if (rc) {
   23352:	4604      	mov	r4, r0
   23354:	b920      	cbnz	r0, 23360 <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, true);
   23356:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   23358:	6883      	ldr	r3, [r0, #8]
   2335a:	2101      	movs	r1, #1
   2335c:	68db      	ldr	r3, [r3, #12]
   2335e:	4798      	blx	r3
}
   23360:	4620      	mov	r0, r4
   23362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023366 <nvs_prev_ate>:
{
   23366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23368:	4604      	mov	r4, r0
   2336a:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2336c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2336e:	2108      	movs	r1, #8
   23370:	f7ff ffbc 	bl	232ec <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   23374:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   23376:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   23378:	2308      	movs	r3, #8
   2337a:	4620      	mov	r0, r4
   2337c:	f7ff ff44 	bl	23208 <nvs_flash_rd>
	if (rc) {
   23380:	2800      	cmp	r0, #0
   23382:	d13e      	bne.n	23402 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   23384:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   23386:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   23388:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2338a:	b299      	uxth	r1, r3
   2338c:	1b92      	subs	r2, r2, r6
   2338e:	4291      	cmp	r1, r2
	*addr += ate_size;
   23390:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   23392:	d136      	bne.n	23402 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   23394:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   23396:	bf03      	ittte	eq
   23398:	89e1      	ldrheq	r1, [r4, #14]
   2339a:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   2339e:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   233a2:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   233a6:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   233a8:	2308      	movs	r3, #8
   233aa:	466a      	mov	r2, sp
   233ac:	4620      	mov	r0, r4
   233ae:	f7ff ff2b 	bl	23208 <nvs_flash_rd>
	if (rc) {
   233b2:	bb30      	cbnz	r0, 23402 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   233b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   233b6:	466a      	mov	r2, sp
   233b8:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   233ba:	4603      	mov	r3, r0
		if (data8[i] != value) {
   233bc:	f812 7b01 	ldrb.w	r7, [r2], #1
   233c0:	42b9      	cmp	r1, r7
   233c2:	d115      	bne.n	233f0 <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   233c4:	3301      	adds	r3, #1
   233c6:	2b08      	cmp	r3, #8
   233c8:	d1f8      	bne.n	233bc <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   233ca:	6863      	ldr	r3, [r4, #4]
   233cc:	e00e      	b.n	233ec <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   233ce:	89a3      	ldrh	r3, [r4, #12]
   233d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   233d4:	1b9b      	subs	r3, r3, r6
   233d6:	429a      	cmp	r2, r3
   233d8:	d20f      	bcs.n	233fa <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   233da:	fbb2 f3f6 	udiv	r3, r2, r6
   233de:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   233e2:	b956      	cbnz	r6, 233fa <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   233e4:	682b      	ldr	r3, [r5, #0]
   233e6:	0c1b      	lsrs	r3, r3, #16
   233e8:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   233ea:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   233ec:	602b      	str	r3, [r5, #0]
		return 0;
   233ee:	e008      	b.n	23402 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   233f0:	4668      	mov	r0, sp
   233f2:	f7ff ff66 	bl	232c2 <nvs_ate_crc8_check>
   233f6:	2800      	cmp	r0, #0
   233f8:	d0e9      	beq.n	233ce <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   233fa:	4629      	mov	r1, r5
   233fc:	4620      	mov	r0, r4
   233fe:	f7f0 fc25 	bl	13c4c <nvs_recover_last_ate>
}
   23402:	b003      	add	sp, #12
   23404:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023406 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   23406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   2340a:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2340e:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   23410:	b088      	sub	sp, #32
   23412:	4605      	mov	r5, r0
   23414:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, false);
   23416:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23418:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2341a:	4690      	mov	r8, r2
   2341c:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   2341e:	f7ff fef0 	bl	23202 <flash_write_protection_set>
	if (rc) {
   23422:	2800      	cmp	r0, #0
   23424:	d132      	bne.n	2348c <nvs_flash_al_wrt.part.0+0x86>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   23426:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   23428:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   2342c:	fa1a f484 	uxtah	r4, sl, r4
   23430:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   23434:	681f      	ldr	r7, [r3, #0]
   23436:	427f      	negs	r7, r7
	if (blen > 0) {
   23438:	4037      	ands	r7, r6
   2343a:	d00b      	beq.n	23454 <nvs_flash_al_wrt.part.0+0x4e>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2343c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   2343e:	6883      	ldr	r3, [r0, #8]
   23440:	4642      	mov	r2, r8
   23442:	685c      	ldr	r4, [r3, #4]
   23444:	4649      	mov	r1, r9
   23446:	463b      	mov	r3, r7
   23448:	47a0      	blx	r4
		if (rc) {
   2344a:	4604      	mov	r4, r0
   2344c:	b9c8      	cbnz	r0, 23482 <nvs_flash_al_wrt.part.0+0x7c>
		len -= blen;
   2344e:	1bf6      	subs	r6, r6, r7
		offset += blen;
   23450:	44b9      	add	r9, r7
		data8 += blen;
   23452:	44b8      	add	r8, r7
	if (len) {
   23454:	b1ee      	cbz	r6, 23492 <nvs_flash_al_wrt.part.0+0x8c>
		memcpy(buf, data8, len);
   23456:	4632      	mov	r2, r6
   23458:	4641      	mov	r1, r8
   2345a:	4668      	mov	r0, sp
   2345c:	f001 fb32 	bl	24ac4 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   23460:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   23462:	681a      	ldr	r2, [r3, #0]
   23464:	7919      	ldrb	r1, [r3, #4]
   23466:	1b92      	subs	r2, r2, r6
   23468:	eb0d 0006 	add.w	r0, sp, r6
   2346c:	f001 fb55 	bl	24b1a <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   23470:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   23474:	681b      	ldr	r3, [r3, #0]
   23476:	6882      	ldr	r2, [r0, #8]
   23478:	4649      	mov	r1, r9
   2347a:	6854      	ldr	r4, [r2, #4]
   2347c:	466a      	mov	r2, sp
   2347e:	47a0      	blx	r4
   23480:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   23482:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   23484:	2101      	movs	r1, #1
   23486:	f7ff febc 	bl	23202 <flash_write_protection_set>
	return rc;
   2348a:	4620      	mov	r0, r4
}
   2348c:	b008      	add	sp, #32
   2348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   23492:	4634      	mov	r4, r6
   23494:	e7f5      	b.n	23482 <nvs_flash_al_wrt.part.0+0x7c>

00023496 <nvs_flash_ate_wrt>:
{
   23496:	b510      	push	{r4, lr}
   23498:	460a      	mov	r2, r1
	if (!len) {
   2349a:	2308      	movs	r3, #8
   2349c:	6841      	ldr	r1, [r0, #4]
{
   2349e:	4604      	mov	r4, r0
   234a0:	f7ff ffb1 	bl	23406 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   234a4:	2108      	movs	r1, #8
   234a6:	4603      	mov	r3, r0
   234a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   234aa:	f7ff ff1f 	bl	232ec <nvs_al_size.isra.0>
   234ae:	6862      	ldr	r2, [r4, #4]
   234b0:	1a12      	subs	r2, r2, r0
   234b2:	6062      	str	r2, [r4, #4]
}
   234b4:	4618      	mov	r0, r3
   234b6:	bd10      	pop	{r4, pc}

000234b8 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   234b8:	2300      	movs	r3, #0
   234ba:	461a      	mov	r2, r3
   234bc:	f7f0 bdec 	b.w	14098 <nvs_write>

000234c0 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   234c0:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   234c2:	2400      	movs	r4, #0
   234c4:	9400      	str	r4, [sp, #0]
   234c6:	f7f0 fec1 	bl	1424c <nvs_read_hist>
	return rc;
}
   234ca:	b002      	add	sp, #8
   234cc:	bd10      	pop	{r4, pc}

000234ce <device_get_binding>:
   234ce:	f7fc bc5d 	b.w	1fd8c <z_impl_device_get_binding>

000234d2 <get_sectors_cb>:
{
   234d2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   234d4:	6802      	ldr	r2, [r0, #0]
   234d6:	684c      	ldr	r4, [r1, #4]
   234d8:	42a2      	cmp	r2, r4
   234da:	d316      	bcc.n	2350a <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   234dc:	688b      	ldr	r3, [r1, #8]
   234de:	4423      	add	r3, r4
   234e0:	429a      	cmp	r2, r3
   234e2:	d206      	bcs.n	234f2 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   234e4:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   234e8:	42ab      	cmp	r3, r5
   234ea:	d304      	bcc.n	234f6 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   234ec:	f06f 030b 	mvn.w	r3, #11
   234f0:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   234f2:	2000      	movs	r0, #0
   234f4:	e00a      	b.n	2350c <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   234f6:	68cd      	ldr	r5, [r1, #12]
   234f8:	1b12      	subs	r2, r2, r4
   234fa:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   234fe:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   23502:	6842      	ldr	r2, [r0, #4]
   23504:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   23506:	3301      	adds	r3, #1
   23508:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   2350a:	2001      	movs	r0, #1
}
   2350c:	bd70      	pop	{r4, r5, r6, pc}

0002350e <settings_load>:
	return settings_load_subtree(NULL);
   2350e:	2000      	movs	r0, #0
   23510:	f7f0 bf88 	b.w	14424 <settings_load_subtree>

00023514 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   23514:	2200      	movs	r2, #0
   23516:	4611      	mov	r1, r2
   23518:	f7f0 bf4a 	b.w	143b0 <settings_save_one>

0002351c <settings_name_steq>:
{
   2351c:	4603      	mov	r3, r0
   2351e:	b530      	push	{r4, r5, lr}
   23520:	4608      	mov	r0, r1
	if (next) {
   23522:	b10a      	cbz	r2, 23528 <settings_name_steq+0xc>
		*next = NULL;
   23524:	2100      	movs	r1, #0
   23526:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   23528:	b163      	cbz	r3, 23544 <settings_name_steq+0x28>
   2352a:	b190      	cbz	r0, 23552 <settings_name_steq+0x36>
   2352c:	1e41      	subs	r1, r0, #1
   2352e:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   23530:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   23534:	4604      	mov	r4, r0
   23536:	f810 3b01 	ldrb.w	r3, [r0], #1
   2353a:	b15d      	cbz	r5, 23554 <settings_name_steq+0x38>
   2353c:	429d      	cmp	r5, r3
   2353e:	d101      	bne.n	23544 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   23540:	2d3d      	cmp	r5, #61	; 0x3d
   23542:	d1f5      	bne.n	23530 <settings_name_steq+0x14>
	return 0;
   23544:	2000      	movs	r0, #0
   23546:	e004      	b.n	23552 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   23548:	2b3d      	cmp	r3, #61	; 0x3d
   2354a:	d008      	beq.n	2355e <settings_name_steq+0x42>
   2354c:	fab3 f083 	clz	r0, r3
   23550:	0940      	lsrs	r0, r0, #5
}
   23552:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   23554:	2b2f      	cmp	r3, #47	; 0x2f
   23556:	d1f7      	bne.n	23548 <settings_name_steq+0x2c>
		if (next) {
   23558:	b10a      	cbz	r2, 2355e <settings_name_steq+0x42>
			*next = name + 1;
   2355a:	3401      	adds	r4, #1
   2355c:	6014      	str	r4, [r2, #0]
		return 1;
   2355e:	2001      	movs	r0, #1
   23560:	e7f7      	b.n	23552 <settings_name_steq+0x36>

00023562 <settings_name_next>:
{
   23562:	b530      	push	{r4, r5, lr}
   23564:	4603      	mov	r3, r0
	if (next) {
   23566:	b109      	cbz	r1, 2356c <settings_name_next+0xa>
		*next = NULL;
   23568:	2200      	movs	r2, #0
   2356a:	600a      	str	r2, [r1, #0]
	if (!name) {
   2356c:	b16b      	cbz	r3, 2358a <settings_name_next+0x28>
   2356e:	461a      	mov	r2, r3
   23570:	4614      	mov	r4, r2
   23572:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   23574:	f812 5b01 	ldrb.w	r5, [r2], #1
   23578:	b135      	cbz	r5, 23588 <settings_name_next+0x26>
   2357a:	2d3d      	cmp	r5, #61	; 0x3d
   2357c:	d004      	beq.n	23588 <settings_name_next+0x26>
   2357e:	2d2f      	cmp	r5, #47	; 0x2f
   23580:	d1f6      	bne.n	23570 <settings_name_next+0xe>
		if (next) {
   23582:	b109      	cbz	r1, 23588 <settings_name_next+0x26>
			*next = name + 1;
   23584:	3401      	adds	r4, #1
   23586:	600c      	str	r4, [r1, #0]
}
   23588:	bd30      	pop	{r4, r5, pc}
		return 0;
   2358a:	4618      	mov	r0, r3
   2358c:	e7fc      	b.n	23588 <settings_name_next+0x26>

0002358e <settings_nvs_read_fn>:
{
   2358e:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   23590:	4613      	mov	r3, r2
{
   23592:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   23594:	460a      	mov	r2, r1
   23596:	8881      	ldrh	r1, [r0, #4]
   23598:	6800      	ldr	r0, [r0, #0]
   2359a:	f7ff ff91 	bl	234c0 <nvs_read>
}
   2359e:	42a0      	cmp	r0, r4
   235a0:	bfa8      	it	ge
   235a2:	4620      	movge	r0, r4
   235a4:	bd10      	pop	{r4, pc}

000235a6 <settings_nvs_save>:
{
   235a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235aa:	b097      	sub	sp, #92	; 0x5c
   235ac:	4604      	mov	r4, r0
   235ae:	9201      	str	r2, [sp, #4]
   235b0:	469b      	mov	fp, r3
	if (!name) {
   235b2:	4689      	mov	r9, r1
   235b4:	2900      	cmp	r1, #0
   235b6:	d067      	beq.n	23688 <settings_nvs_save+0xe2>
	delete = ((value == NULL) || (val_len == 0));
   235b8:	b1da      	cbz	r2, 235f2 <settings_nvs_save+0x4c>
   235ba:	fabb f78b 	clz	r7, fp
   235be:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   235c0:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   235c2:	3501      	adds	r5, #1
   235c4:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   235c6:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   235c8:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   235cc:	1e6e      	subs	r6, r5, #1
   235ce:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   235d0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   235d4:	d02e      	beq.n	23634 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   235d6:	234a      	movs	r3, #74	; 0x4a
   235d8:	aa03      	add	r2, sp, #12
   235da:	4631      	mov	r1, r6
   235dc:	4650      	mov	r0, sl
   235de:	f7ff ff6f 	bl	234c0 <nvs_read>
		if (rc < 0) {
   235e2:	2800      	cmp	r0, #0
   235e4:	da07      	bge.n	235f6 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   235e6:	f110 0f02 	cmn.w	r0, #2
   235ea:	bf08      	it	eq
   235ec:	46b0      	moveq	r8, r6
   235ee:	4635      	mov	r5, r6
   235f0:	e7ec      	b.n	235cc <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   235f2:	2701      	movs	r7, #1
   235f4:	e7e4      	b.n	235c0 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   235f6:	ab16      	add	r3, sp, #88	; 0x58
   235f8:	4418      	add	r0, r3
   235fa:	2300      	movs	r3, #0
   235fc:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   23600:	a903      	add	r1, sp, #12
   23602:	4648      	mov	r0, r9
   23604:	f001 fa33 	bl	24a6e <strcmp>
   23608:	2800      	cmp	r0, #0
   2360a:	d1f0      	bne.n	235ee <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   2360c:	2f00      	cmp	r7, #0
   2360e:	d039      	beq.n	23684 <settings_nvs_save+0xde>
   23610:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   23612:	42b3      	cmp	r3, r6
   23614:	d140      	bne.n	23698 <settings_nvs_save+0xf2>
			cf->last_name_id--;
   23616:	4622      	mov	r2, r4
   23618:	1e73      	subs	r3, r6, #1
   2361a:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2361e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23622:	2302      	movs	r3, #2
   23624:	4650      	mov	r0, sl
   23626:	f7f0 fd37 	bl	14098 <nvs_write>
			if (rc < 0) {
   2362a:	2800      	cmp	r0, #0
   2362c:	da34      	bge.n	23698 <settings_nvs_save+0xf2>
}
   2362e:	b017      	add	sp, #92	; 0x5c
   23630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   23634:	bb5f      	cbnz	r7, 2368e <settings_nvs_save+0xe8>
	write_name = true;
   23636:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   23638:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2363c:	d029      	beq.n	23692 <settings_nvs_save+0xec>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2363e:	f104 0508 	add.w	r5, r4, #8
   23642:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   23646:	9a01      	ldr	r2, [sp, #4]
   23648:	465b      	mov	r3, fp
   2364a:	b289      	uxth	r1, r1
   2364c:	4628      	mov	r0, r5
   2364e:	f7f0 fd23 	bl	14098 <nvs_write>
	if (write_name) {
   23652:	b157      	cbz	r7, 2366a <settings_nvs_save+0xc4>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   23654:	4648      	mov	r0, r9
   23656:	f001 fa03 	bl	24a60 <strlen>
   2365a:	464a      	mov	r2, r9
   2365c:	4603      	mov	r3, r0
   2365e:	4641      	mov	r1, r8
   23660:	4628      	mov	r0, r5
   23662:	f7f0 fd19 	bl	14098 <nvs_write>
		if (rc < 0) {
   23666:	2800      	cmp	r0, #0
   23668:	dbe1      	blt.n	2362e <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   2366a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2366c:	4543      	cmp	r3, r8
   2366e:	d220      	bcs.n	236b2 <settings_nvs_save+0x10c>
		cf->last_name_id = write_name_id;
   23670:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   23672:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   23674:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   23678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2367c:	4628      	mov	r0, r5
   2367e:	f7f0 fd0b 	bl	14098 <nvs_write>
   23682:	e016      	b.n	236b2 <settings_nvs_save+0x10c>
   23684:	46b0      	mov	r8, r6
   23686:	e7d7      	b.n	23638 <settings_nvs_save+0x92>
		return -EINVAL;
   23688:	f06f 0015 	mvn.w	r0, #21
   2368c:	e7cf      	b.n	2362e <settings_nvs_save+0x88>
		return 0;
   2368e:	2000      	movs	r0, #0
   23690:	e7cd      	b.n	2362e <settings_nvs_save+0x88>
		return -ENOMEM;
   23692:	f06f 000b 	mvn.w	r0, #11
   23696:	e7ca      	b.n	2362e <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   23698:	4631      	mov	r1, r6
   2369a:	4650      	mov	r0, sl
   2369c:	f7ff ff0c 	bl	234b8 <nvs_delete>
			if (rc >= 0) {
   236a0:	2800      	cmp	r0, #0
   236a2:	dbc4      	blt.n	2362e <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   236a4:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   236a8:	313f      	adds	r1, #63	; 0x3f
   236aa:	b289      	uxth	r1, r1
   236ac:	4650      	mov	r0, sl
   236ae:	f7ff ff03 	bl	234b8 <nvs_delete>
	if (rc < 0) {
   236b2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   236b6:	e7ba      	b.n	2362e <settings_nvs_save+0x88>

000236b8 <settings_nvs_backend_init>:
{
   236b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   236ba:	f100 0608 	add.w	r6, r0, #8
   236be:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   236c0:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   236c2:	4630      	mov	r0, r6
   236c4:	f7f0 fbb2 	bl	13e2c <nvs_init>
	if (rc) {
   236c8:	4605      	mov	r5, r0
   236ca:	b970      	cbnz	r0, 236ea <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   236cc:	2302      	movs	r3, #2
   236ce:	f10d 0206 	add.w	r2, sp, #6
   236d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   236d6:	4630      	mov	r0, r6
   236d8:	f7ff fef2 	bl	234c0 <nvs_read>
	if (rc < 0) {
   236dc:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   236de:	bfac      	ite	ge
   236e0:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   236e4:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   236e8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   236ea:	4628      	mov	r0, r5
   236ec:	b002      	add	sp, #8
   236ee:	bd70      	pop	{r4, r5, r6, pc}

000236f0 <set_starting_state>:
{
   236f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   236f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   236f6:	f3ef 8211 	mrs	r2, BASEPRI
   236fa:	f383 8811 	msr	BASEPRI, r3
   236fe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23702:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   23704:	f003 0407 	and.w	r4, r3, #7
   23708:	2c01      	cmp	r4, #1
   2370a:	d106      	bne.n	2371a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2370c:	6001      	str	r1, [r0, #0]
	int err = 0;
   2370e:	2000      	movs	r0, #0
	__asm__ volatile(
   23710:	f382 8811 	msr	BASEPRI, r2
   23714:	f3bf 8f6f 	isb	sy
}
   23718:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2371a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2371e:	428b      	cmp	r3, r1
		err = -EALREADY;
   23720:	bf14      	ite	ne
   23722:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   23726:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   2372a:	e7f1      	b.n	23710 <set_starting_state+0x20>

0002372c <set_on_state>:
	__asm__ volatile(
   2372c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23730:	f3ef 8211 	mrs	r2, BASEPRI
   23734:	f383 8811 	msr	BASEPRI, r3
   23738:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2373c:	6803      	ldr	r3, [r0, #0]
   2373e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23742:	f043 0302 	orr.w	r3, r3, #2
   23746:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   23748:	f382 8811 	msr	BASEPRI, r2
   2374c:	f3bf 8f6f 	isb	sy
}
   23750:	4770      	bx	lr

00023752 <onoff_started_callback>:
	return &data->mgr[type];
   23752:	68c0      	ldr	r0, [r0, #12]
   23754:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   23756:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2375a:	2100      	movs	r1, #0
   2375c:	4710      	bx	r2

0002375e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2375e:	2280      	movs	r2, #128	; 0x80
   23760:	f7f1 b8ca 	b.w	148f8 <stop>

00023764 <blocking_start_callback>:
{
   23764:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   23766:	f7fe b943 	b.w	219f0 <z_impl_k_sem_give>

0002376a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2376a:	2000      	movs	r0, #0
   2376c:	f7fb bf0c 	b.w	1f588 <nrfx_clock_stop>

00023770 <api_start>:
{
   23770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23774:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   23776:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   23778:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   2377a:	434c      	muls	r4, r1
{
   2377c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2377e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   23782:	2180      	movs	r1, #128	; 0x80
   23784:	4428      	add	r0, r5
{
   23786:	4690      	mov	r8, r2
   23788:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2378a:	f7ff ffb1 	bl	236f0 <set_starting_state>
	if (err < 0) {
   2378e:	2800      	cmp	r0, #0
   23790:	db06      	blt.n	237a0 <api_start+0x30>
	subdata->cb = cb;
   23792:	4425      	add	r5, r4
	subdata->user_data = user_data;
   23794:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   23798:	6873      	ldr	r3, [r6, #4]
   2379a:	591b      	ldr	r3, [r3, r4]
   2379c:	4798      	blx	r3
	return 0;
   2379e:	2000      	movs	r0, #0
}
   237a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000237a4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   237a4:	4770      	bx	lr

000237a6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   237a6:	f7f1 bb95 	b.w	14ed4 <_DoInit>

000237aa <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   237aa:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   237ac:	f7ff fffb 	bl	237a6 <SEGGER_RTT_Init>

	return 0;
}
   237b0:	2000      	movs	r0, #0
   237b2:	bd08      	pop	{r3, pc}

000237b4 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   237b4:	b538      	push	{r3, r4, r5, lr}
   237b6:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   237b8:	42ab      	cmp	r3, r5
{
   237ba:	4611      	mov	r1, r2
   237bc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   237be:	d804      	bhi.n	237ca <_copy+0x16>
		(void)memcpy(to, from, from_len);
   237c0:	461a      	mov	r2, r3
   237c2:	f001 f97f 	bl	24ac4 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   237c6:	4620      	mov	r0, r4
   237c8:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   237ca:	2400      	movs	r4, #0
   237cc:	e7fb      	b.n	237c6 <_copy+0x12>

000237ce <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   237ce:	f001 b9a4 	b.w	24b1a <memset>

000237d2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   237d2:	09c3      	lsrs	r3, r0, #7
   237d4:	005a      	lsls	r2, r3, #1
   237d6:	4413      	add	r3, r2
   237d8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   237dc:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   237e0:	b2c0      	uxtb	r0, r0
   237e2:	4770      	bx	lr

000237e4 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   237e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   237e8:	4606      	mov	r6, r0
   237ea:	b0a9      	sub	sp, #164	; 0xa4
   237ec:	4688      	mov	r8, r1
   237ee:	4614      	mov	r4, r2
   237f0:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   237f2:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   237f6:	f7f1 fb9d 	bl	14f34 <uECC_get_rng>
		if (!rng_function ||
   237fa:	4603      	mov	r3, r0
   237fc:	2800      	cmp	r0, #0
   237fe:	d03e      	beq.n	2387e <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   23800:	2140      	movs	r1, #64	; 0x40
   23802:	a808      	add	r0, sp, #32
   23804:	4798      	blx	r3
		if (!rng_function ||
   23806:	b3d0      	cbz	r0, 2387e <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   23808:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   2380c:	f112 031f 	adds.w	r3, r2, #31
   23810:	bf48      	it	mi
   23812:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   23816:	466d      	mov	r5, sp
   23818:	464a      	mov	r2, r9
   2381a:	a908      	add	r1, sp, #32
   2381c:	4628      	mov	r0, r5
   2381e:	f343 1347 	sbfx	r3, r3, #5, #8
   23822:	f000 fa03 	bl	23c2c <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   23826:	4622      	mov	r2, r4
   23828:	4629      	mov	r1, r5
   2382a:	a818      	add	r0, sp, #96	; 0x60
   2382c:	f000 fe19 	bl	24462 <EccPoint_compute_public_key>
   23830:	b318      	cbz	r0, 2387a <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   23832:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   23836:	1dd9      	adds	r1, r3, #7
   23838:	bf48      	it	mi
   2383a:	f103 010e 	addmi.w	r1, r3, #14
   2383e:	462a      	mov	r2, r5
   23840:	4640      	mov	r0, r8
   23842:	10c9      	asrs	r1, r1, #3
   23844:	f000 fe35 	bl	244b2 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   23848:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2384c:	aa18      	add	r2, sp, #96	; 0x60
   2384e:	4630      	mov	r0, r6
   23850:	f000 fe2f 	bl	244b2 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   23854:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   23858:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2385c:	ab18      	add	r3, sp, #96	; 0x60
   2385e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23862:	1870      	adds	r0, r6, r1
   23864:	f000 fe25 	bl	244b2 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   23868:	2220      	movs	r2, #32
   2386a:	2100      	movs	r1, #0
   2386c:	4628      	mov	r0, r5
   2386e:	f001 f954 	bl	24b1a <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   23872:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   23874:	b029      	add	sp, #164	; 0xa4
   23876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2387a:	3f01      	subs	r7, #1
   2387c:	d1bb      	bne.n	237f6 <uECC_make_key+0x12>
        		return 0;
   2387e:	2000      	movs	r0, #0
   23880:	e7f8      	b.n	23874 <uECC_make_key+0x90>

00023882 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   23882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23886:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   23888:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   2388c:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   23890:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   23894:	b0a4      	sub	sp, #144	; 0x90
   23896:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   23898:	1dda      	adds	r2, r3, #7
   2389a:	bf48      	it	mi
   2389c:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   238a0:	ad04      	add	r5, sp, #16
{
   238a2:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   238a4:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   238a6:	4628      	mov	r0, r5
   238a8:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   238aa:	9502      	str	r5, [sp, #8]
   238ac:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   238ae:	f000 fe14 	bl	244da <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   238b2:	463a      	mov	r2, r7
   238b4:	4649      	mov	r1, r9
   238b6:	a814      	add	r0, sp, #80	; 0x50
   238b8:	f000 fe0f 	bl	244da <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   238bc:	ab14      	add	r3, sp, #80	; 0x50
   238be:	eb09 0107 	add.w	r1, r9, r7
   238c2:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   238c6:	463a      	mov	r2, r7
   238c8:	f000 fe07 	bl	244da <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   238cc:	4623      	mov	r3, r4
   238ce:	4632      	mov	r2, r6
   238d0:	4629      	mov	r1, r5
   238d2:	4628      	mov	r0, r5
   238d4:	f000 fd99 	bl	2440a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   238d8:	fab0 f080 	clz	r0, r0
   238dc:	9401      	str	r4, [sp, #4]
   238de:	ab24      	add	r3, sp, #144	; 0x90
   238e0:	0940      	lsrs	r0, r0, #5
   238e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   238e6:	8863      	ldrh	r3, [r4, #2]
   238e8:	3301      	adds	r3, #1
   238ea:	b21b      	sxth	r3, r3
   238ec:	9300      	str	r3, [sp, #0]
   238ee:	a914      	add	r1, sp, #80	; 0x50
   238f0:	2300      	movs	r3, #0
   238f2:	f850 2c88 	ldr.w	r2, [r0, #-136]
   238f6:	4608      	mov	r0, r1
   238f8:	f000 fcb8 	bl	2426c <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   238fc:	aa14      	add	r2, sp, #80	; 0x50
   238fe:	4639      	mov	r1, r7
   23900:	4640      	mov	r0, r8
   23902:	f000 fdd6 	bl	244b2 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   23906:	4621      	mov	r1, r4
   23908:	a814      	add	r0, sp, #80	; 0x50
   2390a:	f000 fc24 	bl	24156 <EccPoint_isZero>
   2390e:	af02      	add	r7, sp, #8
   23910:	4604      	mov	r4, r0
   23912:	2208      	movs	r2, #8
   23914:	2100      	movs	r1, #0
   23916:	4638      	mov	r0, r7
   23918:	f001 f8ff 	bl	24b1a <memset>
   2391c:	2220      	movs	r2, #32
   2391e:	2100      	movs	r1, #0
   23920:	4630      	mov	r0, r6
   23922:	f001 f8fa 	bl	24b1a <memset>
   23926:	2220      	movs	r2, #32
   23928:	2100      	movs	r1, #0
   2392a:	4628      	mov	r0, r5
   2392c:	f001 f8f5 	bl	24b1a <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   23930:	fab4 f084 	clz	r0, r4
   23934:	0940      	lsrs	r0, r0, #5
   23936:	b024      	add	sp, #144	; 0x90
   23938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002393c <uECC_vli_add>:
{
   2393c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2393e:	2400      	movs	r4, #0
{
   23940:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   23942:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   23944:	b265      	sxtb	r5, r4
   23946:	42ab      	cmp	r3, r5
   23948:	dc00      	bgt.n	2394c <uECC_vli_add+0x10>
}
   2394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   2394c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   23950:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   23954:	443d      	add	r5, r7
   23956:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   23958:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   2395a:	bf8c      	ite	hi
   2395c:	2701      	movhi	r7, #1
   2395e:	2700      	movls	r7, #0
		result[i] = sum;
   23960:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   23964:	bf18      	it	ne
   23966:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   23968:	3401      	adds	r4, #1
   2396a:	e7eb      	b.n	23944 <uECC_vli_add+0x8>

0002396c <uECC_vli_rshift1>:
	vli += num_words;
   2396c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   23970:	2300      	movs	r3, #0
	while (vli-- > end) {
   23972:	4288      	cmp	r0, r1
   23974:	d300      	bcc.n	23978 <uECC_vli_rshift1+0xc>
}
   23976:	4770      	bx	lr
		uECC_word_t temp = *vli;
   23978:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   2397c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   23980:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   23982:	07d3      	lsls	r3, r2, #31
   23984:	e7f5      	b.n	23972 <uECC_vli_rshift1+0x6>

00023986 <vli_modInv_update>:
	if (!EVEN(uv)) {
   23986:	6803      	ldr	r3, [r0, #0]
{
   23988:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   2398a:	f013 0601 	ands.w	r6, r3, #1
{
   2398e:	4605      	mov	r5, r0
   23990:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   23992:	d005      	beq.n	239a0 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   23994:	4613      	mov	r3, r2
   23996:	460a      	mov	r2, r1
   23998:	4601      	mov	r1, r0
   2399a:	f7ff ffcf 	bl	2393c <uECC_vli_add>
   2399e:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   239a0:	4621      	mov	r1, r4
   239a2:	4628      	mov	r0, r5
   239a4:	f7ff ffe2 	bl	2396c <uECC_vli_rshift1>
	if (carry) {
   239a8:	b146      	cbz	r6, 239bc <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   239aa:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   239ae:	3a01      	subs	r2, #1
   239b0:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   239b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   239b8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   239bc:	bd70      	pop	{r4, r5, r6, pc}

000239be <uECC_vli_mult>:
{
   239be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   239c2:	2500      	movs	r5, #0
{
   239c4:	b087      	sub	sp, #28
   239c6:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   239ca:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   239cc:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   239ce:	fa4f f885 	sxtb.w	r8, r5
   239d2:	4543      	cmp	r3, r8
   239d4:	dc16      	bgt.n	23a04 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   239d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   239da:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   239de:	9502      	str	r5, [sp, #8]
   239e0:	f04f 0a00 	mov.w	sl, #0
   239e4:	9e02      	ldr	r6, [sp, #8]
   239e6:	fa53 fe8a 	uxtab	lr, r3, sl
   239ea:	fa4f fe8e 	sxtb.w	lr, lr
   239ee:	45b6      	cmp	lr, r6
   239f0:	fa5f f58a 	uxtb.w	r5, sl
   239f4:	db2d      	blt.n	23a52 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   239f6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   239fa:	f840 2c04 	str.w	r2, [r0, #-4]
}
   239fe:	b007      	add	sp, #28
   23a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a04:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   23a06:	f04f 0c00 	mov.w	ip, #0
   23a0a:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   23a0e:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   23a10:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   23a14:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23a16:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   23a1a:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   23a1e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   23a22:	fba7 ab06 	umull	sl, fp, r7, r6
   23a26:	eb1a 0601 	adds.w	r6, sl, r1
   23a2a:	f10c 0c01 	add.w	ip, ip, #1
   23a2e:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   23a32:	fa4f fa8c 	sxtb.w	sl, ip
   23a36:	bf2c      	ite	cs
   23a38:	2201      	movcs	r2, #1
   23a3a:	2200      	movcc	r2, #0
   23a3c:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   23a3e:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   23a40:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   23a42:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   23a44:	dde4      	ble.n	23a10 <uECC_vli_mult+0x52>
		result[k] = r0;
   23a46:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   23a4a:	463a      	mov	r2, r7
   23a4c:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   23a4e:	4674      	mov	r4, lr
   23a50:	e7bd      	b.n	239ce <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23a52:	3501      	adds	r5, #1
   23a54:	9900      	ldr	r1, [sp, #0]
   23a56:	9e01      	ldr	r6, [sp, #4]
   23a58:	fa4f fc85 	sxtb.w	ip, r5
   23a5c:	ebae 0b0c 	sub.w	fp, lr, ip
   23a60:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   23a64:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   23a68:	4621      	mov	r1, r4
   23a6a:	2400      	movs	r4, #0
   23a6c:	459c      	cmp	ip, r3
   23a6e:	db05      	blt.n	23a7c <uECC_vli_mult+0xbe>
		result[k] = r0;
   23a70:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23a74:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   23a78:	460a      	mov	r2, r1
   23a7a:	e7b3      	b.n	239e4 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   23a7c:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23a80:	f855 7b04 	ldr.w	r7, [r5], #4
   23a84:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   23a88:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   23a8c:	fba7 6706 	umull	r6, r7, r7, r6
   23a90:	eb16 0801 	adds.w	r8, r6, r1
   23a94:	eb57 0902 	adcs.w	r9, r7, r2
   23a98:	bf2c      	ite	cs
   23a9a:	2201      	movcs	r2, #1
   23a9c:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23a9e:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   23aa2:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   23aa4:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   23aa6:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23aa8:	fa4f fc8c 	sxtb.w	ip, ip
   23aac:	e7de      	b.n	23a6c <uECC_vli_mult+0xae>

00023aae <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   23aae:	2300      	movs	r3, #0
{
   23ab0:	b510      	push	{r4, lr}
		 vli[i] = 0;
   23ab2:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   23ab4:	b25a      	sxtb	r2, r3
   23ab6:	4291      	cmp	r1, r2
   23ab8:	dc00      	bgt.n	23abc <uECC_vli_clear+0xe>
}
   23aba:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   23abc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23ac0:	3301      	adds	r3, #1
   23ac2:	e7f7      	b.n	23ab4 <uECC_vli_clear+0x6>

00023ac4 <uECC_vli_isZero>:
{
   23ac4:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   23ac6:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   23ac8:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   23aca:	b25c      	sxtb	r4, r3
   23acc:	42a1      	cmp	r1, r4
   23ace:	dc03      	bgt.n	23ad8 <uECC_vli_isZero+0x14>
}
   23ad0:	fab2 f082 	clz	r0, r2
   23ad4:	0940      	lsrs	r0, r0, #5
   23ad6:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   23ad8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23adc:	3301      	adds	r3, #1
   23ade:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   23ae0:	e7f3      	b.n	23aca <uECC_vli_isZero+0x6>

00023ae2 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23ae2:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23ae4:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23ae6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23aea:	f001 011f 	and.w	r1, r1, #31
   23aee:	fa03 f101 	lsl.w	r1, r3, r1
}
   23af2:	4008      	ands	r0, r1
   23af4:	4770      	bx	lr

00023af6 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23af6:	3901      	subs	r1, #1
   23af8:	b24b      	sxtb	r3, r1
{
   23afa:	4602      	mov	r2, r0
   23afc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23b00:	2b00      	cmp	r3, #0
   23b02:	da03      	bge.n	23b0c <uECC_vli_numBits+0x16>
	return (i + 1);
   23b04:	3301      	adds	r3, #1
   23b06:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   23b08:	b938      	cbnz	r0, 23b1a <uECC_vli_numBits+0x24>
   23b0a:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23b0c:	f851 0904 	ldr.w	r0, [r1], #-4
   23b10:	2800      	cmp	r0, #0
   23b12:	d1f7      	bne.n	23b04 <uECC_vli_numBits+0xe>
   23b14:	3b01      	subs	r3, #1
   23b16:	b25b      	sxtb	r3, r3
   23b18:	e7f2      	b.n	23b00 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   23b1a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   23b1e:	3b01      	subs	r3, #1
   23b20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   23b24:	2300      	movs	r3, #0
   23b26:	b922      	cbnz	r2, 23b32 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   23b28:	3801      	subs	r0, #1
   23b2a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   23b2e:	b200      	sxth	r0, r0
}
   23b30:	4770      	bx	lr
		digit >>= 1;
   23b32:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   23b34:	3301      	adds	r3, #1
   23b36:	e7f6      	b.n	23b26 <uECC_vli_numBits+0x30>

00023b38 <uECC_vli_set>:
{
   23b38:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   23b3a:	2300      	movs	r3, #0
   23b3c:	b25c      	sxtb	r4, r3
   23b3e:	42a2      	cmp	r2, r4
   23b40:	dc00      	bgt.n	23b44 <uECC_vli_set+0xc>
}
   23b42:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   23b44:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   23b48:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23b4c:	3301      	adds	r3, #1
   23b4e:	e7f5      	b.n	23b3c <uECC_vli_set+0x4>

00023b50 <uECC_vli_cmp_unsafe>:
{
   23b50:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   23b52:	3a01      	subs	r2, #1
   23b54:	b253      	sxtb	r3, r2
   23b56:	009a      	lsls	r2, r3, #2
   23b58:	2b00      	cmp	r3, #0
   23b5a:	da01      	bge.n	23b60 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   23b5c:	2000      	movs	r0, #0
}
   23b5e:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   23b60:	5885      	ldr	r5, [r0, r2]
   23b62:	588c      	ldr	r4, [r1, r2]
   23b64:	42a5      	cmp	r5, r4
   23b66:	d805      	bhi.n	23b74 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   23b68:	f1a2 0204 	sub.w	r2, r2, #4
   23b6c:	d304      	bcc.n	23b78 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   23b6e:	3b01      	subs	r3, #1
   23b70:	b25b      	sxtb	r3, r3
   23b72:	e7f1      	b.n	23b58 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   23b74:	2001      	movs	r0, #1
   23b76:	e7f2      	b.n	23b5e <uECC_vli_cmp_unsafe+0xe>
			return -1;
   23b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23b7c:	e7ef      	b.n	23b5e <uECC_vli_cmp_unsafe+0xe>

00023b7e <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   23b7e:	3a01      	subs	r2, #1
   23b80:	b253      	sxtb	r3, r2
{
   23b82:	b570      	push	{r4, r5, r6, lr}
   23b84:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   23b86:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   23b88:	2b00      	cmp	r3, #0
   23b8a:	da03      	bge.n	23b94 <uECC_vli_equal+0x16>
}
   23b8c:	1e20      	subs	r0, r4, #0
   23b8e:	bf18      	it	ne
   23b90:	2001      	movne	r0, #1
   23b92:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   23b94:	5885      	ldr	r5, [r0, r2]
   23b96:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   23b98:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   23b9a:	4075      	eors	r5, r6
   23b9c:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   23b9e:	b25b      	sxtb	r3, r3
   23ba0:	3a04      	subs	r2, #4
   23ba2:	e7f1      	b.n	23b88 <uECC_vli_equal+0xa>

00023ba4 <uECC_vli_sub>:
{
   23ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   23ba6:	2400      	movs	r4, #0
{
   23ba8:	4606      	mov	r6, r0
   23baa:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   23bac:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   23bae:	b265      	sxtb	r5, r4
   23bb0:	45ac      	cmp	ip, r5
   23bb2:	dc00      	bgt.n	23bb6 <uECC_vli_sub+0x12>
}
   23bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   23bb6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   23bba:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   23bbe:	1a3d      	subs	r5, r7, r0
   23bc0:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   23bc2:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   23bc4:	bf34      	ite	cc
   23bc6:	2701      	movcc	r7, #1
   23bc8:	2700      	movcs	r7, #0
		result[i] = diff;
   23bca:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   23bce:	bf18      	it	ne
   23bd0:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   23bd2:	3401      	adds	r4, #1
   23bd4:	e7eb      	b.n	23bae <uECC_vli_sub+0xa>

00023bd6 <uECC_vli_modAdd>:
{
   23bd6:	b570      	push	{r4, r5, r6, lr}
   23bd8:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   23bdc:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23bde:	4633      	mov	r3, r6
{
   23be0:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23be2:	f7ff feab 	bl	2393c <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   23be6:	b930      	cbnz	r0, 23bf6 <uECC_vli_modAdd+0x20>
   23be8:	4632      	mov	r2, r6
   23bea:	4621      	mov	r1, r4
   23bec:	4628      	mov	r0, r5
   23bee:	f7ff ffaf 	bl	23b50 <uECC_vli_cmp_unsafe>
   23bf2:	2801      	cmp	r0, #1
   23bf4:	d007      	beq.n	23c06 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   23bf6:	4633      	mov	r3, r6
   23bf8:	462a      	mov	r2, r5
   23bfa:	4621      	mov	r1, r4
   23bfc:	4620      	mov	r0, r4
}
   23bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   23c02:	f7ff bfcf 	b.w	23ba4 <uECC_vli_sub>
}
   23c06:	bd70      	pop	{r4, r5, r6, pc}

00023c08 <uECC_vli_modSub>:
{
   23c08:	b570      	push	{r4, r5, r6, lr}
   23c0a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   23c0e:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23c10:	4633      	mov	r3, r6
{
   23c12:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23c14:	f7ff ffc6 	bl	23ba4 <uECC_vli_sub>
	if (l_borrow) {
   23c18:	b138      	cbz	r0, 23c2a <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   23c1a:	4633      	mov	r3, r6
   23c1c:	462a      	mov	r2, r5
   23c1e:	4621      	mov	r1, r4
   23c20:	4620      	mov	r0, r4
}
   23c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   23c26:	f7ff be89 	b.w	2393c <uECC_vli_add>
}
   23c2a:	bd70      	pop	{r4, r5, r6, pc}

00023c2c <uECC_vli_mmod>:
{
   23c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c30:	b0a5      	sub	sp, #148	; 0x94
   23c32:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   23c34:	ab14      	add	r3, sp, #80	; 0x50
   23c36:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   23c3a:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   23c3c:	4629      	mov	r1, r5
   23c3e:	4610      	mov	r0, r2
{
   23c40:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   23c42:	f7ff ff58 	bl	23af6 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   23c46:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   23c4a:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23c4c:	2c00      	cmp	r4, #0
   23c4e:	4621      	mov	r1, r4
   23c50:	bfb8      	it	lt
   23c52:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23c56:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23c58:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23c5c:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   23c60:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23c62:	f004 071f 	and.w	r7, r4, #31
   23c66:	bf58      	it	pl
   23c68:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   23c6a:	f7ff ff20 	bl	23aae <uECC_vli_clear>
	if (bit_shift > 0) {
   23c6e:	2f00      	cmp	r7, #0
   23c70:	b208      	sxth	r0, r1
   23c72:	dd2b      	ble.n	23ccc <uECC_vli_mmod+0xa0>
   23c74:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   23c76:	2200      	movs	r2, #0
   23c78:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23c7c:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23c80:	4613      	mov	r3, r2
   23c82:	429d      	cmp	r5, r3
   23c84:	d817      	bhi.n	23cb6 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   23c86:	006b      	lsls	r3, r5, #1
   23c88:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23c8a:	ab04      	add	r3, sp, #16
   23c8c:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23c90:	1e6f      	subs	r7, r5, #1
   23c92:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23c94:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23c96:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   23c9a:	2c00      	cmp	r4, #0
   23c9c:	da54      	bge.n	23d48 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   23c9e:	ab24      	add	r3, sp, #144	; 0x90
   23ca0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   23ca4:	462a      	mov	r2, r5
   23ca6:	f856 1c88 	ldr.w	r1, [r6, #-136]
   23caa:	4640      	mov	r0, r8
   23cac:	f7ff ff44 	bl	23b38 <uECC_vli_set>
}
   23cb0:	b025      	add	sp, #148	; 0x94
   23cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   23cb6:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   23cba:	fa0c f007 	lsl.w	r0, ip, r7
   23cbe:	4302      	orrs	r2, r0
   23cc0:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23cc4:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23cc6:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23cca:	e7da      	b.n	23c82 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   23ccc:	ab04      	add	r3, sp, #16
   23cce:	462a      	mov	r2, r5
   23cd0:	4631      	mov	r1, r6
   23cd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23cd6:	f7ff ff2f 	bl	23b38 <uECC_vli_set>
   23cda:	e7d4      	b.n	23c86 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23cdc:	fa0f fe82 	sxth.w	lr, r2
   23ce0:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   23ce4:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   23ce8:	ab24      	add	r3, sp, #144	; 0x90
   23cea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23cee:	3001      	adds	r0, #1
   23cf0:	f852 3c80 	ldr.w	r3, [r2, #-128]
   23cf4:	440b      	add	r3, r1
   23cf6:	ebbb 0303 	subs.w	r3, fp, r3
   23cfa:	bf34      	ite	cc
   23cfc:	2201      	movcc	r2, #1
   23cfe:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   23d00:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   23d02:	bf18      	it	ne
   23d04:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   23d06:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   23d0a:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   23d0e:	9b01      	ldr	r3, [sp, #4]
   23d10:	b242      	sxtb	r2, r0
   23d12:	429a      	cmp	r2, r3
   23d14:	dbe2      	blt.n	23cdc <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   23d16:	1a73      	subs	r3, r6, r1
   23d18:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   23d1a:	4629      	mov	r1, r5
   23d1c:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   23d1e:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   23d20:	f7ff fe24 	bl	2396c <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23d24:	ab24      	add	r3, sp, #144	; 0x90
   23d26:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23d2a:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23d2c:	f853 2c80 	ldr.w	r2, [r3, #-128]
   23d30:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23d34:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23d36:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   23d3a:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23d3c:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   23d40:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23d42:	f7ff fe13 	bl	2396c <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   23d46:	e7a8      	b.n	23c9a <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23d48:	ab24      	add	r3, sp, #144	; 0x90
   23d4a:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   23d4c:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   23d50:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23d52:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   23d56:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   23d5a:	e7d8      	b.n	23d0e <uECC_vli_mmod+0xe2>

00023d5c <uECC_vli_modMult_fast>:
{
   23d5c:	b530      	push	{r4, r5, lr}
   23d5e:	461c      	mov	r4, r3
   23d60:	b091      	sub	sp, #68	; 0x44
   23d62:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   23d64:	f993 3000 	ldrsb.w	r3, [r3]
   23d68:	4668      	mov	r0, sp
   23d6a:	f7ff fe28 	bl	239be <uECC_vli_mult>
	curve->mmod_fast(result, product);
   23d6e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   23d72:	4669      	mov	r1, sp
   23d74:	4628      	mov	r0, r5
   23d76:	4798      	blx	r3
}
   23d78:	b011      	add	sp, #68	; 0x44
   23d7a:	bd30      	pop	{r4, r5, pc}

00023d7c <uECC_vli_modSquare_fast>:
{
   23d7c:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   23d7e:	460a      	mov	r2, r1
   23d80:	f7ff bfec 	b.w	23d5c <uECC_vli_modMult_fast>

00023d84 <double_jacobian_default>:
{
   23d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   23d88:	f993 6000 	ldrsb.w	r6, [r3]
{
   23d8c:	b092      	sub	sp, #72	; 0x48
   23d8e:	4604      	mov	r4, r0
   23d90:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   23d92:	4610      	mov	r0, r2
   23d94:	4631      	mov	r1, r6
{
   23d96:	4615      	mov	r5, r2
   23d98:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   23d9a:	f7ff fe93 	bl	23ac4 <uECC_vli_isZero>
   23d9e:	2800      	cmp	r0, #0
   23da0:	f040 8091 	bne.w	23ec6 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   23da4:	463a      	mov	r2, r7
   23da6:	4649      	mov	r1, r9
   23da8:	a802      	add	r0, sp, #8
   23daa:	f7ff ffe7 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   23dae:	463b      	mov	r3, r7
   23db0:	aa02      	add	r2, sp, #8
   23db2:	4621      	mov	r1, r4
   23db4:	a80a      	add	r0, sp, #40	; 0x28
   23db6:	f7ff ffd1 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   23dba:	a902      	add	r1, sp, #8
   23dbc:	4608      	mov	r0, r1
   23dbe:	463a      	mov	r2, r7
   23dc0:	f7ff ffdc 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   23dc4:	463b      	mov	r3, r7
   23dc6:	462a      	mov	r2, r5
   23dc8:	4649      	mov	r1, r9
   23dca:	4648      	mov	r0, r9
   23dcc:	f7ff ffc6 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23dd0:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   23dd4:	463a      	mov	r2, r7
   23dd6:	4629      	mov	r1, r5
   23dd8:	4628      	mov	r0, r5
   23dda:	f7ff ffcf 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23dde:	4643      	mov	r3, r8
   23de0:	462a      	mov	r2, r5
   23de2:	4621      	mov	r1, r4
   23de4:	4620      	mov	r0, r4
   23de6:	9600      	str	r6, [sp, #0]
   23de8:	f7ff fef5 	bl	23bd6 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   23dec:	4643      	mov	r3, r8
   23dee:	462a      	mov	r2, r5
   23df0:	4629      	mov	r1, r5
   23df2:	4628      	mov	r0, r5
   23df4:	9600      	str	r6, [sp, #0]
   23df6:	f7ff feee 	bl	23bd6 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   23dfa:	4643      	mov	r3, r8
   23dfc:	462a      	mov	r2, r5
   23dfe:	4621      	mov	r1, r4
   23e00:	4628      	mov	r0, r5
   23e02:	9600      	str	r6, [sp, #0]
   23e04:	f7ff ff00 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   23e08:	463b      	mov	r3, r7
   23e0a:	462a      	mov	r2, r5
   23e0c:	4621      	mov	r1, r4
   23e0e:	4620      	mov	r0, r4
   23e10:	f7ff ffa4 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   23e14:	4643      	mov	r3, r8
   23e16:	4622      	mov	r2, r4
   23e18:	4621      	mov	r1, r4
   23e1a:	4628      	mov	r0, r5
   23e1c:	9600      	str	r6, [sp, #0]
   23e1e:	f7ff feda 	bl	23bd6 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   23e22:	4643      	mov	r3, r8
   23e24:	9600      	str	r6, [sp, #0]
   23e26:	462a      	mov	r2, r5
   23e28:	4621      	mov	r1, r4
   23e2a:	4620      	mov	r0, r4
   23e2c:	f7ff fed3 	bl	23bd6 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23e30:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   23e32:	07db      	lsls	r3, r3, #31
   23e34:	d54a      	bpl.n	23ecc <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23e36:	4633      	mov	r3, r6
   23e38:	4642      	mov	r2, r8
   23e3a:	4621      	mov	r1, r4
   23e3c:	4620      	mov	r0, r4
   23e3e:	f7ff fd7d 	bl	2393c <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   23e42:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23e44:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   23e46:	4620      	mov	r0, r4
   23e48:	f7ff fd90 	bl	2396c <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   23e4c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   23e50:	3b01      	subs	r3, #1
   23e52:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   23e56:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   23e5a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   23e5e:	463a      	mov	r2, r7
   23e60:	4621      	mov	r1, r4
   23e62:	4628      	mov	r0, r5
   23e64:	f7ff ff8a 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   23e68:	4643      	mov	r3, r8
   23e6a:	aa0a      	add	r2, sp, #40	; 0x28
   23e6c:	4629      	mov	r1, r5
   23e6e:	4628      	mov	r0, r5
   23e70:	9600      	str	r6, [sp, #0]
   23e72:	f7ff fec9 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   23e76:	4643      	mov	r3, r8
   23e78:	aa0a      	add	r2, sp, #40	; 0x28
   23e7a:	4629      	mov	r1, r5
   23e7c:	4628      	mov	r0, r5
   23e7e:	9600      	str	r6, [sp, #0]
   23e80:	f7ff fec2 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   23e84:	a90a      	add	r1, sp, #40	; 0x28
   23e86:	4608      	mov	r0, r1
   23e88:	4643      	mov	r3, r8
   23e8a:	462a      	mov	r2, r5
   23e8c:	9600      	str	r6, [sp, #0]
   23e8e:	f7ff febb 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   23e92:	463b      	mov	r3, r7
   23e94:	aa0a      	add	r2, sp, #40	; 0x28
   23e96:	4621      	mov	r1, r4
   23e98:	4620      	mov	r0, r4
   23e9a:	f7ff ff5f 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   23e9e:	aa02      	add	r2, sp, #8
   23ea0:	4643      	mov	r3, r8
   23ea2:	4610      	mov	r0, r2
   23ea4:	4621      	mov	r1, r4
   23ea6:	9600      	str	r6, [sp, #0]
   23ea8:	f7ff feae 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   23eac:	4632      	mov	r2, r6
   23eae:	4629      	mov	r1, r5
   23eb0:	4620      	mov	r0, r4
   23eb2:	f7ff fe41 	bl	23b38 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   23eb6:	4649      	mov	r1, r9
   23eb8:	4628      	mov	r0, r5
   23eba:	f7ff fe3d 	bl	23b38 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   23ebe:	a902      	add	r1, sp, #8
   23ec0:	4648      	mov	r0, r9
   23ec2:	f7ff fe39 	bl	23b38 <uECC_vli_set>
}
   23ec6:	b012      	add	sp, #72	; 0x48
   23ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   23ecc:	4631      	mov	r1, r6
   23ece:	4620      	mov	r0, r4
   23ed0:	f7ff fd4c 	bl	2396c <uECC_vli_rshift1>
   23ed4:	e7c3      	b.n	23e5e <double_jacobian_default+0xda>

00023ed6 <x_side_default>:
{
   23ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23eda:	4615      	mov	r5, r2
   23edc:	b08a      	sub	sp, #40	; 0x28
   23ede:	4604      	mov	r4, r0
   23ee0:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23ee2:	221c      	movs	r2, #28
   23ee4:	2100      	movs	r1, #0
   23ee6:	a803      	add	r0, sp, #12
   23ee8:	f000 fe17 	bl	24b1a <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23eec:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   23eee:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23ef2:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23ef4:	462a      	mov	r2, r5
   23ef6:	4631      	mov	r1, r6
   23ef8:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23efa:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23efc:	f7ff ff3e 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23f00:	463b      	mov	r3, r7
   23f02:	aa02      	add	r2, sp, #8
   23f04:	4621      	mov	r1, r4
   23f06:	4620      	mov	r0, r4
   23f08:	f8cd 8000 	str.w	r8, [sp]
   23f0c:	f7ff fe7c 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   23f10:	462b      	mov	r3, r5
   23f12:	4632      	mov	r2, r6
   23f14:	4621      	mov	r1, r4
   23f16:	4620      	mov	r0, r4
   23f18:	f7ff ff20 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   23f1c:	f8cd 8000 	str.w	r8, [sp]
   23f20:	463b      	mov	r3, r7
   23f22:	f105 0284 	add.w	r2, r5, #132	; 0x84
   23f26:	4621      	mov	r1, r4
   23f28:	4620      	mov	r0, r4
   23f2a:	f7ff fe54 	bl	23bd6 <uECC_vli_modAdd>
}
   23f2e:	b00a      	add	sp, #40	; 0x28
   23f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023f34 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   23f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23f38:	b09a      	sub	sp, #104	; 0x68
   23f3a:	4616      	mov	r6, r2
   23f3c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23f40:	4644      	mov	r4, r8
{
   23f42:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   23f44:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23f48:	9500      	str	r5, [sp, #0]
{
   23f4a:	4607      	mov	r7, r0
   23f4c:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23f4e:	4623      	mov	r3, r4
   23f50:	4602      	mov	r2, r0
   23f52:	4631      	mov	r1, r6
   23f54:	a802      	add	r0, sp, #8
   23f56:	f7ff fe57 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   23f5a:	a902      	add	r1, sp, #8
   23f5c:	4642      	mov	r2, r8
   23f5e:	4608      	mov	r0, r1
   23f60:	f7ff ff0c 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23f64:	4643      	mov	r3, r8
   23f66:	aa02      	add	r2, sp, #8
   23f68:	4639      	mov	r1, r7
   23f6a:	4638      	mov	r0, r7
   23f6c:	f7ff fef6 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   23f70:	4643      	mov	r3, r8
   23f72:	aa02      	add	r2, sp, #8
   23f74:	4631      	mov	r1, r6
   23f76:	4630      	mov	r0, r6
   23f78:	f7ff fef0 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   23f7c:	4623      	mov	r3, r4
   23f7e:	4652      	mov	r2, sl
   23f80:	4649      	mov	r1, r9
   23f82:	a802      	add	r0, sp, #8
   23f84:	9500      	str	r5, [sp, #0]
   23f86:	f7ff fe26 	bl	23bd6 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   23f8a:	4623      	mov	r3, r4
   23f8c:	4652      	mov	r2, sl
   23f8e:	4649      	mov	r1, r9
   23f90:	4648      	mov	r0, r9
   23f92:	9500      	str	r5, [sp, #0]
   23f94:	f7ff fe38 	bl	23c08 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   23f98:	4623      	mov	r3, r4
   23f9a:	463a      	mov	r2, r7
   23f9c:	4631      	mov	r1, r6
   23f9e:	a80a      	add	r0, sp, #40	; 0x28
   23fa0:	9500      	str	r5, [sp, #0]
   23fa2:	f7ff fe31 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   23fa6:	4643      	mov	r3, r8
   23fa8:	aa0a      	add	r2, sp, #40	; 0x28
   23faa:	4651      	mov	r1, sl
   23fac:	4650      	mov	r0, sl
   23fae:	f7ff fed5 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   23fb2:	4623      	mov	r3, r4
   23fb4:	4632      	mov	r2, r6
   23fb6:	4639      	mov	r1, r7
   23fb8:	a80a      	add	r0, sp, #40	; 0x28
   23fba:	9500      	str	r5, [sp, #0]
   23fbc:	f7ff fe0b 	bl	23bd6 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   23fc0:	4642      	mov	r2, r8
   23fc2:	4649      	mov	r1, r9
   23fc4:	4630      	mov	r0, r6
   23fc6:	f7ff fed9 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   23fca:	4623      	mov	r3, r4
   23fcc:	aa0a      	add	r2, sp, #40	; 0x28
   23fce:	4631      	mov	r1, r6
   23fd0:	4630      	mov	r0, r6
   23fd2:	9500      	str	r5, [sp, #0]
   23fd4:	f7ff fe18 	bl	23c08 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   23fd8:	4623      	mov	r3, r4
   23fda:	4632      	mov	r2, r6
   23fdc:	4639      	mov	r1, r7
   23fde:	a812      	add	r0, sp, #72	; 0x48
   23fe0:	9500      	str	r5, [sp, #0]
   23fe2:	f7ff fe11 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   23fe6:	4643      	mov	r3, r8
   23fe8:	aa12      	add	r2, sp, #72	; 0x48
   23fea:	4649      	mov	r1, r9
   23fec:	4648      	mov	r0, r9
   23fee:	f7ff feb5 	bl	23d5c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   23ff2:	4623      	mov	r3, r4
   23ff4:	4652      	mov	r2, sl
   23ff6:	4649      	mov	r1, r9
   23ff8:	4648      	mov	r0, r9
   23ffa:	9500      	str	r5, [sp, #0]
   23ffc:	f7ff fe04 	bl	23c08 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   24000:	4642      	mov	r2, r8
   24002:	a902      	add	r1, sp, #8
   24004:	a812      	add	r0, sp, #72	; 0x48
   24006:	f7ff feb9 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2400a:	a912      	add	r1, sp, #72	; 0x48
   2400c:	4623      	mov	r3, r4
   2400e:	aa0a      	add	r2, sp, #40	; 0x28
   24010:	4608      	mov	r0, r1
   24012:	9500      	str	r5, [sp, #0]
   24014:	f7ff fdf8 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   24018:	4623      	mov	r3, r4
   2401a:	463a      	mov	r2, r7
   2401c:	a912      	add	r1, sp, #72	; 0x48
   2401e:	a80a      	add	r0, sp, #40	; 0x28
   24020:	9500      	str	r5, [sp, #0]
   24022:	f7ff fdf1 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   24026:	a90a      	add	r1, sp, #40	; 0x28
   24028:	4643      	mov	r3, r8
   2402a:	aa02      	add	r2, sp, #8
   2402c:	4608      	mov	r0, r1
   2402e:	f7ff fe95 	bl	23d5c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   24032:	4623      	mov	r3, r4
   24034:	4652      	mov	r2, sl
   24036:	a90a      	add	r1, sp, #40	; 0x28
   24038:	4650      	mov	r0, sl
   2403a:	9500      	str	r5, [sp, #0]
   2403c:	f7ff fde4 	bl	23c08 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   24040:	462a      	mov	r2, r5
   24042:	a912      	add	r1, sp, #72	; 0x48
   24044:	4638      	mov	r0, r7
   24046:	f7ff fd77 	bl	23b38 <uECC_vli_set>
}
   2404a:	b01a      	add	sp, #104	; 0x68
   2404c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024050 <uECC_vli_modInv>:
{
   24050:	b5f0      	push	{r4, r5, r6, r7, lr}
   24052:	460f      	mov	r7, r1
   24054:	b0a1      	sub	sp, #132	; 0x84
   24056:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   24058:	4619      	mov	r1, r3
   2405a:	4638      	mov	r0, r7
{
   2405c:	4615      	mov	r5, r2
   2405e:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   24060:	f7ff fd30 	bl	23ac4 <uECC_vli_isZero>
   24064:	b120      	cbz	r0, 24070 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   24066:	4630      	mov	r0, r6
   24068:	f7ff fd21 	bl	23aae <uECC_vli_clear>
}
   2406c:	b021      	add	sp, #132	; 0x84
   2406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   24070:	4622      	mov	r2, r4
   24072:	4639      	mov	r1, r7
   24074:	4668      	mov	r0, sp
   24076:	f7ff fd5f 	bl	23b38 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2407a:	4629      	mov	r1, r5
   2407c:	a808      	add	r0, sp, #32
   2407e:	f7ff fd5b 	bl	23b38 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   24082:	a810      	add	r0, sp, #64	; 0x40
   24084:	4621      	mov	r1, r4
   24086:	f7ff fd12 	bl	23aae <uECC_vli_clear>
	u[0] = 1;
   2408a:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   2408c:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   2408e:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   24090:	f7ff fd0d 	bl	23aae <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   24094:	4622      	mov	r2, r4
   24096:	a908      	add	r1, sp, #32
   24098:	4668      	mov	r0, sp
   2409a:	f7ff fd59 	bl	23b50 <uECC_vli_cmp_unsafe>
   2409e:	b928      	cbnz	r0, 240ac <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   240a0:	4622      	mov	r2, r4
   240a2:	a910      	add	r1, sp, #64	; 0x40
   240a4:	4630      	mov	r0, r6
   240a6:	f7ff fd47 	bl	23b38 <uECC_vli_set>
   240aa:	e7df      	b.n	2406c <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   240ac:	9b00      	ldr	r3, [sp, #0]
   240ae:	07da      	lsls	r2, r3, #31
   240b0:	d409      	bmi.n	240c6 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   240b2:	4621      	mov	r1, r4
   240b4:	4668      	mov	r0, sp
   240b6:	f7ff fc59 	bl	2396c <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   240ba:	4622      	mov	r2, r4
   240bc:	4629      	mov	r1, r5
   240be:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   240c0:	f7ff fc61 	bl	23986 <vli_modInv_update>
   240c4:	e7e6      	b.n	24094 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   240c6:	9b08      	ldr	r3, [sp, #32]
   240c8:	07db      	lsls	r3, r3, #31
   240ca:	d407      	bmi.n	240dc <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   240cc:	4621      	mov	r1, r4
   240ce:	a808      	add	r0, sp, #32
   240d0:	f7ff fc4c 	bl	2396c <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   240d4:	4622      	mov	r2, r4
   240d6:	4629      	mov	r1, r5
   240d8:	a818      	add	r0, sp, #96	; 0x60
   240da:	e7f1      	b.n	240c0 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   240dc:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   240de:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   240e0:	dd1c      	ble.n	2411c <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   240e2:	aa08      	add	r2, sp, #32
   240e4:	4669      	mov	r1, sp
   240e6:	4668      	mov	r0, sp
   240e8:	f7ff fd5c 	bl	23ba4 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   240ec:	4621      	mov	r1, r4
   240ee:	4668      	mov	r0, sp
   240f0:	f7ff fc3c 	bl	2396c <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   240f4:	4622      	mov	r2, r4
   240f6:	a918      	add	r1, sp, #96	; 0x60
   240f8:	a810      	add	r0, sp, #64	; 0x40
   240fa:	f7ff fd29 	bl	23b50 <uECC_vli_cmp_unsafe>
   240fe:	2800      	cmp	r0, #0
   24100:	da05      	bge.n	2410e <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   24102:	a910      	add	r1, sp, #64	; 0x40
   24104:	4623      	mov	r3, r4
   24106:	462a      	mov	r2, r5
   24108:	4608      	mov	r0, r1
   2410a:	f7ff fc17 	bl	2393c <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2410e:	a910      	add	r1, sp, #64	; 0x40
   24110:	4623      	mov	r3, r4
   24112:	aa18      	add	r2, sp, #96	; 0x60
   24114:	4608      	mov	r0, r1
   24116:	f7ff fd45 	bl	23ba4 <uECC_vli_sub>
   2411a:	e7ce      	b.n	240ba <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   2411c:	a908      	add	r1, sp, #32
   2411e:	466a      	mov	r2, sp
   24120:	4608      	mov	r0, r1
   24122:	f7ff fd3f 	bl	23ba4 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   24126:	4621      	mov	r1, r4
   24128:	a808      	add	r0, sp, #32
   2412a:	f7ff fc1f 	bl	2396c <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2412e:	4622      	mov	r2, r4
   24130:	a910      	add	r1, sp, #64	; 0x40
   24132:	a818      	add	r0, sp, #96	; 0x60
   24134:	f7ff fd0c 	bl	23b50 <uECC_vli_cmp_unsafe>
   24138:	2800      	cmp	r0, #0
   2413a:	da05      	bge.n	24148 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   2413c:	a918      	add	r1, sp, #96	; 0x60
   2413e:	4623      	mov	r3, r4
   24140:	462a      	mov	r2, r5
   24142:	4608      	mov	r0, r1
   24144:	f7ff fbfa 	bl	2393c <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   24148:	a918      	add	r1, sp, #96	; 0x60
   2414a:	4623      	mov	r3, r4
   2414c:	aa10      	add	r2, sp, #64	; 0x40
   2414e:	4608      	mov	r0, r1
   24150:	f7ff fd28 	bl	23ba4 <uECC_vli_sub>
   24154:	e7be      	b.n	240d4 <uECC_vli_modInv+0x84>

00024156 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   24156:	7809      	ldrb	r1, [r1, #0]
   24158:	0049      	lsls	r1, r1, #1
   2415a:	b249      	sxtb	r1, r1
   2415c:	f7ff bcb2 	b.w	23ac4 <uECC_vli_isZero>

00024160 <apply_z>:
{
   24160:	b5f0      	push	{r4, r5, r6, r7, lr}
   24162:	4615      	mov	r5, r2
   24164:	b089      	sub	sp, #36	; 0x24
   24166:	461c      	mov	r4, r3
   24168:	4607      	mov	r7, r0
   2416a:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2416c:	461a      	mov	r2, r3
   2416e:	4629      	mov	r1, r5
   24170:	4668      	mov	r0, sp
   24172:	f7ff fe03 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   24176:	4623      	mov	r3, r4
   24178:	466a      	mov	r2, sp
   2417a:	4639      	mov	r1, r7
   2417c:	4638      	mov	r0, r7
   2417e:	f7ff fded 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   24182:	4623      	mov	r3, r4
   24184:	462a      	mov	r2, r5
   24186:	4669      	mov	r1, sp
   24188:	4668      	mov	r0, sp
   2418a:	f7ff fde7 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2418e:	4623      	mov	r3, r4
   24190:	466a      	mov	r2, sp
   24192:	4631      	mov	r1, r6
   24194:	4630      	mov	r0, r6
   24196:	f7ff fde1 	bl	23d5c <uECC_vli_modMult_fast>
}
   2419a:	b009      	add	sp, #36	; 0x24
   2419c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002419e <XYcZ_add>:
{
   2419e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   241a2:	b08a      	sub	sp, #40	; 0x28
   241a4:	4614      	mov	r4, r2
   241a6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   241aa:	4655      	mov	r5, sl
{
   241ac:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   241ae:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   241b2:	9600      	str	r6, [sp, #0]
{
   241b4:	4680      	mov	r8, r0
   241b6:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   241b8:	462b      	mov	r3, r5
   241ba:	4602      	mov	r2, r0
   241bc:	4621      	mov	r1, r4
   241be:	a802      	add	r0, sp, #8
   241c0:	f7ff fd22 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   241c4:	a902      	add	r1, sp, #8
   241c6:	4652      	mov	r2, sl
   241c8:	4608      	mov	r0, r1
   241ca:	f7ff fdd7 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   241ce:	4653      	mov	r3, sl
   241d0:	aa02      	add	r2, sp, #8
   241d2:	4641      	mov	r1, r8
   241d4:	4640      	mov	r0, r8
   241d6:	f7ff fdc1 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   241da:	4653      	mov	r3, sl
   241dc:	aa02      	add	r2, sp, #8
   241de:	4621      	mov	r1, r4
   241e0:	4620      	mov	r0, r4
   241e2:	f7ff fdbb 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   241e6:	462b      	mov	r3, r5
   241e8:	464a      	mov	r2, r9
   241ea:	4639      	mov	r1, r7
   241ec:	4638      	mov	r0, r7
   241ee:	9600      	str	r6, [sp, #0]
   241f0:	f7ff fd0a 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   241f4:	4652      	mov	r2, sl
   241f6:	4639      	mov	r1, r7
   241f8:	a802      	add	r0, sp, #8
   241fa:	f7ff fdbf 	bl	23d7c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   241fe:	a902      	add	r1, sp, #8
   24200:	462b      	mov	r3, r5
   24202:	4642      	mov	r2, r8
   24204:	4608      	mov	r0, r1
   24206:	9600      	str	r6, [sp, #0]
   24208:	f7ff fcfe 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2420c:	a902      	add	r1, sp, #8
   2420e:	462b      	mov	r3, r5
   24210:	4622      	mov	r2, r4
   24212:	4608      	mov	r0, r1
   24214:	9600      	str	r6, [sp, #0]
   24216:	f7ff fcf7 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2421a:	462b      	mov	r3, r5
   2421c:	4642      	mov	r2, r8
   2421e:	4621      	mov	r1, r4
   24220:	4620      	mov	r0, r4
   24222:	9600      	str	r6, [sp, #0]
   24224:	f7ff fcf0 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   24228:	4653      	mov	r3, sl
   2422a:	4622      	mov	r2, r4
   2422c:	4649      	mov	r1, r9
   2422e:	4648      	mov	r0, r9
   24230:	f7ff fd94 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   24234:	462b      	mov	r3, r5
   24236:	aa02      	add	r2, sp, #8
   24238:	4641      	mov	r1, r8
   2423a:	4620      	mov	r0, r4
   2423c:	9600      	str	r6, [sp, #0]
   2423e:	f7ff fce3 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   24242:	4653      	mov	r3, sl
   24244:	4622      	mov	r2, r4
   24246:	4639      	mov	r1, r7
   24248:	4638      	mov	r0, r7
   2424a:	f7ff fd87 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2424e:	462b      	mov	r3, r5
   24250:	464a      	mov	r2, r9
   24252:	4639      	mov	r1, r7
   24254:	4638      	mov	r0, r7
   24256:	9600      	str	r6, [sp, #0]
   24258:	f7ff fcd6 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2425c:	4632      	mov	r2, r6
   2425e:	a902      	add	r1, sp, #8
   24260:	4620      	mov	r0, r4
   24262:	f7ff fc69 	bl	23b38 <uECC_vli_set>
}
   24266:	b00a      	add	sp, #40	; 0x28
   24268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002426c <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24270:	b0b1      	sub	sp, #196	; 0xc4
   24272:	e9cd 0103 	strd	r0, r1, [sp, #12]
   24276:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   24278:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2427c:	a818      	add	r0, sp, #96	; 0x60
{
   2427e:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   24280:	463a      	mov	r2, r7
{
   24282:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   24284:	f7ff fc58 	bl	23b38 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   24288:	00bb      	lsls	r3, r7, #2
   2428a:	9305      	str	r3, [sp, #20]
   2428c:	9b04      	ldr	r3, [sp, #16]
   2428e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   24292:	4619      	mov	r1, r3
   24294:	a828      	add	r0, sp, #160	; 0xa0
   24296:	9302      	str	r3, [sp, #8]
   24298:	f7ff fc4e 	bl	23b38 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2429c:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   242a0:	2e00      	cmp	r6, #0
   242a2:	f000 8088 	beq.w	243b6 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   242a6:	462a      	mov	r2, r5
   242a8:	4631      	mov	r1, r6
   242aa:	a808      	add	r0, sp, #32
   242ac:	f7ff fc44 	bl	23b38 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   242b0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   242b4:	462a      	mov	r2, r5
   242b6:	a918      	add	r1, sp, #96	; 0x60
   242b8:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   242ba:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   242be:	f7ff fc3b 	bl	23b38 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   242c2:	a928      	add	r1, sp, #160	; 0xa0
   242c4:	4648      	mov	r0, r9
   242c6:	f7ff fc37 	bl	23b38 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   242ca:	4623      	mov	r3, r4
   242cc:	aa08      	add	r2, sp, #32
   242ce:	a928      	add	r1, sp, #160	; 0xa0
   242d0:	a818      	add	r0, sp, #96	; 0x60
   242d2:	f7ff ff45 	bl	24160 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   242d6:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   242da:	4623      	mov	r3, r4
   242dc:	aa08      	add	r2, sp, #32
   242de:	a928      	add	r1, sp, #160	; 0xa0
   242e0:	a818      	add	r0, sp, #96	; 0x60
   242e2:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   242e4:	4623      	mov	r3, r4
   242e6:	aa08      	add	r2, sp, #32
   242e8:	4649      	mov	r1, r9
   242ea:	4640      	mov	r0, r8
   242ec:	f7ff ff38 	bl	24160 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   242f0:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   242f4:	3d02      	subs	r5, #2
   242f6:	b22d      	sxth	r5, r5
   242f8:	2d00      	cmp	r5, #0
   242fa:	dc63      	bgt.n	243c4 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   242fc:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   24300:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   24302:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   24306:	ab10      	add	r3, sp, #64	; 0x40
   24308:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2430c:	43ed      	mvns	r5, r5
   2430e:	ab20      	add	r3, sp, #128	; 0x80
   24310:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   24314:	f005 0501 	and.w	r5, r5, #1
   24318:	ab10      	add	r3, sp, #64	; 0x40
   2431a:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   2431e:	ab20      	add	r3, sp, #128	; 0x80
   24320:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   24324:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   24328:	462b      	mov	r3, r5
   2432a:	464a      	mov	r2, r9
   2432c:	4631      	mov	r1, r6
   2432e:	4640      	mov	r0, r8
   24330:	f7ff fe00 	bl	23f34 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   24334:	4653      	mov	r3, sl
   24336:	aa10      	add	r2, sp, #64	; 0x40
   24338:	a918      	add	r1, sp, #96	; 0x60
   2433a:	a808      	add	r0, sp, #32
   2433c:	9700      	str	r7, [sp, #0]
   2433e:	f7ff fc63 	bl	23c08 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   24342:	a908      	add	r1, sp, #32
   24344:	4623      	mov	r3, r4
   24346:	4632      	mov	r2, r6
   24348:	4608      	mov	r0, r1
   2434a:	f7ff fd07 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2434e:	a908      	add	r1, sp, #32
   24350:	9a04      	ldr	r2, [sp, #16]
   24352:	4623      	mov	r3, r4
   24354:	4608      	mov	r0, r1
   24356:	f7ff fd01 	bl	23d5c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2435a:	a908      	add	r1, sp, #32
   2435c:	463b      	mov	r3, r7
   2435e:	4652      	mov	r2, sl
   24360:	4608      	mov	r0, r1
   24362:	f7ff fe75 	bl	24050 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   24366:	a908      	add	r1, sp, #32
   24368:	9a02      	ldr	r2, [sp, #8]
   2436a:	4623      	mov	r3, r4
   2436c:	4608      	mov	r0, r1
   2436e:	f7ff fcf5 	bl	23d5c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   24372:	a908      	add	r1, sp, #32
   24374:	4623      	mov	r3, r4
   24376:	4642      	mov	r2, r8
   24378:	4608      	mov	r0, r1
   2437a:	f7ff fcef 	bl	23d5c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2437e:	9400      	str	r4, [sp, #0]
   24380:	4633      	mov	r3, r6
   24382:	4642      	mov	r2, r8
   24384:	4629      	mov	r1, r5
   24386:	4648      	mov	r0, r9
   24388:	f7ff ff09 	bl	2419e <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2438c:	4623      	mov	r3, r4
   2438e:	aa08      	add	r2, sp, #32
   24390:	a920      	add	r1, sp, #128	; 0x80
   24392:	a810      	add	r0, sp, #64	; 0x40
   24394:	f7ff fee4 	bl	24160 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   24398:	9803      	ldr	r0, [sp, #12]
   2439a:	463a      	mov	r2, r7
   2439c:	a910      	add	r1, sp, #64	; 0x40
   2439e:	f7ff fbcb 	bl	23b38 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   243a2:	9b03      	ldr	r3, [sp, #12]
   243a4:	9c05      	ldr	r4, [sp, #20]
   243a6:	4423      	add	r3, r4
   243a8:	a920      	add	r1, sp, #128	; 0x80
   243aa:	4618      	mov	r0, r3
   243ac:	f7ff fbc4 	bl	23b38 <uECC_vli_set>
}
   243b0:	b031      	add	sp, #196	; 0xc4
   243b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   243b6:	4629      	mov	r1, r5
   243b8:	a808      	add	r0, sp, #32
   243ba:	f7ff fb78 	bl	23aae <uECC_vli_clear>
		z[0] = 1;
   243be:	2301      	movs	r3, #1
   243c0:	9308      	str	r3, [sp, #32]
   243c2:	e775      	b.n	242b0 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   243c4:	4629      	mov	r1, r5
   243c6:	4650      	mov	r0, sl
   243c8:	f7ff fb8b 	bl	23ae2 <uECC_vli_testBit>
   243cc:	fab0 f680 	clz	r6, r0
   243d0:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   243d2:	f1c6 0101 	rsb	r1, r6, #1
   243d6:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   243da:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   243de:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   243e2:	4633      	mov	r3, r6
   243e4:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   243e8:	465a      	mov	r2, fp
   243ea:	9400      	str	r4, [sp, #0]
   243ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
   243f0:	f7ff fda0 	bl	23f34 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   243f4:	9907      	ldr	r1, [sp, #28]
   243f6:	9806      	ldr	r0, [sp, #24]
   243f8:	9400      	str	r4, [sp, #0]
   243fa:	460b      	mov	r3, r1
   243fc:	4602      	mov	r2, r0
   243fe:	4631      	mov	r1, r6
   24400:	4658      	mov	r0, fp
   24402:	f7ff fecc 	bl	2419e <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   24406:	3d01      	subs	r5, #1
   24408:	e775      	b.n	242f6 <EccPoint_mult+0x8a>

0002440a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2440a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2440e:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   24412:	f119 081f 	adds.w	r8, r9, #31
{
   24416:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   24418:	bf48      	it	mi
   2441a:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   2441e:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   24420:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   24424:	3524      	adds	r5, #36	; 0x24
   24426:	4601      	mov	r1, r0
{
   24428:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2442a:	4643      	mov	r3, r8
   2442c:	462a      	mov	r2, r5
   2442e:	4630      	mov	r0, r6
   24430:	f7ff fa84 	bl	2393c <uECC_vli_add>
   24434:	4604      	mov	r4, r0
   24436:	b990      	cbnz	r0, 2445e <regularize_k+0x54>
   24438:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2443c:	da06      	bge.n	2444c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2443e:	4649      	mov	r1, r9
   24440:	4630      	mov	r0, r6
   24442:	f7ff fb4e 	bl	23ae2 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   24446:	1e04      	subs	r4, r0, #0
   24448:	bf18      	it	ne
   2444a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2444c:	4643      	mov	r3, r8
   2444e:	462a      	mov	r2, r5
   24450:	4631      	mov	r1, r6
   24452:	4638      	mov	r0, r7
   24454:	f7ff fa72 	bl	2393c <uECC_vli_add>

	return carry;
}
   24458:	4620      	mov	r0, r4
   2445a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2445e:	2401      	movs	r4, #1
   24460:	e7f4      	b.n	2444c <regularize_k+0x42>

00024462 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   24462:	b530      	push	{r4, r5, lr}
   24464:	4614      	mov	r4, r2
   24466:	b095      	sub	sp, #84	; 0x54
   24468:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2446a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2446c:	4623      	mov	r3, r4
{
   2446e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   24470:	a904      	add	r1, sp, #16
   24472:	9102      	str	r1, [sp, #8]
   24474:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   24476:	f7ff ffc8 	bl	2440a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2447a:	fab0 f380 	clz	r3, r0
   2447e:	095b      	lsrs	r3, r3, #5
   24480:	aa14      	add	r2, sp, #80	; 0x50
   24482:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   24486:	8863      	ldrh	r3, [r4, #2]
   24488:	9401      	str	r4, [sp, #4]
   2448a:	3301      	adds	r3, #1
   2448c:	b21b      	sxth	r3, r3
   2448e:	9300      	str	r3, [sp, #0]
   24490:	f852 2c48 	ldr.w	r2, [r2, #-72]
   24494:	2300      	movs	r3, #0
   24496:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2449a:	4628      	mov	r0, r5
   2449c:	f7ff fee6 	bl	2426c <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   244a0:	4621      	mov	r1, r4
   244a2:	4628      	mov	r0, r5
   244a4:	f7ff fe57 	bl	24156 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   244a8:	fab0 f080 	clz	r0, r0
   244ac:	0940      	lsrs	r0, r0, #5
   244ae:	b015      	add	sp, #84	; 0x54
   244b0:	bd30      	pop	{r4, r5, pc}

000244b2 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   244b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   244b4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   244b6:	1e4f      	subs	r7, r1, #1
   244b8:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   244ba:	428c      	cmp	r4, r1
   244bc:	f105 0501 	add.w	r5, r5, #1
   244c0:	db00      	blt.n	244c4 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   244c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   244c4:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   244c6:	f023 0603 	bic.w	r6, r3, #3
   244ca:	f003 0303 	and.w	r3, r3, #3
   244ce:	5996      	ldr	r6, [r2, r6]
   244d0:	00db      	lsls	r3, r3, #3
   244d2:	fa26 f303 	lsr.w	r3, r6, r3
   244d6:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   244d8:	e7ee      	b.n	244b8 <uECC_vli_nativeToBytes+0x6>

000244da <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   244da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244dc:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   244de:	1cd1      	adds	r1, r2, #3
   244e0:	bf48      	it	mi
   244e2:	1d91      	addmi	r1, r2, #6
   244e4:	f341 0187 	sbfx	r1, r1, #2, #8
{
   244e8:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   244ea:	f7ff fae0 	bl	23aae <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   244ee:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   244f0:	1e67      	subs	r7, r4, #1
   244f2:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   244f4:	42a2      	cmp	r2, r4
   244f6:	f105 0501 	add.w	r5, r5, #1
   244fa:	db00      	blt.n	244fe <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   244fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   244fe:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   24500:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   24504:	5cb2      	ldrb	r2, [r6, r2]
   24506:	f003 0303 	and.w	r3, r3, #3
   2450a:	00db      	lsls	r3, r3, #3
   2450c:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   24510:	5842      	ldr	r2, [r0, r1]
   24512:	431a      	orrs	r2, r3
   24514:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   24516:	e7ec      	b.n	244f2 <uECC_vli_bytesToNative+0x18>

00024518 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   24518:	b5f0      	push	{r4, r5, r6, r7, lr}
   2451a:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2451c:	f991 6000 	ldrsb.w	r6, [r1]
{
   24520:	4605      	mov	r5, r0
   24522:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   24524:	f7ff fe17 	bl	24156 <EccPoint_isZero>
   24528:	bb28      	cbnz	r0, 24576 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2452a:	1d27      	adds	r7, r4, #4
   2452c:	4632      	mov	r2, r6
   2452e:	4629      	mov	r1, r5
   24530:	4638      	mov	r0, r7
   24532:	f7ff fb0d 	bl	23b50 <uECC_vli_cmp_unsafe>
   24536:	2801      	cmp	r0, #1
   24538:	d120      	bne.n	2457c <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2453a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   2453e:	4632      	mov	r2, r6
   24540:	4638      	mov	r0, r7
   24542:	f7ff fb05 	bl	23b50 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   24546:	2801      	cmp	r0, #1
   24548:	d118      	bne.n	2457c <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2454a:	4622      	mov	r2, r4
   2454c:	4668      	mov	r0, sp
   2454e:	f7ff fc15 	bl	23d7c <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   24552:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   24556:	4622      	mov	r2, r4
   24558:	4629      	mov	r1, r5
   2455a:	a808      	add	r0, sp, #32
   2455c:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2455e:	4632      	mov	r2, r6
   24560:	a908      	add	r1, sp, #32
   24562:	4668      	mov	r0, sp
   24564:	f7ff fb0b 	bl	23b7e <uECC_vli_equal>
   24568:	2800      	cmp	r0, #0
		return -3;
   2456a:	bf0c      	ite	eq
   2456c:	2000      	moveq	r0, #0
   2456e:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   24572:	b011      	add	sp, #68	; 0x44
   24574:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   24576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2457a:	e7fa      	b.n	24572 <uECC_valid_point+0x5a>
		return -2;
   2457c:	f06f 0001 	mvn.w	r0, #1
   24580:	e7f7      	b.n	24572 <uECC_valid_point+0x5a>

00024582 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   24582:	b570      	push	{r4, r5, r6, lr}
   24584:	460c      	mov	r4, r1
   24586:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   24588:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2458a:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2458e:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   24590:	4601      	mov	r1, r0
   24592:	4668      	mov	r0, sp
   24594:	f7ff ffa1 	bl	244da <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   24598:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2459c:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   245a0:	18a9      	adds	r1, r5, r2
   245a2:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   245a6:	f7ff ff98 	bl	244da <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   245aa:	2210      	movs	r2, #16
   245ac:	4631      	mov	r1, r6
   245ae:	4668      	mov	r0, sp
   245b0:	f7ff face 	bl	23b50 <uECC_vli_cmp_unsafe>
   245b4:	b128      	cbz	r0, 245c2 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   245b6:	4621      	mov	r1, r4
   245b8:	4668      	mov	r0, sp
   245ba:	f7ff ffad 	bl	24518 <uECC_valid_point>
}
   245be:	b010      	add	sp, #64	; 0x40
   245c0:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   245c2:	f06f 0003 	mvn.w	r0, #3
   245c6:	e7fa      	b.n	245be <uECC_valid_public_key+0x3c>

000245c8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   245c8:	78cb      	ldrb	r3, [r1, #3]
   245ca:	7802      	ldrb	r2, [r0, #0]
   245cc:	4053      	eors	r3, r2
   245ce:	7003      	strb	r3, [r0, #0]
   245d0:	884b      	ldrh	r3, [r1, #2]
   245d2:	7842      	ldrb	r2, [r0, #1]
   245d4:	4053      	eors	r3, r2
   245d6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   245d8:	680a      	ldr	r2, [r1, #0]
   245da:	7883      	ldrb	r3, [r0, #2]
   245dc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   245e0:	7083      	strb	r3, [r0, #2]
   245e2:	680a      	ldr	r2, [r1, #0]
   245e4:	78c3      	ldrb	r3, [r0, #3]
   245e6:	4053      	eors	r3, r2
   245e8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   245ea:	79cb      	ldrb	r3, [r1, #7]
   245ec:	7902      	ldrb	r2, [r0, #4]
   245ee:	4053      	eors	r3, r2
   245f0:	7103      	strb	r3, [r0, #4]
   245f2:	88cb      	ldrh	r3, [r1, #6]
   245f4:	7942      	ldrb	r2, [r0, #5]
   245f6:	4053      	eors	r3, r2
   245f8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   245fa:	684a      	ldr	r2, [r1, #4]
   245fc:	7983      	ldrb	r3, [r0, #6]
   245fe:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24602:	7183      	strb	r3, [r0, #6]
   24604:	684a      	ldr	r2, [r1, #4]
   24606:	79c3      	ldrb	r3, [r0, #7]
   24608:	4053      	eors	r3, r2
   2460a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2460c:	7acb      	ldrb	r3, [r1, #11]
   2460e:	7a02      	ldrb	r2, [r0, #8]
   24610:	4053      	eors	r3, r2
   24612:	7203      	strb	r3, [r0, #8]
   24614:	7a42      	ldrb	r2, [r0, #9]
   24616:	894b      	ldrh	r3, [r1, #10]
   24618:	4053      	eors	r3, r2
   2461a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2461c:	688a      	ldr	r2, [r1, #8]
   2461e:	7a83      	ldrb	r3, [r0, #10]
   24620:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24624:	7283      	strb	r3, [r0, #10]
   24626:	688a      	ldr	r2, [r1, #8]
   24628:	7ac3      	ldrb	r3, [r0, #11]
   2462a:	4053      	eors	r3, r2
   2462c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2462e:	7bcb      	ldrb	r3, [r1, #15]
   24630:	7b02      	ldrb	r2, [r0, #12]
   24632:	4053      	eors	r3, r2
   24634:	7303      	strb	r3, [r0, #12]
   24636:	89cb      	ldrh	r3, [r1, #14]
   24638:	7b42      	ldrb	r2, [r0, #13]
   2463a:	4053      	eors	r3, r2
   2463c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2463e:	68ca      	ldr	r2, [r1, #12]
   24640:	7b83      	ldrb	r3, [r0, #14]
   24642:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24646:	7383      	strb	r3, [r0, #14]
   24648:	68ca      	ldr	r2, [r1, #12]
   2464a:	7bc3      	ldrb	r3, [r0, #15]
   2464c:	4053      	eors	r3, r2
   2464e:	73c3      	strb	r3, [r0, #15]
}
   24650:	4770      	bx	lr

00024652 <shift_rows>:
{
   24652:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   24654:	7802      	ldrb	r2, [r0, #0]
   24656:	f88d 2000 	strb.w	r2, [sp]
   2465a:	7942      	ldrb	r2, [r0, #5]
   2465c:	f88d 2001 	strb.w	r2, [sp, #1]
   24660:	7a82      	ldrb	r2, [r0, #10]
   24662:	f88d 2002 	strb.w	r2, [sp, #2]
   24666:	7bc2      	ldrb	r2, [r0, #15]
   24668:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2466c:	7902      	ldrb	r2, [r0, #4]
   2466e:	f88d 2004 	strb.w	r2, [sp, #4]
   24672:	7a42      	ldrb	r2, [r0, #9]
   24674:	f88d 2005 	strb.w	r2, [sp, #5]
   24678:	7b82      	ldrb	r2, [r0, #14]
   2467a:	f88d 2006 	strb.w	r2, [sp, #6]
   2467e:	78c2      	ldrb	r2, [r0, #3]
   24680:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   24684:	7a02      	ldrb	r2, [r0, #8]
   24686:	f88d 2008 	strb.w	r2, [sp, #8]
   2468a:	7b42      	ldrb	r2, [r0, #13]
   2468c:	f88d 2009 	strb.w	r2, [sp, #9]
   24690:	7882      	ldrb	r2, [r0, #2]
   24692:	f88d 200a 	strb.w	r2, [sp, #10]
   24696:	79c2      	ldrb	r2, [r0, #7]
   24698:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2469c:	7b02      	ldrb	r2, [r0, #12]
   2469e:	f88d 200c 	strb.w	r2, [sp, #12]
   246a2:	7842      	ldrb	r2, [r0, #1]
   246a4:	7ac3      	ldrb	r3, [r0, #11]
   246a6:	f88d 200d 	strb.w	r2, [sp, #13]
   246aa:	7982      	ldrb	r2, [r0, #6]
   246ac:	f88d 200e 	strb.w	r2, [sp, #14]
   246b0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   246b4:	2310      	movs	r3, #16
   246b6:	466a      	mov	r2, sp
   246b8:	4619      	mov	r1, r3
   246ba:	f7ff f87b 	bl	237b4 <_copy>
}
   246be:	b005      	add	sp, #20
   246c0:	f85d fb04 	ldr.w	pc, [sp], #4

000246c4 <mult_row_column>:
{
   246c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   246c6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   246c8:	7808      	ldrb	r0, [r1, #0]
{
   246ca:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   246cc:	f7ff f881 	bl	237d2 <_double_byte>
   246d0:	4605      	mov	r5, r0
   246d2:	7860      	ldrb	r0, [r4, #1]
   246d4:	f7ff f87d 	bl	237d2 <_double_byte>
   246d8:	78a2      	ldrb	r2, [r4, #2]
   246da:	7863      	ldrb	r3, [r4, #1]
   246dc:	4053      	eors	r3, r2
   246de:	78e2      	ldrb	r2, [r4, #3]
   246e0:	4053      	eors	r3, r2
   246e2:	405d      	eors	r5, r3
   246e4:	4045      	eors	r5, r0
   246e6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   246e8:	7860      	ldrb	r0, [r4, #1]
   246ea:	7827      	ldrb	r7, [r4, #0]
   246ec:	f7ff f871 	bl	237d2 <_double_byte>
   246f0:	4605      	mov	r5, r0
   246f2:	78a0      	ldrb	r0, [r4, #2]
   246f4:	f7ff f86d 	bl	237d2 <_double_byte>
   246f8:	78a3      	ldrb	r3, [r4, #2]
   246fa:	405f      	eors	r7, r3
   246fc:	78e3      	ldrb	r3, [r4, #3]
   246fe:	405f      	eors	r7, r3
   24700:	407d      	eors	r5, r7
   24702:	4045      	eors	r5, r0
   24704:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24706:	78a0      	ldrb	r0, [r4, #2]
   24708:	7865      	ldrb	r5, [r4, #1]
   2470a:	7827      	ldrb	r7, [r4, #0]
   2470c:	f7ff f861 	bl	237d2 <_double_byte>
   24710:	406f      	eors	r7, r5
   24712:	4605      	mov	r5, r0
   24714:	78e0      	ldrb	r0, [r4, #3]
   24716:	f7ff f85c 	bl	237d2 <_double_byte>
   2471a:	78e3      	ldrb	r3, [r4, #3]
   2471c:	405f      	eors	r7, r3
   2471e:	407d      	eors	r5, r7
   24720:	4045      	eors	r5, r0
   24722:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   24724:	7820      	ldrb	r0, [r4, #0]
   24726:	f7ff f854 	bl	237d2 <_double_byte>
   2472a:	7863      	ldrb	r3, [r4, #1]
   2472c:	7825      	ldrb	r5, [r4, #0]
   2472e:	405d      	eors	r5, r3
   24730:	78a3      	ldrb	r3, [r4, #2]
   24732:	405d      	eors	r5, r3
   24734:	4045      	eors	r5, r0
   24736:	78e0      	ldrb	r0, [r4, #3]
   24738:	f7ff f84b 	bl	237d2 <_double_byte>
   2473c:	b2ed      	uxtb	r5, r5
   2473e:	4045      	eors	r5, r0
   24740:	70f5      	strb	r5, [r6, #3]
}
   24742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024744 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   24744:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24746:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   24748:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2474a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2474e:	2b00      	cmp	r3, #0
   24750:	bfb4      	ite	lt
   24752:	2387      	movlt	r3, #135	; 0x87
   24754:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24756:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2475a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2475e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   24760:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   24764:	d002      	beq.n	2476c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   24766:	7813      	ldrb	r3, [r2, #0]
   24768:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2476a:	e7f4      	b.n	24756 <gf_double+0x12>
	}
}
   2476c:	bd10      	pop	{r4, pc}

0002476e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2476e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   24770:	b120      	cbz	r0, 2477c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   24772:	2258      	movs	r2, #88	; 0x58
   24774:	2100      	movs	r1, #0
   24776:	f7ff f82a 	bl	237ce <_set>
   2477a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2477c:	bd08      	pop	{r3, pc}

0002477e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2477e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24780:	4604      	mov	r4, r0
   24782:	b188      	cbz	r0, 247a8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24784:	2210      	movs	r2, #16
   24786:	2100      	movs	r1, #0
   24788:	f7ff f821 	bl	237ce <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2478c:	2210      	movs	r2, #16
   2478e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24792:	2100      	movs	r1, #0
   24794:	f7ff f81b 	bl	237ce <_set>
	s->leftover_offset = 0;
   24798:	2300      	movs	r3, #0
   2479a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2479c:	2200      	movs	r2, #0
   2479e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   247a2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   247a6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   247a8:	bd10      	pop	{r4, pc}

000247aa <tc_cmac_setup>:
{
   247aa:	b570      	push	{r4, r5, r6, lr}
   247ac:	460d      	mov	r5, r1
   247ae:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   247b0:	4604      	mov	r4, r0
   247b2:	b310      	cbz	r0, 247fa <tc_cmac_setup+0x50>
   247b4:	b311      	cbz	r1, 247fc <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   247b6:	2258      	movs	r2, #88	; 0x58
   247b8:	2100      	movs	r1, #0
   247ba:	f7ff f808 	bl	237ce <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   247be:	4629      	mov	r1, r5
	s->sched = sched;
   247c0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   247c2:	4630      	mov	r0, r6
   247c4:	f7f0 fc8c 	bl	150e0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   247c8:	2210      	movs	r2, #16
   247ca:	2100      	movs	r1, #0
   247cc:	4620      	mov	r0, r4
   247ce:	f7fe fffe 	bl	237ce <_set>
	gf_double (s->K1, s->iv);
   247d2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   247d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   247d8:	4621      	mov	r1, r4
   247da:	4620      	mov	r0, r4
   247dc:	f7f0 fcd2 	bl	15184 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   247e0:	4621      	mov	r1, r4
   247e2:	4628      	mov	r0, r5
   247e4:	f7ff ffae 	bl	24744 <gf_double>
	gf_double (s->K2, s->K1);
   247e8:	4629      	mov	r1, r5
   247ea:	f104 0020 	add.w	r0, r4, #32
   247ee:	f7ff ffa9 	bl	24744 <gf_double>
	tc_cmac_init(s);
   247f2:	4620      	mov	r0, r4
   247f4:	f7ff ffc3 	bl	2477e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   247f8:	2001      	movs	r0, #1
}
   247fa:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   247fc:	4608      	mov	r0, r1
   247fe:	e7fc      	b.n	247fa <tc_cmac_setup+0x50>

00024800 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   24800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24804:	460d      	mov	r5, r1
   24806:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24808:	4604      	mov	r4, r0
   2480a:	2800      	cmp	r0, #0
   2480c:	d062      	beq.n	248d4 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2480e:	b912      	cbnz	r2, 24816 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   24810:	2001      	movs	r0, #1
}
   24812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   24816:	2900      	cmp	r1, #0
   24818:	d05c      	beq.n	248d4 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2481a:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2481e:	ea50 0301 	orrs.w	r3, r0, r1
   24822:	d057      	beq.n	248d4 <tc_cmac_update+0xd4>
	s->countdown--;
   24824:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   24828:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2482c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   24830:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   24834:	f1b8 0f00 	cmp.w	r8, #0
   24838:	d02a      	beq.n	24890 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2483a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2483e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   24842:	42be      	cmp	r6, r7
   24844:	4420      	add	r0, r4
   24846:	d208      	bcs.n	2485a <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24848:	462a      	mov	r2, r5
   2484a:	4633      	mov	r3, r6
   2484c:	4631      	mov	r1, r6
   2484e:	f7fe ffb1 	bl	237b4 <_copy>
			s->leftover_offset += data_length;
   24852:	6c62      	ldr	r2, [r4, #68]	; 0x44
   24854:	4432      	add	r2, r6
   24856:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   24858:	e7da      	b.n	24810 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2485a:	463b      	mov	r3, r7
   2485c:	462a      	mov	r2, r5
   2485e:	4639      	mov	r1, r7
   24860:	f7fe ffa8 	bl	237b4 <_copy>
		data_length -= remaining_space;
   24864:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   24866:	2300      	movs	r3, #0
   24868:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2486a:	4446      	add	r6, r8
		data += remaining_space;
   2486c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2486e:	1e63      	subs	r3, r4, #1
   24870:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   24874:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24878:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2487c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2487e:	ea82 0200 	eor.w	r2, r2, r0
   24882:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24884:	d1f6      	bne.n	24874 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24886:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24888:	4621      	mov	r1, r4
   2488a:	4620      	mov	r0, r4
   2488c:	f7f0 fc7a 	bl	15184 <tc_aes_encrypt>
   24890:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   24894:	2e10      	cmp	r6, #16
   24896:	d80a      	bhi.n	248ae <tc_cmac_update+0xae>
	if (data_length > 0) {
   24898:	2e00      	cmp	r6, #0
   2489a:	d0b9      	beq.n	24810 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2489c:	4633      	mov	r3, r6
   2489e:	462a      	mov	r2, r5
   248a0:	4631      	mov	r1, r6
   248a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   248a6:	f7fe ff85 	bl	237b4 <_copy>
		s->leftover_offset = data_length;
   248aa:	6466      	str	r6, [r4, #68]	; 0x44
   248ac:	e7b0      	b.n	24810 <tc_cmac_update+0x10>
   248ae:	1e63      	subs	r3, r4, #1
   248b0:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   248b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   248b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248ba:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   248bc:	ea82 0200 	eor.w	r2, r2, r0
   248c0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248c2:	d1f6      	bne.n	248b2 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   248c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   248c6:	4621      	mov	r1, r4
   248c8:	4620      	mov	r0, r4
   248ca:	f7f0 fc5b 	bl	15184 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   248ce:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   248d0:	3e10      	subs	r6, #16
   248d2:	e7df      	b.n	24894 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   248d4:	2000      	movs	r0, #0
   248d6:	e79c      	b.n	24812 <tc_cmac_update+0x12>

000248d8 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   248d8:	b570      	push	{r4, r5, r6, lr}
   248da:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   248dc:	4605      	mov	r5, r0
   248de:	b1e8      	cbz	r0, 2491c <tc_cmac_final+0x44>
   248e0:	b369      	cbz	r1, 2493e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   248e2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   248e4:	2a10      	cmp	r2, #16
   248e6:	d11a      	bne.n	2491e <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   248e8:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248ea:	1e63      	subs	r3, r4, #1
   248ec:	3901      	subs	r1, #1
   248ee:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   248f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   248f6:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   248fa:	4072      	eors	r2, r6
   248fc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24900:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24902:	ea82 0206 	eor.w	r2, r2, r6
   24906:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24908:	d1f3      	bne.n	248f2 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2490a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2490c:	4621      	mov	r1, r4
   2490e:	4628      	mov	r0, r5
   24910:	f7f0 fc38 	bl	15184 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24914:	4620      	mov	r0, r4
   24916:	f7ff ff2a 	bl	2476e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2491a:	2001      	movs	r0, #1
}
   2491c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2491e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   24922:	2100      	movs	r1, #0
   24924:	f1c2 0210 	rsb	r2, r2, #16
   24928:	4420      	add	r0, r4
   2492a:	f7fe ff50 	bl	237ce <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2492e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24930:	4423      	add	r3, r4
   24932:	2280      	movs	r2, #128	; 0x80
   24934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24938:	f104 0120 	add.w	r1, r4, #32
   2493c:	e7d5      	b.n	248ea <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2493e:	4608      	mov	r0, r1
   24940:	e7ec      	b.n	2491c <tc_cmac_final+0x44>

00024942 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24942:	2100      	movs	r1, #0
   24944:	2001      	movs	r0, #1
   24946:	f7f0 bd3d 	b.w	153c4 <z_arm_fatal_error>

0002494a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2494a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2494c:	6800      	ldr	r0, [r0, #0]
   2494e:	f7f0 bd39 	b.w	153c4 <z_arm_fatal_error>

00024952 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   24952:	b508      	push	{r3, lr}
	handler();
   24954:	f7f0 fde0 	bl	15518 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2495c:	f7f0 be22 	b.w	155a4 <z_arm_exc_exit>

00024960 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   24960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24964:	4684      	mov	ip, r0
   24966:	4688      	mov	r8, r1
	register const char *s = nptr;
   24968:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2496a:	460c      	mov	r4, r1
   2496c:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   24970:	2b20      	cmp	r3, #32
   24972:	d033      	beq.n	249dc <strtol+0x7c>
   24974:	f1a3 0009 	sub.w	r0, r3, #9
   24978:	2804      	cmp	r0, #4
   2497a:	d92f      	bls.n	249dc <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   2497c:	2b2d      	cmp	r3, #45	; 0x2d
   2497e:	d12f      	bne.n	249e0 <strtol+0x80>
		neg = 1;
		c = *s++;
   24980:	784b      	ldrb	r3, [r1, #1]
   24982:	1c8c      	adds	r4, r1, #2
		neg = 1;
   24984:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   24986:	2a00      	cmp	r2, #0
   24988:	d05c      	beq.n	24a44 <strtol+0xe4>
   2498a:	2a10      	cmp	r2, #16
   2498c:	d109      	bne.n	249a2 <strtol+0x42>
   2498e:	2b30      	cmp	r3, #48	; 0x30
   24990:	d107      	bne.n	249a2 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   24992:	7823      	ldrb	r3, [r4, #0]
   24994:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24998:	2b58      	cmp	r3, #88	; 0x58
   2499a:	d14e      	bne.n	24a3a <strtol+0xda>
		c = s[1];
   2499c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   2499e:	2210      	movs	r2, #16
		s += 2;
   249a0:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   249a2:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   249a6:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   249a8:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   249aa:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   249ae:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   249b0:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   249b4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   249b8:	2d09      	cmp	r5, #9
   249ba:	d817      	bhi.n	249ec <strtol+0x8c>
			c -= '0';
   249bc:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   249be:	429a      	cmp	r2, r3
   249c0:	dd24      	ble.n	24a0c <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   249c2:	1c75      	adds	r5, r6, #1
   249c4:	d007      	beq.n	249d6 <strtol+0x76>
   249c6:	4570      	cmp	r0, lr
   249c8:	d81d      	bhi.n	24a06 <strtol+0xa6>
   249ca:	d101      	bne.n	249d0 <strtol+0x70>
   249cc:	454b      	cmp	r3, r9
   249ce:	dc1a      	bgt.n	24a06 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   249d0:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   249d4:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   249d6:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   249da:	e7eb      	b.n	249b4 <strtol+0x54>
{
   249dc:	4621      	mov	r1, r4
   249de:	e7c4      	b.n	2496a <strtol+0xa>
	} else if (c == '+') {
   249e0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   249e2:	bf04      	itt	eq
   249e4:	784b      	ldrbeq	r3, [r1, #1]
   249e6:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   249e8:	2100      	movs	r1, #0
   249ea:	e7cc      	b.n	24986 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   249ec:	f043 0520 	orr.w	r5, r3, #32
   249f0:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   249f2:	2d19      	cmp	r5, #25
   249f4:	d80a      	bhi.n	24a0c <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   249f6:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   249fa:	2d1a      	cmp	r5, #26
   249fc:	bf34      	ite	cc
   249fe:	2537      	movcc	r5, #55	; 0x37
   24a00:	2557      	movcs	r5, #87	; 0x57
   24a02:	1b5b      	subs	r3, r3, r5
   24a04:	e7db      	b.n	249be <strtol+0x5e>
			any = -1;
   24a06:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24a0a:	e7e4      	b.n	249d6 <strtol+0x76>
		}
	}

	if (any < 0) {
   24a0c:	1c73      	adds	r3, r6, #1
   24a0e:	d109      	bne.n	24a24 <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24a10:	f7fb f9e4 	bl	1fddc <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   24a14:	2326      	movs	r3, #38	; 0x26
   24a16:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   24a18:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   24a1a:	f1b8 0f00 	cmp.w	r8, #0
   24a1e:	d107      	bne.n	24a30 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   24a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   24a24:	b101      	cbz	r1, 24a28 <strtol+0xc8>
		acc = -acc;
   24a26:	4240      	negs	r0, r0
	if (endptr != NULL) {
   24a28:	f1b8 0f00 	cmp.w	r8, #0
   24a2c:	d0f8      	beq.n	24a20 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   24a2e:	b10e      	cbz	r6, 24a34 <strtol+0xd4>
   24a30:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   24a34:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   24a38:	e7f2      	b.n	24a20 <strtol+0xc0>
	if (base == 0) {
   24a3a:	2330      	movs	r3, #48	; 0x30
   24a3c:	2a00      	cmp	r2, #0
   24a3e:	d1b0      	bne.n	249a2 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   24a40:	2208      	movs	r2, #8
   24a42:	e7ae      	b.n	249a2 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   24a44:	2b30      	cmp	r3, #48	; 0x30
   24a46:	d0a4      	beq.n	24992 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   24a48:	220a      	movs	r2, #10
   24a4a:	e7aa      	b.n	249a2 <strtol+0x42>

00024a4c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24a4c:	3901      	subs	r1, #1
   24a4e:	4603      	mov	r3, r0
   24a50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24a54:	b90a      	cbnz	r2, 24a5a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   24a56:	701a      	strb	r2, [r3, #0]

	return dest;
}
   24a58:	4770      	bx	lr
		*d = *s;
   24a5a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   24a5e:	e7f7      	b.n	24a50 <strcpy+0x4>

00024a60 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24a60:	4603      	mov	r3, r0
	size_t n = 0;
   24a62:	2000      	movs	r0, #0

	while (*s != '\0') {
   24a64:	5c1a      	ldrb	r2, [r3, r0]
   24a66:	b902      	cbnz	r2, 24a6a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   24a68:	4770      	bx	lr
		n++;
   24a6a:	3001      	adds	r0, #1
   24a6c:	e7fa      	b.n	24a64 <strlen+0x4>

00024a6e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   24a6e:	1e43      	subs	r3, r0, #1
   24a70:	3901      	subs	r1, #1
   24a72:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24a76:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   24a7a:	4282      	cmp	r2, r0
   24a7c:	d101      	bne.n	24a82 <strcmp+0x14>
   24a7e:	2a00      	cmp	r2, #0
   24a80:	d1f7      	bne.n	24a72 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   24a82:	1a10      	subs	r0, r2, r0
   24a84:	4770      	bx	lr

00024a86 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   24a86:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   24a88:	2400      	movs	r4, #0
   24a8a:	42a2      	cmp	r2, r4
   24a8c:	d008      	beq.n	24aa0 <strncmp+0x1a>
   24a8e:	5d03      	ldrb	r3, [r0, r4]
   24a90:	5d0d      	ldrb	r5, [r1, r4]
   24a92:	42ab      	cmp	r3, r5
   24a94:	d102      	bne.n	24a9c <strncmp+0x16>
   24a96:	3401      	adds	r4, #1
   24a98:	2b00      	cmp	r3, #0
   24a9a:	d1f6      	bne.n	24a8a <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   24a9c:	1b58      	subs	r0, r3, r5
   24a9e:	e000      	b.n	24aa2 <strncmp+0x1c>
   24aa0:	2000      	movs	r0, #0
}
   24aa2:	bd30      	pop	{r4, r5, pc}

00024aa4 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24aa4:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24aa6:	b15a      	cbz	r2, 24ac0 <memcmp+0x1c>
   24aa8:	3901      	subs	r1, #1
   24aaa:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24aac:	f810 2b01 	ldrb.w	r2, [r0], #1
   24ab0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24ab4:	42a0      	cmp	r0, r4
   24ab6:	d001      	beq.n	24abc <memcmp+0x18>
   24ab8:	429a      	cmp	r2, r3
   24aba:	d0f7      	beq.n	24aac <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24abc:	1ad0      	subs	r0, r2, r3
}
   24abe:	bd10      	pop	{r4, pc}
		return 0;
   24ac0:	4610      	mov	r0, r2
   24ac2:	e7fc      	b.n	24abe <memcmp+0x1a>

00024ac4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   24ac4:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   24ac6:	ea81 0400 	eor.w	r4, r1, r0
   24aca:	07a5      	lsls	r5, r4, #30
   24acc:	4603      	mov	r3, r0
   24ace:	d00b      	beq.n	24ae8 <memcpy+0x24>
   24ad0:	3b01      	subs	r3, #1
   24ad2:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   24ad4:	4291      	cmp	r1, r2
   24ad6:	d11b      	bne.n	24b10 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   24ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   24ada:	2a00      	cmp	r2, #0
   24adc:	d0fc      	beq.n	24ad8 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   24ade:	f811 4b01 	ldrb.w	r4, [r1], #1
   24ae2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   24ae6:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   24ae8:	079c      	lsls	r4, r3, #30
   24aea:	d1f6      	bne.n	24ada <memcpy+0x16>
   24aec:	f022 0403 	bic.w	r4, r2, #3
   24af0:	1f1d      	subs	r5, r3, #4
   24af2:	0896      	lsrs	r6, r2, #2
   24af4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   24af6:	42b9      	cmp	r1, r7
   24af8:	d105      	bne.n	24b06 <memcpy+0x42>
   24afa:	f06f 0503 	mvn.w	r5, #3
   24afe:	fb05 2206 	mla	r2, r5, r6, r2
   24b02:	4423      	add	r3, r4
   24b04:	e7e4      	b.n	24ad0 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   24b06:	f851 cb04 	ldr.w	ip, [r1], #4
   24b0a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   24b0e:	e7f2      	b.n	24af6 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   24b10:	f811 4b01 	ldrb.w	r4, [r1], #1
   24b14:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24b18:	e7dc      	b.n	24ad4 <memcpy+0x10>

00024b1a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   24b1a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   24b1c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   24b1e:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   24b20:	079c      	lsls	r4, r3, #30
   24b22:	d111      	bne.n	24b48 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   24b24:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   24b28:	f022 0603 	bic.w	r6, r2, #3
   24b2c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   24b30:	441e      	add	r6, r3
   24b32:	0894      	lsrs	r4, r2, #2
   24b34:	42b3      	cmp	r3, r6
   24b36:	d10d      	bne.n	24b54 <memset+0x3a>
   24b38:	f06f 0503 	mvn.w	r5, #3
   24b3c:	fb05 2204 	mla	r2, r5, r4, r2
   24b40:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   24b42:	4293      	cmp	r3, r2
   24b44:	d109      	bne.n	24b5a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24b46:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   24b48:	2a00      	cmp	r2, #0
   24b4a:	d0fc      	beq.n	24b46 <memset+0x2c>
		*(d_byte++) = c_byte;
   24b4c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24b50:	3a01      	subs	r2, #1
   24b52:	e7e5      	b.n	24b20 <memset+0x6>
		*(d_word++) = c_word;
   24b54:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   24b58:	e7ec      	b.n	24b34 <memset+0x1a>
		*(d_byte++) = c_byte;
   24b5a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24b5e:	e7f0      	b.n	24b42 <memset+0x28>

00024b60 <_stdout_hook_default>:
}
   24b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24b64:	4770      	bx	lr

00024b66 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   24b66:	f7fa bd5b 	b.w	1f620 <SystemInit>

00024b6a <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24b6a:	b530      	push	{r4, r5, lr}
   24b6c:	b085      	sub	sp, #20
   24b6e:	4604      	mov	r4, r0
   24b70:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   24b72:	4668      	mov	r0, sp
   24b74:	2203      	movs	r2, #3
   24b76:	f7ff ffa5 	bl	24ac4 <memcpy>
	(void)memset(res + 3, 0, 13);
   24b7a:	220d      	movs	r2, #13
   24b7c:	2100      	movs	r1, #0
   24b7e:	f10d 0003 	add.w	r0, sp, #3
   24b82:	f7ff ffca 	bl	24b1a <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24b86:	4620      	mov	r0, r4
   24b88:	466a      	mov	r2, sp
   24b8a:	4669      	mov	r1, sp
   24b8c:	f001 feed 	bl	2696a <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   24b90:	4604      	mov	r4, r0
   24b92:	b920      	cbnz	r0, 24b9e <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   24b94:	2203      	movs	r2, #3
   24b96:	4669      	mov	r1, sp
   24b98:	4628      	mov	r0, r5
   24b9a:	f7ff ff93 	bl	24ac4 <memcpy>

	return 0;
}
   24b9e:	4620      	mov	r0, r4
   24ba0:	b005      	add	sp, #20
   24ba2:	bd30      	pop	{r4, r5, pc}

00024ba4 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   24ba4:	b513      	push	{r0, r1, r4, lr}
   24ba6:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   24ba8:	aa01      	add	r2, sp, #4
   24baa:	3103      	adds	r1, #3
   24bac:	f7ff ffdd 	bl	24b6a <ah>
	if (err) {
   24bb0:	b948      	cbnz	r0, 24bc6 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   24bb2:	2203      	movs	r2, #3
   24bb4:	a901      	add	r1, sp, #4
   24bb6:	4620      	mov	r0, r4
   24bb8:	f7ff ff74 	bl	24aa4 <memcmp>
   24bbc:	fab0 f080 	clz	r0, r0
   24bc0:	0940      	lsrs	r0, r0, #5
}
   24bc2:	b002      	add	sp, #8
   24bc4:	bd10      	pop	{r4, pc}
		return false;
   24bc6:	2000      	movs	r0, #0
   24bc8:	e7fb      	b.n	24bc2 <bt_rpa_irk_matches+0x1e>

00024bca <send_cmd_status>:
{
   24bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   24bd2:	4606      	mov	r6, r0
   24bd4:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24bda:	2100      	movs	r1, #0
   24bdc:	200f      	movs	r0, #15
   24bde:	f7f3 fadd 	bl	1819c <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   24be2:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   24be4:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24be8:	4604      	mov	r4, r0
   24bea:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   24bec:	2102      	movs	r1, #2
   24bee:	4640      	mov	r0, r8
   24bf0:	f7f8 fc4c 	bl	1d48c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24bf4:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   24bf6:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24bf8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   24bfa:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   24bfc:	4640      	mov	r0, r8
   24bfe:	f7f8 fc45 	bl	1d48c <net_buf_simple_add>
	evt->ncmd = 1U;
   24c02:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   24c04:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   24c06:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   24c08:	4620      	mov	r0, r4
}
   24c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   24c0e:	f7f2 be39 	b.w	17884 <bt_recv>

00024c12 <default_CSPRNG>:
{
   24c12:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   24c14:	f7fa fbd4 	bl	1f3c0 <bt_rand>
}
   24c18:	fab0 f080 	clz	r0, r0
   24c1c:	0940      	lsrs	r0, r0, #5
   24c1e:	bd08      	pop	{r3, pc}

00024c20 <bt_settings_decode_key>:
{
   24c20:	b570      	push	{r4, r5, r6, lr}
   24c22:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   24c24:	2100      	movs	r1, #0
{
   24c26:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   24c28:	f7fe fc9b 	bl	23562 <settings_name_next>
   24c2c:	280d      	cmp	r0, #13
   24c2e:	d118      	bne.n	24c62 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   24c30:	7b23      	ldrb	r3, [r4, #12]
   24c32:	2b30      	cmp	r3, #48	; 0x30
   24c34:	d111      	bne.n	24c5a <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   24c36:	2300      	movs	r3, #0
   24c38:	702b      	strb	r3, [r5, #0]
   24c3a:	f104 060c 	add.w	r6, r4, #12
   24c3e:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24c40:	462a      	mov	r2, r5
   24c42:	4620      	mov	r0, r4
   24c44:	2301      	movs	r3, #1
   24c46:	2102      	movs	r1, #2
   24c48:	3402      	adds	r4, #2
   24c4a:	f7fe f80c 	bl	22c66 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   24c4e:	42b4      	cmp	r4, r6
   24c50:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   24c54:	d1f4      	bne.n	24c40 <bt_settings_decode_key+0x20>
	return 0;
   24c56:	2000      	movs	r0, #0
}
   24c58:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   24c5a:	2b31      	cmp	r3, #49	; 0x31
   24c5c:	d101      	bne.n	24c62 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   24c5e:	2301      	movs	r3, #1
   24c60:	e7ea      	b.n	24c38 <bt_settings_decode_key+0x18>
		return -EINVAL;
   24c62:	f06f 0015 	mvn.w	r0, #21
   24c66:	e7f7      	b.n	24c58 <bt_settings_decode_key+0x38>

00024c68 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24c68:	b510      	push	{r4, lr}
   24c6a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24c6c:	7801      	ldrb	r1, [r0, #0]
   24c6e:	7822      	ldrb	r2, [r4, #0]
   24c70:	428a      	cmp	r2, r1
{
   24c72:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24c74:	d00e      	beq.n	24c94 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   24c76:	4669      	mov	r1, sp
   24c78:	f7f1 fb28 	bl	162cc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24c7c:	a905      	add	r1, sp, #20
   24c7e:	4620      	mov	r0, r4
   24c80:	f7f1 fb24 	bl	162cc <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24c84:	2210      	movs	r2, #16
   24c86:	f10d 0115 	add.w	r1, sp, #21
   24c8a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24c8e:	f7ff ff09 	bl	24aa4 <memcmp>
   24c92:	e007      	b.n	24ca4 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   24c94:	2a01      	cmp	r2, #1
   24c96:	d007      	beq.n	24ca8 <bt_uuid_cmp+0x40>
   24c98:	2a02      	cmp	r2, #2
   24c9a:	d008      	beq.n	24cae <bt_uuid_cmp+0x46>
   24c9c:	b95a      	cbnz	r2, 24cb6 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24c9e:	8840      	ldrh	r0, [r0, #2]
   24ca0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24ca2:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   24ca4:	b00a      	add	sp, #40	; 0x28
   24ca6:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24ca8:	6840      	ldr	r0, [r0, #4]
   24caa:	6863      	ldr	r3, [r4, #4]
   24cac:	e7f9      	b.n	24ca2 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24cae:	2210      	movs	r2, #16
   24cb0:	1c61      	adds	r1, r4, #1
   24cb2:	3001      	adds	r0, #1
   24cb4:	e7eb      	b.n	24c8e <bt_uuid_cmp+0x26>
	switch (u1->type) {
   24cb6:	f06f 0015 	mvn.w	r0, #21
   24cba:	e7f3      	b.n	24ca4 <bt_uuid_cmp+0x3c>

00024cbc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24cbc:	2a04      	cmp	r2, #4
{
   24cbe:	b538      	push	{r3, r4, r5, lr}
   24cc0:	460c      	mov	r4, r1
	switch (data_len) {
   24cc2:	d00d      	beq.n	24ce0 <bt_uuid_create+0x24>
   24cc4:	2a10      	cmp	r2, #16
   24cc6:	d019      	beq.n	24cfc <bt_uuid_create+0x40>
   24cc8:	2a02      	cmp	r2, #2
   24cca:	f04f 0300 	mov.w	r3, #0
   24cce:	d11b      	bne.n	24d08 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   24cd0:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   24cd2:	784a      	ldrb	r2, [r1, #1]
   24cd4:	780b      	ldrb	r3, [r1, #0]
   24cd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24cda:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24cdc:	2001      	movs	r0, #1
}
   24cde:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   24ce0:	2301      	movs	r3, #1
   24ce2:	7003      	strb	r3, [r0, #0]
   24ce4:	78a2      	ldrb	r2, [r4, #2]
   24ce6:	78c9      	ldrb	r1, [r1, #3]
   24ce8:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24cea:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   24cee:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24cf0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   24cf4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24cf8:	6042      	str	r2, [r0, #4]
		break;
   24cfa:	e7ef      	b.n	24cdc <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   24cfc:	2302      	movs	r3, #2
   24cfe:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   24d02:	f7ff fedf 	bl	24ac4 <memcpy>
		break;
   24d06:	e7e9      	b.n	24cdc <bt_uuid_create+0x20>
	switch (data_len) {
   24d08:	4618      	mov	r0, r3
   24d0a:	e7e8      	b.n	24cde <bt_uuid_create+0x22>

00024d0c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24d0c:	280f      	cmp	r0, #15
   24d0e:	d806      	bhi.n	24d1e <bt_hci_evt_get_flags+0x12>
   24d10:	280d      	cmp	r0, #13
   24d12:	d80b      	bhi.n	24d2c <bt_hci_evt_get_flags+0x20>
   24d14:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   24d16:	bf14      	ite	ne
   24d18:	2002      	movne	r0, #2
   24d1a:	2003      	moveq	r0, #3
   24d1c:	4770      	bx	lr
	switch (evt) {
   24d1e:	2813      	cmp	r0, #19
   24d20:	d004      	beq.n	24d2c <bt_hci_evt_get_flags+0x20>
   24d22:	281a      	cmp	r0, #26
   24d24:	bf14      	ite	ne
   24d26:	2002      	movne	r0, #2
   24d28:	2001      	moveq	r0, #1
   24d2a:	4770      	bx	lr
   24d2c:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   24d2e:	4770      	bx	lr

00024d30 <get_adv_channel_map>:
{
   24d30:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24d32:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24d36:	bf0c      	ite	eq
   24d38:	2007      	moveq	r0, #7
   24d3a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24d3c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24d3e:	bf48      	it	mi
   24d40:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24d44:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24d46:	bf48      	it	mi
   24d48:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24d4c:	4770      	bx	lr

00024d4e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24d4e:	f3bf 8f5b 	dmb	ish
   24d52:	6800      	ldr	r0, [r0, #0]
   24d54:	f3bf 8f5b 	dmb	ish
}
   24d58:	4770      	bx	lr

00024d5a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24d5a:	2207      	movs	r2, #7
   24d5c:	f7ff beb2 	b.w	24ac4 <memcpy>

00024d60 <atomic_or>:
{
   24d60:	4603      	mov	r3, r0
}
   24d62:	f3bf 8f5b 	dmb	ish
   24d66:	e853 0f00 	ldrex	r0, [r3]
   24d6a:	ea40 0201 	orr.w	r2, r0, r1
   24d6e:	e843 2c00 	strex	ip, r2, [r3]
   24d72:	f1bc 0f00 	cmp.w	ip, #0
   24d76:	d1f6      	bne.n	24d66 <atomic_or+0x6>
   24d78:	f3bf 8f5b 	dmb	ish
   24d7c:	4770      	bx	lr

00024d7e <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   24d7e:	2207      	movs	r2, #7
   24d80:	f7ff be90 	b.w	24aa4 <memcmp>

00024d84 <atomic_and>:
{
   24d84:	4603      	mov	r3, r0
}
   24d86:	f3bf 8f5b 	dmb	ish
   24d8a:	e853 0f00 	ldrex	r0, [r3]
   24d8e:	ea00 0201 	and.w	r2, r0, r1
   24d92:	e843 2c00 	strex	ip, r2, [r3]
   24d96:	f1bc 0f00 	cmp.w	ip, #0
   24d9a:	d1f6      	bne.n	24d8a <atomic_and+0x6>
   24d9c:	f3bf 8f5b 	dmb	ish
   24da0:	4770      	bx	lr

00024da2 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   24da2:	460b      	mov	r3, r1
   24da4:	b410      	push	{r4}
   24da6:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   24da8:	f001 041f 	and.w	r4, r1, #31
   24dac:	2101      	movs	r1, #1
   24dae:	40a1      	lsls	r1, r4

	if (val) {
   24db0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   24db4:	b112      	cbz	r2, 24dbc <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   24db6:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24db8:	f7ff bfd2 	b.w	24d60 <atomic_or>
}
   24dbc:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24dbe:	43c9      	mvns	r1, r1
   24dc0:	f7ff bfe0 	b.w	24d84 <atomic_and>

00024dc4 <sys_put_le64>:
	dst[1] = val >> 8;
   24dc4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24dc8:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   24dca:	0e00      	lsrs	r0, r0, #24
   24dcc:	7053      	strb	r3, [r2, #1]
   24dce:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   24dd0:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   24dd2:	f3c1 2007 	ubfx	r0, r1, #8, #8
   24dd6:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   24dd8:	7093      	strb	r3, [r2, #2]
   24dda:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   24ddc:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   24dde:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   24de0:	71d1      	strb	r1, [r2, #7]
}
   24de2:	4770      	bx	lr

00024de4 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   24de4:	f100 0314 	add.w	r3, r0, #20
{
   24de8:	b510      	push	{r4, lr}
   24dea:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   24dec:	4618      	mov	r0, r3
   24dee:	f7ff ffae 	bl	24d4e <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   24df2:	0642      	lsls	r2, r0, #25
   24df4:	d50a      	bpl.n	24e0c <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   24dfa:	4618      	mov	r0, r3
   24dfc:	f7ff ffb0 	bl	24d60 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   24e00:	4620      	mov	r0, r4
   24e02:	2100      	movs	r1, #0
}
   24e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   24e08:	f7f2 b93c 	b.w	17084 <set_le_adv_enable_legacy>
}
   24e0c:	bd10      	pop	{r4, pc}

00024e0e <adv_unpause_enabled>:
{
   24e0e:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24e10:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   24e14:	4604      	mov	r4, r0
   24e16:	3014      	adds	r0, #20
   24e18:	f7ff ffb4 	bl	24d84 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   24e1c:	0483      	lsls	r3, r0, #18
   24e1e:	d505      	bpl.n	24e2c <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   24e20:	4620      	mov	r0, r4
   24e22:	2101      	movs	r1, #1
}
   24e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   24e28:	f7f2 b92c 	b.w	17084 <set_le_adv_enable_legacy>
}
   24e2c:	bd10      	pop	{r4, pc}

00024e2e <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   24e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e30:	4607      	mov	r7, r0
   24e32:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   24e34:	f242 0027 	movw	r0, #8231	; 0x2027
   24e38:	2127      	movs	r1, #39	; 0x27
   24e3a:	f7f1 ff63 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   24e3e:	4604      	mov	r4, r0
   24e40:	b1d0      	cbz	r0, 24e78 <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   24e42:	2127      	movs	r1, #39	; 0x27
   24e44:	3008      	adds	r0, #8
   24e46:	f7f8 fb21 	bl	1d48c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   24e4a:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   24e4c:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   24e4e:	f7ff ff84 	bl	24d5a <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   24e52:	4631      	mov	r1, r6
   24e54:	2210      	movs	r2, #16
   24e56:	1de8      	adds	r0, r5, #7
   24e58:	f7ff fe34 	bl	24ac4 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   24e5c:	2210      	movs	r2, #16
   24e5e:	2100      	movs	r1, #0
   24e60:	f105 0017 	add.w	r0, r5, #23
   24e64:	f7ff fe59 	bl	24b1a <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   24e68:	4621      	mov	r1, r4
   24e6a:	2200      	movs	r2, #0
}
   24e6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   24e70:	f242 0027 	movw	r0, #8231	; 0x2027
   24e74:	f7f2 b884 	b.w	16f80 <bt_hci_cmd_send_sync>
}
   24e78:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024e7e <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   24e7e:	7a03      	ldrb	r3, [r0, #8]
   24e80:	075b      	lsls	r3, r3, #29
   24e82:	d504      	bpl.n	24e8e <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   24e84:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   24e88:	3001      	adds	r0, #1
   24e8a:	f7ff bfd0 	b.w	24e2e <hci_id_add.isra.0>
}
   24e8e:	4770      	bx	lr

00024e90 <addr_res_enable>:
{
   24e90:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24e92:	2101      	movs	r1, #1
{
   24e94:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24e96:	f242 002d 	movw	r0, #8237	; 0x202d
   24e9a:	f7f1 ff33 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   24e9e:	4604      	mov	r4, r0
   24ea0:	b158      	cbz	r0, 24eba <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   24ea2:	4629      	mov	r1, r5
   24ea4:	3008      	adds	r0, #8
   24ea6:	f001 fbc4 	bl	26632 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24eaa:	4621      	mov	r1, r4
   24eac:	2200      	movs	r2, #0
}
   24eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24eb2:	f242 002d 	movw	r0, #8237	; 0x202d
   24eb6:	f7f2 b863 	b.w	16f80 <bt_hci_cmd_send_sync>
}
   24eba:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24ebe:	bd38      	pop	{r3, r4, r5, pc}

00024ec0 <bt_lookup_id_addr>:
{
   24ec0:	b510      	push	{r4, lr}
   24ec2:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   24ec4:	f7f7 ff40 	bl	1cd48 <bt_keys_find_irk>
		if (keys) {
   24ec8:	b100      	cbz	r0, 24ecc <bt_lookup_id_addr+0xc>
			return &keys->addr;
   24eca:	1c44      	adds	r4, r0, #1
}
   24ecc:	4620      	mov	r0, r4
   24ece:	bd10      	pop	{r4, pc}

00024ed0 <bt_hci_disconnect>:
{
   24ed0:	b570      	push	{r4, r5, r6, lr}
   24ed2:	4606      	mov	r6, r0
   24ed4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24ed6:	f240 4006 	movw	r0, #1030	; 0x406
   24eda:	2103      	movs	r1, #3
   24edc:	f7f1 ff12 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   24ee0:	4604      	mov	r4, r0
   24ee2:	b160      	cbz	r0, 24efe <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   24ee4:	2103      	movs	r1, #3
   24ee6:	3008      	adds	r0, #8
   24ee8:	f7f8 fad0 	bl	1d48c <net_buf_simple_add>
	disconn->reason = reason;
   24eec:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   24eee:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   24ef0:	4621      	mov	r1, r4
   24ef2:	f240 4006 	movw	r0, #1030	; 0x406
}
   24ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   24efa:	f7f1 bf4b 	b.w	16d94 <bt_hci_cmd_send>
}
   24efe:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24f02:	bd70      	pop	{r4, r5, r6, pc}

00024f04 <bt_le_set_data_len>:
{
   24f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f06:	4607      	mov	r7, r0
   24f08:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24f0a:	f242 0022 	movw	r0, #8226	; 0x2022
   24f0e:	2106      	movs	r1, #6
{
   24f10:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24f12:	f7f1 fef7 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   24f16:	4604      	mov	r4, r0
   24f18:	b170      	cbz	r0, 24f38 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   24f1a:	2106      	movs	r1, #6
   24f1c:	3008      	adds	r0, #8
   24f1e:	f7f8 fab5 	bl	1d48c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24f22:	883b      	ldrh	r3, [r7, #0]
   24f24:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24f26:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24f28:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24f2a:	4621      	mov	r1, r4
   24f2c:	f242 0022 	movw	r0, #8226	; 0x2022
}
   24f30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24f34:	f7f1 bf2e 	b.w	16d94 <bt_hci_cmd_send>
}
   24f38:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024f3e <bt_le_set_phy>:
{
   24f3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f42:	4680      	mov	r8, r0
   24f44:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24f46:	f242 0032 	movw	r0, #8242	; 0x2032
   24f4a:	2107      	movs	r1, #7
{
   24f4c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   24f50:	4616      	mov	r6, r2
   24f52:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24f54:	f7f1 fed6 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   24f58:	4604      	mov	r4, r0
   24f5a:	b190      	cbz	r0, 24f82 <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   24f5c:	2107      	movs	r1, #7
   24f5e:	3008      	adds	r0, #8
   24f60:	f7f8 fa94 	bl	1d48c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24f64:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   24f68:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   24f6a:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24f6c:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   24f6e:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   24f70:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24f74:	4621      	mov	r1, r4
   24f76:	f242 0032 	movw	r0, #8242	; 0x2032
}
   24f7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24f7e:	f7f1 bf09 	b.w	16d94 <bt_hci_cmd_send>
}
   24f82:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024f8a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   24f8a:	8802      	ldrh	r2, [r0, #0]
   24f8c:	8843      	ldrh	r3, [r0, #2]
   24f8e:	429a      	cmp	r2, r3
{
   24f90:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   24f92:	d818      	bhi.n	24fc6 <bt_le_conn_params_valid+0x3c>
   24f94:	2a05      	cmp	r2, #5
   24f96:	d916      	bls.n	24fc6 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24f98:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   24f9c:	d813      	bhi.n	24fc6 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   24f9e:	8884      	ldrh	r4, [r0, #4]
   24fa0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   24fa4:	d20f      	bcs.n	24fc6 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24fa6:	88c1      	ldrh	r1, [r0, #6]
   24fa8:	f1a1 020a 	sub.w	r2, r1, #10
   24fac:	b292      	uxth	r2, r2
   24fae:	f640 4076 	movw	r0, #3190	; 0xc76
   24fb2:	4282      	cmp	r2, r0
   24fb4:	d807      	bhi.n	24fc6 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   24fb6:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   24fba:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   24fbe:	bf34      	ite	cc
   24fc0:	2001      	movcc	r0, #1
   24fc2:	2000      	movcs	r0, #0
}
   24fc4:	bd10      	pop	{r4, pc}
		return false;
   24fc6:	2000      	movs	r0, #0
   24fc8:	e7fc      	b.n	24fc4 <bt_le_conn_params_valid+0x3a>

00024fca <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   24fca:	7a03      	ldrb	r3, [r0, #8]
   24fcc:	07d9      	lsls	r1, r3, #31
   24fce:	d504      	bpl.n	24fda <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   24fd0:	f023 0301 	bic.w	r3, r3, #1
   24fd4:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   24fd6:	f7f2 ba9f 	b.w	17518 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   24fda:	0799      	lsls	r1, r3, #30
   24fdc:	d504      	bpl.n	24fe8 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   24fde:	f023 0302 	bic.w	r3, r3, #2
   24fe2:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   24fe4:	f7f2 bb42 	b.w	1766c <bt_id_del>
}
   24fe8:	4770      	bx	lr

00024fea <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   24fea:	2301      	movs	r3, #1
{
   24fec:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   24fee:	2106      	movs	r1, #6
{
   24ff0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24ff2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24ff6:	f7fa f9e3 	bl	1f3c0 <bt_rand>
	if (err) {
   24ffa:	b918      	cbnz	r0, 25004 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   24ffc:	79a3      	ldrb	r3, [r4, #6]
   24ffe:	f063 033f 	orn	r3, r3, #63	; 0x3f
   25002:	71a3      	strb	r3, [r4, #6]
}
   25004:	bd10      	pop	{r4, pc}

00025006 <bt_send>:
		return bt_hci_ecc_send(buf);
   25006:	f7f0 bfc1 	b.w	15f8c <bt_hci_ecc_send>

0002500a <bt_addr_le_is_bonded>:
{
   2500a:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2500c:	f7f7 fed6 	bl	1cdbc <bt_keys_find_addr>
		return keys && keys->keys;
   25010:	b118      	cbz	r0, 2501a <bt_addr_le_is_bonded+0x10>
   25012:	89c0      	ldrh	r0, [r0, #14]
   25014:	3800      	subs	r0, #0
   25016:	bf18      	it	ne
   25018:	2001      	movne	r0, #1
}
   2501a:	bd08      	pop	{r3, pc}

0002501c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   2501c:	6880      	ldr	r0, [r0, #8]
   2501e:	f7f2 bfa1 	b.w	17f64 <enh_conn_complete>

00025022 <le_legacy_conn_complete>:
{
   25022:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   25024:	6881      	ldr	r1, [r0, #8]
{
   25026:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   25028:	780b      	ldrb	r3, [r1, #0]
   2502a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2502e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   25032:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   25036:	78cb      	ldrb	r3, [r1, #3]
   25038:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2503c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   25040:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   25044:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   25048:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2504c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   25050:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   25054:	7c4b      	ldrb	r3, [r1, #17]
   25056:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2505a:	a803      	add	r0, sp, #12
   2505c:	3104      	adds	r1, #4
   2505e:	f7ff fe7c 	bl	24d5a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   25062:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   25064:	4669      	mov	r1, sp
   25066:	2206      	movs	r2, #6
   25068:	f10d 0013 	add.w	r0, sp, #19
   2506c:	9400      	str	r4, [sp, #0]
   2506e:	f8ad 4004 	strh.w	r4, [sp, #4]
   25072:	f7ff fd27 	bl	24ac4 <memcpy>
   25076:	2206      	movs	r2, #6
   25078:	4669      	mov	r1, sp
   2507a:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2507e:	9400      	str	r4, [sp, #0]
   25080:	f8ad 4004 	strh.w	r4, [sp, #4]
   25084:	f7ff fd1e 	bl	24ac4 <memcpy>
	enh_conn_complete(&enh);
   25088:	a802      	add	r0, sp, #8
   2508a:	f7f2 ff6b 	bl	17f64 <enh_conn_complete>
}
   2508e:	b00a      	add	sp, #40	; 0x28
   25090:	bd10      	pop	{r4, pc}

00025092 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25092:	f3bf 8f5b 	dmb	ish
   25096:	6800      	ldr	r0, [r0, #0]
   25098:	f3bf 8f5b 	dmb	ish
}
   2509c:	4770      	bx	lr

0002509e <atomic_inc>:
{
   2509e:	4603      	mov	r3, r0
}
   250a0:	f3bf 8f5b 	dmb	ish
   250a4:	e853 0f00 	ldrex	r0, [r3]
   250a8:	1c42      	adds	r2, r0, #1
   250aa:	e843 2100 	strex	r1, r2, [r3]
   250ae:	2900      	cmp	r1, #0
   250b0:	d1f8      	bne.n	250a4 <atomic_inc+0x6>
   250b2:	f3bf 8f5b 	dmb	ish
   250b6:	4770      	bx	lr

000250b8 <tx_notify>:
{
   250b8:	b570      	push	{r4, r5, r6, lr}
   250ba:	4604      	mov	r4, r0
	__asm__ volatile(
   250bc:	f04f 0240 	mov.w	r2, #64	; 0x40
   250c0:	f3ef 8311 	mrs	r3, BASEPRI
   250c4:	f382 8811 	msr	BASEPRI, r2
   250c8:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   250cc:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   250ce:	b920      	cbnz	r0, 250da <tx_notify+0x22>
	__asm__ volatile(
   250d0:	f383 8811 	msr	BASEPRI, r3
   250d4:	f3bf 8f6f 	isb	sy
}
   250d8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   250da:	6a61      	ldr	r1, [r4, #36]	; 0x24
   250dc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   250de:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   250e0:	4288      	cmp	r0, r1
	list->tail = node;
   250e2:	bf08      	it	eq
   250e4:	6262      	streq	r2, [r4, #36]	; 0x24
   250e6:	f383 8811 	msr	BASEPRI, r3
   250ea:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   250ee:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   250f2:	f7f3 f907 	bl	18304 <tx_free>
		cb(conn, user_data);
   250f6:	4631      	mov	r1, r6
   250f8:	4620      	mov	r0, r4
   250fa:	47a8      	blx	r5
	while (1) {
   250fc:	e7de      	b.n	250bc <tx_notify+0x4>

000250fe <tx_complete_work>:
	tx_notify(conn);
   250fe:	3828      	subs	r0, #40	; 0x28
   25100:	f7ff bfda 	b.w	250b8 <tx_notify>

00025104 <bt_conn_new>:
{
   25104:	b570      	push	{r4, r5, r6, lr}
   25106:	460a      	mov	r2, r1
   25108:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   2510a:	2600      	movs	r6, #0
   2510c:	4296      	cmp	r6, r2
   2510e:	d102      	bne.n	25116 <bt_conn_new+0x12>
		return NULL;
   25110:	2400      	movs	r4, #0
}
   25112:	4620      	mov	r0, r4
   25114:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
   25116:	f104 0558 	add.w	r5, r4, #88	; 0x58
   2511a:	4628      	mov	r0, r5
   2511c:	f7ff ffb9 	bl	25092 <atomic_get>
   25120:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   25124:	4601      	mov	r1, r0
   25126:	b110      	cbz	r0, 2512e <bt_conn_new+0x2a>
	for (i = 0; i < size; i++) {
   25128:	3601      	adds	r6, #1
   2512a:	461c      	mov	r4, r3
   2512c:	e7ee      	b.n	2510c <bt_conn_new+0x8>
	if (!conn) {
   2512e:	2c00      	cmp	r4, #0
   25130:	d0ef      	beq.n	25112 <bt_conn_new+0xe>
	(void)memset(conn, 0, sizeof(*conn));
   25132:	22c0      	movs	r2, #192	; 0xc0
   25134:	4620      	mov	r0, r4
   25136:	f7ff fcf0 	bl	24b1a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2513a:	f3bf 8f5b 	dmb	ish
   2513e:	2301      	movs	r3, #1
   25140:	e855 2f00 	ldrex	r2, [r5]
   25144:	e845 3100 	strex	r1, r3, [r5]
   25148:	2900      	cmp	r1, #0
   2514a:	d1f9      	bne.n	25140 <bt_conn_new+0x3c>
   2514c:	f3bf 8f5b 	dmb	ish
   25150:	e7df      	b.n	25112 <bt_conn_new+0xe>

00025152 <bt_conn_set_security>:
{
   25152:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25154:	7b43      	ldrb	r3, [r0, #13]
   25156:	2b07      	cmp	r3, #7
{
   25158:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2515a:	d128      	bne.n	251ae <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2515c:	7a43      	ldrb	r3, [r0, #9]
   2515e:	428b      	cmp	r3, r1
   25160:	d228      	bcs.n	251b4 <bt_conn_set_security+0x62>
   25162:	7a83      	ldrb	r3, [r0, #10]
   25164:	428b      	cmp	r3, r1
   25166:	d225      	bcs.n	251b4 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25168:	f3bf 8f5b 	dmb	ish
	if (val) {
   2516c:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2516e:	f100 0304 	add.w	r3, r0, #4
   25172:	d513      	bpl.n	2519c <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25174:	e853 2f00 	ldrex	r2, [r3]
   25178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2517c:	e843 2000 	strex	r0, r2, [r3]
   25180:	2800      	cmp	r0, #0
   25182:	d1f7      	bne.n	25174 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25184:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   25188:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2518c:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   2518e:	4620      	mov	r0, r4
   25190:	f7f7 fc2e 	bl	1c9f0 <bt_smp_start_security>
	if (err) {
   25194:	b108      	cbz	r0, 2519a <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   25196:	7a63      	ldrb	r3, [r4, #9]
   25198:	72a3      	strb	r3, [r4, #10]
}
   2519a:	bd10      	pop	{r4, pc}
   2519c:	e853 2f00 	ldrex	r2, [r3]
   251a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   251a4:	e843 2000 	strex	r0, r2, [r3]
   251a8:	2800      	cmp	r0, #0
   251aa:	d0eb      	beq.n	25184 <bt_conn_set_security+0x32>
   251ac:	e7f6      	b.n	2519c <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   251ae:	f06f 0038 	mvn.w	r0, #56	; 0x38
   251b2:	e7f2      	b.n	2519a <bt_conn_set_security+0x48>
		return 0;
   251b4:	2000      	movs	r0, #0
   251b6:	e7f0      	b.n	2519a <bt_conn_set_security+0x48>

000251b8 <bt_conn_get_security>:
}
   251b8:	7a40      	ldrb	r0, [r0, #9]
   251ba:	4770      	bx	lr

000251bc <bt_conn_reset_rx_state>:
{
   251bc:	b510      	push	{r4, lr}
   251be:	4604      	mov	r4, r0
	if (!conn->rx) {
   251c0:	6900      	ldr	r0, [r0, #16]
   251c2:	b118      	cbz	r0, 251cc <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   251c4:	f7f8 f84c 	bl	1d260 <net_buf_unref>
	conn->rx = NULL;
   251c8:	2300      	movs	r3, #0
   251ca:	6123      	str	r3, [r4, #16]
}
   251cc:	bd10      	pop	{r4, pc}

000251ce <conn_lookup_handle>:
{
   251ce:	b538      	push	{r3, r4, r5, lr}
   251d0:	f100 0358 	add.w	r3, r0, #88	; 0x58
	for (i = 0; i < size; i++) {
   251d4:	2400      	movs	r4, #0
   251d6:	428c      	cmp	r4, r1
   251d8:	d101      	bne.n	251de <conn_lookup_handle+0x10>
	return NULL;
   251da:	2500      	movs	r5, #0
   251dc:	e013      	b.n	25206 <conn_lookup_handle+0x38>
		if (!atomic_get(&conns[i].ref)) {
   251de:	4618      	mov	r0, r3
   251e0:	f1a3 0558 	sub.w	r5, r3, #88	; 0x58
   251e4:	f7ff ff55 	bl	25092 <atomic_get>
   251e8:	b178      	cbz	r0, 2520a <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
   251ea:	f813 0c4b 	ldrb.w	r0, [r3, #-75]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   251ee:	2801      	cmp	r0, #1
   251f0:	d002      	beq.n	251f8 <conn_lookup_handle+0x2a>
   251f2:	3807      	subs	r0, #7
   251f4:	2801      	cmp	r0, #1
   251f6:	d808      	bhi.n	2520a <conn_lookup_handle+0x3c>
		if (conns[i].handle == handle) {
   251f8:	f833 0c58 	ldrh.w	r0, [r3, #-88]
   251fc:	4290      	cmp	r0, r2
   251fe:	d104      	bne.n	2520a <conn_lookup_handle+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
   25200:	4618      	mov	r0, r3
   25202:	f7ff ff4c 	bl	2509e <atomic_inc>
}
   25206:	4628      	mov	r0, r5
   25208:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   2520a:	3401      	adds	r4, #1
   2520c:	33c0      	adds	r3, #192	; 0xc0
   2520e:	e7e2      	b.n	251d6 <conn_lookup_handle+0x8>

00025210 <bt_conn_is_peer_addr_le>:
{
   25210:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   25212:	7a03      	ldrb	r3, [r0, #8]
   25214:	428b      	cmp	r3, r1
{
   25216:	4604      	mov	r4, r0
   25218:	4615      	mov	r5, r2
	if (id != conn->id) {
   2521a:	d115      	bne.n	25248 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2521c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   25220:	2207      	movs	r2, #7
   25222:	4628      	mov	r0, r5
   25224:	f7ff fc3e 	bl	24aa4 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   25228:	b180      	cbz	r0, 2524c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   2522a:	78e3      	ldrb	r3, [r4, #3]
   2522c:	2207      	movs	r2, #7
   2522e:	b943      	cbnz	r3, 25242 <bt_conn_is_peer_addr_le+0x32>
   25230:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   25234:	4628      	mov	r0, r5
   25236:	f7ff fc35 	bl	24aa4 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2523a:	fab0 f080 	clz	r0, r0
   2523e:	0940      	lsrs	r0, r0, #5
}
   25240:	bd38      	pop	{r3, r4, r5, pc}
   25242:	f104 0197 	add.w	r1, r4, #151	; 0x97
   25246:	e7f5      	b.n	25234 <bt_conn_is_peer_addr_le+0x24>
		return false;
   25248:	2000      	movs	r0, #0
   2524a:	e7f9      	b.n	25240 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2524c:	2001      	movs	r0, #1
   2524e:	e7f7      	b.n	25240 <bt_conn_is_peer_addr_le+0x30>

00025250 <bt_conn_unref>:
{
   25250:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   25252:	3058      	adds	r0, #88	; 0x58
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25254:	f3bf 8f5b 	dmb	ish
   25258:	e850 3f00 	ldrex	r3, [r0]
   2525c:	3b01      	subs	r3, #1
   2525e:	e840 3200 	strex	r2, r3, [r0]
   25262:	2a00      	cmp	r2, #0
   25264:	d1f8      	bne.n	25258 <bt_conn_unref+0x8>
   25266:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   2526a:	f7ff ff12 	bl	25092 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2526e:	b918      	cbnz	r0, 25278 <bt_conn_unref+0x28>
}
   25270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   25274:	f7f2 be40 	b.w	17ef8 <bt_le_adv_resume>
}
   25278:	bd08      	pop	{r3, pc}

0002527a <bt_conn_get_dst>:
}
   2527a:	3090      	adds	r0, #144	; 0x90
   2527c:	4770      	bx	lr

0002527e <bt_conn_le_conn_update>:
{
   2527e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25280:	4607      	mov	r7, r0
   25282:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   25284:	f242 0013 	movw	r0, #8211	; 0x2013
   25288:	210e      	movs	r1, #14
   2528a:	f7f1 fd3b 	bl	16d04 <bt_hci_cmd_create>
	if (!buf) {
   2528e:	4606      	mov	r6, r0
   25290:	b1d0      	cbz	r0, 252c8 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   25292:	210e      	movs	r1, #14
   25294:	3008      	adds	r0, #8
   25296:	f7f8 f8f9 	bl	1d48c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2529a:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   2529c:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2529e:	2100      	movs	r1, #0
   252a0:	f7ff fc3b 	bl	24b1a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   252a4:	883b      	ldrh	r3, [r7, #0]
   252a6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   252a8:	882b      	ldrh	r3, [r5, #0]
   252aa:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   252ac:	886b      	ldrh	r3, [r5, #2]
   252ae:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   252b0:	88ab      	ldrh	r3, [r5, #4]
   252b2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   252b4:	88eb      	ldrh	r3, [r5, #6]
   252b6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   252b8:	4631      	mov	r1, r6
   252ba:	2200      	movs	r2, #0
}
   252bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   252c0:	f242 0013 	movw	r0, #8211	; 0x2013
   252c4:	f7f1 be5c 	b.w	16f80 <bt_hci_cmd_send_sync>
}
   252c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   252cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000252ce <l2cap_connected>:
}
   252ce:	4770      	bx	lr

000252d0 <l2cap_disconnected>:
   252d0:	4770      	bx	lr

000252d2 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   252d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   252d4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   252d6:	b17b      	cbz	r3, 252f8 <bt_l2cap_chan_remove+0x26>
   252d8:	3b08      	subs	r3, #8
   252da:	2200      	movs	r2, #0
   252dc:	b163      	cbz	r3, 252f8 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   252de:	428b      	cmp	r3, r1
   252e0:	f103 0408 	add.w	r4, r3, #8
   252e4:	d10f      	bne.n	25306 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   252e6:	688b      	ldr	r3, [r1, #8]
   252e8:	b93a      	cbnz	r2, 252fa <bt_l2cap_chan_remove+0x28>
   252ea:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   252ec:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   252ee:	4294      	cmp	r4, r2
   252f0:	d100      	bne.n	252f4 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   252f2:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   252f4:	2300      	movs	r3, #0
   252f6:	608b      	str	r3, [r1, #8]
}
   252f8:	bd10      	pop	{r4, pc}
   252fa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   252fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
   252fe:	429c      	cmp	r4, r3
	list->tail = node;
   25300:	bf08      	it	eq
   25302:	6542      	streq	r2, [r0, #84]	; 0x54
}
   25304:	e7f6      	b.n	252f4 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25306:	2c00      	cmp	r4, #0
   25308:	d0f6      	beq.n	252f8 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2530a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2530c:	2b00      	cmp	r3, #0
   2530e:	d0f3      	beq.n	252f8 <bt_l2cap_chan_remove+0x26>
   25310:	3b08      	subs	r3, #8
   25312:	4622      	mov	r2, r4
   25314:	e7e2      	b.n	252dc <bt_l2cap_chan_remove+0xa>

00025316 <bt_l2cap_chan_del>:
{
   25316:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   25318:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2531c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2531e:	b123      	cbz	r3, 2532a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   25320:	686b      	ldr	r3, [r5, #4]
   25322:	b103      	cbz	r3, 25326 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   25324:	4798      	blx	r3
	chan->conn = NULL;
   25326:	2300      	movs	r3, #0
   25328:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2532a:	68e3      	ldr	r3, [r4, #12]
   2532c:	b10b      	cbz	r3, 25332 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2532e:	4620      	mov	r0, r4
   25330:	4798      	blx	r3
	if (ops->released) {
   25332:	69eb      	ldr	r3, [r5, #28]
   25334:	b11b      	cbz	r3, 2533e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   25336:	4620      	mov	r0, r4
}
   25338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2533c:	4718      	bx	r3
}
   2533e:	bd70      	pop	{r4, r5, r6, pc}

00025340 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25340:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   25342:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25344:	b18b      	cbz	r3, 2536a <bt_l2cap_disconnected+0x2a>
   25346:	f1b3 0008 	subs.w	r0, r3, #8
   2534a:	d00e      	beq.n	2536a <bt_l2cap_disconnected+0x2a>
   2534c:	681c      	ldr	r4, [r3, #0]
   2534e:	b104      	cbz	r4, 25352 <bt_l2cap_disconnected+0x12>
   25350:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   25352:	f7ff ffe0 	bl	25316 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25356:	b144      	cbz	r4, 2536a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25358:	f114 0308 	adds.w	r3, r4, #8
   2535c:	d002      	beq.n	25364 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2535e:	68a3      	ldr	r3, [r4, #8]
   25360:	b103      	cbz	r3, 25364 <bt_l2cap_disconnected+0x24>
   25362:	3b08      	subs	r3, #8
{
   25364:	4620      	mov	r0, r4
   25366:	461c      	mov	r4, r3
   25368:	e7f3      	b.n	25352 <bt_l2cap_disconnected+0x12>
}
   2536a:	bd10      	pop	{r4, pc}

0002536c <bt_l2cap_security_changed>:
{
   2536c:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2536e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   25370:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25372:	b1a3      	cbz	r3, 2539e <bt_l2cap_security_changed+0x32>
   25374:	f1b3 0008 	subs.w	r0, r3, #8
   25378:	d011      	beq.n	2539e <bt_l2cap_security_changed+0x32>
   2537a:	681c      	ldr	r4, [r3, #0]
   2537c:	b104      	cbz	r4, 25380 <bt_l2cap_security_changed+0x14>
   2537e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   25380:	6843      	ldr	r3, [r0, #4]
   25382:	689b      	ldr	r3, [r3, #8]
   25384:	b10b      	cbz	r3, 2538a <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   25386:	4629      	mov	r1, r5
   25388:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2538a:	b144      	cbz	r4, 2539e <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2538c:	f114 0308 	adds.w	r3, r4, #8
   25390:	d002      	beq.n	25398 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25392:	68a3      	ldr	r3, [r4, #8]
   25394:	b103      	cbz	r3, 25398 <bt_l2cap_security_changed+0x2c>
   25396:	3b08      	subs	r3, #8
{
   25398:	4620      	mov	r0, r4
   2539a:	461c      	mov	r4, r3
   2539c:	e7f0      	b.n	25380 <bt_l2cap_security_changed+0x14>
}
   2539e:	bd38      	pop	{r3, r4, r5, pc}

000253a0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   253a0:	3104      	adds	r1, #4
   253a2:	f7f3 bc55 	b.w	18c50 <bt_conn_create_pdu_timeout>

000253a6 <bt_l2cap_send_cb>:
{
   253a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253aa:	4614      	mov	r4, r2
   253ac:	4605      	mov	r5, r0
   253ae:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   253b0:	f102 0008 	add.w	r0, r2, #8
   253b4:	2104      	movs	r1, #4
{
   253b6:	461e      	mov	r6, r3
   253b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   253bc:	f7f8 f80e 	bl	1d3dc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   253c0:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   253c2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   253c4:	3a04      	subs	r2, #4
   253c6:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   253c8:	4643      	mov	r3, r8
   253ca:	4632      	mov	r2, r6
   253cc:	4621      	mov	r1, r4
   253ce:	4628      	mov	r0, r5
}
   253d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   253d4:	f7f3 b990 	b.w	186f8 <bt_conn_send_cb>

000253d8 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   253d8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   253da:	b160      	cbz	r0, 253f6 <bt_l2cap_le_lookup_tx_cid+0x1e>
   253dc:	3808      	subs	r0, #8
   253de:	b900      	cbnz	r0, 253e2 <bt_l2cap_le_lookup_tx_cid+0xa>
   253e0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   253e2:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   253e6:	428b      	cmp	r3, r1
   253e8:	d005      	beq.n	253f6 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   253ea:	f110 0308 	adds.w	r3, r0, #8
   253ee:	d001      	beq.n	253f4 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   253f0:	6880      	ldr	r0, [r0, #8]
   253f2:	e7f2      	b.n	253da <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   253f4:	4618      	mov	r0, r3
}
   253f6:	4770      	bx	lr

000253f8 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   253f8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   253fa:	b160      	cbz	r0, 25416 <bt_l2cap_le_lookup_rx_cid+0x1e>
   253fc:	3808      	subs	r0, #8
   253fe:	b900      	cbnz	r0, 25402 <bt_l2cap_le_lookup_rx_cid+0xa>
   25400:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25402:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   25406:	428b      	cmp	r3, r1
   25408:	d005      	beq.n	25416 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2540a:	f110 0308 	adds.w	r3, r0, #8
   2540e:	d001      	beq.n	25414 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25410:	6880      	ldr	r0, [r0, #8]
   25412:	e7f2      	b.n	253fa <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   25414:	4618      	mov	r0, r3
}
   25416:	4770      	bx	lr

00025418 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   25418:	4770      	bx	lr

0002541a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2541a:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2541c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2541e:	b128      	cbz	r0, 2542c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25420:	6859      	ldr	r1, [r3, #4]
   25422:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25424:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25426:	4288      	cmp	r0, r1
	list->tail = node;
   25428:	bf08      	it	eq
   2542a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2542c:	4770      	bx	lr

0002542e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2542e:	4603      	mov	r3, r0
   25430:	6800      	ldr	r0, [r0, #0]
   25432:	2200      	movs	r2, #0
   25434:	b900      	cbnz	r0, 25438 <sys_slist_find_and_remove+0xa>
   25436:	4770      	bx	lr
   25438:	4288      	cmp	r0, r1
   2543a:	d110      	bne.n	2545e <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2543c:	6808      	ldr	r0, [r1, #0]
   2543e:	b942      	cbnz	r2, 25452 <sys_slist_find_and_remove+0x24>
   25440:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   25442:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   25444:	4291      	cmp	r1, r2
   25446:	d100      	bne.n	2544a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   25448:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2544a:	2300      	movs	r3, #0
   2544c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2544e:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   25450:	4770      	bx	lr
	parent->next = child;
   25452:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25454:	6858      	ldr	r0, [r3, #4]
   25456:	4281      	cmp	r1, r0
	list->tail = node;
   25458:	bf08      	it	eq
   2545a:	605a      	streq	r2, [r3, #4]
}
   2545c:	e7f5      	b.n	2544a <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2545e:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25460:	6800      	ldr	r0, [r0, #0]
   25462:	e7e7      	b.n	25434 <sys_slist_find_and_remove+0x6>

00025464 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   25464:	4603      	mov	r3, r0
	size_t bytes = 0;
   25466:	2000      	movs	r0, #0

	while (buf) {
   25468:	b903      	cbnz	r3, 2546c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2546a:	4770      	bx	lr
		bytes += buf->len;
   2546c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2546e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   25470:	4410      	add	r0, r2
		buf = buf->frags;
   25472:	e7f9      	b.n	25468 <net_buf_frags_len+0x4>

00025474 <att_sent>:
	if (chan->ops->sent) {
   25474:	684b      	ldr	r3, [r1, #4]
   25476:	695b      	ldr	r3, [r3, #20]
{
   25478:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2547a:	b103      	cbz	r3, 2547e <att_sent+0xa>
		chan->ops->sent(chan);
   2547c:	4718      	bx	r3
}
   2547e:	4770      	bx	lr

00025480 <attr_read_type_cb>:
{
   25480:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   25482:	68d4      	ldr	r4, [r2, #12]
   25484:	7823      	ldrb	r3, [r4, #0]
   25486:	3102      	adds	r1, #2
   25488:	b913      	cbnz	r3, 25490 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2548a:	7021      	strb	r1, [r4, #0]
	return true;
   2548c:	2001      	movs	r0, #1
   2548e:	e006      	b.n	2549e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   25490:	428b      	cmp	r3, r1
   25492:	d0fb      	beq.n	2548c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   25494:	8983      	ldrh	r3, [r0, #12]
   25496:	3b02      	subs	r3, #2
   25498:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2549a:	2000      	movs	r0, #0
   2549c:	6110      	str	r0, [r2, #16]
}
   2549e:	bd10      	pop	{r4, pc}

000254a0 <att_prepare_write_req>:
}
   254a0:	2006      	movs	r0, #6
   254a2:	4770      	bx	lr

000254a4 <att_op_get_type>:
	switch (op) {
   254a4:	281e      	cmp	r0, #30
   254a6:	d816      	bhi.n	254d6 <att_op_get_type+0x32>
   254a8:	b308      	cbz	r0, 254ee <att_op_get_type+0x4a>
   254aa:	1e43      	subs	r3, r0, #1
   254ac:	2b1d      	cmp	r3, #29
   254ae:	d81e      	bhi.n	254ee <att_op_get_type+0x4a>
   254b0:	e8df f003 	tbb	[pc, r3]
   254b4:	23172317 	.word	0x23172317
   254b8:	23172317 	.word	0x23172317
   254bc:	23172317 	.word	0x23172317
   254c0:	23172317 	.word	0x23172317
   254c4:	1d172317 	.word	0x1d172317
   254c8:	2317231d 	.word	0x2317231d
   254cc:	1d191d17 	.word	0x1d191d17
   254d0:	0f1b      	.short	0x0f1b
   254d2:	2004      	movs	r0, #4
   254d4:	4770      	bx	lr
   254d6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   254da:	2b52      	cmp	r3, #82	; 0x52
   254dc:	d107      	bne.n	254ee <att_op_get_type+0x4a>
		return ATT_COMMAND;
   254de:	2000      	movs	r0, #0
}
   254e0:	4770      	bx	lr
		return ATT_RESPONSE;
   254e2:	2002      	movs	r0, #2
   254e4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   254e6:	2003      	movs	r0, #3
   254e8:	4770      	bx	lr
		return ATT_INDICATION;
   254ea:	2005      	movs	r0, #5
   254ec:	4770      	bx	lr
		return ATT_COMMAND;
   254ee:	f010 0f40 	tst.w	r0, #64	; 0x40
   254f2:	bf0c      	ite	eq
   254f4:	2006      	moveq	r0, #6
   254f6:	2000      	movne	r0, #0
   254f8:	4770      	bx	lr
		return ATT_REQUEST;
   254fa:	2001      	movs	r0, #1
   254fc:	4770      	bx	lr

000254fe <bt_gatt_foreach_attr>:
{
   254fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25500:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25504:	2300      	movs	r3, #0
   25506:	9300      	str	r3, [sp, #0]
   25508:	461a      	mov	r2, r3
   2550a:	f7f5 fca3 	bl	1ae54 <bt_gatt_foreach_attr_type>
}
   2550e:	b005      	add	sp, #20
   25510:	f85d fb04 	ldr.w	pc, [sp], #4

00025514 <att_chan_read>:
{
   25514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25518:	4680      	mov	r8, r0
   2551a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2551c:	4610      	mov	r0, r2
{
   2551e:	4699      	mov	r9, r3
   25520:	468b      	mov	fp, r1
   25522:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25524:	f7ff ff9e 	bl	25464 <net_buf_frags_len>
   25528:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   2552c:	4283      	cmp	r3, r0
   2552e:	d97a      	bls.n	25626 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   25530:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25534:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25536:	4630      	mov	r0, r6
   25538:	f7f7 feee 	bl	1d318 <net_buf_frag_last>
	size_t len, total = 0;
   2553c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   25540:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25542:	4630      	mov	r0, r6
   25544:	f7ff ff8e 	bl	25464 <net_buf_frags_len>
   25548:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2554c:	f105 0708 	add.w	r7, r5, #8
   25550:	1a24      	subs	r4, r4, r0
   25552:	4638      	mov	r0, r7
   25554:	f001 f859 	bl	2660a <net_buf_simple_tailroom>
   25558:	4284      	cmp	r4, r0
   2555a:	d211      	bcs.n	25580 <att_chan_read+0x6c>
   2555c:	4630      	mov	r0, r6
   2555e:	f7ff ff81 	bl	25464 <net_buf_frags_len>
   25562:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   25566:	1a24      	subs	r4, r4, r0
		if (!len) {
   25568:	bb34      	cbnz	r4, 255b8 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2556a:	79b0      	ldrb	r0, [r6, #6]
   2556c:	f7f7 fcfa 	bl	1cf64 <net_buf_pool_get>
   25570:	2200      	movs	r2, #0
   25572:	2300      	movs	r3, #0
   25574:	f001 f838 	bl	265e8 <net_buf_alloc_fixed>
			if (!frag) {
   25578:	4605      	mov	r5, r0
   2557a:	b930      	cbnz	r0, 2558a <att_chan_read+0x76>
	return total;
   2557c:	4657      	mov	r7, sl
   2557e:	e02c      	b.n	255da <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25580:	4638      	mov	r0, r7
   25582:	f001 f842 	bl	2660a <net_buf_simple_tailroom>
   25586:	4604      	mov	r4, r0
   25588:	e7ee      	b.n	25568 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2558a:	4601      	mov	r1, r0
   2558c:	4630      	mov	r0, r6
   2558e:	f7f7 ff03 	bl	1d398 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25592:	4630      	mov	r0, r6
   25594:	f7ff ff66 	bl	25464 <net_buf_frags_len>
   25598:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2559c:	f105 0708 	add.w	r7, r5, #8
   255a0:	1a24      	subs	r4, r4, r0
   255a2:	4638      	mov	r0, r7
   255a4:	f001 f831 	bl	2660a <net_buf_simple_tailroom>
   255a8:	4284      	cmp	r4, r0
   255aa:	d21a      	bcs.n	255e2 <att_chan_read+0xce>
   255ac:	4630      	mov	r0, r6
   255ae:	f7ff ff59 	bl	25464 <net_buf_frags_len>
   255b2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   255b6:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   255b8:	68a9      	ldr	r1, [r5, #8]
   255ba:	89aa      	ldrh	r2, [r5, #12]
   255bc:	f8db 7004 	ldr.w	r7, [fp, #4]
   255c0:	9803      	ldr	r0, [sp, #12]
   255c2:	f8cd 9000 	str.w	r9, [sp]
   255c6:	440a      	add	r2, r1
   255c8:	b2a3      	uxth	r3, r4
   255ca:	4659      	mov	r1, fp
   255cc:	47b8      	blx	r7
		if (read < 0) {
   255ce:	1e07      	subs	r7, r0, #0
   255d0:	da0c      	bge.n	255ec <att_chan_read+0xd8>
				return total;
   255d2:	f1ba 0f00 	cmp.w	sl, #0
   255d6:	bf18      	it	ne
   255d8:	4657      	movne	r7, sl
}
   255da:	4638      	mov	r0, r7
   255dc:	b005      	add	sp, #20
   255de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   255e2:	4638      	mov	r0, r7
   255e4:	f001 f811 	bl	2660a <net_buf_simple_tailroom>
   255e8:	4604      	mov	r4, r0
   255ea:	e7e5      	b.n	255b8 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   255ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   255ee:	b993      	cbnz	r3, 25616 <att_chan_read+0x102>
		net_buf_add(frag, read);
   255f0:	4639      	mov	r1, r7
   255f2:	f105 0008 	add.w	r0, r5, #8
   255f6:	f7f7 ff49 	bl	1d48c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   255fa:	4630      	mov	r0, r6
   255fc:	f7ff ff32 	bl	25464 <net_buf_frags_len>
   25600:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   25604:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25606:	4283      	cmp	r3, r0
		total += read;
   25608:	44ba      	add	sl, r7
		offset += read;
   2560a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2560e:	d9b5      	bls.n	2557c <att_chan_read+0x68>
   25610:	42a7      	cmp	r7, r4
   25612:	d096      	beq.n	25542 <att_chan_read+0x2e>
   25614:	e7b2      	b.n	2557c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2561a:	4639      	mov	r1, r7
   2561c:	4628      	mov	r0, r5
   2561e:	4798      	blx	r3
   25620:	2800      	cmp	r0, #0
   25622:	d1e5      	bne.n	255f0 <att_chan_read+0xdc>
   25624:	e7aa      	b.n	2557c <att_chan_read+0x68>
		return 0;
   25626:	2700      	movs	r7, #0
   25628:	e7d7      	b.n	255da <att_chan_read+0xc6>

0002562a <find_info_cb>:
{
   2562a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2562c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2562e:	6817      	ldr	r7, [r2, #0]
{
   25630:	4605      	mov	r5, r0
   25632:	460e      	mov	r6, r1
   25634:	4614      	mov	r4, r2
	if (!data->rsp) {
   25636:	b963      	cbnz	r3, 25652 <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25638:	6850      	ldr	r0, [r2, #4]
   2563a:	2101      	movs	r1, #1
   2563c:	3008      	adds	r0, #8
   2563e:	f7f7 ff25 	bl	1d48c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25642:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25644:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25646:	781b      	ldrb	r3, [r3, #0]
   25648:	2b00      	cmp	r3, #0
   2564a:	bf0c      	ite	eq
   2564c:	2301      	moveq	r3, #1
   2564e:	2302      	movne	r3, #2
   25650:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   25652:	68a3      	ldr	r3, [r4, #8]
   25654:	781b      	ldrb	r3, [r3, #0]
   25656:	2b01      	cmp	r3, #1
   25658:	d003      	beq.n	25662 <find_info_cb+0x38>
   2565a:	2b02      	cmp	r3, #2
   2565c:	d019      	beq.n	25692 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2565e:	2000      	movs	r0, #0
   25660:	e016      	b.n	25690 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25662:	682b      	ldr	r3, [r5, #0]
   25664:	781b      	ldrb	r3, [r3, #0]
   25666:	2b00      	cmp	r3, #0
   25668:	d1f9      	bne.n	2565e <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2566a:	6860      	ldr	r0, [r4, #4]
   2566c:	2104      	movs	r1, #4
   2566e:	3008      	adds	r0, #8
   25670:	f7f7 ff0c 	bl	1d48c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25674:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25676:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25678:	885b      	ldrh	r3, [r3, #2]
   2567a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2567c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2567e:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   25680:	899b      	ldrh	r3, [r3, #12]
   25682:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   25686:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25688:	2804      	cmp	r0, #4
   2568a:	bf94      	ite	ls
   2568c:	2000      	movls	r0, #0
   2568e:	2001      	movhi	r0, #1
}
   25690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25692:	682b      	ldr	r3, [r5, #0]
   25694:	781b      	ldrb	r3, [r3, #0]
   25696:	2b02      	cmp	r3, #2
   25698:	d1e1      	bne.n	2565e <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2569a:	6860      	ldr	r0, [r4, #4]
   2569c:	2112      	movs	r1, #18
   2569e:	3008      	adds	r0, #8
   256a0:	f7f7 fef4 	bl	1d48c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   256a4:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   256a6:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   256a8:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   256aa:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   256ae:	3101      	adds	r1, #1
   256b0:	f7ff fa08 	bl	24ac4 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   256b4:	6863      	ldr	r3, [r4, #4]
   256b6:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   256ba:	899b      	ldrh	r3, [r3, #12]
   256bc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   256be:	2812      	cmp	r0, #18
   256c0:	e7e3      	b.n	2568a <find_info_cb+0x60>

000256c2 <attr_read_group_cb>:
	if (!data->rsp->len) {
   256c2:	68d0      	ldr	r0, [r2, #12]
   256c4:	7803      	ldrb	r3, [r0, #0]
   256c6:	3104      	adds	r1, #4
   256c8:	b913      	cbnz	r3, 256d0 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   256ca:	7001      	strb	r1, [r0, #0]
	return true;
   256cc:	2001      	movs	r0, #1
}
   256ce:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   256d0:	428b      	cmp	r3, r1
   256d2:	d0fb      	beq.n	256cc <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   256d4:	6891      	ldr	r1, [r2, #8]
   256d6:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   256d8:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   256da:	3b04      	subs	r3, #4
   256dc:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   256de:	6110      	str	r0, [r2, #16]
		return false;
   256e0:	4770      	bx	lr

000256e2 <att_exec_write_req>:
   256e2:	2006      	movs	r0, #6
   256e4:	4770      	bx	lr

000256e6 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   256e6:	30c8      	adds	r0, #200	; 0xc8
   256e8:	f3bf 8f5b 	dmb	ish
   256ec:	e850 3f00 	ldrex	r3, [r0]
   256f0:	f023 0302 	bic.w	r3, r3, #2
   256f4:	e840 3200 	strex	r2, r3, [r0]
   256f8:	2a00      	cmp	r2, #0
   256fa:	d1f7      	bne.n	256ec <chan_cfm_sent+0x6>
   256fc:	f3bf 8f5b 	dmb	ish
}
   25700:	4770      	bx	lr

00025702 <chan_rsp_sent>:
   25702:	30c8      	adds	r0, #200	; 0xc8
   25704:	f3bf 8f5b 	dmb	ish
   25708:	e850 3f00 	ldrex	r3, [r0]
   2570c:	f023 0301 	bic.w	r3, r3, #1
   25710:	e840 3200 	strex	r2, r3, [r0]
   25714:	2a00      	cmp	r2, #0
   25716:	d1f7      	bne.n	25708 <chan_rsp_sent+0x6>
   25718:	f3bf 8f5b 	dmb	ish
}
   2571c:	4770      	bx	lr

0002571e <write_cb>:
{
   2571e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25720:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   25722:	4601      	mov	r1, r0
{
   25724:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25726:	222a      	movs	r2, #42	; 0x2a
   25728:	6820      	ldr	r0, [r4, #0]
   2572a:	f000 fb7f 	bl	25e2c <bt_gatt_check_perm>
   2572e:	4605      	mov	r5, r0
   25730:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   25732:	bb00      	cbnz	r0, 25776 <write_cb+0x58>
	if (!data->req) {
   25734:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   25736:	68b7      	ldr	r7, [r6, #8]
   25738:	68e2      	ldr	r2, [r4, #12]
   2573a:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   2573c:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2573e:	bf14      	ite	ne
   25740:	2300      	movne	r3, #0
   25742:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   25744:	9301      	str	r3, [sp, #4]
   25746:	8a63      	ldrh	r3, [r4, #18]
   25748:	9300      	str	r3, [sp, #0]
   2574a:	4631      	mov	r1, r6
   2574c:	8a23      	ldrh	r3, [r4, #16]
   2574e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   25750:	1e03      	subs	r3, r0, #0
   25752:	db05      	blt.n	25760 <write_cb+0x42>
   25754:	8a22      	ldrh	r2, [r4, #16]
   25756:	4293      	cmp	r3, r2
   25758:	d10b      	bne.n	25772 <write_cb+0x54>
	data->err = 0U;
   2575a:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2575c:	2501      	movs	r5, #1
   2575e:	e005      	b.n	2576c <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   25760:	f113 0fff 	cmn.w	r3, #255	; 0xff
   25764:	d305      	bcc.n	25772 <write_cb+0x54>
		return -err;
   25766:	425b      	negs	r3, r3
   25768:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2576a:	7523      	strb	r3, [r4, #20]
}
   2576c:	4628      	mov	r0, r5
   2576e:	b003      	add	sp, #12
   25770:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   25772:	230e      	movs	r3, #14
   25774:	e7f9      	b.n	2576a <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   25776:	2500      	movs	r5, #0
   25778:	e7f8      	b.n	2576c <write_cb+0x4e>

0002577a <read_cb>:
{
   2577a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2577e:	f8d2 8000 	ldr.w	r8, [r2]
{
   25782:	4606      	mov	r6, r0
	data->err = 0x00;
   25784:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25786:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2578a:	7317      	strb	r7, [r2, #12]
{
   2578c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2578e:	4631      	mov	r1, r6
   25790:	2215      	movs	r2, #21
   25792:	f000 fb4b 	bl	25e2c <bt_gatt_check_perm>
   25796:	4604      	mov	r4, r0
   25798:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2579a:	b9a0      	cbnz	r0, 257c6 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2579c:	e9cd 0000 	strd	r0, r0, [sp]
   257a0:	88ab      	ldrh	r3, [r5, #4]
   257a2:	68aa      	ldr	r2, [r5, #8]
   257a4:	4631      	mov	r1, r6
   257a6:	4640      	mov	r0, r8
   257a8:	f7ff feb4 	bl	25514 <att_chan_read>
	if (ret < 0) {
   257ac:	1e03      	subs	r3, r0, #0
   257ae:	da0c      	bge.n	257ca <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   257b0:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   257b4:	bf26      	itte	cs
   257b6:	425b      	negcs	r3, r3
   257b8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   257ba:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   257bc:	732b      	strb	r3, [r5, #12]
}
   257be:	4620      	mov	r0, r4
   257c0:	b002      	add	sp, #8
   257c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   257c6:	463c      	mov	r4, r7
   257c8:	e7f9      	b.n	257be <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   257ca:	2401      	movs	r4, #1
   257cc:	e7f7      	b.n	257be <read_cb+0x44>

000257ce <chan_req_send>:
{
   257ce:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   257d0:	690e      	ldr	r6, [r1, #16]
{
   257d2:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   257d4:	4630      	mov	r0, r6
{
   257d6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   257d8:	f7ff fe44 	bl	25464 <net_buf_frags_len>
   257dc:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   257e0:	4283      	cmp	r3, r0
   257e2:	d317      	bcc.n	25814 <chan_req_send+0x46>
	chan->req = req;
   257e4:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   257e8:	f106 0008 	add.w	r0, r6, #8
   257ec:	f000 ff09 	bl	26602 <net_buf_simple_headroom>
	state->len = buf->len;
   257f0:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   257f2:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   257f4:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   257f6:	6920      	ldr	r0, [r4, #16]
   257f8:	f7f7 fd76 	bl	1d2e8 <net_buf_ref>
   257fc:	2200      	movs	r2, #0
   257fe:	4601      	mov	r1, r0
   25800:	4628      	mov	r0, r5
   25802:	f7f3 fefd 	bl	19600 <chan_send>
	if (err) {
   25806:	4605      	mov	r5, r0
   25808:	b110      	cbz	r0, 25810 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   2580a:	6920      	ldr	r0, [r4, #16]
   2580c:	f7f7 fd28 	bl	1d260 <net_buf_unref>
}
   25810:	4628      	mov	r0, r5
   25812:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   25814:	f06f 0523 	mvn.w	r5, #35	; 0x23
   25818:	e7fa      	b.n	25810 <chan_req_send+0x42>

0002581a <bt_att_status>:
{
   2581a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2581c:	f3bf 8f5b 	dmb	ish
   25820:	680b      	ldr	r3, [r1, #0]
   25822:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25826:	07db      	lsls	r3, r3, #31
{
   25828:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2582a:	d518      	bpl.n	2585e <bt_att_status+0x44>
	if (chan->req) {
   2582c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   25830:	b9ab      	cbnz	r3, 2585e <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   25832:	f850 0c08 	ldr.w	r0, [r0, #-8]
   25836:	3004      	adds	r0, #4
   25838:	f7ff fdef 	bl	2541a <sys_slist_get>
	if (!node) {
   2583c:	4604      	mov	r4, r0
   2583e:	b170      	cbz	r0, 2585e <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25840:	4601      	mov	r1, r0
   25842:	f1a5 0008 	sub.w	r0, r5, #8
   25846:	f7f3 ff47 	bl	196d8 <bt_att_chan_req_send>
   2584a:	2800      	cmp	r0, #0
   2584c:	da07      	bge.n	2585e <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   2584e:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   25852:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25854:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25856:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25858:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2585a:	b902      	cbnz	r2, 2585e <bt_att_status+0x44>
	list->tail = node;
   2585c:	609c      	str	r4, [r3, #8]
}
   2585e:	bd38      	pop	{r3, r4, r5, pc}

00025860 <bt_att_chan_send>:
{
   25860:	b570      	push	{r4, r5, r6, lr}
   25862:	4604      	mov	r4, r0
   25864:	460e      	mov	r6, r1
	if (!cb) {
   25866:	4615      	mov	r5, r2
   25868:	b132      	cbz	r2, 25878 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   2586a:	462a      	mov	r2, r5
   2586c:	4631      	mov	r1, r6
   2586e:	4620      	mov	r0, r4
}
   25870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   25874:	f7f3 bec4 	b.w	19600 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   25878:	2200      	movs	r2, #0
   2587a:	2300      	movs	r3, #0
   2587c:	f500 7090 	add.w	r0, r0, #288	; 0x120
   25880:	f7fc f8f2 	bl	21a68 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   25884:	2800      	cmp	r0, #0
   25886:	daf0      	bge.n	2586a <bt_att_chan_send+0xa>
}
   25888:	f06f 000a 	mvn.w	r0, #10
   2588c:	bd70      	pop	{r4, r5, r6, pc}

0002588e <bt_att_chan_send_rsp>:
{
   2588e:	b538      	push	{r3, r4, r5, lr}
   25890:	4604      	mov	r4, r0
   25892:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   25894:	f7ff ffe4 	bl	25860 <bt_att_chan_send>
	if (err) {
   25898:	b130      	cbz	r0, 258a8 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2589a:	4629      	mov	r1, r5
   2589c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   258a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   258a4:	f7f7 bcae 	b.w	1d204 <net_buf_put>
}
   258a8:	bd38      	pop	{r3, r4, r5, pc}

000258aa <process_queue>:
{
   258aa:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   258ac:	2200      	movs	r2, #0
{
   258ae:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   258b0:	2300      	movs	r3, #0
   258b2:	4608      	mov	r0, r1
{
   258b4:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   258b6:	f7f7 fc51 	bl	1d15c <net_buf_get>
	if (buf) {
   258ba:	4605      	mov	r5, r0
   258bc:	b160      	cbz	r0, 258d8 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   258be:	4601      	mov	r1, r0
   258c0:	2200      	movs	r2, #0
   258c2:	4620      	mov	r0, r4
   258c4:	f7f3 fe9c 	bl	19600 <chan_send>
		if (err) {
   258c8:	4604      	mov	r4, r0
   258ca:	b118      	cbz	r0, 258d4 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   258cc:	4629      	mov	r1, r5
   258ce:	4630      	mov	r0, r6
   258d0:	f001 f923 	bl	26b1a <k_queue_prepend>
}
   258d4:	4620      	mov	r0, r4
   258d6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   258d8:	f06f 0401 	mvn.w	r4, #1
   258dc:	e7fa      	b.n	258d4 <process_queue+0x2a>

000258de <bt_att_sent>:
{
   258de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   258e0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	struct bt_att *att = chan->att;
   258e4:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   258e8:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   258ea:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   258ee:	b10b      	cbz	r3, 258f4 <bt_att_sent+0x16>
		chan->sent(chan);
   258f0:	4638      	mov	r0, r7
   258f2:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   258f4:	f3bf 8f5b 	dmb	ish
   258f8:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   258fc:	e853 2f00 	ldrex	r2, [r3]
   25900:	f022 0210 	bic.w	r2, r2, #16
   25904:	e843 2100 	strex	r1, r2, [r3]
   25908:	2900      	cmp	r1, #0
   2590a:	d1f7      	bne.n	258fc <bt_att_sent+0x1e>
   2590c:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25910:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   25914:	b98b      	cbnz	r3, 2593a <bt_att_sent+0x5c>
   25916:	686b      	ldr	r3, [r5, #4]
   25918:	b17b      	cbz	r3, 2593a <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2591a:	1d28      	adds	r0, r5, #4
   2591c:	f7ff fd7d 	bl	2541a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25920:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25922:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25924:	4638      	mov	r0, r7
   25926:	f7ff ff52 	bl	257ce <chan_req_send>
   2592a:	2800      	cmp	r0, #0
   2592c:	da17      	bge.n	2595e <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   2592e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   25930:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   25932:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   25934:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   25936:	b903      	cbnz	r3, 2593a <bt_att_sent+0x5c>
	list->tail = node;
   25938:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   2593a:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   2593e:	4638      	mov	r0, r7
   25940:	f7ff ffb3 	bl	258aa <process_queue>
	if (!err) {
   25944:	b158      	cbz	r0, 2595e <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   25946:	f105 010c 	add.w	r1, r5, #12
   2594a:	4638      	mov	r0, r7
   2594c:	f7ff ffad 	bl	258aa <process_queue>
	if (!err) {
   25950:	b128      	cbz	r0, 2595e <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   25952:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   25956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2595a:	f7fc b849 	b.w	219f0 <z_impl_k_sem_give>
   2595e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025960 <att_read_blob_req>:
{
   25960:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25962:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25964:	8813      	ldrh	r3, [r2, #0]
   25966:	8852      	ldrh	r2, [r2, #2]
   25968:	9200      	str	r2, [sp, #0]
   2596a:	210c      	movs	r1, #12
   2596c:	220d      	movs	r2, #13
   2596e:	f7f4 f97b 	bl	19c68 <att_read_rsp>
}
   25972:	b003      	add	sp, #12
   25974:	f85d fb04 	ldr.w	pc, [sp], #4

00025978 <att_read_req>:
{
   25978:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2597a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2597c:	2200      	movs	r2, #0
   2597e:	881b      	ldrh	r3, [r3, #0]
   25980:	9200      	str	r2, [sp, #0]
   25982:	210a      	movs	r1, #10
   25984:	220b      	movs	r2, #11
   25986:	f7f4 f96f 	bl	19c68 <att_read_rsp>
}
   2598a:	b003      	add	sp, #12
   2598c:	f85d fb04 	ldr.w	pc, [sp], #4

00025990 <bt_att_init>:
	bt_gatt_init();
   25990:	f7f5 b9ac 	b.w	1acec <bt_gatt_init>

00025994 <att_req_destroy>:
{
   25994:	b510      	push	{r4, lr}
   25996:	4604      	mov	r4, r0
	if (req->buf) {
   25998:	6900      	ldr	r0, [r0, #16]
   2599a:	b108      	cbz	r0, 259a0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   2599c:	f7f7 fc60 	bl	1d260 <net_buf_unref>
	if (req->destroy) {
   259a0:	68a3      	ldr	r3, [r4, #8]
   259a2:	b10b      	cbz	r3, 259a8 <att_req_destroy+0x14>
		req->destroy(req);
   259a4:	4620      	mov	r0, r4
   259a6:	4798      	blx	r3
	bt_att_req_free(req);
   259a8:	4620      	mov	r0, r4
}
   259aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   259ae:	f7f4 baff 	b.w	19fb0 <bt_att_req_free>

000259b2 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   259b2:	898a      	ldrh	r2, [r1, #12]
   259b4:	6889      	ldr	r1, [r1, #8]
   259b6:	2300      	movs	r3, #0
   259b8:	f7f4 bb06 	b.w	19fc8 <att_handle_rsp>

000259bc <att_chan_detach>:
{
   259bc:	b538      	push	{r3, r4, r5, lr}
   259be:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   259c0:	6800      	ldr	r0, [r0, #0]
   259c2:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   259c6:	3028      	adds	r0, #40	; 0x28
   259c8:	f7ff fd31 	bl	2542e <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   259cc:	f504 7590 	add.w	r5, r4, #288	; 0x120
   259d0:	4628      	mov	r0, r5
   259d2:	f7fc f80d 	bl	219f0 <z_impl_k_sem_give>
   259d6:	4628      	mov	r0, r5
   259d8:	f7fc f80a 	bl	219f0 <z_impl_k_sem_give>
   259dc:	4628      	mov	r0, r5
   259de:	f7fc f807 	bl	219f0 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   259e2:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   259e6:	2200      	movs	r2, #0
   259e8:	2300      	movs	r3, #0
   259ea:	4628      	mov	r0, r5
   259ec:	f7f7 fbb6 	bl	1d15c <net_buf_get>
   259f0:	4602      	mov	r2, r0
   259f2:	b950      	cbnz	r0, 25a0a <att_chan_detach+0x4e>
	if (chan->req) {
   259f4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   259f8:	b123      	cbz	r3, 25a04 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   259fa:	4601      	mov	r1, r0
   259fc:	230e      	movs	r3, #14
   259fe:	4620      	mov	r0, r4
   25a00:	f7f4 fae2 	bl	19fc8 <att_handle_rsp>
	chan->att = NULL;
   25a04:	2300      	movs	r3, #0
   25a06:	6023      	str	r3, [r4, #0]
}
   25a08:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   25a0a:	f7f7 fc29 	bl	1d260 <net_buf_unref>
   25a0e:	e7ea      	b.n	259e6 <att_chan_detach+0x2a>

00025a10 <bt_att_disconnected>:
{
   25a10:	b538      	push	{r3, r4, r5, lr}
   25a12:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   25a14:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   25a18:	f7ff ffd0 	bl	259bc <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   25a1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25a1e:	b93b      	cbnz	r3, 25a30 <bt_att_disconnected+0x20>
	att_reset(att);
   25a20:	4628      	mov	r0, r5
   25a22:	f7f4 fb79 	bl	1a118 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   25a26:	6820      	ldr	r0, [r4, #0]
}
   25a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   25a2c:	f7f5 be2e 	b.w	1b68c <bt_gatt_disconnected>
}
   25a30:	bd38      	pop	{r3, r4, r5, pc}

00025a32 <gatt_ccc_changed>:
{
   25a32:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   25a34:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   25a36:	895a      	ldrh	r2, [r3, #10]
   25a38:	428a      	cmp	r2, r1
   25a3a:	d003      	beq.n	25a44 <gatt_ccc_changed+0x12>
		ccc->value = value;
   25a3c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   25a3e:	68db      	ldr	r3, [r3, #12]
   25a40:	b103      	cbz	r3, 25a44 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   25a42:	4718      	bx	r3
}
   25a44:	4770      	bx	lr

00025a46 <gatt_indicate_rsp>:
{
   25a46:	b510      	push	{r4, lr}
   25a48:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   25a4a:	7da3      	ldrb	r3, [r4, #22]
   25a4c:	3b01      	subs	r3, #1
{
   25a4e:	460a      	mov	r2, r1
	params->_ref--;
   25a50:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   25a52:	4621      	mov	r1, r4
   25a54:	68a3      	ldr	r3, [r4, #8]
   25a56:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   25a58:	68e3      	ldr	r3, [r4, #12]
   25a5a:	b12b      	cbz	r3, 25a68 <gatt_indicate_rsp+0x22>
   25a5c:	7da2      	ldrb	r2, [r4, #22]
   25a5e:	b91a      	cbnz	r2, 25a68 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   25a60:	4620      	mov	r0, r4
}
   25a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25a66:	4718      	bx	r3
}
   25a68:	bd10      	pop	{r4, pc}

00025a6a <match_uuid>:
	data->attr = attr;
   25a6a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25a6c:	8091      	strh	r1, [r2, #4]
}
   25a6e:	2000      	movs	r0, #0
   25a70:	4770      	bx	lr

00025a72 <ccc_set_cb>:
}
   25a72:	2000      	movs	r0, #0
   25a74:	4770      	bx	lr

00025a76 <gen_hash_m>:
{
   25a76:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25a78:	6807      	ldr	r7, [r0, #0]
   25a7a:	783d      	ldrb	r5, [r7, #0]
{
   25a7c:	b089      	sub	sp, #36	; 0x24
   25a7e:	4606      	mov	r6, r0
   25a80:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25a82:	b10d      	cbz	r5, 25a88 <gen_hash_m+0x12>
	switch (u16->val) {
   25a84:	2501      	movs	r5, #1
   25a86:	e014      	b.n	25ab2 <gen_hash_m+0x3c>
   25a88:	887b      	ldrh	r3, [r7, #2]
   25a8a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25a8e:	d004      	beq.n	25a9a <gen_hash_m+0x24>
   25a90:	d812      	bhi.n	25ab8 <gen_hash_m+0x42>
   25a92:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25a96:	2b03      	cmp	r3, #3
   25a98:	d8f4      	bhi.n	25a84 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25a9a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a9e:	2202      	movs	r2, #2
   25aa0:	f10d 010e 	add.w	r1, sp, #14
   25aa4:	4620      	mov	r0, r4
   25aa6:	f7fe feab 	bl	24800 <tc_cmac_update>
   25aaa:	b9e0      	cbnz	r0, 25ae6 <gen_hash_m+0x70>
			state->err = -EINVAL;
   25aac:	f06f 0315 	mvn.w	r3, #21
   25ab0:	65a3      	str	r3, [r4, #88]	; 0x58
}
   25ab2:	4628      	mov	r0, r5
   25ab4:	b009      	add	sp, #36	; 0x24
   25ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   25ab8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25abc:	33ff      	adds	r3, #255	; 0xff
   25abe:	b29b      	uxth	r3, r3
   25ac0:	2b04      	cmp	r3, #4
   25ac2:	d8df      	bhi.n	25a84 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25ac4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25ac8:	2202      	movs	r2, #2
   25aca:	f10d 010e 	add.w	r1, sp, #14
   25ace:	4620      	mov	r0, r4
   25ad0:	f7fe fe96 	bl	24800 <tc_cmac_update>
   25ad4:	2800      	cmp	r0, #0
   25ad6:	d0e9      	beq.n	25aac <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   25ad8:	887b      	ldrh	r3, [r7, #2]
   25ada:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25ade:	2202      	movs	r2, #2
   25ae0:	f10d 010e 	add.w	r1, sp, #14
   25ae4:	e017      	b.n	25b16 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   25ae6:	887b      	ldrh	r3, [r7, #2]
   25ae8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25aec:	2202      	movs	r2, #2
   25aee:	f10d 010e 	add.w	r1, sp, #14
   25af2:	4620      	mov	r0, r4
   25af4:	f7fe fe84 	bl	24800 <tc_cmac_update>
   25af8:	2800      	cmp	r0, #0
   25afa:	d0d7      	beq.n	25aac <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25afc:	2000      	movs	r0, #0
   25afe:	2310      	movs	r3, #16
   25b00:	eb0d 0203 	add.w	r2, sp, r3
   25b04:	6877      	ldr	r7, [r6, #4]
   25b06:	9000      	str	r0, [sp, #0]
   25b08:	4631      	mov	r1, r6
   25b0a:	47b8      	blx	r7
		if (len < 0) {
   25b0c:	1e02      	subs	r2, r0, #0
   25b0e:	da01      	bge.n	25b14 <gen_hash_m+0x9e>
			state->err = len;
   25b10:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25b12:	e7ce      	b.n	25ab2 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   25b14:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25b16:	4620      	mov	r0, r4
   25b18:	f7fe fe72 	bl	24800 <tc_cmac_update>
   25b1c:	2800      	cmp	r0, #0
   25b1e:	d1b1      	bne.n	25a84 <gen_hash_m+0xe>
   25b20:	e7c4      	b.n	25aac <gen_hash_m+0x36>

00025b22 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25b22:	2207      	movs	r2, #7
   25b24:	f7fe bfce 	b.w	24ac4 <memcpy>

00025b28 <clear_ccc_cfg>:
{
   25b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25b2a:	2500      	movs	r5, #0
{
   25b2c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25b2e:	4669      	mov	r1, sp
   25b30:	3001      	adds	r0, #1
   25b32:	9500      	str	r5, [sp, #0]
   25b34:	f8cd 5003 	str.w	r5, [sp, #3]
   25b38:	f7ff fff3 	bl	25b22 <bt_addr_le_copy>
	cfg->id = 0U;
   25b3c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   25b3e:	8125      	strh	r5, [r4, #8]
}
   25b40:	b003      	add	sp, #12
   25b42:	bd30      	pop	{r4, r5, pc}

00025b44 <clear_cf_cfg>:
{
   25b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25b46:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25b48:	2500      	movs	r5, #0
   25b4a:	4669      	mov	r1, sp
   25b4c:	3001      	adds	r0, #1
   25b4e:	9500      	str	r5, [sp, #0]
   25b50:	f8cd 5003 	str.w	r5, [sp, #3]
   25b54:	f7ff ffe5 	bl	25b22 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   25b58:	f104 0008 	add.w	r0, r4, #8
   25b5c:	2201      	movs	r2, #1
   25b5e:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25b60:	340c      	adds	r4, #12
   25b62:	f7fe ffda 	bl	24b1a <memset>
   25b66:	f3bf 8f5b 	dmb	ish
   25b6a:	e854 3f00 	ldrex	r3, [r4]
   25b6e:	e844 5200 	strex	r2, r5, [r4]
   25b72:	2a00      	cmp	r2, #0
   25b74:	d1f9      	bne.n	25b6a <clear_cf_cfg+0x26>
   25b76:	f3bf 8f5b 	dmb	ish
}
   25b7a:	b003      	add	sp, #12
   25b7c:	bd30      	pop	{r4, r5, pc}

00025b7e <ccc_find_cfg>:
{
   25b7e:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   25b80:	7803      	ldrb	r3, [r0, #0]
   25b82:	4293      	cmp	r3, r2
{
   25b84:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   25b86:	d001      	beq.n	25b8c <ccc_find_cfg+0xe>
	return NULL;
   25b88:	2000      	movs	r0, #0
}
   25b8a:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   25b8c:	2207      	movs	r2, #7
   25b8e:	3001      	adds	r0, #1
   25b90:	f7fe ff88 	bl	24aa4 <memcmp>
		if (id == ccc->cfg[i].id &&
   25b94:	2800      	cmp	r0, #0
   25b96:	d1f7      	bne.n	25b88 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   25b98:	4620      	mov	r0, r4
   25b9a:	e7f6      	b.n	25b8a <ccc_find_cfg+0xc>

00025b9c <find_ccc_cfg>:
{
   25b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25b9e:	460c      	mov	r4, r1
   25ba0:	1c4d      	adds	r5, r1, #1
		if (conn) {
   25ba2:	b148      	cbz	r0, 25bb8 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   25ba4:	7809      	ldrb	r1, [r1, #0]
   25ba6:	462a      	mov	r2, r5
   25ba8:	f7ff fb32 	bl	25210 <bt_conn_is_peer_addr_le>
   25bac:	2800      	cmp	r0, #0
	return NULL;
   25bae:	bf08      	it	eq
   25bb0:	2400      	moveq	r4, #0
}
   25bb2:	4620      	mov	r0, r4
   25bb4:	b003      	add	sp, #12
   25bb6:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   25bb8:	9000      	str	r0, [sp, #0]
   25bba:	2207      	movs	r2, #7
   25bbc:	f8cd 0003 	str.w	r0, [sp, #3]
   25bc0:	4669      	mov	r1, sp
   25bc2:	4628      	mov	r0, r5
   25bc4:	f7fe ff6e 	bl	24aa4 <memcmp>
   25bc8:	2800      	cmp	r0, #0
	return NULL;
   25bca:	bf18      	it	ne
   25bcc:	2400      	movne	r4, #0
   25bce:	e7f0      	b.n	25bb2 <find_ccc_cfg+0x16>

00025bd0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25bd0:	2301      	movs	r3, #1
   25bd2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25bd4:	f3bf 8f5b 	dmb	ish
   25bd8:	e850 2f00 	ldrex	r2, [r0]
   25bdc:	431a      	orrs	r2, r3
   25bde:	e840 2100 	strex	r1, r2, [r0]
   25be2:	2900      	cmp	r1, #0
   25be4:	d1f8      	bne.n	25bd8 <atomic_set_bit+0x8>
   25be6:	f3bf 8f5b 	dmb	ish
}
   25bea:	4770      	bx	lr

00025bec <sc_restore_rsp>:
{
   25bec:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   25bee:	f7f4 fdf1 	bl	1a7d4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   25bf2:	b140      	cbz	r0, 25c06 <sc_restore_rsp+0x1a>
   25bf4:	7a03      	ldrb	r3, [r0, #8]
   25bf6:	07db      	lsls	r3, r3, #31
   25bf8:	d505      	bpl.n	25c06 <sc_restore_rsp+0x1a>
}
   25bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   25bfe:	2100      	movs	r1, #0
   25c00:	300c      	adds	r0, #12
   25c02:	f7ff bfe5 	b.w	25bd0 <atomic_set_bit>
}
   25c06:	bd08      	pop	{r3, pc}

00025c08 <read_appearance>:
{
   25c08:	b513      	push	{r0, r1, r4, lr}
   25c0a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   25c0e:	4610      	mov	r0, r2
	if (offset > value_len) {
   25c10:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   25c12:	f04f 0200 	mov.w	r2, #0
   25c16:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   25c1a:	d80d      	bhi.n	25c38 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   25c1c:	f1c1 0402 	rsb	r4, r1, #2
   25c20:	429c      	cmp	r4, r3
   25c22:	bfa8      	it	ge
   25c24:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25c26:	f10d 0306 	add.w	r3, sp, #6
   25c2a:	4622      	mov	r2, r4
   25c2c:	4419      	add	r1, r3
   25c2e:	f7fe ff49 	bl	24ac4 <memcpy>
}
   25c32:	4620      	mov	r0, r4
   25c34:	b002      	add	sp, #8
   25c36:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25c38:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25c3c:	e7f9      	b.n	25c32 <read_appearance+0x2a>

00025c3e <read_name>:
{
   25c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c42:	4698      	mov	r8, r3
   25c44:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   25c48:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   25c4a:	f7f1 fef5 	bl	17a38 <bt_get_name>
   25c4e:	4607      	mov	r7, r0
				 strlen(name));
   25c50:	f7fe ff06 	bl	24a60 <strlen>
	if (offset > value_len) {
   25c54:	b283      	uxth	r3, r0
   25c56:	42b3      	cmp	r3, r6
   25c58:	d30c      	bcc.n	25c74 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   25c5a:	1b9c      	subs	r4, r3, r6
   25c5c:	4544      	cmp	r4, r8
   25c5e:	bfa8      	it	ge
   25c60:	4644      	movge	r4, r8
   25c62:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25c64:	4622      	mov	r2, r4
   25c66:	19b9      	adds	r1, r7, r6
   25c68:	4628      	mov	r0, r5
   25c6a:	f7fe ff2b 	bl	24ac4 <memcpy>
}
   25c6e:	4620      	mov	r0, r4
   25c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25c74:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25c78:	e7f9      	b.n	25c6e <read_name+0x30>

00025c7a <cf_read>:
{
   25c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25c7c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   25c7e:	2300      	movs	r3, #0
{
   25c80:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   25c84:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25c88:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   25c8a:	f7f4 fda3 	bl	1a7d4 <find_cf_cfg>
	if (cfg) {
   25c8e:	b128      	cbz	r0, 25c9c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   25c90:	f100 0108 	add.w	r1, r0, #8
   25c94:	2201      	movs	r2, #1
   25c96:	a801      	add	r0, sp, #4
   25c98:	f7fe ff14 	bl	24ac4 <memcpy>
	if (offset > value_len) {
   25c9c:	2e01      	cmp	r6, #1
   25c9e:	d80d      	bhi.n	25cbc <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   25ca0:	f1c6 0401 	rsb	r4, r6, #1
   25ca4:	42bc      	cmp	r4, r7
   25ca6:	bfa8      	it	ge
   25ca8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25caa:	ab01      	add	r3, sp, #4
   25cac:	4622      	mov	r2, r4
   25cae:	1999      	adds	r1, r3, r6
   25cb0:	4628      	mov	r0, r5
   25cb2:	f7fe ff07 	bl	24ac4 <memcpy>
}
   25cb6:	4620      	mov	r0, r4
   25cb8:	b003      	add	sp, #12
   25cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25cbc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   25cc0:	e7f9      	b.n	25cb6 <cf_read+0x3c>

00025cc2 <bt_gatt_attr_read_ccc>:
{
   25cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   25cc4:	68c9      	ldr	r1, [r1, #12]
{
   25cc6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   25cca:	4615      	mov	r5, r2
   25ccc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   25cce:	f7ff ff65 	bl	25b9c <find_ccc_cfg>
	if (cfg) {
   25cd2:	b100      	cbz	r0, 25cd6 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   25cd4:	8900      	ldrh	r0, [r0, #8]
   25cd6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25cda:	2e02      	cmp	r6, #2
   25cdc:	d80e      	bhi.n	25cfc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   25cde:	f1c6 0402 	rsb	r4, r6, #2
   25ce2:	42bc      	cmp	r4, r7
   25ce4:	bfa8      	it	ge
   25ce6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25ce8:	f10d 0306 	add.w	r3, sp, #6
   25cec:	4622      	mov	r2, r4
   25cee:	1999      	adds	r1, r3, r6
   25cf0:	4628      	mov	r0, r5
   25cf2:	f7fe fee7 	bl	24ac4 <memcpy>
}
   25cf6:	4620      	mov	r0, r4
   25cf8:	b003      	add	sp, #12
   25cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25cfc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25d00:	e7f9      	b.n	25cf6 <bt_gatt_attr_read_ccc+0x34>

00025d02 <bt_gatt_attr_read_service>:
{
   25d02:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   25d04:	68c9      	ldr	r1, [r1, #12]
{
   25d06:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   25d0a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   25d0c:	780b      	ldrb	r3, [r1, #0]
{
   25d0e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   25d10:	b993      	cbnz	r3, 25d38 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25d12:	884b      	ldrh	r3, [r1, #2]
   25d14:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   25d18:	2d02      	cmp	r5, #2
   25d1a:	d819      	bhi.n	25d50 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   25d1c:	f1c5 0202 	rsb	r2, r5, #2
   25d20:	4294      	cmp	r4, r2
   25d22:	bfa8      	it	ge
   25d24:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25d26:	f10d 0306 	add.w	r3, sp, #6
   25d2a:	4622      	mov	r2, r4
   25d2c:	1959      	adds	r1, r3, r5
   25d2e:	f7fe fec9 	bl	24ac4 <memcpy>
}
   25d32:	4620      	mov	r0, r4
   25d34:	b003      	add	sp, #12
   25d36:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   25d38:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   25d3a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   25d3e:	d807      	bhi.n	25d50 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   25d40:	f1c5 0210 	rsb	r2, r5, #16
   25d44:	4294      	cmp	r4, r2
   25d46:	bfa8      	it	ge
   25d48:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25d4a:	4622      	mov	r2, r4
   25d4c:	4429      	add	r1, r5
   25d4e:	e7ee      	b.n	25d2e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25d50:	f06f 0406 	mvn.w	r4, #6
   25d54:	e7ed      	b.n	25d32 <bt_gatt_attr_read_service+0x30>

00025d56 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25d56:	2a02      	cmp	r2, #2
{
   25d58:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25d5a:	d108      	bne.n	25d6e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25d5c:	2300      	movs	r3, #0
   25d5e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   25d62:	461a      	mov	r2, r3
   25d64:	7a00      	ldrb	r0, [r0, #8]
   25d66:	f7f4 fc75 	bl	1a654 <sc_save>
}
   25d6a:	2002      	movs	r0, #2
   25d6c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25d6e:	f7f4 fe8f 	bl	1aa90 <sc_clear>
   25d72:	e7fa      	b.n	25d6a <sc_ccc_cfg_write+0x14>

00025d74 <bt_gatt_attr_value_handle>:
{
   25d74:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25d76:	4604      	mov	r4, r0
   25d78:	b910      	cbnz	r0, 25d80 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   25d7a:	2000      	movs	r0, #0
}
   25d7c:	b002      	add	sp, #8
   25d7e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25d80:	2300      	movs	r3, #0
   25d82:	f88d 3004 	strb.w	r3, [sp, #4]
   25d86:	6800      	ldr	r0, [r0, #0]
   25d88:	f642 0303 	movw	r3, #10243	; 0x2803
   25d8c:	a901      	add	r1, sp, #4
   25d8e:	f8ad 3006 	strh.w	r3, [sp, #6]
   25d92:	f7fe ff69 	bl	24c68 <bt_uuid_cmp>
   25d96:	2800      	cmp	r0, #0
   25d98:	d1ef      	bne.n	25d7a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25d9a:	68e3      	ldr	r3, [r4, #12]
   25d9c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   25d9e:	2800      	cmp	r0, #0
   25da0:	d1ec      	bne.n	25d7c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   25da2:	4620      	mov	r0, r4
   25da4:	f7f5 f812 	bl	1adcc <bt_gatt_attr_get_handle>
   25da8:	3001      	adds	r0, #1
   25daa:	b280      	uxth	r0, r0
	return handle;
   25dac:	e7e6      	b.n	25d7c <bt_gatt_attr_value_handle+0x8>

00025dae <bt_gatt_attr_read_chrc>:
{
   25dae:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25db0:	68cf      	ldr	r7, [r1, #12]
{
   25db2:	b087      	sub	sp, #28
   25db4:	4608      	mov	r0, r1
   25db6:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   25db8:	79bb      	ldrb	r3, [r7, #6]
   25dba:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25dbe:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   25dc2:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25dc4:	f7ff ffd6 	bl	25d74 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25dc8:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25dca:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25dce:	780b      	ldrb	r3, [r1, #0]
   25dd0:	b99b      	cbnz	r3, 25dfa <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25dd2:	884b      	ldrh	r3, [r1, #2]
   25dd4:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   25dd8:	2105      	movs	r1, #5
	if (offset > value_len) {
   25dda:	42b1      	cmp	r1, r6
   25ddc:	d315      	bcc.n	25e0a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   25dde:	1b89      	subs	r1, r1, r6
   25de0:	42a1      	cmp	r1, r4
   25de2:	bfa8      	it	ge
   25de4:	4621      	movge	r1, r4
   25de6:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   25de8:	ab01      	add	r3, sp, #4
   25dea:	4622      	mov	r2, r4
   25dec:	1999      	adds	r1, r3, r6
   25dee:	4628      	mov	r0, r5
   25df0:	f7fe fe68 	bl	24ac4 <memcpy>
}
   25df4:	4620      	mov	r0, r4
   25df6:	b007      	add	sp, #28
   25df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25dfa:	3101      	adds	r1, #1
   25dfc:	2210      	movs	r2, #16
   25dfe:	f10d 0007 	add.w	r0, sp, #7
   25e02:	f7fe fe5f 	bl	24ac4 <memcpy>
		value_len += 16U;
   25e06:	2113      	movs	r1, #19
   25e08:	e7e7      	b.n	25dda <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25e0a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25e0e:	e7f1      	b.n	25df4 <bt_gatt_attr_read_chrc+0x46>

00025e10 <bt_gatt_foreach_attr>:
{
   25e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25e12:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25e16:	2300      	movs	r3, #0
   25e18:	9300      	str	r3, [sp, #0]
   25e1a:	461a      	mov	r2, r3
   25e1c:	f7f5 f81a 	bl	1ae54 <bt_gatt_foreach_attr_type>
}
   25e20:	b005      	add	sp, #20
   25e22:	f85d fb04 	ldr.w	pc, [sp], #4

00025e26 <db_hash_process>:
	db_hash_gen(true);
   25e26:	2001      	movs	r0, #1
   25e28:	f7f5 b882 	b.w	1af30 <db_hash_gen>

00025e2c <bt_gatt_check_perm>:
{
   25e2c:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   25e2e:	07d4      	lsls	r4, r2, #31
{
   25e30:	4605      	mov	r5, r0
   25e32:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   25e34:	d504      	bpl.n	25e40 <bt_gatt_check_perm+0x14>
   25e36:	f010 0f15 	tst.w	r0, #21
   25e3a:	d01e      	beq.n	25e7a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25e3c:	684b      	ldr	r3, [r1, #4]
   25e3e:	b1e3      	cbz	r3, 25e7a <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25e40:	0793      	lsls	r3, r2, #30
   25e42:	d504      	bpl.n	25e4e <bt_gatt_check_perm+0x22>
   25e44:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   25e48:	d019      	beq.n	25e7e <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25e4a:	688b      	ldr	r3, [r1, #8]
   25e4c:	b1bb      	cbz	r3, 25e7e <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   25e4e:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25e52:	f014 0f30 	tst.w	r4, #48	; 0x30
   25e56:	d103      	bne.n	25e60 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   25e58:	f014 000c 	ands.w	r0, r4, #12
   25e5c:	d107      	bne.n	25e6e <bt_gatt_check_perm+0x42>
}
   25e5e:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25e60:	4628      	mov	r0, r5
   25e62:	f7ff f9a9 	bl	251b8 <bt_conn_get_security>
   25e66:	2802      	cmp	r0, #2
   25e68:	d8f6      	bhi.n	25e58 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   25e6a:	2005      	movs	r0, #5
   25e6c:	e7f7      	b.n	25e5e <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   25e6e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   25e70:	2b00      	cmp	r3, #0
   25e72:	bf14      	ite	ne
   25e74:	2000      	movne	r0, #0
   25e76:	200f      	moveq	r0, #15
   25e78:	e7f1      	b.n	25e5e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25e7a:	2002      	movs	r0, #2
   25e7c:	e7ef      	b.n	25e5e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25e7e:	2003      	movs	r0, #3
   25e80:	e7ed      	b.n	25e5e <bt_gatt_check_perm+0x32>

00025e82 <bt_gatt_change_aware>:
{
   25e82:	b510      	push	{r4, lr}
   25e84:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   25e86:	f7f4 fca5 	bl	1a7d4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25e8a:	4603      	mov	r3, r0
   25e8c:	b910      	cbnz	r0, 25e94 <bt_gatt_change_aware+0x12>
		return true;
   25e8e:	2401      	movs	r4, #1
}
   25e90:	4620      	mov	r0, r4
   25e92:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25e94:	7a02      	ldrb	r2, [r0, #8]
   25e96:	07d2      	lsls	r2, r2, #31
   25e98:	d5f9      	bpl.n	25e8e <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25e9a:	f3bf 8f5b 	dmb	ish
   25e9e:	68d9      	ldr	r1, [r3, #12]
   25ea0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25ea4:	f011 0101 	ands.w	r1, r1, #1
   25ea8:	f100 000c 	add.w	r0, r0, #12
   25eac:	d1ef      	bne.n	25e8e <bt_gatt_change_aware+0xc>
	if (!req) {
   25eae:	2c00      	cmp	r4, #0
   25eb0:	d0ee      	beq.n	25e90 <bt_gatt_change_aware+0xe>
   25eb2:	f3bf 8f5b 	dmb	ish
   25eb6:	68db      	ldr	r3, [r3, #12]
   25eb8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25ebc:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   25ec0:	079b      	lsls	r3, r3, #30
   25ec2:	d50e      	bpl.n	25ee2 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25ec4:	f3bf 8f5b 	dmb	ish
   25ec8:	e850 3f00 	ldrex	r3, [r0]
   25ecc:	f023 0302 	bic.w	r3, r3, #2
   25ed0:	e840 3200 	strex	r2, r3, [r0]
   25ed4:	2a00      	cmp	r2, #0
   25ed6:	d1f7      	bne.n	25ec8 <bt_gatt_change_aware+0x46>
   25ed8:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   25edc:	f7ff fe78 	bl	25bd0 <atomic_set_bit>
	return false;
   25ee0:	e7d6      	b.n	25e90 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   25ee2:	2101      	movs	r1, #1
   25ee4:	e7fa      	b.n	25edc <bt_gatt_change_aware+0x5a>

00025ee6 <smp_pairing_rsp>:
}
   25ee6:	2007      	movs	r0, #7
   25ee8:	4770      	bx	lr

00025eea <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25eea:	2301      	movs	r3, #1
   25eec:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25eee:	f3bf 8f5b 	dmb	ish
   25ef2:	e850 2f00 	ldrex	r2, [r0]
   25ef6:	431a      	orrs	r2, r3
   25ef8:	e840 2100 	strex	r1, r2, [r0]
   25efc:	2900      	cmp	r1, #0
   25efe:	d1f8      	bne.n	25ef2 <atomic_set_bit+0x8>
   25f00:	f3bf 8f5b 	dmb	ish
}
   25f04:	4770      	bx	lr

00025f06 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25f06:	2301      	movs	r3, #1
   25f08:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25f0a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25f0c:	f3bf 8f5b 	dmb	ish
   25f10:	e850 2f00 	ldrex	r2, [r0]
   25f14:	401a      	ands	r2, r3
   25f16:	e840 2100 	strex	r1, r2, [r0]
   25f1a:	2900      	cmp	r1, #0
   25f1c:	d1f8      	bne.n	25f10 <atomic_clear_bit+0xa>
   25f1e:	f3bf 8f5b 	dmb	ish
}
   25f22:	4770      	bx	lr

00025f24 <bt_smp_aes_cmac>:
{
   25f24:	b570      	push	{r4, r5, r6, lr}
   25f26:	b0c2      	sub	sp, #264	; 0x108
   25f28:	460d      	mov	r5, r1
   25f2a:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25f2c:	4601      	mov	r1, r0
   25f2e:	aa16      	add	r2, sp, #88	; 0x58
   25f30:	4668      	mov	r0, sp
{
   25f32:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25f34:	f7fe fc39 	bl	247aa <tc_cmac_setup>
   25f38:	b150      	cbz	r0, 25f50 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   25f3a:	4632      	mov	r2, r6
   25f3c:	4629      	mov	r1, r5
   25f3e:	4668      	mov	r0, sp
   25f40:	f7fe fc5e 	bl	24800 <tc_cmac_update>
   25f44:	b120      	cbz	r0, 25f50 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   25f46:	4669      	mov	r1, sp
   25f48:	4620      	mov	r0, r4
   25f4a:	f7fe fcc5 	bl	248d8 <tc_cmac_final>
   25f4e:	b918      	cbnz	r0, 25f58 <bt_smp_aes_cmac+0x34>
		return -EIO;
   25f50:	f06f 0004 	mvn.w	r0, #4
}
   25f54:	b042      	add	sp, #264	; 0x108
   25f56:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   25f58:	2000      	movs	r0, #0
   25f5a:	e7fb      	b.n	25f54 <bt_smp_aes_cmac+0x30>

00025f5c <bt_smp_disconnected>:
{
   25f5c:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   25f5e:	6803      	ldr	r3, [r0, #0]
   25f60:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
{
   25f64:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   25f66:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   25f6a:	f7fc f821 	bl	21fb0 <k_delayed_work_cancel>
	if (keys) {
   25f6e:	b13d      	cbz	r5, 25f80 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   25f70:	89eb      	ldrh	r3, [r5, #14]
   25f72:	b113      	cbz	r3, 25f7a <bt_smp_disconnected+0x1e>
   25f74:	7b6b      	ldrb	r3, [r5, #13]
   25f76:	079b      	lsls	r3, r3, #30
   25f78:	d502      	bpl.n	25f80 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   25f7a:	4628      	mov	r0, r5
   25f7c:	f7f6 ff2e 	bl	1cddc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   25f80:	4620      	mov	r0, r4
   25f82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   25f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   25f8a:	2100      	movs	r1, #0
   25f8c:	f7fe bdc5 	b.w	24b1a <memset>

00025f90 <smp_security_request>:
   25f90:	2007      	movs	r0, #7
   25f92:	4770      	bx	lr

00025f94 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   25f94:	b510      	push	{r4, lr}
   25f96:	1e43      	subs	r3, r0, #1
   25f98:	f100 0210 	add.w	r2, r0, #16
   25f9c:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   25f9e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   25fa2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   25fa6:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   25fa8:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   25faa:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   25fac:	d1f7      	bne.n	25f9e <sys_mem_swap.constprop.0+0xa>
	}
}
   25fae:	bd10      	pop	{r4, pc}

00025fb0 <smp_f6>:
{
   25fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25fb2:	b097      	sub	sp, #92	; 0x5c
   25fb4:	4605      	mov	r5, r0
   25fb6:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   25fb8:	a805      	add	r0, sp, #20
   25fba:	2210      	movs	r2, #16
{
   25fbc:	461c      	mov	r4, r3
   25fbe:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   25fc0:	f7f5 fc08 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   25fc4:	2210      	movs	r2, #16
   25fc6:	4631      	mov	r1, r6
   25fc8:	a809      	add	r0, sp, #36	; 0x24
   25fca:	f7f5 fc03 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   25fce:	4621      	mov	r1, r4
   25fd0:	2210      	movs	r2, #16
   25fd2:	a80d      	add	r0, sp, #52	; 0x34
   25fd4:	f7f5 fbfe 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   25fd8:	991c      	ldr	r1, [sp, #112]	; 0x70
   25fda:	2203      	movs	r2, #3
   25fdc:	a811      	add	r0, sp, #68	; 0x44
   25fde:	f7f5 fbf9 	bl	1b7d4 <sys_memcpy_swap>
	m[51] = a1->type;
   25fe2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   25fe4:	f814 3b01 	ldrb.w	r3, [r4], #1
   25fe8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   25fec:	4621      	mov	r1, r4
   25fee:	2206      	movs	r2, #6
   25ff0:	a812      	add	r0, sp, #72	; 0x48
   25ff2:	f7fe fd67 	bl	24ac4 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   25ff6:	4621      	mov	r1, r4
   25ff8:	2206      	movs	r2, #6
   25ffa:	a812      	add	r0, sp, #72	; 0x48
   25ffc:	f7f5 fbea 	bl	1b7d4 <sys_memcpy_swap>
	m[58] = a2->type;
   26000:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   26002:	f814 3b01 	ldrb.w	r3, [r4], #1
   26006:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2600a:	4621      	mov	r1, r4
   2600c:	2206      	movs	r2, #6
   2600e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   26012:	f7fe fd57 	bl	24ac4 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   26016:	4621      	mov	r1, r4
   26018:	2206      	movs	r2, #6
   2601a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2601e:	f7f5 fbd9 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   26022:	2210      	movs	r2, #16
   26024:	4629      	mov	r1, r5
   26026:	a801      	add	r0, sp, #4
   26028:	f7f5 fbd4 	bl	1b7d4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2602c:	463b      	mov	r3, r7
   2602e:	2241      	movs	r2, #65	; 0x41
   26030:	a905      	add	r1, sp, #20
   26032:	a801      	add	r0, sp, #4
   26034:	f7ff ff76 	bl	25f24 <bt_smp_aes_cmac>
	if (err) {
   26038:	4604      	mov	r4, r0
   2603a:	b910      	cbnz	r0, 26042 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   2603c:	4638      	mov	r0, r7
   2603e:	f7ff ffa9 	bl	25f94 <sys_mem_swap.constprop.0>
}
   26042:	4620      	mov	r0, r4
   26044:	b017      	add	sp, #92	; 0x5c
   26046:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026048 <smp_f4>:
{
   26048:	b5f0      	push	{r4, r5, r6, r7, lr}
   2604a:	b097      	sub	sp, #92	; 0x5c
   2604c:	4614      	mov	r4, r2
   2604e:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   26050:	2220      	movs	r2, #32
   26052:	4601      	mov	r1, r0
   26054:	a805      	add	r0, sp, #20
{
   26056:	461d      	mov	r5, r3
   26058:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2605a:	f7f5 fbbb 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2605e:	2220      	movs	r2, #32
   26060:	4631      	mov	r1, r6
   26062:	a80d      	add	r0, sp, #52	; 0x34
   26064:	f7f5 fbb6 	bl	1b7d4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   26068:	4621      	mov	r1, r4
   2606a:	2210      	movs	r2, #16
   2606c:	a801      	add	r0, sp, #4
	m[64] = z;
   2606e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   26072:	f7f5 fbaf 	bl	1b7d4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   26076:	463b      	mov	r3, r7
   26078:	2241      	movs	r2, #65	; 0x41
   2607a:	a905      	add	r1, sp, #20
   2607c:	a801      	add	r0, sp, #4
   2607e:	f7ff ff51 	bl	25f24 <bt_smp_aes_cmac>
	if (err) {
   26082:	4604      	mov	r4, r0
   26084:	b910      	cbnz	r0, 2608c <smp_f4+0x44>
	sys_mem_swap(res, 16);
   26086:	4638      	mov	r0, r7
   26088:	f7ff ff84 	bl	25f94 <sys_mem_swap.constprop.0>
}
   2608c:	4620      	mov	r0, r4
   2608e:	b017      	add	sp, #92	; 0x5c
   26090:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026092 <smp_signing_info>:
   26092:	2007      	movs	r0, #7
   26094:	4770      	bx	lr

00026096 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26096:	f3bf 8f5b 	dmb	ish
   2609a:	6800      	ldr	r0, [r0, #0]
   2609c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   260a0:	4108      	asrs	r0, r1
}
   260a2:	f000 0001 	and.w	r0, r0, #1
   260a6:	4770      	bx	lr

000260a8 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   260a8:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   260aa:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   260ae:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   260b0:	4628      	mov	r0, r5
   260b2:	2104      	movs	r1, #4
   260b4:	f7ff ffef 	bl	26096 <atomic_test_bit>
   260b8:	b168      	cbz	r0, 260d6 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   260ba:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   260bc:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   260be:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   260c0:	4608      	mov	r0, r1
   260c2:	f7ff f96d 	bl	253a0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   260c6:	4604      	mov	r4, r0
   260c8:	b940      	cbnz	r0, 260dc <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   260ca:	2104      	movs	r1, #4
   260cc:	4628      	mov	r0, r5
   260ce:	f7ff ff0c 	bl	25eea <atomic_set_bit>
}
   260d2:	4620      	mov	r0, r4
   260d4:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   260d6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   260da:	e7ef      	b.n	260bc <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   260dc:	2101      	movs	r1, #1
   260de:	3008      	adds	r0, #8
   260e0:	f7f7 f9d4 	bl	1d48c <net_buf_simple_add>
	hdr->code = op;
   260e4:	7006      	strb	r6, [r0, #0]
	return buf;
   260e6:	e7f4      	b.n	260d2 <smp_create_pdu.isra.0+0x2a>

000260e8 <smp_send_pairing_random>:
{
   260e8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   260ea:	2104      	movs	r1, #4
{
   260ec:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   260ee:	f7ff ffdb 	bl	260a8 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   260f2:	4604      	mov	r4, r0
   260f4:	b178      	cbz	r0, 26116 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   260f6:	2110      	movs	r1, #16
   260f8:	3008      	adds	r0, #8
   260fa:	f7f7 f9c7 	bl	1d48c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   260fe:	2210      	movs	r2, #16
   26100:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   26104:	f7fe fcde 	bl	24ac4 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   26108:	4628      	mov	r0, r5
   2610a:	2200      	movs	r2, #0
   2610c:	4621      	mov	r1, r4
   2610e:	f7f5 fbe7 	bl	1b8e0 <smp_send.isra.0>
	return 0;
   26112:	2000      	movs	r0, #0
}
   26114:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26116:	2008      	movs	r0, #8
   26118:	e7fc      	b.n	26114 <smp_send_pairing_random+0x2c>

0002611a <send_pairing_rsp>:
{
   2611a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2611c:	2102      	movs	r1, #2
{
   2611e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   26120:	f7ff ffc2 	bl	260a8 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   26124:	4604      	mov	r4, r0
   26126:	b178      	cbz	r0, 26148 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   26128:	2106      	movs	r1, #6
   2612a:	3008      	adds	r0, #8
   2612c:	f7f7 f9ae 	bl	1d48c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   26130:	2206      	movs	r2, #6
   26132:	f105 01d1 	add.w	r1, r5, #209	; 0xd1
   26136:	f7fe fcc5 	bl	24ac4 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2613a:	4628      	mov	r0, r5
   2613c:	2200      	movs	r2, #0
   2613e:	4621      	mov	r1, r4
   26140:	f7f5 fbce 	bl	1b8e0 <smp_send.isra.0>
	return 0;
   26144:	2000      	movs	r0, #0
}
   26146:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26148:	2008      	movs	r0, #8
   2614a:	e7fc      	b.n	26146 <send_pairing_rsp+0x2c>

0002614c <smp_dhkey_check>:
{
   2614c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   2614e:	6803      	ldr	r3, [r0, #0]
   26150:	78db      	ldrb	r3, [r3, #3]
   26152:	2b01      	cmp	r3, #1
{
   26154:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   26156:	d115      	bne.n	26184 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   26158:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2615a:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   2615e:	210f      	movs	r1, #15
   26160:	4628      	mov	r0, r5
   26162:	f7ff fed0 	bl	25f06 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   26166:	4631      	mov	r1, r6
   26168:	2210      	movs	r2, #16
   2616a:	f204 1077 	addw	r0, r4, #375	; 0x177
   2616e:	f7fe fca9 	bl	24ac4 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   26172:	2107      	movs	r1, #7
   26174:	4628      	mov	r0, r5
   26176:	f7ff ff8e 	bl	26096 <atomic_test_bit>
   2617a:	b128      	cbz	r0, 26188 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2617c:	2108      	movs	r1, #8
   2617e:	4628      	mov	r0, r5
   26180:	f7ff feb3 	bl	25eea <atomic_set_bit>
}
   26184:	2000      	movs	r0, #0
   26186:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26188:	2109      	movs	r1, #9
   2618a:	4628      	mov	r0, r5
   2618c:	f7ff ff83 	bl	26096 <atomic_test_bit>
   26190:	2800      	cmp	r0, #0
   26192:	d1f3      	bne.n	2617c <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   26194:	4620      	mov	r0, r4
}
   26196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   2619a:	f7f5 bbb9 	b.w	1b910 <compute_and_check_and_send_slave_dhcheck>

0002619e <atomic_test_and_clear_bit>:
{
   2619e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   261a0:	2301      	movs	r3, #1
   261a2:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   261a6:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   261a8:	f3bf 8f5b 	dmb	ish
   261ac:	e850 3f00 	ldrex	r3, [r0]
   261b0:	ea03 0c02 	and.w	ip, r3, r2
   261b4:	e840 ce00 	strex	lr, ip, [r0]
   261b8:	f1be 0f00 	cmp.w	lr, #0
   261bc:	d1f6      	bne.n	261ac <atomic_test_and_clear_bit+0xe>
   261be:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   261c2:	420b      	tst	r3, r1
}
   261c4:	bf14      	ite	ne
   261c6:	2001      	movne	r0, #1
   261c8:	2000      	moveq	r0, #0
   261ca:	f85d fb04 	ldr.w	pc, [sp], #4

000261ce <smp_reset>:
{
   261ce:	b538      	push	{r3, r4, r5, lr}
   261d0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   261d2:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   261d4:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   261d8:	f7fb feea 	bl	21fb0 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   261dc:	2300      	movs	r3, #0
   261de:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(&smp->allowed_cmds, 0);
   261e2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   261e6:	f3bf 8f5b 	dmb	ish
   261ea:	e850 2f00 	ldrex	r2, [r0]
   261ee:	e840 3100 	strex	r1, r3, [r0]
   261f2:	2900      	cmp	r1, #0
   261f4:	d1f9      	bne.n	261ea <smp_reset+0x1c>
   261f6:	f3bf 8f5b 	dmb	ish
   261fa:	f3bf 8f5b 	dmb	ish
   261fe:	34c4      	adds	r4, #196	; 0xc4
   26200:	e854 2f00 	ldrex	r2, [r4]
   26204:	e844 3100 	strex	r1, r3, [r4]
   26208:	2900      	cmp	r1, #0
   2620a:	d1f9      	bne.n	26200 <smp_reset+0x32>
   2620c:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   26210:	7a6b      	ldrb	r3, [r5, #9]
   26212:	7aaa      	ldrb	r2, [r5, #10]
   26214:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   26216:	bf18      	it	ne
   26218:	72ab      	strbne	r3, [r5, #10]
}
   2621a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2621e:	2101      	movs	r1, #1
   26220:	f7ff be63 	b.w	25eea <atomic_set_bit>

00026224 <smp_error>:
{
   26224:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26226:	4606      	mov	r6, r0
   26228:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   2622a:	f7f5 ff47 	bl	1c0bc <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2622e:	2105      	movs	r1, #5
   26230:	4630      	mov	r0, r6
   26232:	f7ff ff39 	bl	260a8 <smp_create_pdu.isra.0>
	if (!buf) {
   26236:	4605      	mov	r5, r0
   26238:	b178      	cbz	r0, 2625a <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   2623a:	2101      	movs	r1, #1
   2623c:	3008      	adds	r0, #8
   2623e:	f7f7 f925 	bl	1d48c <net_buf_simple_add>
	rsp->reason = reason;
   26242:	7004      	strb	r4, [r0, #0]
   26244:	2400      	movs	r4, #0
   26246:	6830      	ldr	r0, [r6, #0]
   26248:	9400      	str	r4, [sp, #0]
   2624a:	4623      	mov	r3, r4
   2624c:	462a      	mov	r2, r5
   2624e:	2106      	movs	r1, #6
   26250:	f7ff f8a9 	bl	253a6 <bt_l2cap_send_cb>
	return 0;
   26254:	4620      	mov	r0, r4
}
   26256:	b002      	add	sp, #8
   26258:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2625a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2625e:	e7fa      	b.n	26256 <smp_error+0x32>

00026260 <smp_c1>:
{
   26260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26264:	b089      	sub	sp, #36	; 0x24
   26266:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2626a:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2626c:	783b      	ldrb	r3, [r7, #0]
{
   2626e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   26270:	f88d 3000 	strb.w	r3, [sp]
{
   26274:	460c      	mov	r4, r1
	p1[1] = ra->type;
   26276:	f898 3000 	ldrb.w	r3, [r8]
   2627a:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2627e:	4611      	mov	r1, r2
   26280:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   26282:	2207      	movs	r2, #7
   26284:	f10d 0002 	add.w	r0, sp, #2
   26288:	f7fe fc1c 	bl	24ac4 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2628c:	2207      	movs	r2, #7
   2628e:	4649      	mov	r1, r9
   26290:	f10d 0009 	add.w	r0, sp, #9
   26294:	f7fe fc16 	bl	24ac4 <memcpy>
	while (len--) {
   26298:	f104 0010 	add.w	r0, r4, #16
   2629c:	4629      	mov	r1, r5
   2629e:	466a      	mov	r2, sp
   262a0:	4284      	cmp	r4, r0
   262a2:	d127      	bne.n	262f4 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   262a4:	462a      	mov	r2, r5
   262a6:	4629      	mov	r1, r5
   262a8:	4630      	mov	r0, r6
   262aa:	f000 fb5e 	bl	2696a <bt_encrypt_le>
	if (err) {
   262ae:	4604      	mov	r4, r0
   262b0:	b9e0      	cbnz	r0, 262ec <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   262b2:	2206      	movs	r2, #6
   262b4:	f108 0101 	add.w	r1, r8, #1
   262b8:	a804      	add	r0, sp, #16
   262ba:	f7fe fc03 	bl	24ac4 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   262be:	2206      	movs	r2, #6
   262c0:	1c79      	adds	r1, r7, #1
   262c2:	f10d 0016 	add.w	r0, sp, #22
   262c6:	f7fe fbfd 	bl	24ac4 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   262ca:	2204      	movs	r2, #4
   262cc:	4621      	mov	r1, r4
   262ce:	a807      	add	r0, sp, #28
   262d0:	f7fe fc23 	bl	24b1a <memset>
	while (len--) {
   262d4:	f105 0010 	add.w	r0, r5, #16
   262d8:	462a      	mov	r2, r5
   262da:	ab04      	add	r3, sp, #16
   262dc:	4282      	cmp	r2, r0
   262de:	d112      	bne.n	26306 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   262e0:	462a      	mov	r2, r5
   262e2:	4629      	mov	r1, r5
   262e4:	4630      	mov	r0, r6
   262e6:	f000 fb40 	bl	2696a <bt_encrypt_le>
   262ea:	4604      	mov	r4, r0
}
   262ec:	4620      	mov	r0, r4
   262ee:	b009      	add	sp, #36	; 0x24
   262f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   262f4:	f814 3b01 	ldrb.w	r3, [r4], #1
   262f8:	f812 cb01 	ldrb.w	ip, [r2], #1
   262fc:	ea83 030c 	eor.w	r3, r3, ip
   26300:	f801 3b01 	strb.w	r3, [r1], #1
   26304:	e7cc      	b.n	262a0 <smp_c1+0x40>
   26306:	f812 1b01 	ldrb.w	r1, [r2], #1
   2630a:	f813 4b01 	ldrb.w	r4, [r3], #1
   2630e:	4061      	eors	r1, r4
   26310:	f802 1c01 	strb.w	r1, [r2, #-1]
   26314:	e7e2      	b.n	262dc <smp_c1+0x7c>

00026316 <legacy_pairing_confirm>:
{
   26316:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26318:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
{
   2631c:	b085      	sub	sp, #20
   2631e:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26320:	2109      	movs	r1, #9
   26322:	4638      	mov	r0, r7
   26324:	f7ff feb7 	bl	26096 <atomic_test_bit>
   26328:	bb90      	cbnz	r0, 26390 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   2632a:	2104      	movs	r1, #4
   2632c:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   26330:	f7ff fddb 	bl	25eea <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26334:	2103      	movs	r1, #3
   26336:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   26338:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2633a:	f7ff feb5 	bl	260a8 <smp_create_pdu.isra.0>
	if (!buf) {
   2633e:	4606      	mov	r6, r0
   26340:	b1c0      	cbz	r0, 26374 <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   26342:	2110      	movs	r1, #16
   26344:	3008      	adds	r0, #8
   26346:	f7f7 f8a1 	bl	1d48c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2634a:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   2634e:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   26350:	9002      	str	r0, [sp, #8]
   26352:	9301      	str	r3, [sp, #4]
   26354:	9400      	str	r4, [sp, #0]
   26356:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   2635a:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   2635e:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   26362:	f205 1007 	addw	r0, r5, #263	; 0x107
   26366:	f7ff ff7b 	bl	26260 <smp_c1>
   2636a:	4604      	mov	r4, r0
   2636c:	b120      	cbz	r0, 26378 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   2636e:	4630      	mov	r0, r6
   26370:	f7f6 ff76 	bl	1d260 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26374:	2008      	movs	r0, #8
   26376:	e009      	b.n	2638c <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   26378:	4602      	mov	r2, r0
   2637a:	4631      	mov	r1, r6
   2637c:	4628      	mov	r0, r5
   2637e:	f7f5 faaf 	bl	1b8e0 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26382:	4621      	mov	r1, r4
   26384:	4638      	mov	r0, r7
   26386:	f7ff fdbe 	bl	25f06 <atomic_clear_bit>
	return 0;
   2638a:	2000      	movs	r0, #0
}
   2638c:	b005      	add	sp, #20
   2638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26390:	2100      	movs	r1, #0
   26392:	4638      	mov	r0, r7
   26394:	f7ff fda9 	bl	25eea <atomic_set_bit>
   26398:	e7f7      	b.n	2638a <legacy_pairing_confirm+0x74>

0002639a <smp_pairing_confirm>:
{
   2639a:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2639c:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2639e:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
   263a2:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   263a4:	210a      	movs	r1, #10
   263a6:	4628      	mov	r0, r5
   263a8:	f7ff fdad 	bl	25f06 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   263ac:	4631      	mov	r1, r6
   263ae:	2210      	movs	r2, #16
   263b0:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   263b4:	f7fe fb86 	bl	24ac4 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   263b8:	2105      	movs	r1, #5
   263ba:	4628      	mov	r0, r5
   263bc:	f7ff fe6b 	bl	26096 <atomic_test_bit>
   263c0:	b920      	cbnz	r0, 263cc <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   263c2:	4620      	mov	r0, r4
}
   263c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   263c8:	f7ff bfa5 	b.w	26316 <legacy_pairing_confirm>
	switch (smp->method) {
   263cc:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   263d0:	2b01      	cmp	r3, #1
   263d2:	d00b      	beq.n	263ec <smp_pairing_confirm+0x52>
   263d4:	2b02      	cmp	r3, #2
   263d6:	d115      	bne.n	26404 <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   263d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   263dc:	2104      	movs	r1, #4
   263de:	f7ff fd84 	bl	25eea <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   263e2:	4620      	mov	r0, r4
}
   263e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   263e8:	f7f5 bb98 	b.w	1bb1c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   263ec:	2109      	movs	r1, #9
   263ee:	4628      	mov	r0, r5
   263f0:	f7ff fe51 	bl	26096 <atomic_test_bit>
   263f4:	2800      	cmp	r0, #0
   263f6:	d0ef      	beq.n	263d8 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   263f8:	4628      	mov	r0, r5
   263fa:	2100      	movs	r1, #0
   263fc:	f7ff fd75 	bl	25eea <atomic_set_bit>
			return 0;
   26400:	2000      	movs	r0, #0
}
   26402:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   26404:	2008      	movs	r0, #8
   26406:	e7fc      	b.n	26402 <smp_pairing_confirm+0x68>

00026408 <bt_smp_request_ltk>:
{
   26408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2640c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   2640e:	e9cd 2300 	strd	r2, r3, [sp]
   26412:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   26414:	f7f5 fa22 	bl	1b85c <smp_chan_get>
	if (!smp) {
   26418:	4605      	mov	r5, r0
   2641a:	2800      	cmp	r0, #0
   2641c:	f000 809d 	beq.w	2655a <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   26420:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   26424:	f1b9 0f00 	cmp.w	r9, #0
   26428:	d12d      	bne.n	26486 <bt_smp_request_ltk+0x7e>
   2642a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2642e:	4313      	orrs	r3, r2
   26430:	d129      	bne.n	26486 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26432:	f100 08c4 	add.w	r8, r0, #196	; 0xc4
   26436:	2103      	movs	r1, #3
   26438:	4640      	mov	r0, r8
   2643a:	f7ff fe2c 	bl	26096 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2643e:	b310      	cbz	r0, 26486 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   26440:	2101      	movs	r1, #1
   26442:	4640      	mov	r0, r8
   26444:	f7ff fe27 	bl	26096 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26448:	4606      	mov	r6, r0
   2644a:	b1e0      	cbz	r0, 26486 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2644c:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   26450:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
   26454:	429c      	cmp	r4, r3
   26456:	bf28      	it	cs
   26458:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2645a:	4622      	mov	r2, r4
   2645c:	f205 1107 	addw	r1, r5, #263	; 0x107
   26460:	4638      	mov	r0, r7
   26462:	f7fe fb2f 	bl	24ac4 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26466:	2c0f      	cmp	r4, #15
   26468:	d805      	bhi.n	26476 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   2646a:	f1c4 0210 	rsb	r2, r4, #16
   2646e:	4649      	mov	r1, r9
   26470:	1938      	adds	r0, r7, r4
   26472:	f7fe fb52 	bl	24b1a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26476:	2101      	movs	r1, #1
   26478:	4640      	mov	r0, r8
   2647a:	f7ff fd36 	bl	25eea <atomic_set_bit>
}
   2647e:	4630      	mov	r0, r6
   26480:	b003      	add	sp, #12
   26482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   26486:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2648a:	b983      	cbnz	r3, 264ae <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   2648c:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   26490:	7a21      	ldrb	r1, [r4, #8]
   26492:	4632      	mov	r2, r6
   26494:	2020      	movs	r0, #32
   26496:	f7f6 fc41 	bl	1cd1c <bt_keys_find>
   2649a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2649e:	b930      	cbnz	r0, 264ae <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   264a0:	7a21      	ldrb	r1, [r4, #8]
   264a2:	4632      	mov	r2, r6
   264a4:	2001      	movs	r0, #1
   264a6:	f7f6 fc39 	bl	1cd1c <bt_keys_find>
   264aa:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   264ae:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   264b2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   264b6:	b9ce      	cbnz	r6, 264ec <bt_smp_request_ltk+0xe4>
   264b8:	e9dd 2300 	ldrd	r2, r3, [sp]
   264bc:	4313      	orrs	r3, r2
   264be:	d115      	bne.n	264ec <bt_smp_request_ltk+0xe4>
   264c0:	2800      	cmp	r0, #0
   264c2:	d03c      	beq.n	2653e <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   264c4:	89c3      	ldrh	r3, [r0, #14]
   264c6:	069a      	lsls	r2, r3, #26
   264c8:	d511      	bpl.n	264ee <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   264ca:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   264cc:	f100 011a 	add.w	r1, r0, #26
   264d0:	4622      	mov	r2, r4
   264d2:	4638      	mov	r0, r7
   264d4:	f7fe faf6 	bl	24ac4 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   264d8:	2c0f      	cmp	r4, #15
   264da:	d805      	bhi.n	264e8 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   264dc:	f1c4 0210 	rsb	r2, r4, #16
   264e0:	4631      	mov	r1, r6
   264e2:	1938      	adds	r0, r7, r4
   264e4:	f7fe fb19 	bl	24b1a <memset>
		return true;
   264e8:	2601      	movs	r6, #1
   264ea:	e7c8      	b.n	2647e <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   264ec:	b338      	cbz	r0, 2653e <bt_smp_request_ltk+0x136>
   264ee:	89c3      	ldrh	r3, [r0, #14]
   264f0:	07db      	lsls	r3, r3, #31
   264f2:	d524      	bpl.n	2653e <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   264f4:	2208      	movs	r2, #8
   264f6:	4669      	mov	r1, sp
   264f8:	3040      	adds	r0, #64	; 0x40
   264fa:	f7fe fad3 	bl	24aa4 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   264fe:	b9f0      	cbnz	r0, 2653e <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   26500:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   26504:	2202      	movs	r2, #2
   26506:	a90a      	add	r1, sp, #40	; 0x28
   26508:	3048      	adds	r0, #72	; 0x48
   2650a:	f7fe facb 	bl	24aa4 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2650e:	4606      	mov	r6, r0
   26510:	b9a8      	cbnz	r0, 2653e <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   26512:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   26516:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   26518:	4638      	mov	r0, r7
   2651a:	4622      	mov	r2, r4
   2651c:	314a      	adds	r1, #74	; 0x4a
   2651e:	f7fe fad1 	bl	24ac4 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26522:	2c0f      	cmp	r4, #15
   26524:	d805      	bhi.n	26532 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   26526:	f1c4 0210 	rsb	r2, r4, #16
   2652a:	4631      	mov	r1, r6
   2652c:	1938      	adds	r0, r7, r4
   2652e:	f7fe faf4 	bl	24b1a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26532:	2101      	movs	r1, #1
   26534:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   26538:	f7ff fcd7 	bl	25eea <atomic_set_bit>
		return true;
   2653c:	e7d4      	b.n	264e8 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2653e:	210e      	movs	r1, #14
   26540:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   26544:	f7ff fda7 	bl	26096 <atomic_test_bit>
   26548:	b120      	cbz	r0, 26554 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2654a:	2202      	movs	r2, #2
   2654c:	2106      	movs	r1, #6
   2654e:	4620      	mov	r0, r4
   26550:	f7f2 f80e 	bl	18570 <bt_conn_security_changed>
	smp_reset(smp);
   26554:	4628      	mov	r0, r5
   26556:	f7ff fe3a 	bl	261ce <smp_reset>
	return false;
   2655a:	2600      	movs	r6, #0
   2655c:	e78f      	b.n	2647e <bt_smp_request_ltk+0x76>

0002655e <bt_smp_sign>:
   2655e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   26562:	4770      	bx	lr

00026564 <bt_smp_auth_pairing_confirm>:
{
   26564:	b538      	push	{r3, r4, r5, lr}
	smp = smp_chan_get(conn);
   26566:	f7f5 f979 	bl	1b85c <smp_chan_get>
	if (!smp) {
   2656a:	4604      	mov	r4, r0
   2656c:	b910      	cbnz	r0, 26574 <bt_smp_auth_pairing_confirm+0x10>
		return -EINVAL;
   2656e:	f06f 0015 	mvn.w	r0, #21
}
   26572:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   26574:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   26578:	2109      	movs	r1, #9
   2657a:	4628      	mov	r0, r5
   2657c:	f7ff fe0f 	bl	2619e <atomic_test_and_clear_bit>
   26580:	2800      	cmp	r0, #0
   26582:	d0f4      	beq.n	2656e <bt_smp_auth_pairing_confirm+0xa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   26584:	2105      	movs	r1, #5
   26586:	4628      	mov	r0, r5
   26588:	f7ff fd85 	bl	26096 <atomic_test_bit>
   2658c:	4603      	mov	r3, r0
   2658e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   26592:	b933      	cbnz	r3, 265a2 <bt_smp_auth_pairing_confirm+0x3e>
		atomic_set_bit(&smp->allowed_cmds,
   26594:	2103      	movs	r1, #3
   26596:	f7ff fca8 	bl	25eea <atomic_set_bit>
		return send_pairing_rsp(smp);
   2659a:	4620      	mov	r0, r4
   2659c:	f7ff fdbd 	bl	2611a <send_pairing_rsp>
   265a0:	e7e7      	b.n	26572 <bt_smp_auth_pairing_confirm+0xe>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   265a2:	210c      	movs	r1, #12
   265a4:	f7ff fca1 	bl	25eea <atomic_set_bit>
	if (send_pairing_rsp(smp)) {
   265a8:	4620      	mov	r0, r4
   265aa:	f7ff fdb6 	bl	2611a <send_pairing_rsp>
		return -EIO;
   265ae:	2800      	cmp	r0, #0
   265b0:	bf0c      	ite	eq
   265b2:	2000      	moveq	r0, #0
   265b4:	f06f 0004 	mvnne.w	r0, #4
   265b8:	e7db      	b.n	26572 <bt_smp_auth_pairing_confirm+0xe>

000265ba <id_add>:
	bt_id_add(keys);
   265ba:	f7f0 bfad 	b.w	17518 <bt_id_add>

000265be <bt_keys_get_type>:
{
   265be:	b570      	push	{r4, r5, r6, lr}
   265c0:	4604      	mov	r4, r0
   265c2:	460d      	mov	r5, r1
   265c4:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   265c6:	f7f6 fba9 	bl	1cd1c <bt_keys_find>
	if (keys) {
   265ca:	b938      	cbnz	r0, 265dc <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   265cc:	4631      	mov	r1, r6
   265ce:	4628      	mov	r0, r5
   265d0:	f7f6 fb64 	bl	1cc9c <bt_keys_get_addr>
	if (!keys) {
   265d4:	b110      	cbz	r0, 265dc <bt_keys_get_type+0x1e>
	keys->keys |= type;
   265d6:	89c3      	ldrh	r3, [r0, #14]
   265d8:	431c      	orrs	r4, r3
   265da:	81c4      	strh	r4, [r0, #14]
}
   265dc:	bd70      	pop	{r4, r5, r6, pc}

000265de <bt_keys_add_type>:
	keys->keys |= type;
   265de:	89c3      	ldrh	r3, [r0, #14]
   265e0:	4319      	orrs	r1, r3
   265e2:	81c1      	strh	r1, [r0, #14]
}
   265e4:	4770      	bx	lr

000265e6 <fixed_data_unref>:
}
   265e6:	4770      	bx	lr

000265e8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   265e8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   265ea:	6849      	ldr	r1, [r1, #4]
   265ec:	6809      	ldr	r1, [r1, #0]
   265ee:	f7f6 bd0b 	b.w	1d008 <net_buf_alloc_len>

000265f2 <net_buf_simple_pull_le16>:
{
   265f2:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   265f4:	6803      	ldr	r3, [r0, #0]
   265f6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   265f8:	2102      	movs	r1, #2
   265fa:	f7f6 ff0d 	bl	1d418 <net_buf_simple_pull>
}
   265fe:	4620      	mov	r0, r4
   26600:	bd10      	pop	{r4, pc}

00026602 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   26602:	6802      	ldr	r2, [r0, #0]
   26604:	6880      	ldr	r0, [r0, #8]
}
   26606:	1a10      	subs	r0, r2, r0
   26608:	4770      	bx	lr

0002660a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2660a:	8883      	ldrh	r3, [r0, #4]
   2660c:	88c2      	ldrh	r2, [r0, #6]
   2660e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   26610:	6803      	ldr	r3, [r0, #0]
   26612:	6880      	ldr	r0, [r0, #8]
   26614:	1a18      	subs	r0, r3, r0
}
   26616:	1a10      	subs	r0, r2, r0
   26618:	4770      	bx	lr

0002661a <net_buf_simple_add_mem>:
{
   2661a:	b538      	push	{r3, r4, r5, lr}
   2661c:	460d      	mov	r5, r1
   2661e:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26620:	4611      	mov	r1, r2
   26622:	f7f6 ff33 	bl	1d48c <net_buf_simple_add>
   26626:	4622      	mov	r2, r4
   26628:	4629      	mov	r1, r5
}
   2662a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2662e:	f7fe ba49 	b.w	24ac4 <memcpy>

00026632 <net_buf_simple_add_u8>:
{
   26632:	b510      	push	{r4, lr}
   26634:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   26636:	2101      	movs	r1, #1
   26638:	f7f6 ff28 	bl	1d48c <net_buf_simple_add>
	*u8 = val;
   2663c:	7004      	strb	r4, [r0, #0]
}
   2663e:	bd10      	pop	{r4, pc}

00026640 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26640:	6843      	ldr	r3, [r0, #4]
   26642:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26644:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   26648:	600b      	str	r3, [r1, #0]
}
   2664a:	2000      	movs	r0, #0
   2664c:	4770      	bx	lr

0002664e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2664e:	6843      	ldr	r3, [r0, #4]
   26650:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   26652:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   26656:	4042      	eors	r2, r0
   26658:	400a      	ands	r2, r1
   2665a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2665c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   26660:	2000      	movs	r0, #0
   26662:	4770      	bx	lr

00026664 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26664:	6843      	ldr	r3, [r0, #4]
   26666:	685b      	ldr	r3, [r3, #4]
}
   26668:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2666a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2666e:	4770      	bx	lr

00026670 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26670:	6843      	ldr	r3, [r0, #4]
   26672:	685b      	ldr	r3, [r3, #4]
}
   26674:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26676:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2667a:	4770      	bx	lr

0002667c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2667c:	6843      	ldr	r3, [r0, #4]
   2667e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26680:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   26684:	404b      	eors	r3, r1
    p_reg->OUT = value;
   26686:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2668a:	2000      	movs	r0, #0
   2668c:	4770      	bx	lr

0002668e <nrf_gpio_cfg_sense_set>:
{
   2668e:	b513      	push	{r0, r1, r4, lr}
   26690:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26692:	a801      	add	r0, sp, #4
{
   26694:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26696:	f7f6 ff5d 	bl	1d554 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2669a:	9b01      	ldr	r3, [sp, #4]
   2669c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   266a0:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   266a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   266a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   266ac:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   266b0:	b002      	add	sp, #8
   266b2:	bd10      	pop	{r4, pc}

000266b4 <any_other_channel_is_active>:
{
   266b4:	b530      	push	{r4, r5, lr}
   266b6:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   266b8:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
   266ba:	b2da      	uxtb	r2, r3
   266bc:	4282      	cmp	r2, r0
   266be:	d007      	beq.n	266d0 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
   266c0:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
   266c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   266c8:	b112      	cbz	r2, 266d0 <any_other_channel_is_active+0x1c>
   266ca:	898d      	ldrh	r5, [r1, #12]
   266cc:	4295      	cmp	r5, r2
   266ce:	d804      	bhi.n	266da <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   266d0:	3301      	adds	r3, #1
   266d2:	2b04      	cmp	r3, #4
   266d4:	d1f1      	bne.n	266ba <any_other_channel_is_active+0x6>
	return false;
   266d6:	2000      	movs	r0, #0
}
   266d8:	bd30      	pop	{r4, r5, pc}
			return true;
   266da:	2001      	movs	r0, #1
   266dc:	e7fc      	b.n	266d8 <any_other_channel_is_active+0x24>

000266de <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   266de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   266e2:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   266e4:	6883      	ldr	r3, [r0, #8]
{
   266e6:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   266e8:	695b      	ldr	r3, [r3, #20]
   266ea:	4669      	mov	r1, sp
{
   266ec:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   266ee:	aa01      	add	r2, sp, #4
   266f0:	4798      	blx	r3

	while (layout_size--) {
   266f2:	e9dd 1000 	ldrd	r1, r0, [sp]
   266f6:	2300      	movs	r3, #0
   266f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	off_t end = 0;
   266fc:	461d      	mov	r5, r3
	off_t group_offs = 0;
   266fe:	469e      	mov	lr, r3
	size_t page_count = 0;
   26700:	469c      	mov	ip, r3
	while (layout_size--) {
   26702:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   26706:	d102      	bne.n	2670e <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   26708:	f06f 0015 	mvn.w	r0, #21
   2670c:	e018      	b.n	26740 <flash_get_page_info+0x62>
		if (use_addr) {
   2670e:	680a      	ldr	r2, [r1, #0]
   26710:	b1cf      	cbz	r7, 26746 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   26712:	6848      	ldr	r0, [r1, #4]
   26714:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   26718:	42a5      	cmp	r5, r4
   2671a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2671e:	dd17      	ble.n	26750 <flash_get_page_info+0x72>
   26720:	b103      	cbz	r3, 26724 <flash_get_page_info+0x46>
   26722:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   26724:	9b00      	ldr	r3, [sp, #0]
   26726:	685b      	ldr	r3, [r3, #4]
   26728:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   2672a:	b177      	cbz	r7, 2674a <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   2672c:	eba4 040e 	sub.w	r4, r4, lr
   26730:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   26734:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   26738:	4464      	add	r4, ip
			info->start_offset = group_offs +
   2673a:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   2673c:	60b4      	str	r4, [r6, #8]
			return 0;
   2673e:	2000      	movs	r0, #0
}
   26740:	b002      	add	sp, #8
   26742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   26746:	4415      	add	r5, r2
   26748:	e7e6      	b.n	26718 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   2674a:	eba4 040c 	sub.w	r4, r4, ip
   2674e:	e7f1      	b.n	26734 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   26750:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   26752:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   26754:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   26758:	3108      	adds	r1, #8
   2675a:	2301      	movs	r3, #1
   2675c:	e7d1      	b.n	26702 <flash_get_page_info+0x24>

0002675e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2675e:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   26760:	2201      	movs	r2, #1
   26762:	f7ff bfbc 	b.w	266de <flash_get_page_info>

00026766 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   26766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2676a:	6883      	ldr	r3, [r0, #8]
{
   2676c:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2676e:	695b      	ldr	r3, [r3, #20]
{
   26770:	4688      	mov	r8, r1
   26772:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   26774:	a901      	add	r1, sp, #4
   26776:	aa02      	add	r2, sp, #8
   26778:	4798      	blx	r3
	off_t off = 0;
   2677a:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2677c:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2677e:	4625      	mov	r5, r4
   26780:	9b02      	ldr	r3, [sp, #8]
   26782:	42ab      	cmp	r3, r5
   26784:	d802      	bhi.n	2678c <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   26786:	b006      	add	sp, #24
   26788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2678c:	9f01      	ldr	r7, [sp, #4]
   2678e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   26792:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   26794:	687b      	ldr	r3, [r7, #4]
   26796:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   26798:	683a      	ldr	r2, [r7, #0]
   2679a:	42b2      	cmp	r2, r6
   2679c:	eb0a 0306 	add.w	r3, sl, r6
   267a0:	d802      	bhi.n	267a8 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   267a2:	3501      	adds	r5, #1
   267a4:	469a      	mov	sl, r3
   267a6:	e7eb      	b.n	26780 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   267a8:	4649      	mov	r1, r9
   267aa:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   267ac:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   267ae:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   267b0:	47c0      	blx	r8
   267b2:	2800      	cmp	r0, #0
   267b4:	d0e7      	beq.n	26786 <flash_page_foreach+0x20>
			off += page_info.size;
   267b6:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   267b8:	3601      	adds	r6, #1
			off += page_info.size;
   267ba:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   267bc:	e7ec      	b.n	26798 <flash_page_foreach+0x32>

000267be <sdc_flash_write_protection_set>:
}
   267be:	2000      	movs	r0, #0
   267c0:	4770      	bx	lr

000267c2 <is_addr_valid>:
{
   267c2:	b538      	push	{r3, r4, r5, lr}
	if ((addr < 0) ||
   267c4:	1e04      	subs	r4, r0, #0
{
   267c6:	460d      	mov	r5, r1
	if ((addr < 0) ||
   267c8:	da01      	bge.n	267ce <is_addr_valid+0xc>
		return false;
   267ca:	2000      	movs	r0, #0
}
   267cc:	bd38      	pop	{r3, r4, r5, pc}
	    (len > nrfx_nvmc_flash_size_get()) ||
   267ce:	f000 f921 	bl	26a14 <nrfx_nvmc_flash_size_get>
	if ((addr < 0) ||
   267d2:	42a8      	cmp	r0, r5
   267d4:	d3f9      	bcc.n	267ca <is_addr_valid+0x8>
	    (addr >  nrfx_nvmc_flash_size_get() - len)) {
   267d6:	f000 f91d 	bl	26a14 <nrfx_nvmc_flash_size_get>
   267da:	1b40      	subs	r0, r0, r5
	    (len > nrfx_nvmc_flash_size_get()) ||
   267dc:	42a0      	cmp	r0, r4
   267de:	bf34      	ite	cc
   267e0:	2000      	movcc	r0, #0
   267e2:	2001      	movcs	r0, #1
   267e4:	e7f2      	b.n	267cc <is_addr_valid+0xa>

000267e6 <flash_op_execute_with_lock>:
{
   267e6:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   267e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   267ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   267f0:	f7f8 f95c 	bl	1eaac <multithreading_lock_acquire>
	if (!err) {
   267f4:	4604      	mov	r4, r0
   267f6:	b920      	cbnz	r0, 26802 <flash_op_execute_with_lock+0x1c>
		err = flash_op_execute();
   267f8:	f7f7 fa24 	bl	1dc44 <flash_op_execute>
   267fc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   267fe:	f7f8 f95d 	bl	1eabc <multithreading_lock_release>
}
   26802:	4620      	mov	r0, r4
   26804:	bd10      	pop	{r4, pc}

00026806 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   26806:	6843      	ldr	r3, [r0, #4]
   26808:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   2680a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2680e:	05d2      	lsls	r2, r2, #23
   26810:	d518      	bpl.n	26844 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26812:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   26816:	b1aa      	cbz	r2, 26844 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   26818:	f04f 0140 	mov.w	r1, #64	; 0x40
   2681c:	f3ef 8211 	mrs	r2, BASEPRI
   26820:	f381 8811 	msr	BASEPRI, r1
   26824:	f3bf 8f6f 	isb	sy
   26828:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2682c:	b131      	cbz	r1, 2683c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2682e:	2100      	movs	r1, #0
   26830:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   26834:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26838:	2101      	movs	r1, #1
   2683a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2683c:	f382 8811 	msr	BASEPRI, r2
   26840:	f3bf 8f6f 	isb	sy
}
   26844:	4770      	bx	lr

00026846 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   26846:	68c2      	ldr	r2, [r0, #12]
{
   26848:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2684a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2684e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26852:	2000      	movs	r0, #0
   26854:	4770      	bx	lr

00026856 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26856:	6843      	ldr	r3, [r0, #4]
   26858:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2685a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2685e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26862:	4770      	bx	lr

00026864 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   26864:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   26866:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26868:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2686c:	b938      	cbnz	r0, 2687e <is_tx_ready+0x1a>
   2686e:	7992      	ldrb	r2, [r2, #6]
   26870:	b932      	cbnz	r2, 26880 <is_tx_ready+0x1c>
   26872:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   26876:	3800      	subs	r0, #0
   26878:	bf18      	it	ne
   2687a:	2001      	movne	r0, #1
   2687c:	4770      	bx	lr
   2687e:	2001      	movs	r0, #1
}
   26880:	4770      	bx	lr

00026882 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26882:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   26884:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   26886:	681b      	ldr	r3, [r3, #0]
   26888:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2688c:	b148      	cbz	r0, 268a2 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2688e:	7b52      	ldrb	r2, [r2, #13]
   26890:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26892:	2000      	movs	r0, #0
   26894:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26898:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2689c:	2201      	movs	r2, #1
   2689e:	601a      	str	r2, [r3, #0]
	return 0;
   268a0:	4770      	bx	lr
		return -1;
   268a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   268a6:	4770      	bx	lr

000268a8 <rng_driver_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   268a8:	07db      	lsls	r3, r3, #31
{
   268aa:	b570      	push	{r4, r5, r6, lr}
   268ac:	460e      	mov	r6, r1
   268ae:	4615      	mov	r5, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   268b0:	d40f      	bmi.n	268d2 <rng_driver_get_entropy_isr+0x2a>
		errcode = MULTITHREADING_LOCK_ACQUIRE_NO_WAIT();
   268b2:	2000      	movs	r0, #0
   268b4:	2100      	movs	r1, #0
   268b6:	f7f8 f8f9 	bl	1eaac <multithreading_lock_acquire>
		if (!errcode) {
   268ba:	4604      	mov	r4, r0
   268bc:	b938      	cbnz	r0, 268ce <rng_driver_get_entropy_isr+0x26>
			errcode = sdc_soc_rand_vector_poll(buf, len);
   268be:	4629      	mov	r1, r5
   268c0:	4630      	mov	r0, r6
   268c2:	f7e8 fbbe 	bl	f042 <sdc_soc_rand_vector_poll>
   268c6:	4604      	mov	r4, r0
			MULTITHREADING_LOCK_RELEASE();
   268c8:	f7f8 f8f8 	bl	1eabc <multithreading_lock_release>
	if (!errcode) {
   268cc:	b184      	cbz	r4, 268f0 <rng_driver_get_entropy_isr+0x48>
}
   268ce:	4620      	mov	r0, r4
   268d0:	bd70      	pop	{r4, r5, r6, pc}
		errcode = MULTITHREADING_LOCK_ACQUIRE_FOREVER_WAIT();
   268d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   268d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   268da:	f7f8 f8e7 	bl	1eaac <multithreading_lock_acquire>
		if (!errcode) {
   268de:	4604      	mov	r4, r0
   268e0:	2800      	cmp	r0, #0
   268e2:	d1f4      	bne.n	268ce <rng_driver_get_entropy_isr+0x26>
			sdc_soc_rand_vector_get(buf, len);
   268e4:	4629      	mov	r1, r5
   268e6:	4630      	mov	r0, r6
   268e8:	f7e8 fb92 	bl	f010 <sdc_soc_rand_vector_get>
			MULTITHREADING_LOCK_RELEASE();
   268ec:	f7f8 f8e6 	bl	1eabc <multithreading_lock_release>
		return len;
   268f0:	462c      	mov	r4, r5
   268f2:	e7ec      	b.n	268ce <rng_driver_get_entropy_isr+0x26>

000268f4 <rng_driver_get_entropy>:
{
   268f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268f8:	460e      	mov	r6, r1
   268fa:	4614      	mov	r4, r2
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);
   268fc:	f7f7 fd4a 	bl	1e394 <rng_driver_data_get>
   26900:	4607      	mov	r7, r0
	while (bytes_left > 0) {
   26902:	b1c4      	cbz	r4, 26936 <rng_driver_get_entropy+0x42>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   26904:	fa1f f884 	uxth.w	r8, r4
			int errcode = MULTITHREADING_LOCK_ACQUIRE();
   26908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2690c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26910:	f7f8 f8cc 	bl	1eaac <multithreading_lock_acquire>
			if (errcode) {
   26914:	b980      	cbnz	r0, 26938 <rng_driver_get_entropy+0x44>
			bytes_read = sdc_soc_rand_vector_poll(p_dst, bytes_left);
   26916:	4641      	mov	r1, r8
   26918:	4630      	mov	r0, r6
   2691a:	f7e8 fb92 	bl	f042 <sdc_soc_rand_vector_poll>
   2691e:	4605      	mov	r5, r0
			MULTITHREADING_LOCK_RELEASE();
   26920:	f7f8 f8cc 	bl	1eabc <multithreading_lock_release>
			if (!bytes_read) {
   26924:	b955      	cbnz	r5, 2693c <rng_driver_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   26926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2692a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2692e:	4638      	mov	r0, r7
   26930:	f7fb f89a 	bl	21a68 <z_impl_k_sem_take>
		while (bytes_read == 0) {
   26934:	e7e8      	b.n	26908 <rng_driver_get_entropy+0x14>
	return 0;
   26936:	4620      	mov	r0, r4
}
   26938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_dst += bytes_read;
   2693c:	442e      	add	r6, r5
		bytes_left -= bytes_read;
   2693e:	1b64      	subs	r4, r4, r5
   26940:	e7df      	b.n	26902 <rng_driver_get_entropy+0xe>

00026942 <rng_driver_init>:

static int rng_driver_init(const struct device *dev)
{
   26942:	b508      	push	{r3, lr}
	struct rng_driver_data *rng_dev = rng_driver_data_get(dev);
   26944:	f7f7 fd26 	bl	1e394 <rng_driver_data_get>
	return z_impl_k_sem_init(sem, initial_count, limit);
   26948:	2201      	movs	r2, #1
   2694a:	2100      	movs	r1, #0
   2694c:	f000 f937 	bl	26bbe <z_impl_k_sem_init>

	k_sem_init(&rng_dev->sem_sync, 0, 1);

	IRQ_CONNECT(RNG_IRQn,
   26950:	2200      	movs	r2, #0
   26952:	2105      	movs	r1, #5
   26954:	200d      	movs	r0, #13
   26956:	f7ee fcab 	bl	152b0 <z_arm_irq_priority_set>
		    rng_driver_isr,
		    NULL,
		    0);

	return 0;
}
   2695a:	2000      	movs	r0, #0
   2695c:	bd08      	pop	{r3, pc}

0002695e <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   2695e:	2101      	movs	r1, #1
   26960:	f7f8 b87c 	b.w	1ea5c <dk_set_led>

00026964 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   26964:	2100      	movs	r1, #0
   26966:	f7f8 b879 	b.w	1ea5c <dk_set_led>

0002696a <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2696a:	b530      	push	{r4, r5, lr}
   2696c:	b08d      	sub	sp, #52	; 0x34
   2696e:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   26970:	4601      	mov	r1, r0
   26972:	4668      	mov	r0, sp
{
   26974:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   26976:	f7f8 fcfd 	bl	1f374 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2697a:	4621      	mov	r1, r4
   2697c:	a804      	add	r0, sp, #16
   2697e:	f7f8 fcf9 	bl	1f374 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   26982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26986:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2698a:	f7f8 f88f 	bl	1eaac <multithreading_lock_acquire>

	if (!errcode) {
   2698e:	4604      	mov	r4, r0
   26990:	b960      	cbnz	r0, 269ac <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   26992:	aa08      	add	r2, sp, #32
   26994:	a904      	add	r1, sp, #16
   26996:	4668      	mov	r0, sp
   26998:	f7e8 fb1d 	bl	efd6 <sdc_soc_ecb_block_encrypt>
   2699c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2699e:	f7f8 f88d 	bl	1eabc <multithreading_lock_release>
	}

	if (!errcode) {
   269a2:	b91c      	cbnz	r4, 269ac <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   269a4:	a908      	add	r1, sp, #32
   269a6:	4628      	mov	r0, r5
   269a8:	f7f8 fce4 	bl	1f374 <sys_memcpy_swap.constprop.0>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   269ac:	4620      	mov	r0, r4
   269ae:	b00d      	add	sp, #52	; 0x34
   269b0:	bd30      	pop	{r4, r5, pc}

000269b2 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   269b2:	4668      	mov	r0, sp
   269b4:	f020 0107 	bic.w	r1, r0, #7
   269b8:	468d      	mov	sp, r1
   269ba:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   269bc:	f7db feb8 	bl	2730 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   269c0:	f7ee fca2 	bl	15308 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   269c4:	f7ee fdee 	bl	155a4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   269c8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   269cc:	4685      	mov	sp, r0
   269ce:	4770      	bx	lr

000269d0 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   269d0:	4668      	mov	r0, sp
   269d2:	f020 0107 	bic.w	r1, r0, #7
   269d6:	468d      	mov	sp, r1
   269d8:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   269da:	f7db fe5b 	bl	2694 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   269de:	f7ee fc93 	bl	15308 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   269e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   269e6:	4685      	mov	sp, r0
   269e8:	4770      	bx	lr

000269ea <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   269ea:	4668      	mov	r0, sp
   269ec:	f020 0107 	bic.w	r1, r0, #7
   269f0:	468d      	mov	sp, r1
   269f2:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   269f4:	f7e8 f91d 	bl	ec32 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   269f8:	f7ee fc86 	bl	15308 <_arch_isr_direct_pm>
   269fc:	f7ee fdd2 	bl	155a4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   26a00:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26a04:	4685      	mov	sp, r0
   26a06:	4770      	bx	lr

00026a08 <nrfx_clock_enable>:
}
   26a08:	4770      	bx	lr

00026a0a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   26a0a:	f7dc bac5 	b.w	2f98 <MPSL_IRQ_CLOCK_Handler>

00026a0e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   26a0e:	4700      	bx	r0

00026a10 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   26a10:	f000 b8eb 	b.w	26bea <z_impl_k_busy_wait>

00026a14 <nrfx_nvmc_flash_size_get>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   26a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26a18:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   26a1a:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   26a1c:	4350      	muls	r0, r2
   26a1e:	4770      	bx	lr

00026a20 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   26a20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26a24:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   26a26:	4770      	bx	lr

00026a28 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   26a28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26a2c:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   26a2e:	4770      	bx	lr

00026a30 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   26a30:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   26a32:	2402      	movs	r4, #2
   26a34:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
   26a36:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   26a38:	6809      	ldr	r1, [r1, #0]
   26a3a:	b171      	cbz	r1, 26a5a <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   26a3c:	f012 0f04 	tst.w	r2, #4
   26a40:	bf0c      	ite	eq
   26a42:	2182      	moveq	r1, #130	; 0x82
   26a44:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   26a46:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   26a48:	bf48      	it	mi
   26a4a:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   26a4e:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   26a50:	bf48      	it	mi
   26a52:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   26a56:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   26a5a:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a5c:	f04f 0100 	mov.w	r1, #0
   26a60:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a64:	bf58      	it	pl
   26a66:	2201      	movpl	r2, #1
   26a68:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
   26a6c:	bf56      	itet	pl
   26a6e:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   26a70:	18c0      	addmi	r0, r0, r3
    return 0;
   26a72:	4608      	movpl	r0, r1
}
   26a74:	bd10      	pop	{r4, pc}

00026a76 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   26a76:	f7fc be95 	b.w	237a4 <z_clock_idle_exit>

00026a7a <k_heap_init>:
{
   26a7a:	b410      	push	{r4}
   26a7c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   26a80:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26a84:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   26a86:	f7ec bc9b 	b.w	133c0 <sys_heap_init>

00026a8a <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   26a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a8c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   26a90:	6800      	ldr	r0, [r0, #0]
   26a92:	6048      	str	r0, [r1, #4]
{
   26a94:	4614      	mov	r4, r2
   26a96:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   26a98:	4632      	mov	r2, r6
   26a9a:	463b      	mov	r3, r7
   26a9c:	4621      	mov	r1, r4
   26a9e:	f7f9 fb29 	bl	200f4 <k_heap_alloc>
   26aa2:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   26aa4:	b144      	cbz	r4, 26ab8 <k_mem_pool_alloc+0x2e>
   26aa6:	b938      	cbnz	r0, 26ab8 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   26aa8:	ea56 0307 	orrs.w	r3, r6, r7
   26aac:	bf0c      	ite	eq
   26aae:	f06f 000b 	mvneq.w	r0, #11
   26ab2:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   26ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   26ab8:	2000      	movs	r0, #0
   26aba:	e7fc      	b.n	26ab6 <k_mem_pool_alloc+0x2c>

00026abc <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   26abc:	e9d0 1000 	ldrd	r1, r0, [r0]
   26ac0:	f7f9 bba6 	b.w	20210 <k_heap_free>

00026ac4 <z_impl_k_mutex_init>:
{
   26ac4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   26ac6:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   26ac8:	e9c3 0002 	strd	r0, r0, [r3, #8]
   26acc:	e9c3 3300 	strd	r3, r3, [r3]
}
   26ad0:	4770      	bx	lr

00026ad2 <z_queue_node_peek>:
{
   26ad2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   26ad4:	4604      	mov	r4, r0
   26ad6:	b130      	cbz	r0, 26ae6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26ad8:	6802      	ldr	r2, [r0, #0]
   26ada:	0793      	lsls	r3, r2, #30
   26adc:	d003      	beq.n	26ae6 <z_queue_node_peek+0x14>
		ret = anode->data;
   26ade:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26ae0:	b109      	cbz	r1, 26ae6 <z_queue_node_peek+0x14>
			k_free(anode);
   26ae2:	f000 f996 	bl	26e12 <k_free>
}
   26ae6:	4620      	mov	r0, r4
   26ae8:	bd10      	pop	{r4, pc}

00026aea <z_impl_k_queue_init>:
	list->head = NULL;
   26aea:	2300      	movs	r3, #0
	list->tail = NULL;
   26aec:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   26af0:	6083      	str	r3, [r0, #8]
   26af2:	f100 030c 	add.w	r3, r0, #12
   26af6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   26afa:	f100 0314 	add.w	r3, r0, #20
   26afe:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   26b02:	4770      	bx	lr

00026b04 <k_queue_append>:
{
   26b04:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   26b06:	2301      	movs	r3, #1
   26b08:	9300      	str	r3, [sp, #0]
   26b0a:	2300      	movs	r3, #0
{
   26b0c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26b0e:	4619      	mov	r1, r3
   26b10:	f7f9 fe0e 	bl	20730 <queue_insert>
}
   26b14:	b003      	add	sp, #12
   26b16:	f85d fb04 	ldr.w	pc, [sp], #4

00026b1a <k_queue_prepend>:
{
   26b1a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26b1c:	2300      	movs	r3, #0
{
   26b1e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26b20:	9300      	str	r3, [sp, #0]
   26b22:	4619      	mov	r1, r3
   26b24:	f7f9 fe04 	bl	20730 <queue_insert>
}
   26b28:	b003      	add	sp, #12
   26b2a:	f85d fb04 	ldr.w	pc, [sp], #4

00026b2e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   26b2e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   26b32:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   26b36:	4298      	cmp	r0, r3
   26b38:	bfac      	ite	ge
   26b3a:	2000      	movge	r0, #0
   26b3c:	2001      	movlt	r0, #1
   26b3e:	4770      	bx	lr

00026b40 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26b40:	4603      	mov	r3, r0
   26b42:	b920      	cbnz	r0, 26b4e <z_reschedule_irqlock+0xe>
   26b44:	f3ef 8205 	mrs	r2, IPSR
   26b48:	b90a      	cbnz	r2, 26b4e <z_reschedule_irqlock+0xe>
   26b4a:	f7ee bb85 	b.w	15258 <arch_swap>
   26b4e:	f383 8811 	msr	BASEPRI, r3
   26b52:	f3bf 8f6f 	isb	sy
}
   26b56:	4770      	bx	lr

00026b58 <z_reschedule_unlocked>:
	__asm__ volatile(
   26b58:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b5c:	f3ef 8011 	mrs	r0, BASEPRI
   26b60:	f383 8811 	msr	BASEPRI, r3
   26b64:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26b68:	f7ff bfea 	b.w	26b40 <z_reschedule_irqlock>

00026b6c <unpend_thread_no_timeout>:
{
   26b6c:	b510      	push	{r4, lr}
   26b6e:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   26b70:	3008      	adds	r0, #8
   26b72:	f7f9 ff15 	bl	209a0 <pended_on.isra.0>
   26b76:	4621      	mov	r1, r4
   26b78:	f7fa f81a 	bl	20bb0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26b7c:	7b63      	ldrb	r3, [r4, #13]
   26b7e:	f023 0302 	bic.w	r3, r3, #2
   26b82:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26b84:	2300      	movs	r3, #0
   26b86:	60a3      	str	r3, [r4, #8]
}
   26b88:	bd10      	pop	{r4, pc}

00026b8a <z_priq_dumb_best>:
{
   26b8a:	4603      	mov	r3, r0
	return list->head == list;
   26b8c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b8e:	4283      	cmp	r3, r0
   26b90:	d003      	beq.n	26b9a <z_priq_dumb_best+0x10>
	if (n != NULL) {
   26b92:	2800      	cmp	r0, #0
   26b94:	bf38      	it	cc
   26b96:	2000      	movcc	r0, #0
   26b98:	4770      	bx	lr
	struct k_thread *thread = NULL;
   26b9a:	2000      	movs	r0, #0
}
   26b9c:	4770      	bx	lr

00026b9e <z_unpend_all>:
{
   26b9e:	b538      	push	{r3, r4, r5, lr}
   26ba0:	4605      	mov	r5, r0
	int need_sched = 0;
   26ba2:	2000      	movs	r0, #0
	return list->head == list;
   26ba4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26ba6:	42a5      	cmp	r5, r4
   26ba8:	d000      	beq.n	26bac <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26baa:	b904      	cbnz	r4, 26bae <z_unpend_all+0x10>
}
   26bac:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   26bae:	4620      	mov	r0, r4
   26bb0:	f7fa f82a 	bl	20c08 <z_unpend_thread>
		z_ready_thread(thread);
   26bb4:	4620      	mov	r0, r4
   26bb6:	f7fa f947 	bl	20e48 <z_ready_thread>
		need_sched = 1;
   26bba:	2001      	movs	r0, #1
   26bbc:	e7f2      	b.n	26ba4 <z_unpend_all+0x6>

00026bbe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   26bbe:	b15a      	cbz	r2, 26bd8 <z_impl_k_sem_init+0x1a>
   26bc0:	428a      	cmp	r2, r1
   26bc2:	d309      	bcc.n	26bd8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   26bc4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   26bc8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   26bcc:	e9c0 0000 	strd	r0, r0, [r0]
   26bd0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   26bd4:	2000      	movs	r0, #0
   26bd6:	4770      	bx	lr
		return -EINVAL;
   26bd8:	f06f 0015 	mvn.w	r0, #21
}
   26bdc:	4770      	bx	lr

00026bde <k_is_in_isr>:
   26bde:	f3ef 8005 	mrs	r0, IPSR
}
   26be2:	3800      	subs	r0, #0
   26be4:	bf18      	it	ne
   26be6:	2001      	movne	r0, #1
   26be8:	4770      	bx	lr

00026bea <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   26bea:	b108      	cbz	r0, 26bf0 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   26bec:	f7ef b85c 	b.w	15ca8 <arch_busy_wait>
}
   26bf0:	4770      	bx	lr

00026bf2 <z_impl_k_thread_name_set>:
}
   26bf2:	f06f 0046 	mvn.w	r0, #70	; 0x46
   26bf6:	4770      	bx	lr

00026bf8 <k_thread_name_get>:
}
   26bf8:	2000      	movs	r0, #0
   26bfa:	4770      	bx	lr

00026bfc <k_work_submit_to_queue>:
{
   26bfc:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26bfe:	f101 0308 	add.w	r3, r1, #8
   26c02:	f3bf 8f5b 	dmb	ish
   26c06:	e853 2f00 	ldrex	r2, [r3]
   26c0a:	f042 0c01 	orr.w	ip, r2, #1
   26c0e:	e843 ce00 	strex	lr, ip, [r3]
   26c12:	f1be 0f00 	cmp.w	lr, #0
   26c16:	d1f6      	bne.n	26c06 <k_work_submit_to_queue+0xa>
   26c18:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   26c1c:	07d3      	lsls	r3, r2, #31
   26c1e:	d403      	bmi.n	26c28 <k_work_submit_to_queue+0x2c>
}
   26c20:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   26c24:	f7ff bf6e 	b.w	26b04 <k_queue_append>
}
   26c28:	f85d fb04 	ldr.w	pc, [sp], #4

00026c2c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   26c2c:	f1a0 0110 	sub.w	r1, r0, #16
   26c30:	6980      	ldr	r0, [r0, #24]
   26c32:	f7ff bfe3 	b.w	26bfc <k_work_submit_to_queue>

00026c36 <work_cancel>:
{
   26c36:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26c38:	f3bf 8f5b 	dmb	ish
   26c3c:	6883      	ldr	r3, [r0, #8]
   26c3e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   26c42:	07db      	lsls	r3, r3, #31
{
   26c44:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   26c46:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   26c4a:	d532      	bpl.n	26cb2 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   26c4c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   26c4e:	6813      	ldr	r3, [r2, #0]
   26c50:	2100      	movs	r1, #0
   26c52:	b913      	cbnz	r3, 26c5a <work_cancel+0x24>
			return -EINVAL;
   26c54:	f06f 0015 	mvn.w	r0, #21
}
   26c58:	bd70      	pop	{r4, r5, r6, pc}
   26c5a:	429c      	cmp	r4, r3
   26c5c:	d124      	bne.n	26ca8 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   26c5e:	6823      	ldr	r3, [r4, #0]
   26c60:	6856      	ldr	r6, [r2, #4]
   26c62:	f023 0003 	bic.w	r0, r3, #3
   26c66:	b9b1      	cbnz	r1, 26c96 <work_cancel+0x60>
   26c68:	42b4      	cmp	r4, r6
	list->head = node;
   26c6a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   26c6c:	d100      	bne.n	26c70 <work_cancel+0x3a>
	list->tail = node;
   26c6e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26c70:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26c72:	f003 0303 	and.w	r3, r3, #3
   26c76:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   26c78:	2000      	movs	r0, #0
   26c7a:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26c7c:	f3bf 8f5b 	dmb	ish
   26c80:	e855 3f00 	ldrex	r3, [r5]
   26c84:	f023 0301 	bic.w	r3, r3, #1
   26c88:	e845 3200 	strex	r2, r3, [r5]
   26c8c:	2a00      	cmp	r2, #0
   26c8e:	d1f7      	bne.n	26c80 <work_cancel+0x4a>
   26c90:	f3bf 8f5b 	dmb	ish
   26c94:	e7e0      	b.n	26c58 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26c96:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26c98:	f003 0303 	and.w	r3, r3, #3
   26c9c:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   26c9e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   26ca0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   26ca2:	bf08      	it	eq
   26ca4:	6051      	streq	r1, [r2, #4]
}
   26ca6:	e7e3      	b.n	26c70 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26ca8:	6818      	ldr	r0, [r3, #0]
   26caa:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   26cac:	f020 0303 	bic.w	r3, r0, #3
   26cb0:	e7cf      	b.n	26c52 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   26cb2:	3010      	adds	r0, #16
   26cb4:	f7fb fac2 	bl	2223c <z_abort_timeout>
		if (err) {
   26cb8:	2800      	cmp	r0, #0
   26cba:	d0dd      	beq.n	26c78 <work_cancel+0x42>
			return -EALREADY;
   26cbc:	f06f 0044 	mvn.w	r0, #68	; 0x44
   26cc0:	e7ca      	b.n	26c58 <work_cancel+0x22>

00026cc2 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   26cc2:	2300      	movs	r3, #0
   26cc4:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   26cc8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   26ccc:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   26cce:	6283      	str	r3, [r0, #40]	; 0x28
}
   26cd0:	4770      	bx	lr

00026cd2 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   26cd2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   26cd4:	f7fb fc1a 	bl	2250c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   26cd8:	bd08      	pop	{r3, pc}

00026cda <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   26cda:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26cdc:	1c4b      	adds	r3, r1, #1
   26cde:	bf08      	it	eq
   26ce0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   26ce4:	4604      	mov	r4, r0
   26ce6:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26ce8:	d013      	beq.n	26d12 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26cea:	ea54 0105 	orrs.w	r1, r4, r5
   26cee:	d103      	bne.n	26cf8 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   26cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   26cf4:	f7fb bc0a 	b.w	2250c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   26cf8:	f06f 0101 	mvn.w	r1, #1
   26cfc:	1a0a      	subs	r2, r1, r0
   26cfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26d02:	eb61 0305 	sbc.w	r3, r1, r5
   26d06:	2a00      	cmp	r2, #0
   26d08:	f173 0100 	sbcs.w	r1, r3, #0
   26d0c:	db02      	blt.n	26d14 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   26d0e:	4610      	mov	r0, r2
   26d10:	4619      	mov	r1, r3
}
   26d12:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   26d14:	f7fb fbfa 	bl	2250c <z_tick_get>
   26d18:	2c01      	cmp	r4, #1
   26d1a:	f175 0300 	sbcs.w	r3, r5, #0
   26d1e:	bfbc      	itt	lt
   26d20:	2401      	movlt	r4, #1
   26d22:	2500      	movlt	r5, #0
   26d24:	1820      	adds	r0, r4, r0
   26d26:	eb45 0101 	adc.w	r1, r5, r1
   26d2a:	e7f2      	b.n	26d12 <z_timeout_end_calc+0x38>

00026d2c <k_work_submit_to_queue>:
{
   26d2c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26d2e:	f101 0308 	add.w	r3, r1, #8
   26d32:	f3bf 8f5b 	dmb	ish
   26d36:	e853 2f00 	ldrex	r2, [r3]
   26d3a:	f042 0c01 	orr.w	ip, r2, #1
   26d3e:	e843 ce00 	strex	lr, ip, [r3]
   26d42:	f1be 0f00 	cmp.w	lr, #0
   26d46:	d1f6      	bne.n	26d36 <k_work_submit_to_queue+0xa>
   26d48:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   26d4c:	07d3      	lsls	r3, r2, #31
   26d4e:	d403      	bmi.n	26d58 <k_work_submit_to_queue+0x2c>
}
   26d50:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   26d54:	f7ff bed6 	b.w	26b04 <k_queue_append>
}
   26d58:	f85d fb04 	ldr.w	pc, [sp], #4

00026d5c <add_event>:
{
   26d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d5e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26d60:	e9d0 2300 	ldrd	r2, r3, [r0]
   26d64:	4290      	cmp	r0, r2
   26d66:	4604      	mov	r4, r0
   26d68:	460d      	mov	r5, r1
   26d6a:	d106      	bne.n	26d7a <add_event+0x1e>
	node->prev = list->tail;
   26d6c:	6863      	ldr	r3, [r4, #4]
   26d6e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   26d70:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   26d72:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   26d74:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26d76:	6065      	str	r5, [r4, #4]
}
   26d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   26d7a:	2b00      	cmp	r3, #0
   26d7c:	d0f6      	beq.n	26d6c <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   26d7e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26d80:	b100      	cbz	r0, 26d84 <add_event+0x28>
   26d82:	386c      	subs	r0, #108	; 0x6c
   26d84:	b107      	cbz	r7, 26d88 <add_event+0x2c>
   26d86:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   26d88:	4639      	mov	r1, r7
   26d8a:	f7ff fed0 	bl	26b2e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   26d8e:	2800      	cmp	r0, #0
   26d90:	d1ec      	bne.n	26d6c <add_event+0x10>
	return list->head == list;
   26d92:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26d94:	42b4      	cmp	r4, r6
   26d96:	d0e9      	beq.n	26d6c <add_event+0x10>
   26d98:	2e00      	cmp	r6, #0
   26d9a:	bf38      	it	cc
   26d9c:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   26d9e:	2e00      	cmp	r6, #0
   26da0:	d0e4      	beq.n	26d6c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   26da2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26da4:	b101      	cbz	r1, 26da8 <add_event+0x4c>
   26da6:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   26da8:	4638      	mov	r0, r7
   26daa:	f7ff fec0 	bl	26b2e <z_is_t1_higher_prio_than_t2>
   26dae:	b128      	cbz	r0, 26dbc <add_event+0x60>
	node->prev = successor->prev;
   26db0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   26db2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   26db6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26db8:	6075      	str	r5, [r6, #4]
			return;
   26dba:	e7dd      	b.n	26d78 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   26dbc:	6863      	ldr	r3, [r4, #4]
   26dbe:	42b3      	cmp	r3, r6
   26dc0:	d0d4      	beq.n	26d6c <add_event+0x10>
   26dc2:	6836      	ldr	r6, [r6, #0]
   26dc4:	e7eb      	b.n	26d9e <add_event+0x42>

00026dc6 <z_handle_obj_poll_events>:
{
   26dc6:	4603      	mov	r3, r0
	return list->head == list;
   26dc8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   26dca:	4283      	cmp	r3, r0
   26dcc:	d008      	beq.n	26de0 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   26dce:	e9d0 3200 	ldrd	r3, r2, [r0]
   26dd2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   26dd4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26dd6:	2300      	movs	r3, #0
	node->prev = NULL;
   26dd8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   26ddc:	f7fb bc5a 	b.w	22694 <signal_poll_event>
}
   26de0:	4770      	bx	lr

00026de2 <k_mem_pool_malloc>:
{
   26de2:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   26de4:	2408      	movs	r4, #8
   26de6:	190a      	adds	r2, r1, r4
   26de8:	d208      	bcs.n	26dfc <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   26dea:	2600      	movs	r6, #0
   26dec:	2700      	movs	r7, #0
   26dee:	e9cd 6700 	strd	r6, r7, [sp]
   26df2:	eb0d 0104 	add.w	r1, sp, r4
   26df6:	f7ff fe48 	bl	26a8a <k_mem_pool_alloc>
   26dfa:	b110      	cbz	r0, 26e02 <k_mem_pool_malloc+0x20>
		return NULL;
   26dfc:	2000      	movs	r0, #0
}
   26dfe:	b004      	add	sp, #16
   26e00:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   26e02:	9802      	ldr	r0, [sp, #8]
   26e04:	4622      	mov	r2, r4
   26e06:	a902      	add	r1, sp, #8
   26e08:	f7fd fe5c 	bl	24ac4 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   26e0c:	9802      	ldr	r0, [sp, #8]
   26e0e:	3008      	adds	r0, #8
   26e10:	e7f5      	b.n	26dfe <k_mem_pool_malloc+0x1c>

00026e12 <k_free>:
	if (ptr != NULL) {
   26e12:	b110      	cbz	r0, 26e1a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   26e14:	3808      	subs	r0, #8
   26e16:	f7ff be51 	b.w	26abc <k_mem_pool_free_id>
}
   26e1a:	4770      	bx	lr

00026e1c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   26e1c:	4770      	bx	lr
